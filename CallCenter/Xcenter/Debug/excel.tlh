// Created by Microsoft (R) C/C++ Compiler Version 12.00.9782.0 (8ede1839).
//
// e:\vcÖªÊ¶¿â\callcenter\xcenter\debug\excel.tlh
//
// C++ source equivalent of Win32 type library C:\Program Files\Microsoft Office\OFFICE10\excel.exe
// compiler-generated file created 09/26/09 at 04:10:47 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//  #import "C:\Program Files\Common Files\Microsoft Shared\Office10\MSO.DLL"
//  #import "C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB"
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace Excel {

//
// Forward references and typedefs
//

struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
/* dual interface */ Adjustments;
struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
/* dual interface */ CalloutFormat;
struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
/* dual interface */ ColorFormat;
struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
/* dual interface */ LineFormat;
struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNode;
struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNodes;
struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
/* dual interface */ PictureFormat;
struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
/* dual interface */ ShadowFormat;
struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
/* dual interface */ TextEffectFormat;
struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
/* dual interface */ ThreeDFormat;
struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
/* dual interface */ FillFormat;
struct __declspec(uuid("000c036e-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNodes;
struct __declspec(uuid("000c036f-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNodeChildren;
struct __declspec(uuid("000c0370-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNode;
struct __declspec(uuid("a43788c1-d91b-11d3-8f39-00c04f3651b8"))
/* dual interface */ IRTDUpdateEvent;
struct __declspec(uuid("ec0e6191-db51-11d3-8f3e-00c04f3651b8"))
/* dual interface */ IRtdServer;
struct __declspec(uuid("00020893-0001-0000-c000-000000000046"))
/* interface */ IWindow;
struct __declspec(uuid("00020892-0001-0000-c000-000000000046"))
/* interface */ IWindows;
struct __declspec(uuid("00024413-0001-0000-c000-000000000046"))
/* interface */ IAppEvents;
struct __declspec(uuid("000208d5-0000-0000-c000-000000000046"))
/* dual interface */ _Application;
struct __declspec(uuid("00020845-0001-0000-c000-000000000046"))
/* interface */ IWorksheetFunction;
struct __declspec(uuid("00020846-0001-0000-c000-000000000046"))
/* interface */ IRange;
struct __declspec(uuid("0002440f-0001-0000-c000-000000000046"))
/* interface */ IChartEvents;
struct __declspec(uuid("000208d6-0000-0000-c000-000000000046"))
/* dual interface */ _Chart;
struct __declspec(uuid("000208d7-0000-0000-c000-000000000046"))
/* dual interface */ Sheets;
struct __declspec(uuid("00024402-0001-0000-c000-000000000046"))
/* interface */ IVPageBreak;
struct __declspec(uuid("00024401-0001-0000-c000-000000000046"))
/* interface */ IHPageBreak;
struct __declspec(uuid("00024404-0001-0000-c000-000000000046"))
/* interface */ IHPageBreaks;
struct __declspec(uuid("00024405-0001-0000-c000-000000000046"))
/* interface */ IVPageBreaks;
struct __declspec(uuid("00024407-0001-0000-c000-000000000046"))
/* interface */ IRecentFile;
struct __declspec(uuid("00024406-0001-0000-c000-000000000046"))
/* interface */ IRecentFiles;
struct __declspec(uuid("00024411-0001-0000-c000-000000000046"))
/* interface */ IDocEvents;
struct __declspec(uuid("000208d8-0000-0000-c000-000000000046"))
/* dual interface */ _Worksheet;
struct __declspec(uuid("00020852-0001-0000-c000-000000000046"))
/* interface */ IStyle;
struct __declspec(uuid("00020853-0001-0000-c000-000000000046"))
/* interface */ IStyles;
struct __declspec(uuid("00020855-0001-0000-c000-000000000046"))
/* interface */ IBorders;
struct __declspec(uuid("000208d9-0000-0000-c000-000000000046"))
/* dual interface */ _Global;
struct __declspec(uuid("00020857-0001-0000-c000-000000000046"))
/* interface */ IAddIn;
struct __declspec(uuid("00020858-0001-0000-c000-000000000046"))
/* interface */ IAddIns;
struct __declspec(uuid("0002085c-0001-0000-c000-000000000046"))
/* interface */ IToolbar;
struct __declspec(uuid("0002085d-0001-0000-c000-000000000046"))
/* interface */ IToolbars;
struct __declspec(uuid("0002085e-0001-0000-c000-000000000046"))
/* interface */ IToolbarButton;
struct __declspec(uuid("0002085f-0001-0000-c000-000000000046"))
/* interface */ IToolbarButtons;
struct __declspec(uuid("00020860-0001-0000-c000-000000000046"))
/* interface */ IAreas;
struct __declspec(uuid("00024412-0001-0000-c000-000000000046"))
/* interface */ IWorkbookEvents;
struct __declspec(uuid("000208da-0000-0000-c000-000000000046"))
/* dual interface */ _Workbook;
struct __declspec(uuid("000208db-0000-0000-c000-000000000046"))
/* dual interface */ Workbooks;
struct __declspec(uuid("00020863-0001-0000-c000-000000000046"))
/* interface */ IMenuBars;
struct __declspec(uuid("00020864-0001-0000-c000-000000000046"))
/* interface */ IMenuBar;
struct __declspec(uuid("00020865-0001-0000-c000-000000000046"))
/* interface */ IMenus;
struct __declspec(uuid("00020866-0001-0000-c000-000000000046"))
/* interface */ IMenu;
struct __declspec(uuid("00020867-0001-0000-c000-000000000046"))
/* interface */ IMenuItems;
struct __declspec(uuid("00020868-0001-0000-c000-000000000046"))
/* interface */ IMenuItem;
struct __declspec(uuid("0002086d-0001-0000-c000-000000000046"))
/* interface */ ICharts;
struct __declspec(uuid("0002086f-0001-0000-c000-000000000046"))
/* interface */ IDrawingObjects;
struct __declspec(uuid("0002441c-0001-0000-c000-000000000046"))
/* interface */ IPivotCache;
struct __declspec(uuid("0002441d-0001-0000-c000-000000000046"))
/* interface */ IPivotCaches;
struct __declspec(uuid("0002441e-0001-0000-c000-000000000046"))
/* interface */ IPivotFormula;
struct __declspec(uuid("0002441f-0001-0000-c000-000000000046"))
/* interface */ IPivotFormulas;
struct __declspec(uuid("00020872-0001-0000-c000-000000000046"))
/* interface */ IPivotTable;
struct __declspec(uuid("00020873-0001-0000-c000-000000000046"))
/* interface */ IPivotTables;
struct __declspec(uuid("00020874-0001-0000-c000-000000000046"))
/* interface */ IPivotField;
struct __declspec(uuid("00020875-0001-0000-c000-000000000046"))
/* interface */ IPivotFields;
struct __declspec(uuid("00024420-0001-0000-c000-000000000046"))
/* interface */ ICalculatedFields;
struct __declspec(uuid("00020876-0001-0000-c000-000000000046"))
/* interface */ IPivotItem;
struct __declspec(uuid("00020877-0001-0000-c000-000000000046"))
/* interface */ IPivotItems;
struct __declspec(uuid("00024421-0001-0000-c000-000000000046"))
/* interface */ ICalculatedItems;
struct __declspec(uuid("00020878-0001-0000-c000-000000000046"))
/* interface */ ICharacters;
struct __declspec(uuid("00020879-0001-0000-c000-000000000046"))
/* interface */ IDialogs;
struct __declspec(uuid("0002087a-0001-0000-c000-000000000046"))
/* interface */ IDialog;
struct __declspec(uuid("0002087b-0001-0000-c000-000000000046"))
/* interface */ ISoundNote;
struct __declspec(uuid("0002087d-0001-0000-c000-000000000046"))
/* interface */ IButton;
struct __declspec(uuid("0002087e-0001-0000-c000-000000000046"))
/* interface */ IButtons;
struct __declspec(uuid("0002087f-0001-0000-c000-000000000046"))
/* interface */ ICheckBox;
struct __declspec(uuid("00020880-0001-0000-c000-000000000046"))
/* interface */ ICheckBoxes;
struct __declspec(uuid("00020881-0001-0000-c000-000000000046"))
/* interface */ IOptionButton;
struct __declspec(uuid("00020882-0001-0000-c000-000000000046"))
/* interface */ IOptionButtons;
struct __declspec(uuid("00020883-0001-0000-c000-000000000046"))
/* interface */ IEditBox;
struct __declspec(uuid("00020884-0001-0000-c000-000000000046"))
/* interface */ IEditBoxes;
struct __declspec(uuid("00020885-0001-0000-c000-000000000046"))
/* interface */ IScrollBar;
struct __declspec(uuid("00020886-0001-0000-c000-000000000046"))
/* interface */ IScrollBars;
struct __declspec(uuid("00020887-0001-0000-c000-000000000046"))
/* interface */ IListBox;
struct __declspec(uuid("00020888-0001-0000-c000-000000000046"))
/* interface */ IListBoxes;
struct __declspec(uuid("00020889-0001-0000-c000-000000000046"))
/* interface */ IGroupBox;
struct __declspec(uuid("0002088a-0001-0000-c000-000000000046"))
/* interface */ IGroupBoxes;
struct __declspec(uuid("0002088b-0001-0000-c000-000000000046"))
/* interface */ IDropDown;
struct __declspec(uuid("0002088c-0001-0000-c000-000000000046"))
/* interface */ IDropDowns;
struct __declspec(uuid("0002088d-0001-0000-c000-000000000046"))
/* interface */ ISpinner;
struct __declspec(uuid("0002088e-0001-0000-c000-000000000046"))
/* interface */ ISpinners;
struct __declspec(uuid("0002088f-0001-0000-c000-000000000046"))
/* interface */ IDialogFrame;
struct __declspec(uuid("00020890-0001-0000-c000-000000000046"))
/* interface */ ILabel;
struct __declspec(uuid("00020891-0001-0000-c000-000000000046"))
/* interface */ ILabels;
struct __declspec(uuid("00020894-0001-0000-c000-000000000046"))
/* interface */ IPanes;
struct __declspec(uuid("00020895-0001-0000-c000-000000000046"))
/* interface */ IPane;
struct __declspec(uuid("00020896-0001-0000-c000-000000000046"))
/* interface */ IScenarios;
struct __declspec(uuid("00020897-0001-0000-c000-000000000046"))
/* interface */ IScenario;
struct __declspec(uuid("00020898-0001-0000-c000-000000000046"))
/* interface */ IGroupObject;
struct __declspec(uuid("00020899-0001-0000-c000-000000000046"))
/* interface */ IGroupObjects;
struct __declspec(uuid("0002089a-0001-0000-c000-000000000046"))
/* interface */ ILine;
struct __declspec(uuid("0002089b-0001-0000-c000-000000000046"))
/* interface */ ILines;
struct __declspec(uuid("0002089c-0001-0000-c000-000000000046"))
/* interface */ IRectangle;
struct __declspec(uuid("0002089d-0001-0000-c000-000000000046"))
/* interface */ IRectangles;
struct __declspec(uuid("0002089e-0001-0000-c000-000000000046"))
/* interface */ IOval;
struct __declspec(uuid("0002089f-0001-0000-c000-000000000046"))
/* interface */ IOvals;
struct __declspec(uuid("000208a0-0001-0000-c000-000000000046"))
/* interface */ IArc;
struct __declspec(uuid("000208a1-0001-0000-c000-000000000046"))
/* interface */ IArcs;
struct __declspec(uuid("00024410-0001-0000-c000-000000000046"))
/* interface */ IOLEObjectEvents;
struct __declspec(uuid("000208a2-0001-0000-c000-000000000046"))
/* interface */ _IOLEObject;
struct __declspec(uuid("000208a3-0001-0000-c000-000000000046"))
/* interface */ IOLEObjects;
struct __declspec(uuid("000208a4-0001-0000-c000-000000000046"))
/* interface */ ITextBox;
struct __declspec(uuid("000208a5-0001-0000-c000-000000000046"))
/* interface */ ITextBoxes;
struct __declspec(uuid("000208a7-0001-0000-c000-000000000046"))
/* interface */ IPictures;
struct __declspec(uuid("000208a8-0001-0000-c000-000000000046"))
/* interface */ IDrawing;
struct __declspec(uuid("000208a9-0001-0000-c000-000000000046"))
/* interface */ IDrawings;
struct __declspec(uuid("000208aa-0001-0000-c000-000000000046"))
/* interface */ IRoutingSlip;
struct __declspec(uuid("000208ab-0001-0000-c000-000000000046"))
/* interface */ IOutline;
struct __declspec(uuid("000208ad-0001-0000-c000-000000000046"))
/* interface */ IModule;
struct __declspec(uuid("000208ae-0001-0000-c000-000000000046"))
/* interface */ IModules;
struct __declspec(uuid("000208af-0001-0000-c000-000000000046"))
/* interface */ IDialogSheet;
struct __declspec(uuid("000208b0-0001-0000-c000-000000000046"))
/* interface */ IDialogSheets;
struct __declspec(uuid("000208b1-0001-0000-c000-000000000046"))
/* interface */ IWorksheets;
struct __declspec(uuid("000208b4-0001-0000-c000-000000000046"))
/* interface */ IPageSetup;
struct __declspec(uuid("000208b8-0001-0000-c000-000000000046"))
/* interface */ INames;
struct __declspec(uuid("000208b9-0001-0000-c000-000000000046"))
/* interface */ IName;
struct __declspec(uuid("000208cf-0001-0000-c000-000000000046"))
/* interface */ IChartObject;
struct __declspec(uuid("000208d0-0001-0000-c000-000000000046"))
/* interface */ IChartObjects;
struct __declspec(uuid("000208d1-0001-0000-c000-000000000046"))
/* interface */ IMailer;
struct __declspec(uuid("00024422-0001-0000-c000-000000000046"))
/* interface */ ICustomViews;
struct __declspec(uuid("00024423-0001-0000-c000-000000000046"))
/* interface */ ICustomView;
struct __declspec(uuid("00024424-0001-0000-c000-000000000046"))
/* interface */ IFormatConditions;
struct __declspec(uuid("00024425-0001-0000-c000-000000000046"))
/* interface */ IFormatCondition;
struct __declspec(uuid("00024426-0001-0000-c000-000000000046"))
/* interface */ IComments;
struct __declspec(uuid("00024427-0001-0000-c000-000000000046"))
/* interface */ IComment;
struct __declspec(uuid("0002441b-0001-0000-c000-000000000046"))
/* interface */ IRefreshEvents;
struct __declspec(uuid("00024428-0001-0000-c000-000000000046"))
/* interface */ _IQueryTable;
struct __declspec(uuid("00024429-0001-0000-c000-000000000046"))
/* interface */ IQueryTables;
struct __declspec(uuid("0002442a-0001-0000-c000-000000000046"))
/* interface */ IParameter;
struct __declspec(uuid("0002442b-0001-0000-c000-000000000046"))
/* interface */ IParameters;
struct __declspec(uuid("0002442c-0001-0000-c000-000000000046"))
/* interface */ IODBCError;
struct __declspec(uuid("0002442d-0001-0000-c000-000000000046"))
/* interface */ IODBCErrors;
struct __declspec(uuid("0002442f-0001-0000-c000-000000000046"))
/* interface */ IValidation;
struct __declspec(uuid("00024430-0001-0000-c000-000000000046"))
/* interface */ IHyperlinks;
struct __declspec(uuid("00024431-0001-0000-c000-000000000046"))
/* interface */ IHyperlink;
struct __declspec(uuid("00024432-0001-0000-c000-000000000046"))
/* interface */ IAutoFilter;
struct __declspec(uuid("00024433-0001-0000-c000-000000000046"))
/* interface */ IFilters;
struct __declspec(uuid("00024434-0001-0000-c000-000000000046"))
/* interface */ IFilter;
struct __declspec(uuid("000208d4-0001-0000-c000-000000000046"))
/* interface */ IAutoCorrect;
struct __declspec(uuid("00020854-0001-0000-c000-000000000046"))
/* interface */ IBorder;
struct __declspec(uuid("00020870-0001-0000-c000-000000000046"))
/* interface */ IInterior;
struct __declspec(uuid("00024435-0001-0000-c000-000000000046"))
/* interface */ IChartFillFormat;
struct __declspec(uuid("00024436-0001-0000-c000-000000000046"))
/* interface */ IChartColorFormat;
struct __declspec(uuid("00020848-0001-0000-c000-000000000046"))
/* interface */ IAxis;
struct __declspec(uuid("00020849-0001-0000-c000-000000000046"))
/* interface */ IChartTitle;
struct __declspec(uuid("0002084a-0001-0000-c000-000000000046"))
/* interface */ IAxisTitle;
struct __declspec(uuid("00020859-0001-0000-c000-000000000046"))
/* interface */ IChartGroup;
struct __declspec(uuid("0002085a-0001-0000-c000-000000000046"))
/* interface */ IChartGroups;
struct __declspec(uuid("0002085b-0001-0000-c000-000000000046"))
/* interface */ IAxes;
struct __declspec(uuid("00020869-0001-0000-c000-000000000046"))
/* interface */ IPoints;
struct __declspec(uuid("0002086a-0001-0000-c000-000000000046"))
/* interface */ IPoint;
struct __declspec(uuid("0002086b-0001-0000-c000-000000000046"))
/* interface */ ISeries;
struct __declspec(uuid("0002086c-0001-0000-c000-000000000046"))
/* interface */ ISeriesCollection;
struct __declspec(uuid("000208b2-0001-0000-c000-000000000046"))
/* interface */ IDataLabel;
struct __declspec(uuid("000208b3-0001-0000-c000-000000000046"))
/* interface */ IDataLabels;
struct __declspec(uuid("000208ba-0001-0000-c000-000000000046"))
/* interface */ ILegendEntry;
struct __declspec(uuid("000208bb-0001-0000-c000-000000000046"))
/* interface */ ILegendEntries;
struct __declspec(uuid("000208bc-0001-0000-c000-000000000046"))
/* interface */ ILegendKey;
struct __declspec(uuid("000208bd-0001-0000-c000-000000000046"))
/* interface */ ITrendlines;
struct __declspec(uuid("000208be-0001-0000-c000-000000000046"))
/* interface */ ITrendline;
struct __declspec(uuid("000208c0-0001-0000-c000-000000000046"))
/* interface */ ICorners;
struct __declspec(uuid("000208c1-0001-0000-c000-000000000046"))
/* interface */ ISeriesLines;
struct __declspec(uuid("000208c2-0001-0000-c000-000000000046"))
/* interface */ IHiLoLines;
struct __declspec(uuid("000208c3-0001-0000-c000-000000000046"))
/* interface */ IGridlines;
struct __declspec(uuid("000208c4-0001-0000-c000-000000000046"))
/* interface */ IDropLines;
struct __declspec(uuid("00024437-0001-0000-c000-000000000046"))
/* interface */ ILeaderLines;
struct __declspec(uuid("000208c5-0001-0000-c000-000000000046"))
/* interface */ IUpBars;
struct __declspec(uuid("000208c6-0001-0000-c000-000000000046"))
/* interface */ IDownBars;
struct __declspec(uuid("000208c7-0001-0000-c000-000000000046"))
/* interface */ IFloor;
struct __declspec(uuid("000208c8-0001-0000-c000-000000000046"))
/* interface */ IWalls;
struct __declspec(uuid("000208c9-0001-0000-c000-000000000046"))
/* interface */ ITickLabels;
struct __declspec(uuid("000208cb-0001-0000-c000-000000000046"))
/* interface */ IPlotArea;
struct __declspec(uuid("000208cc-0001-0000-c000-000000000046"))
/* interface */ IChartArea;
struct __declspec(uuid("000208cd-0001-0000-c000-000000000046"))
/* interface */ ILegend;
struct __declspec(uuid("000208ce-0001-0000-c000-000000000046"))
/* interface */ IErrorBars;
struct __declspec(uuid("00020843-0001-0000-c000-000000000046"))
/* interface */ IDataTable;
struct __declspec(uuid("00024438-0001-0000-c000-000000000046"))
/* interface */ IPhonetic;
struct __declspec(uuid("00024439-0001-0000-c000-000000000046"))
/* interface */ IShape;
struct __declspec(uuid("0002443a-0001-0000-c000-000000000046"))
/* interface */ IShapes;
struct __declspec(uuid("0002443b-0001-0000-c000-000000000046"))
/* interface */ IShapeRange;
struct __declspec(uuid("0002443c-0001-0000-c000-000000000046"))
/* interface */ IGroupShapes;
struct __declspec(uuid("0002443d-0001-0000-c000-000000000046"))
/* interface */ ITextFrame;
struct __declspec(uuid("0002443e-0001-0000-c000-000000000046"))
/* interface */ IConnectorFormat;
struct __declspec(uuid("0002443f-0001-0000-c000-000000000046"))
/* interface */ IFreeformBuilder;
struct __declspec(uuid("00024440-0001-0000-c000-000000000046"))
/* interface */ IControlFormat;
struct __declspec(uuid("00024441-0001-0000-c000-000000000046"))
/* interface */ IOLEFormat;
struct __declspec(uuid("00024442-0001-0000-c000-000000000046"))
/* interface */ ILinkFormat;
struct __declspec(uuid("00024443-0001-0000-c000-000000000046"))
/* interface */ IPublishObjects;
struct __declspec(uuid("00024444-0000-0000-c000-000000000046"))
/* dual interface */ PublishObject;
struct __declspec(uuid("00024445-0001-0000-c000-000000000046"))
/* interface */ IOLEDBError;
struct __declspec(uuid("00024446-0001-0000-c000-000000000046"))
/* interface */ IOLEDBErrors;
struct __declspec(uuid("00024447-0001-0000-c000-000000000046"))
/* interface */ IPhonetics;
struct __declspec(uuid("00024448-0000-0000-c000-000000000046"))
/* dual interface */ DefaultWebOptions;
struct __declspec(uuid("00024449-0000-0000-c000-000000000046"))
/* dual interface */ WebOptions;
struct __declspec(uuid("0002444a-0001-0000-c000-000000000046"))
/* interface */ IPivotLayout;
struct __declspec(uuid("0002444b-0000-0000-c000-000000000046"))
/* dual interface */ TreeviewControl;
struct __declspec(uuid("0002444c-0000-0000-c000-000000000046"))
/* dual interface */ CubeField;
struct __declspec(uuid("0002444d-0000-0000-c000-000000000046"))
/* dual interface */ CubeFields;
struct __declspec(uuid("0002084c-0001-0000-c000-000000000046"))
/* interface */ IDisplayUnitLabel;
struct __declspec(uuid("00024450-0001-0000-c000-000000000046"))
/* interface */ ICellFormat;
struct __declspec(uuid("00024451-0001-0000-c000-000000000046"))
/* interface */ IUsedObjects;
struct __declspec(uuid("00024452-0001-0000-c000-000000000046"))
/* interface */ ICustomProperties;
struct __declspec(uuid("00024453-0001-0000-c000-000000000046"))
/* interface */ ICustomProperty;
struct __declspec(uuid("00024454-0001-0000-c000-000000000046"))
/* interface */ ICalculatedMembers;
struct __declspec(uuid("00024455-0001-0000-c000-000000000046"))
/* interface */ ICalculatedMember;
struct __declspec(uuid("00024456-0001-0000-c000-000000000046"))
/* interface */ IWatches;
struct __declspec(uuid("00024457-0001-0000-c000-000000000046"))
/* interface */ IWatch;
struct __declspec(uuid("00024458-0001-0000-c000-000000000046"))
/* interface */ IPivotCell;
struct __declspec(uuid("00024459-0001-0000-c000-000000000046"))
/* interface */ IGraphic;
struct __declspec(uuid("0002445a-0001-0000-c000-000000000046"))
/* interface */ IAutoRecover;
struct __declspec(uuid("0002445b-0001-0000-c000-000000000046"))
/* interface */ IErrorCheckingOptions;
struct __declspec(uuid("0002445c-0001-0000-c000-000000000046"))
/* interface */ IErrors;
struct __declspec(uuid("0002445d-0001-0000-c000-000000000046"))
/* interface */ IError;
struct __declspec(uuid("0002445e-0001-0000-c000-000000000046"))
/* interface */ ISmartTagAction;
struct __declspec(uuid("0002445f-0001-0000-c000-000000000046"))
/* interface */ ISmartTagActions;
struct __declspec(uuid("00024460-0001-0000-c000-000000000046"))
/* interface */ ISmartTag;
struct __declspec(uuid("00024461-0001-0000-c000-000000000046"))
/* interface */ ISmartTags;
struct __declspec(uuid("00024462-0001-0000-c000-000000000046"))
/* interface */ ISmartTagRecognizer;
struct __declspec(uuid("00024463-0001-0000-c000-000000000046"))
/* interface */ ISmartTagRecognizers;
struct __declspec(uuid("00024464-0001-0000-c000-000000000046"))
/* interface */ ISmartTagOptions;
struct __declspec(uuid("00024465-0001-0000-c000-000000000046"))
/* interface */ ISpellingOptions;
struct __declspec(uuid("00024466-0001-0000-c000-000000000046"))
/* interface */ ISpeech;
struct __declspec(uuid("00024467-0001-0000-c000-000000000046"))
/* interface */ IProtection;
struct __declspec(uuid("00024468-0001-0000-c000-000000000046"))
/* interface */ IPivotItemList;
struct __declspec(uuid("00024469-0001-0000-c000-000000000046"))
/* interface */ ITab;
struct __declspec(uuid("0002446a-0001-0000-c000-000000000046"))
/* interface */ IAllowEditRanges;
struct __declspec(uuid("0002446b-0001-0000-c000-000000000046"))
/* interface */ IAllowEditRange;
struct __declspec(uuid("0002446c-0001-0000-c000-000000000046"))
/* interface */ IUserAccessList;
struct __declspec(uuid("0002446d-0001-0000-c000-000000000046"))
/* interface */ IUserAccess;
struct __declspec(uuid("0002446e-0001-0000-c000-000000000046"))
/* interface */ IRTD;
struct __declspec(uuid("0002446f-0001-0000-c000-000000000046"))
/* interface */ IDiagram;
struct __declspec(uuid("0002084d-0000-0000-c000-000000000046"))
/* dispinterface */ Font;
struct __declspec(uuid("00020893-0000-0000-c000-000000000046"))
/* dispinterface */ Window;
struct __declspec(uuid("00020892-0000-0000-c000-000000000046"))
/* dispinterface */ Windows;
struct __declspec(uuid("00024413-0000-0000-c000-000000000046"))
/* dispinterface */ AppEvents;
struct __declspec(uuid("00020845-0000-0000-c000-000000000046"))
/* dispinterface */ WorksheetFunction;
struct __declspec(uuid("00020846-0000-0000-c000-000000000046"))
/* dispinterface */ Range;
struct __declspec(uuid("0002440f-0000-0000-c000-000000000046"))
/* dispinterface */ ChartEvents;
struct __declspec(uuid("00024402-0000-0000-c000-000000000046"))
/* dispinterface */ VPageBreak;
struct __declspec(uuid("00024401-0000-0000-c000-000000000046"))
/* dispinterface */ HPageBreak;
struct __declspec(uuid("00024404-0000-0000-c000-000000000046"))
/* dispinterface */ HPageBreaks;
struct __declspec(uuid("00024405-0000-0000-c000-000000000046"))
/* dispinterface */ VPageBreaks;
struct __declspec(uuid("00024407-0000-0000-c000-000000000046"))
/* dispinterface */ RecentFile;
struct __declspec(uuid("00024406-0000-0000-c000-000000000046"))
/* dispinterface */ RecentFiles;
struct __declspec(uuid("00024411-0000-0000-c000-000000000046"))
/* dispinterface */ DocEvents;
struct __declspec(uuid("00020852-0000-0000-c000-000000000046"))
/* dispinterface */ Style;
struct __declspec(uuid("00020853-0000-0000-c000-000000000046"))
/* dispinterface */ Styles;
struct __declspec(uuid("00020855-0000-0000-c000-000000000046"))
/* dispinterface */ Borders;
struct __declspec(uuid("00020857-0000-0000-c000-000000000046"))
/* dispinterface */ AddIn;
struct __declspec(uuid("00020858-0000-0000-c000-000000000046"))
/* dispinterface */ AddIns;
struct __declspec(uuid("0002085c-0000-0000-c000-000000000046"))
/* dispinterface */ Toolbar;
struct __declspec(uuid("0002085d-0000-0000-c000-000000000046"))
/* dispinterface */ Toolbars;
struct __declspec(uuid("0002085e-0000-0000-c000-000000000046"))
/* dispinterface */ ToolbarButton;
struct __declspec(uuid("0002085f-0000-0000-c000-000000000046"))
/* dispinterface */ ToolbarButtons;
struct __declspec(uuid("00020860-0000-0000-c000-000000000046"))
/* dispinterface */ Areas;
struct __declspec(uuid("00024412-0000-0000-c000-000000000046"))
/* dispinterface */ WorkbookEvents;
struct __declspec(uuid("00020863-0000-0000-c000-000000000046"))
/* dispinterface */ MenuBars;
struct __declspec(uuid("00020864-0000-0000-c000-000000000046"))
/* dispinterface */ MenuBar;
struct __declspec(uuid("00020865-0000-0000-c000-000000000046"))
/* dispinterface */ Menus;
struct __declspec(uuid("00020866-0000-0000-c000-000000000046"))
/* dispinterface */ Menu;
struct __declspec(uuid("00020867-0000-0000-c000-000000000046"))
/* dispinterface */ MenuItems;
struct __declspec(uuid("00020868-0000-0000-c000-000000000046"))
/* dispinterface */ MenuItem;
struct __declspec(uuid("0002086d-0000-0000-c000-000000000046"))
/* dispinterface */ Charts;
struct __declspec(uuid("0002086f-0000-0000-c000-000000000046"))
/* dispinterface */ DrawingObjects;
struct __declspec(uuid("0002441c-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCache;
struct __declspec(uuid("0002441d-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCaches;
struct __declspec(uuid("0002441e-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFormula;
struct __declspec(uuid("0002441f-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFormulas;
struct __declspec(uuid("00020872-0000-0000-c000-000000000046"))
/* dispinterface */ PivotTable;
struct __declspec(uuid("00020873-0000-0000-c000-000000000046"))
/* dispinterface */ PivotTables;
struct __declspec(uuid("00020874-0000-0000-c000-000000000046"))
/* dispinterface */ PivotField;
struct __declspec(uuid("00020875-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFields;
struct __declspec(uuid("00024420-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedFields;
struct __declspec(uuid("00020876-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItem;
struct __declspec(uuid("00020877-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItems;
struct __declspec(uuid("00024421-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedItems;
struct __declspec(uuid("00020878-0000-0000-c000-000000000046"))
/* dispinterface */ Characters;
struct __declspec(uuid("00020879-0000-0000-c000-000000000046"))
/* dispinterface */ Dialogs;
struct __declspec(uuid("0002087a-0000-0000-c000-000000000046"))
/* dispinterface */ Dialog;
struct __declspec(uuid("0002087b-0000-0000-c000-000000000046"))
/* dispinterface */ SoundNote;
struct __declspec(uuid("0002087d-0000-0000-c000-000000000046"))
/* dispinterface */ Button;
struct __declspec(uuid("0002087e-0000-0000-c000-000000000046"))
/* dispinterface */ Buttons;
struct __declspec(uuid("0002087f-0000-0000-c000-000000000046"))
/* dispinterface */ CheckBox;
struct __declspec(uuid("00020880-0000-0000-c000-000000000046"))
/* dispinterface */ CheckBoxes;
struct __declspec(uuid("00020881-0000-0000-c000-000000000046"))
/* dispinterface */ OptionButton;
struct __declspec(uuid("00020882-0000-0000-c000-000000000046"))
/* dispinterface */ OptionButtons;
struct __declspec(uuid("00020883-0000-0000-c000-000000000046"))
/* dispinterface */ EditBox;
struct __declspec(uuid("00020884-0000-0000-c000-000000000046"))
/* dispinterface */ EditBoxes;
struct __declspec(uuid("00020885-0000-0000-c000-000000000046"))
/* dispinterface */ ScrollBar;
struct __declspec(uuid("00020886-0000-0000-c000-000000000046"))
/* dispinterface */ ScrollBars;
struct __declspec(uuid("00020887-0000-0000-c000-000000000046"))
/* dispinterface */ ListBox;
struct __declspec(uuid("00020888-0000-0000-c000-000000000046"))
/* dispinterface */ ListBoxes;
struct __declspec(uuid("00020889-0000-0000-c000-000000000046"))
/* dispinterface */ GroupBox;
struct __declspec(uuid("0002088a-0000-0000-c000-000000000046"))
/* dispinterface */ GroupBoxes;
struct __declspec(uuid("0002088b-0000-0000-c000-000000000046"))
/* dispinterface */ DropDown;
struct __declspec(uuid("0002088c-0000-0000-c000-000000000046"))
/* dispinterface */ DropDowns;
struct __declspec(uuid("0002088d-0000-0000-c000-000000000046"))
/* dispinterface */ Spinner;
struct __declspec(uuid("0002088e-0000-0000-c000-000000000046"))
/* dispinterface */ Spinners;
struct __declspec(uuid("0002088f-0000-0000-c000-000000000046"))
/* dispinterface */ DialogFrame;
struct __declspec(uuid("00020890-0000-0000-c000-000000000046"))
/* dispinterface */ Label;
struct __declspec(uuid("00020891-0000-0000-c000-000000000046"))
/* dispinterface */ Labels;
struct __declspec(uuid("00020894-0000-0000-c000-000000000046"))
/* dispinterface */ Panes;
struct __declspec(uuid("00020895-0000-0000-c000-000000000046"))
/* dispinterface */ Pane;
struct __declspec(uuid("00020896-0000-0000-c000-000000000046"))
/* dispinterface */ Scenarios;
struct __declspec(uuid("00020897-0000-0000-c000-000000000046"))
/* dispinterface */ Scenario;
struct __declspec(uuid("00020898-0000-0000-c000-000000000046"))
/* dispinterface */ GroupObject;
struct __declspec(uuid("00020899-0000-0000-c000-000000000046"))
/* dispinterface */ GroupObjects;
struct __declspec(uuid("0002089a-0000-0000-c000-000000000046"))
/* dispinterface */ Line;
struct __declspec(uuid("0002089b-0000-0000-c000-000000000046"))
/* dispinterface */ Lines;
struct __declspec(uuid("0002089c-0000-0000-c000-000000000046"))
/* dispinterface */ Rectangle;
struct __declspec(uuid("0002089d-0000-0000-c000-000000000046"))
/* dispinterface */ Rectangles;
struct __declspec(uuid("0002089e-0000-0000-c000-000000000046"))
/* dispinterface */ Oval;
struct __declspec(uuid("0002089f-0000-0000-c000-000000000046"))
/* dispinterface */ Ovals;
struct __declspec(uuid("000208a0-0000-0000-c000-000000000046"))
/* dispinterface */ Arc;
struct __declspec(uuid("000208a1-0000-0000-c000-000000000046"))
/* dispinterface */ Arcs;
struct __declspec(uuid("00024410-0000-0000-c000-000000000046"))
/* dispinterface */ OLEObjectEvents;
struct __declspec(uuid("000208a2-0000-0000-c000-000000000046"))
/* dispinterface */ _OLEObject;
struct __declspec(uuid("000208a3-0000-0000-c000-000000000046"))
/* dispinterface */ OLEObjects;
struct __declspec(uuid("000208a4-0000-0000-c000-000000000046"))
/* dispinterface */ TextBox;
struct __declspec(uuid("000208a5-0000-0000-c000-000000000046"))
/* dispinterface */ TextBoxes;
struct __declspec(uuid("000208a6-0000-0000-c000-000000000046"))
/* dispinterface */ Picture;
struct __declspec(uuid("000208a7-0000-0000-c000-000000000046"))
/* dispinterface */ Pictures;
struct __declspec(uuid("000208a8-0000-0000-c000-000000000046"))
/* dispinterface */ Drawing;
struct __declspec(uuid("000208a9-0000-0000-c000-000000000046"))
/* dispinterface */ Drawings;
struct __declspec(uuid("000208aa-0000-0000-c000-000000000046"))
/* dispinterface */ RoutingSlip;
struct __declspec(uuid("000208ab-0000-0000-c000-000000000046"))
/* dispinterface */ Outline;
struct __declspec(uuid("000208ad-0000-0000-c000-000000000046"))
/* dispinterface */ Module;
struct __declspec(uuid("000208ae-0000-0000-c000-000000000046"))
/* dispinterface */ Modules;
struct __declspec(uuid("000208af-0000-0000-c000-000000000046"))
/* dispinterface */ DialogSheet;
struct __declspec(uuid("000208b0-0000-0000-c000-000000000046"))
/* dispinterface */ DialogSheets;
struct __declspec(uuid("000208b1-0000-0000-c000-000000000046"))
/* dispinterface */ Worksheets;
struct __declspec(uuid("000208b4-0000-0000-c000-000000000046"))
/* dispinterface */ PageSetup;
struct __declspec(uuid("000208b8-0000-0000-c000-000000000046"))
/* dispinterface */ Names;
struct __declspec(uuid("000208b9-0000-0000-c000-000000000046"))
/* dispinterface */ Name;
struct __declspec(uuid("000208cf-0000-0000-c000-000000000046"))
/* dispinterface */ ChartObject;
struct __declspec(uuid("000208d0-0000-0000-c000-000000000046"))
/* dispinterface */ ChartObjects;
struct __declspec(uuid("000208d1-0000-0000-c000-000000000046"))
/* dispinterface */ Mailer;
struct __declspec(uuid("00024422-0000-0000-c000-000000000046"))
/* dispinterface */ CustomViews;
struct __declspec(uuid("00024423-0000-0000-c000-000000000046"))
/* dispinterface */ CustomView;
struct __declspec(uuid("00024424-0000-0000-c000-000000000046"))
/* dispinterface */ FormatConditions;
struct __declspec(uuid("00024425-0000-0000-c000-000000000046"))
/* dispinterface */ FormatCondition;
struct __declspec(uuid("00024426-0000-0000-c000-000000000046"))
/* dispinterface */ Comments;
struct __declspec(uuid("00024427-0000-0000-c000-000000000046"))
/* dispinterface */ Comment;
struct __declspec(uuid("0002441b-0000-0000-c000-000000000046"))
/* dispinterface */ RefreshEvents;
struct __declspec(uuid("00024428-0000-0000-c000-000000000046"))
/* dispinterface */ _QueryTable;
struct __declspec(uuid("00024429-0000-0000-c000-000000000046"))
/* dispinterface */ QueryTables;
struct __declspec(uuid("0002442a-0000-0000-c000-000000000046"))
/* dispinterface */ Parameter;
struct __declspec(uuid("0002442b-0000-0000-c000-000000000046"))
/* dispinterface */ Parameters;
struct __declspec(uuid("0002442c-0000-0000-c000-000000000046"))
/* dispinterface */ ODBCError;
struct __declspec(uuid("0002442d-0000-0000-c000-000000000046"))
/* dispinterface */ ODBCErrors;
struct __declspec(uuid("0002442f-0000-0000-c000-000000000046"))
/* dispinterface */ Validation;
struct __declspec(uuid("00024430-0000-0000-c000-000000000046"))
/* dispinterface */ Hyperlinks;
struct __declspec(uuid("00024431-0000-0000-c000-000000000046"))
/* dispinterface */ Hyperlink;
struct __declspec(uuid("00024432-0000-0000-c000-000000000046"))
/* dispinterface */ AutoFilter;
struct __declspec(uuid("00024433-0000-0000-c000-000000000046"))
/* dispinterface */ Filters;
struct __declspec(uuid("00024434-0000-0000-c000-000000000046"))
/* dispinterface */ Filter;
struct __declspec(uuid("000208d4-0000-0000-c000-000000000046"))
/* dispinterface */ AutoCorrect;
struct __declspec(uuid("00020854-0000-0000-c000-000000000046"))
/* dispinterface */ Border;
struct __declspec(uuid("00020870-0000-0000-c000-000000000046"))
/* dispinterface */ Interior;
struct __declspec(uuid("00024435-0000-0000-c000-000000000046"))
/* dispinterface */ ChartFillFormat;
struct __declspec(uuid("00024436-0000-0000-c000-000000000046"))
/* dispinterface */ ChartColorFormat;
struct __declspec(uuid("00020848-0000-0000-c000-000000000046"))
/* dispinterface */ Axis;
struct __declspec(uuid("00020849-0000-0000-c000-000000000046"))
/* dispinterface */ ChartTitle;
struct __declspec(uuid("0002084a-0000-0000-c000-000000000046"))
/* dispinterface */ AxisTitle;
struct __declspec(uuid("00020859-0000-0000-c000-000000000046"))
/* dispinterface */ ChartGroup;
struct __declspec(uuid("0002085a-0000-0000-c000-000000000046"))
/* dispinterface */ ChartGroups;
struct __declspec(uuid("0002085b-0000-0000-c000-000000000046"))
/* dispinterface */ Axes;
struct __declspec(uuid("00020869-0000-0000-c000-000000000046"))
/* dispinterface */ Points;
struct __declspec(uuid("0002086a-0000-0000-c000-000000000046"))
/* dispinterface */ Point;
struct __declspec(uuid("0002086b-0000-0000-c000-000000000046"))
/* dispinterface */ Series;
struct __declspec(uuid("0002086c-0000-0000-c000-000000000046"))
/* dispinterface */ SeriesCollection;
struct __declspec(uuid("000208b2-0000-0000-c000-000000000046"))
/* dispinterface */ DataLabel;
struct __declspec(uuid("000208b3-0000-0000-c000-000000000046"))
/* dispinterface */ DataLabels;
struct __declspec(uuid("000208ba-0000-0000-c000-000000000046"))
/* dispinterface */ LegendEntry;
struct __declspec(uuid("000208bb-0000-0000-c000-000000000046"))
/* dispinterface */ LegendEntries;
struct __declspec(uuid("000208bc-0000-0000-c000-000000000046"))
/* dispinterface */ LegendKey;
struct __declspec(uuid("000208bd-0000-0000-c000-000000000046"))
/* dispinterface */ Trendlines;
struct __declspec(uuid("000208be-0000-0000-c000-000000000046"))
/* dispinterface */ Trendline;
struct __declspec(uuid("000208c0-0000-0000-c000-000000000046"))
/* dispinterface */ Corners;
struct __declspec(uuid("000208c1-0000-0000-c000-000000000046"))
/* dispinterface */ SeriesLines;
struct __declspec(uuid("000208c2-0000-0000-c000-000000000046"))
/* dispinterface */ HiLoLines;
struct __declspec(uuid("000208c3-0000-0000-c000-000000000046"))
/* dispinterface */ Gridlines;
struct __declspec(uuid("000208c4-0000-0000-c000-000000000046"))
/* dispinterface */ DropLines;
struct __declspec(uuid("00024437-0000-0000-c000-000000000046"))
/* dispinterface */ LeaderLines;
struct __declspec(uuid("000208c5-0000-0000-c000-000000000046"))
/* dispinterface */ UpBars;
struct __declspec(uuid("000208c6-0000-0000-c000-000000000046"))
/* dispinterface */ DownBars;
struct __declspec(uuid("000208c7-0000-0000-c000-000000000046"))
/* dispinterface */ Floor;
struct __declspec(uuid("000208c8-0000-0000-c000-000000000046"))
/* dispinterface */ Walls;
struct __declspec(uuid("000208c9-0000-0000-c000-000000000046"))
/* dispinterface */ TickLabels;
struct __declspec(uuid("000208cb-0000-0000-c000-000000000046"))
/* dispinterface */ PlotArea;
struct __declspec(uuid("000208cc-0000-0000-c000-000000000046"))
/* dispinterface */ ChartArea;
struct __declspec(uuid("000208cd-0000-0000-c000-000000000046"))
/* dispinterface */ Legend;
struct __declspec(uuid("000208ce-0000-0000-c000-000000000046"))
/* dispinterface */ ErrorBars;
struct __declspec(uuid("00020843-0000-0000-c000-000000000046"))
/* dispinterface */ DataTable;
struct __declspec(uuid("00024438-0000-0000-c000-000000000046"))
/* dispinterface */ Phonetic;
struct __declspec(uuid("00024439-0000-0000-c000-000000000046"))
/* dispinterface */ Shape;
struct __declspec(uuid("0002443a-0000-0000-c000-000000000046"))
/* dispinterface */ Shapes;
struct __declspec(uuid("0002443b-0000-0000-c000-000000000046"))
/* dispinterface */ ShapeRange;
struct __declspec(uuid("0002443c-0000-0000-c000-000000000046"))
/* dispinterface */ GroupShapes;
struct __declspec(uuid("0002443d-0000-0000-c000-000000000046"))
/* dispinterface */ TextFrame;
struct __declspec(uuid("0002443e-0000-0000-c000-000000000046"))
/* dispinterface */ ConnectorFormat;
struct __declspec(uuid("0002443f-0000-0000-c000-000000000046"))
/* dispinterface */ FreeformBuilder;
struct __declspec(uuid("00024440-0000-0000-c000-000000000046"))
/* dispinterface */ ControlFormat;
struct __declspec(uuid("00024441-0000-0000-c000-000000000046"))
/* dispinterface */ OLEFormat;
struct __declspec(uuid("00024442-0000-0000-c000-000000000046"))
/* dispinterface */ LinkFormat;
struct __declspec(uuid("00024443-0000-0000-c000-000000000046"))
/* dispinterface */ PublishObjects;
struct __declspec(uuid("00024445-0000-0000-c000-000000000046"))
/* dispinterface */ OLEDBError;
struct __declspec(uuid("00024446-0000-0000-c000-000000000046"))
/* dispinterface */ OLEDBErrors;
struct __declspec(uuid("00024447-0000-0000-c000-000000000046"))
/* dispinterface */ Phonetics;
struct __declspec(uuid("0002444a-0000-0000-c000-000000000046"))
/* dispinterface */ PivotLayout;
struct __declspec(uuid("0002084c-0000-0000-c000-000000000046"))
/* dispinterface */ DisplayUnitLabel;
struct __declspec(uuid("00024450-0000-0000-c000-000000000046"))
/* dispinterface */ CellFormat;
struct __declspec(uuid("00024451-0000-0000-c000-000000000046"))
/* dispinterface */ UsedObjects;
struct __declspec(uuid("00024452-0000-0000-c000-000000000046"))
/* dispinterface */ CustomProperties;
struct __declspec(uuid("00024453-0000-0000-c000-000000000046"))
/* dispinterface */ CustomProperty;
struct __declspec(uuid("00024454-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedMembers;
struct __declspec(uuid("00024455-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedMember;
struct __declspec(uuid("00024456-0000-0000-c000-000000000046"))
/* dispinterface */ Watches;
struct __declspec(uuid("00024457-0000-0000-c000-000000000046"))
/* dispinterface */ Watch;
struct __declspec(uuid("00024458-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCell;
struct __declspec(uuid("00024459-0000-0000-c000-000000000046"))
/* dispinterface */ Graphic;
struct __declspec(uuid("0002445a-0000-0000-c000-000000000046"))
/* dispinterface */ AutoRecover;
struct __declspec(uuid("0002445b-0000-0000-c000-000000000046"))
/* dispinterface */ ErrorCheckingOptions;
struct __declspec(uuid("0002445c-0000-0000-c000-000000000046"))
/* dispinterface */ Errors;
struct __declspec(uuid("0002445d-0000-0000-c000-000000000046"))
/* dispinterface */ Error;
struct __declspec(uuid("0002445e-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagAction;
struct __declspec(uuid("0002445f-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagActions;
struct __declspec(uuid("00024460-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTag;
struct __declspec(uuid("00024461-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTags;
struct __declspec(uuid("00024462-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagRecognizer;
struct __declspec(uuid("00024463-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagRecognizers;
struct __declspec(uuid("00024464-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagOptions;
struct __declspec(uuid("00024465-0000-0000-c000-000000000046"))
/* dispinterface */ SpellingOptions;
struct __declspec(uuid("00024466-0000-0000-c000-000000000046"))
/* dispinterface */ Speech;
struct __declspec(uuid("00024467-0000-0000-c000-000000000046"))
/* dispinterface */ Protection;
struct __declspec(uuid("00024468-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItemList;
struct __declspec(uuid("00024469-0000-0000-c000-000000000046"))
/* dispinterface */ Tab;
struct __declspec(uuid("0002446a-0000-0000-c000-000000000046"))
/* dispinterface */ AllowEditRanges;
struct __declspec(uuid("0002446b-0000-0000-c000-000000000046"))
/* dispinterface */ AllowEditRange;
struct __declspec(uuid("0002446c-0000-0000-c000-000000000046"))
/* dispinterface */ UserAccessList;
struct __declspec(uuid("0002446d-0000-0000-c000-000000000046"))
/* dispinterface */ UserAccess;
struct __declspec(uuid("0002446e-0000-0000-c000-000000000046"))
/* dispinterface */ RTD;
struct __declspec(uuid("0002446f-0000-0000-c000-000000000046"))
/* dispinterface */ Diagram;
struct __declspec(uuid("0002442e-0001-0000-c000-000000000046"))
/* interface */ IDummy;
struct __declspec(uuid("0002444f-0001-0000-c000-000000000046"))
/* interface */ ICanvasShapes;
struct /* coclass */ QueryTable;
struct /* coclass */ Application;
struct /* coclass */ Chart;
struct /* coclass */ Worksheet;
struct /* coclass */ Global;
struct /* coclass */ Workbook;
struct /* coclass */ OLEObject;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(Adjustments, __uuidof(Adjustments));
_COM_SMARTPTR_TYPEDEF(CalloutFormat, __uuidof(CalloutFormat));
_COM_SMARTPTR_TYPEDEF(ColorFormat, __uuidof(ColorFormat));
_COM_SMARTPTR_TYPEDEF(LineFormat, __uuidof(LineFormat));
_COM_SMARTPTR_TYPEDEF(ShapeNode, __uuidof(ShapeNode));
_COM_SMARTPTR_TYPEDEF(ShapeNodes, __uuidof(ShapeNodes));
_COM_SMARTPTR_TYPEDEF(PictureFormat, __uuidof(PictureFormat));
_COM_SMARTPTR_TYPEDEF(ShadowFormat, __uuidof(ShadowFormat));
_COM_SMARTPTR_TYPEDEF(TextEffectFormat, __uuidof(TextEffectFormat));
_COM_SMARTPTR_TYPEDEF(ThreeDFormat, __uuidof(ThreeDFormat));
_COM_SMARTPTR_TYPEDEF(FillFormat, __uuidof(FillFormat));
_COM_SMARTPTR_TYPEDEF(DiagramNodes, __uuidof(DiagramNodes));
_COM_SMARTPTR_TYPEDEF(DiagramNodeChildren, __uuidof(DiagramNodeChildren));
_COM_SMARTPTR_TYPEDEF(DiagramNode, __uuidof(DiagramNode));
_COM_SMARTPTR_TYPEDEF(IRTDUpdateEvent, __uuidof(IRTDUpdateEvent));
_COM_SMARTPTR_TYPEDEF(IRtdServer, __uuidof(IRtdServer));
_COM_SMARTPTR_TYPEDEF(IWindow, __uuidof(IWindow));
_COM_SMARTPTR_TYPEDEF(IWindows, __uuidof(IWindows));
_COM_SMARTPTR_TYPEDEF(IAppEvents, __uuidof(IAppEvents));
_COM_SMARTPTR_TYPEDEF(_Application, __uuidof(_Application));
_COM_SMARTPTR_TYPEDEF(IWorksheetFunction, __uuidof(IWorksheetFunction));
_COM_SMARTPTR_TYPEDEF(IRange, __uuidof(IRange));
_COM_SMARTPTR_TYPEDEF(IChartEvents, __uuidof(IChartEvents));
_COM_SMARTPTR_TYPEDEF(_Chart, __uuidof(_Chart));
_COM_SMARTPTR_TYPEDEF(Sheets, __uuidof(Sheets));
_COM_SMARTPTR_TYPEDEF(IVPageBreak, __uuidof(IVPageBreak));
_COM_SMARTPTR_TYPEDEF(IHPageBreak, __uuidof(IHPageBreak));
_COM_SMARTPTR_TYPEDEF(IHPageBreaks, __uuidof(IHPageBreaks));
_COM_SMARTPTR_TYPEDEF(IVPageBreaks, __uuidof(IVPageBreaks));
_COM_SMARTPTR_TYPEDEF(IRecentFile, __uuidof(IRecentFile));
_COM_SMARTPTR_TYPEDEF(IRecentFiles, __uuidof(IRecentFiles));
_COM_SMARTPTR_TYPEDEF(IDocEvents, __uuidof(IDocEvents));
_COM_SMARTPTR_TYPEDEF(_Worksheet, __uuidof(_Worksheet));
_COM_SMARTPTR_TYPEDEF(IStyle, __uuidof(IStyle));
_COM_SMARTPTR_TYPEDEF(IStyles, __uuidof(IStyles));
_COM_SMARTPTR_TYPEDEF(IBorders, __uuidof(IBorders));
_COM_SMARTPTR_TYPEDEF(_Global, __uuidof(_Global));
_COM_SMARTPTR_TYPEDEF(IAddIn, __uuidof(IAddIn));
_COM_SMARTPTR_TYPEDEF(IAddIns, __uuidof(IAddIns));
_COM_SMARTPTR_TYPEDEF(IToolbar, __uuidof(IToolbar));
_COM_SMARTPTR_TYPEDEF(IToolbars, __uuidof(IToolbars));
_COM_SMARTPTR_TYPEDEF(IToolbarButton, __uuidof(IToolbarButton));
_COM_SMARTPTR_TYPEDEF(IToolbarButtons, __uuidof(IToolbarButtons));
_COM_SMARTPTR_TYPEDEF(IAreas, __uuidof(IAreas));
_COM_SMARTPTR_TYPEDEF(IWorkbookEvents, __uuidof(IWorkbookEvents));
_COM_SMARTPTR_TYPEDEF(_Workbook, __uuidof(_Workbook));
_COM_SMARTPTR_TYPEDEF(Workbooks, __uuidof(Workbooks));
_COM_SMARTPTR_TYPEDEF(IMenuBars, __uuidof(IMenuBars));
_COM_SMARTPTR_TYPEDEF(IMenuBar, __uuidof(IMenuBar));
_COM_SMARTPTR_TYPEDEF(IMenus, __uuidof(IMenus));
_COM_SMARTPTR_TYPEDEF(IMenu, __uuidof(IMenu));
_COM_SMARTPTR_TYPEDEF(IMenuItems, __uuidof(IMenuItems));
_COM_SMARTPTR_TYPEDEF(IMenuItem, __uuidof(IMenuItem));
_COM_SMARTPTR_TYPEDEF(ICharts, __uuidof(ICharts));
_COM_SMARTPTR_TYPEDEF(IDrawingObjects, __uuidof(IDrawingObjects));
_COM_SMARTPTR_TYPEDEF(IPivotCache, __uuidof(IPivotCache));
_COM_SMARTPTR_TYPEDEF(IPivotCaches, __uuidof(IPivotCaches));
_COM_SMARTPTR_TYPEDEF(IPivotFormula, __uuidof(IPivotFormula));
_COM_SMARTPTR_TYPEDEF(IPivotFormulas, __uuidof(IPivotFormulas));
_COM_SMARTPTR_TYPEDEF(IPivotTable, __uuidof(IPivotTable));
_COM_SMARTPTR_TYPEDEF(IPivotTables, __uuidof(IPivotTables));
_COM_SMARTPTR_TYPEDEF(IPivotField, __uuidof(IPivotField));
_COM_SMARTPTR_TYPEDEF(IPivotFields, __uuidof(IPivotFields));
_COM_SMARTPTR_TYPEDEF(ICalculatedFields, __uuidof(ICalculatedFields));
_COM_SMARTPTR_TYPEDEF(IPivotItem, __uuidof(IPivotItem));
_COM_SMARTPTR_TYPEDEF(IPivotItems, __uuidof(IPivotItems));
_COM_SMARTPTR_TYPEDEF(ICalculatedItems, __uuidof(ICalculatedItems));
_COM_SMARTPTR_TYPEDEF(ICharacters, __uuidof(ICharacters));
_COM_SMARTPTR_TYPEDEF(IDialogs, __uuidof(IDialogs));
_COM_SMARTPTR_TYPEDEF(IDialog, __uuidof(IDialog));
_COM_SMARTPTR_TYPEDEF(ISoundNote, __uuidof(ISoundNote));
_COM_SMARTPTR_TYPEDEF(IButton, __uuidof(IButton));
_COM_SMARTPTR_TYPEDEF(IButtons, __uuidof(IButtons));
_COM_SMARTPTR_TYPEDEF(ICheckBox, __uuidof(ICheckBox));
_COM_SMARTPTR_TYPEDEF(ICheckBoxes, __uuidof(ICheckBoxes));
_COM_SMARTPTR_TYPEDEF(IOptionButton, __uuidof(IOptionButton));
_COM_SMARTPTR_TYPEDEF(IOptionButtons, __uuidof(IOptionButtons));
_COM_SMARTPTR_TYPEDEF(IEditBox, __uuidof(IEditBox));
_COM_SMARTPTR_TYPEDEF(IEditBoxes, __uuidof(IEditBoxes));
_COM_SMARTPTR_TYPEDEF(IScrollBar, __uuidof(IScrollBar));
_COM_SMARTPTR_TYPEDEF(IScrollBars, __uuidof(IScrollBars));
_COM_SMARTPTR_TYPEDEF(IListBox, __uuidof(IListBox));
_COM_SMARTPTR_TYPEDEF(IListBoxes, __uuidof(IListBoxes));
_COM_SMARTPTR_TYPEDEF(IGroupBox, __uuidof(IGroupBox));
_COM_SMARTPTR_TYPEDEF(IGroupBoxes, __uuidof(IGroupBoxes));
_COM_SMARTPTR_TYPEDEF(IDropDown, __uuidof(IDropDown));
_COM_SMARTPTR_TYPEDEF(IDropDowns, __uuidof(IDropDowns));
_COM_SMARTPTR_TYPEDEF(ISpinner, __uuidof(ISpinner));
_COM_SMARTPTR_TYPEDEF(ISpinners, __uuidof(ISpinners));
_COM_SMARTPTR_TYPEDEF(IDialogFrame, __uuidof(IDialogFrame));
_COM_SMARTPTR_TYPEDEF(ILabel, __uuidof(ILabel));
_COM_SMARTPTR_TYPEDEF(ILabels, __uuidof(ILabels));
_COM_SMARTPTR_TYPEDEF(IPanes, __uuidof(IPanes));
_COM_SMARTPTR_TYPEDEF(IPane, __uuidof(IPane));
_COM_SMARTPTR_TYPEDEF(IScenarios, __uuidof(IScenarios));
_COM_SMARTPTR_TYPEDEF(IScenario, __uuidof(IScenario));
_COM_SMARTPTR_TYPEDEF(IGroupObject, __uuidof(IGroupObject));
_COM_SMARTPTR_TYPEDEF(IGroupObjects, __uuidof(IGroupObjects));
_COM_SMARTPTR_TYPEDEF(ILine, __uuidof(ILine));
_COM_SMARTPTR_TYPEDEF(ILines, __uuidof(ILines));
_COM_SMARTPTR_TYPEDEF(IRectangle, __uuidof(IRectangle));
_COM_SMARTPTR_TYPEDEF(IRectangles, __uuidof(IRectangles));
_COM_SMARTPTR_TYPEDEF(IOval, __uuidof(IOval));
_COM_SMARTPTR_TYPEDEF(IOvals, __uuidof(IOvals));
_COM_SMARTPTR_TYPEDEF(IArc, __uuidof(IArc));
_COM_SMARTPTR_TYPEDEF(IArcs, __uuidof(IArcs));
_COM_SMARTPTR_TYPEDEF(IOLEObjectEvents, __uuidof(IOLEObjectEvents));
_COM_SMARTPTR_TYPEDEF(_IOLEObject, __uuidof(_IOLEObject));
_COM_SMARTPTR_TYPEDEF(IOLEObjects, __uuidof(IOLEObjects));
_COM_SMARTPTR_TYPEDEF(ITextBox, __uuidof(ITextBox));
_COM_SMARTPTR_TYPEDEF(ITextBoxes, __uuidof(ITextBoxes));
_COM_SMARTPTR_TYPEDEF(IPictures, __uuidof(IPictures));
_COM_SMARTPTR_TYPEDEF(IDrawing, __uuidof(IDrawing));
_COM_SMARTPTR_TYPEDEF(IDrawings, __uuidof(IDrawings));
_COM_SMARTPTR_TYPEDEF(IRoutingSlip, __uuidof(IRoutingSlip));
_COM_SMARTPTR_TYPEDEF(IOutline, __uuidof(IOutline));
_COM_SMARTPTR_TYPEDEF(IModule, __uuidof(IModule));
_COM_SMARTPTR_TYPEDEF(IModules, __uuidof(IModules));
_COM_SMARTPTR_TYPEDEF(IDialogSheet, __uuidof(IDialogSheet));
_COM_SMARTPTR_TYPEDEF(IDialogSheets, __uuidof(IDialogSheets));
_COM_SMARTPTR_TYPEDEF(IWorksheets, __uuidof(IWorksheets));
_COM_SMARTPTR_TYPEDEF(IPageSetup, __uuidof(IPageSetup));
_COM_SMARTPTR_TYPEDEF(INames, __uuidof(INames));
_COM_SMARTPTR_TYPEDEF(IName, __uuidof(IName));
_COM_SMARTPTR_TYPEDEF(IChartObject, __uuidof(IChartObject));
_COM_SMARTPTR_TYPEDEF(IChartObjects, __uuidof(IChartObjects));
_COM_SMARTPTR_TYPEDEF(IMailer, __uuidof(IMailer));
_COM_SMARTPTR_TYPEDEF(ICustomViews, __uuidof(ICustomViews));
_COM_SMARTPTR_TYPEDEF(ICustomView, __uuidof(ICustomView));
_COM_SMARTPTR_TYPEDEF(IFormatConditions, __uuidof(IFormatConditions));
_COM_SMARTPTR_TYPEDEF(IFormatCondition, __uuidof(IFormatCondition));
_COM_SMARTPTR_TYPEDEF(IComments, __uuidof(IComments));
_COM_SMARTPTR_TYPEDEF(IComment, __uuidof(IComment));
_COM_SMARTPTR_TYPEDEF(IRefreshEvents, __uuidof(IRefreshEvents));
_COM_SMARTPTR_TYPEDEF(_IQueryTable, __uuidof(_IQueryTable));
_COM_SMARTPTR_TYPEDEF(IQueryTables, __uuidof(IQueryTables));
_COM_SMARTPTR_TYPEDEF(IParameter, __uuidof(IParameter));
_COM_SMARTPTR_TYPEDEF(IParameters, __uuidof(IParameters));
_COM_SMARTPTR_TYPEDEF(IODBCError, __uuidof(IODBCError));
_COM_SMARTPTR_TYPEDEF(IODBCErrors, __uuidof(IODBCErrors));
_COM_SMARTPTR_TYPEDEF(IValidation, __uuidof(IValidation));
_COM_SMARTPTR_TYPEDEF(IHyperlinks, __uuidof(IHyperlinks));
_COM_SMARTPTR_TYPEDEF(IHyperlink, __uuidof(IHyperlink));
_COM_SMARTPTR_TYPEDEF(IAutoFilter, __uuidof(IAutoFilter));
_COM_SMARTPTR_TYPEDEF(IFilters, __uuidof(IFilters));
_COM_SMARTPTR_TYPEDEF(IFilter, __uuidof(IFilter));
_COM_SMARTPTR_TYPEDEF(IAutoCorrect, __uuidof(IAutoCorrect));
_COM_SMARTPTR_TYPEDEF(IBorder, __uuidof(IBorder));
_COM_SMARTPTR_TYPEDEF(IInterior, __uuidof(IInterior));
_COM_SMARTPTR_TYPEDEF(IChartFillFormat, __uuidof(IChartFillFormat));
_COM_SMARTPTR_TYPEDEF(IChartColorFormat, __uuidof(IChartColorFormat));
_COM_SMARTPTR_TYPEDEF(IAxis, __uuidof(IAxis));
_COM_SMARTPTR_TYPEDEF(IChartTitle, __uuidof(IChartTitle));
_COM_SMARTPTR_TYPEDEF(IAxisTitle, __uuidof(IAxisTitle));
_COM_SMARTPTR_TYPEDEF(IChartGroup, __uuidof(IChartGroup));
_COM_SMARTPTR_TYPEDEF(IChartGroups, __uuidof(IChartGroups));
_COM_SMARTPTR_TYPEDEF(IAxes, __uuidof(IAxes));
_COM_SMARTPTR_TYPEDEF(IPoints, __uuidof(IPoints));
_COM_SMARTPTR_TYPEDEF(IPoint, __uuidof(IPoint));
_COM_SMARTPTR_TYPEDEF(ISeries, __uuidof(ISeries));
_COM_SMARTPTR_TYPEDEF(ISeriesCollection, __uuidof(ISeriesCollection));
_COM_SMARTPTR_TYPEDEF(IDataLabel, __uuidof(IDataLabel));
_COM_SMARTPTR_TYPEDEF(IDataLabels, __uuidof(IDataLabels));
_COM_SMARTPTR_TYPEDEF(ILegendEntry, __uuidof(ILegendEntry));
_COM_SMARTPTR_TYPEDEF(ILegendEntries, __uuidof(ILegendEntries));
_COM_SMARTPTR_TYPEDEF(ILegendKey, __uuidof(ILegendKey));
_COM_SMARTPTR_TYPEDEF(ITrendlines, __uuidof(ITrendlines));
_COM_SMARTPTR_TYPEDEF(ITrendline, __uuidof(ITrendline));
_COM_SMARTPTR_TYPEDEF(ICorners, __uuidof(ICorners));
_COM_SMARTPTR_TYPEDEF(ISeriesLines, __uuidof(ISeriesLines));
_COM_SMARTPTR_TYPEDEF(IHiLoLines, __uuidof(IHiLoLines));
_COM_SMARTPTR_TYPEDEF(IGridlines, __uuidof(IGridlines));
_COM_SMARTPTR_TYPEDEF(IDropLines, __uuidof(IDropLines));
_COM_SMARTPTR_TYPEDEF(ILeaderLines, __uuidof(ILeaderLines));
_COM_SMARTPTR_TYPEDEF(IUpBars, __uuidof(IUpBars));
_COM_SMARTPTR_TYPEDEF(IDownBars, __uuidof(IDownBars));
_COM_SMARTPTR_TYPEDEF(IFloor, __uuidof(IFloor));
_COM_SMARTPTR_TYPEDEF(IWalls, __uuidof(IWalls));
_COM_SMARTPTR_TYPEDEF(ITickLabels, __uuidof(ITickLabels));
_COM_SMARTPTR_TYPEDEF(IPlotArea, __uuidof(IPlotArea));
_COM_SMARTPTR_TYPEDEF(IChartArea, __uuidof(IChartArea));
_COM_SMARTPTR_TYPEDEF(ILegend, __uuidof(ILegend));
_COM_SMARTPTR_TYPEDEF(IErrorBars, __uuidof(IErrorBars));
_COM_SMARTPTR_TYPEDEF(IDataTable, __uuidof(IDataTable));
_COM_SMARTPTR_TYPEDEF(IPhonetic, __uuidof(IPhonetic));
_COM_SMARTPTR_TYPEDEF(IShape, __uuidof(IShape));
_COM_SMARTPTR_TYPEDEF(IShapes, __uuidof(IShapes));
_COM_SMARTPTR_TYPEDEF(IShapeRange, __uuidof(IShapeRange));
_COM_SMARTPTR_TYPEDEF(IGroupShapes, __uuidof(IGroupShapes));
_COM_SMARTPTR_TYPEDEF(ITextFrame, __uuidof(ITextFrame));
_COM_SMARTPTR_TYPEDEF(IConnectorFormat, __uuidof(IConnectorFormat));
_COM_SMARTPTR_TYPEDEF(IFreeformBuilder, __uuidof(IFreeformBuilder));
_COM_SMARTPTR_TYPEDEF(IControlFormat, __uuidof(IControlFormat));
_COM_SMARTPTR_TYPEDEF(IOLEFormat, __uuidof(IOLEFormat));
_COM_SMARTPTR_TYPEDEF(ILinkFormat, __uuidof(ILinkFormat));
_COM_SMARTPTR_TYPEDEF(IPublishObjects, __uuidof(IPublishObjects));
_COM_SMARTPTR_TYPEDEF(PublishObject, __uuidof(PublishObject));
_COM_SMARTPTR_TYPEDEF(IOLEDBError, __uuidof(IOLEDBError));
_COM_SMARTPTR_TYPEDEF(IOLEDBErrors, __uuidof(IOLEDBErrors));
_COM_SMARTPTR_TYPEDEF(IPhonetics, __uuidof(IPhonetics));
_COM_SMARTPTR_TYPEDEF(DefaultWebOptions, __uuidof(DefaultWebOptions));
_COM_SMARTPTR_TYPEDEF(WebOptions, __uuidof(WebOptions));
_COM_SMARTPTR_TYPEDEF(IPivotLayout, __uuidof(IPivotLayout));
_COM_SMARTPTR_TYPEDEF(TreeviewControl, __uuidof(TreeviewControl));
_COM_SMARTPTR_TYPEDEF(CubeField, __uuidof(CubeField));
_COM_SMARTPTR_TYPEDEF(CubeFields, __uuidof(CubeFields));
_COM_SMARTPTR_TYPEDEF(IDisplayUnitLabel, __uuidof(IDisplayUnitLabel));
_COM_SMARTPTR_TYPEDEF(ICellFormat, __uuidof(ICellFormat));
_COM_SMARTPTR_TYPEDEF(IUsedObjects, __uuidof(IUsedObjects));
_COM_SMARTPTR_TYPEDEF(ICustomProperties, __uuidof(ICustomProperties));
_COM_SMARTPTR_TYPEDEF(ICustomProperty, __uuidof(ICustomProperty));
_COM_SMARTPTR_TYPEDEF(ICalculatedMembers, __uuidof(ICalculatedMembers));
_COM_SMARTPTR_TYPEDEF(ICalculatedMember, __uuidof(ICalculatedMember));
_COM_SMARTPTR_TYPEDEF(IWatches, __uuidof(IWatches));
_COM_SMARTPTR_TYPEDEF(IWatch, __uuidof(IWatch));
_COM_SMARTPTR_TYPEDEF(IPivotCell, __uuidof(IPivotCell));
_COM_SMARTPTR_TYPEDEF(IGraphic, __uuidof(IGraphic));
_COM_SMARTPTR_TYPEDEF(IAutoRecover, __uuidof(IAutoRecover));
_COM_SMARTPTR_TYPEDEF(IErrorCheckingOptions, __uuidof(IErrorCheckingOptions));
_COM_SMARTPTR_TYPEDEF(IErrors, __uuidof(IErrors));
_COM_SMARTPTR_TYPEDEF(IError, __uuidof(IError));
_COM_SMARTPTR_TYPEDEF(ISmartTagAction, __uuidof(ISmartTagAction));
_COM_SMARTPTR_TYPEDEF(ISmartTagActions, __uuidof(ISmartTagActions));
_COM_SMARTPTR_TYPEDEF(ISmartTag, __uuidof(ISmartTag));
_COM_SMARTPTR_TYPEDEF(ISmartTags, __uuidof(ISmartTags));
_COM_SMARTPTR_TYPEDEF(ISmartTagRecognizer, __uuidof(ISmartTagRecognizer));
_COM_SMARTPTR_TYPEDEF(ISmartTagRecognizers, __uuidof(ISmartTagRecognizers));
_COM_SMARTPTR_TYPEDEF(ISmartTagOptions, __uuidof(ISmartTagOptions));
_COM_SMARTPTR_TYPEDEF(ISpellingOptions, __uuidof(ISpellingOptions));
_COM_SMARTPTR_TYPEDEF(ISpeech, __uuidof(ISpeech));
_COM_SMARTPTR_TYPEDEF(IProtection, __uuidof(IProtection));
_COM_SMARTPTR_TYPEDEF(IPivotItemList, __uuidof(IPivotItemList));
_COM_SMARTPTR_TYPEDEF(ITab, __uuidof(ITab));
_COM_SMARTPTR_TYPEDEF(IAllowEditRanges, __uuidof(IAllowEditRanges));
_COM_SMARTPTR_TYPEDEF(IAllowEditRange, __uuidof(IAllowEditRange));
_COM_SMARTPTR_TYPEDEF(IUserAccessList, __uuidof(IUserAccessList));
_COM_SMARTPTR_TYPEDEF(IUserAccess, __uuidof(IUserAccess));
_COM_SMARTPTR_TYPEDEF(IRTD, __uuidof(IRTD));
_COM_SMARTPTR_TYPEDEF(IDiagram, __uuidof(IDiagram));
_COM_SMARTPTR_TYPEDEF(Font, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Window, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Windows, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(AppEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(WorksheetFunction, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Range, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ChartEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(VPageBreak, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(HPageBreak, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(HPageBreaks, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(VPageBreaks, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(RecentFile, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(RecentFiles, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DocEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Style, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Styles, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Borders, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(AddIn, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(AddIns, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Toolbar, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Toolbars, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ToolbarButton, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ToolbarButtons, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Areas, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(WorkbookEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(MenuBars, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(MenuBar, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Menus, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Menu, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(MenuItems, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(MenuItem, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Charts, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DrawingObjects, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotCache, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotCaches, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotFormula, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotFormulas, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotTable, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotTables, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotField, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotFields, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CalculatedFields, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotItem, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotItems, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CalculatedItems, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Characters, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Dialogs, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Dialog, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SoundNote, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Button, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Buttons, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CheckBox, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CheckBoxes, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(OptionButton, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(OptionButtons, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(EditBox, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(EditBoxes, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ScrollBar, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ScrollBars, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ListBox, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ListBoxes, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(GroupBox, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(GroupBoxes, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DropDown, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DropDowns, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Spinner, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Spinners, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DialogFrame, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Label, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Labels, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Panes, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Pane, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Scenarios, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Scenario, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(GroupObject, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(GroupObjects, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Line, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Lines, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Rectangle, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Rectangles, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Oval, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Ovals, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Arc, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Arcs, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(OLEObjectEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(_OLEObject, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(OLEObjects, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(TextBox, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(TextBoxes, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Picture, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Pictures, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Drawing, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Drawings, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(RoutingSlip, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Outline, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Module, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Modules, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DialogSheet, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DialogSheets, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Worksheets, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PageSetup, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Names, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Name, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ChartObject, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ChartObjects, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Mailer, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CustomViews, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CustomView, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(FormatConditions, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(FormatCondition, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Comments, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Comment, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(RefreshEvents, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(_QueryTable, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(QueryTables, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Parameter, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Parameters, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ODBCError, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ODBCErrors, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Validation, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Hyperlinks, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Hyperlink, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(AutoFilter, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Filters, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Filter, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(AutoCorrect, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Border, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Interior, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ChartFillFormat, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ChartColorFormat, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Axis, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ChartTitle, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(AxisTitle, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ChartGroup, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ChartGroups, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Axes, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Points, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Point, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Series, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SeriesCollection, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DataLabel, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DataLabels, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(LegendEntry, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(LegendEntries, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(LegendKey, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Trendlines, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Trendline, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Corners, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SeriesLines, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(HiLoLines, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Gridlines, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DropLines, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(LeaderLines, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(UpBars, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DownBars, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Floor, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Walls, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(TickLabels, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PlotArea, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ChartArea, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Legend, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ErrorBars, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DataTable, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Phonetic, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Shape, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Shapes, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ShapeRange, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(GroupShapes, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(TextFrame, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ConnectorFormat, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(FreeformBuilder, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ControlFormat, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(OLEFormat, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(LinkFormat, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PublishObjects, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(OLEDBError, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(OLEDBErrors, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Phonetics, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotLayout, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DisplayUnitLabel, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CellFormat, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(UsedObjects, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CustomProperties, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CustomProperty, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CalculatedMembers, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(CalculatedMember, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Watches, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Watch, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotCell, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Graphic, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(AutoRecover, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ErrorCheckingOptions, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Errors, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Error, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SmartTagAction, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SmartTagActions, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SmartTag, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SmartTags, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SmartTagRecognizer, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SmartTagRecognizers, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SmartTagOptions, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(SpellingOptions, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Speech, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Protection, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(PivotItemList, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Tab, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(AllowEditRanges, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(AllowEditRange, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(UserAccessList, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(UserAccess, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(RTD, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(Diagram, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IDummy, __uuidof(IDummy));
_COM_SMARTPTR_TYPEDEF(ICanvasShapes, __uuidof(ICanvasShapes));

//
// Type library items
//

struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
Adjustments : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    float Item[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    float GetItem (
        int Index );
    void PutItem (
        int Index,
        float Val );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * Count ) = 0;
    virtual HRESULT __stdcall get_Item (
        int Index,
        float * Val ) = 0;
    virtual HRESULT __stdcall put_Item (
        int Index,
        float Val ) = 0;
};

struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
CalloutFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoLength))
    enum Office::MsoTriState AutoLength;
    __declspec(property(get=GetDrop))
    float Drop;
    __declspec(property(get=GetDropType))
    enum Office::MsoCalloutDropType DropType;
    __declspec(property(get=GetGap,put=PutGap))
    float Gap;
    __declspec(property(get=GetLength))
    float Length;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT AutomaticLength ( );
    HRESULT CustomDrop (
        float Drop );
    HRESULT CustomLength (
        float Length );
    HRESULT PresetDrop (
        enum Office::MsoCalloutDropType DropType );
    enum Office::MsoTriState GetAccent ( );
    void PutAccent (
        enum Office::MsoTriState Accent );
    enum Office::MsoCalloutAngleType GetAngle ( );
    void PutAngle (
        enum Office::MsoCalloutAngleType Angle );
    enum Office::MsoTriState GetAutoAttach ( );
    void PutAutoAttach (
        enum Office::MsoTriState AutoAttach );
    enum Office::MsoTriState GetAutoLength ( );
    enum Office::MsoTriState GetBorder ( );
    void PutBorder (
        enum Office::MsoTriState Border );
    float GetDrop ( );
    enum Office::MsoCalloutDropType GetDropType ( );
    float GetGap ( );
    void PutGap (
        float Gap );
    float GetLength ( );
    enum Office::MsoCalloutType GetType ( );
    void PutType (
        enum Office::MsoCalloutType Type );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_AutomaticLength ( ) = 0;
    virtual HRESULT __stdcall raw_CustomDrop (
        float Drop ) = 0;
    virtual HRESULT __stdcall raw_CustomLength (
        float Length ) = 0;
    virtual HRESULT __stdcall raw_PresetDrop (
        enum Office::MsoCalloutDropType DropType ) = 0;
    virtual HRESULT __stdcall get_Accent (
        enum Office::MsoTriState * Accent ) = 0;
    virtual HRESULT __stdcall put_Accent (
        enum Office::MsoTriState Accent ) = 0;
    virtual HRESULT __stdcall get_Angle (
        enum Office::MsoCalloutAngleType * Angle ) = 0;
    virtual HRESULT __stdcall put_Angle (
        enum Office::MsoCalloutAngleType Angle ) = 0;
    virtual HRESULT __stdcall get_AutoAttach (
        enum Office::MsoTriState * AutoAttach ) = 0;
    virtual HRESULT __stdcall put_AutoAttach (
        enum Office::MsoTriState AutoAttach ) = 0;
    virtual HRESULT __stdcall get_AutoLength (
        enum Office::MsoTriState * AutoLength ) = 0;
    virtual HRESULT __stdcall get_Border (
        enum Office::MsoTriState * Border ) = 0;
    virtual HRESULT __stdcall put_Border (
        enum Office::MsoTriState Border ) = 0;
    virtual HRESULT __stdcall get_Drop (
        float * Drop ) = 0;
    virtual HRESULT __stdcall get_DropType (
        enum Office::MsoCalloutDropType * DropType ) = 0;
    virtual HRESULT __stdcall get_Gap (
        float * Gap ) = 0;
    virtual HRESULT __stdcall put_Gap (
        float Gap ) = 0;
    virtual HRESULT __stdcall get_Length (
        float * Length ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoCalloutType * Type ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum Office::MsoCalloutType Type ) = 0;
};

struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
ColorFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    int SchemeColor;
    __declspec(property(get=GetType))
    enum Office::MsoColorType Type;
    __declspec(property(get=GetTintAndShade,put=PutTintAndShade))
    float TintAndShade;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    Office::MsoRGBType Getignorethis ( );
    void Putignorethis (
        Office::MsoRGBType ignorethis );
    int GetSchemeColor ( );
    void PutSchemeColor (
        int SchemeColor );
    enum Office::MsoColorType GetType ( );
    float GetTintAndShade ( );
    void PutTintAndShade (
        float pValue );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_ignorethis (
        Office::MsoRGBType * ignorethis ) = 0;
    virtual HRESULT __stdcall put_ignorethis (
        Office::MsoRGBType ignorethis ) = 0;
    virtual HRESULT __stdcall get_SchemeColor (
        int * SchemeColor ) = 0;
    virtual HRESULT __stdcall put_SchemeColor (
        int SchemeColor ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoColorType * Type ) = 0;
    virtual HRESULT __stdcall get_TintAndShade (
        float * pValue ) = 0;
    virtual HRESULT __stdcall put_TintAndShade (
        float pValue ) = 0;
};

struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
LineFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetWeight,put=PutWeight))
    float Weight;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    enum Office::MsoArrowheadLength GetBeginArrowheadLength ( );
    void PutBeginArrowheadLength (
        enum Office::MsoArrowheadLength BeginArrowheadLength );
    enum Office::MsoArrowheadStyle GetBeginArrowheadStyle ( );
    void PutBeginArrowheadStyle (
        enum Office::MsoArrowheadStyle BeginArrowheadStyle );
    enum Office::MsoArrowheadWidth GetBeginArrowheadWidth ( );
    void PutBeginArrowheadWidth (
        enum Office::MsoArrowheadWidth BeginArrowheadWidth );
    enum Office::MsoLineDashStyle GetDashStyle ( );
    void PutDashStyle (
        enum Office::MsoLineDashStyle DashStyle );
    enum Office::MsoArrowheadLength GetEndArrowheadLength ( );
    void PutEndArrowheadLength (
        enum Office::MsoArrowheadLength EndArrowheadLength );
    enum Office::MsoArrowheadStyle GetEndArrowheadStyle ( );
    void PutEndArrowheadStyle (
        enum Office::MsoArrowheadStyle EndArrowheadStyle );
    enum Office::MsoArrowheadWidth GetEndArrowheadWidth ( );
    void PutEndArrowheadWidth (
        enum Office::MsoArrowheadWidth EndArrowheadWidth );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoPatternType GetPattern ( );
    void PutPattern (
        enum Office::MsoPatternType Pattern );
    enum Office::MsoLineStyle GetStyle ( );
    void PutStyle (
        enum Office::MsoLineStyle Style );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    float GetWeight ( );
    void PutWeight (
        float Weight );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        struct ColorFormat * * BackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        struct ColorFormat * BackColor ) = 0;
    virtual HRESULT __stdcall get_BeginArrowheadLength (
        enum Office::MsoArrowheadLength * BeginArrowheadLength ) = 0;
    virtual HRESULT __stdcall put_BeginArrowheadLength (
        enum Office::MsoArrowheadLength BeginArrowheadLength ) = 0;
    virtual HRESULT __stdcall get_BeginArrowheadStyle (
        enum Office::MsoArrowheadStyle * BeginArrowheadStyle ) = 0;
    virtual HRESULT __stdcall put_BeginArrowheadStyle (
        enum Office::MsoArrowheadStyle BeginArrowheadStyle ) = 0;
    virtual HRESULT __stdcall get_BeginArrowheadWidth (
        enum Office::MsoArrowheadWidth * BeginArrowheadWidth ) = 0;
    virtual HRESULT __stdcall put_BeginArrowheadWidth (
        enum Office::MsoArrowheadWidth BeginArrowheadWidth ) = 0;
    virtual HRESULT __stdcall get_DashStyle (
        enum Office::MsoLineDashStyle * DashStyle ) = 0;
    virtual HRESULT __stdcall put_DashStyle (
        enum Office::MsoLineDashStyle DashStyle ) = 0;
    virtual HRESULT __stdcall get_EndArrowheadLength (
        enum Office::MsoArrowheadLength * EndArrowheadLength ) = 0;
    virtual HRESULT __stdcall put_EndArrowheadLength (
        enum Office::MsoArrowheadLength EndArrowheadLength ) = 0;
    virtual HRESULT __stdcall get_EndArrowheadStyle (
        enum Office::MsoArrowheadStyle * EndArrowheadStyle ) = 0;
    virtual HRESULT __stdcall put_EndArrowheadStyle (
        enum Office::MsoArrowheadStyle EndArrowheadStyle ) = 0;
    virtual HRESULT __stdcall get_EndArrowheadWidth (
        enum Office::MsoArrowheadWidth * EndArrowheadWidth ) = 0;
    virtual HRESULT __stdcall put_EndArrowheadWidth (
        enum Office::MsoArrowheadWidth EndArrowheadWidth ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        struct ColorFormat * * ForeColor ) = 0;
    virtual HRESULT __stdcall put_ForeColor (
        struct ColorFormat * ForeColor ) = 0;
    virtual HRESULT __stdcall get_Pattern (
        enum Office::MsoPatternType * Pattern ) = 0;
    virtual HRESULT __stdcall put_Pattern (
        enum Office::MsoPatternType Pattern ) = 0;
    virtual HRESULT __stdcall get_Style (
        enum Office::MsoLineStyle * Style ) = 0;
    virtual HRESULT __stdcall put_Style (
        enum Office::MsoLineStyle Style ) = 0;
    virtual HRESULT __stdcall get_Transparency (
        float * Transparency ) = 0;
    virtual HRESULT __stdcall put_Transparency (
        float Transparency ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState Visible ) = 0;
    virtual HRESULT __stdcall get_Weight (
        float * Weight ) = 0;
    virtual HRESULT __stdcall put_Weight (
        float Weight ) = 0;
};

struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
ShapeNode : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEditingType))
    enum Office::MsoEditingType EditingType;
    __declspec(property(get=GetPoints))
    _variant_t Points;
    __declspec(property(get=GetSegmentType))
    enum Office::MsoSegmentType SegmentType;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    enum Office::MsoEditingType GetEditingType ( );
    _variant_t GetPoints ( );
    enum Office::MsoSegmentType GetSegmentType ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_EditingType (
        enum Office::MsoEditingType * EditingType ) = 0;
    virtual HRESULT __stdcall get_Points (
        VARIANT * Points ) = 0;
    virtual HRESULT __stdcall get_SegmentType (
        enum Office::MsoSegmentType * SegmentType ) = 0;
};

struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
ShapeNodes : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapeNodePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        int Index );
    HRESULT Insert (
        int Index,
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    HRESULT SetEditingType (
        int Index,
        enum Office::MsoEditingType EditingType );
    HRESULT SetPosition (
        int Index,
        float X1,
        float Y1 );
    HRESULT SetSegmentType (
        int Index,
        enum Office::MsoSegmentType SegmentType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * Count ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct ShapeNode * * Item ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * _NewEnum ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        int Index ) = 0;
    virtual HRESULT __stdcall raw_Insert (
        int Index,
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 ) = 0;
    virtual HRESULT __stdcall raw_SetEditingType (
        int Index,
        enum Office::MsoEditingType EditingType ) = 0;
    virtual HRESULT __stdcall raw_SetPosition (
        int Index,
        float X1,
        float Y1 ) = 0;
    virtual HRESULT __stdcall raw_SetSegmentType (
        int Index,
        enum Office::MsoSegmentType SegmentType ) = 0;
};

struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
PictureFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementBrightness (
        float Increment );
    HRESULT IncrementContrast (
        float Increment );
    float GetBrightness ( );
    void PutBrightness (
        float Brightness );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType ColorType );
    float GetContrast ( );
    void PutContrast (
        float Contrast );
    float GetCropBottom ( );
    void PutCropBottom (
        float CropBottom );
    float GetCropLeft ( );
    void PutCropLeft (
        float CropLeft );
    float GetCropRight ( );
    void PutCropRight (
        float CropRight );
    float GetCropTop ( );
    void PutCropTop (
        float CropTop );
    Office::MsoRGBType GetTransparencyColor ( );
    void PutTransparencyColor (
        Office::MsoRGBType TransparencyColor );
    enum Office::MsoTriState GetTransparentBackground ( );
    void PutTransparentBackground (
        enum Office::MsoTriState TransparentBackground );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_IncrementBrightness (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementContrast (
        float Increment ) = 0;
    virtual HRESULT __stdcall get_Brightness (
        float * Brightness ) = 0;
    virtual HRESULT __stdcall put_Brightness (
        float Brightness ) = 0;
    virtual HRESULT __stdcall get_ColorType (
        enum Office::MsoPictureColorType * ColorType ) = 0;
    virtual HRESULT __stdcall put_ColorType (
        enum Office::MsoPictureColorType ColorType ) = 0;
    virtual HRESULT __stdcall get_Contrast (
        float * Contrast ) = 0;
    virtual HRESULT __stdcall put_Contrast (
        float Contrast ) = 0;
    virtual HRESULT __stdcall get_CropBottom (
        float * CropBottom ) = 0;
    virtual HRESULT __stdcall put_CropBottom (
        float CropBottom ) = 0;
    virtual HRESULT __stdcall get_CropLeft (
        float * CropLeft ) = 0;
    virtual HRESULT __stdcall put_CropLeft (
        float CropLeft ) = 0;
    virtual HRESULT __stdcall get_CropRight (
        float * CropRight ) = 0;
    virtual HRESULT __stdcall put_CropRight (
        float CropRight ) = 0;
    virtual HRESULT __stdcall get_CropTop (
        float * CropTop ) = 0;
    virtual HRESULT __stdcall put_CropTop (
        float CropTop ) = 0;
    virtual HRESULT __stdcall get_TransparencyColor (
        Office::MsoRGBType * TransparencyColor ) = 0;
    virtual HRESULT __stdcall put_TransparencyColor (
        Office::MsoRGBType TransparencyColor ) = 0;
    virtual HRESULT __stdcall get_TransparentBackground (
        enum Office::MsoTriState * TransparentBackground ) = 0;
    virtual HRESULT __stdcall put_TransparentBackground (
        enum Office::MsoTriState TransparentBackground ) = 0;
};

struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
ShadowFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    float OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    float OffsetY;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementOffsetX (
        float Increment );
    HRESULT IncrementOffsetY (
        float Increment );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoTriState GetObscured ( );
    void PutObscured (
        enum Office::MsoTriState Obscured );
    float GetOffsetX ( );
    void PutOffsetX (
        float OffsetX );
    float GetOffsetY ( );
    void PutOffsetY (
        float OffsetY );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoShadowType GetType ( );
    void PutType (
        enum Office::MsoShadowType Type );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_IncrementOffsetX (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementOffsetY (
        float Increment ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        struct ColorFormat * * ForeColor ) = 0;
    virtual HRESULT __stdcall put_ForeColor (
        struct ColorFormat * ForeColor ) = 0;
    virtual HRESULT __stdcall get_Obscured (
        enum Office::MsoTriState * Obscured ) = 0;
    virtual HRESULT __stdcall put_Obscured (
        enum Office::MsoTriState Obscured ) = 0;
    virtual HRESULT __stdcall get_OffsetX (
        float * OffsetX ) = 0;
    virtual HRESULT __stdcall put_OffsetX (
        float OffsetX ) = 0;
    virtual HRESULT __stdcall get_OffsetY (
        float * OffsetY ) = 0;
    virtual HRESULT __stdcall put_OffsetY (
        float OffsetY ) = 0;
    virtual HRESULT __stdcall get_Transparency (
        float * Transparency ) = 0;
    virtual HRESULT __stdcall put_Transparency (
        float Transparency ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoShadowType * Type ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum Office::MsoShadowType Type ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
TextEffectFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    float FontSize;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTracking,put=PutTracking))
    float Tracking;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT ToggleVerticalText ( );
    enum Office::MsoTextEffectAlignment GetAlignment ( );
    void PutAlignment (
        enum Office::MsoTextEffectAlignment Alignment );
    enum Office::MsoTriState GetFontBold ( );
    void PutFontBold (
        enum Office::MsoTriState FontBold );
    enum Office::MsoTriState GetFontItalic ( );
    void PutFontItalic (
        enum Office::MsoTriState FontItalic );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );
    float GetFontSize ( );
    void PutFontSize (
        float FontSize );
    enum Office::MsoTriState GetKernedPairs ( );
    void PutKernedPairs (
        enum Office::MsoTriState KernedPairs );
    enum Office::MsoTriState GetNormalizedHeight ( );
    void PutNormalizedHeight (
        enum Office::MsoTriState NormalizedHeight );
    enum Office::MsoPresetTextEffectShape GetPresetShape ( );
    void PutPresetShape (
        enum Office::MsoPresetTextEffectShape PresetShape );
    enum Office::MsoPresetTextEffect GetPresetTextEffect ( );
    void PutPresetTextEffect (
        enum Office::MsoPresetTextEffect Preset );
    enum Office::MsoTriState GetRotatedChars ( );
    void PutRotatedChars (
        enum Office::MsoTriState RotatedChars );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    float GetTracking ( );
    void PutTracking (
        float Tracking );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_ToggleVerticalText ( ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum Office::MsoTextEffectAlignment * Alignment ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum Office::MsoTextEffectAlignment Alignment ) = 0;
    virtual HRESULT __stdcall get_FontBold (
        enum Office::MsoTriState * FontBold ) = 0;
    virtual HRESULT __stdcall put_FontBold (
        enum Office::MsoTriState FontBold ) = 0;
    virtual HRESULT __stdcall get_FontItalic (
        enum Office::MsoTriState * FontItalic ) = 0;
    virtual HRESULT __stdcall put_FontItalic (
        enum Office::MsoTriState FontItalic ) = 0;
    virtual HRESULT __stdcall get_FontName (
        BSTR * FontName ) = 0;
    virtual HRESULT __stdcall put_FontName (
        BSTR FontName ) = 0;
    virtual HRESULT __stdcall get_FontSize (
        float * FontSize ) = 0;
    virtual HRESULT __stdcall put_FontSize (
        float FontSize ) = 0;
    virtual HRESULT __stdcall get_KernedPairs (
        enum Office::MsoTriState * KernedPairs ) = 0;
    virtual HRESULT __stdcall put_KernedPairs (
        enum Office::MsoTriState KernedPairs ) = 0;
    virtual HRESULT __stdcall get_NormalizedHeight (
        enum Office::MsoTriState * NormalizedHeight ) = 0;
    virtual HRESULT __stdcall put_NormalizedHeight (
        enum Office::MsoTriState NormalizedHeight ) = 0;
    virtual HRESULT __stdcall get_PresetShape (
        enum Office::MsoPresetTextEffectShape * PresetShape ) = 0;
    virtual HRESULT __stdcall put_PresetShape (
        enum Office::MsoPresetTextEffectShape PresetShape ) = 0;
    virtual HRESULT __stdcall get_PresetTextEffect (
        enum Office::MsoPresetTextEffect * Preset ) = 0;
    virtual HRESULT __stdcall put_PresetTextEffect (
        enum Office::MsoPresetTextEffect Preset ) = 0;
    virtual HRESULT __stdcall get_RotatedChars (
        enum Office::MsoTriState * RotatedChars ) = 0;
    virtual HRESULT __stdcall put_RotatedChars (
        enum Office::MsoTriState RotatedChars ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * Text ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall get_Tracking (
        float * Tracking ) = 0;
    virtual HRESULT __stdcall put_Tracking (
        float Tracking ) = 0;
};

struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
ThreeDFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;
    __declspec(property(get=GetExtrusionColor))
    ColorFormatPtr ExtrusionColor;
    __declspec(property(get=GetPresetExtrusionDirection))
    enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection;
    __declspec(property(get=GetPresetThreeDFormat))
    enum Office::MsoPresetThreeDFormat PresetThreeDFormat;
    __declspec(property(get=GetRotationX,put=PutRotationX))
    float RotationX;
    __declspec(property(get=GetRotationY,put=PutRotationY))
    float RotationY;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementRotationX (
        float Increment );
    HRESULT IncrementRotationY (
        float Increment );
    HRESULT ResetRotation ( );
    HRESULT SetThreeDFormat (
        enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
    HRESULT SetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
    float GetDepth ( );
    void PutDepth (
        float Depth );
    ColorFormatPtr GetExtrusionColor ( );
    enum Office::MsoExtrusionColorType GetExtrusionColorType ( );
    void PutExtrusionColorType (
        enum Office::MsoExtrusionColorType ExtrusionColorType );
    enum Office::MsoTriState GetPerspective ( );
    void PutPerspective (
        enum Office::MsoTriState Perspective );
    enum Office::MsoPresetExtrusionDirection GetPresetExtrusionDirection ( );
    enum Office::MsoPresetLightingDirection GetPresetLightingDirection ( );
    void PutPresetLightingDirection (
        enum Office::MsoPresetLightingDirection PresetLightingDirection );
    enum Office::MsoPresetLightingSoftness GetPresetLightingSoftness ( );
    void PutPresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness PresetLightingSoftness );
    enum Office::MsoPresetMaterial GetPresetMaterial ( );
    void PutPresetMaterial (
        enum Office::MsoPresetMaterial PresetMaterial );
    enum Office::MsoPresetThreeDFormat GetPresetThreeDFormat ( );
    float GetRotationX ( );
    void PutRotationX (
        float RotationX );
    float GetRotationY ( );
    void PutRotationY (
        float RotationY );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotationX (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotationY (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_ResetRotation ( ) = 0;
    virtual HRESULT __stdcall raw_SetThreeDFormat (
        enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) = 0;
    virtual HRESULT __stdcall raw_SetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) = 0;
    virtual HRESULT __stdcall get_Depth (
        float * Depth ) = 0;
    virtual HRESULT __stdcall put_Depth (
        float Depth ) = 0;
    virtual HRESULT __stdcall get_ExtrusionColor (
        struct ColorFormat * * ExtrusionColor ) = 0;
    virtual HRESULT __stdcall get_ExtrusionColorType (
        enum Office::MsoExtrusionColorType * ExtrusionColorType ) = 0;
    virtual HRESULT __stdcall put_ExtrusionColorType (
        enum Office::MsoExtrusionColorType ExtrusionColorType ) = 0;
    virtual HRESULT __stdcall get_Perspective (
        enum Office::MsoTriState * Perspective ) = 0;
    virtual HRESULT __stdcall put_Perspective (
        enum Office::MsoTriState Perspective ) = 0;
    virtual HRESULT __stdcall get_PresetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection * PresetExtrusionDirection ) = 0;
    virtual HRESULT __stdcall get_PresetLightingDirection (
        enum Office::MsoPresetLightingDirection * PresetLightingDirection ) = 0;
    virtual HRESULT __stdcall put_PresetLightingDirection (
        enum Office::MsoPresetLightingDirection PresetLightingDirection ) = 0;
    virtual HRESULT __stdcall get_PresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness * PresetLightingSoftness ) = 0;
    virtual HRESULT __stdcall put_PresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) = 0;
    virtual HRESULT __stdcall get_PresetMaterial (
        enum Office::MsoPresetMaterial * PresetMaterial ) = 0;
    virtual HRESULT __stdcall put_PresetMaterial (
        enum Office::MsoPresetMaterial PresetMaterial ) = 0;
    virtual HRESULT __stdcall get_PresetThreeDFormat (
        enum Office::MsoPresetThreeDFormat * PresetThreeDFormat ) = 0;
    virtual HRESULT __stdcall get_RotationX (
        float * RotationX ) = 0;
    virtual HRESULT __stdcall put_RotationX (
        float RotationX ) = 0;
    virtual HRESULT __stdcall get_RotationY (
        float * RotationY ) = 0;
    virtual HRESULT __stdcall put_RotationY (
        float RotationY ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
FillFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    int GradientVariant;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;
    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Background ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        float Degree );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant );
    HRESULT UserPicture (
        _bstr_t PictureFile );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    int GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        IDispatch * * Parent ) = 0;
    virtual HRESULT __stdcall raw_Background ( ) = 0;
    virtual HRESULT __stdcall raw_OneColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        float Degree ) = 0;
    virtual HRESULT __stdcall raw_Patterned (
        enum Office::MsoPatternType Pattern ) = 0;
    virtual HRESULT __stdcall raw_PresetGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        enum Office::MsoPresetGradientType PresetGradientType ) = 0;
    virtual HRESULT __stdcall raw_PresetTextured (
        enum Office::MsoPresetTexture PresetTexture ) = 0;
    virtual HRESULT __stdcall raw_Solid ( ) = 0;
    virtual HRESULT __stdcall raw_TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant ) = 0;
    virtual HRESULT __stdcall raw_UserPicture (
        BSTR PictureFile ) = 0;
    virtual HRESULT __stdcall raw_UserTextured (
        BSTR TextureFile ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        struct ColorFormat * * BackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        struct ColorFormat * BackColor ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        struct ColorFormat * * ForeColor ) = 0;
    virtual HRESULT __stdcall put_ForeColor (
        struct ColorFormat * ForeColor ) = 0;
    virtual HRESULT __stdcall get_GradientColorType (
        enum Office::MsoGradientColorType * GradientColorType ) = 0;
    virtual HRESULT __stdcall get_GradientDegree (
        float * GradientDegree ) = 0;
    virtual HRESULT __stdcall get_GradientStyle (
        enum Office::MsoGradientStyle * GradientStyle ) = 0;
    virtual HRESULT __stdcall get_GradientVariant (
        int * GradientVariant ) = 0;
    virtual HRESULT __stdcall get_Pattern (
        enum Office::MsoPatternType * Pattern ) = 0;
    virtual HRESULT __stdcall get_PresetGradientType (
        enum Office::MsoPresetGradientType * PresetGradientType ) = 0;
    virtual HRESULT __stdcall get_PresetTexture (
        enum Office::MsoPresetTexture * PresetTexture ) = 0;
    virtual HRESULT __stdcall get_TextureName (
        BSTR * TextureName ) = 0;
    virtual HRESULT __stdcall get_TextureType (
        enum Office::MsoTextureType * TextureType ) = 0;
    virtual HRESULT __stdcall get_Transparency (
        float * Transparency ) = 0;
    virtual HRESULT __stdcall put_Transparency (
        float Transparency ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoFillType * Type ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * Visible ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c036e-0000-0000-c000-000000000046"))
DiagramNodes : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppunkEnum ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct DiagramNode * * ppdn ) = 0;
    virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * pcDiagramNodes ) = 0;
};

struct __declspec(uuid("000c036f-0000-0000-c000-000000000046"))
DiagramNodeChildren : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetFirstChild))
    DiagramNodePtr FirstChild;
    __declspec(property(get=GetLastChild))
    DiagramNodePtr LastChild;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    DiagramNodePtr AddNode (
        const _variant_t & Index,
        enum Office::MsoDiagramNodeType nodeType );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    DiagramNodePtr GetFirstChild ( );
    DiagramNodePtr GetLastChild ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppunkEnum ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct DiagramNode * * ppNode ) = 0;
    virtual HRESULT __stdcall raw_AddNode (
        VARIANT Index,
        enum Office::MsoDiagramNodeType nodeType,
        struct DiagramNode * * ppNewNode ) = 0;
    virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Count (
        int * pcDiagramNodes ) = 0;
    virtual HRESULT __stdcall get_FirstChild (
        struct DiagramNode * * pFirst ) = 0;
    virtual HRESULT __stdcall get_LastChild (
        struct DiagramNode * * pLast ) = 0;
};

struct __declspec(uuid("000c0370-0000-0000-c000-000000000046"))
DiagramNode : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChildren))
    DiagramNodeChildrenPtr Children;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetRoot))
    DiagramNodePtr Root;
    __declspec(property(get=GetDiagram))
    Office::IMsoDiagramPtr Diagram;
    __declspec(property(get=GetTextShape))
    ShapePtr TextShape;

    //
    // Wrapper methods for error-handling
    //

    DiagramNodePtr AddNode (
        enum Office::MsoRelativeNodePosition pos,
        enum Office::MsoDiagramNodeType nodeType );
    HRESULT Delete ( );
    HRESULT MoveNode (
        struct DiagramNode * pTargetNode,
        enum Office::MsoRelativeNodePosition pos );
    HRESULT ReplaceNode (
        struct DiagramNode * pTargetNode );
    HRESULT SwapNode (
        struct DiagramNode * pTargetNode,
        VARIANT_BOOL swapChildren );
    DiagramNodePtr CloneNode (
        VARIANT_BOOL copyChildren,
        struct DiagramNode * pTargetNode,
        enum Office::MsoRelativeNodePosition pos );
    HRESULT TransferChildren (
        struct DiagramNode * pReceivingNode );
    DiagramNodePtr NextNode ( );
    DiagramNodePtr PrevNode ( );
    IDispatchPtr GetParent ( );
    DiagramNodeChildrenPtr GetChildren ( );
    ShapePtr GetShape ( );
    DiagramNodePtr GetRoot ( );
    Office::IMsoDiagramPtr GetDiagram ( );
    enum Office::MsoOrgChartLayoutType GetLayout ( );
    void PutLayout (
        enum Office::MsoOrgChartLayoutType pdgmType );
    ShapePtr GetTextShape ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_AddNode (
        enum Office::MsoRelativeNodePosition pos,
        enum Office::MsoDiagramNodeType nodeType,
        struct DiagramNode * * NewNode ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_MoveNode (
        struct DiagramNode * pTargetNode,
        enum Office::MsoRelativeNodePosition pos ) = 0;
    virtual HRESULT __stdcall raw_ReplaceNode (
        struct DiagramNode * pTargetNode ) = 0;
    virtual HRESULT __stdcall raw_SwapNode (
        struct DiagramNode * pTargetNode,
        VARIANT_BOOL swapChildren ) = 0;
    virtual HRESULT __stdcall raw_CloneNode (
        VARIANT_BOOL copyChildren,
        struct DiagramNode * pTargetNode,
        enum Office::MsoRelativeNodePosition pos,
        struct DiagramNode * * ppNode ) = 0;
    virtual HRESULT __stdcall raw_TransferChildren (
        struct DiagramNode * pReceivingNode ) = 0;
    virtual HRESULT __stdcall raw_NextNode (
        struct DiagramNode * * ppNextNode ) = 0;
    virtual HRESULT __stdcall raw_PrevNode (
        struct DiagramNode * * ppPrevNode ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Children (
        struct DiagramNodeChildren * * ppChildren ) = 0;
    virtual HRESULT __stdcall get_Shape (
        struct Shape * * ppShape ) = 0;
    virtual HRESULT __stdcall get_Root (
        struct DiagramNode * * ppRoot ) = 0;
    virtual HRESULT __stdcall get_Diagram (
        struct Office::IMsoDiagram * * ppDiagram ) = 0;
    virtual HRESULT __stdcall get_Layout (
        enum Office::MsoOrgChartLayoutType * pdgmType ) = 0;
    virtual HRESULT __stdcall put_Layout (
        enum Office::MsoOrgChartLayoutType pdgmType ) = 0;
    virtual HRESULT __stdcall get_TextShape (
        struct Shape * * Shape ) = 0;
};

struct __declspec(uuid("a43788c1-d91b-11d3-8f39-00c04f3651b8"))
IRTDUpdateEvent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeartbeatInterval,put=PutHeartbeatInterval))
    long HeartbeatInterval;

    //
    // Wrapper methods for error-handling
    //

    HRESULT UpdateNotify ( );
    long GetHeartbeatInterval ( );
    void PutHeartbeatInterval (
        long plRetVal );
    HRESULT Disconnect ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_UpdateNotify ( ) = 0;
    virtual HRESULT __stdcall get_HeartbeatInterval (
        long * plRetVal ) = 0;
    virtual HRESULT __stdcall put_HeartbeatInterval (
        long plRetVal ) = 0;
    virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
};

struct __declspec(uuid("ec0e6191-db51-11d3-8f3e-00c04f3651b8"))
IRtdServer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long ServerStart (
        struct IRTDUpdateEvent * CallbackObject );
    _variant_t ConnectData (
        long TopicID,
        SAFEARRAY * * Strings,
        VARIANT_BOOL * GetNewValues );
    SAFEARRAY * RefreshData (
        long * TopicCount );
    HRESULT DisconnectData (
        long TopicID );
    long Heartbeat ( );
    HRESULT ServerTerminate ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_ServerStart (
        struct IRTDUpdateEvent * CallbackObject,
        long * pfRes ) = 0;
    virtual HRESULT __stdcall raw_ConnectData (
        long TopicID,
        SAFEARRAY * * Strings,
        VARIANT_BOOL * GetNewValues,
        VARIANT * pvarOut ) = 0;
    virtual HRESULT __stdcall raw_RefreshData (
        long * TopicCount,
        SAFEARRAY * * parrayOut ) = 0;
    virtual HRESULT __stdcall raw_DisconnectData (
        long TopicID ) = 0;
    virtual HRESULT __stdcall raw_Heartbeat (
        long * pfRes ) = 0;
    virtual HRESULT __stdcall raw_ServerTerminate ( ) = 0;
};

enum Constants
{
    xlAll = -4104,
    xlAutomatic = -4105,
    xlBoth = 1,
    xlCenter = -4108,
    xlChecker = 9,
    xlCircle = 8,
    xlCorner = 2,
    xlCrissCross = 16,
    xlCross = 4,
    xlDiamond = 2,
    xlDistributed = -4117,
    xlDoubleAccounting = 5,
    xlFixedValue = 1,
    xlFormats = -4122,
    xlGray16 = 17,
    xlGray8 = 18,
    xlGrid = 15,
    xlHigh = -4127,
    xlInside = 2,
    xlJustify = -4130,
    xlLightDown = 13,
    xlLightHorizontal = 11,
    xlLightUp = 14,
    xlLightVertical = 12,
    xlLow = -4134,
    xlManual = -4135,
    xlMinusValues = 3,
    xlModule = -4141,
    xlNextToAxis = 4,
    xlNone = -4142,
    xlNotes = -4144,
    xlOff = -4146,
    xlOn = 1,
    xlPercent = 2,
    xlPlus = 9,
    xlPlusValues = 2,
    xlSemiGray75 = 10,
    xlShowLabel = 4,
    xlShowLabelAndPercent = 5,
    xlShowPercent = 3,
    xlShowValue = 2,
    xlSimple = -4154,
    xlSingle = 2,
    xlSingleAccounting = 4,
    xlSolid = 1,
    xlSquare = 1,
    xlStar = 5,
    xlStError = 4,
    xlToolbarButton = 2,
    xlTriangle = 3,
    xlGray25 = -4124,
    xlGray50 = -4125,
    xlGray75 = -4126,
    xlBottom = -4107,
    xlLeft = -4131,
    xlRight = -4152,
    xlTop = -4160,
    xl3DBar = -4099,
    xl3DSurface = -4103,
    xlBar = 2,
    xlColumn = 3,
    xlCombination = -4111,
    xlCustom = -4114,
    xlDefaultAutoFormat = -1,
    xlMaximum = 2,
    xlMinimum = 4,
    xlOpaque = 3,
    xlTransparent = 2,
    xlBidi = -5000,
    xlLatin = -5001,
    xlContext = -5002,
    xlLTR = -5003,
    xlRTL = -5004,
    xlFullScript = 1,
    xlPartialScript = 2,
    xlMixedScript = 3,
    xlMixedAuthorizedScript = 4,
    xlVisualCursor = 2,
    xlLogicalCursor = 1,
    xlSystem = 1,
    xlPartial = 3,
    xlHindiNumerals = 3,
    xlBidiCalendar = 3,
    xlGregorian = 2,
    xlComplete = 4,
    xlScale = 3,
    xlClosed = 3,
    xlColor1 = 7,
    xlColor2 = 8,
    xlColor3 = 9,
    xlConstants = 2,
    xlContents = 2,
    xlBelow = 1,
    xlCascade = 7,
    xlCenterAcrossSelection = 7,
    xlChart4 = 2,
    xlChartSeries = 17,
    xlChartShort = 6,
    xlChartTitles = 18,
    xlClassic1 = 1,
    xlClassic2 = 2,
    xlClassic3 = 3,
    xl3DEffects1 = 13,
    xl3DEffects2 = 14,
    xlAbove = 0,
    xlAccounting1 = 4,
    xlAccounting2 = 5,
    xlAccounting3 = 6,
    xlAccounting4 = 17,
    xlAdd = 2,
    xlDebugCodePane = 13,
    xlDesktop = 9,
    xlDirect = 1,
    xlDivide = 5,
    xlDoubleClosed = 5,
    xlDoubleOpen = 4,
    xlDoubleQuote = 1,
    xlEntireChart = 20,
    xlExcelMenus = 1,
    xlExtended = 3,
    xlFill = 5,
    xlFirst = 0,
    xlFloating = 5,
    xlFormula = 5,
    xlGeneral = 1,
    xlGridline = 22,
    xlIcons = 1,
    xlImmediatePane = 12,
    xlInteger = 2,
    xlLast = 1,
    xlLastCell = 11,
    xlList1 = 10,
    xlList2 = 11,
    xlList3 = 12,
    xlLocalFormat1 = 15,
    xlLocalFormat2 = 16,
    xlLong = 3,
    xlLotusHelp = 2,
    xlMacrosheetCell = 7,
    xlMixed = 2,
    xlMultiply = 4,
    xlNarrow = 1,
    xlNoDocuments = 3,
    xlOpen = 2,
    xlOutside = 3,
    xlReference = 4,
    xlSemiautomatic = 2,
    xlShort = 1,
    xlSingleQuote = 2,
    xlStrict = 2,
    xlSubtract = 3,
    xlTextBox = 16,
    xlTiled = 1,
    xlTitleBar = 8,
    xlToolbar = 1,
    xlVisible = 12,
    xlWatchPane = 11,
    xlWide = 3,
    xlWorkbookTab = 6,
    xlWorksheet4 = 1,
    xlWorksheetCell = 3,
    xlWorksheetShort = 5,
    xlAllExceptBorders = 7,
    xlLeftToRight = 2,
    xlTopToBottom = 1,
    xlVeryHidden = 2,
    xlDrawingObject = 14
};

enum XlCreator
{
    xlCreatorCode = 1480803660
};

enum XlChartGallery
{
    xlBuiltIn = 21,
    xlUserDefined = 22,
    xlAnyGallery = 23
};

enum XlColorIndex
{
    xlColorIndexAutomatic = -4105,
    xlColorIndexNone = -4142
};

enum XlEndStyleCap
{
    xlCap = 1,
    xlNoCap = 2
};

enum XlRowCol
{
    xlColumns = 2,
    xlRows = 1
};

enum XlScaleType
{
    xlScaleLinear = -4132,
    xlScaleLogarithmic = -4133
};

enum XlDataSeriesType
{
    xlAutoFill = 4,
    xlChronological = 3,
    xlGrowth = 2,
    xlDataSeriesLinear = -4132
};

enum XlAxisCrosses
{
    xlAxisCrossesAutomatic = -4105,
    xlAxisCrossesCustom = -4114,
    xlAxisCrossesMaximum = 2,
    xlAxisCrossesMinimum = 4
};

enum XlAxisGroup
{
    xlPrimary = 1,
    xlSecondary = 2
};

enum XlBackground
{
    xlBackgroundAutomatic = -4105,
    xlBackgroundOpaque = 3,
    xlBackgroundTransparent = 2
};

enum XlWindowState
{
    xlMaximized = -4137,
    xlMinimized = -4140,
    xlNormal = -4143
};

enum XlAxisType
{
    xlCategory = 1,
    xlSeriesAxis = 3,
    xlValue = 2
};

enum XlArrowHeadLength
{
    xlArrowHeadLengthLong = 3,
    xlArrowHeadLengthMedium = -4138,
    xlArrowHeadLengthShort = 1
};

enum XlVAlign
{
    xlVAlignBottom = -4107,
    xlVAlignCenter = -4108,
    xlVAlignDistributed = -4117,
    xlVAlignJustify = -4130,
    xlVAlignTop = -4160
};

enum XlTickMark
{
    xlTickMarkCross = 4,
    xlTickMarkInside = 2,
    xlTickMarkNone = -4142,
    xlTickMarkOutside = 3
};

enum XlErrorBarDirection
{
    xlX = -4168,
    xlY = 1
};

enum XlErrorBarInclude
{
    xlErrorBarIncludeBoth = 1,
    xlErrorBarIncludeMinusValues = 3,
    xlErrorBarIncludeNone = -4142,
    xlErrorBarIncludePlusValues = 2
};

enum XlDisplayBlanksAs
{
    xlInterpolated = 3,
    xlNotPlotted = 1,
    xlZero = 2
};

enum XlArrowHeadStyle
{
    xlArrowHeadStyleClosed = 3,
    xlArrowHeadStyleDoubleClosed = 5,
    xlArrowHeadStyleDoubleOpen = 4,
    xlArrowHeadStyleNone = -4142,
    xlArrowHeadStyleOpen = 2
};

enum XlArrowHeadWidth
{
    xlArrowHeadWidthMedium = -4138,
    xlArrowHeadWidthNarrow = 1,
    xlArrowHeadWidthWide = 3
};

enum XlHAlign
{
    xlHAlignCenter = -4108,
    xlHAlignCenterAcrossSelection = 7,
    xlHAlignDistributed = -4117,
    xlHAlignFill = 5,
    xlHAlignGeneral = 1,
    xlHAlignJustify = -4130,
    xlHAlignLeft = -4131,
    xlHAlignRight = -4152
};

enum XlTickLabelPosition
{
    xlTickLabelPositionHigh = -4127,
    xlTickLabelPositionLow = -4134,
    xlTickLabelPositionNextToAxis = 4,
    xlTickLabelPositionNone = -4142
};

enum XlLegendPosition
{
    xlLegendPositionBottom = -4107,
    xlLegendPositionCorner = 2,
    xlLegendPositionLeft = -4131,
    xlLegendPositionRight = -4152,
    xlLegendPositionTop = -4160
};

enum XlChartPictureType
{
    xlStackScale = 3,
    xlStack = 2,
    xlStretch = 1
};

enum XlChartPicturePlacement
{
    xlSides = 1,
    xlEnd = 2,
    xlEndSides = 3,
    xlFront = 4,
    xlFrontSides = 5,
    xlFrontEnd = 6,
    xlAllFaces = 7
};

enum XlOrientation
{
    xlDownward = -4170,
    xlHorizontal = -4128,
    xlUpward = -4171,
    xlVertical = -4166
};

enum XlTickLabelOrientation
{
    xlTickLabelOrientationAutomatic = -4105,
    xlTickLabelOrientationDownward = -4170,
    xlTickLabelOrientationHorizontal = -4128,
    xlTickLabelOrientationUpward = -4171,
    xlTickLabelOrientationVertical = -4166
};

enum XlBorderWeight
{
    xlHairline = 1,
    xlMedium = -4138,
    xlThick = 4,
    xlThin = 2
};

enum XlDataSeriesDate
{
    xlDay = 1,
    xlMonth = 3,
    xlWeekday = 2,
    xlYear = 4
};

enum XlUnderlineStyle
{
    xlUnderlineStyleDouble = -4119,
    xlUnderlineStyleDoubleAccounting = 5,
    xlUnderlineStyleNone = -4142,
    xlUnderlineStyleSingle = 2,
    xlUnderlineStyleSingleAccounting = 4
};

enum XlErrorBarType
{
    xlErrorBarTypeCustom = -4114,
    xlErrorBarTypeFixedValue = 1,
    xlErrorBarTypePercent = 2,
    xlErrorBarTypeStDev = -4155,
    xlErrorBarTypeStError = 4
};

enum XlTrendlineType
{
    xlExponential = 5,
    xlLinear = -4132,
    xlLogarithmic = -4133,
    xlMovingAvg = 6,
    xlPolynomial = 3,
    xlPower = 4
};

enum XlLineStyle
{
    xlContinuous = 1,
    xlDash = -4115,
    xlDashDot = 4,
    xlDashDotDot = 5,
    xlDot = -4118,
    xlDouble = -4119,
    xlSlantDashDot = 13,
    xlLineStyleNone = -4142
};

enum XlDataLabelsType
{
    xlDataLabelsShowNone = -4142,
    xlDataLabelsShowValue = 2,
    xlDataLabelsShowPercent = 3,
    xlDataLabelsShowLabel = 4,
    xlDataLabelsShowLabelAndPercent = 5,
    xlDataLabelsShowBubbleSizes = 6
};

enum XlMarkerStyle
{
    xlMarkerStyleAutomatic = -4105,
    xlMarkerStyleCircle = 8,
    xlMarkerStyleDash = -4115,
    xlMarkerStyleDiamond = 2,
    xlMarkerStyleDot = -4118,
    xlMarkerStyleNone = -4142,
    xlMarkerStylePicture = -4147,
    xlMarkerStylePlus = 9,
    xlMarkerStyleSquare = 1,
    xlMarkerStyleStar = 5,
    xlMarkerStyleTriangle = 3,
    xlMarkerStyleX = -4168
};

enum XlPictureConvertorType
{
    xlBMP = 1,
    xlCGM = 7,
    xlDRW = 4,
    xlDXF = 5,
    xlEPS = 8,
    xlHGL = 6,
    xlPCT = 13,
    xlPCX = 10,
    xlPIC = 11,
    xlPLT = 12,
    xlTIF = 9,
    xlWMF = 2,
    xlWPG = 3
};

enum XlPattern
{
    xlPatternAutomatic = -4105,
    xlPatternChecker = 9,
    xlPatternCrissCross = 16,
    xlPatternDown = -4121,
    xlPatternGray16 = 17,
    xlPatternGray25 = -4124,
    xlPatternGray50 = -4125,
    xlPatternGray75 = -4126,
    xlPatternGray8 = 18,
    xlPatternGrid = 15,
    xlPatternHorizontal = -4128,
    xlPatternLightDown = 13,
    xlPatternLightHorizontal = 11,
    xlPatternLightUp = 14,
    xlPatternLightVertical = 12,
    xlPatternNone = -4142,
    xlPatternSemiGray75 = 10,
    xlPatternSolid = 1,
    xlPatternUp = -4162,
    xlPatternVertical = -4166
};

enum XlChartSplitType
{
    xlSplitByPosition = 1,
    xlSplitByPercentValue = 3,
    xlSplitByCustomSplit = 4,
    xlSplitByValue = 2
};

enum XlDisplayUnit
{
    xlHundreds = -2,
    xlThousands = -3,
    xlTenThousands = -4,
    xlHundredThousands = -5,
    xlMillions = -6,
    xlTenMillions = -7,
    xlHundredMillions = -8,
    xlThousandMillions = -9,
    xlMillionMillions = -10
};

enum XlDataLabelPosition
{
    xlLabelPositionCenter = -4108,
    xlLabelPositionAbove = 0,
    xlLabelPositionBelow = 1,
    xlLabelPositionLeft = -4131,
    xlLabelPositionRight = -4152,
    xlLabelPositionOutsideEnd = 2,
    xlLabelPositionInsideEnd = 3,
    xlLabelPositionInsideBase = 4,
    xlLabelPositionBestFit = 5,
    xlLabelPositionMixed = 6,
    xlLabelPositionCustom = 7
};

enum XlTimeUnit
{
    xlDays = 0,
    xlMonths = 1,
    xlYears = 2
};

enum XlCategoryType
{
    xlCategoryScale = 2,
    xlTimeScale = 3,
    xlAutomaticScale = -4105
};

enum XlBarShape
{
    xlBox = 0,
    xlPyramidToPoint = 1,
    xlPyramidToMax = 2,
    xlCylinder = 3,
    xlConeToPoint = 4,
    xlConeToMax = 5
};

enum XlChartType
{
    xlColumnClustered = 51,
    xlColumnStacked = 52,
    xlColumnStacked100 = 53,
    xl3DColumnClustered = 54,
    xl3DColumnStacked = 55,
    xl3DColumnStacked100 = 56,
    xlBarClustered = 57,
    xlBarStacked = 58,
    xlBarStacked100 = 59,
    xl3DBarClustered = 60,
    xl3DBarStacked = 61,
    xl3DBarStacked100 = 62,
    xlLineStacked = 63,
    xlLineStacked100 = 64,
    xlLineMarkers = 65,
    xlLineMarkersStacked = 66,
    xlLineMarkersStacked100 = 67,
    xlPieOfPie = 68,
    xlPieExploded = 69,
    xl3DPieExploded = 70,
    xlBarOfPie = 71,
    xlXYScatterSmooth = 72,
    xlXYScatterSmoothNoMarkers = 73,
    xlXYScatterLines = 74,
    xlXYScatterLinesNoMarkers = 75,
    xlAreaStacked = 76,
    xlAreaStacked100 = 77,
    xl3DAreaStacked = 78,
    xl3DAreaStacked100 = 79,
    xlDoughnutExploded = 80,
    xlRadarMarkers = 81,
    xlRadarFilled = 82,
    xlSurface = 83,
    xlSurfaceWireframe = 84,
    xlSurfaceTopView = 85,
    xlSurfaceTopViewWireframe = 86,
    xlBubble = 15,
    xlBubble3DEffect = 87,
    xlStockHLC = 88,
    xlStockOHLC = 89,
    xlStockVHLC = 90,
    xlStockVOHLC = 91,
    xlCylinderColClustered = 92,
    xlCylinderColStacked = 93,
    xlCylinderColStacked100 = 94,
    xlCylinderBarClustered = 95,
    xlCylinderBarStacked = 96,
    xlCylinderBarStacked100 = 97,
    xlCylinderCol = 98,
    xlConeColClustered = 99,
    xlConeColStacked = 100,
    xlConeColStacked100 = 101,
    xlConeBarClustered = 102,
    xlConeBarStacked = 103,
    xlConeBarStacked100 = 104,
    xlConeCol = 105,
    xlPyramidColClustered = 106,
    xlPyramidColStacked = 107,
    xlPyramidColStacked100 = 108,
    xlPyramidBarClustered = 109,
    xlPyramidBarStacked = 110,
    xlPyramidBarStacked100 = 111,
    xlPyramidCol = 112,
    xl3DColumn = -4100,
    xlLine = 4,
    xl3DLine = -4101,
    xl3DPie = -4102,
    xlPie = 5,
    xlXYScatter = -4169,
    xl3DArea = -4098,
    xlArea = 1,
    xlDoughnut = -4120,
    xlRadar = -4151
};

enum XlChartItem
{
    xlDataLabel = 0,
    xlChartArea = 2,
    xlSeries = 3,
    xlChartTitle = 4,
    xlWalls = 5,
    xlCorners = 6,
    xlDataTable = 7,
    xlTrendline = 8,
    xlErrorBars = 9,
    xlXErrorBars = 10,
    xlYErrorBars = 11,
    xlLegendEntry = 12,
    xlLegendKey = 13,
    xlShape = 14,
    xlMajorGridlines = 15,
    xlMinorGridlines = 16,
    xlAxisTitle = 17,
    xlUpBars = 18,
    xlPlotArea = 19,
    xlDownBars = 20,
    xlAxis = 21,
    xlSeriesLines = 22,
    xlFloor = 23,
    xlLegend = 24,
    xlHiLoLines = 25,
    xlDropLines = 26,
    xlRadarAxisLabels = 27,
    xlNothing = 28,
    xlLeaderLines = 29,
    xlDisplayUnitLabel = 30,
    xlPivotChartFieldButton = 31,
    xlPivotChartDropZone = 32
};

enum XlSizeRepresents
{
    xlSizeIsWidth = 2,
    xlSizeIsArea = 1
};

enum XlInsertShiftDirection
{
    xlShiftDown = -4121,
    xlShiftToRight = -4161
};

enum XlDeleteShiftDirection
{
    xlShiftToLeft = -4159,
    xlShiftUp = -4162
};

enum XlDirection
{
    xlDown = -4121,
    xlToLeft = -4159,
    xlToRight = -4161,
    xlUp = -4162
};

enum XlConsolidationFunction
{
    xlAverage = -4106,
    xlCount = -4112,
    xlCountNums = -4113,
    xlMax = -4136,
    xlMin = -4139,
    xlProduct = -4149,
    xlStDev = -4155,
    xlStDevP = -4156,
    xlSum = -4157,
    xlVar = -4164,
    xlVarP = -4165,
    xlUnknown = 1000
};

enum XlSheetType
{
    xlChart = -4109,
    xlDialogSheet = -4116,
    xlExcel4IntlMacroSheet = 4,
    xlExcel4MacroSheet = 3,
    xlWorksheet = -4167
};

enum XlLocationInTable
{
    xlColumnHeader = -4110,
    xlColumnItem = 5,
    xlDataHeader = 3,
    xlDataItem = 7,
    xlPageHeader = 2,
    xlPageItem = 6,
    xlRowHeader = -4153,
    xlRowItem = 4,
    xlTableBody = 8
};

enum XlFindLookIn
{
    xlFormulas = -4123,
    xlComments = -4144,
    xlValues = -4163
};

enum XlWindowType
{
    xlChartAsWindow = 5,
    xlChartInPlace = 4,
    xlClipboard = 3,
    xlInfo = -4129,
    xlWorkbook = 1
};

enum XlPivotFieldDataType
{
    xlDate = 2,
    xlNumber = -4145,
    xlText = -4158
};

enum XlCopyPictureFormat
{
    xlBitmap = 2,
    xlPicture = -4147
};

enum XlPivotTableSourceType
{
    xlScenario = 4,
    xlConsolidation = 3,
    xlDatabase = 1,
    xlExternal = 2,
    xlPivotTable = -4148
};

enum XlReferenceStyle
{
    xlA1 = 1,
    xlR1C1 = -4150
};

enum XlMSApplication
{
    xlMicrosoftAccess = 4,
    xlMicrosoftFoxPro = 5,
    xlMicrosoftMail = 3,
    xlMicrosoftPowerPoint = 2,
    xlMicrosoftProject = 6,
    xlMicrosoftSchedulePlus = 7,
    xlMicrosoftWord = 1
};

enum XlMouseButton
{
    xlNoButton = 0,
    xlPrimaryButton = 1,
    xlSecondaryButton = 2
};

enum XlCutCopyMode
{
    xlCopy = 1,
    xlCut = 2
};

enum XlFillWith
{
    xlFillWithAll = -4104,
    xlFillWithContents = 2,
    xlFillWithFormats = -4122
};

enum XlFilterAction
{
    xlFilterCopy = 2,
    xlFilterInPlace = 1
};

enum XlOrder
{
    xlDownThenOver = 1,
    xlOverThenDown = 2
};

enum XlLinkType
{
    xlLinkTypeExcelLinks = 1,
    xlLinkTypeOLELinks = 2
};

enum XlApplyNamesOrder
{
    xlColumnThenRow = 2,
    xlRowThenColumn = 1
};

enum XlEnableCancelKey
{
    xlDisabled = 0,
    xlErrorHandler = 2,
    xlInterrupt = 1
};

enum XlPageBreak
{
    xlPageBreakAutomatic = -4105,
    xlPageBreakManual = -4135,
    xlPageBreakNone = -4142
};

enum XlOLEType
{
    xlOLEControl = 2,
    xlOLEEmbed = 1,
    xlOLELink = 0
};

enum XlPageOrientation
{
    xlLandscape = 2,
    xlPortrait = 1
};

enum XlLinkInfo
{
    xlEditionDate = 2,
    xlUpdateState = 1,
    xlLinkInfoStatus = 3
};

enum XlCommandUnderlines
{
    xlCommandUnderlinesAutomatic = -4105,
    xlCommandUnderlinesOff = -4146,
    xlCommandUnderlinesOn = 1
};

enum XlOLEVerb
{
    xlVerbOpen = 2,
    xlVerbPrimary = 1
};

enum XlCalculation
{
    xlCalculationAutomatic = -4105,
    xlCalculationManual = -4135,
    xlCalculationSemiautomatic = 2
};

enum XlFileAccess
{
    xlReadOnly = 3,
    xlReadWrite = 2
};

enum XlEditionType
{
    xlPublisher = 1,
    xlSubscriber = 2
};

enum XlObjectSize
{
    xlFitToPage = 2,
    xlFullPage = 3,
    xlScreenSize = 1
};

enum XlLookAt
{
    xlPart = 2,
    xlWhole = 1
};

enum XlMailSystem
{
    xlMAPI = 1,
    xlNoMailSystem = 0,
    xlPowerTalk = 2
};

enum XlLinkInfoType
{
    xlLinkInfoOLELinks = 2,
    xlLinkInfoPublishers = 5,
    xlLinkInfoSubscribers = 6
};

enum XlCVError
{
    xlErrDiv0 = 2007,
    xlErrNA = 2042,
    xlErrName = 2029,
    xlErrNull = 2000,
    xlErrNum = 2036,
    xlErrRef = 2023,
    xlErrValue = 2015
};

enum XlEditionFormat
{
    xlBIFF = 2,
    xlPICT = 1,
    xlRTF = 4,
    xlVALU = 8
};

enum XlLink
{
    xlExcelLinks = 1,
    xlOLELinks = 2,
    xlPublishers = 5,
    xlSubscribers = 6
};

enum XlCellType
{
    xlCellTypeBlanks = 4,
    xlCellTypeConstants = 2,
    xlCellTypeFormulas = -4123,
    xlCellTypeLastCell = 11,
    xlCellTypeComments = -4144,
    xlCellTypeVisible = 12,
    xlCellTypeAllFormatConditions = -4172,
    xlCellTypeSameFormatConditions = -4173,
    xlCellTypeAllValidation = -4174,
    xlCellTypeSameValidation = -4175
};

enum XlArrangeStyle
{
    xlArrangeStyleCascade = 7,
    xlArrangeStyleHorizontal = -4128,
    xlArrangeStyleTiled = 1,
    xlArrangeStyleVertical = -4166
};

enum XlMousePointer
{
    xlIBeam = 3,
    xlDefault = -4143,
    xlNorthwestArrow = 1,
    xlWait = 2
};

enum XlEditionOptionsOption
{
    xlAutomaticUpdate = 4,
    xlCancel = 1,
    xlChangeAttributes = 6,
    xlManualUpdate = 5,
    xlOpenSource = 3,
    xlSelect = 3,
    xlSendPublisher = 2,
    xlUpdateSubscriber = 2
};

enum XlAutoFillType
{
    xlFillCopy = 1,
    xlFillDays = 5,
    xlFillDefault = 0,
    xlFillFormats = 3,
    xlFillMonths = 7,
    xlFillSeries = 2,
    xlFillValues = 4,
    xlFillWeekdays = 6,
    xlFillYears = 8,
    xlGrowthTrend = 10,
    xlLinearTrend = 9
};

enum XlAutoFilterOperator
{
    xlAnd = 1,
    xlBottom10Items = 4,
    xlBottom10Percent = 6,
    xlOr = 2,
    xlTop10Items = 3,
    xlTop10Percent = 5
};

enum XlClipboardFormat
{
    xlClipboardFormatBIFF = 8,
    xlClipboardFormatBIFF2 = 18,
    xlClipboardFormatBIFF3 = 20,
    xlClipboardFormatBIFF4 = 30,
    xlClipboardFormatBinary = 15,
    xlClipboardFormatBitmap = 9,
    xlClipboardFormatCGM = 13,
    xlClipboardFormatCSV = 5,
    xlClipboardFormatDIF = 4,
    xlClipboardFormatDspText = 12,
    xlClipboardFormatEmbeddedObject = 21,
    xlClipboardFormatEmbedSource = 22,
    xlClipboardFormatLink = 11,
    xlClipboardFormatLinkSource = 23,
    xlClipboardFormatLinkSourceDesc = 32,
    xlClipboardFormatMovie = 24,
    xlClipboardFormatNative = 14,
    xlClipboardFormatObjectDesc = 31,
    xlClipboardFormatObjectLink = 19,
    xlClipboardFormatOwnerLink = 17,
    xlClipboardFormatPICT = 2,
    xlClipboardFormatPrintPICT = 3,
    xlClipboardFormatRTF = 7,
    xlClipboardFormatScreenPICT = 29,
    xlClipboardFormatStandardFont = 28,
    xlClipboardFormatStandardScale = 27,
    xlClipboardFormatSYLK = 6,
    xlClipboardFormatTable = 16,
    xlClipboardFormatText = 0,
    xlClipboardFormatToolFace = 25,
    xlClipboardFormatToolFacePICT = 26,
    xlClipboardFormatVALU = 1,
    xlClipboardFormatWK1 = 10
};

enum XlFileFormat
{
    xlAddIn = 18,
    xlCSV = 6,
    xlCSVMac = 22,
    xlCSVMSDOS = 24,
    xlCSVWindows = 23,
    xlDBF2 = 7,
    xlDBF3 = 8,
    xlDBF4 = 11,
    xlDIF = 9,
    xlExcel2 = 16,
    xlExcel2FarEast = 27,
    xlExcel3 = 29,
    xlExcel4 = 33,
    xlExcel5 = 39,
    xlExcel7 = 39,
    xlExcel9795 = 43,
    xlExcel4Workbook = 35,
    xlIntlAddIn = 26,
    xlIntlMacro = 25,
    xlWorkbookNormal = -4143,
    xlSYLK = 2,
    xlTemplate = 17,
    xlCurrentPlatformText = -4158,
    xlTextMac = 19,
    xlTextMSDOS = 21,
    xlTextPrinter = 36,
    xlTextWindows = 20,
    xlWJ2WD1 = 14,
    xlWK1 = 5,
    xlWK1ALL = 31,
    xlWK1FMT = 30,
    xlWK3 = 15,
    xlWK4 = 38,
    xlWK3FM3 = 32,
    xlWKS = 4,
    xlWorks2FarEast = 28,
    xlWQ1 = 34,
    xlWJ3 = 40,
    xlWJ3FJ3 = 41,
    xlUnicodeText = 42,
    xlHtml = 44,
    xlWebArchive = 45,
    xlXMLSpreadsheet = 46
};

enum XlApplicationInternational
{
    xl24HourClock = 33,
    xl4DigitYears = 43,
    xlAlternateArraySeparator = 16,
    xlColumnSeparator = 14,
    xlCountryCode = 1,
    xlCountrySetting = 2,
    xlCurrencyBefore = 37,
    xlCurrencyCode = 25,
    xlCurrencyDigits = 27,
    xlCurrencyLeadingZeros = 40,
    xlCurrencyMinusSign = 38,
    xlCurrencyNegative = 28,
    xlCurrencySpaceBefore = 36,
    xlCurrencyTrailingZeros = 39,
    xlDateOrder = 32,
    xlDateSeparator = 17,
    xlDayCode = 21,
    xlDayLeadingZero = 42,
    xlDecimalSeparator = 3,
    xlGeneralFormatName = 26,
    xlHourCode = 22,
    xlLeftBrace = 12,
    xlLeftBracket = 10,
    xlListSeparator = 5,
    xlLowerCaseColumnLetter = 9,
    xlLowerCaseRowLetter = 8,
    xlMDY = 44,
    xlMetric = 35,
    xlMinuteCode = 23,
    xlMonthCode = 20,
    xlMonthLeadingZero = 41,
    xlMonthNameChars = 30,
    xlNoncurrencyDigits = 29,
    xlNonEnglishFunctions = 34,
    xlRightBrace = 13,
    xlRightBracket = 11,
    xlRowSeparator = 15,
    xlSecondCode = 24,
    xlThousandsSeparator = 4,
    xlTimeLeadingZero = 45,
    xlTimeSeparator = 18,
    xlUpperCaseColumnLetter = 7,
    xlUpperCaseRowLetter = 6,
    xlWeekdayNameChars = 31,
    xlYearCode = 19
};

enum XlPageBreakExtent
{
    xlPageBreakFull = 1,
    xlPageBreakPartial = 2
};

enum XlCellInsertionMode
{
    xlOverwriteCells = 0,
    xlInsertDeleteCells = 1,
    xlInsertEntireRows = 2
};

enum XlFormulaLabel
{
    xlNoLabels = -4142,
    xlRowLabels = 1,
    xlColumnLabels = 2,
    xlMixedLabels = 3
};

enum XlHighlightChangesTime
{
    xlSinceMyLastSave = 1,
    xlAllChanges = 2,
    xlNotYetReviewed = 3
};

enum XlCommentDisplayMode
{
    xlNoIndicator = 0,
    xlCommentIndicatorOnly = -1,
    xlCommentAndIndicator = 1
};

enum XlFormatConditionType
{
    xlCellValue = 1,
    xlExpression = 2
};

enum XlFormatConditionOperator
{
    xlBetween = 1,
    xlNotBetween = 2,
    xlEqual = 3,
    xlNotEqual = 4,
    xlGreater = 5,
    xlLess = 6,
    xlGreaterEqual = 7,
    xlLessEqual = 8
};

enum XlEnableSelection
{
    xlNoRestrictions = 0,
    xlUnlockedCells = 1,
    xlNoSelection = -4142
};

enum XlDVType
{
    xlValidateInputOnly = 0,
    xlValidateWholeNumber = 1,
    xlValidateDecimal = 2,
    xlValidateList = 3,
    xlValidateDate = 4,
    xlValidateTime = 5,
    xlValidateTextLength = 6,
    xlValidateCustom = 7
};

enum XlIMEMode
{
    xlIMEModeNoControl = 0,
    xlIMEModeOn = 1,
    xlIMEModeOff = 2,
    xlIMEModeDisable = 3,
    xlIMEModeHiragana = 4,
    xlIMEModeKatakana = 5,
    xlIMEModeKatakanaHalf = 6,
    xlIMEModeAlphaFull = 7,
    xlIMEModeAlpha = 8,
    xlIMEModeHangulFull = 9,
    xlIMEModeHangul = 10
};

enum XlDVAlertStyle
{
    xlValidAlertStop = 1,
    xlValidAlertWarning = 2,
    xlValidAlertInformation = 3
};

enum XlChartLocation
{
    xlLocationAsNewSheet = 1,
    xlLocationAsObject = 2,
    xlLocationAutomatic = 3
};

enum XlPaperSize
{
    xlPaper10x14 = 16,
    xlPaper11x17 = 17,
    xlPaperA3 = 8,
    xlPaperA4 = 9,
    xlPaperA4Small = 10,
    xlPaperA5 = 11,
    xlPaperB4 = 12,
    xlPaperB5 = 13,
    xlPaperCsheet = 24,
    xlPaperDsheet = 25,
    xlPaperEnvelope10 = 20,
    xlPaperEnvelope11 = 21,
    xlPaperEnvelope12 = 22,
    xlPaperEnvelope14 = 23,
    xlPaperEnvelope9 = 19,
    xlPaperEnvelopeB4 = 33,
    xlPaperEnvelopeB5 = 34,
    xlPaperEnvelopeB6 = 35,
    xlPaperEnvelopeC3 = 29,
    xlPaperEnvelopeC4 = 30,
    xlPaperEnvelopeC5 = 28,
    xlPaperEnvelopeC6 = 31,
    xlPaperEnvelopeC65 = 32,
    xlPaperEnvelopeDL = 27,
    xlPaperEnvelopeItaly = 36,
    xlPaperEnvelopeMonarch = 37,
    xlPaperEnvelopePersonal = 38,
    xlPaperEsheet = 26,
    xlPaperExecutive = 7,
    xlPaperFanfoldLegalGerman = 41,
    xlPaperFanfoldStdGerman = 40,
    xlPaperFanfoldUS = 39,
    xlPaperFolio = 14,
    xlPaperLedger = 4,
    xlPaperLegal = 5,
    xlPaperLetter = 1,
    xlPaperLetterSmall = 2,
    xlPaperNote = 18,
    xlPaperQuarto = 15,
    xlPaperStatement = 6,
    xlPaperTabloid = 3,
    xlPaperUser = 256
};

enum XlPasteSpecialOperation
{
    xlPasteSpecialOperationAdd = 2,
    xlPasteSpecialOperationDivide = 5,
    xlPasteSpecialOperationMultiply = 4,
    xlPasteSpecialOperationNone = -4142,
    xlPasteSpecialOperationSubtract = 3
};

enum XlPasteType
{
    xlPasteAll = -4104,
    xlPasteAllExceptBorders = 7,
    xlPasteFormats = -4122,
    xlPasteFormulas = -4123,
    xlPasteComments = -4144,
    xlPasteValues = -4163,
    xlPasteColumnWidths = 8,
    xlPasteValidation = 6,
    xlPasteFormulasAndNumberFormats = 11,
    xlPasteValuesAndNumberFormats = 12
};

enum XlPhoneticCharacterType
{
    xlKatakanaHalf = 0,
    xlKatakana = 1,
    xlHiragana = 2,
    xlNoConversion = 3
};

enum XlPhoneticAlignment
{
    xlPhoneticAlignNoControl = 0,
    xlPhoneticAlignLeft = 1,
    xlPhoneticAlignCenter = 2,
    xlPhoneticAlignDistributed = 3
};

enum XlPictureAppearance
{
    xlPrinter = 2,
    xlScreen = 1
};

enum XlPivotFieldOrientation
{
    xlColumnField = 2,
    xlDataField = 4,
    xlHidden = 0,
    xlPageField = 3,
    xlRowField = 1
};

enum XlPivotFieldCalculation
{
    xlDifferenceFrom = 2,
    xlIndex = 9,
    xlNoAdditionalCalculation = -4143,
    xlPercentDifferenceFrom = 4,
    xlPercentOf = 3,
    xlPercentOfColumn = 7,
    xlPercentOfRow = 6,
    xlPercentOfTotal = 8,
    xlRunningTotal = 5
};

enum XlPlacement
{
    xlFreeFloating = 3,
    xlMove = 2,
    xlMoveAndSize = 1
};

enum XlPlatform
{
    xlMacintosh = 1,
    xlMSDOS = 3,
    xlWindows = 2
};

enum XlPrintLocation
{
    xlPrintSheetEnd = 1,
    xlPrintInPlace = 16,
    xlPrintNoComments = -4142
};

enum XlPriority
{
    xlPriorityHigh = -4127,
    xlPriorityLow = -4134,
    xlPriorityNormal = -4143
};

enum XlPTSelectionMode
{
    xlLabelOnly = 1,
    xlDataAndLabel = 0,
    xlDataOnly = 2,
    xlOrigin = 3,
    xlButton = 15,
    xlBlanks = 4,
    xlFirstRow = 256
};

enum XlRangeAutoFormat
{
    xlRangeAutoFormat3DEffects1 = 13,
    xlRangeAutoFormat3DEffects2 = 14,
    xlRangeAutoFormatAccounting1 = 4,
    xlRangeAutoFormatAccounting2 = 5,
    xlRangeAutoFormatAccounting3 = 6,
    xlRangeAutoFormatAccounting4 = 17,
    xlRangeAutoFormatClassic1 = 1,
    xlRangeAutoFormatClassic2 = 2,
    xlRangeAutoFormatClassic3 = 3,
    xlRangeAutoFormatColor1 = 7,
    xlRangeAutoFormatColor2 = 8,
    xlRangeAutoFormatColor3 = 9,
    xlRangeAutoFormatList1 = 10,
    xlRangeAutoFormatList2 = 11,
    xlRangeAutoFormatList3 = 12,
    xlRangeAutoFormatLocalFormat1 = 15,
    xlRangeAutoFormatLocalFormat2 = 16,
    xlRangeAutoFormatLocalFormat3 = 19,
    xlRangeAutoFormatLocalFormat4 = 20,
    xlRangeAutoFormatReport1 = 21,
    xlRangeAutoFormatReport2 = 22,
    xlRangeAutoFormatReport3 = 23,
    xlRangeAutoFormatReport4 = 24,
    xlRangeAutoFormatReport5 = 25,
    xlRangeAutoFormatReport6 = 26,
    xlRangeAutoFormatReport7 = 27,
    xlRangeAutoFormatReport8 = 28,
    xlRangeAutoFormatReport9 = 29,
    xlRangeAutoFormatReport10 = 30,
    xlRangeAutoFormatClassicPivotTable = 31,
    xlRangeAutoFormatTable1 = 32,
    xlRangeAutoFormatTable2 = 33,
    xlRangeAutoFormatTable3 = 34,
    xlRangeAutoFormatTable4 = 35,
    xlRangeAutoFormatTable5 = 36,
    xlRangeAutoFormatTable6 = 37,
    xlRangeAutoFormatTable7 = 38,
    xlRangeAutoFormatTable8 = 39,
    xlRangeAutoFormatTable9 = 40,
    xlRangeAutoFormatTable10 = 41,
    xlRangeAutoFormatPTNone = 42,
    xlRangeAutoFormatNone = -4142,
    xlRangeAutoFormatSimple = -4154
};

enum XlReferenceType
{
    xlAbsolute = 1,
    xlAbsRowRelColumn = 2,
    xlRelative = 4,
    xlRelRowAbsColumn = 3
};

enum XlLayoutFormType
{
    xlTabular = 0,
    xlOutline = 1
};

enum XlRoutingSlipDelivery
{
    xlAllAtOnce = 2,
    xlOneAfterAnother = 1
};

enum XlRoutingSlipStatus
{
    xlNotYetRouted = 0,
    xlRoutingComplete = 2,
    xlRoutingInProgress = 1
};

enum XlRunAutoMacro
{
    xlAutoActivate = 3,
    xlAutoClose = 2,
    xlAutoDeactivate = 4,
    xlAutoOpen = 1
};

enum XlSaveAction
{
    xlDoNotSaveChanges = 2,
    xlSaveChanges = 1
};

enum XlSaveAsAccessMode
{
    xlExclusive = 3,
    xlNoChange = 1,
    xlShared = 2
};

enum XlSaveConflictResolution
{
    xlLocalSessionChanges = 2,
    xlOtherSessionChanges = 3,
    xlUserResolution = 1
};

enum XlSearchDirection
{
    xlNext = 1,
    xlPrevious = 2
};

enum XlSearchOrder
{
    xlByColumns = 2,
    xlByRows = 1
};

enum XlSheetVisibility
{
    xlSheetVisible = -1,
    xlSheetHidden = 0,
    xlSheetVeryHidden = 2
};

enum XlSortMethod
{
    xlPinYin = 1,
    xlStroke = 2
};

enum XlSortMethodOld
{
    xlCodePage = 2,
    xlSyllabary = 1
};

enum XlSortOrder
{
    xlAscending = 1,
    xlDescending = 2
};

enum XlSortOrientation
{
    xlSortRows = 2,
    xlSortColumns = 1
};

enum XlSortType
{
    xlSortLabels = 2,
    xlSortValues = 1
};

enum XlSpecialCellsValue
{
    xlErrors = 16,
    xlLogical = 4,
    xlNumbers = 1,
    xlTextValues = 2
};

enum XlSubscribeToFormat
{
    xlSubscribeToPicture = -4147,
    xlSubscribeToText = -4158
};

enum XlSummaryRow
{
    xlSummaryAbove = 0,
    xlSummaryBelow = 1
};

enum XlSummaryColumn
{
    xlSummaryOnLeft = -4131,
    xlSummaryOnRight = -4152
};

enum XlSummaryReportType
{
    xlSummaryPivotTable = -4148,
    xlStandardSummary = 1
};

enum XlTabPosition
{
    xlTabPositionFirst = 0,
    xlTabPositionLast = 1
};

enum XlTextParsingType
{
    xlDelimited = 1,
    xlFixedWidth = 2
};

enum XlTextQualifier
{
    xlTextQualifierDoubleQuote = 1,
    xlTextQualifierNone = -4142,
    xlTextQualifierSingleQuote = 2
};

enum XlWBATemplate
{
    xlWBATChart = -4109,
    xlWBATExcel4IntlMacroSheet = 4,
    xlWBATExcel4MacroSheet = 3,
    xlWBATWorksheet = -4167
};

enum XlWindowView
{
    xlNormalView = 1,
    xlPageBreakPreview = 2
};

enum XlXLMMacroType
{
    xlCommand = 2,
    xlFunction = 1,
    xlNotXLM = 3
};

enum XlYesNoGuess
{
    xlGuess = 0,
    xlNo = 2,
    xlYes = 1
};

enum XlBordersIndex
{
    xlInsideHorizontal = 12,
    xlInsideVertical = 11,
    xlDiagonalDown = 5,
    xlDiagonalUp = 6,
    xlEdgeBottom = 9,
    xlEdgeLeft = 7,
    xlEdgeRight = 10,
    xlEdgeTop = 8
};

enum XlToolbarProtection
{
    xlNoButtonChanges = 1,
    xlNoChanges = 4,
    xlNoDockingChanges = 3,
    xlToolbarProtectionNone = -4143,
    xlNoShapeChanges = 2
};

enum XlBuiltInDialog
{
    xlDialogOpen = 1,
    xlDialogOpenLinks = 2,
    xlDialogSaveAs = 5,
    xlDialogFileDelete = 6,
    xlDialogPageSetup = 7,
    xlDialogPrint = 8,
    xlDialogPrinterSetup = 9,
    xlDialogArrangeAll = 12,
    xlDialogWindowSize = 13,
    xlDialogWindowMove = 14,
    xlDialogRun = 17,
    xlDialogSetPrintTitles = 23,
    xlDialogFont = 26,
    xlDialogDisplay = 27,
    xlDialogProtectDocument = 28,
    xlDialogCalculation = 32,
    xlDialogExtract = 35,
    xlDialogDataDelete = 36,
    xlDialogSort = 39,
    xlDialogDataSeries = 40,
    xlDialogTable = 41,
    xlDialogFormatNumber = 42,
    xlDialogAlignment = 43,
    xlDialogStyle = 44,
    xlDialogBorder = 45,
    xlDialogCellProtection = 46,
    xlDialogColumnWidth = 47,
    xlDialogClear = 52,
    xlDialogPasteSpecial = 53,
    xlDialogEditDelete = 54,
    xlDialogInsert = 55,
    xlDialogPasteNames = 58,
    xlDialogDefineName = 61,
    xlDialogCreateNames = 62,
    xlDialogFormulaGoto = 63,
    xlDialogFormulaFind = 64,
    xlDialogGalleryArea = 67,
    xlDialogGalleryBar = 68,
    xlDialogGalleryColumn = 69,
    xlDialogGalleryLine = 70,
    xlDialogGalleryPie = 71,
    xlDialogGalleryScatter = 72,
    xlDialogCombination = 73,
    xlDialogGridlines = 76,
    xlDialogAxes = 78,
    xlDialogAttachText = 80,
    xlDialogPatterns = 84,
    xlDialogMainChart = 85,
    xlDialogOverlay = 86,
    xlDialogScale = 87,
    xlDialogFormatLegend = 88,
    xlDialogFormatText = 89,
    xlDialogParse = 91,
    xlDialogUnhide = 94,
    xlDialogWorkspace = 95,
    xlDialogActivate = 103,
    xlDialogCopyPicture = 108,
    xlDialogDeleteName = 110,
    xlDialogDeleteFormat = 111,
    xlDialogNew = 119,
    xlDialogRowHeight = 127,
    xlDialogFormatMove = 128,
    xlDialogFormatSize = 129,
    xlDialogFormulaReplace = 130,
    xlDialogSelectSpecial = 132,
    xlDialogApplyNames = 133,
    xlDialogReplaceFont = 134,
    xlDialogSplit = 137,
    xlDialogOutline = 142,
    xlDialogSaveWorkbook = 145,
    xlDialogCopyChart = 147,
    xlDialogFormatFont = 150,
    xlDialogNote = 154,
    xlDialogSetUpdateStatus = 159,
    xlDialogColorPalette = 161,
    xlDialogChangeLink = 166,
    xlDialogAppMove = 170,
    xlDialogAppSize = 171,
    xlDialogMainChartType = 185,
    xlDialogOverlayChartType = 186,
    xlDialogOpenMail = 188,
    xlDialogSendMail = 189,
    xlDialogStandardFont = 190,
    xlDialogConsolidate = 191,
    xlDialogSortSpecial = 192,
    xlDialogGallery3dArea = 193,
    xlDialogGallery3dColumn = 194,
    xlDialogGallery3dLine = 195,
    xlDialogGallery3dPie = 196,
    xlDialogView3d = 197,
    xlDialogGoalSeek = 198,
    xlDialogWorkgroup = 199,
    xlDialogFillGroup = 200,
    xlDialogUpdateLink = 201,
    xlDialogPromote = 202,
    xlDialogDemote = 203,
    xlDialogShowDetail = 204,
    xlDialogObjectProperties = 207,
    xlDialogSaveNewObject = 208,
    xlDialogApplyStyle = 212,
    xlDialogAssignToObject = 213,
    xlDialogObjectProtection = 214,
    xlDialogCreatePublisher = 217,
    xlDialogSubscribeTo = 218,
    xlDialogShowToolbar = 220,
    xlDialogPrintPreview = 222,
    xlDialogEditColor = 223,
    xlDialogFormatMain = 225,
    xlDialogFormatOverlay = 226,
    xlDialogEditSeries = 228,
    xlDialogDefineStyle = 229,
    xlDialogGalleryRadar = 249,
    xlDialogEditionOptions = 251,
    xlDialogZoom = 256,
    xlDialogInsertObject = 259,
    xlDialogSize = 261,
    xlDialogMove = 262,
    xlDialogFormatAuto = 269,
    xlDialogGallery3dBar = 272,
    xlDialogGallery3dSurface = 273,
    xlDialogCustomizeToolbar = 276,
    xlDialogWorkbookAdd = 281,
    xlDialogWorkbookMove = 282,
    xlDialogWorkbookCopy = 283,
    xlDialogWorkbookOptions = 284,
    xlDialogSaveWorkspace = 285,
    xlDialogChartWizard = 288,
    xlDialogAssignToTool = 293,
    xlDialogPlacement = 300,
    xlDialogFillWorkgroup = 301,
    xlDialogWorkbookNew = 302,
    xlDialogScenarioCells = 305,
    xlDialogScenarioAdd = 307,
    xlDialogScenarioEdit = 308,
    xlDialogScenarioSummary = 311,
    xlDialogPivotTableWizard = 312,
    xlDialogPivotFieldProperties = 313,
    xlDialogOptionsCalculation = 318,
    xlDialogOptionsEdit = 319,
    xlDialogOptionsView = 320,
    xlDialogAddinManager = 321,
    xlDialogMenuEditor = 322,
    xlDialogAttachToolbars = 323,
    xlDialogOptionsChart = 325,
    xlDialogVbaInsertFile = 328,
    xlDialogVbaProcedureDefinition = 330,
    xlDialogRoutingSlip = 336,
    xlDialogMailLogon = 339,
    xlDialogInsertPicture = 342,
    xlDialogGalleryDoughnut = 344,
    xlDialogChartTrend = 350,
    xlDialogWorkbookInsert = 354,
    xlDialogOptionsTransition = 355,
    xlDialogOptionsGeneral = 356,
    xlDialogFilterAdvanced = 370,
    xlDialogMailNextLetter = 378,
    xlDialogDataLabel = 379,
    xlDialogInsertTitle = 380,
    xlDialogFontProperties = 381,
    xlDialogMacroOptions = 382,
    xlDialogWorkbookUnhide = 384,
    xlDialogWorkbookName = 386,
    xlDialogGalleryCustom = 388,
    xlDialogAddChartAutoformat = 390,
    xlDialogChartAddData = 392,
    xlDialogTabOrder = 394,
    xlDialogSubtotalCreate = 398,
    xlDialogWorkbookTabSplit = 415,
    xlDialogWorkbookProtect = 417,
    xlDialogScrollbarProperties = 420,
    xlDialogPivotShowPages = 421,
    xlDialogTextToColumns = 422,
    xlDialogFormatCharttype = 423,
    xlDialogPivotFieldGroup = 433,
    xlDialogPivotFieldUngroup = 434,
    xlDialogCheckboxProperties = 435,
    xlDialogLabelProperties = 436,
    xlDialogListboxProperties = 437,
    xlDialogEditboxProperties = 438,
    xlDialogOpenText = 441,
    xlDialogPushbuttonProperties = 445,
    xlDialogFilter = 447,
    xlDialogFunctionWizard = 450,
    xlDialogSaveCopyAs = 456,
    xlDialogOptionsListsAdd = 458,
    xlDialogSeriesAxes = 460,
    xlDialogSeriesX = 461,
    xlDialogSeriesY = 462,
    xlDialogErrorbarX = 463,
    xlDialogErrorbarY = 464,
    xlDialogFormatChart = 465,
    xlDialogSeriesOrder = 466,
    xlDialogMailEditMailer = 470,
    xlDialogStandardWidth = 472,
    xlDialogScenarioMerge = 473,
    xlDialogProperties = 474,
    xlDialogSummaryInfo = 474,
    xlDialogFindFile = 475,
    xlDialogActiveCellFont = 476,
    xlDialogVbaMakeAddin = 478,
    xlDialogFileSharing = 481,
    xlDialogAutoCorrect = 485,
    xlDialogCustomViews = 493,
    xlDialogInsertNameLabel = 496,
    xlDialogSeriesShape = 504,
    xlDialogChartOptionsDataLabels = 505,
    xlDialogChartOptionsDataTable = 506,
    xlDialogSetBackgroundPicture = 509,
    xlDialogDataValidation = 525,
    xlDialogChartType = 526,
    xlDialogChartLocation = 527,
    _xlDialogPhonetic = 538,
    xlDialogChartSourceData = 540,
    _xlDialogChartSourceData = 541,
    xlDialogSeriesOptions = 557,
    xlDialogPivotTableOptions = 567,
    xlDialogPivotSolveOrder = 568,
    xlDialogPivotCalculatedField = 570,
    xlDialogPivotCalculatedItem = 572,
    xlDialogConditionalFormatting = 583,
    xlDialogInsertHyperlink = 596,
    xlDialogProtectSharing = 620,
    xlDialogOptionsME = 647,
    xlDialogPublishAsWebPage = 653,
    xlDialogPhonetic = 656,
    xlDialogNewWebQuery = 667,
    xlDialogImportTextFile = 666,
    xlDialogExternalDataProperties = 530,
    xlDialogWebOptionsGeneral = 683,
    xlDialogWebOptionsFiles = 684,
    xlDialogWebOptionsPictures = 685,
    xlDialogWebOptionsEncoding = 686,
    xlDialogWebOptionsFonts = 687,
    xlDialogPivotClientServerSet = 689,
    xlDialogPropertyFields = 754,
    xlDialogSearch = 731,
    xlDialogEvaluateFormula = 709,
    xlDialogDataLabelMultiple = 723,
    xlDialogChartOptionsDataLabelMultiple = 724,
    xlDialogErrorChecking = 732,
    xlDialogWebOptionsBrowsers = 773
};

enum XlParameterType
{
    xlPrompt = 0,
    xlConstant = 1,
    xlRange = 2
};

enum XlParameterDataType
{
    xlParamTypeUnknown = 0,
    xlParamTypeChar = 1,
    xlParamTypeNumeric = 2,
    xlParamTypeDecimal = 3,
    xlParamTypeInteger = 4,
    xlParamTypeSmallInt = 5,
    xlParamTypeFloat = 6,
    xlParamTypeReal = 7,
    xlParamTypeDouble = 8,
    xlParamTypeVarChar = 12,
    xlParamTypeDate = 9,
    xlParamTypeTime = 10,
    xlParamTypeTimestamp = 11,
    xlParamTypeLongVarChar = -1,
    xlParamTypeBinary = -2,
    xlParamTypeVarBinary = -3,
    xlParamTypeLongVarBinary = -4,
    xlParamTypeBigInt = -5,
    xlParamTypeTinyInt = -6,
    xlParamTypeBit = -7,
    xlParamTypeWChar = -8
};

enum XlFormControl
{
    xlButtonControl = 0,
    xlCheckBox = 1,
    xlDropDown = 2,
    xlEditBox = 3,
    xlGroupBox = 4,
    xlLabel = 5,
    xlListBox = 6,
    xlOptionButton = 7,
    xlScrollBar = 8,
    xlSpinner = 9
};

enum XlSourceType
{
    xlSourceWorkbook = 0,
    xlSourceSheet = 1,
    xlSourcePrintArea = 2,
    xlSourceAutoFilter = 3,
    xlSourceRange = 4,
    xlSourceChart = 5,
    xlSourcePivotTable = 6,
    xlSourceQuery = 7
};

enum XlHtmlType
{
    xlHtmlStatic = 0,
    xlHtmlCalc = 1,
    xlHtmlList = 2,
    xlHtmlChart = 3
};

enum XlPivotFormatType
{
    xlReport1 = 0,
    xlReport2 = 1,
    xlReport3 = 2,
    xlReport4 = 3,
    xlReport5 = 4,
    xlReport6 = 5,
    xlReport7 = 6,
    xlReport8 = 7,
    xlReport9 = 8,
    xlReport10 = 9,
    xlTable1 = 10,
    xlTable2 = 11,
    xlTable3 = 12,
    xlTable4 = 13,
    xlTable5 = 14,
    xlTable6 = 15,
    xlTable7 = 16,
    xlTable8 = 17,
    xlTable9 = 18,
    xlTable10 = 19,
    xlPTClassic = 20,
    xlPTNone = 21
};

enum XlCmdType
{
    xlCmdCube = 1,
    xlCmdSql = 2,
    xlCmdTable = 3,
    xlCmdDefault = 4
};

enum XlColumnDataType
{
    xlGeneralFormat = 1,
    xlTextFormat = 2,
    xlMDYFormat = 3,
    xlDMYFormat = 4,
    xlYMDFormat = 5,
    xlMYDFormat = 6,
    xlDYMFormat = 7,
    xlYDMFormat = 8,
    xlSkipColumn = 9,
    xlEMDFormat = 10
};

enum XlQueryType
{
    xlODBCQuery = 1,
    xlDAORecordset = 2,
    xlWebQuery = 4,
    xlOLEDBQuery = 5,
    xlTextImport = 6,
    xlADORecordset = 7
};

enum XlWebSelectionType
{
    xlEntirePage = 1,
    xlAllTables = 2,
    xlSpecifiedTables = 3
};

enum XlCubeFieldType
{
    xlHierarchy = 1,
    xlMeasure = 2,
    xlSet = 3
};

enum XlWebFormatting
{
    xlWebFormattingAll = 1,
    xlWebFormattingRTF = 2,
    xlWebFormattingNone = 3
};

enum XlDisplayDrawingObjects
{
    xlDisplayShapes = -4104,
    xlHide = 3,
    xlPlaceholders = 2
};

enum XlSubtototalLocationType
{
    xlAtTop = 1,
    xlAtBottom = 2
};

enum XlPivotTableVersionList
{
    xlPivotTableVersion2000 = 0,
    xlPivotTableVersion10 = 1,
    xlPivotTableVersionCurrent = -1
};

enum XlPrintErrors
{
    xlPrintErrorsDisplayed = 0,
    xlPrintErrorsBlank = 1,
    xlPrintErrorsDash = 2,
    xlPrintErrorsNA = 3
};

enum XlPivotCellType
{
    xlPivotCellValue = 0,
    xlPivotCellPivotItem = 1,
    xlPivotCellSubtotal = 2,
    xlPivotCellGrandTotal = 3,
    xlPivotCellDataField = 4,
    xlPivotCellPivotField = 5,
    xlPivotCellPageFieldItem = 6,
    xlPivotCellCustomSubtotal = 7,
    xlPivotCellDataPivotField = 8,
    xlPivotCellBlankCell = 9
};

enum XlPivotTableMissingItems
{
    xlMissingItemsDefault = -1,
    xlMissingItemsNone = 0,
    xlMissingItemsMax = 32500
};

enum XlCalculationState
{
    xlDone = 0,
    xlCalculating = 1,
    xlPending = 2
};

enum XlCalculationInterruptKey
{
    xlNoKey = 0,
    xlEscKey = 1,
    xlAnyKey = 2
};

enum XlSortDataOption
{
    xlSortNormal = 0,
    xlSortTextAsNumbers = 1
};

enum XlUpdateLinks
{
    xlUpdateLinksUserSetting = 1,
    xlUpdateLinksNever = 2,
    xlUpdateLinksAlways = 3
};

enum XlLinkStatus
{
    xlLinkStatusOK = 0,
    xlLinkStatusMissingFile = 1,
    xlLinkStatusMissingSheet = 2,
    xlLinkStatusOld = 3,
    xlLinkStatusSourceNotCalculated = 4,
    xlLinkStatusIndeterminate = 5,
    xlLinkStatusNotStarted = 6,
    xlLinkStatusInvalidName = 7,
    xlLinkStatusSourceNotOpen = 8,
    xlLinkStatusSourceOpen = 9,
    xlLinkStatusCopiedValues = 10
};

enum XlSearchWithin
{
    xlWithinSheet = 1,
    xlWithinWorkbook = 2
};

enum XlCorruptLoad
{
    xlNormalLoad = 0,
    xlRepairFile = 1,
    xlExtractData = 2
};

enum XlRobustConnect
{
    xlAsRequired = 0,
    xlAlways = 1,
    xlNever = 2
};

enum XlErrorChecks
{
    xlEvaluateToError = 1,
    xlTextDate = 2,
    xlNumberAsText = 3,
    xlInconsistentFormula = 4,
    xlOmittedCells = 5,
    xlUnlockedFormulaCells = 6,
    xlEmptyCellReferences = 7
};

enum XlDataLabelSeparator
{
    xlDataLabelSeparatorDefault = 1
};

enum XlSmartTagDisplayMode
{
    xlIndicatorAndButton = 0,
    xlDisplayNone = 1,
    xlButtonOnly = 2
};

enum XlRangeValueDataType
{
    xlRangeValueDefault = 10,
    xlRangeValueXMLSpreadsheet = 11,
    xlRangeValueMSPersistXML = 12
};

enum XlSpeakDirection
{
    xlSpeakByRows = 0,
    xlSpeakByColumns = 1
};

enum XlInsertFormatOrigin
{
    xlFormatFromLeftOrAbove = 0,
    xlFormatFromRightOrBelow = 1
};

enum XlArabicModes
{
    xlArabicNone = 0,
    xlArabicStrictAlefHamza = 1,
    xlArabicStrictFinalYaa = 2,
    xlArabicBothStrict = 3
};

enum XlImportDataAs
{
    xlQueryTable = 0,
    xlPivotTableReport = 1
};

enum XlCalculatedMemberType
{
    xlCalculatedMember = 0,
    xlCalculatedSet = 1
};

enum XlHebrewModes
{
    xlHebrewFullScript = 0,
    xlHebrewPartialScript = 1,
    xlHebrewMixedScript = 2,
    xlHebrewMixedAuthorizedScript = 3
};

struct __declspec(uuid("00020893-0001-0000-c000-000000000046"))
IWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSheets))
    SheetsPtr SelectedSheets;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetSplitColumn,put=PutSplitColumn))
    long SplitColumn;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    double SplitHorizontal;
    __declspec(property(get=GetSplitRow,put=PutSplitRow))
    long SplitRow;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    double SplitVertical;
    __declspec(property(get=GetSplit,put=PutSplit))
    VARIANT_BOOL Split;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState;
    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetTabRatio,put=PutTabRatio))
    double TabRatio;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetDisplayHorizontalScrollBar,put=PutDisplayHorizontalScrollBar))
    VARIANT_BOOL DisplayHorizontalScrollBar;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetDisplayWorkbookTabs,put=PutDisplayWorkbookTabs))
    VARIANT_BOOL DisplayWorkbookTabs;
    __declspec(property(get=GetType))
    enum XlWindowType Type;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRangeSelection))
    RangePtr RangeSelection;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetEnableResize,put=PutEnableResize))
    VARIANT_BOOL EnableResize;
    __declspec(property(get=GetView,put=PutView))
    enum XlWindowView View;
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;
    __declspec(property(get=GetWindowNumber))
    long WindowNumber;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetCaption,put=PutCaption))
    _variant_t Caption;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetUsableHeight))
    double UsableHeight;
    __declspec(property(get=GetUsableWidth))
    double UsableWidth;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetDisplayFormulas,put=PutDisplayFormulas))
    VARIANT_BOOL DisplayFormulas;
    __declspec(property(get=GetDisplayGridlines,put=PutDisplayGridlines))
    VARIANT_BOOL DisplayGridlines;
    __declspec(property(get=GetDisplayHeadings,put=PutDisplayHeadings))
    VARIANT_BOOL DisplayHeadings;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    VARIANT_BOOL _DisplayRightToLeft;
    __declspec(property(get=GetDisplayZeros,put=PutDisplayZeros))
    VARIANT_BOOL DisplayZeros;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFreezePanes,put=PutFreezePanes))
    VARIANT_BOOL FreezePanes;
    __declspec(property(get=GetGridlineColor,put=PutGridlineColor))
    long GridlineColor;
    __declspec(property(get=GetGridlineColorIndex,put=PutGridlineColorIndex))
    enum XlColorIndex GridlineColorIndex;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t ActivateNext ( );
    _variant_t ActivatePrevious ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    PanePtr GetActivePane ( );
    IDispatchPtr GetActiveSheet ( );
    _variant_t GetCaption ( );
    void PutCaption (
        const _variant_t & RHS );
    VARIANT_BOOL Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    VARIANT_BOOL GetDisplayFormulas ( );
    void PutDisplayFormulas (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayGridlines ( );
    void PutDisplayGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayHeadings ( );
    void PutDisplayHeadings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayHorizontalScrollBar ( );
    void PutDisplayHorizontalScrollBar (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL RHS );
    VARIANT_BOOL Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayWorkbookTabs ( );
    void PutDisplayWorkbookTabs (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayZeros ( );
    void PutDisplayZeros (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableResize ( );
    void PutEnableResize (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetFreezePanes ( );
    void PutFreezePanes (
        VARIANT_BOOL RHS );
    long GetGridlineColor ( );
    void PutGridlineColor (
        long RHS );
    enum XlColorIndex GetGridlineColorIndex ( );
    void PutGridlineColorIndex (
        enum XlColorIndex RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    WindowPtr NewWindow ( );
    _bstr_t GetOnWindow ( );
    void PutOnWindow (
        _bstr_t RHS );
    PanesPtr GetPanes ( );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    RangePtr GetRangeSelection ( );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long RHS );
    long GetScrollRow ( );
    void PutScrollRow (
        long RHS );
    _variant_t ScrollWorkbookTabs (
        const _variant_t & Sheets = vtMissing,
        const _variant_t & Position = vtMissing );
    SheetsPtr GetSelectedSheets ( );
    IDispatchPtr GetSelection ( );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    VARIANT_BOOL GetSplit ( );
    void PutSplit (
        VARIANT_BOOL RHS );
    long GetSplitColumn ( );
    void PutSplitColumn (
        long RHS );
    double GetSplitHorizontal ( );
    void PutSplitHorizontal (
        double RHS );
    long GetSplitRow ( );
    void PutSplitRow (
        long RHS );
    double GetSplitVertical ( );
    void PutSplitVertical (
        double RHS );
    double GetTabRatio ( );
    void PutTabRatio (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    enum XlWindowType GetType ( );
    double GetUsableHeight ( );
    double GetUsableWidth ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    RangePtr GetVisibleRange ( );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetWindowNumber ( );
    enum XlWindowState GetWindowState ( );
    void PutWindowState (
        enum XlWindowState RHS );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & RHS );
    enum XlWindowView GetView ( );
    void PutView (
        enum XlWindowView RHS );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL RHS );
    long PointsToScreenPixelsX (
        long Points );
    long PointsToScreenPixelsY (
        long Points );
    IDispatchPtr RangeFromPoint (
        long x,
        long y );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ActivateNext (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ActivatePrevious (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveChart (
        struct _Chart * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActivePane (
        struct Pane * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveSheet (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Close (
        VARIANT SaveChanges,
        VARIANT Filename,
        VARIANT RouteWorkbook,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayFormulas (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayFormulas (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayGridlines (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayGridlines (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayHeadings (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayHeadings (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayHorizontalScrollBar (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayHorizontalScrollBar (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayOutline (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayOutline (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get__DisplayRightToLeft (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put__DisplayRightToLeft (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayWorkbookTabs (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayWorkbookTabs (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayZeros (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayZeros (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableResize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableResize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_FreezePanes (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_FreezePanes (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_GridlineColor (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_GridlineColor (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_GridlineColorIndex (
        enum XlColorIndex * RHS ) = 0;
    virtual HRESULT __stdcall put_GridlineColorIndex (
        enum XlColorIndex RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_LargeScroll (
        VARIANT Down,
        VARIANT Up,
        VARIANT ToRight,
        VARIANT ToLeft,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall raw_NewWindow (
        struct Window * * RHS ) = 0;
    virtual HRESULT __stdcall get_OnWindow (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnWindow (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Panes (
        struct Panes * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From,
        VARIANT To,
        VARIANT Copies,
        VARIANT Preview,
        VARIANT ActivePrinter,
        VARIANT PrintToFile,
        VARIANT Collate,
        VARIANT PrToFileName,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview (
        VARIANT EnableChanges,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_RangeSelection (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_ScrollColumn (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ScrollColumn (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_ScrollRow (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ScrollRow (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_ScrollWorkbookTabs (
        VARIANT Sheets,
        VARIANT Position,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_SelectedSheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_Selection (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SmallScroll (
        VARIANT Down,
        VARIANT Up,
        VARIANT ToRight,
        VARIANT ToLeft,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Split (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Split (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SplitColumn (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SplitColumn (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_SplitHorizontal (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_SplitHorizontal (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_SplitRow (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SplitRow (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_SplitVertical (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_SplitVertical (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TabRatio (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_TabRatio (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum XlWindowType * RHS ) = 0;
    virtual HRESULT __stdcall get_UsableHeight (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_UsableWidth (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_VisibleRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_WindowNumber (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_WindowState (
        enum XlWindowState * RHS ) = 0;
    virtual HRESULT __stdcall put_WindowState (
        enum XlWindowState RHS ) = 0;
    virtual HRESULT __stdcall get_Zoom (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Zoom (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_View (
        enum XlWindowView * RHS ) = 0;
    virtual HRESULT __stdcall put_View (
        enum XlWindowView RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayRightToLeft (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayRightToLeft (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_PointsToScreenPixelsX (
        long Points,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_PointsToScreenPixelsY (
        long Points,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_RangeFromPoint (
        long x,
        long y,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        VARIANT Start = vtMissing ) = 0;
};

struct __declspec(uuid("00020892-0001-0000-c000-000000000046"))
IWindows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WindowPtr _Default[];
    __declspec(property(get=GetItem))
    WindowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Arrange (
        enum XlArrangeStyle ArrangeStyle,
        const _variant_t & ActiveWorkbook = vtMissing,
        const _variant_t & SyncHorizontal = vtMissing,
        const _variant_t & SyncVertical = vtMissing );
    long GetCount ( );
    WindowPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    WindowPtr Get_Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Arrange (
        enum XlArrangeStyle ArrangeStyle,
        VARIANT ActiveWorkbook,
        VARIANT SyncHorizontal,
        VARIANT SyncVertical,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct Window * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct Window * * RHS ) = 0;
};

struct __declspec(uuid("00024413-0001-0000-c000-000000000046"))
IAppEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT NewWorkbook (
        struct _Workbook * Wb );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT WorkbookOpen (
        struct _Workbook * Wb );
    HRESULT WorkbookActivate (
        struct _Workbook * Wb );
    HRESULT WorkbookDeactivate (
        struct _Workbook * Wb );
    HRESULT WorkbookBeforeClose (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforeSave (
        struct _Workbook * Wb,
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforePrint (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookNewSheet (
        struct _Workbook * Wb,
        IDispatch * Sh );
    HRESULT WorkbookAddinInstall (
        struct _Workbook * Wb );
    HRESULT WorkbookAddinUninstall (
        struct _Workbook * Wb );
    HRESULT WindowResize (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowActivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableCloseConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableOpenConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_NewWorkbook (
        struct _Workbook * Wb ) = 0;
    virtual HRESULT __stdcall raw_SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target ) = 0;
    virtual HRESULT __stdcall raw_SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_SheetActivate (
        IDispatch * Sh ) = 0;
    virtual HRESULT __stdcall raw_SheetDeactivate (
        IDispatch * Sh ) = 0;
    virtual HRESULT __stdcall raw_SheetCalculate (
        IDispatch * Sh ) = 0;
    virtual HRESULT __stdcall raw_SheetChange (
        IDispatch * Sh,
        struct Range * Target ) = 0;
    virtual HRESULT __stdcall raw_WorkbookOpen (
        struct _Workbook * Wb ) = 0;
    virtual HRESULT __stdcall raw_WorkbookActivate (
        struct _Workbook * Wb ) = 0;
    virtual HRESULT __stdcall raw_WorkbookDeactivate (
        struct _Workbook * Wb ) = 0;
    virtual HRESULT __stdcall raw_WorkbookBeforeClose (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_WorkbookBeforeSave (
        struct _Workbook * Wb,
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_WorkbookBeforePrint (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_WorkbookNewSheet (
        struct _Workbook * Wb,
        IDispatch * Sh ) = 0;
    virtual HRESULT __stdcall raw_WorkbookAddinInstall (
        struct _Workbook * Wb ) = 0;
    virtual HRESULT __stdcall raw_WorkbookAddinUninstall (
        struct _Workbook * Wb ) = 0;
    virtual HRESULT __stdcall raw_WindowResize (
        struct _Workbook * Wb,
        struct Window * Wn ) = 0;
    virtual HRESULT __stdcall raw_WindowActivate (
        struct _Workbook * Wb,
        struct Window * Wn ) = 0;
    virtual HRESULT __stdcall raw_WindowDeactivate (
        struct _Workbook * Wb,
        struct Window * Wn ) = 0;
    virtual HRESULT __stdcall raw_SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target ) = 0;
    virtual HRESULT __stdcall raw_SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target ) = 0;
    virtual HRESULT __stdcall raw_WorkbookPivotTableCloseConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target ) = 0;
    virtual HRESULT __stdcall raw_WorkbookPivotTableOpenConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target ) = 0;
};

struct __declspec(uuid("000208d5-0000-0000-c000-000000000046"))
_Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIgnoreRemoteRequests,put=PutIgnoreRemoteRequests))
    VARIANT_BOOL IgnoreRemoteRequests[];
    __declspec(property(get=GetUILanguage,put=PutUILanguage))
    long UILanguage[];
    __declspec(property(get=GetInteractive,put=PutInteractive))
    VARIANT_BOOL Interactive[];
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetInternational))
    _variant_t International[][];
    __declspec(property(get=GetIteration,put=PutIteration))
    VARIANT_BOOL Iteration[];
    __declspec(property(get=GetLargeButtons,put=PutLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=GetColorButtons,put=PutColorButtons))
    VARIANT_BOOL ColorButtons;
    __declspec(property(get=GetLibraryPath))
    _bstr_t LibraryPath[];
    __declspec(property(get=GetMathCoprocessorAvailable))
    VARIANT_BOOL MathCoprocessorAvailable[];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetMaxChange,put=PutMaxChange))
    double MaxChange[];
    __declspec(property(get=GetMaxIterations,put=PutMaxIterations))
    long MaxIterations[];
    __declspec(property(get=GetMemoryFree))
    long MemoryFree[];
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetWorksheetFunction))
    WorksheetFunctionPtr WorksheetFunction;
    __declspec(property(get=GetMemoryTotal))
    long MemoryTotal[];
    __declspec(property(get=GetPathSeparator))
    _bstr_t PathSeparator[];
    __declspec(property(get=GetPreviousSelections))
    _variant_t PreviousSelections[][];
    __declspec(property(get=GetRecordRelative))
    VARIANT_BOOL RecordRelative[];
    __declspec(property(get=GetReferenceStyle,put=PutReferenceStyle))
    enum XlReferenceStyle ReferenceStyle[];
    __declspec(property(get=GetTemplatesPath))
    _bstr_t TemplatesPath[];
    __declspec(property(get=GetScreenUpdating,put=PutScreenUpdating))
    VARIANT_BOOL ScreenUpdating[];
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed[];
    __declspec(property(get=GetEnableCancelKey,put=PutEnableCancelKey))
    enum XlEnableCancelKey EnableCancelKey[];
    __declspec(property(get=GetStartupPath))
    _bstr_t StartupPath[];
    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _variant_t StatusBar[];
    __declspec(property(get=GetShowToolTips,put=PutShowToolTips))
    VARIANT_BOOL ShowToolTips;
    __declspec(property(get=GetMouseAvailable))
    VARIANT_BOOL MouseAvailable[];
    __declspec(property(get=GetMoveAfterReturn,put=PutMoveAfterReturn))
    VARIANT_BOOL MoveAfterReturn[];
    __declspec(property(get=GetNetworkTemplatesPath))
    _bstr_t NetworkTemplatesPath[];
    __declspec(property(get=GetOperatingSystem))
    _bstr_t OperatingSystem[];
    __declspec(property(get=GetOrganizationName))
    _bstr_t OrganizationName[];
    __declspec(property(get=GetUsableHeight))
    double UsableHeight[];
    __declspec(property(get=GetUsableWidth))
    double UsableWidth[];
    __declspec(property(get=GetUserName,put=PutUserName))
    _bstr_t UserName[];
    __declspec(property(get=GetVersion))
    _bstr_t Version[];
    __declspec(property(get=GetWindowsForPens))
    VARIANT_BOOL WindowsForPens[];
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState[];
    __declspec(property(get=GetExtendList,put=PutExtendList))
    VARIANT_BOOL ExtendList;
    __declspec(property(get=GetOLEDBErrors))
    OLEDBErrorsPtr OLEDBErrors;
    __declspec(property(get=GetCOMAddIns))
    Office::COMAddInsPtr COMAddIns;
    __declspec(property(get=GetDefaultWebOptions))
    DefaultWebOptionsPtr DefaultWebOptions;
    __declspec(property(get=GetProductCode))
    _bstr_t ProductCode;
    __declspec(property(get=GetUserLibraryPath))
    _bstr_t UserLibraryPath;
    __declspec(property(get=GetAutoPercentEntry,put=PutAutoPercentEntry))
    VARIANT_BOOL AutoPercentEntry;
    __declspec(property(get=GetLanguageSettings))
    Office::LanguageSettingsPtr LanguageSettings;
    __declspec(property(get=GetDummy101))
    IDispatchPtr Dummy101;
    __declspec(property(get=GetAnswerWizard))
    Office::AnswerWizardPtr AnswerWizard;
    __declspec(property(get=GetCalculationVersion))
    long CalculationVersion;
    __declspec(property(get=GetShowWindowsInTaskbar,put=PutShowWindowsInTaskbar))
    VARIANT_BOOL ShowWindowsInTaskbar;
    __declspec(property(get=GetActiveMenuBar))
    MenuBarPtr ActiveMenuBar;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetDialogs))
    DialogsPtr Dialogs;
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetDecimalSeparator,put=PutDecimalSeparator))
    _bstr_t DecimalSeparator;
    __declspec(property(get=GetThousandsSeparator,put=PutThousandsSeparator))
    _bstr_t ThousandsSeparator;
    __declspec(property(get=GetRegisteredFunctions))
    _variant_t RegisteredFunctions[][][];
    __declspec(property(get=GetShortcutMenus))
    MenuPtr ShortcutMenus[];
    __declspec(property(get=GetThisWorkbook))
    _WorkbookPtr ThisWorkbook[];
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetCustomListCount))
    long CustomListCount[];
    __declspec(property(get=GetMoveAfterReturnDirection,put=PutMoveAfterReturnDirection))
    enum XlDirection MoveAfterReturnDirection[];
    __declspec(property(get=GetAutoCorrect))
    AutoCorrectPtr AutoCorrect;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetCursor,put=PutCursor))
    enum XlMousePointer Cursor[];
    __declspec(property(get=GetActiveDialog))
    DialogSheetPtr ActiveDialog;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetEnableAutoComplete,put=PutEnableAutoComplete))
    VARIANT_BOOL EnableAutoComplete;
    __declspec(property(get=GetEnableAnimations,put=PutEnableAnimations))
    VARIANT_BOOL EnableAnimations[];
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width[];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height[];
    __declspec(property(get=GetTop,put=PutTop))
    double Top[];
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left[];
    __declspec(property(get=GetDisplayCommentIndicator,put=PutDisplayCommentIndicator))
    enum XlCommentDisplayMode DisplayCommentIndicator;
    __declspec(property(get=GetEnableSound,put=PutEnableSound))
    VARIANT_BOOL EnableSound;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetFileSearch))
    Office::FileSearchPtr FileSearch;
    __declspec(property(get=GetFileFind))
    Office::IFindPtr FileFind;
    __declspec(property(get=GetRecentFiles))
    RecentFilesPtr RecentFiles;
    __declspec(property(get=GetODBCErrors))
    ODBCErrorsPtr ODBCErrors;
    __declspec(property(get=GetODBCTimeout,put=PutODBCTimeout))
    long ODBCTimeout;
    __declspec(property(get=GetPivotTableSelection,put=PutPivotTableSelection))
    VARIANT_BOOL PivotTableSelection;
    __declspec(property(get=GetRollZoom,put=PutRollZoom))
    VARIANT_BOOL RollZoom;
    __declspec(property(get=GetShowChartTipNames,put=PutShowChartTipNames))
    VARIANT_BOOL ShowChartTipNames;
    __declspec(property(get=GetShowChartTipValues,put=PutShowChartTipValues))
    VARIANT_BOOL ShowChartTipValues;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDefaultSaveFormat,put=PutDefaultSaveFormat))
    enum XlFileFormat DefaultSaveFormat;
    __declspec(property(get=GetUserControl,put=PutUserControl))
    VARIANT_BOOL UserControl;
    __declspec(property(get=GetJOEVBE))
    VBIDE::JOEVBEPtr JOEVBE;
    __declspec(property(get=GetEnableEvents,put=PutEnableEvents))
    VARIANT_BOOL EnableEvents;
    __declspec(property(get=GetDisplayInfoWindow,put=PutDisplayInfoWindow))
    VARIANT_BOOL DisplayInfoWindow;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _ApplicationPtr Parent;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetReady))
    VARIANT_BOOL Ready;
    __declspec(property(get=GetNewWorkbook))
    Office::NewFilePtr NewWorkbook;
    __declspec(property(get=GetFindFormat,put=PutRefFindFormat))
    CellFormatPtr FindFormat;
    __declspec(property(get=GetReplaceFormat,put=PutRefReplaceFormat))
    CellFormatPtr ReplaceFormat;
    __declspec(property(get=GetUsedObjects))
    UsedObjectsPtr UsedObjects;
    __declspec(property(get=GetCalculationState))
    enum XlCalculationState CalculationState;
    __declspec(property(get=GetCalculationInterruptKey,put=PutCalculationInterruptKey))
    enum XlCalculationInterruptKey CalculationInterruptKey;
    __declspec(property(get=GetWatches))
    WatchesPtr Watches;
    __declspec(property(get=GetDisplayFunctionToolTips,put=PutDisplayFunctionToolTips))
    VARIANT_BOOL DisplayFunctionToolTips;
    __declspec(property(get=GetFileDialog))
    Office::FileDialogPtr FileDialog[];
    __declspec(property(get=GetDisplayPasteOptions,put=PutDisplayPasteOptions))
    VARIANT_BOOL DisplayPasteOptions;
    __declspec(property(get=GetDisplayInsertOptions,put=PutDisplayInsertOptions))
    VARIANT_BOOL DisplayInsertOptions;
    __declspec(property(get=GetGenerateGetPivotData,put=PutGenerateGetPivotData))
    VARIANT_BOOL GenerateGetPivotData;
    __declspec(property(get=GetAutoRecover))
    AutoRecoverPtr AutoRecover;
    __declspec(property(get=GetHwnd))
    long Hwnd;
    __declspec(property(get=GetHinstance))
    long Hinstance;
    __declspec(property(get=GetErrorCheckingOptions))
    ErrorCheckingOptionsPtr ErrorCheckingOptions;
    __declspec(property(get=GetAutoFormatAsYouTypeReplaceHyperlinks,put=PutAutoFormatAsYouTypeReplaceHyperlinks))
    VARIANT_BOOL AutoFormatAsYouTypeReplaceHyperlinks;
    __declspec(property(get=GetSmartTagRecognizers))
    SmartTagRecognizersPtr SmartTagRecognizers;
    __declspec(property(get=GetSpellingOptions))
    SpellingOptionsPtr SpellingOptions;
    __declspec(property(get=GetSpeech))
    SpeechPtr Speech;
    __declspec(property(get=GetMapPaperSize,put=PutMapPaperSize))
    VARIANT_BOOL MapPaperSize;
    __declspec(property(get=GetShowStartupDialog,put=PutShowStartupDialog))
    VARIANT_BOOL ShowStartupDialog;
    __declspec(property(get=GetUseSystemSeparators,put=PutUseSystemSeparators))
    VARIANT_BOOL UseSystemSeparators;
    __declspec(property(get=GetThisCell))
    RangePtr ThisCell;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetRTD))
    RTDPtr RTD;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetToolbars))
    ToolbarsPtr Toolbars;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible[];
    __declspec(property(get=GetStandardFont,put=PutStandardFont))
    _bstr_t StandardFont[];
    __declspec(property(get=GetStandardFontSize,put=PutStandardFontSize))
    double StandardFontSize[];
    __declspec(property(get=GetDisplayRecentFiles,put=PutDisplayRecentFiles))
    VARIANT_BOOL DisplayRecentFiles;
    __declspec(property(get=GetDisplayExcel4Menus,put=PutDisplayExcel4Menus))
    VARIANT_BOOL DisplayExcel4Menus[];
    __declspec(property(get=GetWorkbooks))
    WorkbooksPtr Workbooks;
    __declspec(property(get=GetEditDirectlyInCell,put=PutEditDirectlyInCell))
    VARIANT_BOOL EditDirectlyInCell[];
    __declspec(property(get=GetAlertBeforeOverwriting,put=PutAlertBeforeOverwriting))
    VARIANT_BOOL AlertBeforeOverwriting[];
    __declspec(property(get=GetFileConverters))
    _variant_t FileConverters[][][];
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    ModulesPtr Modules;
    __declspec(property(get=GetDefaultSheetDirection,put=PutDefaultSheetDirection))
    long DefaultSheetDirection[];
    __declspec(property(get=GetMailSession))
    _variant_t MailSession[];
    __declspec(property(get=GetCursorMovement,put=PutCursorMovement))
    long CursorMovement[];
    __declspec(property(get=GetMenuBars))
    MenuBarsPtr MenuBars;
    __declspec(property(get=GetControlCharacters,put=PutControlCharacters))
    VARIANT_BOOL ControlCharacters[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetMailSystem))
    enum XlMailSystem MailSystem[];
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow[];
    __declspec(property(get=GetOnCalculate,put=PutOnCalculate))
    _bstr_t OnCalculate[];
    __declspec(property(get=GetOnEntry,put=PutOnEntry))
    _bstr_t OnEntry[];
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetOnData,put=PutOnData))
    _bstr_t OnData[];
    __declspec(property(get=GetCopyObjectsWithCells,put=PutCopyObjectsWithCells))
    VARIANT_BOOL CopyObjectsWithCells[];
    __declspec(property(get=GetAskToUpdateLinks,put=PutAskToUpdateLinks))
    VARIANT_BOOL AskToUpdateLinks[];
    __declspec(property(get=GetSheetsInNewWorkbook,put=PutSheetsInNewWorkbook))
    long SheetsInNewWorkbook[];
    __declspec(property(get=GetPath))
    _bstr_t Path[];
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter[];
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetActiveWorkbook))
    _WorkbookPtr ActiveWorkbook;
    __declspec(property(get=GetTransitionMenuKey,put=PutTransitionMenuKey))
    _bstr_t TransitionMenuKey[];
    __declspec(property(get=GetTransitionMenuKeyAction,put=PutTransitionMenuKeyAction))
    long TransitionMenuKeyAction[];
    __declspec(property(get=GetTransitionNavigKeys,put=PutTransitionNavigKeys))
    VARIANT_BOOL TransitionNavigKeys[];
    __declspec(property(get=GetAltStartupPath,put=PutAltStartupPath))
    _bstr_t AltStartupPath[];
    __declspec(property(get=GetBuild))
    long Build[];
    __declspec(property(get=GetCalculateBeforeSave,put=PutCalculateBeforeSave))
    VARIANT_BOOL CalculateBeforeSave[];
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlCalculation Calculation[];
    __declspec(property(get=GetCaller))
    _variant_t Caller[][];
    __declspec(property(get=GetCanPlaySounds))
    VARIANT_BOOL CanPlaySounds[];
    __declspec(property(get=GetCanRecordSounds))
    VARIANT_BOOL CanRecordSounds[];
    __declspec(property(get=GetCellDragAndDrop,put=PutCellDragAndDrop))
    VARIANT_BOOL CellDragAndDrop[];
    __declspec(property(get=GetClipboardFormats))
    _variant_t ClipboardFormats[][];
    __declspec(property(get=GetDisplayClipboardWindow,put=PutDisplayClipboardWindow))
    VARIANT_BOOL DisplayClipboardWindow[];
    __declspec(property(get=GetCommandUnderlines,put=PutCommandUnderlines))
    enum XlCommandUnderlines CommandUnderlines[];
    __declspec(property(get=GetConstrainNumeric,put=PutConstrainNumeric))
    VARIANT_BOOL ConstrainNumeric[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetDefaultFilePath,put=PutDefaultFilePath))
    _bstr_t DefaultFilePath[];
    __declspec(property(get=GetCutCopyMode,put=PutCutCopyMode))
    enum XlCutCopyMode CutCopyMode[];
    __declspec(property(get=GetDataEntryMode,put=PutDataEntryMode))
    long DataEntryMode[];
    __declspec(property(get=GetDDEAppReturnCode))
    long DDEAppReturnCode[];
    __declspec(property(get=GetDisplayAlerts,put=PutDisplayAlerts))
    VARIANT_BOOL DisplayAlerts[];
    __declspec(property(get=GetDisplayFormulaBar,put=PutDisplayFormulaBar))
    VARIANT_BOOL DisplayFormulaBar[];
    __declspec(property(get=GetDisplayNoteIndicator,put=PutDisplayNoteIndicator))
    VARIANT_BOOL DisplayNoteIndicator;
    __declspec(property(get=GetDisplayScrollBars,put=PutDisplayScrollBars))
    VARIANT_BOOL DisplayScrollBars[];
    __declspec(property(get=GetDisplayStatusBar,put=PutDisplayStatusBar))
    VARIANT_BOOL DisplayStatusBar[];
    __declspec(property(get=GetDisplayFullScreen,put=PutDisplayFullScreen))
    VARIANT_BOOL DisplayFullScreen[];
    __declspec(property(get=GetPromptForSummaryInfo,put=PutPromptForSummaryInfo))
    VARIANT_BOOL PromptForSummaryInfo[];
    __declspec(property(get=GetFixedDecimal,put=PutFixedDecimal))
    VARIANT_BOOL FixedDecimal[];
    __declspec(property(get=GetEnableTipWizard,put=PutEnableTipWizard))
    VARIANT_BOOL EnableTipWizard[];
    __declspec(property(get=GetFixedDecimalPlaces,put=PutFixedDecimalPlaces))
    long FixedDecimalPlaces[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _ApplicationPtr GetParent ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    DialogSheetPtr GetActiveDialog ( );
    MenuBarPtr GetActiveMenuBar ( );
    _bstr_t GetActivePrinter (
        long lcid = 0 );
    void PutActivePrinter (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr GetActiveSheet ( );
    WindowPtr GetActiveWindow ( );
    _WorkbookPtr GetActiveWorkbook ( );
    AddInsPtr GetAddIns ( );
    Office::AssistantPtr GetAssistant ( );
    HRESULT Calculate (
        long lcid = 0 );
    RangePtr GetCells ( );
    SheetsPtr GetCharts ( );
    RangePtr GetColumns ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    long GetDDEAppReturnCode (
        long lcid = 0 );
    HRESULT DDEExecute (
        long Channel,
        _bstr_t String,
        long lcid = 0 );
    long DDEInitiate (
        _bstr_t App,
        _bstr_t Topic,
        long lcid = 0 );
    HRESULT DDEPoke (
        long Channel,
        const _variant_t & Item,
        const _variant_t & Data,
        long lcid = 0 );
    _variant_t DDERequest (
        long Channel,
        _bstr_t Item,
        long lcid = 0 );
    HRESULT DDETerminate (
        long Channel,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t ExecuteExcel4Macro (
        _bstr_t String,
        long lcid = 0 );
    RangePtr Intersect (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    MenuBarsPtr GetMenuBars ( );
    ModulesPtr GetModules ( );
    NamesPtr GetNames ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t _Run2 (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    IDispatchPtr GetSelection (
        long lcid = 0 );
    HRESULT SendKeys (
        const _variant_t & Keys,
        const _variant_t & Wait = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    MenuPtr GetShortcutMenus (
        long Index );
    _WorkbookPtr GetThisWorkbook (
        long lcid = 0 );
    ToolbarsPtr GetToolbars ( );
    RangePtr Union (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    WindowsPtr GetWindows ( );
    WorkbooksPtr GetWorkbooks ( );
    WorksheetFunctionPtr GetWorksheetFunction ( );
    SheetsPtr GetWorksheets ( );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );
    HRESULT ActivateMicrosoftApp (
        enum XlMSApplication Index,
        long lcid = 0 );
    HRESULT AddChartAutoFormat (
        const _variant_t & Chart,
        _bstr_t Name,
        const _variant_t & Description = vtMissing,
        long lcid = 0 );
    HRESULT AddCustomList (
        const _variant_t & ListArray,
        const _variant_t & ByRow = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetAlertBeforeOverwriting (
        long lcid = 0 );
    void PutAlertBeforeOverwriting (
        long lcid,
        VARIANT_BOOL RHS );
    _bstr_t GetAltStartupPath (
        long lcid = 0 );
    void PutAltStartupPath (
        long lcid,
        _bstr_t RHS );
    VARIANT_BOOL GetAskToUpdateLinks (
        long lcid = 0 );
    void PutAskToUpdateLinks (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableAnimations (
        long lcid = 0 );
    void PutEnableAnimations (
        long lcid,
        VARIANT_BOOL RHS );
    AutoCorrectPtr GetAutoCorrect ( );
    long GetBuild (
        long lcid = 0 );
    VARIANT_BOOL GetCalculateBeforeSave (
        long lcid = 0 );
    void PutCalculateBeforeSave (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlCalculation GetCalculation (
        long lcid = 0 );
    void PutCalculation (
        long lcid,
        enum XlCalculation RHS );
    _variant_t GetCaller (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetCanPlaySounds (
        long lcid = 0 );
    VARIANT_BOOL GetCanRecordSounds (
        long lcid = 0 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetCellDragAndDrop (
        long lcid = 0 );
    void PutCellDragAndDrop (
        long lcid,
        VARIANT_BOOL RHS );
    double CentimetersToPoints (
        double Centimeters,
        long lcid = 0 );
    VARIANT_BOOL CheckSpelling (
        _bstr_t Word,
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        long lcid = 0 );
    _variant_t GetClipboardFormats (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetDisplayClipboardWindow (
        long lcid = 0 );
    void PutDisplayClipboardWindow (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetColorButtons ( );
    void PutColorButtons (
        VARIANT_BOOL RHS );
    enum XlCommandUnderlines GetCommandUnderlines (
        long lcid = 0 );
    void PutCommandUnderlines (
        long lcid,
        enum XlCommandUnderlines RHS );
    VARIANT_BOOL GetConstrainNumeric (
        long lcid = 0 );
    void PutConstrainNumeric (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t ConvertFormula (
        const _variant_t & Formula,
        enum XlReferenceStyle FromReferenceStyle,
        const _variant_t & ToReferenceStyle = vtMissing,
        const _variant_t & ToAbsolute = vtMissing,
        const _variant_t & RelativeTo = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetCopyObjectsWithCells (
        long lcid = 0 );
    void PutCopyObjectsWithCells (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlMousePointer GetCursor (
        long lcid = 0 );
    void PutCursor (
        long lcid,
        enum XlMousePointer RHS );
    long GetCustomListCount (
        long lcid = 0 );
    enum XlCutCopyMode GetCutCopyMode (
        long lcid = 0 );
    void PutCutCopyMode (
        long lcid,
        enum XlCutCopyMode RHS );
    long GetDataEntryMode (
        long lcid = 0 );
    void PutDataEntryMode (
        long lcid,
        long RHS );
    _variant_t Dummy1 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Dummy2 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing );
    _variant_t Dummy3 ( );
    _variant_t Dummy4 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing );
    _variant_t Dummy5 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing );
    _variant_t Dummy6 ( );
    _variant_t Dummy7 ( );
    _variant_t Dummy8 (
        const _variant_t & Arg1 = vtMissing );
    _variant_t Dummy9 ( );
    VARIANT_BOOL Dummy10 (
        const _variant_t & arg = vtMissing );
    HRESULT Dummy11 ( );
    _bstr_t Get_Default ( );
    _bstr_t GetDefaultFilePath (
        long lcid = 0 );
    void PutDefaultFilePath (
        long lcid,
        _bstr_t RHS );
    HRESULT DeleteChartAutoFormat (
        _bstr_t Name,
        long lcid = 0 );
    HRESULT DeleteCustomList (
        long ListNum,
        long lcid = 0 );
    DialogsPtr GetDialogs ( );
    VARIANT_BOOL GetDisplayAlerts (
        long lcid = 0 );
    void PutDisplayAlerts (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayFormulaBar (
        long lcid = 0 );
    void PutDisplayFormulaBar (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayFullScreen (
        long lcid = 0 );
    void PutDisplayFullScreen (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayNoteIndicator ( );
    void PutDisplayNoteIndicator (
        VARIANT_BOOL RHS );
    enum XlCommentDisplayMode GetDisplayCommentIndicator ( );
    void PutDisplayCommentIndicator (
        enum XlCommentDisplayMode RHS );
    VARIANT_BOOL GetDisplayExcel4Menus (
        long lcid = 0 );
    void PutDisplayExcel4Menus (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayRecentFiles ( );
    void PutDisplayRecentFiles (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayScrollBars (
        long lcid = 0 );
    void PutDisplayScrollBars (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayStatusBar (
        long lcid = 0 );
    void PutDisplayStatusBar (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT DoubleClick (
        long lcid = 0 );
    VARIANT_BOOL GetEditDirectlyInCell (
        long lcid = 0 );
    void PutEditDirectlyInCell (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableAutoComplete ( );
    void PutEnableAutoComplete (
        VARIANT_BOOL RHS );
    enum XlEnableCancelKey GetEnableCancelKey (
        long lcid = 0 );
    void PutEnableCancelKey (
        long lcid,
        enum XlEnableCancelKey RHS );
    VARIANT_BOOL GetEnableSound ( );
    void PutEnableSound (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableTipWizard (
        long lcid = 0 );
    void PutEnableTipWizard (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t GetFileConverters (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    Office::FileSearchPtr GetFileSearch ( );
    Office::IFindPtr GetFileFind ( );
    HRESULT _FindFile (
        long lcid = 0 );
    VARIANT_BOOL GetFixedDecimal (
        long lcid = 0 );
    void PutFixedDecimal (
        long lcid,
        VARIANT_BOOL RHS );
    long GetFixedDecimalPlaces (
        long lcid = 0 );
    void PutFixedDecimalPlaces (
        long lcid,
        long RHS );
    _variant_t GetCustomListContents (
        long ListNum,
        long lcid = 0 );
    long GetCustomListNum (
        const _variant_t & ListArray,
        long lcid = 0 );
    _variant_t GetOpenFilename (
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & ButtonText = vtMissing,
        const _variant_t & MultiSelect = vtMissing,
        long lcid = 0 );
    _variant_t GetSaveAsFilename (
        const _variant_t & InitialFilename = vtMissing,
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & ButtonText = vtMissing,
        long lcid = 0 );
    HRESULT Goto (
        const _variant_t & Reference = vtMissing,
        const _variant_t & Scroll = vtMissing,
        long lcid = 0 );
    double GetHeight (
        long lcid = 0 );
    void PutHeight (
        long lcid,
        double RHS );
    HRESULT Help (
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetIgnoreRemoteRequests (
        long lcid = 0 );
    void PutIgnoreRemoteRequests (
        long lcid,
        VARIANT_BOOL RHS );
    double InchesToPoints (
        double Inches,
        long lcid = 0 );
    _variant_t InputBox (
        _bstr_t Prompt,
        const _variant_t & Title = vtMissing,
        const _variant_t & Default = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetInteractive (
        long lcid = 0 );
    void PutInteractive (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t GetInternational (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetIteration (
        long lcid = 0 );
    void PutIteration (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLargeButtons ( );
    void PutLargeButtons (
        VARIANT_BOOL RHS );
    double GetLeft (
        long lcid = 0 );
    void PutLeft (
        long lcid,
        double RHS );
    _bstr_t GetLibraryPath (
        long lcid = 0 );
    HRESULT MacroOptions (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Description = vtMissing,
        const _variant_t & HasMenu = vtMissing,
        const _variant_t & MenuText = vtMissing,
        const _variant_t & HasShortcutKey = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        long lcid = 0 );
    HRESULT MailLogoff (
        long lcid = 0 );
    HRESULT MailLogon (
        const _variant_t & Name = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & DownloadNewMail = vtMissing,
        long lcid = 0 );
    _variant_t GetMailSession (
        long lcid = 0 );
    enum XlMailSystem GetMailSystem (
        long lcid = 0 );
    VARIANT_BOOL GetMathCoprocessorAvailable (
        long lcid = 0 );
    double GetMaxChange (
        long lcid = 0 );
    void PutMaxChange (
        long lcid,
        double RHS );
    long GetMaxIterations (
        long lcid = 0 );
    void PutMaxIterations (
        long lcid,
        long RHS );
    long GetMemoryFree (
        long lcid = 0 );
    long GetMemoryTotal (
        long lcid = 0 );
    long GetMemoryUsed (
        long lcid = 0 );
    VARIANT_BOOL GetMouseAvailable (
        long lcid = 0 );
    VARIANT_BOOL GetMoveAfterReturn (
        long lcid = 0 );
    void PutMoveAfterReturn (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlDirection GetMoveAfterReturnDirection (
        long lcid = 0 );
    void PutMoveAfterReturnDirection (
        long lcid,
        enum XlDirection RHS );
    RecentFilesPtr GetRecentFiles ( );
    _bstr_t GetName ( );
    _WorkbookPtr NextLetter (
        long lcid = 0 );
    _bstr_t GetNetworkTemplatesPath (
        long lcid = 0 );
    ODBCErrorsPtr GetODBCErrors ( );
    long GetODBCTimeout ( );
    void PutODBCTimeout (
        long RHS );
    _bstr_t GetOnCalculate (
        long lcid = 0 );
    void PutOnCalculate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnData (
        long lcid = 0 );
    void PutOnData (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnEntry (
        long lcid = 0 );
    void PutOnEntry (
        long lcid,
        _bstr_t RHS );
    HRESULT OnKey (
        _bstr_t Key,
        const _variant_t & Procedure = vtMissing,
        long lcid = 0 );
    HRESULT OnRepeat (
        _bstr_t Text,
        _bstr_t Procedure,
        long lcid = 0 );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    HRESULT OnTime (
        const _variant_t & EarliestTime,
        _bstr_t Procedure,
        const _variant_t & LatestTime = vtMissing,
        const _variant_t & Schedule = vtMissing,
        long lcid = 0 );
    HRESULT OnUndo (
        _bstr_t Text,
        _bstr_t Procedure,
        long lcid = 0 );
    _bstr_t GetOnWindow (
        long lcid = 0 );
    void PutOnWindow (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOperatingSystem (
        long lcid = 0 );
    _bstr_t GetOrganizationName (
        long lcid = 0 );
    _bstr_t GetPath (
        long lcid = 0 );
    _bstr_t GetPathSeparator (
        long lcid = 0 );
    _variant_t GetPreviousSelections (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetPivotTableSelection ( );
    void PutPivotTableSelection (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPromptForSummaryInfo (
        long lcid = 0 );
    void PutPromptForSummaryInfo (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Quit ( );
    HRESULT RecordMacro (
        const _variant_t & BasicCode = vtMissing,
        const _variant_t & XlmCode = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetRecordRelative (
        long lcid = 0 );
    enum XlReferenceStyle GetReferenceStyle (
        long lcid = 0 );
    void PutReferenceStyle (
        long lcid,
        enum XlReferenceStyle RHS );
    _variant_t GetRegisteredFunctions (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL RegisterXLL (
        _bstr_t Filename,
        long lcid = 0 );
    HRESULT Repeat (
        long lcid = 0 );
    HRESULT ResetTipWizard (
        long lcid = 0 );
    VARIANT_BOOL GetRollZoom ( );
    void PutRollZoom (
        VARIANT_BOOL RHS );
    HRESULT Save (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    HRESULT SaveWorkspace (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetScreenUpdating (
        long lcid = 0 );
    void PutScreenUpdating (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SetDefaultChart (
        const _variant_t & FormatName = vtMissing,
        const _variant_t & Gallery = vtMissing );
    long GetSheetsInNewWorkbook (
        long lcid = 0 );
    void PutSheetsInNewWorkbook (
        long lcid,
        long RHS );
    VARIANT_BOOL GetShowChartTipNames ( );
    void PutShowChartTipNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowChartTipValues ( );
    void PutShowChartTipValues (
        VARIANT_BOOL RHS );
    _bstr_t GetStandardFont (
        long lcid = 0 );
    void PutStandardFont (
        long lcid,
        _bstr_t RHS );
    double GetStandardFontSize (
        long lcid = 0 );
    void PutStandardFontSize (
        long lcid,
        double RHS );
    _bstr_t GetStartupPath (
        long lcid = 0 );
    _variant_t GetStatusBar (
        long lcid = 0 );
    void PutStatusBar (
        long lcid,
        const _variant_t & RHS );
    _bstr_t GetTemplatesPath (
        long lcid = 0 );
    VARIANT_BOOL GetShowToolTips ( );
    void PutShowToolTips (
        VARIANT_BOOL RHS );
    double GetTop (
        long lcid = 0 );
    void PutTop (
        long lcid,
        double RHS );
    enum XlFileFormat GetDefaultSaveFormat ( );
    void PutDefaultSaveFormat (
        enum XlFileFormat RHS );
    _bstr_t GetTransitionMenuKey (
        long lcid = 0 );
    void PutTransitionMenuKey (
        long lcid,
        _bstr_t RHS );
    long GetTransitionMenuKeyAction (
        long lcid = 0 );
    void PutTransitionMenuKeyAction (
        long lcid,
        long RHS );
    VARIANT_BOOL GetTransitionNavigKeys (
        long lcid = 0 );
    void PutTransitionNavigKeys (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Undo (
        long lcid = 0 );
    double GetUsableHeight (
        long lcid = 0 );
    double GetUsableWidth (
        long lcid = 0 );
    VARIANT_BOOL GetUserControl ( );
    void PutUserControl (
        VARIANT_BOOL RHS );
    _bstr_t GetUserName (
        long lcid = 0 );
    void PutUserName (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetValue ( );
    VBIDE::JOEVBEPtr GetJOEVBE ( );
    _bstr_t GetVersion (
        long lcid = 0 );
    VARIANT_BOOL GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Volatile (
        const _variant_t & Volatile = vtMissing,
        long lcid = 0 );
    HRESULT _Wait (
        const _variant_t & Time,
        long lcid = 0 );
    double GetWidth (
        long lcid = 0 );
    void PutWidth (
        long lcid,
        double RHS );
    VARIANT_BOOL GetWindowsForPens (
        long lcid = 0 );
    enum XlWindowState GetWindowState (
        long lcid = 0 );
    void PutWindowState (
        long lcid,
        enum XlWindowState RHS );
    long GetUILanguage (
        long lcid = 0 );
    void PutUILanguage (
        long lcid,
        long RHS );
    long GetDefaultSheetDirection (
        long lcid = 0 );
    void PutDefaultSheetDirection (
        long lcid,
        long RHS );
    long GetCursorMovement (
        long lcid = 0 );
    void PutCursorMovement (
        long lcid,
        long RHS );
    VARIANT_BOOL GetControlCharacters (
        long lcid = 0 );
    void PutControlCharacters (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableEvents ( );
    void PutEnableEvents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayInfoWindow ( );
    void PutDisplayInfoWindow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL Wait (
        const _variant_t & Time,
        long lcid = 0 );
    VARIANT_BOOL GetExtendList ( );
    void PutExtendList (
        VARIANT_BOOL RHS );
    OLEDBErrorsPtr GetOLEDBErrors ( );
    _bstr_t GetPhonetic (
        const _variant_t & Text = vtMissing );
    Office::COMAddInsPtr GetCOMAddIns ( );
    DefaultWebOptionsPtr GetDefaultWebOptions ( );
    _bstr_t GetProductCode ( );
    _bstr_t GetUserLibraryPath ( );
    VARIANT_BOOL GetAutoPercentEntry ( );
    void PutAutoPercentEntry (
        VARIANT_BOOL RHS );
    Office::LanguageSettingsPtr GetLanguageSettings ( );
    IDispatchPtr GetDummy101 ( );
    HRESULT Dummy12 (
        struct PivotTable * p1,
        struct PivotTable * p2 );
    Office::AnswerWizardPtr GetAnswerWizard ( );
    HRESULT CalculateFull ( );
    VARIANT_BOOL FindFile (
        long lcid = 0 );
    long GetCalculationVersion ( );
    VARIANT_BOOL GetShowWindowsInTaskbar ( );
    void PutShowWindowsInTaskbar (
        VARIANT_BOOL RHS );
    enum Office::MsoFeatureInstall GetFeatureInstall ( );
    void PutFeatureInstall (
        enum Office::MsoFeatureInstall RHS );
    VARIANT_BOOL GetReady ( );
    _variant_t Dummy13 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    CellFormatPtr GetFindFormat ( );
    void PutRefFindFormat (
        struct CellFormat * RHS );
    CellFormatPtr GetReplaceFormat ( );
    void PutRefReplaceFormat (
        struct CellFormat * RHS );
    UsedObjectsPtr GetUsedObjects ( );
    enum XlCalculationState GetCalculationState ( );
    enum XlCalculationInterruptKey GetCalculationInterruptKey ( );
    void PutCalculationInterruptKey (
        enum XlCalculationInterruptKey RHS );
    WatchesPtr GetWatches ( );
    VARIANT_BOOL GetDisplayFunctionToolTips ( );
    void PutDisplayFunctionToolTips (
        VARIANT_BOOL RHS );
    enum Office::MsoAutomationSecurity GetAutomationSecurity ( );
    void PutAutomationSecurity (
        enum Office::MsoAutomationSecurity RHS );
    Office::FileDialogPtr GetFileDialog (
        enum Office::MsoFileDialogType fileDialogType );
    HRESULT Dummy14 ( );
    HRESULT CalculateFullRebuild ( );
    VARIANT_BOOL GetDisplayPasteOptions ( );
    void PutDisplayPasteOptions (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayInsertOptions ( );
    void PutDisplayInsertOptions (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetGenerateGetPivotData ( );
    void PutGenerateGetPivotData (
        VARIANT_BOOL RHS );
    AutoRecoverPtr GetAutoRecover ( );
    long GetHwnd ( );
    long GetHinstance ( );
    HRESULT CheckAbort (
        const _variant_t & KeepAbort = vtMissing );
    ErrorCheckingOptionsPtr GetErrorCheckingOptions ( );
    VARIANT_BOOL GetAutoFormatAsYouTypeReplaceHyperlinks ( );
    void PutAutoFormatAsYouTypeReplaceHyperlinks (
        VARIANT_BOOL RHS );
    SmartTagRecognizersPtr GetSmartTagRecognizers ( );
    Office::NewFilePtr GetNewWorkbook ( );
    SpellingOptionsPtr GetSpellingOptions ( );
    SpeechPtr GetSpeech ( );
    VARIANT_BOOL GetMapPaperSize ( );
    void PutMapPaperSize (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowStartupDialog ( );
    void PutShowStartupDialog (
        VARIANT_BOOL RHS );
    _bstr_t GetDecimalSeparator ( );
    void PutDecimalSeparator (
        _bstr_t RHS );
    _bstr_t GetThousandsSeparator ( );
    void PutThousandsSeparator (
        _bstr_t RHS );
    VARIANT_BOOL GetUseSystemSeparators ( );
    void PutUseSystemSeparators (
        VARIANT_BOOL RHS );
    RangePtr GetThisCell ( );
    RTDPtr GetRTD ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveChart (
        struct _Chart * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveDialog (
        struct DialogSheet * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveMenuBar (
        struct MenuBar * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActivePrinter (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ActivePrinter (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveSheet (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveWindow (
        struct Window * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveWorkbook (
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIns (
        struct AddIns * * RHS ) = 0;
    virtual HRESULT __stdcall get_Assistant (
        struct Office::Assistant * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Calculate (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Cells (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Charts (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_Columns (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_CommandBars (
        struct Office::_CommandBars * * RHS ) = 0;
    virtual HRESULT __stdcall get_DDEAppReturnCode (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_DDEExecute (
        long Channel,
        BSTR String,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_DDEInitiate (
        BSTR App,
        BSTR Topic,
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_DDEPoke (
        long Channel,
        VARIANT Item,
        VARIANT Data,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_DDERequest (
        long Channel,
        BSTR Item,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_DDETerminate (
        long Channel,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_DialogSheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Evaluate (
        VARIANT Name,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__Evaluate (
        VARIANT Name,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ExecuteExcel4Macro (
        BSTR String,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Intersect (
        struct Range * Arg1,
        struct Range * Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        long lcid,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_MenuBars (
        struct MenuBars * * RHS ) = 0;
    virtual HRESULT __stdcall get_Modules (
        struct Modules * * RHS ) = 0;
    virtual HRESULT __stdcall get_Names (
        struct Names * * RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        VARIANT Cell1,
        VARIANT Cell2,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Rows (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Run (
        VARIANT Macro,
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__Run2 (
        VARIANT Macro,
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Selection (
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendKeys (
        VARIANT Keys,
        VARIANT Wait = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Sheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_ShortcutMenus (
        long Index,
        struct Menu * * RHS ) = 0;
    virtual HRESULT __stdcall get_ThisWorkbook (
        long lcid,
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall get_Toolbars (
        struct Toolbars * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Union (
        struct Range * Arg1,
        struct Range * Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        long lcid,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Windows (
        struct Windows * * RHS ) = 0;
    virtual HRESULT __stdcall get_Workbooks (
        struct Workbooks * * RHS ) = 0;
    virtual HRESULT __stdcall get_WorksheetFunction (
        struct WorksheetFunction * * RHS ) = 0;
    virtual HRESULT __stdcall get_Worksheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_Excel4MacroSheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ActivateMicrosoftApp (
        enum XlMSApplication Index,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_AddChartAutoFormat (
        VARIANT Chart,
        BSTR Name,
        VARIANT Description = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_AddCustomList (
        VARIANT ListArray,
        VARIANT ByRow = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_AlertBeforeOverwriting (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AlertBeforeOverwriting (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AltStartupPath (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_AltStartupPath (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_AskToUpdateLinks (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AskToUpdateLinks (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableAnimations (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableAnimations (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoCorrect (
        struct AutoCorrect * * RHS ) = 0;
    virtual HRESULT __stdcall get_Build (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_CalculateBeforeSave (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CalculateBeforeSave (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Calculation (
        long lcid,
        enum XlCalculation * RHS ) = 0;
    virtual HRESULT __stdcall put_Calculation (
        long lcid,
        enum XlCalculation RHS ) = 0;
    virtual HRESULT __stdcall get_Caller (
        VARIANT Index,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_CanPlaySounds (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_CanRecordSounds (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_CellDragAndDrop (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CellDragAndDrop (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_CentimetersToPoints (
        double Centimeters,
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        BSTR Word,
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ClipboardFormats (
        VARIANT Index,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayClipboardWindow (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayClipboardWindow (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ColorButtons (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ColorButtons (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CommandUnderlines (
        long lcid,
        enum XlCommandUnderlines * RHS ) = 0;
    virtual HRESULT __stdcall put_CommandUnderlines (
        long lcid,
        enum XlCommandUnderlines RHS ) = 0;
    virtual HRESULT __stdcall get_ConstrainNumeric (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ConstrainNumeric (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_ConvertFormula (
        VARIANT Formula,
        enum XlReferenceStyle FromReferenceStyle,
        VARIANT ToReferenceStyle,
        VARIANT ToAbsolute,
        VARIANT RelativeTo,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_CopyObjectsWithCells (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CopyObjectsWithCells (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Cursor (
        long lcid,
        enum XlMousePointer * RHS ) = 0;
    virtual HRESULT __stdcall put_Cursor (
        long lcid,
        enum XlMousePointer RHS ) = 0;
    virtual HRESULT __stdcall get_CustomListCount (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_CutCopyMode (
        long lcid,
        enum XlCutCopyMode * RHS ) = 0;
    virtual HRESULT __stdcall put_CutCopyMode (
        long lcid,
        enum XlCutCopyMode RHS ) = 0;
    virtual HRESULT __stdcall get_DataEntryMode (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_DataEntryMode (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy1 (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy2 (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy3 (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy4 (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy5 (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy6 (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy7 (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy8 (
        VARIANT Arg1,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy9 (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy10 (
        VARIANT arg,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy11 ( ) = 0;
    virtual HRESULT __stdcall get__Default (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_DefaultFilePath (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_DefaultFilePath (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_DeleteChartAutoFormat (
        BSTR Name,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_DeleteCustomList (
        long ListNum,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Dialogs (
        struct Dialogs * * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayAlerts (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayAlerts (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayFormulaBar (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayFormulaBar (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayFullScreen (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayFullScreen (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayNoteIndicator (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayNoteIndicator (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayCommentIndicator (
        enum XlCommentDisplayMode * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayCommentIndicator (
        enum XlCommentDisplayMode RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayExcel4Menus (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayExcel4Menus (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayRecentFiles (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayRecentFiles (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayScrollBars (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayScrollBars (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayStatusBar (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayStatusBar (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_DoubleClick (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_EditDirectlyInCell (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EditDirectlyInCell (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableAutoComplete (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableAutoComplete (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableCancelKey (
        long lcid,
        enum XlEnableCancelKey * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableCancelKey (
        long lcid,
        enum XlEnableCancelKey RHS ) = 0;
    virtual HRESULT __stdcall get_EnableSound (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableSound (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableTipWizard (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableTipWizard (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_FileConverters (
        VARIANT Index1,
        VARIANT Index2,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_FileSearch (
        struct Office::FileSearch * * RHS ) = 0;
    virtual HRESULT __stdcall get_FileFind (
        struct Office::IFind * * RHS ) = 0;
    virtual HRESULT __stdcall raw__FindFile (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_FixedDecimal (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_FixedDecimal (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_FixedDecimalPlaces (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_FixedDecimalPlaces (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_GetCustomListContents (
        long ListNum,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_GetCustomListNum (
        VARIANT ListArray,
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_GetOpenFilename (
        VARIANT FileFilter,
        VARIANT FilterIndex,
        VARIANT Title,
        VARIANT ButtonText,
        VARIANT MultiSelect,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_GetSaveAsFilename (
        VARIANT InitialFilename,
        VARIANT FileFilter,
        VARIANT FilterIndex,
        VARIANT Title,
        VARIANT ButtonText,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Goto (
        VARIANT Reference = vtMissing,
        VARIANT Scroll = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Height (
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        long lcid,
        double RHS ) = 0;
    virtual HRESULT __stdcall raw_Help (
        VARIANT HelpFile = vtMissing,
        VARIANT HelpContextID = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_IgnoreRemoteRequests (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IgnoreRemoteRequests (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_InchesToPoints (
        double Inches,
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_InputBox (
        BSTR Prompt,
        VARIANT Title,
        VARIANT Default,
        VARIANT Left,
        VARIANT Top,
        VARIANT HelpFile,
        VARIANT HelpContextID,
        VARIANT Type,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interactive (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Interactive (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_International (
        VARIANT Index,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Iteration (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Iteration (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LargeButtons (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LargeButtons (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        long lcid,
        double RHS ) = 0;
    virtual HRESULT __stdcall get_LibraryPath (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_MacroOptions (
        VARIANT Macro = vtMissing,
        VARIANT Description = vtMissing,
        VARIANT HasMenu = vtMissing,
        VARIANT MenuText = vtMissing,
        VARIANT HasShortcutKey = vtMissing,
        VARIANT ShortcutKey = vtMissing,
        VARIANT Category = vtMissing,
        VARIANT StatusBar = vtMissing,
        VARIANT HelpContextID = vtMissing,
        VARIANT HelpFile = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_MailLogoff (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_MailLogon (
        VARIANT Name = vtMissing,
        VARIANT Password = vtMissing,
        VARIANT DownloadNewMail = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_MailSession (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_MailSystem (
        long lcid,
        enum XlMailSystem * RHS ) = 0;
    virtual HRESULT __stdcall get_MathCoprocessorAvailable (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_MaxChange (
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_MaxChange (
        long lcid,
        double RHS ) = 0;
    virtual HRESULT __stdcall get_MaxIterations (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MaxIterations (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MemoryFree (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_MemoryTotal (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_MemoryUsed (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_MouseAvailable (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_MoveAfterReturn (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MoveAfterReturn (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MoveAfterReturnDirection (
        long lcid,
        enum XlDirection * RHS ) = 0;
    virtual HRESULT __stdcall put_MoveAfterReturnDirection (
        long lcid,
        enum XlDirection RHS ) = 0;
    virtual HRESULT __stdcall get_RecentFiles (
        struct RecentFiles * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_NextLetter (
        long lcid,
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall get_NetworkTemplatesPath (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_ODBCErrors (
        struct ODBCErrors * * RHS ) = 0;
    virtual HRESULT __stdcall get_ODBCTimeout (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ODBCTimeout (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_OnCalculate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnCalculate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnData (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnData (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnDoubleClick (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnDoubleClick (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnEntry (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnEntry (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_OnKey (
        BSTR Key,
        VARIANT Procedure = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_OnRepeat (
        BSTR Text,
        BSTR Procedure,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_OnSheetActivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetActivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetDeactivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetDeactivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_OnTime (
        VARIANT EarliestTime,
        BSTR Procedure,
        VARIANT LatestTime = vtMissing,
        VARIANT Schedule = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_OnUndo (
        BSTR Text,
        BSTR Procedure,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_OnWindow (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnWindow (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OperatingSystem (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_OrganizationName (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Path (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_PathSeparator (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_PreviousSelections (
        VARIANT Index,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotTableSelection (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PivotTableSelection (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PromptForSummaryInfo (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PromptForSummaryInfo (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Quit ( ) = 0;
    virtual HRESULT __stdcall raw_RecordMacro (
        VARIANT BasicCode = vtMissing,
        VARIANT XlmCode = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_RecordRelative (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ReferenceStyle (
        long lcid,
        enum XlReferenceStyle * RHS ) = 0;
    virtual HRESULT __stdcall put_ReferenceStyle (
        long lcid,
        enum XlReferenceStyle RHS ) = 0;
    virtual HRESULT __stdcall get_RegisteredFunctions (
        VARIANT Index1,
        VARIANT Index2,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_RegisterXLL (
        BSTR Filename,
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Repeat (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_ResetTipWizard (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_RollZoom (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RollZoom (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Save (
        VARIANT Filename = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_SaveWorkspace (
        VARIANT Filename = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_ScreenUpdating (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ScreenUpdating (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_SetDefaultChart (
        VARIANT FormatName = vtMissing,
        VARIANT Gallery = vtMissing ) = 0;
    virtual HRESULT __stdcall get_SheetsInNewWorkbook (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SheetsInNewWorkbook (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_ShowChartTipNames (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowChartTipNames (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowChartTipValues (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowChartTipValues (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_StandardFont (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_StandardFont (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_StandardFontSize (
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_StandardFontSize (
        long lcid,
        double RHS ) = 0;
    virtual HRESULT __stdcall get_StartupPath (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_StatusBar (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_StatusBar (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_TemplatesPath (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_ShowToolTips (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowToolTips (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        long lcid,
        double RHS ) = 0;
    virtual HRESULT __stdcall get_DefaultSaveFormat (
        enum XlFileFormat * RHS ) = 0;
    virtual HRESULT __stdcall put_DefaultSaveFormat (
        enum XlFileFormat RHS ) = 0;
    virtual HRESULT __stdcall get_TransitionMenuKey (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_TransitionMenuKey (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_TransitionMenuKeyAction (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_TransitionMenuKeyAction (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_TransitionNavigKeys (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TransitionNavigKeys (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Undo (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_UsableHeight (
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_UsableWidth (
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_UserControl (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_UserControl (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_UserName (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_UserName (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_JOEVBE (
        struct VBIDE::JOEVBE * * RHS ) = 0;
    virtual HRESULT __stdcall get_Version (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Volatile (
        VARIANT Volatile = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw__Wait (
        VARIANT Time,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Width (
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        long lcid,
        double RHS ) = 0;
    virtual HRESULT __stdcall get_WindowsForPens (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_WindowState (
        long lcid,
        enum XlWindowState * RHS ) = 0;
    virtual HRESULT __stdcall put_WindowState (
        long lcid,
        enum XlWindowState RHS ) = 0;
    virtual HRESULT __stdcall get_UILanguage (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_UILanguage (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_DefaultSheetDirection (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_DefaultSheetDirection (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_CursorMovement (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_CursorMovement (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_ControlCharacters (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ControlCharacters (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw__WSFunction (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_EnableEvents (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableEvents (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayInfoWindow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayInfoWindow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Wait (
        VARIANT Time,
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ExtendList (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ExtendList (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_OLEDBErrors (
        struct OLEDBErrors * * RHS ) = 0;
    virtual HRESULT __stdcall raw_GetPhonetic (
        VARIANT Text,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_COMAddIns (
        struct Office::COMAddIns * * RHS ) = 0;
    virtual HRESULT __stdcall get_DefaultWebOptions (
        struct DefaultWebOptions * * RHS ) = 0;
    virtual HRESULT __stdcall get_ProductCode (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_UserLibraryPath (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoPercentEntry (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoPercentEntry (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LanguageSettings (
        struct Office::LanguageSettings * * RHS ) = 0;
    virtual HRESULT __stdcall get_Dummy101 (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy12 (
        struct PivotTable * p1,
        struct PivotTable * p2 ) = 0;
    virtual HRESULT __stdcall get_AnswerWizard (
        struct Office::AnswerWizard * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CalculateFull ( ) = 0;
    virtual HRESULT __stdcall raw_FindFile (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_CalculationVersion (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShowWindowsInTaskbar (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowWindowsInTaskbar (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_FeatureInstall (
        enum Office::MsoFeatureInstall * RHS ) = 0;
    virtual HRESULT __stdcall put_FeatureInstall (
        enum Office::MsoFeatureInstall RHS ) = 0;
    virtual HRESULT __stdcall get_Ready (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy13 (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_FindFormat (
        struct CellFormat * * RHS ) = 0;
    virtual HRESULT __stdcall putref_FindFormat (
        struct CellFormat * RHS ) = 0;
    virtual HRESULT __stdcall get_ReplaceFormat (
        struct CellFormat * * RHS ) = 0;
    virtual HRESULT __stdcall putref_ReplaceFormat (
        struct CellFormat * RHS ) = 0;
    virtual HRESULT __stdcall get_UsedObjects (
        struct UsedObjects * * RHS ) = 0;
    virtual HRESULT __stdcall get_CalculationState (
        enum XlCalculationState * RHS ) = 0;
    virtual HRESULT __stdcall get_CalculationInterruptKey (
        enum XlCalculationInterruptKey * RHS ) = 0;
    virtual HRESULT __stdcall put_CalculationInterruptKey (
        enum XlCalculationInterruptKey RHS ) = 0;
    virtual HRESULT __stdcall get_Watches (
        struct Watches * * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayFunctionToolTips (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayFunctionToolTips (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutomationSecurity (
        enum Office::MsoAutomationSecurity * RHS ) = 0;
    virtual HRESULT __stdcall put_AutomationSecurity (
        enum Office::MsoAutomationSecurity RHS ) = 0;
    virtual HRESULT __stdcall get_FileDialog (
        enum Office::MsoFileDialogType fileDialogType,
        struct Office::FileDialog * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy14 ( ) = 0;
    virtual HRESULT __stdcall raw_CalculateFullRebuild ( ) = 0;
    virtual HRESULT __stdcall get_DisplayPasteOptions (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayPasteOptions (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayInsertOptions (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayInsertOptions (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_GenerateGetPivotData (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_GenerateGetPivotData (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoRecover (
        struct AutoRecover * * RHS ) = 0;
    virtual HRESULT __stdcall get_Hwnd (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Hinstance (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckAbort (
        VARIANT KeepAbort = vtMissing ) = 0;
    virtual HRESULT __stdcall get_ErrorCheckingOptions (
        struct ErrorCheckingOptions * * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoFormatAsYouTypeReplaceHyperlinks (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoFormatAsYouTypeReplaceHyperlinks (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SmartTagRecognizers (
        struct SmartTagRecognizers * * RHS ) = 0;
    virtual HRESULT __stdcall get_NewWorkbook (
        struct Office::NewFile * * RHS ) = 0;
    virtual HRESULT __stdcall get_SpellingOptions (
        struct SpellingOptions * * RHS ) = 0;
    virtual HRESULT __stdcall get_Speech (
        struct Speech * * RHS ) = 0;
    virtual HRESULT __stdcall get_MapPaperSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MapPaperSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowStartupDialog (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowStartupDialog (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DecimalSeparator (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_DecimalSeparator (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ThousandsSeparator (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ThousandsSeparator (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_UseSystemSeparators (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_UseSystemSeparators (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ThisCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_RTD (
        struct RTD * * RHS ) = 0;
};

struct __declspec(uuid("00020845-0001-0000-c000-000000000046"))
IWorksheetFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Count (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL IsNA (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsError (
        const _variant_t & Arg1 );
    double Sum (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Average (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Min (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Max (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Npv (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double StDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _bstr_t Dollar (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Fixed (
        double Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing );
    double Pi ( );
    double Ln (
        double Arg1 );
    double Log10 (
        double Arg1 );
    double Round (
        double Arg1,
        double Arg2 );
    _variant_t Lookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Index (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _bstr_t Rept (
        _bstr_t Arg1,
        double Arg2 );
    VARIANT_BOOL And (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL Or (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DCount (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DSum (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DAverage (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMin (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMax (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DStDev (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Var (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DVar (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t Text (
        const _variant_t & Arg1,
        _bstr_t Arg2 );
    _variant_t LinEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Trend (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t LogEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Growth (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    double Pv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Fv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double NPer (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Pmt (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Rate (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double MIrr (
        const _variant_t & Arg1,
        double Arg2,
        double Arg3 );
    double Irr (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Match (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Weekday (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Search (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Transpose (
        const _variant_t & Arg1 );
    double Atan2 (
        double Arg1,
        double Arg2 );
    double Asin (
        double Arg1 );
    double Acos (
        double Arg1 );
    _variant_t Choose (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t HLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    _variant_t VLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Log (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Proper (
        _bstr_t Arg1 );
    _bstr_t Trim (
        _bstr_t Arg1 );
    _bstr_t Replace (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    _bstr_t Substitute (
        _bstr_t Arg1,
        _bstr_t Arg2,
        _bstr_t Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Find (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    VARIANT_BOOL IsErr (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsText (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsNumber (
        const _variant_t & Arg1 );
    double Sln (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Syd (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double Ddb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _bstr_t Clean (
        _bstr_t Arg1 );
    double MDeterm (
        const _variant_t & Arg1 );
    _variant_t MInverse (
        const _variant_t & Arg1 );
    _variant_t MMult (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Ipmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double Ppmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double CountA (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Product (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Fact (
        double Arg1 );
    double DProduct (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsNonText (
        const _variant_t & Arg1 );
    double StDevP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double VarP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DStDevP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DVarP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsLogical (
        const _variant_t & Arg1 );
    double DCountA (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t USDollar (
        double Arg1,
        double Arg2 );
    double FindB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    double SearchB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _bstr_t ReplaceB (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    double RoundUp (
        double Arg1,
        double Arg2 );
    double RoundDown (
        double Arg1,
        double Arg2 );
    double Rank (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Days360 (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Vdb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double Arg5,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing );
    double Median (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumProduct (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Sinh (
        double Arg1 );
    double Cosh (
        double Arg1 );
    double Tanh (
        double Arg1 );
    double Asinh (
        double Arg1 );
    double Acosh (
        double Arg1 );
    double Atanh (
        double Arg1 );
    _variant_t DGet (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Db (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _variant_t Frequency (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double AveDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double BetaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double GammaLn (
        double Arg1 );
    double BetaInv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double BinomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double ChiDist (
        double Arg1,
        double Arg2 );
    double ChiInv (
        double Arg1,
        double Arg2 );
    double Combin (
        double Arg1,
        double Arg2 );
    double Confidence (
        double Arg1,
        double Arg2,
        double Arg3 );
    double CritBinom (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Even (
        double Arg1 );
    double ExponDist (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double FDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double FInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Fisher (
        double Arg1 );
    double FisherInv (
        double Arg1 );
    double Floor (
        double Arg1,
        double Arg2 );
    double GammaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double GammaInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Ceiling (
        double Arg1,
        double Arg2 );
    double HypGeomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double LogNormDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double LogInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NegBinomDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double NormSDist (
        double Arg1 );
    double NormInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormSInv (
        double Arg1 );
    double Standardize (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Odd (
        double Arg1 );
    double Permut (
        double Arg1,
        double Arg2 );
    double Poisson (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double TDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Weibull (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double SumXMY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2MY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2PY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double ChiTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Correl (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Covar (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Forecast (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double FTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Intercept (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Pearson (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double RSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double StEyx (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Slope (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double TTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        double Arg4 );
    double Prob (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing );
    double DevSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double GeoMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double HarMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Kurt (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Skew (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double ZTest (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Large (
        const _variant_t & Arg1,
        double Arg2 );
    double Small (
        const _variant_t & Arg1,
        double Arg2 );
    double Quartile (
        const _variant_t & Arg1,
        double Arg2 );
    double Percentile (
        const _variant_t & Arg1,
        double Arg2 );
    double PercentRank (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Mode (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double TrimMean (
        const _variant_t & Arg1,
        double Arg2 );
    double TInv (
        double Arg1,
        double Arg2 );
    double Power (
        double Arg1,
        double Arg2 );
    double Radians (
        double Arg1 );
    double Degrees (
        double Arg1 );
    double Subtotal (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumIf (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double CountIf (
        struct Range * Arg1,
        const _variant_t & Arg2 );
    double CountBlank (
        struct Range * Arg1 );
    double Ispmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    _bstr_t Roman (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Asc (
        _bstr_t Arg1 );
    _bstr_t Dbcs (
        _bstr_t Arg1 );
    _bstr_t Phonetic (
        struct Range * Arg1 );
    _bstr_t BahtText (
        double Arg1 );
    _bstr_t ThaiDayOfWeek (
        double Arg1 );
    _bstr_t ThaiDigit (
        _bstr_t Arg1 );
    _bstr_t ThaiMonthOfYear (
        double Arg1 );
    _bstr_t ThaiNumSound (
        double Arg1 );
    _bstr_t ThaiNumString (
        double Arg1 );
    double ThaiStringLength (
        _bstr_t Arg1 );
    VARIANT_BOOL IsThaiDigit (
        _bstr_t Arg1 );
    double RoundBahtDown (
        double Arg1 );
    double RoundBahtUp (
        double Arg1 );
    double ThaiYear (
        double Arg1 );
    _variant_t RTD (
        const _variant_t & progID,
        const _variant_t & server,
        const _variant_t & topic1,
        const _variant_t & topic2 = vtMissing,
        const _variant_t & topic3 = vtMissing,
        const _variant_t & topic4 = vtMissing,
        const _variant_t & topic5 = vtMissing,
        const _variant_t & topic6 = vtMissing,
        const _variant_t & topic7 = vtMissing,
        const _variant_t & topic8 = vtMissing,
        const _variant_t & topic9 = vtMissing,
        const _variant_t & topic10 = vtMissing,
        const _variant_t & topic11 = vtMissing,
        const _variant_t & topic12 = vtMissing,
        const _variant_t & topic13 = vtMissing,
        const _variant_t & topic14 = vtMissing,
        const _variant_t & topic15 = vtMissing,
        const _variant_t & topic16 = vtMissing,
        const _variant_t & topic17 = vtMissing,
        const _variant_t & topic18 = vtMissing,
        const _variant_t & topic19 = vtMissing,
        const _variant_t & topic20 = vtMissing,
        const _variant_t & topic21 = vtMissing,
        const _variant_t & topic22 = vtMissing,
        const _variant_t & topic23 = vtMissing,
        const _variant_t & topic24 = vtMissing,
        const _variant_t & topic25 = vtMissing,
        const _variant_t & topic26 = vtMissing,
        const _variant_t & topic27 = vtMissing,
        const _variant_t & topic28 = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__WSFunction (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Count (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_IsNA (
        VARIANT Arg1,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_IsError (
        VARIANT Arg1,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Sum (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Average (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Min (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Max (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Npv (
        double Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_StDev (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dollar (
        double Arg1,
        VARIANT Arg2,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Fixed (
        double Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Pi (
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Ln (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Log10 (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Round (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Lookup (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Index (
        VARIANT Arg1,
        double Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Rept (
        BSTR Arg1,
        double Arg2,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_And (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Or (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_DCount (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DSum (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DAverage (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DMin (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DMax (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DStDev (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Var (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DVar (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Text (
        VARIANT Arg1,
        BSTR Arg2,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_LinEst (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Trend (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_LogEst (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Growth (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Pv (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Fv (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_NPer (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Pmt (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Rate (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_MIrr (
        VARIANT Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Irr (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Match (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Weekday (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Search (
        BSTR Arg1,
        BSTR Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Transpose (
        VARIANT Arg1,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Atan2 (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Asin (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Acos (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Choose (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_HLookup (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_VLookup (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Log (
        double Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Proper (
        BSTR Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Trim (
        BSTR Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Replace (
        BSTR Arg1,
        double Arg2,
        double Arg3,
        BSTR Arg4,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Substitute (
        BSTR Arg1,
        BSTR Arg2,
        BSTR Arg3,
        VARIANT Arg4,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Find (
        BSTR Arg1,
        BSTR Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_IsErr (
        VARIANT Arg1,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_IsText (
        VARIANT Arg1,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_IsNumber (
        VARIANT Arg1,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Sln (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Syd (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Ddb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        VARIANT Arg5,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Clean (
        BSTR Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_MDeterm (
        VARIANT Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_MInverse (
        VARIANT Arg1,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_MMult (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Ipmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Ppmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_CountA (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Product (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Fact (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DProduct (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_IsNonText (
        VARIANT Arg1,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_StDevP (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_VarP (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DStDevP (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DVarP (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_IsLogical (
        VARIANT Arg1,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_DCountA (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_USDollar (
        double Arg1,
        double Arg2,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_FindB (
        BSTR Arg1,
        BSTR Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_SearchB (
        BSTR Arg1,
        BSTR Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_ReplaceB (
        BSTR Arg1,
        double Arg2,
        double Arg3,
        BSTR Arg4,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_RoundUp (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_RoundDown (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Rank (
        double Arg1,
        struct Range * Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Days360 (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Vdb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Median (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_SumProduct (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Sinh (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cosh (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Tanh (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Asinh (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Acosh (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Atanh (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DGet (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Db (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        VARIANT Arg5,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Frequency (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_AveDev (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_BetaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_GammaLn (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_BetaInv (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_BinomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_ChiDist (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_ChiInv (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Combin (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Confidence (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_CritBinom (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Even (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_ExponDist (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_FDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_FInv (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Fisher (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_FisherInv (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Floor (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_GammaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_GammaInv (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Ceiling (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_HypGeomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_LogNormDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_LogInv (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_NegBinomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_NormDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_NormSDist (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_NormInv (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_NormSInv (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Standardize (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Odd (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Permut (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Poisson (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_TDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Weibull (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_SumXMY2 (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_SumX2MY2 (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_SumX2PY2 (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_ChiTest (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Correl (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Covar (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Forecast (
        double Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_FTest (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Intercept (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Pearson (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_RSq (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_StEyx (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Slope (
        VARIANT Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_TTest (
        VARIANT Arg1,
        VARIANT Arg2,
        double Arg3,
        double Arg4,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Prob (
        VARIANT Arg1,
        VARIANT Arg2,
        double Arg3,
        VARIANT Arg4,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_DevSq (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_GeoMean (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_HarMean (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_SumSq (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Kurt (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Skew (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_ZTest (
        VARIANT Arg1,
        double Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Large (
        VARIANT Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Small (
        VARIANT Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Quartile (
        VARIANT Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Percentile (
        VARIANT Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_PercentRank (
        VARIANT Arg1,
        double Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Mode (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_TrimMean (
        VARIANT Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_TInv (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Power (
        double Arg1,
        double Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Radians (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Degrees (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Subtotal (
        double Arg1,
        struct Range * Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_SumIf (
        struct Range * Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_CountIf (
        struct Range * Arg1,
        VARIANT Arg2,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_CountBlank (
        struct Range * Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Ispmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_Roman (
        double Arg1,
        VARIANT Arg2,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Asc (
        BSTR Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dbcs (
        BSTR Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Phonetic (
        struct Range * Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_BahtText (
        double Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_ThaiDayOfWeek (
        double Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_ThaiDigit (
        BSTR Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_ThaiMonthOfYear (
        double Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_ThaiNumSound (
        double Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_ThaiNumString (
        double Arg1,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_ThaiStringLength (
        BSTR Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_IsThaiDigit (
        BSTR Arg1,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_RoundBahtDown (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_RoundBahtUp (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_ThaiYear (
        double Arg1,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_RTD (
        VARIANT progID,
        VARIANT server,
        VARIANT topic1,
        VARIANT topic2,
        VARIANT topic3,
        VARIANT topic4,
        VARIANT topic5,
        VARIANT topic6,
        VARIANT topic7,
        VARIANT topic8,
        VARIANT topic9,
        VARIANT topic10,
        VARIANT topic11,
        VARIANT topic12,
        VARIANT topic13,
        VARIANT topic14,
        VARIANT topic15,
        VARIANT topic16,
        VARIANT topic17,
        VARIANT topic18,
        VARIANT topic19,
        VARIANT topic20,
        VARIANT topic21,
        VARIANT topic22,
        VARIANT topic23,
        VARIANT topic24,
        VARIANT topic25,
        VARIANT topic26,
        VARIANT topic27,
        VARIANT topic28,
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00020846-0001-0000-c000-000000000046"))
IRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _variant_t _Default[][][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetListHeaderRows))
    long ListHeaderRows;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[][];
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[][][];
    __declspec(property(get=GetComment))
    CommentPtr Comment;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetSoundNote))
    SoundNotePtr SoundNote;
    __declspec(property(get=GetPhonetics))
    PhoneticsPtr Phonetics;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetFormulaLabel,put=PutFormulaLabel))
    enum XlFormulaLabel FormulaLabel;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetWorksheet))
    _WorksheetPtr Worksheet;
    __declspec(property(get=GetMergeArea))
    RangePtr MergeArea;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetEnd))
    RangePtr End[];
    __declspec(property(get=GetCurrentArray))
    RangePtr CurrentArray;
    __declspec(property(get=GetNext))
    RangePtr Next;
    __declspec(property(get=GetPrevious))
    RangePtr Previous;
    __declspec(property(get=GetPrefixCharacter))
    _variant_t PrefixCharacter;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetValidation))
    ValidationPtr Validation;
    __declspec(property(get=GetValue2,put=PutValue2))
    _variant_t Value2[];
    __declspec(property(get=GetPhonetic))
    PhoneticPtr Phonetic;
    __declspec(property(get=GetFormatConditions))
    FormatConditionsPtr FormatConditions;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddress))
    _bstr_t Address[][][][][][];
    __declspec(property(get=GetPivotCell))
    PivotCellPtr PivotCell;
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetErrors))
    ErrorsPtr Errors;
    __declspec(property(get=GetColumn))
    long Column;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetColumnWidth,put=PutColumnWidth))
    _variant_t ColumnWidth;
    __declspec(property(get=GetCurrentRegion))
    RangePtr CurrentRegion;
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetEntireColumn))
    RangePtr EntireColumn;
    __declspec(property(get=GetEntireRow))
    RangePtr EntireRow;
    __declspec(property(get=GetLocationInTable))
    enum XlLocationInTable LocationInTable;
    __declspec(property(get=GetDependents))
    RangePtr Dependents;
    __declspec(property(get=GetPrecedents))
    RangePtr Precedents;
    __declspec(property(get=GetDirectDependents))
    RangePtr DirectDependents;
    __declspec(property(get=GetDirectPrecedents))
    RangePtr DirectPrecedents;
    __declspec(property(get=GetOffset))
    RangePtr Offset[][];
    __declspec(property(get=GetPageBreak,put=PutPageBreak))
    long PageBreak;
    __declspec(property(get=GetResize))
    RangePtr Resize[][];
    __declspec(property(get=GetRow))
    long Row;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetStyle,put=PutStyle))
    _variant_t Style;
    __declspec(property(get=GetFormula,put=PutFormula))
    _variant_t Formula[];
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _variant_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _variant_t FormulaR1C1[];
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _variant_t FormulaR1C1Local;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetHasArray))
    _variant_t HasArray;
    __declspec(property(get=GetHasFormula))
    _variant_t HasFormula;
    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetHeight))
    _variant_t Height;
    __declspec(property(get=GetAreas))
    AreasPtr Areas;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    _variant_t OutlineLevel;
    __declspec(property(get=GetTop))
    _variant_t Top;
    __declspec(property(get=GetLeft))
    _variant_t Left;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _variant_t RowHeight;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetSummary))
    _variant_t Summary;
    __declspec(property(get=GetUseStandardHeight,put=PutUseStandardHeight))
    _variant_t UseStandardHeight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetUseStandardWidth,put=PutUseStandardWidth))
    _variant_t UseStandardWidth;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText))
    _variant_t Text;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    _variant_t ShowDetail;
    __declspec(property(get=GetFormulaArray,put=PutFormulaArray))
    _variant_t FormulaArray;
    __declspec(property(get=GetAddressLocal))
    _bstr_t AddressLocal[][][][][];
    __declspec(property(get=GetWidth))
    _variant_t Width;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & RHS );
    _bstr_t GetAddress (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing,
        long lcid = 0 );
    _bstr_t GetAddressLocal (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _variant_t AdvancedFilter (
        enum XlFilterAction Action,
        const _variant_t & CriteriaRange = vtMissing,
        const _variant_t & CopyToRange = vtMissing,
        const _variant_t & Unique = vtMissing );
    _variant_t ApplyNames (
        const _variant_t & Names,
        const _variant_t & IgnoreRelativeAbsolute,
        const _variant_t & UseRowColumnNames,
        const _variant_t & OmitColumn,
        const _variant_t & OmitRow,
        enum XlApplyNamesOrder Order,
        const _variant_t & AppendLast = vtMissing );
    _variant_t ApplyOutlineStyles ( );
    AreasPtr GetAreas ( );
    _bstr_t AutoComplete (
        _bstr_t String );
    _variant_t AutoFill (
        struct Range * Destination,
        enum XlAutoFillType Type );
    _variant_t AutoFilter (
        const _variant_t & Field,
        const _variant_t & Criteria1,
        enum XlAutoFilterOperator Operator,
        const _variant_t & Criteria2 = vtMissing,
        const _variant_t & VisibleDropDown = vtMissing );
    _variant_t AutoFit ( );
    _variant_t AutoFormat (
        enum XlRangeAutoFormat Format,
        const _variant_t & Number = vtMissing,
        const _variant_t & Font = vtMissing,
        const _variant_t & Alignment = vtMissing,
        const _variant_t & Border = vtMissing,
        const _variant_t & Pattern = vtMissing,
        const _variant_t & Width = vtMissing );
    _variant_t AutoOutline ( );
    _variant_t BorderAround (
        const _variant_t & LineStyle,
        enum XlBorderWeight Weight,
        enum XlColorIndex ColorIndex,
        const _variant_t & Color = vtMissing );
    BordersPtr GetBorders ( );
    _variant_t Calculate ( );
    RangePtr GetCells ( );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t ClearFormats ( );
    _variant_t ClearNotes ( );
    _variant_t ClearOutline ( );
    long GetColumn ( );
    RangePtr ColumnDifferences (
        const _variant_t & Comparison );
    RangePtr GetColumns ( );
    _variant_t GetColumnWidth ( );
    void PutColumnWidth (
        const _variant_t & RHS );
    _variant_t Consolidate (
        const _variant_t & Sources = vtMissing,
        const _variant_t & Function = vtMissing,
        const _variant_t & TopRow = vtMissing,
        const _variant_t & LeftColumn = vtMissing,
        const _variant_t & CreateLinks = vtMissing );
    _variant_t Copy (
        const _variant_t & Destination = vtMissing );
    long CopyFromRecordset (
        IUnknown * Data,
        const _variant_t & MaxRows = vtMissing,
        const _variant_t & MaxColumns = vtMissing );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    long GetCount ( );
    _variant_t CreateNames (
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    _variant_t CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing );
    RangePtr GetCurrentArray ( );
    RangePtr GetCurrentRegion ( );
    _variant_t Cut (
        const _variant_t & Destination = vtMissing );
    _variant_t DataSeries (
        const _variant_t & Rowcol,
        enum XlDataSeriesType Type,
        enum XlDataSeriesDate Date,
        const _variant_t & Step = vtMissing,
        const _variant_t & Stop = vtMissing,
        const _variant_t & Trend = vtMissing );
    _variant_t Get_Default (
        const _variant_t & RowIndex = vtMissing,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0 );
    void Put_Default (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t Delete (
        const _variant_t & Shift = vtMissing );
    RangePtr GetDependents ( );
    _variant_t ignorethis ( );
    RangePtr GetDirectDependents ( );
    RangePtr GetDirectPrecedents ( );
    _variant_t EditionOptions (
        enum XlEditionType Type,
        enum XlEditionOptionsOption Option,
        const _variant_t & Name,
        const _variant_t & Reference,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance ChartSize,
        const _variant_t & Format = vtMissing );
    RangePtr GetEnd (
        enum XlDirection Direction );
    RangePtr GetEntireColumn ( );
    RangePtr GetEntireRow ( );
    _variant_t FillDown ( );
    _variant_t FillLeft ( );
    _variant_t FillRight ( );
    _variant_t FillUp ( );
    RangePtr Find (
        const _variant_t & What,
        const _variant_t & After,
        const _variant_t & LookIn,
        const _variant_t & LookAt,
        const _variant_t & SearchOrder,
        enum XlSearchDirection SearchDirection,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing );
    RangePtr FindNext (
        const _variant_t & After = vtMissing );
    RangePtr FindPrevious (
        const _variant_t & After = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetFormula (
        long lcid = 0 );
    void PutFormula (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetFormulaArray ( );
    void PutFormulaArray (
        const _variant_t & RHS );
    enum XlFormulaLabel GetFormulaLabel ( );
    void PutFormulaLabel (
        enum XlFormulaLabel RHS );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & RHS );
    _variant_t GetFormulaLocal ( );
    void PutFormulaLocal (
        const _variant_t & RHS );
    _variant_t GetFormulaR1C1 (
        long lcid = 0 );
    void PutFormulaR1C1 (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        const _variant_t & RHS );
    _variant_t FunctionWizard ( );
    VARIANT_BOOL GoalSeek (
        const _variant_t & Goal,
        struct Range * ChangingCell );
    _variant_t Group (
        const _variant_t & Start = vtMissing,
        const _variant_t & End = vtMissing,
        const _variant_t & By = vtMissing,
        const _variant_t & Periods = vtMissing );
    _variant_t GetHasArray ( );
    _variant_t GetHasFormula ( );
    _variant_t GetHeight ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & RHS );
    HRESULT InsertIndent (
        long InsertAmount );
    _variant_t Insert (
        const _variant_t & Shift = vtMissing,
        const _variant_t & CopyOrigin = vtMissing );
    InteriorPtr GetInterior ( );
    _variant_t GetItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0 );
    void PutItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t Justify ( );
    _variant_t GetLeft ( );
    long GetListHeaderRows ( );
    _variant_t ListNames ( );
    enum XlLocationInTable GetLocationInTable ( );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & RHS );
    HRESULT Merge (
        const _variant_t & Across = vtMissing );
    HRESULT UnMerge ( );
    RangePtr GetMergeArea ( );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & RHS );
    _variant_t NavigateArrow (
        const _variant_t & TowardPrecedent = vtMissing,
        const _variant_t & ArrowNumber = vtMissing,
        const _variant_t & LinkNumber = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    RangePtr GetNext ( );
    _bstr_t NoteText (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    RangePtr GetOffset (
        const _variant_t & RowOffset = vtMissing,
        const _variant_t & ColumnOffset = vtMissing );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetOutlineLevel ( );
    void PutOutlineLevel (
        const _variant_t & RHS );
    long GetPageBreak ( );
    void PutPageBreak (
        long RHS );
    _variant_t Parse (
        const _variant_t & ParseLine = vtMissing,
        const _variant_t & Destination = vtMissing );
    _variant_t _PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotTablePtr GetPivotTable ( );
    RangePtr GetPrecedents ( );
    _variant_t GetPrefixCharacter ( );
    RangePtr GetPrevious ( );
    _variant_t _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    _variant_t RemoveSubtotal ( );
    VARIANT_BOOL Replace (
        const _variant_t & What,
        const _variant_t & Replacement,
        const _variant_t & LookAt = vtMissing,
        const _variant_t & SearchOrder = vtMissing,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing,
        const _variant_t & ReplaceFormat = vtMissing );
    RangePtr GetResize (
        const _variant_t & RowSize = vtMissing,
        const _variant_t & ColumnSize = vtMissing );
    long GetRow ( );
    RangePtr RowDifferences (
        const _variant_t & Comparison );
    _variant_t GetRowHeight ( );
    void PutRowHeight (
        const _variant_t & RHS );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t Select ( );
    _variant_t Show ( );
    _variant_t ShowDependents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShowDetail ( );
    void PutShowDetail (
        const _variant_t & RHS );
    _variant_t ShowErrors ( );
    _variant_t ShowPrecedents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & RHS );
    _variant_t Sort (
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Key2,
        const _variant_t & Type,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortMethod SortMethod,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    _variant_t SortSpecial (
        enum XlSortMethod SortMethod,
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Type,
        const _variant_t & Key2,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    SoundNotePtr GetSoundNote ( );
    RangePtr SpecialCells (
        enum XlCellType Type,
        const _variant_t & Value = vtMissing );
    _variant_t GetStyle ( );
    void PutStyle (
        const _variant_t & RHS );
    _variant_t SubscribeTo (
        _bstr_t Edition,
        enum XlSubscribeToFormat Format );
    _variant_t Subtotal (
        long GroupBy,
        enum XlConsolidationFunction Function,
        const _variant_t & TotalList,
        const _variant_t & Replace,
        const _variant_t & PageBreaks,
        enum XlSummaryRow SummaryBelowData );
    _variant_t GetSummary ( );
    _variant_t Table (
        const _variant_t & RowInput = vtMissing,
        const _variant_t & ColumnInput = vtMissing );
    _variant_t GetText ( );
    _variant_t TextToColumns (
        const _variant_t & Destination,
        enum XlTextParsingType DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        const _variant_t & TrailingMinusNumbers = vtMissing );
    _variant_t GetTop ( );
    _variant_t Ungroup ( );
    _variant_t GetUseStandardHeight ( );
    void PutUseStandardHeight (
        const _variant_t & RHS );
    _variant_t GetUseStandardWidth ( );
    void PutUseStandardWidth (
        const _variant_t & RHS );
    ValidationPtr GetValidation ( );
    _variant_t GetValue (
        const _variant_t & RangeValueDataType = vtMissing,
        long lcid = 0 );
    void PutValue (
        const _variant_t & RangeValueDataType,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t GetValue2 (
        long lcid = 0 );
    void PutValue2 (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t GetWidth ( );
    _WorksheetPtr GetWorksheet ( );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & RHS );
    CommentPtr AddComment (
        const _variant_t & Text = vtMissing );
    CommentPtr GetComment ( );
    HRESULT ClearComments ( );
    PhoneticPtr GetPhonetic ( );
    FormatConditionsPtr GetFormatConditions ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    HyperlinksPtr GetHyperlinks ( );
    PhoneticsPtr GetPhonetics ( );
    HRESULT SetPhonetic ( );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t RHS );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    PivotCellPtr GetPivotCell ( );
    HRESULT Dirty ( );
    ErrorsPtr GetErrors ( );
    SmartTagsPtr GetSmartTags ( );
    HRESULT Speak (
        const _variant_t & SpeakDirection = vtMissing,
        const _variant_t & SpeakFormulas = vtMissing );
    _variant_t PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    VARIANT_BOOL GetAllowEdit ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Address (
        VARIANT RowAbsolute,
        VARIANT ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        VARIANT External,
        VARIANT RelativeTo,
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_AddressLocal (
        VARIANT RowAbsolute,
        VARIANT ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        VARIANT External,
        VARIANT RelativeTo,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_AdvancedFilter (
        enum XlFilterAction Action,
        VARIANT CriteriaRange,
        VARIANT CopyToRange,
        VARIANT Unique,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ApplyNames (
        VARIANT Names,
        VARIANT IgnoreRelativeAbsolute,
        VARIANT UseRowColumnNames,
        VARIANT OmitColumn,
        VARIANT OmitRow,
        enum XlApplyNamesOrder Order,
        VARIANT AppendLast,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ApplyOutlineStyles (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Areas (
        struct Areas * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AutoComplete (
        BSTR String,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_AutoFill (
        struct Range * Destination,
        enum XlAutoFillType Type,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_AutoFilter (
        VARIANT Field,
        VARIANT Criteria1,
        enum XlAutoFilterOperator Operator,
        VARIANT Criteria2,
        VARIANT VisibleDropDown,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_AutoFit (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_AutoFormat (
        enum XlRangeAutoFormat Format,
        VARIANT Number,
        VARIANT Font,
        VARIANT Alignment,
        VARIANT Border,
        VARIANT Pattern,
        VARIANT Width,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_AutoOutline (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_BorderAround (
        VARIANT LineStyle,
        enum XlBorderWeight Weight,
        enum XlColorIndex ColorIndex,
        VARIANT Color,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Calculate (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Cells (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Clear (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearContents (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearFormats (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearNotes (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearOutline (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Column (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_ColumnDifferences (
        VARIANT Comparison,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Columns (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_ColumnWidth (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ColumnWidth (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Consolidate (
        VARIANT Sources,
        VARIANT Function,
        VARIANT TopRow,
        VARIANT LeftColumn,
        VARIANT CreateLinks,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Destination,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyFromRecordset (
        IUnknown * Data,
        VARIANT MaxRows,
        VARIANT MaxColumns,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_CreateNames (
        VARIANT Top,
        VARIANT Left,
        VARIANT Bottom,
        VARIANT Right,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CreatePublisher (
        VARIANT Edition,
        enum XlPictureAppearance Appearance,
        VARIANT ContainsPICT,
        VARIANT ContainsBIFF,
        VARIANT ContainsRTF,
        VARIANT ContainsVALU,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_CurrentArray (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_CurrentRegion (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT Destination,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_DataSeries (
        VARIANT Rowcol,
        enum XlDataSeriesType Type,
        enum XlDataSeriesDate Date,
        VARIANT Step,
        VARIANT Stop,
        VARIANT Trend,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT RowIndex,
        VARIANT ColumnIndex,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        VARIANT RowIndex,
        VARIANT ColumnIndex = vtMissing,
        long lcid = 0,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT Shift,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Dependents (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ignorethis (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_DirectDependents (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_DirectPrecedents (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_EditionOptions (
        enum XlEditionType Type,
        enum XlEditionOptionsOption Option,
        VARIANT Name,
        VARIANT Reference,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance ChartSize,
        VARIANT Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_End (
        enum XlDirection Direction,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_EntireColumn (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_EntireRow (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_FillDown (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_FillLeft (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_FillRight (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_FillUp (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Find (
        VARIANT What,
        VARIANT After,
        VARIANT LookIn,
        VARIANT LookAt,
        VARIANT SearchOrder,
        enum XlSearchDirection SearchDirection,
        VARIANT MatchCase,
        VARIANT MatchByte,
        VARIANT SearchFormat,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_FindNext (
        VARIANT After,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_FindPrevious (
        VARIANT After,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaArray (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaArray (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaLabel (
        enum XlFormulaLabel * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaLabel (
        enum XlFormulaLabel RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaHidden (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaHidden (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaLocal (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaLocal (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaR1C1 (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaR1C1 (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaR1C1Local (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaR1C1Local (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_FunctionWizard (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_GoalSeek (
        VARIANT Goal,
        struct Range * ChangingCell,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        VARIANT Start,
        VARIANT End,
        VARIANT By,
        VARIANT Periods,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_HasArray (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_HasFormula (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Hidden (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Hidden (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_IndentLevel (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_IndentLevel (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_InsertIndent (
        long InsertAmount ) = 0;
    virtual HRESULT __stdcall raw_Insert (
        VARIANT Shift,
        VARIANT CopyOrigin,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT RowIndex,
        VARIANT ColumnIndex,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Item (
        VARIANT RowIndex,
        VARIANT ColumnIndex,
        long lcid = 0,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Justify (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ListHeaderRows (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_ListNames (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LocationInTable (
        enum XlLocationInTable * RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Merge (
        VARIANT Across = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_UnMerge ( ) = 0;
    virtual HRESULT __stdcall get_MergeArea (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_MergeCells (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_MergeCells (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_NavigateArrow (
        VARIANT TowardPrecedent,
        VARIANT ArrowNumber,
        VARIANT LinkNumber,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall get_Next (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_NoteText (
        VARIANT Text,
        VARIANT Start,
        VARIANT Length,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormat (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormat (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormatLocal (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormatLocal (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Offset (
        VARIANT RowOffset,
        VARIANT ColumnOffset,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_OutlineLevel (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_OutlineLevel (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PageBreak (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PageBreak (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Parse (
        VARIANT ParseLine,
        VARIANT Destination,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        VARIANT SkipBlanks,
        VARIANT Transpose,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotField (
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotItem (
        struct PivotItem * * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotTable (
        struct PivotTable * * RHS ) = 0;
    virtual HRESULT __stdcall get_Precedents (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_PrefixCharacter (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Previous (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From,
        VARIANT To,
        VARIANT Copies,
        VARIANT Preview,
        VARIANT ActivePrinter,
        VARIANT PrintToFile,
        VARIANT Collate,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview (
        VARIANT EnableChanges,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_QueryTable (
        struct _QueryTable * * RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        VARIANT Cell1,
        VARIANT Cell2,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_RemoveSubtotal (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Replace (
        VARIANT What,
        VARIANT Replacement,
        VARIANT LookAt,
        VARIANT SearchOrder,
        VARIANT MatchCase,
        VARIANT MatchByte,
        VARIANT SearchFormat,
        VARIANT ReplaceFormat,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_Resize (
        VARIANT RowSize,
        VARIANT ColumnSize,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Row (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_RowDifferences (
        VARIANT Comparison,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_RowHeight (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_RowHeight (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Rows (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Run (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Show (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ShowDependents (
        VARIANT Remove,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ShowDetail (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowDetail (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_ShowErrors (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ShowPrecedents (
        VARIANT Remove,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ShrinkToFit (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ShrinkToFit (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Sort (
        VARIANT Key1,
        enum XlSortOrder Order1,
        VARIANT Key2,
        VARIANT Type,
        enum XlSortOrder Order2,
        VARIANT Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        VARIANT OrderCustom,
        VARIANT MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortMethod SortMethod,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SortSpecial (
        enum XlSortMethod SortMethod,
        VARIANT Key1,
        enum XlSortOrder Order1,
        VARIANT Type,
        VARIANT Key2,
        enum XlSortOrder Order2,
        VARIANT Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        VARIANT OrderCustom,
        VARIANT MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_SoundNote (
        struct SoundNote * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SpecialCells (
        enum XlCellType Type,
        VARIANT Value,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Style (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Style (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_SubscribeTo (
        BSTR Edition,
        enum XlSubscribeToFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Subtotal (
        long GroupBy,
        enum XlConsolidationFunction Function,
        VARIANT TotalList,
        VARIANT Replace,
        VARIANT PageBreaks,
        enum XlSummaryRow SummaryBelowData,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Summary (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Table (
        VARIANT RowInput,
        VARIANT ColumnInput,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_TextToColumns (
        VARIANT Destination,
        enum XlTextParsingType DataType,
        enum XlTextQualifier TextQualifier,
        VARIANT ConsecutiveDelimiter,
        VARIANT Tab,
        VARIANT Semicolon,
        VARIANT Comma,
        VARIANT Space,
        VARIANT Other,
        VARIANT OtherChar,
        VARIANT FieldInfo,
        VARIANT DecimalSeparator,
        VARIANT ThousandsSeparator,
        VARIANT TrailingMinusNumbers,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Ungroup (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_UseStandardHeight (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_UseStandardHeight (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_UseStandardWidth (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_UseStandardWidth (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Validation (
        struct Validation * * RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT RangeValueDataType,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        VARIANT RangeValueDataType,
        long lcid = 0,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Value2 (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Value2 (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Worksheet (
        struct _Worksheet * * RHS ) = 0;
    virtual HRESULT __stdcall get_WrapText (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_WrapText (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_AddComment (
        VARIANT Text,
        struct Comment * * RHS ) = 0;
    virtual HRESULT __stdcall get_Comment (
        struct Comment * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearComments ( ) = 0;
    virtual HRESULT __stdcall get_Phonetic (
        struct Phonetic * * RHS ) = 0;
    virtual HRESULT __stdcall get_FormatConditions (
        struct FormatConditions * * RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Hyperlinks (
        struct Hyperlinks * * RHS ) = 0;
    virtual HRESULT __stdcall get_Phonetics (
        struct Phonetics * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SetPhonetic ( ) = 0;
    virtual HRESULT __stdcall get_ID (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ID (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From,
        VARIANT To,
        VARIANT Copies,
        VARIANT Preview,
        VARIANT ActivePrinter,
        VARIANT PrintToFile,
        VARIANT Collate,
        VARIANT PrToFileName,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotCell (
        struct PivotCell * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dirty ( ) = 0;
    virtual HRESULT __stdcall get_Errors (
        struct Errors * * RHS ) = 0;
    virtual HRESULT __stdcall get_SmartTags (
        struct SmartTags * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Speak (
        VARIANT SpeakDirection = vtMissing,
        VARIANT SpeakFormulas = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        VARIANT SkipBlanks,
        VARIANT Transpose,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowEdit (
        VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("0002440f-0001-0000-c000-000000000046"))
IChartEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Resize ( );
    HRESULT MouseDown (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseUp (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseMove (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT BeforeRightClick (
        VARIANT_BOOL * Cancel );
    HRESULT DragPlot ( );
    HRESULT DragOver ( );
    HRESULT BeforeDoubleClick (
        long ElementID,
        long Arg1,
        long Arg2,
        VARIANT_BOOL * Cancel );
    HRESULT Select (
        long ElementID,
        long Arg1,
        long Arg2 );
    HRESULT SeriesChange (
        long SeriesIndex,
        long PointIndex );
    HRESULT Calculate ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
    virtual HRESULT __stdcall raw_Resize ( ) = 0;
    virtual HRESULT __stdcall raw_MouseDown (
        long Button,
        long Shift,
        long x,
        long y ) = 0;
    virtual HRESULT __stdcall raw_MouseUp (
        long Button,
        long Shift,
        long x,
        long y ) = 0;
    virtual HRESULT __stdcall raw_MouseMove (
        long Button,
        long Shift,
        long x,
        long y ) = 0;
    virtual HRESULT __stdcall raw_BeforeRightClick (
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_DragPlot ( ) = 0;
    virtual HRESULT __stdcall raw_DragOver ( ) = 0;
    virtual HRESULT __stdcall raw_BeforeDoubleClick (
        long ElementID,
        long Arg1,
        long Arg2,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_Select (
        long ElementID,
        long Arg1,
        long Arg2 ) = 0;
    virtual HRESULT __stdcall raw_SeriesChange (
        long SeriesIndex,
        long PointIndex ) = 0;
    virtual HRESULT __stdcall raw_Calculate ( ) = 0;
};

struct __declspec(uuid("000208d6-0000-0000-c000-000000000046"))
_Chart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetArea3DGroup))
    ChartGroupPtr Area3DGroup[];
    __declspec(property(get=GetBar3DGroup))
    ChartGroupPtr Bar3DGroup[];
    __declspec(property(get=GetColumn3DGroup))
    ChartGroupPtr Column3DGroup[];
    __declspec(property(get=GetLine3DGroup))
    ChartGroupPtr Line3DGroup[];
    __declspec(property(get=GetPie3DGroup))
    ChartGroupPtr Pie3DGroup[];
    __declspec(property(get=GetSurfaceGroup))
    ChartGroupPtr SurfaceGroup[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetDepthPercent,put=PutDepthPercent))
    long DepthPercent[];
    __declspec(property(get=GetElevation,put=PutElevation))
    long Elevation[];
    __declspec(property(get=GetGapDepth,put=PutGapDepth))
    long GapDepth[];
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetHasAxis,put=PutHasAxis))
    _variant_t HasAxis[][][];
    __declspec(property(get=GetHasLegend,put=PutHasLegend))
    VARIANT_BOOL HasLegend[];
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle[];
    __declspec(property(get=GetHeightPercent,put=PutHeightPercent))
    long HeightPercent[];
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    long Perspective[];
    __declspec(property(get=GetRightAngleAxes,put=PutRightAngleAxes))
    _variant_t RightAngleAxes[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetRotation,put=PutRotation))
    _variant_t Rotation[];
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetPivotLayout))
    PivotLayoutPtr PivotLayout;
    __declspec(property(get=GetHasPivotFields,put=PutHasPivotFields))
    VARIANT_BOOL HasPivotFields;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetDataTable))
    DataTablePtr DataTable;
    __declspec(property(get=GetHasDataTable,put=PutHasDataTable))
    VARIANT_BOOL HasDataTable;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetShowWindow,put=PutShowWindow))
    VARIANT_BOOL ShowWindow;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetChartTitle))
    ChartTitlePtr ChartTitle[];
    __declspec(property(get=GetCorners))
    CornersPtr Corners[];
    __declspec(property(get=GetFloor))
    FloorPtr Floor[];
    __declspec(property(get=GetLegend))
    LegendPtr Legend[];
    __declspec(property(get=GetPlotArea))
    PlotAreaPtr PlotArea[];
    __declspec(property(get=GetWalls))
    WallsPtr Walls[];
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetChartArea))
    ChartAreaPtr ChartArea[];
    __declspec(property(get=GetProtectFormatting,put=PutProtectFormatting))
    VARIANT_BOOL ProtectFormatting;
    __declspec(property(get=GetProtectData,put=PutProtectData))
    VARIANT_BOOL ProtectData;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPlotVisibleOnly,put=PutPlotVisibleOnly))
    VARIANT_BOOL PlotVisibleOnly[];
    __declspec(property(get=GetDisplayBlanksAs,put=PutDisplayBlanksAs))
    enum XlDisplayBlanksAs DisplayBlanksAs[];
    __declspec(property(get=GetSizeWithWindow,put=PutSizeWithWindow))
    VARIANT_BOOL SizeWithWindow[];
    __declspec(property(get=GetPlotBy,put=PutPlotBy))
    enum XlRowCol PlotBy;
    __declspec(property(get=GetProtectGoalSeek,put=PutProtectGoalSeek))
    VARIANT_BOOL ProtectGoalSeek;
    __declspec(property(get=GetProtectSelection,put=PutProtectSelection))
    VARIANT_BOOL ProtectSelection;
    __declspec(property(get=GetWallsAndGridlines2D,put=PutWallsAndGridlines2D))
    VARIANT_BOOL WallsAndGridlines2D[];
    __declspec(property(get=GetAutoScaling,put=PutAutoScaling))
    VARIANT_BOOL AutoScaling[];
    __declspec(property(get=GetType,put=PutType))
    long Type[];
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    HRESULT _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        long lcid = 0 );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetArea3DGroup (
        long lcid = 0 );
    IDispatchPtr AreaGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT AutoFormat (
        long Gallery,
        const _variant_t & Format = vtMissing );
    VARIANT_BOOL GetAutoScaling (
        long lcid = 0 );
    void PutAutoScaling (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Axes (
        const _variant_t & Type,
        enum XlAxisGroup AxisGroup,
        long lcid = 0 );
    HRESULT SetBackgroundPicture (
        _bstr_t Filename );
    ChartGroupPtr GetBar3DGroup (
        long lcid = 0 );
    IDispatchPtr BarGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartAreaPtr GetChartArea (
        long lcid = 0 );
    IDispatchPtr ChartGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartTitlePtr GetChartTitle (
        long lcid = 0 );
    HRESULT ChartWizard (
        const _variant_t & Source = vtMissing,
        const _variant_t & Gallery = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & PlotBy = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & HasLegend = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & CategoryTitle = vtMissing,
        const _variant_t & ValueTitle = vtMissing,
        const _variant_t & ExtraTitle = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetColumn3DGroup (
        long lcid = 0 );
    IDispatchPtr ColumnGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        enum XlPictureAppearance Size,
        long lcid = 0 );
    CornersPtr GetCorners (
        long lcid = 0 );
    HRESULT CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance Size,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing,
        long lcid = 0 );
    DataTablePtr GetDataTable ( );
    long GetDepthPercent (
        long lcid = 0 );
    void PutDepthPercent (
        long lcid,
        long RHS );
    HRESULT Deselect (
        long lcid = 0 );
    enum XlDisplayBlanksAs GetDisplayBlanksAs (
        long lcid = 0 );
    void PutDisplayBlanksAs (
        long lcid,
        enum XlDisplayBlanksAs RHS );
    IDispatchPtr DoughnutGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetElevation (
        long lcid = 0 );
    void PutElevation (
        long lcid,
        long RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    FloorPtr GetFloor (
        long lcid = 0 );
    long GetGapDepth (
        long lcid = 0 );
    void PutGapDepth (
        long lcid,
        long RHS );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _variant_t GetHasAxis (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    void PutHasAxis (
        const _variant_t & Index1,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    VARIANT_BOOL GetHasDataTable ( );
    void PutHasDataTable (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasLegend (
        long lcid = 0 );
    void PutHasLegend (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasTitle (
        long lcid = 0 );
    void PutHasTitle (
        long lcid,
        VARIANT_BOOL RHS );
    long GetHeightPercent (
        long lcid = 0 );
    void PutHeightPercent (
        long lcid,
        long RHS );
    HyperlinksPtr GetHyperlinks ( );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    LegendPtr GetLegend (
        long lcid = 0 );
    ChartGroupPtr GetLine3DGroup (
        long lcid = 0 );
    IDispatchPtr LineGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _ChartPtr Location (
        enum XlChartLocation Where,
        const _variant_t & Name = vtMissing );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    long GetPerspective (
        long lcid = 0 );
    void PutPerspective (
        long lcid,
        long RHS );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetPie3DGroup (
        long lcid = 0 );
    IDispatchPtr PieGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    PlotAreaPtr GetPlotArea (
        long lcid = 0 );
    VARIANT_BOOL GetPlotVisibleOnly (
        long lcid = 0 );
    void PutPlotVisibleOnly (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr RadarGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _variant_t GetRightAngleAxes (
        long lcid = 0 );
    void PutRightAngleAxes (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetRotation (
        long lcid = 0 );
    void PutRotation (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetSizeWithWindow (
        long lcid = 0 );
    void PutSizeWithWindow (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowWindow ( );
    void PutShowWindow (
        VARIANT_BOOL RHS );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetSubType (
        long lcid = 0 );
    void PutSubType (
        long lcid,
        long RHS );
    ChartGroupPtr GetSurfaceGroup (
        long lcid = 0 );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetType (
        long lcid = 0 );
    void PutType (
        long lcid,
        long RHS );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType RHS );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType,
        const _variant_t & TypeName = vtMissing );
    WallsPtr GetWalls (
        long lcid = 0 );
    VARIANT_BOOL GetWallsAndGridlines2D (
        long lcid = 0 );
    void PutWallsAndGridlines2D (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr XYGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape RHS );
    enum XlRowCol GetPlotBy ( );
    void PutPlotBy (
        enum XlRowCol RHS );
    HRESULT CopyChartBuild ( );
    VARIANT_BOOL GetProtectFormatting ( );
    void PutProtectFormatting (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectData ( );
    void PutProtectData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectGoalSeek ( );
    void PutProtectGoalSeek (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectSelection ( );
    void PutProtectSelection (
        VARIANT_BOOL RHS );
    HRESULT GetChartElement (
        long x,
        long y,
        long * ElementID,
        long * Arg1,
        long * Arg2 );
    HRESULT SetSourceData (
        struct Range * Source,
        const _variant_t & PlotBy = vtMissing );
    VARIANT_BOOL Export (
        _bstr_t Filename,
        const _variant_t & FilterName = vtMissing,
        const _variant_t & Interactive = vtMissing );
    HRESULT Refresh ( );
    PivotLayoutPtr GetPivotLayout ( );
    VARIANT_BOOL GetHasPivotFields ( );
    void PutHasPivotFields (
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing,
        long lcid = 0 );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_CodeName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get__CodeName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put__CodeName (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Next (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_OnDoubleClick (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnDoubleClick (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetActivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetActivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetDeactivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetDeactivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PageSetup (
        struct PageSetup * * RHS ) = 0;
    virtual HRESULT __stdcall get_Previous (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview (
        VARIANT EnableChanges = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw__Protect (
        VARIANT Password = vtMissing,
        VARIANT DrawingObjects = vtMissing,
        VARIANT Contents = vtMissing,
        VARIANT Scenarios = vtMissing,
        VARIANT UserInterfaceOnly = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_ProtectContents (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectDrawingObjects (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectionMode (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual void __stdcall _Dummy23 ( ) = 0;
    virtual HRESULT __stdcall raw__SaveAs (
        BSTR Filename,
        VARIANT FileFormat = vtMissing,
        VARIANT Password = vtMissing,
        VARIANT WriteResPassword = vtMissing,
        VARIANT ReadOnlyRecommended = vtMissing,
        VARIANT CreateBackup = vtMissing,
        VARIANT AddToMru = vtMissing,
        VARIANT TextCodepage = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Unprotect (
        VARIANT Password = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Visible (
        long lcid,
        enum XlSheetVisibility * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        long lcid,
        enum XlSheetVisibility RHS ) = 0;
    virtual HRESULT __stdcall get_Shapes (
        struct Shapes * * RHS ) = 0;
    virtual HRESULT __stdcall raw__ApplyDataLabels (
        enum XlDataLabelsType Type,
        VARIANT LegendKey = vtMissing,
        VARIANT AutoText = vtMissing,
        VARIANT HasLeaderLines = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Arcs (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Area3DGroup (
        long lcid,
        struct ChartGroup * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AreaGroups (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AutoFormat (
        long Gallery,
        VARIANT Format = vtMissing ) = 0;
    virtual HRESULT __stdcall get_AutoScaling (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaling (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Axes (
        VARIANT Type,
        enum XlAxisGroup AxisGroup,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SetBackgroundPicture (
        BSTR Filename ) = 0;
    virtual HRESULT __stdcall get_Bar3DGroup (
        long lcid,
        struct ChartGroup * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BarGroups (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Buttons (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_ChartArea (
        long lcid,
        struct ChartArea * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ChartGroups (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ChartObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_ChartTitle (
        long lcid,
        struct ChartTitle * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ChartWizard (
        VARIANT Source = vtMissing,
        VARIANT Gallery = vtMissing,
        VARIANT Format = vtMissing,
        VARIANT PlotBy = vtMissing,
        VARIANT CategoryLabels = vtMissing,
        VARIANT SeriesLabels = vtMissing,
        VARIANT HasLegend = vtMissing,
        VARIANT Title = vtMissing,
        VARIANT CategoryTitle = vtMissing,
        VARIANT ValueTitle = vtMissing,
        VARIANT ExtraTitle = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_CheckBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary = vtMissing,
        VARIANT IgnoreUppercase = vtMissing,
        VARIANT AlwaysSuggest = vtMissing,
        VARIANT SpellLang = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Column3DGroup (
        long lcid,
        struct ChartGroup * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ColumnGroups (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        enum XlPictureAppearance Size,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Corners (
        long lcid,
        struct Corners * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CreatePublisher (
        VARIANT Edition,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance Size,
        VARIANT ContainsPICT = vtMissing,
        VARIANT ContainsBIFF = vtMissing,
        VARIANT ContainsRTF = vtMissing,
        VARIANT ContainsVALU = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_DataTable (
        struct DataTable * * RHS ) = 0;
    virtual HRESULT __stdcall get_DepthPercent (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_DepthPercent (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Deselect (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_DisplayBlanksAs (
        long lcid,
        enum XlDisplayBlanksAs * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayBlanksAs (
        long lcid,
        enum XlDisplayBlanksAs RHS ) = 0;
    virtual HRESULT __stdcall raw_DoughnutGroups (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Drawings (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_DrawingObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_DropDowns (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Elevation (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Elevation (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Evaluate (
        VARIANT Name,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__Evaluate (
        VARIANT Name,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Floor (
        long lcid,
        struct Floor * * RHS ) = 0;
    virtual HRESULT __stdcall get_GapDepth (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_GapDepth (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_GroupBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_GroupObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_HasAxis (
        VARIANT Index1,
        VARIANT Index2,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HasAxis (
        VARIANT Index1,
        VARIANT Index2 = vtMissing,
        long lcid = 0,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_HasDataTable (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasDataTable (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasLegend (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasLegend (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasTitle (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasTitle (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HeightPercent (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_HeightPercent (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Hyperlinks (
        struct Hyperlinks * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Labels (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Legend (
        long lcid,
        struct Legend * * RHS ) = 0;
    virtual HRESULT __stdcall get_Line3DGroup (
        long lcid,
        struct ChartGroup * * RHS ) = 0;
    virtual HRESULT __stdcall raw_LineGroups (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Lines (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ListBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Location (
        enum XlChartLocation Where,
        VARIANT Name,
        struct _Chart * * RHS ) = 0;
    virtual HRESULT __stdcall raw_OLEObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_OptionButtons (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Ovals (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Paste (
        VARIANT Type = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Perspective (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Perspective (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Pictures (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Pie3DGroup (
        long lcid,
        struct ChartGroup * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PieGroups (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_PlotArea (
        long lcid,
        struct PlotArea * * RHS ) = 0;
    virtual HRESULT __stdcall get_PlotVisibleOnly (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PlotVisibleOnly (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_RadarGroups (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Rectangles (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_RightAngleAxes (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_RightAngleAxes (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_ScrollBars (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SeriesCollection (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_SizeWithWindow (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SizeWithWindow (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowWindow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowWindow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Spinners (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_SubType (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SubType (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_SurfaceGroup (
        long lcid,
        struct ChartGroup * * RHS ) = 0;
    virtual HRESULT __stdcall raw_TextBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Type (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_ChartType (
        enum XlChartType * RHS ) = 0;
    virtual HRESULT __stdcall put_ChartType (
        enum XlChartType RHS ) = 0;
    virtual HRESULT __stdcall raw_ApplyCustomType (
        enum XlChartType ChartType,
        VARIANT TypeName = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Walls (
        long lcid,
        struct Walls * * RHS ) = 0;
    virtual HRESULT __stdcall get_WallsAndGridlines2D (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_WallsAndGridlines2D (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_XYGroups (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BarShape (
        enum XlBarShape * RHS ) = 0;
    virtual HRESULT __stdcall put_BarShape (
        enum XlBarShape RHS ) = 0;
    virtual HRESULT __stdcall get_PlotBy (
        enum XlRowCol * RHS ) = 0;
    virtual HRESULT __stdcall put_PlotBy (
        enum XlRowCol RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyChartBuild ( ) = 0;
    virtual HRESULT __stdcall get_ProtectFormatting (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ProtectFormatting (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectData (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ProtectData (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectGoalSeek (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ProtectGoalSeek (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectSelection (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ProtectSelection (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_GetChartElement (
        long x,
        long y,
        long * ElementID,
        long * Arg1,
        long * Arg2 ) = 0;
    virtual HRESULT __stdcall raw_SetSourceData (
        struct Range * Source,
        VARIANT PlotBy = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Export (
        BSTR Filename,
        VARIANT FilterName,
        VARIANT Interactive,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Refresh ( ) = 0;
    virtual HRESULT __stdcall get_PivotLayout (
        struct PivotLayout * * RHS ) = 0;
    virtual HRESULT __stdcall get_HasPivotFields (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasPivotFields (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Scripts (
        struct Office::Scripts * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        VARIANT PrToFileName = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Tab (
        struct Tab * * RHS ) = 0;
    virtual HRESULT __stdcall get_MailEnvelope (
        struct Office::IMsoEnvelopeVB * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ApplyDataLabels (
        enum XlDataLabelsType Type,
        VARIANT LegendKey = vtMissing,
        VARIANT AutoText = vtMissing,
        VARIANT HasLeaderLines = vtMissing,
        VARIANT ShowSeriesName = vtMissing,
        VARIANT ShowCategoryName = vtMissing,
        VARIANT ShowValue = vtMissing,
        VARIANT ShowPercentage = vtMissing,
        VARIANT ShowBubbleSize = vtMissing,
        VARIANT Separator = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_SaveAs (
        BSTR Filename,
        VARIANT FileFormat = vtMissing,
        VARIANT Password = vtMissing,
        VARIANT WriteResPassword = vtMissing,
        VARIANT ReadOnlyRecommended = vtMissing,
        VARIANT CreateBackup = vtMissing,
        VARIANT AddToMru = vtMissing,
        VARIANT TextCodepage = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        VARIANT Local = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Protect (
        VARIANT Password = vtMissing,
        VARIANT DrawingObjects = vtMissing,
        VARIANT Contents = vtMissing,
        VARIANT Scenarios = vtMissing,
        VARIANT UserInterfaceOnly = vtMissing ) = 0;
};

struct __declspec(uuid("000208d7-0000-0000-c000-000000000046"))
Sheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type,
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Before,
        VARIANT After,
        VARIANT Count,
        VARIANT Type,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview (
        VARIANT EnableChanges = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_HPageBreaks (
        struct HPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_VPageBreaks (
        struct VPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        VARIANT PrToFileName = vtMissing,
        long lcid = 0 ) = 0;
};

struct __declspec(uuid("00024402-0001-0000-c000-000000000046"))
IVPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak RHS );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct _Worksheet * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_DragOff (
        enum XlDirection Direction,
        long RegionIndex ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum XlPageBreak * RHS ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum XlPageBreak RHS ) = 0;
    virtual HRESULT __stdcall get_Extent (
        enum XlPageBreakExtent * RHS ) = 0;
    virtual HRESULT __stdcall get_Location (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall putref_Location (
        struct Range * RHS ) = 0;
};

struct __declspec(uuid("00024401-0001-0000-c000-000000000046"))
IHPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak RHS );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct _Worksheet * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_DragOff (
        enum XlDirection Direction,
        long RegionIndex ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum XlPageBreak * RHS ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum XlPageBreak RHS ) = 0;
    virtual HRESULT __stdcall get_Extent (
        enum XlPageBreakExtent * RHS ) = 0;
    virtual HRESULT __stdcall get_Location (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall putref_Location (
        struct Range * RHS ) = 0;
};

struct __declspec(uuid("00024404-0001-0000-c000-000000000046"))
IHPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    HPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HPageBreakPtr GetItem (
        long Index );
    HPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HPageBreakPtr Add (
        IDispatch * Before );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        long Index,
        struct HPageBreak * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        struct HPageBreak * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        IDispatch * Before,
        struct HPageBreak * * RHS ) = 0;
};

struct __declspec(uuid("00024405-0001-0000-c000-000000000046"))
IVPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    VPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    VPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    VPageBreakPtr GetItem (
        long Index );
    VPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VPageBreakPtr Add (
        IDispatch * Before );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        long Index,
        struct VPageBreak * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        struct VPageBreak * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        IDispatch * Before,
        struct VPageBreak * * RHS ) = 0;
};

struct __declspec(uuid("00024407-0001-0000-c000-000000000046"))
IRecentFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    long GetIndex ( );
    _WorkbookPtr Open ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Open (
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024406-0001-0000-c000-000000000046"))
IRecentFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RecentFilePtr _Default[];
    __declspec(property(get=GetItem))
    RecentFilePtr Item[];
    __declspec(property(get=GetMaximum,put=PutMaximum))
    long Maximum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetMaximum ( );
    void PutMaximum (
        long RHS );
    long GetCount ( );
    RecentFilePtr GetItem (
        long Index );
    RecentFilePtr Get_Default (
        long Index );
    RecentFilePtr Add (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Maximum (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Maximum (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        long Index,
        struct RecentFile * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        struct RecentFile * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        struct RecentFile * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024411-0001-0000-c000-000000000046"))
IDocEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SelectionChange (
        struct Range * Target );
    HRESULT BeforeDoubleClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT BeforeRightClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Calculate ( );
    HRESULT Change (
        struct Range * Target );
    HRESULT FollowHyperlink (
        struct Hyperlink * Target );
    HRESULT PivotTableUpdate (
        struct PivotTable * Target );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_SelectionChange (
        struct Range * Target ) = 0;
    virtual HRESULT __stdcall raw_BeforeDoubleClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_BeforeRightClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
    virtual HRESULT __stdcall raw_Calculate ( ) = 0;
    virtual HRESULT __stdcall raw_Change (
        struct Range * Target ) = 0;
    virtual HRESULT __stdcall raw_FollowHyperlink (
        struct Hyperlink * Target ) = 0;
    virtual HRESULT __stdcall raw_PivotTableUpdate (
        struct PivotTable * Target ) = 0;
};

struct __declspec(uuid("000208d8-0000-0000-c000-000000000046"))
_Worksheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetConsolidationFunction))
    enum XlConsolidationFunction ConsolidationFunction[];
    __declspec(property(get=GetConsolidationOptions))
    _variant_t ConsolidationOptions[];
    __declspec(property(get=GetConsolidationSources))
    _variant_t ConsolidationSources[];
    __declspec(property(get=GetAutoFilterMode,put=PutAutoFilterMode))
    VARIANT_BOOL AutoFilterMode[];
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetFilterMode))
    VARIANT_BOOL FilterMode[];
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetCustomProperties))
    CustomPropertiesPtr CustomProperties;
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter[];
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining[];
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetProtection))
    ProtectionPtr Protection;
    __declspec(property(get=GetTransitionExpEval,put=PutTransitionExpEval))
    VARIANT_BOOL TransitionExpEval[];
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios[];
    __declspec(property(get=GetOnCalculate,put=PutOnCalculate))
    _bstr_t OnCalculate[];
    __declspec(property(get=GetTransitionFormEntry,put=PutTransitionFormEntry))
    VARIANT_BOOL TransitionFormEntry[];
    __declspec(property(get=GetOnEntry,put=PutOnEntry))
    _bstr_t OnEntry[];
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetCircularReference))
    RangePtr CircularReference[];
    __declspec(property(get=GetOnData,put=PutOnData))
    _bstr_t OnData[];
    __declspec(property(get=GetStandardHeight))
    double StandardHeight[];
    __declspec(property(get=GetUsedRange))
    RangePtr UsedRange[];
    __declspec(property(get=GetStandardWidth,put=PutStandardWidth))
    double StandardWidth[];
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft[];
    __declspec(property(get=GetOutline))
    OutlinePtr Outline;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=GetType))
    enum XlSheetType Type[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    VARIANT_BOOL GetProtectScenarios (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    VARIANT_BOOL GetTransitionExpEval (
        long lcid = 0 );
    void PutTransitionExpEval (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetAutoFilterMode (
        long lcid = 0 );
    void PutAutoFilterMode (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SetBackgroundPicture (
        _bstr_t Filename );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Calculate (
        long lcid = 0 );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL RHS );
    RangePtr GetCells ( );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    RangePtr GetCircularReference (
        long lcid = 0 );
    HRESULT ClearArrows (
        long lcid = 0 );
    RangePtr GetColumns ( );
    enum XlConsolidationFunction GetConsolidationFunction (
        long lcid = 0 );
    _variant_t GetConsolidationOptions (
        long lcid = 0 );
    _variant_t GetConsolidationSources (
        long lcid = 0 );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks (
        long lcid = 0 );
    void PutDisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoFilter (
        long lcid = 0 );
    void PutEnableAutoFilter (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection RHS );
    VARIANT_BOOL GetEnableOutlining (
        long lcid = 0 );
    void PutEnableOutlining (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnablePivotTable (
        long lcid = 0 );
    void PutEnablePivotTable (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    VARIANT_BOOL GetFilterMode (
        long lcid = 0 );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetOnCalculate (
        long lcid = 0 );
    void PutOnCalculate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnData (
        long lcid = 0 );
    void PutOnData (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnEntry (
        long lcid = 0 );
    void PutOnEntry (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    OutlinePtr GetOutline ( );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing,
        long lcid = 0 );
    HRESULT _PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        long lcid = 0 );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr PivotTables (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    PivotTablePtr PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing,
        long lcid = 0 );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    RangePtr GetRows ( );
    IDispatchPtr Scenarios (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT ShowAllData (
        long lcid = 0 );
    HRESULT ShowDataForm (
        long lcid = 0 );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    double GetStandardHeight (
        long lcid = 0 );
    double GetStandardWidth (
        long lcid = 0 );
    void PutStandardWidth (
        long lcid,
        double RHS );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetTransitionFormEntry (
        long lcid = 0 );
    void PutTransitionFormEntry (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlSheetType GetType (
        long lcid = 0 );
    RangePtr GetUsedRange (
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL RHS );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft (
        long lcid = 0 );
    void Put_DisplayRightToLeft (
        long lcid,
        long RHS );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft (
        long lcid = 0 );
    void PutDisplayRightToLeft (
        long lcid,
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing,
        long lcid = 0 );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    CustomPropertiesPtr GetCustomProperties ( );
    SmartTagsPtr GetSmartTags ( );
    ProtectionPtr GetProtection ( );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & NoHTMLFormatting = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        const _variant_t & AllowFormattingCells = vtMissing,
        const _variant_t & AllowFormattingColumns = vtMissing,
        const _variant_t & AllowFormattingRows = vtMissing,
        const _variant_t & AllowInsertingColumns = vtMissing,
        const _variant_t & AllowInsertingRows = vtMissing,
        const _variant_t & AllowInsertingHyperlinks = vtMissing,
        const _variant_t & AllowDeletingColumns = vtMissing,
        const _variant_t & AllowDeletingRows = vtMissing,
        const _variant_t & AllowSorting = vtMissing,
        const _variant_t & AllowFiltering = vtMissing,
        const _variant_t & AllowUsingPivotTables = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_CodeName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get__CodeName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put__CodeName (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Next (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_OnDoubleClick (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnDoubleClick (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetActivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetActivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetDeactivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetDeactivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PageSetup (
        struct PageSetup * * RHS ) = 0;
    virtual HRESULT __stdcall get_Previous (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview (
        VARIANT EnableChanges = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw__Protect (
        VARIANT Password = vtMissing,
        VARIANT DrawingObjects = vtMissing,
        VARIANT Contents = vtMissing,
        VARIANT Scenarios = vtMissing,
        VARIANT UserInterfaceOnly = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_ProtectContents (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectDrawingObjects (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectionMode (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectScenarios (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw__SaveAs (
        BSTR Filename,
        VARIANT FileFormat = vtMissing,
        VARIANT Password = vtMissing,
        VARIANT WriteResPassword = vtMissing,
        VARIANT ReadOnlyRecommended = vtMissing,
        VARIANT CreateBackup = vtMissing,
        VARIANT AddToMru = vtMissing,
        VARIANT TextCodepage = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Unprotect (
        VARIANT Password = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Visible (
        long lcid,
        enum XlSheetVisibility * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        long lcid,
        enum XlSheetVisibility RHS ) = 0;
    virtual HRESULT __stdcall get_Shapes (
        struct Shapes * * RHS ) = 0;
    virtual HRESULT __stdcall get_TransitionExpEval (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TransitionExpEval (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Arcs (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoFilterMode (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoFilterMode (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_SetBackgroundPicture (
        BSTR Filename ) = 0;
    virtual HRESULT __stdcall raw_Buttons (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Calculate (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_EnableCalculation (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableCalculation (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Cells (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ChartObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary = vtMissing,
        VARIANT IgnoreUppercase = vtMissing,
        VARIANT AlwaysSuggest = vtMissing,
        VARIANT SpellLang = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_CircularReference (
        long lcid,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearArrows (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Columns (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_ConsolidationFunction (
        long lcid,
        enum XlConsolidationFunction * RHS ) = 0;
    virtual HRESULT __stdcall get_ConsolidationOptions (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ConsolidationSources (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Drawings (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_DrawingObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_DropDowns (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_EnableAutoFilter (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableAutoFilter (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableSelection (
        enum XlEnableSelection * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableSelection (
        enum XlEnableSelection RHS ) = 0;
    virtual HRESULT __stdcall get_EnableOutlining (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableOutlining (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnablePivotTable (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnablePivotTable (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Evaluate (
        VARIANT Name,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__Evaluate (
        VARIANT Name,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_FilterMode (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_ResetAllPageBreaks ( ) = 0;
    virtual HRESULT __stdcall raw_GroupBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_GroupObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Labels (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Lines (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ListBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Names (
        struct Names * * RHS ) = 0;
    virtual HRESULT __stdcall raw_OLEObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_OnCalculate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnCalculate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnData (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnData (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnEntry (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnEntry (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_OptionButtons (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Outline (
        struct Outline * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Ovals (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Paste (
        VARIANT Destination = vtMissing,
        VARIANT Link = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw__PasteSpecial (
        VARIANT Format = vtMissing,
        VARIANT Link = vtMissing,
        VARIANT DisplayAsIcon = vtMissing,
        VARIANT IconFileName = vtMissing,
        VARIANT IconIndex = vtMissing,
        VARIANT IconLabel = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Pictures (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PivotTables (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PivotTableWizard (
        VARIANT SourceType,
        VARIANT SourceData,
        VARIANT TableDestination,
        VARIANT TableName,
        VARIANT RowGrand,
        VARIANT ColumnGrand,
        VARIANT SaveData,
        VARIANT HasAutoFormat,
        VARIANT AutoPage,
        VARIANT Reserved,
        VARIANT BackgroundQuery,
        VARIANT OptimizeCache,
        VARIANT PageFieldOrder,
        VARIANT PageFieldWrapCount,
        VARIANT ReadData,
        VARIANT Connection,
        long lcid,
        struct PivotTable * * RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        VARIANT Cell1,
        VARIANT Cell2,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Rectangles (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Rows (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Scenarios (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_ScrollArea (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ScrollArea (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_ScrollBars (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ShowAllData (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_ShowDataForm (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Spinners (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_StandardHeight (
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_StandardWidth (
        long lcid,
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_StandardWidth (
        long lcid,
        double RHS ) = 0;
    virtual HRESULT __stdcall raw_TextBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_TransitionFormEntry (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TransitionFormEntry (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        long lcid,
        enum XlSheetType * RHS ) = 0;
    virtual HRESULT __stdcall get_UsedRange (
        long lcid,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_HPageBreaks (
        struct HPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_VPageBreaks (
        struct VPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_QueryTables (
        struct QueryTables * * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayPageBreaks (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayPageBreaks (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Comments (
        struct Comments * * RHS ) = 0;
    virtual HRESULT __stdcall get_Hyperlinks (
        struct Hyperlinks * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearCircles ( ) = 0;
    virtual HRESULT __stdcall raw_CircleInvalid ( ) = 0;
    virtual HRESULT __stdcall get__DisplayRightToLeft (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__DisplayRightToLeft (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_AutoFilter (
        struct AutoFilter * * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayRightToLeft (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayRightToLeft (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Scripts (
        struct Office::Scripts * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        VARIANT PrToFileName = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw__CheckSpelling (
        VARIANT CustomDictionary = vtMissing,
        VARIANT IgnoreUppercase = vtMissing,
        VARIANT AlwaysSuggest = vtMissing,
        VARIANT SpellLang = vtMissing,
        VARIANT IgnoreFinalYaa = vtMissing,
        VARIANT SpellScript = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Tab (
        struct Tab * * RHS ) = 0;
    virtual HRESULT __stdcall get_MailEnvelope (
        struct Office::IMsoEnvelopeVB * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SaveAs (
        BSTR Filename,
        VARIANT FileFormat = vtMissing,
        VARIANT Password = vtMissing,
        VARIANT WriteResPassword = vtMissing,
        VARIANT ReadOnlyRecommended = vtMissing,
        VARIANT CreateBackup = vtMissing,
        VARIANT AddToMru = vtMissing,
        VARIANT TextCodepage = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        VARIANT Local = vtMissing ) = 0;
    virtual HRESULT __stdcall get_CustomProperties (
        struct CustomProperties * * RHS ) = 0;
    virtual HRESULT __stdcall get_SmartTags (
        struct SmartTags * * RHS ) = 0;
    virtual HRESULT __stdcall get_Protection (
        struct Protection * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PasteSpecial (
        VARIANT Format = vtMissing,
        VARIANT Link = vtMissing,
        VARIANT DisplayAsIcon = vtMissing,
        VARIANT IconFileName = vtMissing,
        VARIANT IconIndex = vtMissing,
        VARIANT IconLabel = vtMissing,
        VARIANT NoHTMLFormatting = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Protect (
        VARIANT Password = vtMissing,
        VARIANT DrawingObjects = vtMissing,
        VARIANT Contents = vtMissing,
        VARIANT Scenarios = vtMissing,
        VARIANT UserInterfaceOnly = vtMissing,
        VARIANT AllowFormattingCells = vtMissing,
        VARIANT AllowFormattingColumns = vtMissing,
        VARIANT AllowFormattingRows = vtMissing,
        VARIANT AllowInsertingColumns = vtMissing,
        VARIANT AllowInsertingRows = vtMissing,
        VARIANT AllowInsertingHyperlinks = vtMissing,
        VARIANT AllowDeletingColumns = vtMissing,
        VARIANT AllowDeletingRows = vtMissing,
        VARIANT AllowSorting = vtMissing,
        VARIANT AllowFiltering = vtMissing,
        VARIANT AllowUsingPivotTables = vtMissing ) = 0;
};

struct __declspec(uuid("00020852-0001-0000-c000-000000000046"))
IStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default[];
    __declspec(property(get=GetValue))
    _bstr_t Value[];
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlOrientation Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _bstr_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    long IndentLevel;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    VARIANT_BOOL FormulaHidden;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    VARIANT_BOOL ShrinkToFit;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    VARIANT_BOOL WrapText;
    __declspec(property(get=GetNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetIncludeAlignment,put=PutIncludeAlignment))
    VARIANT_BOOL IncludeAlignment;
    __declspec(property(get=GetIncludeBorder,put=PutIncludeBorder))
    VARIANT_BOOL IncludeBorder;
    __declspec(property(get=GetIncludeFont,put=PutIncludeFont))
    VARIANT_BOOL IncludeFont;
    __declspec(property(get=GetIncludeNumber,put=PutIncludeNumber))
    VARIANT_BOOL IncludeNumber;
    __declspec(property(get=GetIncludePatterns,put=PutIncludePatterns))
    VARIANT_BOOL IncludePatterns;
    __declspec(property(get=GetIncludeProtection,put=PutIncludeProtection))
    VARIANT_BOOL IncludeProtection;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetBuiltIn ( );
    BordersPtr GetBorders ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetFormulaHidden ( );
    void PutFormulaHidden (
        VARIANT_BOOL RHS );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign RHS );
    VARIANT_BOOL GetIncludeAlignment ( );
    void PutIncludeAlignment (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeBorder ( );
    void PutIncludeBorder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeFont ( );
    void PutIncludeFont (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeNumber ( );
    void PutIncludeNumber (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludePatterns ( );
    void PutIncludePatterns (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeProtection ( );
    void PutIncludeProtection (
        VARIANT_BOOL RHS );
    long GetIndentLevel ( );
    void PutIndentLevel (
        long RHS );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    _bstr_t GetName (
        long lcid = 0 );
    _bstr_t GetNameLocal ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    _bstr_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        _bstr_t RHS );
    enum XlOrientation GetOrientation ( );
    void PutOrientation (
        enum XlOrientation RHS );
    VARIANT_BOOL GetShrinkToFit ( );
    void PutShrinkToFit (
        VARIANT_BOOL RHS );
    _bstr_t GetValue (
        long lcid = 0 );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign RHS );
    VARIANT_BOOL GetWrapText ( );
    void PutWrapText (
        VARIANT_BOOL RHS );
    _bstr_t Get_Default (
        long lcid = 0 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_BuiltIn (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaHidden (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaHidden (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        enum XlHAlign * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        enum XlHAlign RHS ) = 0;
    virtual HRESULT __stdcall get_IncludeAlignment (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IncludeAlignment (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IncludeBorder (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IncludeBorder (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IncludeFont (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IncludeFont (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IncludeNumber (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IncludeNumber (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IncludePatterns (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IncludePatterns (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IncludeProtection (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IncludeProtection (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IndentLevel (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_IndentLevel (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MergeCells (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_MergeCells (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_NameLocal (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormat (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormat (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormatLocal (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormatLocal (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum XlOrientation * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum XlOrientation RHS ) = 0;
    virtual HRESULT __stdcall get_ShrinkToFit (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShrinkToFit (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        enum XlVAlign * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        enum XlVAlign RHS ) = 0;
    virtual HRESULT __stdcall get_WrapText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_WrapText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
};

struct __declspec(uuid("00020853-0001-0000-c000-000000000046"))
IStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    StylePtr _Default[][];
    __declspec(property(get=GetItem))
    StylePtr Item[][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    StylePtr Add (
        _bstr_t Name,
        const _variant_t & BasedOn = vtMissing );
    long GetCount ( );
    StylePtr GetItem (
        const _variant_t & Index,
        long lcid = 0 );
    _variant_t Merge (
        const _variant_t & Workbook );
    IUnknownPtr Get_NewEnum ( );
    StylePtr Get_Default (
        const _variant_t & Index,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT BasedOn,
        struct Style * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        long lcid,
        struct Style * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Merge (
        VARIANT Workbook,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        long lcid,
        struct Style * * RHS ) = 0;
};

struct __declspec(uuid("00020855-0001-0000-c000-000000000046"))
IBorders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    BorderPtr _Default[];
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetItem))
    BorderPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    long GetCount ( );
    BorderPtr GetItem (
        enum XlBordersIndex Index );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & RHS );
    IUnknownPtr Get_NewEnum ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & RHS );
    BorderPtr Get_Default (
        enum XlBordersIndex Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Color (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Color (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ColorIndex (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ColorIndex (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        enum XlBordersIndex Index,
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_LineStyle (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_LineStyle (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Weight (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Weight (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        enum XlBordersIndex Index,
        struct Border * * RHS ) = 0;
};

struct __declspec(uuid("000208d9-0000-0000-c000-000000000046"))
_Global : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetThisWorkbook))
    _WorkbookPtr ThisWorkbook[];
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter[];
    __declspec(property(get=GetActiveWorkbook))
    _WorkbookPtr ActiveWorkbook;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetToolbars))
    ToolbarsPtr Toolbars;
    __declspec(property(get=GetWorksheetFunction))
    WorksheetFunctionPtr WorksheetFunction;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _ApplicationPtr Parent;
    __declspec(property(get=GetDDEAppReturnCode))
    long DDEAppReturnCode[];
    __declspec(property(get=GetWorkbooks))
    WorkbooksPtr Workbooks;
    __declspec(property(get=GetActiveDialog))
    DialogSheetPtr ActiveDialog;
    __declspec(property(get=GetActiveMenuBar))
    MenuBarPtr ActiveMenuBar;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    ModulesPtr Modules;
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetMenuBars))
    MenuBarsPtr MenuBars;
    __declspec(property(get=GetShortcutMenus))
    MenuPtr ShortcutMenus[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _ApplicationPtr GetParent ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    DialogSheetPtr GetActiveDialog ( );
    MenuBarPtr GetActiveMenuBar ( );
    _bstr_t GetActivePrinter (
        long lcid = 0 );
    void PutActivePrinter (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr GetActiveSheet ( );
    WindowPtr GetActiveWindow ( );
    _WorkbookPtr GetActiveWorkbook ( );
    AddInsPtr GetAddIns ( );
    Office::AssistantPtr GetAssistant ( );
    HRESULT Calculate (
        long lcid = 0 );
    RangePtr GetCells ( );
    SheetsPtr GetCharts ( );
    RangePtr GetColumns ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    long GetDDEAppReturnCode (
        long lcid = 0 );
    HRESULT DDEExecute (
        long Channel,
        _bstr_t String,
        long lcid = 0 );
    long DDEInitiate (
        _bstr_t App,
        _bstr_t Topic,
        long lcid = 0 );
    HRESULT DDEPoke (
        long Channel,
        const _variant_t & Item,
        const _variant_t & Data,
        long lcid = 0 );
    _variant_t DDERequest (
        long Channel,
        _bstr_t Item,
        long lcid = 0 );
    HRESULT DDETerminate (
        long Channel,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t ExecuteExcel4Macro (
        _bstr_t String,
        long lcid = 0 );
    RangePtr Intersect (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    MenuBarsPtr GetMenuBars ( );
    ModulesPtr GetModules ( );
    NamesPtr GetNames ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t _Run2 (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    IDispatchPtr GetSelection (
        long lcid = 0 );
    HRESULT SendKeys (
        const _variant_t & Keys,
        const _variant_t & Wait = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    MenuPtr GetShortcutMenus (
        long Index );
    _WorkbookPtr GetThisWorkbook (
        long lcid = 0 );
    ToolbarsPtr GetToolbars ( );
    RangePtr Union (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    WindowsPtr GetWindows ( );
    WorkbooksPtr GetWorkbooks ( );
    WorksheetFunctionPtr GetWorksheetFunction ( );
    SheetsPtr GetWorksheets ( );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveChart (
        struct _Chart * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveDialog (
        struct DialogSheet * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveMenuBar (
        struct MenuBar * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActivePrinter (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ActivePrinter (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveSheet (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveWindow (
        struct Window * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveWorkbook (
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIns (
        struct AddIns * * RHS ) = 0;
    virtual HRESULT __stdcall get_Assistant (
        struct Office::Assistant * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Calculate (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Cells (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Charts (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_Columns (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_CommandBars (
        struct Office::_CommandBars * * RHS ) = 0;
    virtual HRESULT __stdcall get_DDEAppReturnCode (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_DDEExecute (
        long Channel,
        BSTR String,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_DDEInitiate (
        BSTR App,
        BSTR Topic,
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_DDEPoke (
        long Channel,
        VARIANT Item,
        VARIANT Data,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_DDERequest (
        long Channel,
        BSTR Item,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_DDETerminate (
        long Channel,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_DialogSheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Evaluate (
        VARIANT Name,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__Evaluate (
        VARIANT Name,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ExecuteExcel4Macro (
        BSTR String,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Intersect (
        struct Range * Arg1,
        struct Range * Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        long lcid,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_MenuBars (
        struct MenuBars * * RHS ) = 0;
    virtual HRESULT __stdcall get_Modules (
        struct Modules * * RHS ) = 0;
    virtual HRESULT __stdcall get_Names (
        struct Names * * RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        VARIANT Cell1,
        VARIANT Cell2,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Rows (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Run (
        VARIANT Macro,
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__Run2 (
        VARIANT Macro,
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Selection (
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendKeys (
        VARIANT Keys,
        VARIANT Wait = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Sheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_ShortcutMenus (
        long Index,
        struct Menu * * RHS ) = 0;
    virtual HRESULT __stdcall get_ThisWorkbook (
        long lcid,
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall get_Toolbars (
        struct Toolbars * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Union (
        struct Range * Arg1,
        struct Range * Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        long lcid,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Windows (
        struct Windows * * RHS ) = 0;
    virtual HRESULT __stdcall get_Workbooks (
        struct Workbooks * * RHS ) = 0;
    virtual HRESULT __stdcall get_WorksheetFunction (
        struct WorksheetFunction * * RHS ) = 0;
    virtual HRESULT __stdcall get_Worksheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_Excel4MacroSheets (
        struct Sheets * * RHS ) = 0;
};

struct __declspec(uuid("00020857-0001-0000-c000-000000000046"))
IAddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstalled,put=PutInstalled))
    VARIANT_BOOL Installed;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetCLSID))
    _bstr_t CLSID;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComments))
    _bstr_t Comments;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetComments ( );
    _bstr_t GetFullName ( );
    VARIANT_BOOL GetInstalled ( );
    void PutInstalled (
        VARIANT_BOOL RHS );
    _bstr_t GetKeywords ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    _bstr_t GetSubject ( );
    _bstr_t GetTitle ( );
    _bstr_t GetprogID ( );
    _bstr_t GetCLSID ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Author (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Comments (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_FullName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Installed (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Installed (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Keywords (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Title (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_progID (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_CLSID (
        BSTR * RHS ) = 0;
};

struct __declspec(uuid("00020858-0001-0000-c000-000000000046"))
IAddIns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AddInPtr _Default[];
    __declspec(property(get=GetItem))
    AddInPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    AddInPtr Add (
        _bstr_t Filename,
        const _variant_t & JOECopyFile = vtMissing );
    long GetCount ( );
    AddInPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    AddInPtr Get_Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Filename,
        VARIANT JOECopyFile,
        struct AddIn * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct AddIn * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct AddIn * * RHS ) = 0;
};

struct __declspec(uuid("0002085c-0001-0000-c000-000000000046"))
IToolbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToolbarButtons))
    ToolbarButtonsPtr ToolbarButtons;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum XlToolbarProtection Protection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    HRESULT Delete ( );
    long GetHeight ( );
    void PutHeight (
        long RHS );
    long GetLeft ( );
    void PutLeft (
        long RHS );
    _bstr_t GetName ( );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    enum XlToolbarProtection GetProtection ( );
    void PutProtection (
        enum XlToolbarProtection RHS );
    HRESULT Reset ( );
    ToolbarButtonsPtr GetToolbarButtons ( );
    long GetTop ( );
    void PutTop (
        long RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetWidth ( );
    void PutWidth (
        long RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BuiltIn (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Position (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Position (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Protection (
        enum XlToolbarProtection * RHS ) = 0;
    virtual HRESULT __stdcall put_Protection (
        enum XlToolbarProtection RHS ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall get_ToolbarButtons (
        struct ToolbarButtons * * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        long RHS ) = 0;
};

struct __declspec(uuid("0002085d-0001-0000-c000-000000000046"))
IToolbars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    ToolbarPtr Get_Default (
        const _variant_t & Index );
    ToolbarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Name,
        struct Toolbar * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct Toolbar * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct Toolbar * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002085e-0001-0000-c000-000000000046"))
IToolbarButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPushed,put=PutPushed))
    VARIANT_BOOL Pushed;
    __declspec(property(get=GetIsGap))
    VARIANT_BOOL IsGap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL RHS );
    HRESULT Copy (
        struct Toolbar * Toolbar,
        long Before );
    HRESULT CopyFace ( );
    HRESULT Delete ( );
    HRESULT Edit ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long RHS );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t RHS );
    long GetID ( );
    VARIANT_BOOL GetIsGap ( );
    HRESULT Move (
        struct Toolbar * Toolbar,
        long Before );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    HRESULT PasteFace ( );
    VARIANT_BOOL GetPushed ( );
    void PutPushed (
        VARIANT_BOOL RHS );
    HRESULT Reset ( );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t RHS );
    long GetWidth ( );
    void PutWidth (
        long RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BuiltIn (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_BuiltInFace (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_BuiltInFace (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        struct Toolbar * Toolbar,
        long Before ) = 0;
    virtual HRESULT __stdcall raw_CopyFace ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Edit ( ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HelpContextID (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_HelpContextID (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_HelpFile (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_HelpFile (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ID (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_IsGap (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Move (
        struct Toolbar * Toolbar,
        long Before ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_PasteFace ( ) = 0;
    virtual HRESULT __stdcall get_Pushed (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Pushed (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall get_StatusBar (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_StatusBar (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        long RHS ) = 0;
};

struct __declspec(uuid("0002085f-0001-0000-c000-000000000046"))
IToolbarButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarButtonPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarButtonPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarButtonPtr Add (
        const _variant_t & Button = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & Pushed = vtMissing,
        const _variant_t & Enabled = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    long GetCount ( );
    ToolbarButtonPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ToolbarButtonPtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Button,
        VARIANT Before,
        VARIANT OnAction,
        VARIANT Pushed,
        VARIANT Enabled,
        VARIANT StatusBar,
        VARIANT HelpFile,
        VARIANT HelpContextID,
        struct ToolbarButton * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        long Index,
        struct ToolbarButton * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        struct ToolbarButton * * RHS ) = 0;
};

struct __declspec(uuid("00020860-0001-0000-c000-000000000046"))
IAreas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RangePtr _Default[];
    __declspec(property(get=GetItem))
    RangePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    RangePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    RangePtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        long Index,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        struct Range * * RHS ) = 0;
};

struct __declspec(uuid("00024412-0001-0000-c000-000000000046"))
IWorkbookEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Open ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT BeforeClose (
        VARIANT_BOOL * Cancel );
    HRESULT BeforeSave (
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT BeforePrint (
        VARIANT_BOOL * Cancel );
    HRESULT NewSheet (
        IDispatch * Sh );
    HRESULT AddinInstall ( );
    HRESULT AddinUninstall ( );
    HRESULT WindowResize (
        struct Window * Wn );
    HRESULT WindowActivate (
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct Window * Wn );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT PivotTableCloseConnection (
        struct PivotTable * Target );
    HRESULT PivotTableOpenConnection (
        struct PivotTable * Target );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Open ( ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
    virtual HRESULT __stdcall raw_BeforeClose (
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_BeforeSave (
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_BeforePrint (
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_NewSheet (
        IDispatch * Sh ) = 0;
    virtual HRESULT __stdcall raw_AddinInstall ( ) = 0;
    virtual HRESULT __stdcall raw_AddinUninstall ( ) = 0;
    virtual HRESULT __stdcall raw_WindowResize (
        struct Window * Wn ) = 0;
    virtual HRESULT __stdcall raw_WindowActivate (
        struct Window * Wn ) = 0;
    virtual HRESULT __stdcall raw_WindowDeactivate (
        struct Window * Wn ) = 0;
    virtual HRESULT __stdcall raw_SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target ) = 0;
    virtual HRESULT __stdcall raw_SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_SheetActivate (
        IDispatch * Sh ) = 0;
    virtual HRESULT __stdcall raw_SheetDeactivate (
        IDispatch * Sh ) = 0;
    virtual HRESULT __stdcall raw_SheetCalculate (
        IDispatch * Sh ) = 0;
    virtual HRESULT __stdcall raw_SheetChange (
        IDispatch * Sh,
        struct Range * Target ) = 0;
    virtual HRESULT __stdcall raw_SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target ) = 0;
    virtual HRESULT __stdcall raw_SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target ) = 0;
    virtual HRESULT __stdcall raw_PivotTableCloseConnection (
        struct PivotTable * Target ) = 0;
    virtual HRESULT __stdcall raw_PivotTableOpenConnection (
        struct PivotTable * Target ) = 0;
};

struct __declspec(uuid("000208da-0000-0000-c000-000000000046"))
_Workbook : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowConflictHistory,put=PutShowConflictHistory))
    VARIANT_BOOL ShowConflictHistory[];
    __declspec(property(get=GetRevisionNumber))
    long RevisionNumber[];
    __declspec(property(get=GetHasPassword))
    VARIANT_BOOL HasPassword[];
    __declspec(property(get=GetConflictResolution,put=PutConflictResolution))
    enum XlSaveConflictResolution ConflictResolution;
    __declspec(property(get=GetBuiltinDocumentProperties))
    IDispatchPtr BuiltinDocumentProperties;
    __declspec(property(get=GetCustomDocumentProperties))
    IDispatchPtr CustomDocumentProperties;
    __declspec(property(get=GetOnSave,put=PutOnSave))
    _bstr_t OnSave[];
    __declspec(property(get=GetPath))
    _bstr_t Path[];
    __declspec(property(get=GetProtectWindows))
    VARIANT_BOOL ProtectWindows;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly[];
    __declspec(property(get=Get_ReadOnlyRecommended))
    VARIANT_BOOL _ReadOnlyRecommended[];
    __declspec(property(get=GetSaved,put=PutSaved))
    VARIANT_BOOL Saved[];
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetContainer))
    IDispatchPtr Container;
    __declspec(property(get=GetUserStatus))
    _variant_t UserStatus[];
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetWriteReserved))
    VARIANT_BOOL WriteReserved[];
    __declspec(property(get=GetWriteReservedBy))
    _bstr_t WriteReservedBy[];
    __declspec(property(get=GetFullNameURLEncoded))
    _bstr_t FullNameURLEncoded[];
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetPasswordEncryptionProvider))
    _bstr_t PasswordEncryptionProvider;
    __declspec(property(get=GetUserControl,put=PutUserControl))
    VARIANT_BOOL UserControl;
    __declspec(property(get=GetPasswordEncryptionAlgorithm))
    _bstr_t PasswordEncryptionAlgorithm;
    __declspec(property(get=GetPasswordEncryptionKeyLength))
    long PasswordEncryptionKeyLength;
    __declspec(property(get=GetPasswordEncryptionFileProperties))
    VARIANT_BOOL PasswordEncryptionFileProperties;
    __declspec(property(get=GetCalculationVersion))
    long CalculationVersion;
    __declspec(property(get=GetSmartTagOptions))
    SmartTagOptionsPtr SmartTagOptions;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetPublishObjects))
    PublishObjectsPtr PublishObjects;
    __declspec(property(get=GetWebOptions))
    WebOptionsPtr WebOptions;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetHTMLProject))
    Office::HTMLProjectPtr HTMLProject;
    __declspec(property(get=GetEnvelopeVisible,put=PutEnvelopeVisible))
    VARIANT_BOOL EnvelopeVisible;
    __declspec(property(get=GetStyles))
    StylesPtr Styles;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title[];
    __declspec(property(get=GetVBASigned))
    VARIANT_BOOL VBASigned;
    __declspec(property(get=GetRoutingSlip))
    RoutingSlipPtr RoutingSlip;
    __declspec(property(get=GetHasRoutingSlip,put=PutHasRoutingSlip))
    VARIANT_BOOL HasRoutingSlip[];
    __declspec(property(get=GetRouted))
    VARIANT_BOOL Routed[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject[];
    __declspec(property(get=GetReadOnlyRecommended,put=PutReadOnlyRecommended))
    VARIANT_BOOL ReadOnlyRecommended;
    __declspec(property(get=GetHasMailer,put=PutHasMailer))
    VARIANT_BOOL HasMailer[];
    __declspec(property(get=GetMailer))
    MailerPtr Mailer;
    __declspec(property(get=GetWritePassword,put=PutWritePassword))
    _bstr_t WritePassword;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetDate1904,put=PutDate1904))
    VARIANT_BOOL Date1904[];
    __declspec(property(get=GetAcceptLabelsInFormulas,put=PutAcceptLabelsInFormulas))
    VARIANT_BOOL AcceptLabelsInFormulas;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoUpdateFrequency,put=PutAutoUpdateFrequency))
    long AutoUpdateFrequency;
    __declspec(property(get=GetAutoUpdateSaveChanges,put=PutAutoUpdateSaveChanges))
    VARIANT_BOOL AutoUpdateSaveChanges;
    __declspec(property(get=GetChangeHistoryDuration,put=PutChangeHistoryDuration))
    long ChangeHistoryDuration;
    __declspec(property(get=GetIsAddin,put=PutIsAddin))
    VARIANT_BOOL IsAddin;
    __declspec(property(get=GetPersonalViewListSettings,put=PutPersonalViewListSettings))
    VARIANT_BOOL PersonalViewListSettings;
    __declspec(property(get=GetPersonalViewPrintSettings,put=PutPersonalViewPrintSettings))
    VARIANT_BOOL PersonalViewPrintSettings;
    __declspec(property(get=GetDisplayDrawingObjects,put=PutDisplayDrawingObjects))
    enum XlDisplayDrawingObjects DisplayDrawingObjects[];
    __declspec(property(get=GetPrecisionAsDisplayed,put=PutPrecisionAsDisplayed))
    VARIANT_BOOL PrecisionAsDisplayed[];
    __declspec(property(get=GetSaveLinkValues,put=PutSaveLinkValues))
    VARIANT_BOOL SaveLinkValues[];
    __declspec(property(get=GetUpdateRemoteReferences,put=PutUpdateRemoteReferences))
    VARIANT_BOOL UpdateRemoteReferences[];
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetShowPivotTableFieldList,put=PutShowPivotTableFieldList))
    VARIANT_BOOL ShowPivotTableFieldList;
    __declspec(property(get=GetCustomViews))
    CustomViewsPtr CustomViews;
    __declspec(property(get=GetTemplateRemoveExtData,put=PutTemplateRemoveExtData))
    VARIANT_BOOL TemplateRemoveExtData;
    __declspec(property(get=GetUpdateLinks,put=PutUpdateLinks))
    enum XlUpdateLinks UpdateLinks;
    __declspec(property(get=GetEnableAutoRecover,put=PutEnableAutoRecover))
    VARIANT_BOOL EnableAutoRecover;
    __declspec(property(get=GetRemovePersonalInformation,put=PutRemovePersonalInformation))
    VARIANT_BOOL RemovePersonalInformation;
    __declspec(property(get=GetHighlightChangesOnScreen,put=PutHighlightChangesOnScreen))
    VARIANT_BOOL HighlightChangesOnScreen;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author[];
    __declspec(property(get=GetComments,put=PutComments))
    _bstr_t Comments[];
    __declspec(property(get=GetKeepChangeHistory,put=PutKeepChangeHistory))
    VARIANT_BOOL KeepChangeHistory;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords[];
    __declspec(property(get=GetListChangesOnNewSheet,put=PutListChangesOnNewSheet))
    VARIANT_BOOL ListChangesOnNewSheet;
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetMultiUserEditing))
    VARIANT_BOOL MultiUserEditing[];
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    SheetsPtr Modules;
    __declspec(property(get=GetVBProject))
    VBIDE::_VBProjectPtr VBProject;
    __declspec(property(get=GetColors,put=PutColors))
    _variant_t Colors[][];
    __declspec(property(get=GetIsInplace))
    VARIANT_BOOL IsInplace;
    __declspec(property(get=GetCreateBackup))
    VARIANT_BOOL CreateBackup[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetProtectStructure))
    VARIANT_BOOL ProtectStructure;
    __declspec(property(get=GetFileFormat))
    enum XlFileFormat FileFormat[];
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetFullName))
    _bstr_t FullName[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAcceptLabelsInFormulas ( );
    void PutAcceptLabelsInFormulas (
        VARIANT_BOOL RHS );
    HRESULT Activate (
        long lcid = 0 );
    _ChartPtr GetActiveChart ( );
    IDispatchPtr GetActiveSheet ( );
    _bstr_t GetAuthor (
        long lcid = 0 );
    void PutAuthor (
        long lcid,
        _bstr_t RHS );
    long GetAutoUpdateFrequency ( );
    void PutAutoUpdateFrequency (
        long RHS );
    VARIANT_BOOL GetAutoUpdateSaveChanges ( );
    void PutAutoUpdateSaveChanges (
        VARIANT_BOOL RHS );
    long GetChangeHistoryDuration ( );
    void PutChangeHistoryDuration (
        long RHS );
    IDispatchPtr GetBuiltinDocumentProperties ( );
    HRESULT ChangeFileAccess (
        enum XlFileAccess Mode,
        const _variant_t & WritePassword = vtMissing,
        const _variant_t & Notify = vtMissing,
        long lcid = 0 );
    HRESULT ChangeLink (
        _bstr_t Name,
        _bstr_t NewName,
        enum XlLinkType Type,
        long lcid = 0 );
    SheetsPtr GetCharts ( );
    HRESULT Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing,
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    _variant_t GetColors (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    void PutColors (
        const _variant_t & Index,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    Office::_CommandBarsPtr GetCommandBars ( );
    _bstr_t GetComments (
        long lcid = 0 );
    void PutComments (
        long lcid,
        _bstr_t RHS );
    enum XlSaveConflictResolution GetConflictResolution ( );
    void PutConflictResolution (
        enum XlSaveConflictResolution RHS );
    IDispatchPtr GetContainer ( );
    VARIANT_BOOL GetCreateBackup (
        long lcid = 0 );
    IDispatchPtr GetCustomDocumentProperties ( );
    VARIANT_BOOL GetDate1904 (
        long lcid = 0 );
    void PutDate1904 (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT DeleteNumberFormat (
        _bstr_t NumberFormat,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    enum XlDisplayDrawingObjects GetDisplayDrawingObjects (
        long lcid = 0 );
    void PutDisplayDrawingObjects (
        long lcid,
        enum XlDisplayDrawingObjects RHS );
    VARIANT_BOOL ExclusiveAccess (
        long lcid = 0 );
    enum XlFileFormat GetFileFormat (
        long lcid = 0 );
    HRESULT ForwardMailer (
        long lcid = 0 );
    _bstr_t GetFullName (
        long lcid = 0 );
    VARIANT_BOOL GetHasMailer (
        long lcid = 0 );
    void PutHasMailer (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasPassword (
        long lcid = 0 );
    VARIANT_BOOL GetHasRoutingSlip (
        long lcid = 0 );
    void PutHasRoutingSlip (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIsAddin ( );
    void PutIsAddin (
        VARIANT_BOOL RHS );
    _bstr_t GetKeywords (
        long lcid = 0 );
    void PutKeywords (
        long lcid,
        _bstr_t RHS );
    _variant_t LinkInfo (
        _bstr_t Name,
        enum XlLinkInfo LinkInfo,
        const _variant_t & Type = vtMissing,
        const _variant_t & EditionRef = vtMissing,
        long lcid = 0 );
    _variant_t LinkSources (
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    MailerPtr GetMailer ( );
    HRESULT MergeWorkbook (
        const _variant_t & Filename );
    SheetsPtr GetModules ( );
    VARIANT_BOOL GetMultiUserEditing (
        long lcid = 0 );
    _bstr_t GetName ( );
    NamesPtr GetNames ( );
    WindowPtr NewWindow (
        long lcid = 0 );
    _bstr_t GetOnSave (
        long lcid = 0 );
    void PutOnSave (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    HRESULT OpenLinks (
        _bstr_t Name,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    _bstr_t GetPath (
        long lcid = 0 );
    VARIANT_BOOL GetPersonalViewListSettings ( );
    void PutPersonalViewListSettings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPersonalViewPrintSettings ( );
    void PutPersonalViewPrintSettings (
        VARIANT_BOOL RHS );
    PivotCachesPtr PivotCaches ( );
    HRESULT Post (
        const _variant_t & DestName = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetPrecisionAsDisplayed (
        long lcid = 0 );
    void PutPrecisionAsDisplayed (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & Structure = vtMissing,
        const _variant_t & Windows = vtMissing );
    HRESULT ProtectSharing (
        const _variant_t & Filename = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & SharingPassword = vtMissing );
    VARIANT_BOOL GetProtectStructure ( );
    VARIANT_BOOL GetProtectWindows ( );
    VARIANT_BOOL GetReadOnly (
        long lcid = 0 );
    VARIANT_BOOL Get_ReadOnlyRecommended (
        long lcid = 0 );
    HRESULT RefreshAll ( );
    HRESULT Reply (
        long lcid = 0 );
    HRESULT ReplyAll (
        long lcid = 0 );
    HRESULT RemoveUser (
        long Index );
    long GetRevisionNumber (
        long lcid = 0 );
    HRESULT Route (
        long lcid = 0 );
    VARIANT_BOOL GetRouted (
        long lcid = 0 );
    RoutingSlipPtr GetRoutingSlip ( );
    HRESULT RunAutoMacros (
        enum XlRunAutoMacro Which,
        long lcid = 0 );
    HRESULT Save (
        long lcid = 0 );
    HRESULT _SaveAs (
        const _variant_t & Filename,
        const _variant_t & FileFormat,
        const _variant_t & Password,
        const _variant_t & WriteResPassword,
        const _variant_t & ReadOnlyRecommended,
        const _variant_t & CreateBackup,
        enum XlSaveAsAccessMode AccessMode,
        const _variant_t & ConflictResolution = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT SaveCopyAs (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetSaved (
        long lcid = 0 );
    void PutSaved (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSaveLinkValues (
        long lcid = 0 );
    void PutSaveLinkValues (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SendMail (
        const _variant_t & Recipients,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ReturnReceipt = vtMissing,
        long lcid = 0 );
    HRESULT SendMailer (
        const _variant_t & FileFormat,
        enum XlPriority Priority,
        long lcid = 0 );
    HRESULT SetLinkOnData (
        _bstr_t Name,
        const _variant_t & Procedure = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    VARIANT_BOOL GetShowConflictHistory (
        long lcid = 0 );
    void PutShowConflictHistory (
        long lcid,
        VARIANT_BOOL RHS );
    StylesPtr GetStyles ( );
    _bstr_t GetSubject (
        long lcid = 0 );
    void PutSubject (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetTitle (
        long lcid = 0 );
    void PutTitle (
        long lcid,
        _bstr_t RHS );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    HRESULT UnprotectSharing (
        const _variant_t & SharingPassword = vtMissing );
    HRESULT UpdateFromFile (
        long lcid = 0 );
    HRESULT UpdateLink (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetUpdateRemoteReferences (
        long lcid = 0 );
    void PutUpdateRemoteReferences (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUserControl ( );
    void PutUserControl (
        VARIANT_BOOL RHS );
    _variant_t GetUserStatus (
        long lcid = 0 );
    CustomViewsPtr GetCustomViews ( );
    WindowsPtr GetWindows ( );
    SheetsPtr GetWorksheets ( );
    VARIANT_BOOL GetWriteReserved (
        long lcid = 0 );
    _bstr_t GetWriteReservedBy (
        long lcid = 0 );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );
    VARIANT_BOOL GetTemplateRemoveExtData ( );
    void PutTemplateRemoveExtData (
        VARIANT_BOOL RHS );
    HRESULT HighlightChangesOptions (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    VARIANT_BOOL GetHighlightChangesOnScreen ( );
    void PutHighlightChangesOnScreen (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKeepChangeHistory ( );
    void PutKeepChangeHistory (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetListChangesOnNewSheet ( );
    void PutListChangesOnNewSheet (
        VARIANT_BOOL RHS );
    HRESULT PurgeChangeHistoryNow (
        long Days,
        const _variant_t & SharingPassword = vtMissing );
    HRESULT AcceptAllChanges (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    HRESULT RejectAllChanges (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing,
        long lcid = 0 );
    HRESULT ResetColors ( );
    VBIDE::_VBProjectPtr GetVBProject ( );
    HRESULT FollowHyperlink (
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    HRESULT AddToFavorites ( );
    VARIANT_BOOL GetIsInplace ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT WebPagePreview ( );
    PublishObjectsPtr GetPublishObjects ( );
    WebOptionsPtr GetWebOptions ( );
    HRESULT ReloadAs (
        enum Office::MsoEncoding Encoding );
    Office::HTMLProjectPtr GetHTMLProject ( );
    VARIANT_BOOL GetEnvelopeVisible ( );
    void PutEnvelopeVisible (
        VARIANT_BOOL RHS );
    long GetCalculationVersion ( );
    HRESULT Dummy17 (
        long calcid );
    HRESULT sblt (
        _bstr_t s );
    VARIANT_BOOL GetVBASigned ( );
    VARIANT_BOOL GetShowPivotTableFieldList ( );
    void PutShowPivotTableFieldList (
        VARIANT_BOOL RHS );
    enum XlUpdateLinks GetUpdateLinks ( );
    void PutUpdateLinks (
        enum XlUpdateLinks RHS );
    HRESULT BreakLink (
        _bstr_t Name,
        enum XlLinkType Type );
    HRESULT Dummy16 ( );
    HRESULT SaveAs (
        const _variant_t & Filename,
        const _variant_t & FileFormat,
        const _variant_t & Password,
        const _variant_t & WriteResPassword,
        const _variant_t & ReadOnlyRecommended,
        const _variant_t & CreateBackup,
        enum XlSaveAsAccessMode AccessMode,
        const _variant_t & ConflictResolution = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoRecover ( );
    void PutEnableAutoRecover (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRemovePersonalInformation ( );
    void PutRemovePersonalInformation (
        VARIANT_BOOL RHS );
    _bstr_t GetFullNameURLEncoded (
        long lcid = 0 );
    HRESULT CheckIn (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Comments = vtMissing,
        const _variant_t & MakePublic = vtMissing );
    VARIANT_BOOL CanCheckIn ( );
    HRESULT SendForReview (
        const _variant_t & Recipients = vtMissing,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ShowMessage = vtMissing,
        const _variant_t & IncludeAttachment = vtMissing );
    HRESULT ReplyWithChanges (
        const _variant_t & ShowMessage = vtMissing );
    HRESULT EndReview ( );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t RHS );
    _bstr_t GetWritePassword ( );
    void PutWritePassword (
        _bstr_t RHS );
    _bstr_t GetPasswordEncryptionProvider ( );
    _bstr_t GetPasswordEncryptionAlgorithm ( );
    long GetPasswordEncryptionKeyLength ( );
    HRESULT SetPasswordEncryptionOptions (
        const _variant_t & PasswordEncryptionProvider = vtMissing,
        const _variant_t & PasswordEncryptionAlgorithm = vtMissing,
        const _variant_t & PasswordEncryptionKeyLength = vtMissing,
        const _variant_t & PasswordEncryptionFileProperties = vtMissing );
    VARIANT_BOOL GetPasswordEncryptionFileProperties ( );
    VARIANT_BOOL GetReadOnlyRecommended ( );
    void PutReadOnlyRecommended (
        VARIANT_BOOL RHS );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & Structure = vtMissing,
        const _variant_t & Windows = vtMissing );
    SmartTagOptionsPtr GetSmartTagOptions ( );
    HRESULT RecheckSmartTags ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_AcceptLabelsInFormulas (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AcceptLabelsInFormulas (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_ActiveChart (
        struct _Chart * * RHS ) = 0;
    virtual HRESULT __stdcall get_ActiveSheet (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Author (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Author (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_AutoUpdateFrequency (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoUpdateFrequency (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_AutoUpdateSaveChanges (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoUpdateSaveChanges (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ChangeHistoryDuration (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ChangeHistoryDuration (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_BuiltinDocumentProperties (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ChangeFileAccess (
        enum XlFileAccess Mode,
        VARIANT WritePassword = vtMissing,
        VARIANT Notify = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_ChangeLink (
        BSTR Name,
        BSTR NewName,
        enum XlLinkType Type,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Charts (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Close (
        VARIANT SaveChanges = vtMissing,
        VARIANT Filename = vtMissing,
        VARIANT RouteWorkbook = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_CodeName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get__CodeName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put__CodeName (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Colors (
        VARIANT Index,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Colors (
        VARIANT Index,
        long lcid = 0,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_CommandBars (
        struct Office::_CommandBars * * RHS ) = 0;
    virtual HRESULT __stdcall get_Comments (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Comments (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ConflictResolution (
        enum XlSaveConflictResolution * RHS ) = 0;
    virtual HRESULT __stdcall put_ConflictResolution (
        enum XlSaveConflictResolution RHS ) = 0;
    virtual HRESULT __stdcall get_Container (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_CreateBackup (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_CustomDocumentProperties (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Date1904 (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Date1904 (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_DeleteNumberFormat (
        BSTR NumberFormat,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_DialogSheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayDrawingObjects (
        long lcid,
        enum XlDisplayDrawingObjects * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayDrawingObjects (
        long lcid,
        enum XlDisplayDrawingObjects RHS ) = 0;
    virtual HRESULT __stdcall raw_ExclusiveAccess (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_FileFormat (
        long lcid,
        enum XlFileFormat * RHS ) = 0;
    virtual HRESULT __stdcall raw_ForwardMailer (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_FullName (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_HasMailer (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasMailer (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasPassword (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_HasRoutingSlip (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasRoutingSlip (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IsAddin (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IsAddin (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Keywords (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Keywords (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_LinkInfo (
        BSTR Name,
        enum XlLinkInfo LinkInfo,
        VARIANT Type,
        VARIANT EditionRef,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_LinkSources (
        VARIANT Type,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Mailer (
        struct Mailer * * RHS ) = 0;
    virtual HRESULT __stdcall raw_MergeWorkbook (
        VARIANT Filename ) = 0;
    virtual HRESULT __stdcall get_Modules (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_MultiUserEditing (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Names (
        struct Names * * RHS ) = 0;
    virtual HRESULT __stdcall raw_NewWindow (
        long lcid,
        struct Window * * RHS ) = 0;
    virtual HRESULT __stdcall get_OnSave (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSave (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetActivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetActivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetDeactivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetDeactivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_OpenLinks (
        BSTR Name,
        VARIANT ReadOnly = vtMissing,
        VARIANT Type = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Path (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_PersonalViewListSettings (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PersonalViewListSettings (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PersonalViewPrintSettings (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PersonalViewPrintSettings (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_PivotCaches (
        struct PivotCaches * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Post (
        VARIANT DestName = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_PrecisionAsDisplayed (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrecisionAsDisplayed (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview (
        VARIANT EnableChanges = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw__Protect (
        VARIANT Password = vtMissing,
        VARIANT Structure = vtMissing,
        VARIANT Windows = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ProtectSharing (
        VARIANT Filename = vtMissing,
        VARIANT Password = vtMissing,
        VARIANT WriteResPassword = vtMissing,
        VARIANT ReadOnlyRecommended = vtMissing,
        VARIANT CreateBackup = vtMissing,
        VARIANT SharingPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall get_ProtectStructure (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectWindows (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ReadOnly (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get__ReadOnlyRecommended (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_RefreshAll ( ) = 0;
    virtual HRESULT __stdcall raw_Reply (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_ReplyAll (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_RemoveUser (
        long Index ) = 0;
    virtual HRESULT __stdcall get_RevisionNumber (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Route (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Routed (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_RoutingSlip (
        struct RoutingSlip * * RHS ) = 0;
    virtual HRESULT __stdcall raw_RunAutoMacros (
        enum XlRunAutoMacro Which,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Save (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw__SaveAs (
        VARIANT Filename,
        VARIANT FileFormat,
        VARIANT Password,
        VARIANT WriteResPassword,
        VARIANT ReadOnlyRecommended,
        VARIANT CreateBackup,
        enum XlSaveAsAccessMode AccessMode,
        VARIANT ConflictResolution = vtMissing,
        VARIANT AddToMru = vtMissing,
        VARIANT TextCodepage = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_SaveCopyAs (
        VARIANT Filename = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Saved (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Saved (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SaveLinkValues (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SaveLinkValues (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_SendMail (
        VARIANT Recipients,
        VARIANT Subject = vtMissing,
        VARIANT ReturnReceipt = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_SendMailer (
        VARIANT FileFormat,
        enum XlPriority Priority,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_SetLinkOnData (
        BSTR Name,
        VARIANT Procedure = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Sheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_ShowConflictHistory (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowConflictHistory (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Styles (
        struct Styles * * RHS ) = 0;
    virtual HRESULT __stdcall get_Subject (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Subject (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Title (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Title (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Unprotect (
        VARIANT Password = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_UnprotectSharing (
        VARIANT SharingPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_UpdateFromFile (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_UpdateLink (
        VARIANT Name = vtMissing,
        VARIANT Type = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_UpdateRemoteReferences (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_UpdateRemoteReferences (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_UserControl (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_UserControl (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_UserStatus (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_CustomViews (
        struct CustomViews * * RHS ) = 0;
    virtual HRESULT __stdcall get_Windows (
        struct Windows * * RHS ) = 0;
    virtual HRESULT __stdcall get_Worksheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_WriteReserved (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_WriteReservedBy (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_Excel4MacroSheets (
        struct Sheets * * RHS ) = 0;
    virtual HRESULT __stdcall get_TemplateRemoveExtData (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TemplateRemoveExtData (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_HighlightChangesOptions (
        VARIANT When = vtMissing,
        VARIANT Who = vtMissing,
        VARIANT Where = vtMissing ) = 0;
    virtual HRESULT __stdcall get_HighlightChangesOnScreen (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HighlightChangesOnScreen (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_KeepChangeHistory (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_KeepChangeHistory (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ListChangesOnNewSheet (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ListChangesOnNewSheet (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_PurgeChangeHistoryNow (
        long Days,
        VARIANT SharingPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_AcceptAllChanges (
        VARIANT When = vtMissing,
        VARIANT Who = vtMissing,
        VARIANT Where = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_RejectAllChanges (
        VARIANT When = vtMissing,
        VARIANT Who = vtMissing,
        VARIANT Where = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_PivotTableWizard (
        VARIANT SourceType = vtMissing,
        VARIANT SourceData = vtMissing,
        VARIANT TableDestination = vtMissing,
        VARIANT TableName = vtMissing,
        VARIANT RowGrand = vtMissing,
        VARIANT ColumnGrand = vtMissing,
        VARIANT SaveData = vtMissing,
        VARIANT HasAutoFormat = vtMissing,
        VARIANT AutoPage = vtMissing,
        VARIANT Reserved = vtMissing,
        VARIANT BackgroundQuery = vtMissing,
        VARIANT OptimizeCache = vtMissing,
        VARIANT PageFieldOrder = vtMissing,
        VARIANT PageFieldWrapCount = vtMissing,
        VARIANT ReadData = vtMissing,
        VARIANT Connection = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_ResetColors ( ) = 0;
    virtual HRESULT __stdcall get_VBProject (
        struct VBIDE::_VBProject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_FollowHyperlink (
        BSTR Address,
        VARIANT SubAddress = vtMissing,
        VARIANT NewWindow = vtMissing,
        VARIANT AddHistory = vtMissing,
        VARIANT ExtraInfo = vtMissing,
        VARIANT Method = vtMissing,
        VARIANT HeaderInfo = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
    virtual HRESULT __stdcall get_IsInplace (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        VARIANT PrToFileName = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_WebPagePreview ( ) = 0;
    virtual HRESULT __stdcall get_PublishObjects (
        struct PublishObjects * * RHS ) = 0;
    virtual HRESULT __stdcall get_WebOptions (
        struct WebOptions * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ReloadAs (
        enum Office::MsoEncoding Encoding ) = 0;
    virtual HRESULT __stdcall get_HTMLProject (
        struct Office::HTMLProject * * RHS ) = 0;
    virtual HRESULT __stdcall get_EnvelopeVisible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnvelopeVisible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CalculationVersion (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy17 (
        long calcid ) = 0;
    virtual HRESULT __stdcall raw_sblt (
        BSTR s ) = 0;
    virtual HRESULT __stdcall get_VBASigned (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ShowPivotTableFieldList (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowPivotTableFieldList (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_UpdateLinks (
        enum XlUpdateLinks * RHS ) = 0;
    virtual HRESULT __stdcall put_UpdateLinks (
        enum XlUpdateLinks RHS ) = 0;
    virtual HRESULT __stdcall raw_BreakLink (
        BSTR Name,
        enum XlLinkType Type ) = 0;
    virtual HRESULT __stdcall raw_Dummy16 ( ) = 0;
    virtual HRESULT __stdcall raw_SaveAs (
        VARIANT Filename,
        VARIANT FileFormat,
        VARIANT Password,
        VARIANT WriteResPassword,
        VARIANT ReadOnlyRecommended,
        VARIANT CreateBackup,
        enum XlSaveAsAccessMode AccessMode,
        VARIANT ConflictResolution = vtMissing,
        VARIANT AddToMru = vtMissing,
        VARIANT TextCodepage = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        VARIANT Local = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_EnableAutoRecover (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableAutoRecover (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RemovePersonalInformation (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RemovePersonalInformation (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_FullNameURLEncoded (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckIn (
        VARIANT SaveChanges = vtMissing,
        VARIANT Comments = vtMissing,
        VARIANT MakePublic = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_CanCheckIn (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendForReview (
        VARIANT Recipients = vtMissing,
        VARIANT Subject = vtMissing,
        VARIANT ShowMessage = vtMissing,
        VARIANT IncludeAttachment = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ReplyWithChanges (
        VARIANT ShowMessage = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_EndReview ( ) = 0;
    virtual HRESULT __stdcall get_Password (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Password (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_WritePassword (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_WritePassword (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PasswordEncryptionProvider (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_PasswordEncryptionAlgorithm (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_PasswordEncryptionKeyLength (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_SetPasswordEncryptionOptions (
        VARIANT PasswordEncryptionProvider = vtMissing,
        VARIANT PasswordEncryptionAlgorithm = vtMissing,
        VARIANT PasswordEncryptionKeyLength = vtMissing,
        VARIANT PasswordEncryptionFileProperties = vtMissing ) = 0;
    virtual HRESULT __stdcall get_PasswordEncryptionFileProperties (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ReadOnlyRecommended (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadOnlyRecommended (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Protect (
        VARIANT Password = vtMissing,
        VARIANT Structure = vtMissing,
        VARIANT Windows = vtMissing ) = 0;
    virtual HRESULT __stdcall get_SmartTagOptions (
        struct SmartTagOptions * * RHS ) = 0;
    virtual HRESULT __stdcall raw_RecheckSmartTags ( ) = 0;
};

struct __declspec(uuid("000208db-0000-0000-c000-000000000046"))
Workbooks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _WorkbookPtr _Default[];
    __declspec(property(get=GetItem))
    _WorkbookPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _WorkbookPtr Add (
        const _variant_t & Template = vtMissing,
        long lcid = 0 );
    HRESULT Close (
        long lcid = 0 );
    long GetCount ( );
    _WorkbookPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    _WorkbookPtr _Open (
        _bstr_t Filename,
        const _variant_t & UpdateLinks = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & IgnoreReadOnlyRecommended = vtMissing,
        const _variant_t & Origin = vtMissing,
        const _variant_t & Delimiter = vtMissing,
        const _variant_t & Editable = vtMissing,
        const _variant_t & Notify = vtMissing,
        const _variant_t & Converter = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        long lcid = 0 );
    HRESULT __OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    _WorkbookPtr Get_Default (
        const _variant_t & Index );
    HRESULT _OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        long lcid = 0 );
    _WorkbookPtr Open (
        _bstr_t Filename,
        const _variant_t & UpdateLinks = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & IgnoreReadOnlyRecommended = vtMissing,
        const _variant_t & Origin = vtMissing,
        const _variant_t & Delimiter = vtMissing,
        const _variant_t & Editable = vtMissing,
        const _variant_t & Notify = vtMissing,
        const _variant_t & Converter = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & Local = vtMissing,
        const _variant_t & CorruptLoad = vtMissing,
        long lcid = 0 );
    HRESULT OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        const _variant_t & TrailingMinusNumbers = vtMissing,
        const _variant_t & Local = vtMissing,
        long lcid = 0 );
    _WorkbookPtr OpenDatabase (
        _bstr_t Filename,
        const _variant_t & CommandText = vtMissing,
        const _variant_t & CommandType = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & ImportDataAs = vtMissing );
    HRESULT CheckOut (
        _bstr_t Filename );
    VARIANT_BOOL CanCheckOut (
        _bstr_t Filename );
    _WorkbookPtr OpenXML (
        _bstr_t Filename,
        const _variant_t & Stylesheets = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Template,
        long lcid,
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Close (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw__Open (
        BSTR Filename,
        VARIANT UpdateLinks,
        VARIANT ReadOnly,
        VARIANT Format,
        VARIANT Password,
        VARIANT WriteResPassword,
        VARIANT IgnoreReadOnlyRecommended,
        VARIANT Origin,
        VARIANT Delimiter,
        VARIANT Editable,
        VARIANT Notify,
        VARIANT Converter,
        VARIANT AddToMru,
        long lcid,
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall raw___OpenText (
        BSTR Filename,
        VARIANT Origin,
        VARIANT StartRow,
        VARIANT DataType,
        enum XlTextQualifier TextQualifier,
        VARIANT ConsecutiveDelimiter = vtMissing,
        VARIANT Tab = vtMissing,
        VARIANT Semicolon = vtMissing,
        VARIANT Comma = vtMissing,
        VARIANT Space = vtMissing,
        VARIANT Other = vtMissing,
        VARIANT OtherChar = vtMissing,
        VARIANT FieldInfo = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall raw__OpenText (
        BSTR Filename,
        VARIANT Origin,
        VARIANT StartRow,
        VARIANT DataType,
        enum XlTextQualifier TextQualifier,
        VARIANT ConsecutiveDelimiter = vtMissing,
        VARIANT Tab = vtMissing,
        VARIANT Semicolon = vtMissing,
        VARIANT Comma = vtMissing,
        VARIANT Space = vtMissing,
        VARIANT Other = vtMissing,
        VARIANT OtherChar = vtMissing,
        VARIANT FieldInfo = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        VARIANT DecimalSeparator = vtMissing,
        VARIANT ThousandsSeparator = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Open (
        BSTR Filename,
        VARIANT UpdateLinks,
        VARIANT ReadOnly,
        VARIANT Format,
        VARIANT Password,
        VARIANT WriteResPassword,
        VARIANT IgnoreReadOnlyRecommended,
        VARIANT Origin,
        VARIANT Delimiter,
        VARIANT Editable,
        VARIANT Notify,
        VARIANT Converter,
        VARIANT AddToMru,
        VARIANT Local,
        VARIANT CorruptLoad,
        long lcid,
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall raw_OpenText (
        BSTR Filename,
        VARIANT Origin,
        VARIANT StartRow,
        VARIANT DataType,
        enum XlTextQualifier TextQualifier,
        VARIANT ConsecutiveDelimiter = vtMissing,
        VARIANT Tab = vtMissing,
        VARIANT Semicolon = vtMissing,
        VARIANT Comma = vtMissing,
        VARIANT Space = vtMissing,
        VARIANT Other = vtMissing,
        VARIANT OtherChar = vtMissing,
        VARIANT FieldInfo = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        VARIANT DecimalSeparator = vtMissing,
        VARIANT ThousandsSeparator = vtMissing,
        VARIANT TrailingMinusNumbers = vtMissing,
        VARIANT Local = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_OpenDatabase (
        BSTR Filename,
        VARIANT CommandText,
        VARIANT CommandType,
        VARIANT BackgroundQuery,
        VARIANT ImportDataAs,
        struct _Workbook * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckOut (
        BSTR Filename ) = 0;
    virtual HRESULT __stdcall raw_CanCheckOut (
        BSTR Filename,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_OpenXML (
        BSTR Filename,
        VARIANT Stylesheets,
        struct _Workbook * * RHS ) = 0;
};

struct __declspec(uuid("00020863-0001-0000-c000-000000000046"))
IMenuBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuBarPtr _Default[];
    __declspec(property(get=GetItem))
    MenuBarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuBarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    MenuBarPtr Get_Default (
        const _variant_t & Index );
    MenuBarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Name,
        struct MenuBar * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct MenuBar * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct MenuBar * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020864-0001-0000-c000-000000000046"))
IMenuBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenus))
    MenusPtr Menus;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    HRESULT Delete ( );
    long GetIndex ( );
    MenusPtr GetMenus ( );
    HRESULT Reset ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall get_BuiltIn (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Menus (
        struct Menus * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
};

struct __declspec(uuid("00020865-0001-0000-c000-000000000046"))
IMenus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuPtr _Default[];
    __declspec(property(get=GetItem))
    MenuPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuPtr Add (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    MenuPtr Get_Default (
        const _variant_t & Index );
    MenuPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Caption,
        VARIANT Before,
        VARIANT Restore,
        struct Menu * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct Menu * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct Menu * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020866-0001-0000-c000-000000000046"))
IMenu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenuItems))
    MenuItemsPtr MenuItems;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    MenuItemsPtr GetMenuItems ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_MenuItems (
        struct MenuItems * * RHS ) = 0;
};

struct __declspec(uuid("00020867-0001-0000-c000-000000000046"))
IMenuItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuItemPtr Add (
        _bstr_t Caption,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    MenuPtr AddMenu (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Caption,
        VARIANT OnAction,
        VARIANT ShortcutKey,
        VARIANT Before,
        VARIANT Restore,
        VARIANT StatusBar,
        VARIANT HelpFile,
        VARIANT HelpContextID,
        struct MenuItem * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddMenu (
        BSTR Caption,
        VARIANT Before,
        VARIANT Restore,
        struct Menu * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020868-0001-0000-c000-000000000046"))
IMenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetChecked ( );
    void PutChecked (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long RHS );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t RHS );
    long GetIndex ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Checked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Checked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HelpContextID (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_HelpContextID (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_HelpFile (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_HelpFile (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_StatusBar (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_StatusBar (
        BSTR RHS ) = 0;
};

struct __declspec(uuid("0002086d-0001-0000-c000-000000000046"))
ICharts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _ChartPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Before,
        VARIANT After,
        VARIANT Count,
        struct _Chart * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long lcid = 0 ) = 0;
    virtual void __stdcall _Dummy7 ( ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview (
        VARIANT EnableChanges = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_HPageBreaks (
        struct HPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_VPageBreaks (
        struct VPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        VARIANT PrToFileName = vtMissing,
        long lcid = 0 ) = 0;
};

struct __declspec(uuid("0002086f-0001-0000-c000-000000000046"))
IDrawingObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    VARIANT_BOOL MultiSelect;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    FontPtr GetFont ( );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    InteriorPtr GetInterior ( );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetMultiSelect ( );
    void PutMultiSelect (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t Reshape (
        long Vertex,
        const _variant_t & Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    _variant_t Selected (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    IDispatchPtr Ungroup ( );
    long GetValue ( );
    void PutValue (
        long RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t Vertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    GroupObjectPtr Group ( );
    _variant_t LinkCombo (
        const _variant_t & Link = vtMissing );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual void __stdcall _Dummy28 ( ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_AddItem (
        VARIANT Text,
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadLength (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadLength (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadStyle (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadStyle (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadWidth (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadWidth (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_CancelButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CancelButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_DefaultButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DefaultButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DismissButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DismissButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DropDownLines (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_DropDownLines (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual void __stdcall _Dummy47 ( ) = 0;
    virtual HRESULT __stdcall get_HelpButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HelpButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_InputType (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_InputType (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_LargeChange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_LargeChange (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual void __stdcall _Dummy54 ( ) = 0;
    virtual HRESULT __stdcall raw_List (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual void __stdcall _Dummy56 ( ) = 0;
    virtual HRESULT __stdcall get_ListFillRange (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ListFillRange (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ListIndex (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ListIndex (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Max (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Max (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Min (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Min (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MultiLine (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MultiLine (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MultiSelect (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MultiSelect (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_RemoveAllItems (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_RemoveItem (
        long Index,
        VARIANT Count,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Reshape (
        long Vertex,
        VARIANT Insert,
        VARIANT Left,
        VARIANT Top,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_RoundedCorners (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RoundedCorners (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Selected (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SmallChange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SmallChange (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Ungroup (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Vertices (
        VARIANT Index1,
        VARIANT Index2,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_LinkCombo (
        VARIANT Link,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002441c-0001-0000-c000-000000000046"))
IPivotCache : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetSourceType))
    enum XlPivotTableSourceType SourceType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetADOConnection))
    IDispatchPtr ADOConnection;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetOLAP))
    VARIANT_BOOL OLAP;
    __declspec(property(get=GetMissingItemsLimit,put=PutMissingItemsLimit))
    enum XlPivotTableMissingItems MissingItemsLimit;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetOptimizeCache,put=PutOptimizeCache))
    VARIANT_BOOL OptimizeCache;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetLocalConnection,put=PutLocalConnection))
    _variant_t LocalConnection;
    __declspec(property(get=GetUseLocalConnection,put=PutUseLocalConnection))
    VARIANT_BOOL UseLocalConnection;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL RHS );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & RHS );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetOptimizeCache ( );
    void PutOptimizeCache (
        VARIANT_BOOL RHS );
    long GetRecordCount ( );
    HRESULT Refresh ( );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL RHS );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & RHS );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL RHS );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & RHS );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & RHS );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType RHS );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL RHS );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long RHS );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * RHS );
    HRESULT ResetTimer ( );
    _variant_t GetLocalConnection ( );
    void PutLocalConnection (
        const _variant_t & RHS );
    PivotTablePtr CreatePivotTable (
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );
    VARIANT_BOOL GetUseLocalConnection ( );
    void PutUseLocalConnection (
        VARIANT_BOOL RHS );
    IDispatchPtr GetADOConnection ( );
    VARIANT_BOOL GetIsConnected ( );
    HRESULT MakeConnection ( );
    VARIANT_BOOL GetOLAP ( );
    enum XlPivotTableSourceType GetSourceType ( );
    enum XlPivotTableMissingItems GetMissingItemsLimit ( );
    void PutMissingItemsLimit (
        enum XlPivotTableMissingItems RHS );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t RHS );
    _bstr_t GetSourceDataFile ( );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect RHS );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BackgroundQuery (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_BackgroundQuery (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Connection (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Connection (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_EnableRefresh (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableRefresh (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_MemoryUsed (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_OptimizeCache (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_OptimizeCache (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RecordCount (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Refresh ( ) = 0;
    virtual HRESULT __stdcall get_RefreshDate (
        DATE * RHS ) = 0;
    virtual HRESULT __stdcall get_RefreshName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_RefreshOnFileOpen (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RefreshOnFileOpen (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Sql (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Sql (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_SavePassword (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SavePassword (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SourceData (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_SourceData (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_CommandText (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_CommandText (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_CommandType (
        enum XlCmdType * RHS ) = 0;
    virtual HRESULT __stdcall put_CommandType (
        enum XlCmdType RHS ) = 0;
    virtual HRESULT __stdcall get_QueryType (
        enum XlQueryType * RHS ) = 0;
    virtual HRESULT __stdcall get_MaintainConnection (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MaintainConnection (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RefreshPeriod (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_RefreshPeriod (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Recordset (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall putref_Recordset (
        IDispatch * RHS ) = 0;
    virtual HRESULT __stdcall raw_ResetTimer ( ) = 0;
    virtual HRESULT __stdcall get_LocalConnection (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_LocalConnection (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_CreatePivotTable (
        VARIANT TableDestination,
        VARIANT TableName,
        VARIANT ReadData,
        VARIANT DefaultVersion,
        struct PivotTable * * RHS ) = 0;
    virtual HRESULT __stdcall get_UseLocalConnection (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_UseLocalConnection (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ADOConnection (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_IsConnected (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_MakeConnection ( ) = 0;
    virtual HRESULT __stdcall get_OLAP (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_SourceType (
        enum XlPivotTableSourceType * RHS ) = 0;
    virtual HRESULT __stdcall get_MissingItemsLimit (
        enum XlPivotTableMissingItems * RHS ) = 0;
    virtual HRESULT __stdcall put_MissingItemsLimit (
        enum XlPivotTableMissingItems RHS ) = 0;
    virtual HRESULT __stdcall get_SourceConnectionFile (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_SourceConnectionFile (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_SourceDataFile (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_RobustConnect (
        enum XlRobustConnect * RHS ) = 0;
    virtual HRESULT __stdcall put_RobustConnect (
        enum XlRobustConnect RHS ) = 0;
    virtual HRESULT __stdcall raw_SaveAsODC (
        BSTR ODCFileName,
        VARIANT Description = vtMissing,
        VARIANT Keywords = vtMissing ) = 0;
};

struct __declspec(uuid("0002441d-0001-0000-c000-000000000046"))
IPivotCaches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotCachePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotCachePtr Item (
        const _variant_t & Index );
    PivotCachePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotCachePtr Add (
        enum XlPivotTableSourceType SourceType,
        const _variant_t & SourceData = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct PivotCache * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct PivotCache * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        enum XlPivotTableSourceType SourceType,
        VARIANT SourceData,
        struct PivotCache * * RHS ) = 0;
};

struct __declspec(uuid("0002441e-0001-0000-c000-000000000046"))
IPivotFormula : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    long GetIndex ( );
    void PutIndex (
        long RHS );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get__Default (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Index (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_StandardFormula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_StandardFormula (
        BSTR RHS ) = 0;
};

struct __declspec(uuid("0002441f-0001-0000-c000-000000000046"))
IPivotFormulas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFormulaPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFormulaPtr _Add (
        _bstr_t Formula );
    PivotFormulaPtr Item (
        const _variant_t & Index );
    PivotFormulaPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotFormulaPtr Add (
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw__Add (
        BSTR Formula,
        struct PivotFormula * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct PivotFormula * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct PivotFormula * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Formula,
        VARIANT UseStandardFormula,
        struct PivotFormula * * RHS ) = 0;
};

struct __declspec(uuid("00020872-0001-0000-c000-000000000046"))
IPivotTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageFieldWrapCount,put=PutPageFieldWrapCount))
    long PageFieldWrapCount;
    __declspec(property(get=GetPivotSelectionStandard,put=PutPivotSelectionStandard))
    _bstr_t PivotSelectionStandard;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetDataPivotField))
    PivotFieldPtr DataPivotField;
    __declspec(property(get=GetEnableDataValueEditing,put=PutEnableDataValueEditing))
    VARIANT_BOOL EnableDataValueEditing;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetRowGrand,put=PutRowGrand))
    VARIANT_BOOL RowGrand;
    __declspec(property(get=GetColumnGrand,put=PutColumnGrand))
    VARIANT_BOOL ColumnGrand;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;
    __declspec(property(get=GetTableRange1))
    RangePtr TableRange1;
    __declspec(property(get=GetTableRange2))
    RangePtr TableRange2;
    __declspec(property(get=GetRowRange))
    RangePtr RowRange;
    __declspec(property(get=GetColumnRange))
    RangePtr ColumnRange;
    __declspec(property(get=GetPageRange))
    RangePtr PageRange;
    __declspec(property(get=GetDataLabelRange))
    RangePtr DataLabelRange;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMDX))
    _bstr_t MDX;
    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetPageRangeCells))
    RangePtr PageRangeCells;
    __declspec(property(get=GetCacheIndex,put=PutCacheIndex))
    long CacheIndex;
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetDisplayErrorString,put=PutDisplayErrorString))
    VARIANT_BOOL DisplayErrorString;
    __declspec(property(get=GetDisplayNullString,put=PutDisplayNullString))
    VARIANT_BOOL DisplayNullString;
    __declspec(property(get=GetEnableDrilldown,put=PutEnableDrilldown))
    VARIANT_BOOL EnableDrilldown;
    __declspec(property(get=GetEnableFieldDialog,put=PutEnableFieldDialog))
    VARIANT_BOOL EnableFieldDialog;
    __declspec(property(get=GetEnableWizard,put=PutEnableWizard))
    VARIANT_BOOL EnableWizard;
    __declspec(property(get=GetErrorString,put=PutErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetMergeLabels,put=PutMergeLabels))
    VARIANT_BOOL MergeLabels;
    __declspec(property(get=GetNullString,put=PutNullString))
    _bstr_t NullString;
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotFormulas))
    PivotFormulasPtr PivotFormulas;
    __declspec(property(get=GetSubtotalHiddenPageItems,put=PutSubtotalHiddenPageItems))
    VARIANT_BOOL SubtotalHiddenPageItems;
    __declspec(property(get=GetPageFieldStyle,put=PutPageFieldStyle))
    _bstr_t PageFieldStyle;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetViewCalculatedMembers,put=PutViewCalculatedMembers))
    VARIANT_BOOL ViewCalculatedMembers;
    __declspec(property(get=GetPivotSelection,put=PutPivotSelection))
    _bstr_t PivotSelection;
    __declspec(property(get=GetSelectionMode,put=PutSelectionMode))
    enum XlPTSelectionMode SelectionMode;
    __declspec(property(get=GetTableStyle,put=PutTableStyle))
    _bstr_t TableStyle;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetVacatedStyle,put=PutVacatedStyle))
    _bstr_t VacatedStyle;
    __declspec(property(get=GetCalculatedMembers))
    CalculatedMembersPtr CalculatedMembers;
    __declspec(property(get=GetPrintTitles,put=PutPrintTitles))
    VARIANT_BOOL PrintTitles;
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetGrandTotalName,put=PutGrandTotalName))
    _bstr_t GrandTotalName;
    __declspec(property(get=GetSmallGrid,put=PutSmallGrid))
    VARIANT_BOOL SmallGrid;
    __declspec(property(get=GetRepeatItemsOnEachPrintedPage,put=PutRepeatItemsOnEachPrintedPage))
    VARIANT_BOOL RepeatItemsOnEachPrintedPage;
    __declspec(property(get=GetTotalsAnnotation,put=PutTotalsAnnotation))
    VARIANT_BOOL TotalsAnnotation;
    __declspec(property(get=GetDisplayImmediateItems,put=PutDisplayImmediateItems))
    VARIANT_BOOL DisplayImmediateItems;
    __declspec(property(get=GetEnableFieldList,put=PutEnableFieldList))
    VARIANT_BOOL EnableFieldList;
    __declspec(property(get=GetVisualTotals,put=PutVisualTotals))
    VARIANT_BOOL VisualTotals;
    __declspec(property(get=GetShowPageMultipleItemLabel,put=PutShowPageMultipleItemLabel))
    VARIANT_BOOL ShowPageMultipleItemLabel;
    __declspec(property(get=GetVersion))
    enum XlPivotTableVersionList Version;
    __declspec(property(get=GetDisplayEmptyRow,put=PutDisplayEmptyRow))
    VARIANT_BOOL DisplayEmptyRow;
    __declspec(property(get=GetDisplayEmptyColumn,put=PutDisplayEmptyColumn))
    VARIANT_BOOL DisplayEmptyColumn;
    __declspec(property(get=GetShowCellBackgroundFromOLAP,put=PutShowCellBackgroundFromOLAP))
    VARIANT_BOOL ShowCellBackgroundFromOLAP;
    __declspec(property(get=GetPageFieldOrder,put=PutPageFieldOrder))
    long PageFieldOrder;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AddToTable = vtMissing );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetColumnGrand ( );
    void PutColumnGrand (
        VARIANT_BOOL RHS );
    RangePtr GetColumnRange ( );
    _variant_t ShowPages (
        const _variant_t & PageField = vtMissing );
    RangePtr GetDataBodyRange ( );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataLabelRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL RHS );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetPageRange ( );
    RangePtr GetPageRangeCells ( );
    IDispatchPtr PivotFields (
        const _variant_t & Index = vtMissing );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL RefreshTable ( );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetRowGrand ( );
    void PutRowGrand (
        VARIANT_BOOL RHS );
    RangePtr GetRowRange ( );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL RHS );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & RHS );
    RangePtr GetTableRange1 ( );
    RangePtr GetTableRange2 ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    long GetCacheIndex ( );
    void PutCacheIndex (
        long RHS );
    CalculatedFieldsPtr CalculatedFields ( );
    VARIANT_BOOL GetDisplayErrorString ( );
    void PutDisplayErrorString (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayNullString ( );
    void PutDisplayNullString (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableDrilldown ( );
    void PutEnableDrilldown (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableFieldDialog ( );
    void PutEnableFieldDialog (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableWizard ( );
    void PutEnableWizard (
        VARIANT_BOOL RHS );
    _bstr_t GetErrorString ( );
    void PutErrorString (
        _bstr_t RHS );
    double GetData (
        _bstr_t Name );
    HRESULT ListFormulas ( );
    VARIANT_BOOL GetManualUpdate ( );
    void PutManualUpdate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetMergeLabels ( );
    void PutMergeLabels (
        VARIANT_BOOL RHS );
    _bstr_t GetNullString ( );
    void PutNullString (
        _bstr_t RHS );
    PivotCachePtr PivotCache ( );
    PivotFormulasPtr GetPivotFormulas ( );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing );
    VARIANT_BOOL GetSubtotalHiddenPageItems ( );
    void PutSubtotalHiddenPageItems (
        VARIANT_BOOL RHS );
    long GetPageFieldOrder ( );
    void PutPageFieldOrder (
        long RHS );
    _bstr_t GetPageFieldStyle ( );
    void PutPageFieldStyle (
        _bstr_t RHS );
    long GetPageFieldWrapCount ( );
    void PutPageFieldWrapCount (
        long RHS );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL RHS );
    HRESULT _PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode );
    _bstr_t GetPivotSelection ( );
    void PutPivotSelection (
        _bstr_t RHS );
    enum XlPTSelectionMode GetSelectionMode ( );
    void PutSelectionMode (
        enum XlPTSelectionMode RHS );
    _bstr_t GetTableStyle ( );
    void PutTableStyle (
        _bstr_t RHS );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t RHS );
    HRESULT Update ( );
    _bstr_t GetVacatedStyle ( );
    void PutVacatedStyle (
        _bstr_t RHS );
    HRESULT Format (
        enum XlPivotFormatType Format );
    VARIANT_BOOL GetPrintTitles ( );
    void PutPrintTitles (
        VARIANT_BOOL RHS );
    CubeFieldsPtr GetCubeFields ( );
    _bstr_t GetGrandTotalName ( );
    void PutGrandTotalName (
        _bstr_t RHS );
    VARIANT_BOOL GetSmallGrid ( );
    void PutSmallGrid (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRepeatItemsOnEachPrintedPage ( );
    void PutRepeatItemsOnEachPrintedPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTotalsAnnotation ( );
    void PutTotalsAnnotation (
        VARIANT_BOOL RHS );
    HRESULT PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode,
        const _variant_t & UseStandardName = vtMissing );
    _bstr_t GetPivotSelectionStandard ( );
    void PutPivotSelectionStandard (
        _bstr_t RHS );
    RangePtr GetPivotData (
        const _variant_t & DataField = vtMissing,
        const _variant_t & Field1 = vtMissing,
        const _variant_t & Item1 = vtMissing,
        const _variant_t & Field2 = vtMissing,
        const _variant_t & Item2 = vtMissing,
        const _variant_t & Field3 = vtMissing,
        const _variant_t & Item3 = vtMissing,
        const _variant_t & Field4 = vtMissing,
        const _variant_t & Item4 = vtMissing,
        const _variant_t & Field5 = vtMissing,
        const _variant_t & Item5 = vtMissing,
        const _variant_t & Field6 = vtMissing,
        const _variant_t & Item6 = vtMissing,
        const _variant_t & Field7 = vtMissing,
        const _variant_t & Item7 = vtMissing,
        const _variant_t & Field8 = vtMissing,
        const _variant_t & Item8 = vtMissing,
        const _variant_t & Field9 = vtMissing,
        const _variant_t & Item9 = vtMissing,
        const _variant_t & Field10 = vtMissing,
        const _variant_t & Item10 = vtMissing,
        const _variant_t & Field11 = vtMissing,
        const _variant_t & Item11 = vtMissing,
        const _variant_t & Field12 = vtMissing,
        const _variant_t & Item12 = vtMissing,
        const _variant_t & Field13 = vtMissing,
        const _variant_t & Item13 = vtMissing,
        const _variant_t & Field14 = vtMissing,
        const _variant_t & Item14 = vtMissing );
    PivotFieldPtr GetDataPivotField ( );
    VARIANT_BOOL GetEnableDataValueEditing ( );
    void PutEnableDataValueEditing (
        VARIANT_BOOL RHS );
    PivotFieldPtr AddDataField (
        IDispatch * Field,
        const _variant_t & Caption = vtMissing,
        const _variant_t & Function = vtMissing );
    _bstr_t GetMDX ( );
    VARIANT_BOOL GetViewCalculatedMembers ( );
    void PutViewCalculatedMembers (
        VARIANT_BOOL RHS );
    CalculatedMembersPtr GetCalculatedMembers ( );
    VARIANT_BOOL GetDisplayImmediateItems ( );
    void PutDisplayImmediateItems (
        VARIANT_BOOL RHS );
    _variant_t Dummy15 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL GetEnableFieldList ( );
    void PutEnableFieldList (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetVisualTotals ( );
    void PutVisualTotals (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPageMultipleItemLabel ( );
    void PutShowPageMultipleItemLabel (
        VARIANT_BOOL RHS );
    enum XlPivotTableVersionList GetVersion ( );
    _bstr_t CreateCubeFile (
        _bstr_t File,
        const _variant_t & Measures = vtMissing,
        const _variant_t & Levels = vtMissing,
        const _variant_t & Members = vtMissing,
        const _variant_t & Properties = vtMissing );
    VARIANT_BOOL GetDisplayEmptyRow ( );
    void PutDisplayEmptyRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayEmptyColumn ( );
    void PutDisplayEmptyColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCellBackgroundFromOLAP ( );
    void PutShowCellBackgroundFromOLAP (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddFields (
        VARIANT RowFields,
        VARIANT ColumnFields,
        VARIANT PageFields,
        VARIANT AddToTable,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ColumnFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_ColumnGrand (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ColumnGrand (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ColumnRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ShowPages (
        VARIANT PageField,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_DataBodyRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_DataFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_DataLabelRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HasAutoFormat (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasAutoFormat (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HiddenFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_InnerDetail (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_InnerDetail (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PageFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_PageRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_PageRangeCells (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PivotFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_RefreshDate (
        DATE * RHS ) = 0;
    virtual HRESULT __stdcall get_RefreshName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_RefreshTable (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_RowFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_RowGrand (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RowGrand (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RowRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_SaveData (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SaveData (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SourceData (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_SourceData (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_TableRange1 (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_TableRange2 (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VisibleFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_CacheIndex (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_CacheIndex (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_CalculatedFields (
        struct CalculatedFields * * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayErrorString (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayErrorString (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayNullString (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayNullString (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableDrilldown (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableDrilldown (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableFieldDialog (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableFieldDialog (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableWizard (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableWizard (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ErrorString (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ErrorString (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_GetData (
        BSTR Name,
        double * RHS ) = 0;
    virtual HRESULT __stdcall raw_ListFormulas ( ) = 0;
    virtual HRESULT __stdcall get_ManualUpdate (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ManualUpdate (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MergeLabels (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MergeLabels (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_NullString (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_NullString (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_PivotCache (
        struct PivotCache * * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotFormulas (
        struct PivotFormulas * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PivotTableWizard (
        VARIANT SourceType = vtMissing,
        VARIANT SourceData = vtMissing,
        VARIANT TableDestination = vtMissing,
        VARIANT TableName = vtMissing,
        VARIANT RowGrand = vtMissing,
        VARIANT ColumnGrand = vtMissing,
        VARIANT SaveData = vtMissing,
        VARIANT HasAutoFormat = vtMissing,
        VARIANT AutoPage = vtMissing,
        VARIANT Reserved = vtMissing,
        VARIANT BackgroundQuery = vtMissing,
        VARIANT OptimizeCache = vtMissing,
        VARIANT PageFieldOrder = vtMissing,
        VARIANT PageFieldWrapCount = vtMissing,
        VARIANT ReadData = vtMissing,
        VARIANT Connection = vtMissing ) = 0;
    virtual HRESULT __stdcall get_SubtotalHiddenPageItems (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SubtotalHiddenPageItems (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PageFieldOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PageFieldOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_PageFieldStyle (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_PageFieldStyle (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PageFieldWrapCount (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PageFieldWrapCount (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_PreserveFormatting (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PreserveFormatting (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw__PivotSelect (
        BSTR Name,
        enum XlPTSelectionMode Mode ) = 0;
    virtual HRESULT __stdcall get_PivotSelection (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_PivotSelection (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_SelectionMode (
        enum XlPTSelectionMode * RHS ) = 0;
    virtual HRESULT __stdcall put_SelectionMode (
        enum XlPTSelectionMode RHS ) = 0;
    virtual HRESULT __stdcall get_TableStyle (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_TableStyle (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Tag (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Tag (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
    virtual HRESULT __stdcall get_VacatedStyle (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_VacatedStyle (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Format (
        enum XlPivotFormatType Format ) = 0;
    virtual HRESULT __stdcall get_PrintTitles (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintTitles (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CubeFields (
        struct CubeFields * * RHS ) = 0;
    virtual HRESULT __stdcall get_GrandTotalName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_GrandTotalName (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_SmallGrid (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SmallGrid (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RepeatItemsOnEachPrintedPage (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RepeatItemsOnEachPrintedPage (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TotalsAnnotation (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TotalsAnnotation (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_PivotSelect (
        BSTR Name,
        enum XlPTSelectionMode Mode,
        VARIANT UseStandardName = vtMissing ) = 0;
    virtual HRESULT __stdcall get_PivotSelectionStandard (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_PivotSelectionStandard (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_GetPivotData (
        VARIANT DataField,
        VARIANT Field1,
        VARIANT Item1,
        VARIANT Field2,
        VARIANT Item2,
        VARIANT Field3,
        VARIANT Item3,
        VARIANT Field4,
        VARIANT Item4,
        VARIANT Field5,
        VARIANT Item5,
        VARIANT Field6,
        VARIANT Item6,
        VARIANT Field7,
        VARIANT Item7,
        VARIANT Field8,
        VARIANT Item8,
        VARIANT Field9,
        VARIANT Item9,
        VARIANT Field10,
        VARIANT Item10,
        VARIANT Field11,
        VARIANT Item11,
        VARIANT Field12,
        VARIANT Item12,
        VARIANT Field13,
        VARIANT Item13,
        VARIANT Field14,
        VARIANT Item14,
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_DataPivotField (
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall get_EnableDataValueEditing (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableDataValueEditing (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_AddDataField (
        IDispatch * Field,
        VARIANT Caption,
        VARIANT Function,
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall get_MDX (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_ViewCalculatedMembers (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ViewCalculatedMembers (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CalculatedMembers (
        struct CalculatedMembers * * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayImmediateItems (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayImmediateItems (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Dummy15 (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_EnableFieldList (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableFieldList (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_VisualTotals (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_VisualTotals (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowPageMultipleItemLabel (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowPageMultipleItemLabel (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Version (
        enum XlPivotTableVersionList * RHS ) = 0;
    virtual HRESULT __stdcall raw_CreateCubeFile (
        BSTR File,
        VARIANT Measures,
        VARIANT Levels,
        VARIANT Members,
        VARIANT Properties,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayEmptyRow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayEmptyRow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayEmptyColumn (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayEmptyColumn (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowCellBackgroundFromOLAP (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowCellBackgroundFromOLAP (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020873-0001-0000-c000-000000000046"))
IPivotTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotTablePtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotTablePtr Add (
        struct PivotCache * PivotCache,
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct PivotTable * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct PivotCache * PivotCache,
        VARIANT TableDestination,
        VARIANT TableName,
        VARIANT ReadData,
        VARIANT DefaultVersion,
        struct PivotTable * * RHS ) = 0;
};

struct __declspec(uuid("00020874-0001-0000-c000-000000000046"))
IPivotField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetShowAllItems,put=PutShowAllItems))
    VARIANT_BOOL ShowAllItems;
    __declspec(property(get=GetFunction,put=PutFunction))
    enum XlConsolidationFunction Function;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetHiddenItemsList,put=PutHiddenItemsList))
    _variant_t HiddenItemsList;
    __declspec(property(get=GetDatabaseSort,put=PutDatabaseSort))
    VARIANT_BOOL DatabaseSort;
    __declspec(property(get=GetIsMemberProperty))
    VARIANT_BOOL IsMemberProperty;
    __declspec(property(get=GetPropertyParentField))
    PivotFieldPtr PropertyParentField;
    __declspec(property(get=GetPropertyOrder,put=PutPropertyOrder))
    long PropertyOrder;
    __declspec(property(get=GetEnableItemSelection,put=PutEnableItemSelection))
    VARIANT_BOOL EnableItemSelection;
    __declspec(property(get=GetCurrentPageList,put=PutCurrentPageList))
    _variant_t CurrentPageList;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetDataType))
    enum XlPivotFieldDataType DataType;
    __declspec(property(get=GetGroupLevel))
    _variant_t GroupLevel;
    __declspec(property(get=GetTotalLevels))
    _variant_t TotalLevels;
    __declspec(property(get=GetVisibleItems))
    _variant_t VisibleItems[];
    __declspec(property(get=GetHiddenItems))
    _variant_t HiddenItems[];
    __declspec(property(get=GetParentItems))
    _variant_t ParentItems[];
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetParentField))
    PivotFieldPtr ParentField;
    __declspec(property(get=GetSubtotals,put=PutSubtotals))
    _variant_t Subtotals[];
    __declspec(property(get=GetBaseField,put=PutBaseField))
    _variant_t BaseField;
    __declspec(property(get=GetBaseItem,put=PutBaseItem))
    _variant_t BaseItem;
    __declspec(property(get=GetChildField))
    PivotFieldPtr ChildField;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    _variant_t CurrentPage;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetServerBased,put=PutServerBased))
    VARIANT_BOOL ServerBased;
    __declspec(property(get=GetAutoSortOrder))
    long AutoSortOrder;
    __declspec(property(get=GetAutoSortField))
    _bstr_t AutoSortField;
    __declspec(property(get=GetAutoShowType))
    long AutoShowType;
    __declspec(property(get=GetAutoShowRange))
    long AutoShowRange;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetAutoShowCount))
    long AutoShowCount;
    __declspec(property(get=GetAutoShowField))
    _bstr_t AutoShowField;
    __declspec(property(get=GetLayoutBlankLine,put=PutLayoutBlankLine))
    VARIANT_BOOL LayoutBlankLine;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum XlSubtototalLocationType LayoutSubtotalLocation;
    __declspec(property(get=GetLayoutPageBreak,put=PutLayoutPageBreak))
    VARIANT_BOOL LayoutPageBreak;
    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetSubtotalName,put=PutSubtotalName))
    _bstr_t SubtotalName;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetCubeField))
    CubeFieldPtr CubeField;
    __declspec(property(get=GetCurrentPageName,put=PutCurrentPageName))
    _bstr_t CurrentPageName;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlPivotFieldCalculation Calculation;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotFieldCalculation GetCalculation ( );
    void PutCalculation (
        enum XlPivotFieldCalculation RHS );
    PivotFieldPtr GetChildField ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetCurrentPage ( );
    void PutCurrentPage (
        const _variant_t & RHS );
    RangePtr GetDataRange ( );
    enum XlPivotFieldDataType GetDataType ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    enum XlConsolidationFunction GetFunction ( );
    void PutFunction (
        enum XlConsolidationFunction RHS );
    _variant_t GetGroupLevel ( );
    _variant_t GetHiddenItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation RHS );
    VARIANT_BOOL GetShowAllItems ( );
    void PutShowAllItems (
        VARIANT_BOOL RHS );
    PivotFieldPtr GetParentField ( );
    _variant_t GetParentItems (
        const _variant_t & Index = vtMissing );
    _variant_t PivotItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & RHS );
    _bstr_t GetSourceName ( );
    _variant_t GetSubtotals (
        const _variant_t & Index = vtMissing );
    void PutSubtotals (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _variant_t GetBaseField ( );
    void PutBaseField (
        const _variant_t & RHS );
    _variant_t GetBaseItem ( );
    void PutBaseItem (
        const _variant_t & RHS );
    _variant_t GetTotalLevels ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    _variant_t GetVisibleItems (
        const _variant_t & Index = vtMissing );
    CalculatedItemsPtr CalculatedItems ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    VARIANT_BOOL GetIsCalculated ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetServerBased ( );
    void PutServerBased (
        VARIANT_BOOL RHS );
    HRESULT AutoSort (
        long Order,
        _bstr_t Field );
    HRESULT AutoShow (
        long Type,
        long Range,
        long Count,
        _bstr_t Field );
    long GetAutoSortOrder ( );
    _bstr_t GetAutoSortField ( );
    long GetAutoShowType ( );
    long GetAutoShowRange ( );
    long GetAutoShowCount ( );
    _bstr_t GetAutoShowField ( );
    VARIANT_BOOL GetLayoutBlankLine ( );
    void PutLayoutBlankLine (
        VARIANT_BOOL RHS );
    enum XlSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum XlSubtototalLocationType RHS );
    VARIANT_BOOL GetLayoutPageBreak ( );
    void PutLayoutPageBreak (
        VARIANT_BOOL RHS );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType RHS );
    _bstr_t GetSubtotalName ( );
    void PutSubtotalName (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL RHS );
    CubeFieldPtr GetCubeField ( );
    _bstr_t GetCurrentPageName ( );
    void PutCurrentPageName (
        _bstr_t RHS );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t RHS );
    _variant_t GetHiddenItemsList ( );
    void PutHiddenItemsList (
        const _variant_t & RHS );
    VARIANT_BOOL GetDatabaseSort ( );
    void PutDatabaseSort (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIsMemberProperty ( );
    PivotFieldPtr GetPropertyParentField ( );
    long GetPropertyOrder ( );
    void PutPropertyOrder (
        long RHS );
    VARIANT_BOOL GetEnableItemSelection ( );
    void PutEnableItemSelection (
        VARIANT_BOOL RHS );
    _variant_t GetCurrentPageList ( );
    void PutCurrentPageList (
        const _variant_t & RHS );
    HRESULT AddPageItem (
        _bstr_t Item,
        const _variant_t & ClearList = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Calculation (
        enum XlPivotFieldCalculation * RHS ) = 0;
    virtual HRESULT __stdcall put_Calculation (
        enum XlPivotFieldCalculation RHS ) = 0;
    virtual HRESULT __stdcall get_ChildField (
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall get_ChildItems (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_CurrentPage (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_CurrentPage (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_DataRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_DataType (
        enum XlPivotFieldDataType * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Function (
        enum XlConsolidationFunction * RHS ) = 0;
    virtual HRESULT __stdcall put_Function (
        enum XlConsolidationFunction RHS ) = 0;
    virtual HRESULT __stdcall get_GroupLevel (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_HiddenItems (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LabelRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormat (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormat (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum XlPivotFieldOrientation * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum XlPivotFieldOrientation RHS ) = 0;
    virtual HRESULT __stdcall get_ShowAllItems (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowAllItems (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ParentField (
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall get_ParentItems (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_PivotItems (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Position (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Position (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_SourceName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Subtotals (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Subtotals (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_BaseField (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_BaseField (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_BaseItem (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_BaseItem (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_TotalLevels (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VisibleItems (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CalculatedItems (
        struct CalculatedItems * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_DragToColumn (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DragToColumn (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DragToHide (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DragToHide (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DragToPage (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DragToPage (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DragToRow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DragToRow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DragToData (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DragToData (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_IsCalculated (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_MemoryUsed (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ServerBased (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ServerBased (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_AutoSort (
        long Order,
        BSTR Field ) = 0;
    virtual HRESULT __stdcall raw_AutoShow (
        long Type,
        long Range,
        long Count,
        BSTR Field ) = 0;
    virtual HRESULT __stdcall get_AutoSortOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSortField (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoShowType (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoShowRange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoShowCount (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoShowField (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_LayoutBlankLine (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LayoutBlankLine (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LayoutSubtotalLocation (
        enum XlSubtototalLocationType * RHS ) = 0;
    virtual HRESULT __stdcall put_LayoutSubtotalLocation (
        enum XlSubtototalLocationType RHS ) = 0;
    virtual HRESULT __stdcall get_LayoutPageBreak (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LayoutPageBreak (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LayoutForm (
        enum XlLayoutFormType * RHS ) = 0;
    virtual HRESULT __stdcall put_LayoutForm (
        enum XlLayoutFormType RHS ) = 0;
    virtual HRESULT __stdcall get_SubtotalName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_SubtotalName (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_DrilledDown (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DrilledDown (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CubeField (
        struct CubeField * * RHS ) = 0;
    virtual HRESULT __stdcall get_CurrentPageName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_CurrentPageName (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_StandardFormula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_StandardFormula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HiddenItemsList (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HiddenItemsList (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_DatabaseSort (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DatabaseSort (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IsMemberProperty (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_PropertyParentField (
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall get_PropertyOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PropertyOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_EnableItemSelection (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableItemSelection (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CurrentPageList (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_CurrentPageList (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_AddPageItem (
        BSTR Item,
        VARIANT ClearList = vtMissing ) = 0;
};

struct __declspec(uuid("00020875-0001-0000-c000-000000000046"))
IPivotFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotTablePtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotTablePtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct PivotTable * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024420-0001-0000-c000-000000000046"))
ICalculatedFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFieldPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFieldPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotFieldPtr Item (
        const _variant_t & Index );
    PivotFieldPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotFieldPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw__Add (
        BSTR Name,
        BSTR Formula,
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Field,
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        BSTR Formula,
        VARIANT UseStandardFormula,
        struct PivotField * * RHS ) = 0;
};

struct __declspec(uuid("00020876-0001-0000-c000-000000000046"))
IPivotItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    VARIANT_BOOL ShowDetail;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _variant_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetParentShowDetail))
    VARIANT_BOOL ParentShowDetail;
    __declspec(property(get=GetSourceNameStandard))
    _bstr_t SourceNameStandard;
    __declspec(property(get=GetParentItem))
    PivotItemPtr ParentItem;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    PivotItemPtr GetParentItem ( );
    VARIANT_BOOL GetParentShowDetail ( );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    VARIANT_BOOL GetShowDetail ( );
    void PutShowDetail (
        VARIANT_BOOL RHS );
    _variant_t GetSourceName ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsCalculated ( );
    long GetRecordCount ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL RHS );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t RHS );
    _bstr_t GetSourceNameStandard ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall get_ChildItems (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_DataRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_LabelRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ParentItem (
        struct PivotItem * * RHS ) = 0;
    virtual HRESULT __stdcall get_ParentShowDetail (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_Position (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Position (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_ShowDetail (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowDetail (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SourceName (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_IsCalculated (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_RecordCount (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_DrilledDown (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DrilledDown (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_StandardFormula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_StandardFormula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_SourceNameStandard (
        BSTR * RHS ) = 0;
};

struct __declspec(uuid("00020877-0001-0000-c000-000000000046"))
IPivotItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    HRESULT Add (
        _bstr_t Name );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024421-0001-0000-c000-000000000046"))
ICalculatedItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotItemPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw__Add (
        BSTR Name,
        BSTR Formula,
        struct PivotItem * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct PivotItem * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Field,
        struct PivotItem * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        BSTR Formula,
        VARIANT UseStandardFormula,
        struct PivotItem * * RHS ) = 0;
};

struct __declspec(uuid("00020878-0001-0000-c000-000000000046"))
ICharacters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetPhoneticCharacters,put=PutPhoneticCharacters))
    _bstr_t PhoneticCharacters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    long GetCount ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _variant_t Insert (
        _bstr_t String );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _bstr_t GetPhoneticCharacters ( );
    void PutPhoneticCharacters (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Insert (
        BSTR String,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PhoneticCharacters (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticCharacters (
        BSTR RHS ) = 0;
};

struct __declspec(uuid("00020879-0001-0000-c000-000000000046"))
IDialogs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    DialogPtr _Default[];
    __declspec(property(get=GetItem))
    DialogPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    DialogPtr GetItem (
        enum XlBuiltInDialog Index );
    DialogPtr Get_Default (
        enum XlBuiltInDialog Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        enum XlBuiltInDialog Index,
        struct Dialog * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        enum XlBuiltInDialog Index,
        struct Dialog * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002087a-0001-0000-c000-000000000046"))
IDialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Show (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Show (
        VARIANT Arg1,
        VARIANT Arg2,
        VARIANT Arg3,
        VARIANT Arg4,
        VARIANT Arg5,
        VARIANT Arg6,
        VARIANT Arg7,
        VARIANT Arg8,
        VARIANT Arg9,
        VARIANT Arg10,
        VARIANT Arg11,
        VARIANT Arg12,
        VARIANT Arg13,
        VARIANT Arg14,
        VARIANT Arg15,
        VARIANT Arg16,
        VARIANT Arg17,
        VARIANT Arg18,
        VARIANT Arg19,
        VARIANT Arg20,
        VARIANT Arg21,
        VARIANT Arg22,
        VARIANT Arg23,
        VARIANT Arg24,
        VARIANT Arg25,
        VARIANT Arg26,
        VARIANT Arg27,
        VARIANT Arg28,
        VARIANT Arg29,
        VARIANT Arg30,
        VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("0002087b-0001-0000-c000-000000000046"))
ISoundNote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    _variant_t Import (
        _bstr_t Filename );
    _variant_t Play ( );
    _variant_t Record ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Import (
        BSTR Filename,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Play (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Record (
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("0002087d-0001-0000-c000-000000000046"))
IButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_CancelButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CancelButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DefaultButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DefaultButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DismissButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DismissButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HelpButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HelpButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002087e-0001-0000-c000-000000000046"))
IButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    ButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_CancelButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CancelButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DefaultButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DefaultButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DismissButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DismissButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HelpButton (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HelpButton (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct Button * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002087f-0001-0000-c000-000000000046"))
ICheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020880-0001-0000-c000-000000000046"))
ICheckBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    CheckBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct CheckBox * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020881-0001-0000-c000-000000000046"))
IOptionButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    GroupBoxPtr GetGroupBox ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_GroupBox (
        struct GroupBox * * RHS ) = 0;
};

struct __declspec(uuid("00020882-0001-0000-c000-000000000046"))
IOptionButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    GroupBoxPtr GetGroupBox ( );
    OptionButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_GroupBox (
        struct GroupBox * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct OptionButton * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020883-0001-0000-c000-000000000046"))
IEditBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLinkedObject))
    _bstr_t LinkedObject;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    _bstr_t GetLinkedObject ( );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_InputType (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_InputType (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedObject (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_MultiLine (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MultiLine (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PasswordEdit (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PasswordEdit (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020884-0001-0000-c000-000000000046"))
IEditBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL RHS );
    EditBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    _variant_t Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_InputType (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_InputType (
        long RHS ) = 0;
    virtual void __stdcall _Dummy34 ( ) = 0;
    virtual HRESULT __stdcall get_MultiLine (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MultiLine (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PasswordEdit (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PasswordEdit (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct EditBox * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020885-0001-0000-c000-000000000046"))
IScrollBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Max (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Max (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Min (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Min (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_SmallChange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SmallChange (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LargeChange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_LargeChange (
        long RHS ) = 0;
};

struct __declspec(uuid("00020886-0001-0000-c000-000000000046"))
IScrollBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    ScrollBarPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Max (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Max (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Min (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Min (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_SmallChange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SmallChange (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LargeChange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_LargeChange (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct ScrollBar * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020887-0001-0000-c000-000000000046"))
IListBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddItem (
        VARIANT Text,
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedObject (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_List (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_List (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_ListCount (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ListFillRange (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ListFillRange (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ListIndex (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ListIndex (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MultiSelect (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MultiSelect (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_RemoveAllItems (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_RemoveItem (
        long Index,
        VARIANT Count,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Selected (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Selected (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        long RHS ) = 0;
};

struct __declspec(uuid("00020888-0001-0000-c000-000000000046"))
IListBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    ListBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddItem (
        VARIANT Text,
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual void __stdcall _Dummy31 ( ) = 0;
    virtual HRESULT __stdcall get_List (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_List (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual void __stdcall _Dummy33 ( ) = 0;
    virtual HRESULT __stdcall get_ListFillRange (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ListFillRange (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ListIndex (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ListIndex (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MultiSelect (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MultiSelect (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_RemoveAllItems (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_RemoveItem (
        long Index,
        VARIANT Count,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Selected (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Selected (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct ListBox * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020889-0001-0000-c000-000000000046"))
IGroupBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002088a-0001-0000-c000-000000000046"))
IGroupBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    GroupBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct GroupBox * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088b-0001-0000-c000-000000000046"))
IDropDown : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddItem (
        VARIANT Text,
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedObject (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_List (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_List (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_ListCount (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ListFillRange (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ListFillRange (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ListIndex (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ListIndex (
        long RHS ) = 0;
    virtual void __stdcall _Dummy36 ( ) = 0;
    virtual HRESULT __stdcall raw_RemoveAllItems (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_RemoveItem (
        long Index,
        VARIANT Count,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Selected (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Selected (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall get_DropDownLines (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_DropDownLines (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
};

struct __declspec(uuid("0002088c-0001-0000-c000-000000000046"))
IDropDowns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    DropDownPtr Add (
        double Left,
        double Top,
        double Width,
        double Height,
        const _variant_t & Editable = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddItem (
        VARIANT Text,
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual void __stdcall _Dummy31 ( ) = 0;
    virtual HRESULT __stdcall get_List (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_List (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual void __stdcall _Dummy33 ( ) = 0;
    virtual HRESULT __stdcall get_ListFillRange (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ListFillRange (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ListIndex (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ListIndex (
        long RHS ) = 0;
    virtual void __stdcall _Dummy36 ( ) = 0;
    virtual HRESULT __stdcall raw_RemoveAllItems (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_RemoveItem (
        long Index,
        VARIANT Count,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Selected (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Selected (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall get_DropDownLines (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_DropDownLines (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        VARIANT Editable,
        struct DropDown * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088d-0001-0000-c000-000000000046"))
ISpinner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Max (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Max (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Min (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Min (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_SmallChange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SmallChange (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        long RHS ) = 0;
};

struct __declspec(uuid("0002088e-0001-0000-c000-000000000046"))
ISpinners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    SpinnerPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Display3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Display3DShading (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Max (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Max (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Min (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Min (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_SmallChange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SmallChange (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct Spinner * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088f-0001-0000-c000-000000000046"))
IDialogFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual void __stdcall _Dummy4 ( ) = 0;
    virtual void __stdcall _Dummy5 ( ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual void __stdcall _Dummy7 ( ) = 0;
    virtual void __stdcall _Dummy8 ( ) = 0;
    virtual void __stdcall _Dummy9 ( ) = 0;
    virtual void __stdcall _Dummy10 ( ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual void __stdcall _Dummy17 ( ) = 0;
    virtual void __stdcall _Dummy18 ( ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual void __stdcall _Dummy20 ( ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual void __stdcall _Dummy23 ( ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual void __stdcall _Dummy25 ( ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
};

struct __declspec(uuid("00020890-0001-0000-c000-000000000046"))
ILabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual void __stdcall _Dummy33 ( ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020891-0001-0000-c000-000000000046"))
ILabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    LabelPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Accelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Accelerator (
        VARIANT RHS ) = 0;
    virtual void __stdcall _Dummy33 ( ) = 0;
    virtual HRESULT __stdcall get_PhoneticAccelerator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PhoneticAccelerator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct Label * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020894-0001-0000-c000-000000000046"))
IPanes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PanePtr _Default[];
    __declspec(property(get=GetItem))
    PanePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PanePtr GetItem (
        long Index );
    PanePtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        long Index,
        struct Pane * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        struct Pane * * RHS ) = 0;
};

struct __declspec(uuid("00020895-0001-0000-c000-000000000046"))
IPane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Activate ( );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long RHS );
    long GetScrollRow ( );
    void PutScrollRow (
        long RHS );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    RangePtr GetVisibleRange ( );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_LargeScroll (
        VARIANT Down,
        VARIANT Up,
        VARIANT ToRight,
        VARIANT ToLeft,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ScrollColumn (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ScrollColumn (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_ScrollRow (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ScrollRow (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_SmallScroll (
        VARIANT Down,
        VARIANT Up,
        VARIANT ToRight,
        VARIANT ToLeft,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_VisibleRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        VARIANT Start = vtMissing ) = 0;
};

struct __declspec(uuid("00020896-0001-0000-c000-000000000046"))
IScenarios : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ScenarioPtr Add (
        _bstr_t Name,
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing,
        const _variant_t & Comment = vtMissing,
        const _variant_t & Locked = vtMissing,
        const _variant_t & Hidden = vtMissing );
    long GetCount ( );
    _variant_t CreateSummary (
        enum XlSummaryReportType ReportType,
        const _variant_t & ResultCells = vtMissing );
    ScenarioPtr Item (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Source );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT ChangingCells,
        VARIANT Values,
        VARIANT Comment,
        VARIANT Locked,
        VARIANT Hidden,
        struct Scenario * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_CreateSummary (
        enum XlSummaryReportType ReportType,
        VARIANT ResultCells,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Scenario * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Merge (
        VARIANT Source,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020897-0001-0000-c000-000000000046"))
IScenario : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValues))
    _variant_t Values[];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetChangingCells))
    RangePtr ChangingCells;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ChangeScenario (
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing );
    RangePtr GetChangingCells ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t RHS );
    _variant_t Delete ( );
    VARIANT_BOOL GetHidden ( );
    void PutHidden (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t Show ( );
    _variant_t GetValues (
        const _variant_t & Index = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ChangeScenario (
        VARIANT ChangingCells,
        VARIANT Values,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ChangingCells (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Comment (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Comment (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Hidden (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Hidden (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Show (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Values (
        VARIANT Index,
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00020898-0001-0000-c000-000000000046"))
IGroupObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual void __stdcall _Dummy27 ( ) = 0;
    virtual void __stdcall _Dummy28 ( ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy30 ( ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadLength (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadLength (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadStyle (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadStyle (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadWidth (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadWidth (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual void __stdcall _Dummy36 ( ) = 0;
    virtual void __stdcall _Dummy37 ( ) = 0;
    virtual void __stdcall _Dummy38 ( ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual void __stdcall _Dummy41 ( ) = 0;
    virtual void __stdcall _Dummy42 ( ) = 0;
    virtual void __stdcall _Dummy43 ( ) = 0;
    virtual void __stdcall _Dummy44 ( ) = 0;
    virtual void __stdcall _Dummy45 ( ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual void __stdcall _Dummy47 ( ) = 0;
    virtual void __stdcall _Dummy48 ( ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual void __stdcall _Dummy50 ( ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual void __stdcall _Dummy52 ( ) = 0;
    virtual void __stdcall _Dummy53 ( ) = 0;
    virtual void __stdcall _Dummy54 ( ) = 0;
    virtual void __stdcall _Dummy55 ( ) = 0;
    virtual void __stdcall _Dummy56 ( ) = 0;
    virtual void __stdcall _Dummy57 ( ) = 0;
    virtual void __stdcall _Dummy58 ( ) = 0;
    virtual void __stdcall _Dummy59 ( ) = 0;
    virtual void __stdcall _Dummy60 ( ) = 0;
    virtual void __stdcall _Dummy61 ( ) = 0;
    virtual void __stdcall _Dummy62 ( ) = 0;
    virtual void __stdcall _Dummy63 ( ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual void __stdcall _Dummy65 ( ) = 0;
    virtual void __stdcall _Dummy66 ( ) = 0;
    virtual void __stdcall _Dummy67 ( ) = 0;
    virtual void __stdcall _Dummy68 ( ) = 0;
    virtual HRESULT __stdcall get_RoundedCorners (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RoundedCorners (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy70 ( ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy72 ( ) = 0;
    virtual void __stdcall _Dummy73 ( ) = 0;
    virtual HRESULT __stdcall raw_Ungroup (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy75 ( ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual void __stdcall _Dummy77 ( ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
};

struct __declspec(uuid("00020899-0001-0000-c000-000000000046"))
IGroupObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual void __stdcall _Dummy27 ( ) = 0;
    virtual void __stdcall _Dummy28 ( ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy30 ( ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadLength (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadLength (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadStyle (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadStyle (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadWidth (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadWidth (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual void __stdcall _Dummy36 ( ) = 0;
    virtual void __stdcall _Dummy37 ( ) = 0;
    virtual void __stdcall _Dummy38 ( ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual void __stdcall _Dummy41 ( ) = 0;
    virtual void __stdcall _Dummy42 ( ) = 0;
    virtual void __stdcall _Dummy43 ( ) = 0;
    virtual void __stdcall _Dummy44 ( ) = 0;
    virtual void __stdcall _Dummy45 ( ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual void __stdcall _Dummy47 ( ) = 0;
    virtual void __stdcall _Dummy48 ( ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual void __stdcall _Dummy50 ( ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual void __stdcall _Dummy52 ( ) = 0;
    virtual void __stdcall _Dummy53 ( ) = 0;
    virtual void __stdcall _Dummy54 ( ) = 0;
    virtual void __stdcall _Dummy55 ( ) = 0;
    virtual void __stdcall _Dummy56 ( ) = 0;
    virtual void __stdcall _Dummy57 ( ) = 0;
    virtual void __stdcall _Dummy58 ( ) = 0;
    virtual void __stdcall _Dummy59 ( ) = 0;
    virtual void __stdcall _Dummy60 ( ) = 0;
    virtual void __stdcall _Dummy61 ( ) = 0;
    virtual void __stdcall _Dummy62 ( ) = 0;
    virtual void __stdcall _Dummy63 ( ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual void __stdcall _Dummy65 ( ) = 0;
    virtual void __stdcall _Dummy66 ( ) = 0;
    virtual void __stdcall _Dummy67 ( ) = 0;
    virtual void __stdcall _Dummy68 ( ) = 0;
    virtual HRESULT __stdcall get_RoundedCorners (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RoundedCorners (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy70 ( ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy72 ( ) = 0;
    virtual void __stdcall _Dummy73 ( ) = 0;
    virtual HRESULT __stdcall raw_Ungroup (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy75 ( ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual void __stdcall _Dummy77 ( ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089a-0001-0000-c000-000000000046"))
ILine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadLength (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadLength (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadStyle (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadStyle (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadWidth (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadWidth (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
};

struct __declspec(uuid("0002089b-0001-0000-c000-000000000046"))
ILines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    LinePtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadLength (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadLength (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadStyle (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadStyle (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ArrowHeadWidth (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ArrowHeadWidth (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        struct Line * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089c-0001-0000-c000-000000000046"))
IRectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RoundedCorners (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RoundedCorners (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002089d-0001-0000-c000-000000000046"))
IRectangles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    RectanglePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RoundedCorners (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RoundedCorners (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct Rectangle * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089e-0001-0000-c000-000000000046"))
IOval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002089f-0001-0000-c000-000000000046"))
IOvals : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    OvalPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct Oval * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a0-0001-0000-c000-000000000046"))
IArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual void __stdcall _Dummy43 ( ) = 0;
};

struct __declspec(uuid("000208a1-0001-0000-c000-000000000046"))
IArcs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    ArcPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual void __stdcall _Dummy43 ( ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        struct Arc * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024410-0001-0000-c000-000000000046"))
IOLEObjectEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GotFocus ( );
    HRESULT LostFocus ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GotFocus ( ) = 0;
    virtual HRESULT __stdcall raw_LostFocus ( ) = 0;
};

struct __declspec(uuid("000208a2-0001-0000-c000-000000000046"))
_IOLEObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetOLEType))
    _variant_t OLEType;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Activate ( );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL RHS );
    IDispatchPtr GetObject ( );
    _variant_t GetOLEType ( );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t RHS );
    _variant_t Update ( );
    _variant_t Verb (
        enum XlOLEVerb Verb );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    _bstr_t GetprogID ( );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoLoad (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoLoad (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoUpdate (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoUpdate (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Object (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_OLEType (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_SourceName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_SourceName (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Update (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Verb (
        enum XlOLEVerb Verb,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ListFillRange (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ListFillRange (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_progID (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_AltHTML (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_AltHTML (
        BSTR RHS ) = 0;
};

struct __declspec(uuid("000208a3-0001-0000-c000-000000000046"))
IOLEObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL RHS );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t RHS );
    _OLEObjectPtr Add (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy30 ( ) = 0;
    virtual HRESULT __stdcall get_AutoLoad (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoLoad (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy32 ( ) = 0;
    virtual void __stdcall _Dummy33 ( ) = 0;
    virtual void __stdcall _Dummy34 ( ) = 0;
    virtual HRESULT __stdcall get_SourceName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_SourceName (
        BSTR RHS ) = 0;
    virtual void __stdcall _Dummy36 ( ) = 0;
    virtual void __stdcall _Dummy37 ( ) = 0;
    virtual void __stdcall _Dummy38 ( ) = 0;
    virtual void __stdcall _Dummy39 ( ) = 0;
    virtual void __stdcall _Dummy40 ( ) = 0;
    virtual void __stdcall _Dummy41 ( ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT ClassType,
        VARIANT Filename,
        VARIANT Link,
        VARIANT DisplayAsIcon,
        VARIANT IconFileName,
        VARIANT IconIndex,
        VARIANT IconLabel,
        VARIANT Left,
        VARIANT Top,
        VARIANT Width,
        VARIANT Height,
        struct _OLEObject * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a4-0001-0000-c000-000000000046"))
ITextBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_RoundedCorners (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RoundedCorners (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208a5-0001-0000-c000-000000000046"))
ITextBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    TextBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_RoundedCorners (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RoundedCorners (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct TextBox * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a7-0001-0000-c000-000000000046"))
IPictures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    PicturePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    PicturePtr Insert (
        _bstr_t Filename,
        const _variant_t & Converter = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PicturePtr Paste (
        const _variant_t & Link = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct Picture * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Insert (
        BSTR Filename,
        VARIANT Converter,
        struct Picture * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Paste (
        VARIANT Link,
        struct Picture * * RHS ) = 0;
};

struct __declspec(uuid("000208a8-0001-0000-c000-000000000046"))
IDrawing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetVertices))
    _variant_t Vertices[][];
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t AddVertex (
        double Left,
        double Top );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    _variant_t GetVertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_AddVertex (
        double Left,
        double Top,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        VARIANT Left,
        VARIANT Top,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Vertices (
        VARIANT Index1,
        VARIANT Index2,
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208a9-0001-0000-c000-000000000046"))
IDrawings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    DrawingPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        VARIANT_BOOL Closed );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary,
        VARIANT IgnoreUppercase,
        VARIANT AlwaysSuggest,
        VARIANT SpellLang,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy44 ( ) = 0;
    virtual HRESULT __stdcall raw_Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        VARIANT Left,
        VARIANT Top,
        VARIANT * RHS ) = 0;
    virtual void __stdcall _Dummy46 ( ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        VARIANT_BOOL Closed,
        struct Drawing * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208aa-0001-0000-c000-000000000046"))
IRoutingSlip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRecipients,put=PutRecipients))
    _variant_t Recipients[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _variant_t Subject;
    __declspec(property(get=GetMessage,put=PutMessage))
    _variant_t Message;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum XlRoutingSlipDelivery Delivery;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetStatus))
    enum XlRoutingSlipStatus Status;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlRoutingSlipDelivery GetDelivery ( );
    void PutDelivery (
        enum XlRoutingSlipDelivery RHS );
    _variant_t GetMessage ( );
    void PutMessage (
        const _variant_t & RHS );
    _variant_t GetRecipients (
        const _variant_t & Index = vtMissing );
    void PutRecipients (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _variant_t Reset ( );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutReturnWhenDone (
        VARIANT_BOOL RHS );
    enum XlRoutingSlipStatus GetStatus ( );
    _variant_t GetSubject ( );
    void PutSubject (
        const _variant_t & RHS );
    VARIANT_BOOL GetTrackStatus ( );
    void PutTrackStatus (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Delivery (
        enum XlRoutingSlipDelivery * RHS ) = 0;
    virtual HRESULT __stdcall put_Delivery (
        enum XlRoutingSlipDelivery RHS ) = 0;
    virtual HRESULT __stdcall get_Message (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Message (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Recipients (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Recipients (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Reset (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ReturnWhenDone (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ReturnWhenDone (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Status (
        enum XlRoutingSlipStatus * RHS ) = 0;
    virtual HRESULT __stdcall get_Subject (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Subject (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_TrackStatus (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TrackStatus (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208ab-0001-0000-c000-000000000046"))
IOutline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryColumn,put=PutSummaryColumn))
    enum XlSummaryColumn SummaryColumn;
    __declspec(property(get=GetSummaryRow,put=PutSummaryRow))
    enum XlSummaryRow SummaryRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutomaticStyles,put=PutAutomaticStyles))
    VARIANT_BOOL AutomaticStyles;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutomaticStyles ( );
    void PutAutomaticStyles (
        VARIANT_BOOL RHS );
    _variant_t ShowLevels (
        const _variant_t & RowLevels = vtMissing,
        const _variant_t & ColumnLevels = vtMissing );
    enum XlSummaryColumn GetSummaryColumn ( );
    void PutSummaryColumn (
        enum XlSummaryColumn RHS );
    enum XlSummaryRow GetSummaryRow ( );
    void PutSummaryRow (
        enum XlSummaryRow RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_AutomaticStyles (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutomaticStyles (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_ShowLevels (
        VARIANT RowLevels,
        VARIANT ColumnLevels,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_SummaryColumn (
        enum XlSummaryColumn * RHS ) = 0;
    virtual HRESULT __stdcall put_SummaryColumn (
        enum XlSummaryColumn RHS ) = 0;
    virtual HRESULT __stdcall get_SummaryRow (
        enum XlSummaryRow * RHS ) = 0;
    virtual HRESULT __stdcall put_SummaryRow (
        enum XlSummaryRow RHS ) = 0;
};

struct __declspec(uuid("000208ad-0001-0000-c000-000000000046"))
IModule : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    _variant_t InsertFile (
        const _variant_t & Filename,
        const _variant_t & Merge = vtMissing );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_CodeName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get__CodeName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put__CodeName (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Next (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_OnDoubleClick (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnDoubleClick (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetActivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetActivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetDeactivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetDeactivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PageSetup (
        struct PageSetup * * RHS ) = 0;
    virtual HRESULT __stdcall get_Previous (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        long lcid = 0 ) = 0;
    virtual void __stdcall _Dummy18 ( ) = 0;
    virtual HRESULT __stdcall raw__Protect (
        VARIANT Password = vtMissing,
        VARIANT DrawingObjects = vtMissing,
        VARIANT Contents = vtMissing,
        VARIANT Scenarios = vtMissing,
        VARIANT UserInterfaceOnly = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_ProtectContents (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual void __stdcall _Dummy21 ( ) = 0;
    virtual HRESULT __stdcall get_ProtectionMode (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual void __stdcall _Dummy23 ( ) = 0;
    virtual HRESULT __stdcall raw__SaveAs (
        BSTR Filename,
        VARIANT FileFormat = vtMissing,
        VARIANT Password = vtMissing,
        VARIANT WriteResPassword = vtMissing,
        VARIANT ReadOnlyRecommended = vtMissing,
        VARIANT CreateBackup = vtMissing,
        VARIANT AddToMru = vtMissing,
        VARIANT TextCodepage = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Unprotect (
        VARIANT Password = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Visible (
        long lcid,
        enum XlSheetVisibility * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        long lcid,
        enum XlSheetVisibility RHS ) = 0;
    virtual HRESULT __stdcall get_Shapes (
        struct Shapes * * RHS ) = 0;
    virtual HRESULT __stdcall raw_InsertFile (
        VARIANT Filename,
        VARIANT Merge,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SaveAs (
        BSTR Filename,
        VARIANT FileFormat = vtMissing,
        VARIANT Password = vtMissing,
        VARIANT WriteResPassword = vtMissing,
        VARIANT ReadOnlyRecommended = vtMissing,
        VARIANT CreateBackup = vtMissing,
        VARIANT AddToMru = vtMissing,
        VARIANT TextCodepage = vtMissing,
        VARIANT TextVisualLayout = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Protect (
        VARIANT Password = vtMissing,
        VARIANT DrawingObjects = vtMissing,
        VARIANT Contents = vtMissing,
        VARIANT Scenarios = vtMissing,
        VARIANT UserInterfaceOnly = vtMissing ) = 0;
};

struct __declspec(uuid("000208ae-0001-0000-c000-000000000046"))
IModules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ModulePtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Before,
        VARIANT After,
        VARIANT Count,
        struct Module * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long lcid = 0 ) = 0;
    virtual void __stdcall _Dummy7 ( ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        long lcid = 0 ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_HPageBreaks (
        struct HPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_VPageBreaks (
        struct VPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        VARIANT PrToFileName = vtMissing,
        long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208af-0001-0000-c000-000000000046"))
IDialogSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter[];
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining[];
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtection))
    ProtectionPtr Protection;
    __declspec(property(get=GetDialogFrame))
    DialogFramePtr DialogFrame;
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    _variant_t DefaultButton;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios[];
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft[];
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetCustomProperties))
    CustomPropertiesPtr CustomProperties;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks[];
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft[];
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetFocus,put=PutFocus))
    _variant_t Focus;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    VARIANT_BOOL GetProtectScenarios (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL RHS );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks (
        long lcid = 0 );
    void PutDisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoFilter (
        long lcid = 0 );
    void PutEnableAutoFilter (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection RHS );
    VARIANT_BOOL GetEnableOutlining (
        long lcid = 0 );
    void PutEnableOutlining (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnablePivotTable (
        long lcid = 0 );
    void PutEnablePivotTable (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing,
        long lcid = 0 );
    HRESULT _PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        long lcid = 0 );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL RHS );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft (
        long lcid = 0 );
    void Put_DisplayRightToLeft (
        long lcid,
        long RHS );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft (
        long lcid = 0 );
    void PutDisplayRightToLeft (
        long lcid,
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing,
        long lcid = 0 );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    CustomPropertiesPtr GetCustomProperties ( );
    SmartTagsPtr GetSmartTags ( );
    ProtectionPtr GetProtection ( );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & NoHTMLFormatting = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        const _variant_t & AllowFormattingCells = vtMissing,
        const _variant_t & AllowFormattingColumns = vtMissing,
        const _variant_t & AllowFormattingRows = vtMissing,
        const _variant_t & AllowInsertingColumns = vtMissing,
        const _variant_t & AllowInsertingRows = vtMissing,
        const _variant_t & AllowInsertingHyperlinks = vtMissing,
        const _variant_t & AllowDeletingColumns = vtMissing,
        const _variant_t & AllowDeletingRows = vtMissing,
        const _variant_t & AllowSorting = vtMissing,
        const _variant_t & AllowFiltering = vtMissing,
        const _variant_t & AllowUsingPivotTables = vtMissing );
    _variant_t GetDefaultButton ( );
    void PutDefaultButton (
        const _variant_t & RHS );
    DialogFramePtr GetDialogFrame ( );
    IDispatchPtr EditBoxes (
        const _variant_t & Index = vtMissing );
    _variant_t GetFocus ( );
    void PutFocus (
        const _variant_t & RHS );
    VARIANT_BOOL Hide (
        const _variant_t & Cancel = vtMissing );
    VARIANT_BOOL Show ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_CodeName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get__CodeName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put__CodeName (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Next (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_OnDoubleClick (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnDoubleClick (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetActivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetActivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnSheetDeactivate (
        long lcid,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnSheetDeactivate (
        long lcid,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PageSetup (
        struct PageSetup * * RHS ) = 0;
    virtual HRESULT __stdcall get_Previous (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview (
        VARIANT EnableChanges = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw__Protect (
        VARIANT Password = vtMissing,
        VARIANT DrawingObjects = vtMissing,
        VARIANT Contents = vtMissing,
        VARIANT Scenarios = vtMissing,
        VARIANT UserInterfaceOnly = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_ProtectContents (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectDrawingObjects (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectionMode (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectScenarios (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw__SaveAs (
        BSTR Filename,
        VARIANT FileFormat = vtMissing,
        VARIANT Password = vtMissing,
        VARIANT WriteResPassword = vtMissing,
        VARIANT ReadOnlyRecommended = vtMissing,
        VARIANT CreateBackup = vtMissing,
        VARIANT AddToMru = vtMissing,
        VARIANT TextCodepage = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Unprotect (
        VARIANT Password = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Visible (
        long lcid,
        enum XlSheetVisibility * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        long lcid,
        enum XlSheetVisibility RHS ) = 0;
    virtual HRESULT __stdcall get_Shapes (
        struct Shapes * * RHS ) = 0;
    virtual void __stdcall _Dummy29 ( ) = 0;
    virtual HRESULT __stdcall raw_Arcs (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy31 ( ) = 0;
    virtual void __stdcall _Dummy32 ( ) = 0;
    virtual HRESULT __stdcall raw_Buttons (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy34 ( ) = 0;
    virtual HRESULT __stdcall get_EnableCalculation (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableCalculation (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy36 ( ) = 0;
    virtual HRESULT __stdcall raw_ChartObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_CheckSpelling (
        VARIANT CustomDictionary = vtMissing,
        VARIANT IgnoreUppercase = vtMissing,
        VARIANT AlwaysSuggest = vtMissing,
        VARIANT SpellLang = vtMissing,
        long lcid = 0 ) = 0;
    virtual void __stdcall _Dummy40 ( ) = 0;
    virtual void __stdcall _Dummy41 ( ) = 0;
    virtual void __stdcall _Dummy42 ( ) = 0;
    virtual void __stdcall _Dummy43 ( ) = 0;
    virtual void __stdcall _Dummy44 ( ) = 0;
    virtual void __stdcall _Dummy45 ( ) = 0;
    virtual HRESULT __stdcall get_DisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Drawings (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_DrawingObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_DropDowns (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_EnableAutoFilter (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableAutoFilter (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableSelection (
        enum XlEnableSelection * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableSelection (
        enum XlEnableSelection RHS ) = 0;
    virtual HRESULT __stdcall get_EnableOutlining (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableOutlining (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnablePivotTable (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnablePivotTable (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Evaluate (
        VARIANT Name,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw__Evaluate (
        VARIANT Name,
        long lcid,
        VARIANT * RHS ) = 0;
    virtual void __stdcall _Dummy56 ( ) = 0;
    virtual HRESULT __stdcall raw_ResetAllPageBreaks ( ) = 0;
    virtual HRESULT __stdcall raw_GroupBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_GroupObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Labels (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Lines (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ListBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Names (
        struct Names * * RHS ) = 0;
    virtual HRESULT __stdcall raw_OLEObjects (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy65 ( ) = 0;
    virtual void __stdcall _Dummy66 ( ) = 0;
    virtual void __stdcall _Dummy67 ( ) = 0;
    virtual HRESULT __stdcall raw_OptionButtons (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy69 ( ) = 0;
    virtual HRESULT __stdcall raw_Ovals (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Paste (
        VARIANT Destination = vtMissing,
        VARIANT Link = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw__PasteSpecial (
        VARIANT Format = vtMissing,
        VARIANT Link = vtMissing,
        VARIANT DisplayAsIcon = vtMissing,
        VARIANT IconFileName = vtMissing,
        VARIANT IconIndex = vtMissing,
        VARIANT IconLabel = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Pictures (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy74 ( ) = 0;
    virtual void __stdcall _Dummy75 ( ) = 0;
    virtual void __stdcall _Dummy76 ( ) = 0;
    virtual HRESULT __stdcall raw_Rectangles (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy78 ( ) = 0;
    virtual void __stdcall _Dummy79 ( ) = 0;
    virtual HRESULT __stdcall get_ScrollArea (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ScrollArea (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_ScrollBars (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy82 ( ) = 0;
    virtual void __stdcall _Dummy83 ( ) = 0;
    virtual HRESULT __stdcall raw_Spinners (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy85 ( ) = 0;
    virtual void __stdcall _Dummy86 ( ) = 0;
    virtual HRESULT __stdcall raw_TextBoxes (
        VARIANT Index,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy88 ( ) = 0;
    virtual void __stdcall _Dummy89 ( ) = 0;
    virtual void __stdcall _Dummy90 ( ) = 0;
    virtual HRESULT __stdcall get_HPageBreaks (
        struct HPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_VPageBreaks (
        struct VPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_QueryTables (
        struct QueryTables * * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayPageBreaks (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayPageBreaks (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Comments (
        struct Comments * * RHS ) = 0;
    virtual HRESULT __stdcall get_Hyperlinks (
        struct Hyperlinks * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearCircles ( ) = 0;
    virtual HRESULT __stdcall raw_CircleInvalid ( ) = 0;
    virtual HRESULT __stdcall get__DisplayRightToLeft (
        long lcid,
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__DisplayRightToLeft (
        long lcid,
        long RHS ) = 0;
    virtual HRESULT __stdcall get_AutoFilter (
        struct AutoFilter * * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayRightToLeft (
        long lcid,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayRightToLeft (
        long lcid,
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Scripts (
        struct Office::Scripts * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        VARIANT PrToFileName = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw__CheckSpelling (
        VARIANT CustomDictionary = vtMissing,
        VARIANT IgnoreUppercase = vtMissing,
        VARIANT AlwaysSuggest = vtMissing,
        VARIANT SpellLang = vtMissing,
        VARIANT IgnoreFinalYaa = vtMissing,
        VARIANT SpellScript = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Tab (
        struct Tab * * RHS ) = 0;
    virtual HRESULT __stdcall get_MailEnvelope (
        struct Office::IMsoEnvelopeVB * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SaveAs (
        BSTR Filename,
        VARIANT FileFormat = vtMissing,
        VARIANT Password = vtMissing,
        VARIANT WriteResPassword = vtMissing,
        VARIANT ReadOnlyRecommended = vtMissing,
        VARIANT CreateBackup = vtMissing,
        VARIANT AddToMru = vtMissing,
        VARIANT TextCodepage = vtMissing,
        VARIANT TextVisualLayout = vtMissing,
        VARIANT Local = vtMissing ) = 0;
    virtual HRESULT __stdcall get_CustomProperties (
        struct CustomProperties * * RHS ) = 0;
    virtual HRESULT __stdcall get_SmartTags (
        struct SmartTags * * RHS ) = 0;
    virtual HRESULT __stdcall get_Protection (
        struct Protection * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PasteSpecial (
        VARIANT Format = vtMissing,
        VARIANT Link = vtMissing,
        VARIANT DisplayAsIcon = vtMissing,
        VARIANT IconFileName = vtMissing,
        VARIANT IconIndex = vtMissing,
        VARIANT IconLabel = vtMissing,
        VARIANT NoHTMLFormatting = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Protect (
        VARIANT Password = vtMissing,
        VARIANT DrawingObjects = vtMissing,
        VARIANT Contents = vtMissing,
        VARIANT Scenarios = vtMissing,
        VARIANT UserInterfaceOnly = vtMissing,
        VARIANT AllowFormattingCells = vtMissing,
        VARIANT AllowFormattingColumns = vtMissing,
        VARIANT AllowFormattingRows = vtMissing,
        VARIANT AllowInsertingColumns = vtMissing,
        VARIANT AllowInsertingRows = vtMissing,
        VARIANT AllowInsertingHyperlinks = vtMissing,
        VARIANT AllowDeletingColumns = vtMissing,
        VARIANT AllowDeletingRows = vtMissing,
        VARIANT AllowSorting = vtMissing,
        VARIANT AllowFiltering = vtMissing,
        VARIANT AllowUsingPivotTables = vtMissing ) = 0;
    virtual HRESULT __stdcall get_DefaultButton (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_DefaultButton (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_DialogFrame (
        struct DialogFrame * * RHS ) = 0;
    virtual HRESULT __stdcall raw_EditBoxes (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Focus (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Focus (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Hide (
        VARIANT Cancel,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Show (
        VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("000208b0-0001-0000-c000-000000000046"))
IDialogSheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DialogSheetPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Before,
        VARIANT After,
        VARIANT Count,
        struct DialogSheet * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long lcid = 0 ) = 0;
    virtual void __stdcall _Dummy7 ( ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview (
        VARIANT EnableChanges = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_HPageBreaks (
        struct HPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_VPageBreaks (
        struct VPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        VARIANT PrToFileName = vtMissing,
        long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208b1-0001-0000-c000-000000000046"))
IWorksheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type,
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Before,
        VARIANT After,
        VARIANT Count,
        VARIANT Type,
        long lcid,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Move (
        VARIANT Before = vtMissing,
        VARIANT After = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw__PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_PrintPreview (
        VARIANT EnableChanges = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing,
        long lcid = 0 ) = 0;
    virtual HRESULT __stdcall get_HPageBreaks (
        struct HPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_VPageBreaks (
        struct VPageBreaks * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT From = vtMissing,
        VARIANT To = vtMissing,
        VARIANT Copies = vtMissing,
        VARIANT Preview = vtMissing,
        VARIANT ActivePrinter = vtMissing,
        VARIANT PrintToFile = vtMissing,
        VARIANT Collate = vtMissing,
        VARIANT PrToFileName = vtMissing,
        long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208b4-0001-0000-c000-000000000046"))
IPageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    double LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    double RightMargin;
    __declspec(property(get=GetPrintErrors,put=PutPrintErrors))
    enum XlPrintErrors PrintErrors;
    __declspec(property(get=GetCenterHeaderPicture))
    GraphicPtr CenterHeaderPicture;
    __declspec(property(get=GetCenterFooterPicture))
    GraphicPtr CenterFooterPicture;
    __declspec(property(get=GetLeftHeaderPicture))
    GraphicPtr LeftHeaderPicture;
    __declspec(property(get=GetLeftFooterPicture))
    GraphicPtr LeftFooterPicture;
    __declspec(property(get=GetRightHeaderPicture))
    GraphicPtr RightHeaderPicture;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    double TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    double BottomMargin;
    __declspec(property(get=GetPrintHeadings,put=PutPrintHeadings))
    VARIANT_BOOL PrintHeadings;
    __declspec(property(get=GetPrintGridlines,put=PutPrintGridlines))
    VARIANT_BOOL PrintGridlines;
    __declspec(property(get=GetCenterHorizontally,put=PutCenterHorizontally))
    VARIANT_BOOL CenterHorizontally;
    __declspec(property(get=GetOrder,put=PutOrder))
    enum XlOrder Order;
    __declspec(property(get=GetCenterVertically,put=PutCenterVertically))
    VARIANT_BOOL CenterVertically;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum XlPaperSize PaperSize;
    __declspec(property(get=GetFirstPageNumber,put=PutFirstPageNumber))
    long FirstPageNumber;
    __declspec(property(get=GetBlackAndWhite,put=PutBlackAndWhite))
    VARIANT_BOOL BlackAndWhite;
    __declspec(property(get=GetCenterFooter,put=PutCenterFooter))
    _bstr_t CenterFooter;
    __declspec(property(get=GetCenterHeader,put=PutCenterHeader))
    _bstr_t CenterHeader;
    __declspec(property(get=GetChartSize,put=PutChartSize))
    enum XlObjectSize ChartSize;
    __declspec(property(get=GetDraft,put=PutDraft))
    VARIANT_BOOL Draft;
    __declspec(property(get=GetPrintNotes,put=PutPrintNotes))
    VARIANT_BOOL PrintNotes;
    __declspec(property(get=GetPrintQuality,put=PutPrintQuality))
    _variant_t PrintQuality[];
    __declspec(property(get=GetPrintTitleColumns,put=PutPrintTitleColumns))
    _bstr_t PrintTitleColumns;
    __declspec(property(get=GetPrintTitleRows,put=PutPrintTitleRows))
    _bstr_t PrintTitleRows;
    __declspec(property(get=GetRightFooter,put=PutRightFooter))
    _bstr_t RightFooter;
    __declspec(property(get=GetRightHeader,put=PutRightHeader))
    _bstr_t RightHeader;
    __declspec(property(get=GetFitToPagesTall,put=PutFitToPagesTall))
    _variant_t FitToPagesTall;
    __declspec(property(get=GetFitToPagesWide,put=PutFitToPagesWide))
    _variant_t FitToPagesWide;
    __declspec(property(get=GetFooterMargin,put=PutFooterMargin))
    double FooterMargin;
    __declspec(property(get=GetHeaderMargin,put=PutHeaderMargin))
    double HeaderMargin;
    __declspec(property(get=GetLeftFooter,put=PutLeftFooter))
    _bstr_t LeftFooter;
    __declspec(property(get=GetPrintComments,put=PutPrintComments))
    enum XlPrintLocation PrintComments;
    __declspec(property(get=GetLeftHeader,put=PutLeftHeader))
    _bstr_t LeftHeader;
    __declspec(property(get=GetPrintArea,put=PutPrintArea))
    _bstr_t PrintArea;
    __declspec(property(get=GetRightFooterPicture))
    GraphicPtr RightFooterPicture;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPageOrientation Orientation;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBlackAndWhite ( );
    void PutBlackAndWhite (
        VARIANT_BOOL RHS );
    double GetBottomMargin ( );
    void PutBottomMargin (
        double RHS );
    _bstr_t GetCenterFooter ( );
    void PutCenterFooter (
        _bstr_t RHS );
    _bstr_t GetCenterHeader ( );
    void PutCenterHeader (
        _bstr_t RHS );
    VARIANT_BOOL GetCenterHorizontally ( );
    void PutCenterHorizontally (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCenterVertically ( );
    void PutCenterVertically (
        VARIANT_BOOL RHS );
    enum XlObjectSize GetChartSize ( );
    void PutChartSize (
        enum XlObjectSize RHS );
    VARIANT_BOOL GetDraft ( );
    void PutDraft (
        VARIANT_BOOL RHS );
    long GetFirstPageNumber ( );
    void PutFirstPageNumber (
        long RHS );
    _variant_t GetFitToPagesTall ( );
    void PutFitToPagesTall (
        const _variant_t & RHS );
    _variant_t GetFitToPagesWide ( );
    void PutFitToPagesWide (
        const _variant_t & RHS );
    double GetFooterMargin ( );
    void PutFooterMargin (
        double RHS );
    double GetHeaderMargin ( );
    void PutHeaderMargin (
        double RHS );
    _bstr_t GetLeftFooter ( );
    void PutLeftFooter (
        _bstr_t RHS );
    _bstr_t GetLeftHeader ( );
    void PutLeftHeader (
        _bstr_t RHS );
    double GetLeftMargin ( );
    void PutLeftMargin (
        double RHS );
    enum XlOrder GetOrder ( );
    void PutOrder (
        enum XlOrder RHS );
    enum XlPageOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPageOrientation RHS );
    enum XlPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum XlPaperSize RHS );
    _bstr_t GetPrintArea ( );
    void PutPrintArea (
        _bstr_t RHS );
    VARIANT_BOOL GetPrintGridlines ( );
    void PutPrintGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPrintHeadings ( );
    void PutPrintHeadings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPrintNotes ( );
    void PutPrintNotes (
        VARIANT_BOOL RHS );
    _variant_t GetPrintQuality (
        const _variant_t & Index = vtMissing );
    void PutPrintQuality (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetPrintTitleColumns ( );
    void PutPrintTitleColumns (
        _bstr_t RHS );
    _bstr_t GetPrintTitleRows ( );
    void PutPrintTitleRows (
        _bstr_t RHS );
    _bstr_t GetRightFooter ( );
    void PutRightFooter (
        _bstr_t RHS );
    _bstr_t GetRightHeader ( );
    void PutRightHeader (
        _bstr_t RHS );
    double GetRightMargin ( );
    void PutRightMargin (
        double RHS );
    double GetTopMargin ( );
    void PutTopMargin (
        double RHS );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & RHS );
    enum XlPrintLocation GetPrintComments ( );
    void PutPrintComments (
        enum XlPrintLocation RHS );
    enum XlPrintErrors GetPrintErrors ( );
    void PutPrintErrors (
        enum XlPrintErrors RHS );
    GraphicPtr GetCenterHeaderPicture ( );
    GraphicPtr GetCenterFooterPicture ( );
    GraphicPtr GetLeftHeaderPicture ( );
    GraphicPtr GetLeftFooterPicture ( );
    GraphicPtr GetRightHeaderPicture ( );
    GraphicPtr GetRightFooterPicture ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BlackAndWhite (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_BlackAndWhite (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_BottomMargin (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_BottomMargin (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_CenterFooter (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_CenterFooter (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_CenterHeader (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_CenterHeader (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_CenterHorizontally (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CenterHorizontally (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CenterVertically (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CenterVertically (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ChartSize (
        enum XlObjectSize * RHS ) = 0;
    virtual HRESULT __stdcall put_ChartSize (
        enum XlObjectSize RHS ) = 0;
    virtual HRESULT __stdcall get_Draft (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Draft (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_FirstPageNumber (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_FirstPageNumber (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_FitToPagesTall (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_FitToPagesTall (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_FitToPagesWide (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_FitToPagesWide (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_FooterMargin (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_FooterMargin (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_HeaderMargin (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_HeaderMargin (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_LeftFooter (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LeftFooter (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_LeftHeader (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LeftHeader (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_LeftMargin (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_LeftMargin (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Order (
        enum XlOrder * RHS ) = 0;
    virtual HRESULT __stdcall put_Order (
        enum XlOrder RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum XlPageOrientation * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum XlPageOrientation RHS ) = 0;
    virtual HRESULT __stdcall get_PaperSize (
        enum XlPaperSize * RHS ) = 0;
    virtual HRESULT __stdcall put_PaperSize (
        enum XlPaperSize RHS ) = 0;
    virtual HRESULT __stdcall get_PrintArea (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintArea (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PrintGridlines (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintGridlines (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PrintHeadings (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintHeadings (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PrintNotes (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintNotes (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PrintQuality (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintQuality (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_PrintTitleColumns (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintTitleColumns (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_PrintTitleRows (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintTitleRows (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_RightFooter (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_RightFooter (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_RightHeader (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_RightHeader (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_RightMargin (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_RightMargin (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopMargin (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_TopMargin (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Zoom (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Zoom (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintComments (
        enum XlPrintLocation * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintComments (
        enum XlPrintLocation RHS ) = 0;
    virtual HRESULT __stdcall get_PrintErrors (
        enum XlPrintErrors * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintErrors (
        enum XlPrintErrors RHS ) = 0;
    virtual HRESULT __stdcall get_CenterHeaderPicture (
        struct Graphic * * RHS ) = 0;
    virtual HRESULT __stdcall get_CenterFooterPicture (
        struct Graphic * * RHS ) = 0;
    virtual HRESULT __stdcall get_LeftHeaderPicture (
        struct Graphic * * RHS ) = 0;
    virtual HRESULT __stdcall get_LeftFooterPicture (
        struct Graphic * * RHS ) = 0;
    virtual HRESULT __stdcall get_RightHeaderPicture (
        struct Graphic * * RHS ) = 0;
    virtual HRESULT __stdcall get_RightFooterPicture (
        struct Graphic * * RHS ) = 0;
};

struct __declspec(uuid("000208b8-0001-0000-c000-000000000046"))
INames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    NamePtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & MacroType = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & NameLocal = vtMissing,
        const _variant_t & RefersToLocal = vtMissing,
        const _variant_t & CategoryLocal = vtMissing,
        const _variant_t & RefersToR1C1 = vtMissing,
        const _variant_t & RefersToR1C1Local = vtMissing );
    NamePtr Item (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        long lcid = 0 );
    NamePtr _Default (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Name,
        VARIANT RefersTo,
        VARIANT Visible,
        VARIANT MacroType,
        VARIANT ShortcutKey,
        VARIANT Category,
        VARIANT NameLocal,
        VARIANT RefersToLocal,
        VARIANT CategoryLocal,
        VARIANT RefersToR1C1,
        VARIANT RefersToR1C1Local,
        struct Name * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        VARIANT IndexLocal,
        VARIANT RefersTo,
        long lcid,
        struct Name * * RHS ) = 0;
    virtual HRESULT __stdcall raw__Default (
        VARIANT Index,
        VARIANT IndexLocal,
        VARIANT RefersTo,
        long lcid,
        struct Name * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208b9-0001-0000-c000-000000000046"))
IName : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category[];
    __declspec(property(get=GetCategoryLocal,put=PutCategoryLocal))
    _bstr_t CategoryLocal;
    __declspec(property(get=GetMacroType,put=PutMacroType))
    enum XlXLMMacroType MacroType;
    __declspec(property(get=GetRefersTo,put=PutRefersTo))
    _variant_t RefersTo[];
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetRefersToLocal,put=PutRefersToLocal))
    _variant_t RefersToLocal;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetRefersToR1C1,put=PutRefersToR1C1))
    _variant_t RefersToR1C1[];
    __declspec(property(get=GetRefersToR1C1Local,put=PutRefersToR1C1Local))
    _variant_t RefersToR1C1Local;
    __declspec(property(get=GetRefersToRange))
    RangePtr RefersToRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShortcutKey,put=PutShortcutKey))
    _bstr_t ShortcutKey;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    long GetIndex ( );
    _bstr_t GetCategory (
        long lcidIn = 0 );
    void PutCategory (
        long lcidIn,
        _bstr_t RHS );
    _bstr_t GetCategoryLocal ( );
    void PutCategoryLocal (
        _bstr_t RHS );
    HRESULT Delete ( );
    enum XlXLMMacroType GetMacroType ( );
    void PutMacroType (
        enum XlXLMMacroType RHS );
    _bstr_t GetName (
        long lcidIn = 0 );
    void PutName (
        long lcidIn,
        _bstr_t RHS );
    _variant_t GetRefersTo (
        long lcidIn = 0 );
    void PutRefersTo (
        long lcidIn,
        const _variant_t & RHS );
    _bstr_t GetShortcutKey ( );
    void PutShortcutKey (
        _bstr_t RHS );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t RHS );
    _variant_t GetRefersToLocal ( );
    void PutRefersToLocal (
        const _variant_t & RHS );
    _variant_t GetRefersToR1C1 (
        long lcidIn = 0 );
    void PutRefersToR1C1 (
        long lcidIn,
        const _variant_t & RHS );
    _variant_t GetRefersToR1C1Local ( );
    void PutRefersToR1C1Local (
        const _variant_t & RHS );
    RangePtr GetRefersToRange ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Category (
        long lcidIn,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Category (
        long lcidIn,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_CategoryLocal (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_CategoryLocal (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_MacroType (
        enum XlXLMMacroType * RHS ) = 0;
    virtual HRESULT __stdcall put_MacroType (
        enum XlXLMMacroType RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        long lcidIn,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        long lcidIn,
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_RefersTo (
        long lcidIn,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_RefersTo (
        long lcidIn,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ShortcutKey (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ShortcutKey (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_NameLocal (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_NameLocal (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_RefersToLocal (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_RefersToLocal (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_RefersToR1C1 (
        long lcidIn,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_RefersToR1C1 (
        long lcidIn,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_RefersToR1C1Local (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_RefersToR1C1Local (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_RefersToRange (
        struct Range * * RHS ) = 0;
};

struct __declspec(uuid("000208cf-0001-0000-c000-000000000046"))
IChartObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetChart))
    _ChartPtr Chart;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetProtectChartObject,put=PutProtectChartObject))
    VARIANT_BOOL ProtectChartObject;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t Activate ( );
    _ChartPtr GetChart ( );
    VARIANT_BOOL GetProtectChartObject ( );
    void PutProtectChartObject (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Chart (
        struct _Chart * * RHS ) = 0;
    virtual HRESULT __stdcall get_ProtectChartObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ProtectChartObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RoundedCorners (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RoundedCorners (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208d0-0001-0000-c000-000000000046"))
IChartObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    ChartObjectPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual void __stdcall _Dummy3 ( ) = 0;
    virtual HRESULT __stdcall raw_BringToFront (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Cut (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual void __stdcall _Dummy12 ( ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy15 ( ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_SendToBack (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual void __stdcall _Dummy22 ( ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual void __stdcall _Dummy25 ( ) = 0;
    virtual HRESULT __stdcall get_ShapeRange (
        struct ShapeRange * * RHS ) = 0;
    virtual void __stdcall _Dummy27 ( ) = 0;
    virtual void __stdcall _Dummy28 ( ) = 0;
    virtual void __stdcall _Dummy29 ( ) = 0;
    virtual HRESULT __stdcall get_RoundedCorners (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RoundedCorners (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        double Left,
        double Top,
        double Width,
        double Height,
        struct ChartObject * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct GroupObject * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208d1-0001-0000-c000-000000000046"))
IMailer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWhichAddress,put=PutWhichAddress))
    _variant_t WhichAddress;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBCCRecipients,put=PutBCCRecipients))
    _variant_t BCCRecipients;
    __declspec(property(get=GetCCRecipients,put=PutCCRecipients))
    _variant_t CCRecipients;
    __declspec(property(get=GetEnclosures,put=PutEnclosures))
    _variant_t Enclosures;
    __declspec(property(get=GetReceived))
    VARIANT_BOOL Received;
    __declspec(property(get=GetSendDateTime))
    DATE SendDateTime;
    __declspec(property(get=GetSender))
    _bstr_t Sender;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetToRecipients,put=PutToRecipients))
    _variant_t ToRecipients;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBCCRecipients ( );
    void PutBCCRecipients (
        const _variant_t & RHS );
    _variant_t GetCCRecipients ( );
    void PutCCRecipients (
        const _variant_t & RHS );
    _variant_t GetEnclosures ( );
    void PutEnclosures (
        const _variant_t & RHS );
    VARIANT_BOOL GetReceived ( );
    DATE GetSendDateTime ( );
    _bstr_t GetSender ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t RHS );
    _variant_t GetToRecipients ( );
    void PutToRecipients (
        const _variant_t & RHS );
    _variant_t GetWhichAddress ( );
    void PutWhichAddress (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BCCRecipients (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_BCCRecipients (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_CCRecipients (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_CCRecipients (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Enclosures (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Enclosures (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Received (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_SendDateTime (
        DATE * RHS ) = 0;
    virtual HRESULT __stdcall get_Sender (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Subject (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ToRecipients (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ToRecipients (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_WhichAddress (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_WhichAddress (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024422-0001-0000-c000-000000000046"))
ICustomViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomViewPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CustomViewPtr Item (
        const _variant_t & ViewName );
    CustomViewPtr Add (
        _bstr_t ViewName,
        const _variant_t & PrintSettings = vtMissing,
        const _variant_t & RowColSettings = vtMissing );
    CustomViewPtr Get_Default (
        const _variant_t & ViewName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT ViewName,
        struct CustomView * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR ViewName,
        VARIANT PrintSettings,
        VARIANT RowColSettings,
        struct CustomView * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT ViewName,
        struct CustomView * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024423-0001-0000-c000-000000000046"))
ICustomView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintSettings))
    VARIANT_BOOL PrintSettings;
    __declspec(property(get=GetRowColSettings))
    VARIANT_BOOL RowColSettings;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetPrintSettings ( );
    VARIANT_BOOL GetRowColSettings ( );
    HRESULT Show ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_PrintSettings (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_RowColSettings (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall raw_Show ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024424-0001-0000-c000-000000000046"))
IFormatConditions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FormatConditionPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FormatConditionPtr Item (
        const _variant_t & Index );
    FormatConditionPtr Add (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    FormatConditionPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct FormatCondition * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        enum XlFormatConditionType Type,
        VARIANT Operator,
        VARIANT Formula1,
        VARIANT Formula2,
        struct FormatCondition * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct FormatCondition * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024425-0001-0000-c000-000000000046"))
IFormatCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Modify (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetType ( );
    long GetOperator ( );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    InteriorPtr GetInterior ( );
    BordersPtr GetBorders ( );
    FontPtr GetFont ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Modify (
        enum XlFormatConditionType Type,
        VARIANT Operator = vtMissing,
        VARIANT Formula1 = vtMissing,
        VARIANT Formula2 = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Type (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Operator (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula1 (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula2 (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024426-0001-0000-c000-000000000046"))
IComments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CommentPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CommentPtr Item (
        long Index );
    CommentPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Comment * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        struct Comment * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024427-0001-0000-c000-000000000046"))
IComment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    ShapePtr GetShape ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    _bstr_t Text (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Overwrite = vtMissing );
    HRESULT Delete ( );
    CommentPtr Next ( );
    CommentPtr Previous ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Author (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Shape (
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Text (
        VARIANT Text,
        VARIANT Start,
        VARIANT Overwrite,
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Next (
        struct Comment * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Previous (
        struct Comment * * RHS ) = 0;
};

struct __declspec(uuid("0002441b-0001-0000-c000-000000000046"))
IRefreshEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeRefresh (
        VARIANT_BOOL * Cancel );
    HRESULT AfterRefresh (
        VARIANT_BOOL Success );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_BeforeRefresh (
        VARIANT_BOOL * Cancel ) = 0;
    virtual HRESULT __stdcall raw_AfterRefresh (
        VARIANT_BOOL Success ) = 0;
};

struct __declspec(uuid("00024428-0001-0000-c000-000000000046"))
_IQueryTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTextFilePromptOnRefresh,put=PutTextFilePromptOnRefresh))
    VARIANT_BOOL TextFilePromptOnRefresh;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetTextFileDecimalSeparator,put=PutTextFileDecimalSeparator))
    _bstr_t TextFileDecimalSeparator;
    __declspec(property(get=GetTextFileThousandsSeparator,put=PutTextFileThousandsSeparator))
    _bstr_t TextFileThousandsSeparator;
    __declspec(property(get=GetWebSelectionType,put=PutWebSelectionType))
    enum XlWebSelectionType WebSelectionType;
    __declspec(property(get=GetWebFormatting,put=PutWebFormatting))
    enum XlWebFormatting WebFormatting;
    __declspec(property(get=GetWebTables,put=PutWebTables))
    _bstr_t WebTables;
    __declspec(property(get=GetWebPreFormattedTextToColumns,put=PutWebPreFormattedTextToColumns))
    VARIANT_BOOL WebPreFormattedTextToColumns;
    __declspec(property(get=GetWebSingleBlockTextImport,put=PutWebSingleBlockTextImport))
    VARIANT_BOOL WebSingleBlockTextImport;
    __declspec(property(get=GetWebDisableDateRecognition,put=PutWebDisableDateRecognition))
    VARIANT_BOOL WebDisableDateRecognition;
    __declspec(property(get=GetWebConsecutiveDelimitersAsOne,put=PutWebConsecutiveDelimitersAsOne))
    VARIANT_BOOL WebConsecutiveDelimitersAsOne;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetSourceDataFile,put=PutSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;
    __declspec(property(get=GetDestination))
    RangePtr Destination;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFieldNames,put=PutFieldNames))
    VARIANT_BOOL FieldNames;
    __declspec(property(get=GetRowNumbers,put=PutRowNumbers))
    VARIANT_BOOL RowNumbers;
    __declspec(property(get=GetFillAdjacentFormulas,put=PutFillAdjacentFormulas))
    VARIANT_BOOL FillAdjacentFormulas;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRefreshing))
    VARIANT_BOOL Refreshing;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetFetchedRowOverflow))
    VARIANT_BOOL FetchedRowOverflow;
    __declspec(property(get=GetRefreshStyle,put=PutRefreshStyle))
    enum XlCellInsertionMode RefreshStyle;
    __declspec(property(get=GetPostText,put=PutPostText))
    _bstr_t PostText;
    __declspec(property(get=GetResultRange))
    RangePtr ResultRange;
    __declspec(property(get=GetParameters))
    ParametersPtr Parameters;
    __declspec(property(get=GetTablesOnlyFromHTML,put=PutTablesOnlyFromHTML))
    VARIANT_BOOL TablesOnlyFromHTML;
    __declspec(property(get=GetEnableEditing,put=PutEnableEditing))
    VARIANT_BOOL EnableEditing;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetWebDisableRedirections,put=PutWebDisableRedirections))
    VARIANT_BOOL WebDisableRedirections;
    __declspec(property(get=GetEditWebPage,put=PutEditWebPage))
    _variant_t EditWebPage;
    __declspec(property(get=GetTextFileTrailingMinusNumbers,put=PutTextFileTrailingMinusNumbers))
    VARIANT_BOOL TextFileTrailingMinusNumbers;
    __declspec(property(get=GetTextFilePlatform,put=PutTextFilePlatform))
    long TextFilePlatform;
    __declspec(property(get=GetTextFileStartRow,put=PutTextFileStartRow))
    long TextFileStartRow;
    __declspec(property(get=GetTextFileParseType,put=PutTextFileParseType))
    enum XlTextParsingType TextFileParseType;
    __declspec(property(get=GetTextFileTextQualifier,put=PutTextFileTextQualifier))
    enum XlTextQualifier TextFileTextQualifier;
    __declspec(property(get=GetTextFileConsecutiveDelimiter,put=PutTextFileConsecutiveDelimiter))
    VARIANT_BOOL TextFileConsecutiveDelimiter;
    __declspec(property(get=GetTextFileTabDelimiter,put=PutTextFileTabDelimiter))
    VARIANT_BOOL TextFileTabDelimiter;
    __declspec(property(get=GetTextFileSemicolonDelimiter,put=PutTextFileSemicolonDelimiter))
    VARIANT_BOOL TextFileSemicolonDelimiter;
    __declspec(property(get=GetTextFileCommaDelimiter,put=PutTextFileCommaDelimiter))
    VARIANT_BOOL TextFileCommaDelimiter;
    __declspec(property(get=GetTextFileSpaceDelimiter,put=PutTextFileSpaceDelimiter))
    VARIANT_BOOL TextFileSpaceDelimiter;
    __declspec(property(get=GetTextFileOtherDelimiter,put=PutTextFileOtherDelimiter))
    _bstr_t TextFileOtherDelimiter;
    __declspec(property(get=GetTextFileColumnDataTypes,put=PutTextFileColumnDataTypes))
    _variant_t TextFileColumnDataTypes;
    __declspec(property(get=GetTextFileFixedColumnWidths,put=PutTextFileFixedColumnWidths))
    _variant_t TextFileFixedColumnWidths;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetPreserveColumnInfo,put=PutPreserveColumnInfo))
    VARIANT_BOOL PreserveColumnInfo;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetFieldNames ( );
    void PutFieldNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRowNumbers ( );
    void PutRowNumbers (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetFillAdjacentFormulas ( );
    void PutFillAdjacentFormulas (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRefreshing ( );
    VARIANT_BOOL GetFetchedRowOverflow ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL RHS );
    HRESULT CancelRefresh ( );
    enum XlCellInsertionMode GetRefreshStyle ( );
    void PutRefreshStyle (
        enum XlCellInsertionMode RHS );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL RHS );
    RangePtr GetDestination ( );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & RHS );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & RHS );
    _bstr_t GetPostText ( );
    void PutPostText (
        _bstr_t RHS );
    RangePtr GetResultRange ( );
    HRESULT Delete ( );
    VARIANT_BOOL Refresh (
        const _variant_t & BackgroundQuery = vtMissing );
    ParametersPtr GetParameters ( );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * RHS );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTablesOnlyFromHTML ( );
    void PutTablesOnlyFromHTML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableEditing ( );
    void PutEnableEditing (
        VARIANT_BOOL RHS );
    long GetTextFilePlatform ( );
    void PutTextFilePlatform (
        long RHS );
    long GetTextFileStartRow ( );
    void PutTextFileStartRow (
        long RHS );
    enum XlTextParsingType GetTextFileParseType ( );
    void PutTextFileParseType (
        enum XlTextParsingType RHS );
    enum XlTextQualifier GetTextFileTextQualifier ( );
    void PutTextFileTextQualifier (
        enum XlTextQualifier RHS );
    VARIANT_BOOL GetTextFileConsecutiveDelimiter ( );
    void PutTextFileConsecutiveDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileTabDelimiter ( );
    void PutTextFileTabDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileSemicolonDelimiter ( );
    void PutTextFileSemicolonDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileCommaDelimiter ( );
    void PutTextFileCommaDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileSpaceDelimiter ( );
    void PutTextFileSpaceDelimiter (
        VARIANT_BOOL RHS );
    _bstr_t GetTextFileOtherDelimiter ( );
    void PutTextFileOtherDelimiter (
        _bstr_t RHS );
    _variant_t GetTextFileColumnDataTypes ( );
    void PutTextFileColumnDataTypes (
        const _variant_t & RHS );
    _variant_t GetTextFileFixedColumnWidths ( );
    void PutTextFileFixedColumnWidths (
        const _variant_t & RHS );
    VARIANT_BOOL GetPreserveColumnInfo ( );
    void PutPreserveColumnInfo (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL RHS );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & RHS );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType RHS );
    VARIANT_BOOL GetTextFilePromptOnRefresh ( );
    void PutTextFilePromptOnRefresh (
        VARIANT_BOOL RHS );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL RHS );
    _bstr_t GetTextFileDecimalSeparator ( );
    void PutTextFileDecimalSeparator (
        _bstr_t RHS );
    _bstr_t GetTextFileThousandsSeparator ( );
    void PutTextFileThousandsSeparator (
        _bstr_t RHS );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long RHS );
    HRESULT ResetTimer ( );
    enum XlWebSelectionType GetWebSelectionType ( );
    void PutWebSelectionType (
        enum XlWebSelectionType RHS );
    enum XlWebFormatting GetWebFormatting ( );
    void PutWebFormatting (
        enum XlWebFormatting RHS );
    _bstr_t GetWebTables ( );
    void PutWebTables (
        _bstr_t RHS );
    VARIANT_BOOL GetWebPreFormattedTextToColumns ( );
    void PutWebPreFormattedTextToColumns (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebSingleBlockTextImport ( );
    void PutWebSingleBlockTextImport (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebDisableDateRecognition ( );
    void PutWebDisableDateRecognition (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebConsecutiveDelimitersAsOne ( );
    void PutWebConsecutiveDelimitersAsOne (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebDisableRedirections ( );
    void PutWebDisableRedirections (
        VARIANT_BOOL RHS );
    _variant_t GetEditWebPage ( );
    void PutEditWebPage (
        const _variant_t & RHS );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t RHS );
    _bstr_t GetSourceDataFile ( );
    void PutSourceDataFile (
        _bstr_t RHS );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect RHS );
    VARIANT_BOOL GetTextFileTrailingMinusNumbers ( );
    void PutTextFileTrailingMinusNumbers (
        VARIANT_BOOL RHS );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_FieldNames (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_FieldNames (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RowNumbers (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RowNumbers (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_FillAdjacentFormulas (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_FillAdjacentFormulas (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasAutoFormat (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasAutoFormat (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RefreshOnFileOpen (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RefreshOnFileOpen (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Refreshing (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_FetchedRowOverflow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_BackgroundQuery (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_BackgroundQuery (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_CancelRefresh ( ) = 0;
    virtual HRESULT __stdcall get_RefreshStyle (
        enum XlCellInsertionMode * RHS ) = 0;
    virtual HRESULT __stdcall put_RefreshStyle (
        enum XlCellInsertionMode RHS ) = 0;
    virtual HRESULT __stdcall get_EnableRefresh (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableRefresh (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SavePassword (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SavePassword (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Destination (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Connection (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Connection (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Sql (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Sql (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PostText (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_PostText (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ResultRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Refresh (
        VARIANT BackgroundQuery,
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_Parameters (
        struct Parameters * * RHS ) = 0;
    virtual HRESULT __stdcall get_Recordset (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall putref_Recordset (
        IDispatch * RHS ) = 0;
    virtual HRESULT __stdcall get_SaveData (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SaveData (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TablesOnlyFromHTML (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TablesOnlyFromHTML (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EnableEditing (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableEditing (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TextFilePlatform (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFilePlatform (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileStartRow (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileStartRow (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileParseType (
        enum XlTextParsingType * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileParseType (
        enum XlTextParsingType RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileTextQualifier (
        enum XlTextQualifier * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileTextQualifier (
        enum XlTextQualifier RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileConsecutiveDelimiter (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileConsecutiveDelimiter (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileTabDelimiter (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileTabDelimiter (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileSemicolonDelimiter (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileSemicolonDelimiter (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileCommaDelimiter (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileCommaDelimiter (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileSpaceDelimiter (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileSpaceDelimiter (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileOtherDelimiter (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileOtherDelimiter (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileColumnDataTypes (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileColumnDataTypes (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileFixedColumnWidths (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileFixedColumnWidths (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PreserveColumnInfo (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PreserveColumnInfo (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_PreserveFormatting (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PreserveFormatting (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AdjustColumnWidth (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AdjustColumnWidth (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CommandText (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_CommandText (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_CommandType (
        enum XlCmdType * RHS ) = 0;
    virtual HRESULT __stdcall put_CommandType (
        enum XlCmdType RHS ) = 0;
    virtual HRESULT __stdcall get_TextFilePromptOnRefresh (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFilePromptOnRefresh (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_QueryType (
        enum XlQueryType * RHS ) = 0;
    virtual HRESULT __stdcall get_MaintainConnection (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MaintainConnection (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileDecimalSeparator (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileDecimalSeparator (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileThousandsSeparator (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileThousandsSeparator (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_RefreshPeriod (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_RefreshPeriod (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_ResetTimer ( ) = 0;
    virtual HRESULT __stdcall get_WebSelectionType (
        enum XlWebSelectionType * RHS ) = 0;
    virtual HRESULT __stdcall put_WebSelectionType (
        enum XlWebSelectionType RHS ) = 0;
    virtual HRESULT __stdcall get_WebFormatting (
        enum XlWebFormatting * RHS ) = 0;
    virtual HRESULT __stdcall put_WebFormatting (
        enum XlWebFormatting RHS ) = 0;
    virtual HRESULT __stdcall get_WebTables (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_WebTables (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_WebPreFormattedTextToColumns (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_WebPreFormattedTextToColumns (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_WebSingleBlockTextImport (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_WebSingleBlockTextImport (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_WebDisableDateRecognition (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_WebDisableDateRecognition (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_WebConsecutiveDelimitersAsOne (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_WebConsecutiveDelimitersAsOne (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_WebDisableRedirections (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_WebDisableRedirections (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EditWebPage (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_EditWebPage (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_SourceConnectionFile (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_SourceConnectionFile (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_SourceDataFile (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_SourceDataFile (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_RobustConnect (
        enum XlRobustConnect * RHS ) = 0;
    virtual HRESULT __stdcall put_RobustConnect (
        enum XlRobustConnect RHS ) = 0;
    virtual HRESULT __stdcall get_TextFileTrailingMinusNumbers (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TextFileTrailingMinusNumbers (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_SaveAsODC (
        BSTR ODCFileName,
        VARIANT Description = vtMissing,
        VARIANT Keywords = vtMissing ) = 0;
};

struct __declspec(uuid("00024429-0001-0000-c000-000000000046"))
IQueryTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _QueryTablePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    _QueryTablePtr Add (
        const _variant_t & Connection,
        struct Range * Destination,
        const _variant_t & Sql = vtMissing );
    _QueryTablePtr Item (
        const _variant_t & Index );
    _QueryTablePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Connection,
        struct Range * Destination,
        VARIANT Sql,
        struct _QueryTable * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct _QueryTable * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct _QueryTable * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442a-0001-0000-c000-000000000046"))
IParameter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceRange))
    RangePtr SourceRange;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetType))
    enum XlParameterType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum XlParameterDataType DataType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRefreshOnChange,put=PutRefreshOnChange))
    VARIANT_BOOL RefreshOnChange;
    __declspec(property(get=GetPromptString))
    _bstr_t PromptString;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlParameterDataType GetDataType ( );
    void PutDataType (
        enum XlParameterDataType RHS );
    enum XlParameterType GetType ( );
    _bstr_t GetPromptString ( );
    _variant_t GetValue ( );
    RangePtr GetSourceRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    HRESULT SetParam (
        enum XlParameterType Type,
        const _variant_t & Value );
    VARIANT_BOOL GetRefreshOnChange ( );
    void PutRefreshOnChange (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_DataType (
        enum XlParameterDataType * RHS ) = 0;
    virtual HRESULT __stdcall put_DataType (
        enum XlParameterDataType RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum XlParameterType * RHS ) = 0;
    virtual HRESULT __stdcall get_PromptString (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_SourceRange (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_SetParam (
        enum XlParameterType Type,
        VARIANT Value ) = 0;
    virtual HRESULT __stdcall get_RefreshOnChange (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RefreshOnChange (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002442b-0001-0000-c000-000000000046"))
IParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ParameterPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ParameterPtr Add (
        _bstr_t Name,
        const _variant_t & iDataType = vtMissing );
    long GetCount ( );
    ParameterPtr Item (
        const _variant_t & Index );
    ParameterPtr Get_Default (
        const _variant_t & Index );
    HRESULT Delete ( );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT iDataType,
        struct Parameter * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Parameter * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct Parameter * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442c-0001-0000-c000-000000000046"))
IODBCError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_SqlState (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_ErrorString (
        BSTR * RHS ) = 0;
};

struct __declspec(uuid("0002442d-0001-0000-c000-000000000046"))
IODBCErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ODBCErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ODBCErrorPtr Item (
        long Index );
    ODBCErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct ODBCError * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        struct ODBCError * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442f-0001-0000-c000-000000000046"))
IValidation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlertStyle))
    long AlertStyle;
    __declspec(property(get=GetIgnoreBlank,put=PutIgnoreBlank))
    VARIANT_BOOL IgnoreBlank;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    long IMEMode;
    __declspec(property(get=GetInCellDropdown,put=PutInCellDropdown))
    VARIANT_BOOL InCellDropdown;
    __declspec(property(get=GetErrorMessage,put=PutErrorMessage))
    _bstr_t ErrorMessage;
    __declspec(property(get=GetErrorTitle,put=PutErrorTitle))
    _bstr_t ErrorTitle;
    __declspec(property(get=GetInputMessage,put=PutInputMessage))
    _bstr_t InputMessage;
    __declspec(property(get=GetInputTitle,put=PutInputTitle))
    _bstr_t InputTitle;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetShowError,put=PutShowError))
    VARIANT_BOOL ShowError;
    __declspec(property(get=GetShowInput,put=PutShowInput))
    VARIANT_BOOL ShowInput;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Add (
        enum XlDVType Type,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetAlertStyle ( );
    VARIANT_BOOL GetIgnoreBlank ( );
    void PutIgnoreBlank (
        VARIANT_BOOL RHS );
    long GetIMEMode ( );
    void PutIMEMode (
        long RHS );
    VARIANT_BOOL GetInCellDropdown ( );
    void PutInCellDropdown (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    _bstr_t GetErrorMessage ( );
    void PutErrorMessage (
        _bstr_t RHS );
    _bstr_t GetErrorTitle ( );
    void PutErrorTitle (
        _bstr_t RHS );
    _bstr_t GetInputMessage ( );
    void PutInputMessage (
        _bstr_t RHS );
    _bstr_t GetInputTitle ( );
    void PutInputTitle (
        _bstr_t RHS );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    HRESULT Modify (
        const _variant_t & Type = vtMissing,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetOperator ( );
    VARIANT_BOOL GetShowError ( );
    void PutShowError (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowInput ( );
    void PutShowInput (
        VARIANT_BOOL RHS );
    long GetType ( );
    VARIANT_BOOL GetValue ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        enum XlDVType Type,
        VARIANT AlertStyle = vtMissing,
        VARIANT Operator = vtMissing,
        VARIANT Formula1 = vtMissing,
        VARIANT Formula2 = vtMissing ) = 0;
    virtual HRESULT __stdcall get_AlertStyle (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_IgnoreBlank (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IgnoreBlank (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IMEMode (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_IMEMode (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_InCellDropdown (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_InCellDropdown (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_ErrorMessage (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ErrorMessage (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ErrorTitle (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ErrorTitle (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_InputMessage (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_InputMessage (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_InputTitle (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_InputTitle (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Formula1 (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula2 (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Modify (
        VARIANT Type = vtMissing,
        VARIANT AlertStyle = vtMissing,
        VARIANT Operator = vtMissing,
        VARIANT Formula1 = vtMissing,
        VARIANT Formula2 = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Operator (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_ShowError (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowError (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowInput (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowInput (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("00024430-0001-0000-c000-000000000046"))
IHyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HyperlinkPtr _Default[];
    __declspec(property(get=GetItem))
    HyperlinkPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        IDispatch * Anchor,
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & ScreenTip = vtMissing,
        const _variant_t & TextToDisplay = vtMissing );
    long GetCount ( );
    HyperlinkPtr GetItem (
        const _variant_t & Index );
    HyperlinkPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        IDispatch * Anchor,
        BSTR Address,
        VARIANT SubAddress,
        VARIANT ScreenTip,
        VARIANT TextToDisplay,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct Hyperlink * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct Hyperlink * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024431-0001-0000-c000-000000000046"))
IHyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    RangePtr GetRange ( );
    ShapePtr GetShape ( );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t RHS );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t RHS );
    long GetType ( );
    HRESULT AddToFavorites ( );
    HRESULT Delete ( );
    HRESULT Follow (
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t RHS );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t RHS );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t RHS );
    HRESULT CreateNewDocument (
        _bstr_t Filename,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shape (
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall get_SubAddress (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_SubAddress (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Address (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Address (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Follow (
        VARIANT NewWindow = vtMissing,
        VARIANT AddHistory = vtMissing,
        VARIANT ExtraInfo = vtMissing,
        VARIANT Method = vtMissing,
        VARIANT HeaderInfo = vtMissing ) = 0;
    virtual HRESULT __stdcall get_EmailSubject (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_EmailSubject (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ScreenTip (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ScreenTip (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_TextToDisplay (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_TextToDisplay (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_CreateNewDocument (
        BSTR Filename,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite ) = 0;
};

struct __declspec(uuid("00024432-0001-0000-c000-000000000046"))
IAutoFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetFilters))
    FiltersPtr Filters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    FiltersPtr GetFilters ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Filters (
        struct Filters * * RHS ) = 0;
};

struct __declspec(uuid("00024433-0001-0000-c000-000000000046"))
IFilters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FilterPtr _Default[];
    __declspec(property(get=GetItem))
    FilterPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FilterPtr Get_Default (
        long Index );
    FilterPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        struct Filter * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        long Index,
        struct Filter * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024434-0001-0000-c000-000000000046"))
IFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOn))
    VARIANT_BOOL On;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCriteria1))
    _variant_t Criteria1;
    __declspec(property(get=GetOperator))
    enum XlAutoFilterOperator Operator;
    __declspec(property(get=GetCriteria2))
    _variant_t Criteria2;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOn ( );
    _variant_t GetCriteria1 ( );
    enum XlAutoFilterOperator GetOperator ( );
    _variant_t GetCriteria2 ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_On (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_Criteria1 (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Operator (
        enum XlAutoFilterOperator * RHS ) = 0;
    virtual HRESULT __stdcall get_Criteria2 (
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208d4-0001-0000-c000-000000000046"))
IAutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayAutoCorrectOptions,put=PutDisplayAutoCorrectOptions))
    VARIANT_BOOL DisplayAutoCorrectOptions;
    __declspec(property(get=GetCorrectSentenceCap,put=PutCorrectSentenceCap))
    VARIANT_BOOL CorrectSentenceCap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCorrectCapsLock,put=PutCorrectCapsLock))
    VARIANT_BOOL CorrectCapsLock;
    __declspec(property(get=GetJOEReplaceText,put=PutJOEReplaceText))
    VARIANT_BOOL JOEReplaceText;
    __declspec(property(get=GetTwoInitialCapitals,put=PutTwoInitialCapitals))
    VARIANT_BOOL TwoInitialCapitals;
    __declspec(property(get=GetCapitalizeNamesOfDays,put=PutCapitalizeNamesOfDays))
    VARIANT_BOOL CapitalizeNamesOfDays;
    __declspec(property(get=GetReplacementList,put=PutReplacementList))
    _variant_t ReplacementList[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddReplacement (
        _bstr_t What,
        _bstr_t Replacement );
    VARIANT_BOOL GetCapitalizeNamesOfDays ( );
    void PutCapitalizeNamesOfDays (
        VARIANT_BOOL RHS );
    _variant_t DeleteReplacement (
        _bstr_t What );
    _variant_t GetReplacementList (
        const _variant_t & Index = vtMissing );
    void PutReplacementList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    VARIANT_BOOL GetJOEReplaceText ( );
    void PutJOEReplaceText (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTwoInitialCapitals ( );
    void PutTwoInitialCapitals (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCorrectSentenceCap ( );
    void PutCorrectSentenceCap (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCorrectCapsLock ( );
    void PutCorrectCapsLock (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayAutoCorrectOptions ( );
    void PutDisplayAutoCorrectOptions (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddReplacement (
        BSTR What,
        BSTR Replacement,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_CapitalizeNamesOfDays (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CapitalizeNamesOfDays (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_DeleteReplacement (
        BSTR What,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ReplacementList (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ReplacementList (
        VARIANT Index,
        VARIANT RHS = vtMissing ) = 0;
    virtual HRESULT __stdcall get_JOEReplaceText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_JOEReplaceText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TwoInitialCapitals (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TwoInitialCapitals (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CorrectSentenceCap (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CorrectSentenceCap (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CorrectCapsLock (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CorrectCapsLock (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayAutoCorrectOptions (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayAutoCorrectOptions (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020854-0001-0000-c000-000000000046"))
IBorder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & RHS );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Color (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Color (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ColorIndex (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ColorIndex (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_LineStyle (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_LineStyle (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Weight (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Weight (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020870-0001-0000-c000-000000000046"))
IInterior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetPatternColorIndex,put=PutPatternColorIndex))
    _variant_t PatternColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    _variant_t InvertIfNegative;
    __declspec(property(get=GetPatternColor,put=PutPatternColor))
    _variant_t PatternColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPattern,put=PutPattern))
    _variant_t Pattern;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetInvertIfNegative ( );
    void PutInvertIfNegative (
        const _variant_t & RHS );
    _variant_t GetPattern ( );
    void PutPattern (
        const _variant_t & RHS );
    _variant_t GetPatternColor ( );
    void PutPatternColor (
        const _variant_t & RHS );
    _variant_t GetPatternColorIndex ( );
    void PutPatternColorIndex (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Color (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Color (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ColorIndex (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ColorIndex (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_InvertIfNegative (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_InvertIfNegative (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Pattern (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Pattern (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PatternColor (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PatternColor (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_PatternColorIndex (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PatternColorIndex (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024435-0001-0000-c000-000000000046"))
IChartFillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetBackColor))
    ChartColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor))
    ChartColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    long GradientVariant;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT UserPicture (
        const _variant_t & PictureFile = vtMissing,
        const _variant_t & PictureFormat = vtMissing,
        const _variant_t & PictureStackUnit = vtMissing,
        const _variant_t & PicturePlacement = vtMissing );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    ChartColorFormatPtr GetBackColor ( );
    ChartColorFormatPtr GetForeColor ( );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    long GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree ) = 0;
    virtual HRESULT __stdcall raw_TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant ) = 0;
    virtual HRESULT __stdcall raw_PresetTextured (
        enum Office::MsoPresetTexture PresetTexture ) = 0;
    virtual HRESULT __stdcall raw_Solid ( ) = 0;
    virtual HRESULT __stdcall raw_Patterned (
        enum Office::MsoPatternType Pattern ) = 0;
    virtual HRESULT __stdcall raw_UserPicture (
        VARIANT PictureFile = vtMissing,
        VARIANT PictureFormat = vtMissing,
        VARIANT PictureStackUnit = vtMissing,
        VARIANT PicturePlacement = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_UserTextured (
        BSTR TextureFile ) = 0;
    virtual HRESULT __stdcall raw_PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        struct ChartColorFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        struct ChartColorFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_GradientColorType (
        enum Office::MsoGradientColorType * RHS ) = 0;
    virtual HRESULT __stdcall get_GradientDegree (
        float * RHS ) = 0;
    virtual HRESULT __stdcall get_GradientStyle (
        enum Office::MsoGradientStyle * RHS ) = 0;
    virtual HRESULT __stdcall get_GradientVariant (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Pattern (
        enum Office::MsoPatternType * RHS ) = 0;
    virtual HRESULT __stdcall get_PresetGradientType (
        enum Office::MsoPresetGradientType * RHS ) = 0;
    virtual HRESULT __stdcall get_PresetTexture (
        enum Office::MsoPresetTexture * RHS ) = 0;
    virtual HRESULT __stdcall get_TextureName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_TextureType (
        enum Office::MsoTextureType * RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoFillType * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState RHS ) = 0;
};

struct __declspec(uuid("00024436-0001-0000-c000-000000000046"))
IChartColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    long _Default;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    long SchemeColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Getignorethis))
    long ignorethis;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetSchemeColor ( );
    void PutSchemeColor (
        long RHS );
    long Getignorethis ( );
    long Get_Default ( );
    long GetType ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_SchemeColor (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SchemeColor (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_ignorethis (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        long * RHS ) = 0;
};

struct __declspec(uuid("00020848-0001-0000-c000-000000000046"))
IAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisTitle))
    AxisTitlePtr AxisTitle;
    __declspec(property(get=GetDisplayUnit,put=PutDisplayUnit))
    enum XlDisplayUnit DisplayUnit;
    __declspec(property(get=GetDisplayUnitCustom,put=PutDisplayUnitCustom))
    double DisplayUnitCustom;
    __declspec(property(get=GetHasDisplayUnitLabel,put=PutHasDisplayUnitLabel))
    VARIANT_BOOL HasDisplayUnitLabel;
    __declspec(property(get=GetDisplayUnitLabel))
    DisplayUnitLabelPtr DisplayUnitLabel;
    __declspec(property(get=GetMajorGridlines))
    GridlinesPtr MajorGridlines;
    __declspec(property(get=GetMinorGridlines))
    GridlinesPtr MinorGridlines;
    __declspec(property(get=GetTickLabels))
    TickLabelsPtr TickLabels;
    __declspec(property(get=GetBaseUnit,put=PutBaseUnit))
    enum XlTimeUnit BaseUnit;
    __declspec(property(get=GetBaseUnitIsAuto,put=PutBaseUnitIsAuto))
    VARIANT_BOOL BaseUnitIsAuto;
    __declspec(property(get=GetMajorUnitScale,put=PutMajorUnitScale))
    enum XlTimeUnit MajorUnitScale;
    __declspec(property(get=GetMinorUnitScale,put=PutMinorUnitScale))
    enum XlTimeUnit MinorUnitScale;
    __declspec(property(get=GetCategoryType,put=PutCategoryType))
    enum XlCategoryType CategoryType;
    __declspec(property(get=GetHasMajorGridlines,put=PutHasMajorGridlines))
    VARIANT_BOOL HasMajorGridlines;
    __declspec(property(get=GetHasMinorGridlines,put=PutHasMinorGridlines))
    VARIANT_BOOL HasMinorGridlines;
    __declspec(property(get=GetMajorTickMark,put=PutMajorTickMark))
    enum XlTickMark MajorTickMark;
    __declspec(property(get=GetMinorTickMark,put=PutMinorTickMark))
    enum XlTickMark MinorTickMark;
    __declspec(property(get=GetTickLabelPosition,put=PutTickLabelPosition))
    enum XlTickLabelPosition TickLabelPosition;
    __declspec(property(get=GetTickLabelSpacing,put=PutTickLabelSpacing))
    long TickLabelSpacing;
    __declspec(property(get=GetType,put=PutType))
    enum XlAxisType Type;
    __declspec(property(get=GetTickMarkSpacing,put=PutTickMarkSpacing))
    long TickMarkSpacing;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    double MinimumScale;
    __declspec(property(get=GetMinimumScaleIsAuto,put=PutMinimumScaleIsAuto))
    VARIANT_BOOL MinimumScaleIsAuto;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    double MaximumScale;
    __declspec(property(get=GetMaximumScaleIsAuto,put=PutMaximumScaleIsAuto))
    VARIANT_BOOL MaximumScaleIsAuto;
    __declspec(property(get=GetMajorUnit,put=PutMajorUnit))
    double MajorUnit;
    __declspec(property(get=GetMajorUnitIsAuto,put=PutMajorUnitIsAuto))
    VARIANT_BOOL MajorUnitIsAuto;
    __declspec(property(get=GetMinorUnit,put=PutMinorUnit))
    double MinorUnit;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetMinorUnitIsAuto,put=PutMinorUnitIsAuto))
    VARIANT_BOOL MinorUnitIsAuto;
    __declspec(property(get=GetScaleType,put=PutScaleType))
    enum XlScaleType ScaleType;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetReversePlotOrder,put=PutReversePlotOrder))
    VARIANT_BOOL ReversePlotOrder;
    __declspec(property(get=GetAxisBetweenCategories,put=PutAxisBetweenCategories))
    VARIANT_BOOL AxisBetweenCategories;
    __declspec(property(get=GetAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetCrosses,put=PutCrosses))
    enum XlAxisCrosses Crosses;
    __declspec(property(get=GetCrossesAt,put=PutCrossesAt))
    double CrossesAt;
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCategoryNames,put=PutCategoryNames))
    _variant_t CategoryNames;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAxisBetweenCategories ( );
    void PutAxisBetweenCategories (
        VARIANT_BOOL RHS );
    enum XlAxisGroup GetAxisGroup ( );
    AxisTitlePtr GetAxisTitle ( );
    BorderPtr GetBorder ( );
    _variant_t GetCategoryNames ( );
    void PutCategoryNames (
        const _variant_t & RHS );
    enum XlAxisCrosses GetCrosses ( );
    void PutCrosses (
        enum XlAxisCrosses RHS );
    double GetCrossesAt ( );
    void PutCrossesAt (
        double RHS );
    _variant_t Delete ( );
    VARIANT_BOOL GetHasMajorGridlines ( );
    void PutHasMajorGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasMinorGridlines ( );
    void PutHasMinorGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasTitle ( );
    void PutHasTitle (
        VARIANT_BOOL RHS );
    GridlinesPtr GetMajorGridlines ( );
    enum XlTickMark GetMajorTickMark ( );
    void PutMajorTickMark (
        enum XlTickMark RHS );
    double GetMajorUnit ( );
    void PutMajorUnit (
        double RHS );
    VARIANT_BOOL GetMajorUnitIsAuto ( );
    void PutMajorUnitIsAuto (
        VARIANT_BOOL RHS );
    double GetMaximumScale ( );
    void PutMaximumScale (
        double RHS );
    VARIANT_BOOL GetMaximumScaleIsAuto ( );
    void PutMaximumScaleIsAuto (
        VARIANT_BOOL RHS );
    double GetMinimumScale ( );
    void PutMinimumScale (
        double RHS );
    VARIANT_BOOL GetMinimumScaleIsAuto ( );
    void PutMinimumScaleIsAuto (
        VARIANT_BOOL RHS );
    GridlinesPtr GetMinorGridlines ( );
    enum XlTickMark GetMinorTickMark ( );
    void PutMinorTickMark (
        enum XlTickMark RHS );
    double GetMinorUnit ( );
    void PutMinorUnit (
        double RHS );
    VARIANT_BOOL GetMinorUnitIsAuto ( );
    void PutMinorUnitIsAuto (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetReversePlotOrder ( );
    void PutReversePlotOrder (
        VARIANT_BOOL RHS );
    enum XlScaleType GetScaleType ( );
    void PutScaleType (
        enum XlScaleType RHS );
    _variant_t Select ( );
    enum XlTickLabelPosition GetTickLabelPosition ( );
    void PutTickLabelPosition (
        enum XlTickLabelPosition RHS );
    TickLabelsPtr GetTickLabels ( );
    long GetTickLabelSpacing ( );
    void PutTickLabelSpacing (
        long RHS );
    long GetTickMarkSpacing ( );
    void PutTickMarkSpacing (
        long RHS );
    enum XlAxisType GetType ( );
    void PutType (
        enum XlAxisType RHS );
    enum XlTimeUnit GetBaseUnit ( );
    void PutBaseUnit (
        enum XlTimeUnit RHS );
    VARIANT_BOOL GetBaseUnitIsAuto ( );
    void PutBaseUnitIsAuto (
        VARIANT_BOOL RHS );
    enum XlTimeUnit GetMajorUnitScale ( );
    void PutMajorUnitScale (
        enum XlTimeUnit RHS );
    enum XlTimeUnit GetMinorUnitScale ( );
    void PutMinorUnitScale (
        enum XlTimeUnit RHS );
    enum XlCategoryType GetCategoryType ( );
    void PutCategoryType (
        enum XlCategoryType RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    enum XlDisplayUnit GetDisplayUnit ( );
    void PutDisplayUnit (
        enum XlDisplayUnit RHS );
    double GetDisplayUnitCustom ( );
    void PutDisplayUnitCustom (
        double RHS );
    VARIANT_BOOL GetHasDisplayUnitLabel ( );
    void PutHasDisplayUnitLabel (
        VARIANT_BOOL RHS );
    DisplayUnitLabelPtr GetDisplayUnitLabel ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_AxisBetweenCategories (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AxisBetweenCategories (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AxisGroup (
        enum XlAxisGroup * RHS ) = 0;
    virtual HRESULT __stdcall get_AxisTitle (
        struct AxisTitle * * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_CategoryNames (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_CategoryNames (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Crosses (
        enum XlAxisCrosses * RHS ) = 0;
    virtual HRESULT __stdcall put_Crosses (
        enum XlAxisCrosses RHS ) = 0;
    virtual HRESULT __stdcall get_CrossesAt (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_CrossesAt (
        double RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_HasMajorGridlines (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasMajorGridlines (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasMinorGridlines (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasMinorGridlines (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasTitle (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasTitle (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MajorGridlines (
        struct Gridlines * * RHS ) = 0;
    virtual HRESULT __stdcall get_MajorTickMark (
        enum XlTickMark * RHS ) = 0;
    virtual HRESULT __stdcall put_MajorTickMark (
        enum XlTickMark RHS ) = 0;
    virtual HRESULT __stdcall get_MajorUnit (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_MajorUnit (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_MajorUnitIsAuto (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MajorUnitIsAuto (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MaximumScale (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_MaximumScale (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_MaximumScaleIsAuto (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MaximumScaleIsAuto (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MinimumScale (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_MinimumScale (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_MinimumScaleIsAuto (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MinimumScaleIsAuto (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MinorGridlines (
        struct Gridlines * * RHS ) = 0;
    virtual HRESULT __stdcall get_MinorTickMark (
        enum XlTickMark * RHS ) = 0;
    virtual HRESULT __stdcall put_MinorTickMark (
        enum XlTickMark RHS ) = 0;
    virtual HRESULT __stdcall get_MinorUnit (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_MinorUnit (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_MinorUnitIsAuto (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_MinorUnitIsAuto (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ReversePlotOrder (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ReversePlotOrder (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ScaleType (
        enum XlScaleType * RHS ) = 0;
    virtual HRESULT __stdcall put_ScaleType (
        enum XlScaleType RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_TickLabelPosition (
        enum XlTickLabelPosition * RHS ) = 0;
    virtual HRESULT __stdcall put_TickLabelPosition (
        enum XlTickLabelPosition RHS ) = 0;
    virtual HRESULT __stdcall get_TickLabels (
        struct TickLabels * * RHS ) = 0;
    virtual HRESULT __stdcall get_TickLabelSpacing (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_TickLabelSpacing (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_TickMarkSpacing (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_TickMarkSpacing (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum XlAxisType * RHS ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum XlAxisType RHS ) = 0;
    virtual HRESULT __stdcall get_BaseUnit (
        enum XlTimeUnit * RHS ) = 0;
    virtual HRESULT __stdcall put_BaseUnit (
        enum XlTimeUnit RHS ) = 0;
    virtual HRESULT __stdcall get_BaseUnitIsAuto (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_BaseUnitIsAuto (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MajorUnitScale (
        enum XlTimeUnit * RHS ) = 0;
    virtual HRESULT __stdcall put_MajorUnitScale (
        enum XlTimeUnit RHS ) = 0;
    virtual HRESULT __stdcall get_MinorUnitScale (
        enum XlTimeUnit * RHS ) = 0;
    virtual HRESULT __stdcall put_MinorUnitScale (
        enum XlTimeUnit RHS ) = 0;
    virtual HRESULT __stdcall get_CategoryType (
        enum XlCategoryType * RHS ) = 0;
    virtual HRESULT __stdcall put_CategoryType (
        enum XlCategoryType RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayUnit (
        enum XlDisplayUnit * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayUnit (
        enum XlDisplayUnit RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayUnitCustom (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayUnitCustom (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_HasDisplayUnitLabel (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasDisplayUnitLabel (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayUnitLabel (
        struct DisplayUnitLabel * * RHS ) = 0;
};

struct __declspec(uuid("00020849-0001-0000-c000-000000000046"))
IChartTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002084a-0001-0000-c000-000000000046"))
IAxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020859-0001-0000-c000-000000000046"))
IChartGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVaryByCategories,put=PutVaryByCategories))
    VARIANT_BOOL VaryByCategories;
    __declspec(property(get=GetHasDropLines,put=PutHasDropLines))
    VARIANT_BOOL HasDropLines;
    __declspec(property(get=GetHasHiLoLines,put=PutHasHiLoLines))
    VARIANT_BOOL HasHiLoLines;
    __declspec(property(get=GetFirstSliceAngle,put=PutFirstSliceAngle))
    long FirstSliceAngle;
    __declspec(property(get=GetHasRadarAxisLabels,put=PutHasRadarAxisLabels))
    VARIANT_BOOL HasRadarAxisLabels;
    __declspec(property(get=GetHasSeriesLines,put=PutHasSeriesLines))
    VARIANT_BOOL HasSeriesLines;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHasUpDownBars,put=PutHasUpDownBars))
    VARIANT_BOOL HasUpDownBars;
    __declspec(property(get=GetUpBars))
    UpBarsPtr UpBars;
    __declspec(property(get=GetDownBars))
    DownBarsPtr DownBars;
    __declspec(property(get=GetDropLines))
    DropLinesPtr DropLines;
    __declspec(property(get=GetHiLoLines))
    HiLoLinesPtr HiLoLines;
    __declspec(property(get=GetRadarAxisLabels))
    TickLabelsPtr RadarAxisLabels;
    __declspec(property(get=GetSeriesLines))
    SeriesLinesPtr SeriesLines;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSizeRepresents,put=PutSizeRepresents))
    enum XlSizeRepresents SizeRepresents;
    __declspec(property(get=GetBubbleScale,put=PutBubbleScale))
    long BubbleScale;
    __declspec(property(get=GetShowNegativeBubbles,put=PutShowNegativeBubbles))
    VARIANT_BOOL ShowNegativeBubbles;
    __declspec(property(get=GetSplitType,put=PutSplitType))
    enum XlChartSplitType SplitType;
    __declspec(property(get=GetSplitValue,put=PutSplitValue))
    _variant_t SplitValue;
    __declspec(property(get=GetSecondPlotSize,put=PutSecondPlotSize))
    long SecondPlotSize;
    __declspec(property(get=GetHas3DShading,put=PutHas3DShading))
    VARIANT_BOOL Has3DShading;
    __declspec(property(get=GetDoughnutHoleSize,put=PutDoughnutHoleSize))
    long DoughnutHoleSize;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType;
    __declspec(property(get=GetGapWidth,put=PutGapWidth))
    long GapWidth;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup RHS );
    long GetDoughnutHoleSize ( );
    void PutDoughnutHoleSize (
        long RHS );
    DownBarsPtr GetDownBars ( );
    DropLinesPtr GetDropLines ( );
    long GetFirstSliceAngle ( );
    void PutFirstSliceAngle (
        long RHS );
    long GetGapWidth ( );
    void PutGapWidth (
        long RHS );
    VARIANT_BOOL GetHasDropLines ( );
    void PutHasDropLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasHiLoLines ( );
    void PutHasHiLoLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasRadarAxisLabels ( );
    void PutHasRadarAxisLabels (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasSeriesLines ( );
    void PutHasSeriesLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasUpDownBars ( );
    void PutHasUpDownBars (
        VARIANT_BOOL RHS );
    HiLoLinesPtr GetHiLoLines ( );
    long GetIndex ( );
    long GetOverlap ( );
    void PutOverlap (
        long RHS );
    TickLabelsPtr GetRadarAxisLabels ( );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing );
    SeriesLinesPtr GetSeriesLines ( );
    long GetSubType ( );
    void PutSubType (
        long RHS );
    long GetType ( );
    void PutType (
        long RHS );
    UpBarsPtr GetUpBars ( );
    VARIANT_BOOL GetVaryByCategories ( );
    void PutVaryByCategories (
        VARIANT_BOOL RHS );
    enum XlSizeRepresents GetSizeRepresents ( );
    void PutSizeRepresents (
        enum XlSizeRepresents RHS );
    long GetBubbleScale ( );
    void PutBubbleScale (
        long RHS );
    VARIANT_BOOL GetShowNegativeBubbles ( );
    void PutShowNegativeBubbles (
        VARIANT_BOOL RHS );
    enum XlChartSplitType GetSplitType ( );
    void PutSplitType (
        enum XlChartSplitType RHS );
    _variant_t GetSplitValue ( );
    void PutSplitValue (
        const _variant_t & RHS );
    long GetSecondPlotSize ( );
    void PutSecondPlotSize (
        long RHS );
    VARIANT_BOOL GetHas3DShading ( );
    void PutHas3DShading (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_AxisGroup (
        enum XlAxisGroup * RHS ) = 0;
    virtual HRESULT __stdcall put_AxisGroup (
        enum XlAxisGroup RHS ) = 0;
    virtual HRESULT __stdcall get_DoughnutHoleSize (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_DoughnutHoleSize (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_DownBars (
        struct DownBars * * RHS ) = 0;
    virtual HRESULT __stdcall get_DropLines (
        struct DropLines * * RHS ) = 0;
    virtual HRESULT __stdcall get_FirstSliceAngle (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_FirstSliceAngle (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_GapWidth (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_GapWidth (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_HasDropLines (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasDropLines (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasHiLoLines (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasHiLoLines (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasRadarAxisLabels (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasRadarAxisLabels (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasSeriesLines (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasSeriesLines (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasUpDownBars (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasUpDownBars (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HiLoLines (
        struct HiLoLines * * RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Overlap (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Overlap (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_RadarAxisLabels (
        struct TickLabels * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SeriesCollection (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_SeriesLines (
        struct SeriesLines * * RHS ) = 0;
    virtual HRESULT __stdcall get_SubType (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SubType (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Type (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_UpBars (
        struct UpBars * * RHS ) = 0;
    virtual HRESULT __stdcall get_VaryByCategories (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_VaryByCategories (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SizeRepresents (
        enum XlSizeRepresents * RHS ) = 0;
    virtual HRESULT __stdcall put_SizeRepresents (
        enum XlSizeRepresents RHS ) = 0;
    virtual HRESULT __stdcall get_BubbleScale (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_BubbleScale (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_ShowNegativeBubbles (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowNegativeBubbles (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SplitType (
        enum XlChartSplitType * RHS ) = 0;
    virtual HRESULT __stdcall put_SplitType (
        enum XlChartSplitType RHS ) = 0;
    virtual HRESULT __stdcall get_SplitValue (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_SplitValue (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_SecondPlotSize (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SecondPlotSize (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Has3DShading (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Has3DShading (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002085a-0001-0000-c000-000000000046"))
IChartGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ChartGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct ChartGroup * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002085b-0001-0000-c000-000000000046"))
IAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    AxisPtr Item (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup,
        struct Axis * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020869-0001-0000-c000-000000000046"))
IPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PointPtr Item (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct Point * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002086a-0001-0000-c000-000000000046"))
IPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetHasDataLabel,put=PutHasDataLabel))
    VARIANT_BOOL HasDataLabel;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetSecondaryPlot,put=PutSecondaryPlot))
    VARIANT_BOOL SecondaryPlot;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    long GetExplosion ( );
    void PutExplosion (
        long RHS );
    VARIANT_BOOL GetHasDataLabel ( );
    void PutHasDataLabel (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    _variant_t Select ( );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSecondaryPlot ( );
    void PutSecondaryPlot (
        VARIANT_BOOL RHS );
    ChartFillFormatPtr GetFill ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__ApplyDataLabels (
        enum XlDataLabelsType Type,
        VARIANT LegendKey,
        VARIANT AutoText,
        VARIANT HasLeaderLines,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearFormats (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_DataLabel (
        struct DataLabel * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Explosion (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Explosion (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_HasDataLabel (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasDataLabel (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_InvertIfNegative (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_InvertIfNegative (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerBackgroundColor (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerBackgroundColor (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        enum XlColorIndex * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        enum XlColorIndex RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerForegroundColor (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerForegroundColor (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        enum XlColorIndex * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        enum XlColorIndex RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerSize (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerSize (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerStyle (
        enum XlMarkerStyle * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerStyle (
        enum XlMarkerStyle RHS ) = 0;
    virtual HRESULT __stdcall raw_Paste (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_PictureType (
        enum XlChartPictureType * RHS ) = 0;
    virtual HRESULT __stdcall put_PictureType (
        enum XlChartPictureType RHS ) = 0;
    virtual HRESULT __stdcall get_PictureUnit (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PictureUnit (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ApplyPictToSides (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ApplyPictToSides (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ApplyPictToFront (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ApplyPictToFront (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ApplyPictToEnd (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ApplyPictToEnd (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SecondaryPlot (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SecondaryPlot (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ApplyDataLabels (
        enum XlDataLabelsType Type,
        VARIANT LegendKey,
        VARIANT AutoText,
        VARIANT HasLeaderLines,
        VARIANT ShowSeriesName,
        VARIANT ShowCategoryName,
        VARIANT ShowValue,
        VARIANT ShowPercentage,
        VARIANT ShowBubbleSize,
        VARIANT Separator,
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("0002086b-0001-0000-c000-000000000046"))
ISeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetHasDataLabels,put=PutHasDataLabels))
    VARIANT_BOOL HasDataLabels;
    __declspec(property(get=GetHasLeaderLines,put=PutHasLeaderLines))
    VARIANT_BOOL HasLeaderLines;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetXValues,put=PutXValues))
    _variant_t XValues;
    __declspec(property(get=GetErrorBars))
    ErrorBarsPtr ErrorBars;
    __declspec(property(get=GetHasErrorBars,put=PutHasErrorBars))
    VARIANT_BOOL HasErrorBars;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetValues,put=PutValues))
    _variant_t Values;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetBubbleSizes,put=PutBubbleSizes))
    _variant_t BubbleSizes;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetPlotOrder,put=PutPlotOrder))
    long PlotOrder;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetHas3DEffect,put=PutHas3DEffect))
    VARIANT_BOOL Has3DEffect;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetLeaderLines))
    LeaderLinesPtr LeaderLines;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup RHS );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    IDispatchPtr DataLabels (
        const _variant_t & Index = vtMissing );
    _variant_t Delete ( );
    _variant_t ErrorBar (
        enum XlErrorBarDirection Direction,
        enum XlErrorBarInclude Include,
        enum XlErrorBarType Type,
        const _variant_t & Amount = vtMissing,
        const _variant_t & MinusValues = vtMissing );
    ErrorBarsPtr GetErrorBars ( );
    long GetExplosion ( );
    void PutExplosion (
        long RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaLocal (
        _bstr_t RHS );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        _bstr_t RHS );
    _bstr_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        _bstr_t RHS );
    VARIANT_BOOL GetHasDataLabels ( );
    void PutHasDataLabels (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasErrorBars ( );
    void PutHasErrorBars (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    long GetPlotOrder ( );
    void PutPlotOrder (
        long RHS );
    IDispatchPtr Points (
        const _variant_t & Index = vtMissing );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL RHS );
    IDispatchPtr Trendlines (
        const _variant_t & Index = vtMissing );
    long GetType ( );
    void PutType (
        long RHS );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType RHS );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType );
    _variant_t GetValues ( );
    void PutValues (
        const _variant_t & RHS );
    _variant_t GetXValues ( );
    void PutXValues (
        const _variant_t & RHS );
    _variant_t GetBubbleSizes ( );
    void PutBubbleSizes (
        const _variant_t & RHS );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape RHS );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHas3DEffect ( );
    void PutHas3DEffect (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasLeaderLines ( );
    void PutHasLeaderLines (
        VARIANT_BOOL RHS );
    LeaderLinesPtr GetLeaderLines ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw__ApplyDataLabels (
        enum XlDataLabelsType Type,
        VARIANT LegendKey,
        VARIANT AutoText,
        VARIANT HasLeaderLines,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_AxisGroup (
        enum XlAxisGroup * RHS ) = 0;
    virtual HRESULT __stdcall put_AxisGroup (
        enum XlAxisGroup RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearFormats (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_DataLabels (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ErrorBar (
        enum XlErrorBarDirection Direction,
        enum XlErrorBarInclude Include,
        enum XlErrorBarType Type,
        VARIANT Amount,
        VARIANT MinusValues,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ErrorBars (
        struct ErrorBars * * RHS ) = 0;
    virtual HRESULT __stdcall get_Explosion (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Explosion (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Formula (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaLocal (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaLocal (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaR1C1 (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaR1C1 (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaR1C1Local (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaR1C1Local (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_HasDataLabels (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasDataLabels (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasErrorBars (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasErrorBars (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_InvertIfNegative (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_InvertIfNegative (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerBackgroundColor (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerBackgroundColor (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        enum XlColorIndex * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        enum XlColorIndex RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerForegroundColor (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerForegroundColor (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        enum XlColorIndex * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        enum XlColorIndex RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerSize (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerSize (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerStyle (
        enum XlMarkerStyle * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerStyle (
        enum XlMarkerStyle RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_Paste (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_PictureType (
        enum XlChartPictureType * RHS ) = 0;
    virtual HRESULT __stdcall put_PictureType (
        enum XlChartPictureType RHS ) = 0;
    virtual HRESULT __stdcall get_PictureUnit (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PictureUnit (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_PlotOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PlotOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Points (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Smooth (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Smooth (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Trendlines (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Type (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_ChartType (
        enum XlChartType * RHS ) = 0;
    virtual HRESULT __stdcall put_ChartType (
        enum XlChartType RHS ) = 0;
    virtual HRESULT __stdcall raw_ApplyCustomType (
        enum XlChartType ChartType ) = 0;
    virtual HRESULT __stdcall get_Values (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Values (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_XValues (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_XValues (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_BubbleSizes (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_BubbleSizes (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_BarShape (
        enum XlBarShape * RHS ) = 0;
    virtual HRESULT __stdcall put_BarShape (
        enum XlBarShape RHS ) = 0;
    virtual HRESULT __stdcall get_ApplyPictToSides (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ApplyPictToSides (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ApplyPictToFront (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ApplyPictToFront (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ApplyPictToEnd (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ApplyPictToEnd (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Has3DEffect (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Has3DEffect (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasLeaderLines (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasLeaderLines (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LeaderLines (
        struct LeaderLines * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ApplyDataLabels (
        enum XlDataLabelsType Type,
        VARIANT LegendKey,
        VARIANT AutoText,
        VARIANT HasLeaderLines,
        VARIANT ShowSeriesName,
        VARIANT ShowCategoryName,
        VARIANT ShowValue,
        VARIANT ShowPercentage,
        VARIANT ShowBubbleSize,
        VARIANT Separator,
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("0002086c-0001-0000-c000-000000000046"))
ISeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SeriesPtr Add (
        const _variant_t & Source,
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing );
    long GetCount ( );
    _variant_t Extend (
        const _variant_t & Source,
        const _variant_t & Rowcol = vtMissing,
        const _variant_t & CategoryLabels = vtMissing );
    SeriesPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    _variant_t Paste (
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing,
        const _variant_t & NewSeries = vtMissing );
    SeriesPtr NewSeries ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Source,
        enum XlRowCol Rowcol,
        VARIANT SeriesLabels,
        VARIANT CategoryLabels,
        VARIANT Replace,
        struct Series * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Extend (
        VARIANT Source,
        VARIANT Rowcol,
        VARIANT CategoryLabels,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Series * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Paste (
        enum XlRowCol Rowcol,
        VARIANT SeriesLabels,
        VARIANT CategoryLabels,
        VARIANT Replace,
        VARIANT NewSeries,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_NewSeries (
        struct Series * * RHS ) = 0;
};

struct __declspec(uuid("000208b2-0001-0000-c000-000000000046"))
IDataLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;
    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & RHS );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition RHS );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL RHS );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormat (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormat (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormatLinked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormatLinked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormatLocal (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormatLocal (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ShowLegendKey (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowLegendKey (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Type (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Position (
        enum XlDataLabelPosition * RHS ) = 0;
    virtual HRESULT __stdcall put_Position (
        enum XlDataLabelPosition RHS ) = 0;
    virtual HRESULT __stdcall get_ShowSeriesName (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowSeriesName (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowCategoryName (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowCategoryName (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowValue (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowValue (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowPercentage (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowPercentage (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowBubbleSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowBubbleSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Separator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Separator (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208b3-0001-0000-c000-000000000046"))
IDataLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & RHS );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition RHS );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL RHS );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & RHS );
    long GetCount ( );
    DataLabelPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual void __stdcall _Dummy9 ( ) = 0;
    virtual void __stdcall _Dummy10 ( ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual void __stdcall _Dummy13 ( ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual void __stdcall _Dummy16 ( ) = 0;
    virtual void __stdcall _Dummy17 ( ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AutoText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormat (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormat (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormatLinked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormatLinked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormatLocal (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormatLocal (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ShowLegendKey (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowLegendKey (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Type (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Position (
        enum XlDataLabelPosition * RHS ) = 0;
    virtual HRESULT __stdcall put_Position (
        enum XlDataLabelPosition RHS ) = 0;
    virtual HRESULT __stdcall get_ShowSeriesName (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowSeriesName (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowCategoryName (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowCategoryName (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowValue (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowValue (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowPercentage (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowPercentage (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ShowBubbleSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowBubbleSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Separator (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Separator (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct DataLabel * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208ba-0001-0000-c000-000000000046"))
ILegendEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLegendKey))
    LegendKeyPtr LegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    long GetIndex ( );
    LegendKeyPtr GetLegendKey ( );
    _variant_t Select ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_LegendKey (
        struct LegendKey * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
};

struct __declspec(uuid("000208bb-0001-0000-c000-000000000046"))
ILegendEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    LegendEntryPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct LegendEntry * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208bc-0001-0000-c000-000000000046"))
ILegendKey : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    long PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    long GetPictureType ( );
    void PutPictureType (
        long RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearFormats (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_InvertIfNegative (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_InvertIfNegative (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerBackgroundColor (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerBackgroundColor (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        enum XlColorIndex * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        enum XlColorIndex RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerForegroundColor (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerForegroundColor (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        enum XlColorIndex * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        enum XlColorIndex RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerSize (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerSize (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MarkerStyle (
        enum XlMarkerStyle * RHS ) = 0;
    virtual HRESULT __stdcall put_MarkerStyle (
        enum XlMarkerStyle RHS ) = 0;
    virtual HRESULT __stdcall get_PictureType (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PictureType (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_PictureUnit (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PictureUnit (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Smooth (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Smooth (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208bd-0001-0000-c000-000000000046"))
ITrendlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    TrendlinePtr Add (
        enum XlTrendlineType Type,
        const _variant_t & Order = vtMissing,
        const _variant_t & Period = vtMissing,
        const _variant_t & Forward = vtMissing,
        const _variant_t & Backward = vtMissing,
        const _variant_t & Intercept = vtMissing,
        const _variant_t & DisplayEquation = vtMissing,
        const _variant_t & DisplayRSquared = vtMissing,
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    TrendlinePtr Item (
        const _variant_t & Index = vtMissing );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        enum XlTrendlineType Type,
        VARIANT Order,
        VARIANT Period,
        VARIANT Forward,
        VARIANT Backward,
        VARIANT Intercept,
        VARIANT DisplayEquation,
        VARIANT DisplayRSquared,
        VARIANT Name,
        struct Trendline * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Trendline * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208be-0001-0000-c000-000000000046"))
ITrendline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetForward,put=PutForward))
    long Forward;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetType,put=PutType))
    enum XlTrendlineType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPeriod,put=PutPeriod))
    long Period;
    __declspec(property(get=GetBackward,put=PutBackward))
    long Backward;
    __declspec(property(get=GetIntercept,put=PutIntercept))
    double Intercept;
    __declspec(property(get=GetInterceptIsAuto,put=PutInterceptIsAuto))
    VARIANT_BOOL InterceptIsAuto;
    __declspec(property(get=GetNameIsAuto,put=PutNameIsAuto))
    VARIANT_BOOL NameIsAuto;
    __declspec(property(get=GetDisplayRSquared,put=PutDisplayRSquared))
    VARIANT_BOOL DisplayRSquared;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetDisplayEquation,put=PutDisplayEquation))
    VARIANT_BOOL DisplayEquation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetBackward ( );
    void PutBackward (
        long RHS );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    VARIANT_BOOL GetDisplayEquation ( );
    void PutDisplayEquation (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayRSquared ( );
    void PutDisplayRSquared (
        VARIANT_BOOL RHS );
    long GetForward ( );
    void PutForward (
        long RHS );
    long GetIndex ( );
    double GetIntercept ( );
    void PutIntercept (
        double RHS );
    VARIANT_BOOL GetInterceptIsAuto ( );
    void PutInterceptIsAuto (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetNameIsAuto ( );
    void PutNameIsAuto (
        VARIANT_BOOL RHS );
    long GetOrder ( );
    void PutOrder (
        long RHS );
    long GetPeriod ( );
    void PutPeriod (
        long RHS );
    _variant_t Select ( );
    enum XlTrendlineType GetType ( );
    void PutType (
        enum XlTrendlineType RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Backward (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Backward (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearFormats (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_DataLabel (
        struct DataLabel * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayEquation (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayEquation (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DisplayRSquared (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplayRSquared (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Forward (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Forward (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Index (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Intercept (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Intercept (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_InterceptIsAuto (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_InterceptIsAuto (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_NameIsAuto (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_NameIsAuto (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Order (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Order (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Period (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Period (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum XlTrendlineType * RHS ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum XlTrendlineType RHS ) = 0;
};

struct __declspec(uuid("000208c0-0001-0000-c000-000000000046"))
ICorners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c1-0001-0000-c000-000000000046"))
ISeriesLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c2-0001-0000-c000-000000000046"))
IHiLoLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c3-0001-0000-c000-000000000046"))
IGridlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c4-0001-0000-c000-000000000046"))
IDropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00024437-0001-0000-c000-000000000046"))
ILeaderLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    HRESULT Delete ( );
    HRESULT Select ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
};

struct __declspec(uuid("000208c5-0001-0000-c000-000000000046"))
IUpBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
};

struct __declspec(uuid("000208c6-0001-0000-c000-000000000046"))
IDownBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
};

struct __declspec(uuid("000208c7-0001-0000-c000-000000000046"))
IFloor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & RHS );
    HRESULT Paste ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearFormats (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_PictureType (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PictureType (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Paste ( ) = 0;
};

struct __declspec(uuid("000208c8-0001-0000-c000-000000000046"))
IWalls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    _variant_t PictureUnit;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & RHS );
    HRESULT Paste ( );
    _variant_t GetPictureUnit ( );
    void PutPictureUnit (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearFormats (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_PictureType (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PictureType (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Paste ( ) = 0;
    virtual HRESULT __stdcall get_PictureUnit (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_PictureUnit (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208c9-0001-0000-c000-000000000046"))
ITickLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetDepth))
    long Depth;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlTickLabelOrientation Orientation;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetOffset,put=PutOffset))
    long Offset;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _bstr_t GetName ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    enum XlTickLabelOrientation GetOrientation ( );
    void PutOrientation (
        enum XlTickLabelOrientation RHS );
    _variant_t Select ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    long GetDepth ( );
    long GetOffset ( );
    void PutOffset (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormat (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormat (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormatLinked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormatLinked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormatLocal (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormatLocal (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum XlTickLabelOrientation * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum XlTickLabelOrientation RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Depth (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Offset (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Offset (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        long RHS ) = 0;
};

struct __declspec(uuid("000208cb-0001-0000-c000-000000000046"))
IPlotArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetInsideLeft))
    double InsideLeft;
    __declspec(property(get=GetInsideTop))
    double InsideTop;
    __declspec(property(get=GetInsideWidth))
    double InsideWidth;
    __declspec(property(get=GetInsideHeight))
    double InsideHeight;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    double GetInsideLeft ( );
    double GetInsideTop ( );
    double GetInsideWidth ( );
    double GetInsideHeight ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearFormats (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_InsideLeft (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_InsideTop (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_InsideWidth (
        double * RHS ) = 0;
    virtual HRESULT __stdcall get_InsideHeight (
        double * RHS ) = 0;
};

struct __declspec(uuid("000208cc-0001-0000-c000-000000000046"))
IChartArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t Copy ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Clear (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearContents (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearFormats (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208cd-0001-0000-c000-000000000046"))
ILegend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlLegendPosition Position;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    IDispatchPtr LegendEntries (
        const _variant_t & Index = vtMissing );
    enum XlLegendPosition GetPosition ( );
    void PutPosition (
        enum XlLegendPosition RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Clear ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall raw_LegendEntries (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Position (
        enum XlLegendPosition * RHS ) = 0;
    virtual HRESULT __stdcall put_Position (
        enum XlLegendPosition RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Clear (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208ce-0001-0000-c000-000000000046"))
IErrorBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum XlEndStyleCap EndStyle;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    _variant_t ClearFormats ( );
    enum XlEndStyleCap GetEndStyle ( );
    void PutEndStyle (
        enum XlEndStyleCap RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_ClearFormats (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_EndStyle (
        enum XlEndStyleCap * RHS ) = 0;
    virtual HRESULT __stdcall put_EndStyle (
        enum XlEndStyleCap RHS ) = 0;
};

struct __declspec(uuid("00020843-0001-0000-c000-000000000046"))
IDataTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetHasBorderHorizontal,put=PutHasBorderHorizontal))
    VARIANT_BOOL HasBorderHorizontal;
    __declspec(property(get=GetHasBorderVertical,put=PutHasBorderVertical))
    VARIANT_BOOL HasBorderVertical;
    __declspec(property(get=GetHasBorderOutline,put=PutHasBorderOutline))
    VARIANT_BOOL HasBorderOutline;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderHorizontal ( );
    void PutHasBorderHorizontal (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderVertical ( );
    void PutHasBorderVertical (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderOutline ( );
    void PutHasBorderOutline (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    FontPtr GetFont ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_ShowLegendKey (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowLegendKey (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasBorderHorizontal (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasBorderHorizontal (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasBorderVertical (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasBorderVertical (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HasBorderOutline (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_HasBorderOutline (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024438-0001-0000-c000-000000000046"))
IPhonetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetCharacterType ( );
    void PutCharacterType (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );
    FontPtr GetFont ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CharacterType (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_CharacterType (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
};

struct __declspec(uuid("00024439-0001-0000-c000-000000000046"))
IShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum XlPlacement Placement;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetDrawingObject))
    IDispatchPtr DrawingObject;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetControlFormat))
    ControlFormatPtr ControlFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetFormControlType))
    enum XlFormControl FormControlType;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetID))
    long ID;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType RHS );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float RHS );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float RHS );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float RHS );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );
    long GetZOrderPosition ( );
    HyperlinkPtr GetHyperlink ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode RHS );
    IDispatchPtr GetDrawingObject ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    RangePtr GetTopLeftCell ( );
    RangePtr GetBottomRightCell ( );
    enum XlPlacement GetPlacement ( );
    void PutPlacement (
        enum XlPlacement RHS );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT CopyPicture (
        const _variant_t & Appearance = vtMissing,
        const _variant_t & Format = vtMissing );
    ControlFormatPtr GetControlFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    OLEFormatPtr GetOLEFormat ( );
    enum XlFormControl GetFormControlType ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t RHS );
    Office::ScriptPtr GetScript ( );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Apply ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Flip (
        enum Office::MsoFlipCmd FlipCmd ) = 0;
    virtual HRESULT __stdcall raw_IncrementLeft (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotation (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementTop (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_PickUp ( ) = 0;
    virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
    virtual HRESULT __stdcall raw_ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        VARIANT Scale = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        VARIANT Scale = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
    virtual HRESULT __stdcall raw_Ungroup (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
    virtual HRESULT __stdcall get_Adjustments (
        struct Adjustments * * RHS ) = 0;
    virtual HRESULT __stdcall get_TextFrame (
        struct TextFrame * * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoShapeType (
        enum Office::MsoAutoShapeType * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoShapeType (
        enum Office::MsoAutoShapeType RHS ) = 0;
    virtual HRESULT __stdcall get_Callout (
        struct CalloutFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_ConnectionSiteCount (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Connector (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_ConnectorFormat (
        struct ConnectorFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct FillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_GroupItems (
        struct GroupShapes * * RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalFlip (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_Line (
        struct LineFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_LockAspectRatio (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall put_LockAspectRatio (
        enum Office::MsoTriState RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Nodes (
        struct ShapeNodes * * RHS ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_PictureFormat (
        struct PictureFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        struct ShadowFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_TextEffect (
        struct TextEffectFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_ThreeD (
        struct ThreeDFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoShapeType * RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalFlip (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_Vertices (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrderPosition (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Hyperlink (
        struct Hyperlink * * RHS ) = 0;
    virtual HRESULT __stdcall get_BlackWhiteMode (
        enum Office::MsoBlackWhiteMode * RHS ) = 0;
    virtual HRESULT __stdcall put_BlackWhiteMode (
        enum Office::MsoBlackWhiteMode RHS ) = 0;
    virtual HRESULT __stdcall get_DrawingObject (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_OnAction (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_OnAction (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TopLeftCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_BottomRightCell (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Placement (
        enum XlPlacement * RHS ) = 0;
    virtual HRESULT __stdcall put_Placement (
        enum XlPlacement RHS ) = 0;
    virtual HRESULT __stdcall raw_Copy ( ) = 0;
    virtual HRESULT __stdcall raw_Cut ( ) = 0;
    virtual HRESULT __stdcall raw_CopyPicture (
        VARIANT Appearance = vtMissing,
        VARIANT Format = vtMissing ) = 0;
    virtual HRESULT __stdcall get_ControlFormat (
        struct ControlFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_LinkFormat (
        struct LinkFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_OLEFormat (
        struct OLEFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_FormControlType (
        enum XlFormControl * RHS ) = 0;
    virtual HRESULT __stdcall get_AlternativeText (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_AlternativeText (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Script (
        struct Office::Script * * RHS ) = 0;
    virtual HRESULT __stdcall get_DiagramNode (
        struct DiagramNode * * RHS ) = 0;
    virtual HRESULT __stdcall get_HasDiagramNode (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_Diagram (
        struct Diagram * * RHS ) = 0;
    virtual HRESULT __stdcall get_HasDiagram (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_Child (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_ParentGroup (
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall get_CanvasItems (
        struct Office::CanvasShapes * * RHS ) = 0;
    virtual HRESULT __stdcall get_ID (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_CanvasCropLeft (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_CanvasCropTop (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_CanvasCropRight (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_CanvasCropBottom (
        float Increment ) = 0;
};

struct __declspec(uuid("0002443a-0001-0000-c000-000000000046"))
IShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t Filename,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr AddFormControl (
        enum XlFormControl Type,
        long Left,
        long Top,
        long Width,
        long Height );
    ShapePtr AddOLEObject (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    ShapePtr AddDiagram (
        enum Office::MsoDiagramType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddCanvas (
        float Left,
        float Top,
        float Width,
        float Height );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw__Default (
        VARIANT Index,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddCurve (
        VARIANT SafeArrayOfPoints,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddPicture (
        BSTR Filename,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddPolyline (
        VARIANT SafeArrayOfPoints,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        BSTR Text,
        BSTR FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        struct FreeformBuilder * * RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        VARIANT Index,
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
    virtual HRESULT __stdcall raw_AddFormControl (
        enum XlFormControl Type,
        long Left,
        long Top,
        long Width,
        long Height,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddOLEObject (
        VARIANT ClassType,
        VARIANT Filename,
        VARIANT Link,
        VARIANT DisplayAsIcon,
        VARIANT IconFileName,
        VARIANT IconIndex,
        VARIANT IconLabel,
        VARIANT Left,
        VARIANT Top,
        VARIANT Width,
        VARIANT Height,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddDiagram (
        enum Office::MsoDiagramType Type,
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddCanvas (
        float Left,
        float Top,
        float Width,
        float Height,
        struct Shape * * RHS ) = 0;
};

struct __declspec(uuid("0002443b-0001-0000-c000-000000000046"))
IShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    ShapePtr Regroup ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType RHS );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float RHS );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float RHS );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float RHS );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );
    long GetZOrderPosition ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode RHS );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t RHS );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw__Default (
        VARIANT Index,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo ) = 0;
    virtual HRESULT __stdcall raw_Apply ( ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo ) = 0;
    virtual HRESULT __stdcall raw_Duplicate (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Flip (
        enum Office::MsoFlipCmd FlipCmd ) = 0;
    virtual HRESULT __stdcall raw_IncrementLeft (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementRotation (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_IncrementTop (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_Group (
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_PickUp ( ) = 0;
    virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
    virtual HRESULT __stdcall raw_Regroup (
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        VARIANT Scale = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        VARIANT Scale = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT Replace = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
    virtual HRESULT __stdcall raw_Ungroup (
        struct ShapeRange * * RHS ) = 0;
    virtual HRESULT __stdcall raw_ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
    virtual HRESULT __stdcall get_Adjustments (
        struct Adjustments * * RHS ) = 0;
    virtual HRESULT __stdcall get_TextFrame (
        struct TextFrame * * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoShapeType (
        enum Office::MsoAutoShapeType * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoShapeType (
        enum Office::MsoAutoShapeType RHS ) = 0;
    virtual HRESULT __stdcall get_Callout (
        struct CalloutFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_ConnectionSiteCount (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Connector (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_ConnectorFormat (
        struct ConnectorFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct FillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_GroupItems (
        struct GroupShapes * * RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalFlip (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_Line (
        struct LineFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_LockAspectRatio (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall put_LockAspectRatio (
        enum Office::MsoTriState RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Nodes (
        struct ShapeNodes * * RHS ) = 0;
    virtual HRESULT __stdcall get_Rotation (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Rotation (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_PictureFormat (
        struct PictureFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        struct ShadowFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_TextEffect (
        struct TextEffectFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_ThreeD (
        struct ThreeDFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoShapeType * RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalFlip (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_Vertices (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        enum Office::MsoTriState RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_ZOrderPosition (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_BlackWhiteMode (
        enum Office::MsoBlackWhiteMode * RHS ) = 0;
    virtual HRESULT __stdcall put_BlackWhiteMode (
        enum Office::MsoBlackWhiteMode RHS ) = 0;
    virtual HRESULT __stdcall get_AlternativeText (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_AlternativeText (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_DiagramNode (
        struct DiagramNode * * RHS ) = 0;
    virtual HRESULT __stdcall get_HasDiagramNode (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_Diagram (
        struct Diagram * * RHS ) = 0;
    virtual HRESULT __stdcall get_HasDiagram (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_Child (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_ParentGroup (
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall get_CanvasItems (
        struct Office::CanvasShapes * * RHS ) = 0;
    virtual HRESULT __stdcall get_ID (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_CanvasCropLeft (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_CanvasCropTop (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_CanvasCropRight (
        float Increment ) = 0;
    virtual HRESULT __stdcall raw_CanvasCropBottom (
        float Increment ) = 0;
};

struct __declspec(uuid("0002443c-0001-0000-c000-000000000046"))
IGroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapeRangePtr GetRange (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall raw__Default (
        VARIANT Index,
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        VARIANT Index,
        struct ShapeRange * * RHS ) = 0;
};

struct __declspec(uuid("0002443d-0001-0000-c000-000000000046"))
ITextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetAutoMargins,put=PutAutoMargins))
    VARIANT_BOOL AutoMargins;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float RHS );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float RHS );
    float GetMarginRight ( );
    void PutMarginRight (
        float RHS );
    float GetMarginTop ( );
    void PutMarginTop (
        float RHS );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation RHS );
    CharactersPtr Characters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign RHS );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    VARIANT_BOOL GetAutoMargins ( );
    void PutAutoMargins (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_MarginBottom (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_MarginBottom (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_MarginLeft (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_MarginLeft (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_MarginRight (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_MarginRight (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_MarginTop (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_MarginTop (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum Office::MsoTextOrientation * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum Office::MsoTextOrientation RHS ) = 0;
    virtual HRESULT __stdcall raw_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        enum XlHAlign * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        enum XlHAlign RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        enum XlVAlign * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        enum XlVAlign RHS ) = 0;
    virtual HRESULT __stdcall get_AutoSize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoSize (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_AutoMargins (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoMargins (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002443e-0001-0000-c000-000000000046"))
IConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    long EndConnectionSite;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    long BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT EndDisconnect ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    long GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    long GetEndConnectionSite ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_BeginConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite ) = 0;
    virtual HRESULT __stdcall raw_BeginDisconnect ( ) = 0;
    virtual HRESULT __stdcall raw_EndConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite ) = 0;
    virtual HRESULT __stdcall raw_EndDisconnect ( ) = 0;
    virtual HRESULT __stdcall get_BeginConnected (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_BeginConnectedShape (
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall get_BeginConnectionSite (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_EndConnected (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall get_EndConnectedShape (
        struct Shape * * RHS ) = 0;
    virtual HRESULT __stdcall get_EndConnectionSite (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoConnectorType * RHS ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum Office::MsoConnectorType RHS ) = 0;
};

struct __declspec(uuid("0002443f-0001-0000-c000-000000000046"))
IFreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        const _variant_t & X2 = vtMissing,
        const _variant_t & Y2 = vtMissing,
        const _variant_t & X3 = vtMissing,
        const _variant_t & Y3 = vtMissing );
    ShapePtr ConvertToShape ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        VARIANT X2 = vtMissing,
        VARIANT Y2 = vtMissing,
        VARIANT X3 = vtMissing,
        VARIANT Y3 = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_ConvertToShape (
        struct Shape * * RHS ) = 0;
};

struct __declspec(uuid("00024440-0001-0000-c000-000000000046"))
IControlFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListCount,put=PutListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddItem (
        _bstr_t Text,
        const _variant_t & Index = vtMissing );
    HRESULT RemoveAllItems ( );
    HRESULT RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    long GetListCount ( );
    void PutListCount (
        long RHS );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddItem (
        BSTR Text,
        VARIANT Index = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_RemoveAllItems ( ) = 0;
    virtual HRESULT __stdcall raw_RemoveItem (
        long Index,
        VARIANT Count = vtMissing ) = 0;
    virtual HRESULT __stdcall get_DropDownLines (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_DropDownLines (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LargeChange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_LargeChange (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LinkedCell (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LinkedCell (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_List (
        VARIANT Index,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_ListCount (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ListCount (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_ListFillRange (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_ListFillRange (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_ListIndex (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ListIndex (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LockedText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LockedText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Max (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Max (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Min (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Min (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_MultiSelect (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_MultiSelect (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_PrintObject (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_PrintObject (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SmallChange (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_SmallChange (
        long RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put__Default (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        long RHS ) = 0;
};

struct __declspec(uuid("00024441-0001-0000-c000-000000000046"))
IOLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetprogID ( );
    HRESULT Verb (
        const _variant_t & Verb = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Activate ( ) = 0;
    virtual HRESULT __stdcall get_Object (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_progID (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Verb (
        VARIANT Verb = vtMissing ) = 0;
};

struct __declspec(uuid("00024442-0001-0000-c000-000000000046"))
ILinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    HRESULT Update ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoUpdate (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoUpdate (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Update ( ) = 0;
};

struct __declspec(uuid("00024443-0001-0000-c000-000000000046"))
IPublishObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PublishObjectPtr _Default[];
    __declspec(property(get=GetItem))
    PublishObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Add (
        enum XlSourceType SourceType,
        _bstr_t Filename,
        const _variant_t & Sheet = vtMissing,
        const _variant_t & Source = vtMissing,
        const _variant_t & HtmlType = vtMissing,
        const _variant_t & DivID = vtMissing,
        const _variant_t & Title = vtMissing );
    long GetCount ( );
    PublishObjectPtr GetItem (
        const _variant_t & Index );
    PublishObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
    HRESULT Publish ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        enum XlSourceType SourceType,
        BSTR Filename,
        VARIANT Sheet,
        VARIANT Source,
        VARIANT HtmlType,
        VARIANT DivID,
        VARIANT Title,
        struct PublishObject * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct PublishObject * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct PublishObject * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Publish ( ) = 0;
};

struct __declspec(uuid("00024444-0000-0000-c000-000000000046"))
PublishObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoRepublish,put=PutAutoRepublish))
    VARIANT_BOOL AutoRepublish;
    __declspec(property(get=GetHtmlType,put=PutHtmlType))
    enum XlHtmlType HtmlType;
    __declspec(property(get=GetDivID))
    _bstr_t DivID;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetSourceType))
    enum XlSourceType SourceType;
    __declspec(property(get=GetSheet))
    _bstr_t Sheet;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSource))
    _bstr_t Source;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT Publish (
        const _variant_t & Create = vtMissing );
    _bstr_t GetDivID ( );
    _bstr_t GetSheet ( );
    enum XlSourceType GetSourceType ( );
    _bstr_t GetSource ( );
    enum XlHtmlType GetHtmlType ( );
    void PutHtmlType (
        enum XlHtmlType RHS );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t RHS );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t RHS );
    VARIANT_BOOL GetAutoRepublish ( );
    void PutAutoRepublish (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Publish (
        VARIANT Create = vtMissing ) = 0;
    virtual HRESULT __stdcall get_DivID (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Sheet (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_SourceType (
        enum XlSourceType * RHS ) = 0;
    virtual HRESULT __stdcall get_Source (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_HtmlType (
        enum XlHtmlType * RHS ) = 0;
    virtual HRESULT __stdcall put_HtmlType (
        enum XlHtmlType RHS ) = 0;
    virtual HRESULT __stdcall get_Title (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Title (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Filename (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Filename (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_AutoRepublish (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoRepublish (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024445-0001-0000-c000-000000000046"))
IOLEDBError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetNative))
    long Native;
    __declspec(property(get=GetStage))
    long Stage;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
    long GetNative ( );
    long GetNumber ( );
    long GetStage ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_SqlState (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_ErrorString (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Native (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Number (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Stage (
        long * RHS ) = 0;
};

struct __declspec(uuid("00024446-0001-0000-c000-000000000046"))
IOLEDBErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    OLEDBErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    OLEDBErrorPtr Item (
        long Index );
    OLEDBErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long Index,
        struct OLEDBError * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        struct OLEDBError * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024447-0001-0000-c000-000000000046"))
IPhonetics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetStart ( );
    long GetLength ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetCharacterType ( );
    void PutCharacterType (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );
    FontPtr GetFont ( );
    IDispatchPtr GetItem (
        long Index );
    HRESULT Delete ( );
    HRESULT Add (
        long Start,
        long Length,
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    IDispatchPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Start (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Length (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CharacterType (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_CharacterType (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        long Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Add (
        long Start,
        long Length,
        BSTR Text ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        long Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024448-0000-0000-c000-000000000046"))
DefaultWebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRelyOnCSS,put=PutRelyOnCSS))
    VARIANT_BOOL RelyOnCSS;
    __declspec(property(get=GetSaveHiddenData,put=PutSaveHiddenData))
    VARIANT_BOOL SaveHiddenData;
    __declspec(property(get=GetLoadPictures,put=PutLoadPictures))
    VARIANT_BOOL LoadPictures;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    VARIANT_BOOL OrganizeInFolder;
    __declspec(property(get=GetUpdateLinksOnSave,put=PutUpdateLinksOnSave))
    VARIANT_BOOL UpdateLinksOnSave;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    VARIANT_BOOL UseLongFileNames;
    __declspec(property(get=GetCheckIfOfficeIsHTMLEditor,put=PutCheckIfOfficeIsHTMLEditor))
    VARIANT_BOOL CheckIfOfficeIsHTMLEditor;
    __declspec(property(get=GetDownloadComponents,put=PutDownloadComponents))
    VARIANT_BOOL DownloadComponents;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    VARIANT_BOOL RelyOnVML;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    VARIANT_BOOL AllowPNG;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetLocationOfComponents,put=PutLocationOfComponents))
    _bstr_t LocationOfComponents;
    __declspec(property(get=GetSaveNewWebPagesAsWebArchives,put=PutSaveNewWebPagesAsWebArchives))
    VARIANT_BOOL SaveNewWebPagesAsWebArchives;
    __declspec(property(get=GetAlwaysSaveInDefaultEncoding,put=PutAlwaysSaveInDefaultEncoding))
    VARIANT_BOOL AlwaysSaveInDefaultEncoding;
    __declspec(property(get=GetFonts))
    Office::WebPageFontsPtr Fonts;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetRelyOnCSS ( );
    void PutRelyOnCSS (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSaveHiddenData ( );
    void PutSaveHiddenData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLoadPictures ( );
    void PutLoadPictures (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUpdateLinksOnSave ( );
    void PutUpdateLinksOnSave (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUseLongFileNames ( );
    void PutUseLongFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCheckIfOfficeIsHTMLEditor ( );
    void PutCheckIfOfficeIsHTMLEditor (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDownloadComponents ( );
    void PutDownloadComponents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRelyOnVML ( );
    void PutRelyOnVML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAllowPNG ( );
    void PutAllowPNG (
        VARIANT_BOOL RHS );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize RHS );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long RHS );
    _bstr_t GetLocationOfComponents ( );
    void PutLocationOfComponents (
        _bstr_t RHS );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding RHS );
    VARIANT_BOOL GetAlwaysSaveInDefaultEncoding ( );
    void PutAlwaysSaveInDefaultEncoding (
        VARIANT_BOOL RHS );
    Office::WebPageFontsPtr GetFonts ( );
    _bstr_t GetFolderSuffix ( );
    enum Office::MsoTargetBrowser GetTargetBrowser ( );
    void PutTargetBrowser (
        enum Office::MsoTargetBrowser RHS );
    VARIANT_BOOL GetSaveNewWebPagesAsWebArchives ( );
    void PutSaveNewWebPagesAsWebArchives (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_RelyOnCSS (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RelyOnCSS (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SaveHiddenData (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SaveHiddenData (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LoadPictures (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_LoadPictures (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_OrganizeInFolder (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_OrganizeInFolder (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_UpdateLinksOnSave (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_UpdateLinksOnSave (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_UseLongFileNames (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_UseLongFileNames (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_CheckIfOfficeIsHTMLEditor (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_CheckIfOfficeIsHTMLEditor (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DownloadComponents (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DownloadComponents (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RelyOnVML (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RelyOnVML (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AllowPNG (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AllowPNG (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ScreenSize (
        enum Office::MsoScreenSize * RHS ) = 0;
    virtual HRESULT __stdcall put_ScreenSize (
        enum Office::MsoScreenSize RHS ) = 0;
    virtual HRESULT __stdcall get_PixelsPerInch (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PixelsPerInch (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LocationOfComponents (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LocationOfComponents (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Encoding (
        enum Office::MsoEncoding * RHS ) = 0;
    virtual HRESULT __stdcall put_Encoding (
        enum Office::MsoEncoding RHS ) = 0;
    virtual HRESULT __stdcall get_AlwaysSaveInDefaultEncoding (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AlwaysSaveInDefaultEncoding (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Fonts (
        struct Office::WebPageFonts * * RHS ) = 0;
    virtual HRESULT __stdcall get_FolderSuffix (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_TargetBrowser (
        enum Office::MsoTargetBrowser * RHS ) = 0;
    virtual HRESULT __stdcall put_TargetBrowser (
        enum Office::MsoTargetBrowser RHS ) = 0;
    virtual HRESULT __stdcall get_SaveNewWebPagesAsWebArchives (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SaveNewWebPagesAsWebArchives (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024449-0000-0000-c000-000000000046"))
WebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRelyOnCSS,put=PutRelyOnCSS))
    VARIANT_BOOL RelyOnCSS;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    VARIANT_BOOL OrganizeInFolder;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    VARIANT_BOOL UseLongFileNames;
    __declspec(property(get=GetDownloadComponents,put=PutDownloadComponents))
    VARIANT_BOOL DownloadComponents;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    VARIANT_BOOL RelyOnVML;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    VARIANT_BOOL AllowPNG;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetLocationOfComponents,put=PutLocationOfComponents))
    _bstr_t LocationOfComponents;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetRelyOnCSS ( );
    void PutRelyOnCSS (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUseLongFileNames ( );
    void PutUseLongFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDownloadComponents ( );
    void PutDownloadComponents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRelyOnVML ( );
    void PutRelyOnVML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAllowPNG ( );
    void PutAllowPNG (
        VARIANT_BOOL RHS );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize RHS );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long RHS );
    _bstr_t GetLocationOfComponents ( );
    void PutLocationOfComponents (
        _bstr_t RHS );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding RHS );
    _bstr_t GetFolderSuffix ( );
    HRESULT UseDefaultFolderSuffix ( );
    enum Office::MsoTargetBrowser GetTargetBrowser ( );
    void PutTargetBrowser (
        enum Office::MsoTargetBrowser RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_RelyOnCSS (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RelyOnCSS (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_OrganizeInFolder (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_OrganizeInFolder (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_UseLongFileNames (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_UseLongFileNames (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DownloadComponents (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DownloadComponents (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_RelyOnVML (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_RelyOnVML (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_AllowPNG (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AllowPNG (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_ScreenSize (
        enum Office::MsoScreenSize * RHS ) = 0;
    virtual HRESULT __stdcall put_ScreenSize (
        enum Office::MsoScreenSize RHS ) = 0;
    virtual HRESULT __stdcall get_PixelsPerInch (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_PixelsPerInch (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_LocationOfComponents (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_LocationOfComponents (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Encoding (
        enum Office::MsoEncoding * RHS ) = 0;
    virtual HRESULT __stdcall put_Encoding (
        enum Office::MsoEncoding RHS ) = 0;
    virtual HRESULT __stdcall get_FolderSuffix (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_UseDefaultFolderSuffix ( ) = 0;
    virtual HRESULT __stdcall get_TargetBrowser (
        enum Office::MsoTargetBrowser * RHS ) = 0;
    virtual HRESULT __stdcall put_TargetBrowser (
        enum Office::MsoTargetBrowser RHS ) = 0;
};

struct __declspec(uuid("0002444a-0001-0000-c000-000000000046"))
IPivotLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotFields))
    IDispatchPtr PivotFields[];
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotCache))
    PivotCachePtr PivotCache;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPivotFields (
        const _variant_t & Index = vtMissing );
    CubeFieldsPtr GetCubeFields ( );
    PivotCachePtr GetPivotCache ( );
    PivotTablePtr GetPivotTable ( );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t RHS );
    HRESULT AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AppendField = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_ColumnFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_DataFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_PageFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_RowFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_HiddenFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_VisibleFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotFields (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_CubeFields (
        struct CubeFields * * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotCache (
        struct PivotCache * * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotTable (
        struct PivotTable * * RHS ) = 0;
    virtual HRESULT __stdcall get_InnerDetail (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_InnerDetail (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall raw_AddFields (
        VARIANT RowFields = vtMissing,
        VARIANT ColumnFields = vtMissing,
        VARIANT PageFields = vtMissing,
        VARIANT AppendField = vtMissing ) = 0;
};

struct __declspec(uuid("0002444b-0000-0000-c000-000000000046"))
TreeviewControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDrilled,put=PutDrilled))
    _variant_t Drilled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & RHS );
    _variant_t GetDrilled ( );
    void PutDrilled (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Hidden (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Hidden (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Drilled (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Drilled (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002444c-0000-0000-c000-000000000046"))
CubeField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetPivotFields))
    PivotFieldsPtr PivotFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetHasMemberProperties))
    VARIANT_BOOL HasMemberProperties;
    __declspec(property(get=GetCubeFieldType))
    enum XlCubeFieldType CubeFieldType;
    __declspec(property(get=GetTreeviewControl))
    TreeviewControlPtr TreeviewControl;
    __declspec(property(get=GetHiddenLevels,put=PutHiddenLevels))
    long HiddenLevels;
    __declspec(property(get=GetEnableMultiplePageItems,put=PutEnableMultiplePageItems))
    VARIANT_BOOL EnableMultiplePageItems;
    __declspec(property(get=GetShowInFieldList,put=PutShowInFieldList))
    VARIANT_BOOL ShowInFieldList;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum XlSubtototalLocationType LayoutSubtotalLocation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlCubeFieldType GetCubeFieldType ( );
    _bstr_t GetCaption ( );
    _bstr_t GetName ( );
    _bstr_t GetValue ( );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation RHS );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    TreeviewControlPtr GetTreeviewControl ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL RHS );
    long GetHiddenLevels ( );
    void PutHiddenLevels (
        long RHS );
    VARIANT_BOOL GetHasMemberProperties ( );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType RHS );
    PivotFieldsPtr GetPivotFields ( );
    HRESULT AddMemberPropertyField (
        _bstr_t Property,
        const _variant_t & PropertyOrder = vtMissing );
    VARIANT_BOOL GetEnableMultiplePageItems ( );
    void PutEnableMultiplePageItems (
        VARIANT_BOOL RHS );
    enum XlSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum XlSubtototalLocationType RHS );
    VARIANT_BOOL GetShowInFieldList ( );
    void PutShowInFieldList (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_CubeFieldType (
        enum XlCubeFieldType * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        enum XlPivotFieldOrientation * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        enum XlPivotFieldOrientation RHS ) = 0;
    virtual HRESULT __stdcall get_Position (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Position (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_TreeviewControl (
        struct TreeviewControl * * RHS ) = 0;
    virtual HRESULT __stdcall get_DragToColumn (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DragToColumn (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DragToHide (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DragToHide (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DragToPage (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DragToPage (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DragToRow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DragToRow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_DragToData (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_DragToData (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HiddenLevels (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_HiddenLevels (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_HasMemberProperties (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_LayoutForm (
        enum XlLayoutFormType * RHS ) = 0;
    virtual HRESULT __stdcall put_LayoutForm (
        enum XlLayoutFormType RHS ) = 0;
    virtual HRESULT __stdcall get_PivotFields (
        struct PivotFields * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddMemberPropertyField (
        BSTR Property,
        VARIANT PropertyOrder = vtMissing ) = 0;
    virtual HRESULT __stdcall get_EnableMultiplePageItems (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EnableMultiplePageItems (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_LayoutSubtotalLocation (
        enum XlSubtototalLocationType * RHS ) = 0;
    virtual HRESULT __stdcall put_LayoutSubtotalLocation (
        enum XlSubtototalLocationType RHS ) = 0;
    virtual HRESULT __stdcall get_ShowInFieldList (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_ShowInFieldList (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002444d-0000-0000-c000-000000000046"))
CubeFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CubeFieldPtr _Default[];
    __declspec(property(get=GetItem))
    CubeFieldPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CubeFieldPtr GetItem (
        const _variant_t & Index );
    CubeFieldPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CubeFieldPtr AddSet (
        _bstr_t Name,
        _bstr_t Caption );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct CubeField * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct CubeField * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_AddSet (
        BSTR Name,
        BSTR Caption,
        struct CubeField * * RHS ) = 0;
};

struct __declspec(uuid("0002084c-0001-0000-c000-000000000046"))
IDisplayUnitLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Select (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Border (
        struct Border * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall get_Fill (
        struct ChartFillFormat * * RHS ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Characters (
        VARIANT Start,
        VARIANT Length,
        struct Characters * * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Left (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Left (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Shadow (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Shadow (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Top (
        double * RHS ) = 0;
    virtual HRESULT __stdcall put_Top (
        double RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ReadingOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ReadingOrder (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_AutoScaleFont (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoScaleFont (
        VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024450-0001-0000-c000-000000000046"))
ICellFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior,put=PutRefInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat[];
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetBorders,put=PutRefBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BordersPtr GetBorders ( );
    void PutRefBorders (
        struct Borders * RHS );
    FontPtr GetFont ( );
    void PutRefFont (
        struct Font * RHS );
    InteriorPtr GetInterior ( );
    void PutRefInterior (
        struct Interior * RHS );
    _variant_t GetNumberFormat (
        long lcid = 0 );
    void PutNumberFormat (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & RHS );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & RHS );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & RHS );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & RHS );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & RHS );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Borders (
        struct Borders * * RHS ) = 0;
    virtual HRESULT __stdcall putref_Borders (
        struct Borders * RHS ) = 0;
    virtual HRESULT __stdcall get_Font (
        struct Font * * RHS ) = 0;
    virtual HRESULT __stdcall putref_Font (
        struct Font * RHS ) = 0;
    virtual HRESULT __stdcall get_Interior (
        struct Interior * * RHS ) = 0;
    virtual HRESULT __stdcall putref_Interior (
        struct Interior * RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormat (
        long lcid,
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormat (
        long lcid,
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_NumberFormatLocal (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberFormatLocal (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_AddIndent (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_AddIndent (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_IndentLevel (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_IndentLevel (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_HorizontalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_HorizontalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_VerticalAlignment (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_VerticalAlignment (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Orientation (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Orientation (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ShrinkToFit (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_ShrinkToFit (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_WrapText (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_WrapText (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_Locked (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Locked (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_FormulaHidden (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_FormulaHidden (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_MergeCells (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_MergeCells (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("00024451-0001-0000-c000-000000000046"))
IUsedObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        IDispatch * * RHS ) = 0;
};

struct __declspec(uuid("00024452-0001-0000-c000-000000000046"))
ICustomProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomPropertyPtr _Default[];
    __declspec(property(get=GetItem))
    CustomPropertyPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    CustomPropertyPtr Add (
        _bstr_t Name,
        const _variant_t & Value );
    long GetCount ( );
    CustomPropertyPtr Get_Default (
        const _variant_t & Index );
    CustomPropertyPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT Value,
        struct CustomProperty * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct CustomProperty * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct CustomProperty * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024453-0001-0000-c000-000000000046"))
ICustomProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _variant_t _Default;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    _variant_t Get_Default ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Value (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024454-0001-0000-c000-000000000046"))
ICalculatedMembers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CalculatedMemberPtr _Default[];
    __declspec(property(get=GetItem))
    CalculatedMemberPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CalculatedMemberPtr GetItem (
        const _variant_t & Index );
    CalculatedMemberPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CalculatedMemberPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & SolveOrder = vtMissing,
        const _variant_t & Type = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct CalculatedMember * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct CalculatedMember * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        BSTR Formula,
        VARIANT SolveOrder,
        VARIANT Type,
        struct CalculatedMember * * RHS ) = 0;
};

struct __declspec(uuid("00024455-0001-0000-c000-000000000046"))
ICalculatedMember : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFormula))
    _bstr_t Formula;
    __declspec(property(get=GetSolveOrder))
    long SolveOrder;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetType))
    enum XlCalculatedMemberType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetFormula ( );
    _bstr_t GetSourceName ( );
    long GetSolveOrder ( );
    VARIANT_BOOL GetIsValid ( );
    _bstr_t Get_Default ( );
    HRESULT Delete ( );
    enum XlCalculatedMemberType GetType ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Formula (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_SourceName (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_SolveOrder (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_IsValid (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum XlCalculatedMemberType * RHS ) = 0;
};

struct __declspec(uuid("00024456-0001-0000-c000-000000000046"))
IWatches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WatchPtr _Default[];
    __declspec(property(get=GetItem))
    WatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    WatchPtr Add (
        const _variant_t & Source );
    long GetCount ( );
    WatchPtr Get_Default (
        const _variant_t & Index );
    WatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Source,
        struct Watch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct Watch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct Watch * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024457-0001-0000-c000-000000000046"))
IWatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSource))
    _variant_t Source;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _variant_t GetSource ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_Source (
        VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00024458-0001-0000-c000-000000000046"))
IPivotCell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetDataField))
    PivotFieldPtr DataField;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotCellType))
    enum XlPivotCellType PivotCellType;
    __declspec(property(get=GetRowItems))
    PivotItemListPtr RowItems;
    __declspec(property(get=GetColumnItems))
    PivotItemListPtr ColumnItems;
    __declspec(property(get=GetDummy18))
    _bstr_t Dummy18;
    __declspec(property(get=GetCustomSubtotalFunction))
    enum XlConsolidationFunction CustomSubtotalFunction;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotCellType GetPivotCellType ( );
    PivotTablePtr GetPivotTable ( );
    PivotFieldPtr GetDataField ( );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotItemListPtr GetRowItems ( );
    PivotItemListPtr GetColumnItems ( );
    RangePtr GetRange ( );
    _bstr_t GetDummy18 ( );
    enum XlConsolidationFunction GetCustomSubtotalFunction ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotCellType (
        enum XlPivotCellType * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotTable (
        struct PivotTable * * RHS ) = 0;
    virtual HRESULT __stdcall get_DataField (
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotField (
        struct PivotField * * RHS ) = 0;
    virtual HRESULT __stdcall get_PivotItem (
        struct PivotItem * * RHS ) = 0;
    virtual HRESULT __stdcall get_RowItems (
        struct PivotItemList * * RHS ) = 0;
    virtual HRESULT __stdcall get_ColumnItems (
        struct PivotItemList * * RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall get_Dummy18 (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_CustomSubtotalFunction (
        enum XlConsolidationFunction * RHS ) = 0;
};

struct __declspec(uuid("00024459-0001-0000-c000-000000000046"))
IGraphic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetBrightness ( );
    void PutBrightness (
        float RHS );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType RHS );
    float GetContrast ( );
    void PutContrast (
        float RHS );
    float GetCropBottom ( );
    void PutCropBottom (
        float RHS );
    float GetCropLeft ( );
    void PutCropLeft (
        float RHS );
    float GetCropRight ( );
    void PutCropRight (
        float RHS );
    float GetCropTop ( );
    void PutCropTop (
        float RHS );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t RHS );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Brightness (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Brightness (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_ColorType (
        enum Office::MsoPictureColorType * RHS ) = 0;
    virtual HRESULT __stdcall put_ColorType (
        enum Office::MsoPictureColorType RHS ) = 0;
    virtual HRESULT __stdcall get_Contrast (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Contrast (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_CropBottom (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_CropBottom (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_CropLeft (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_CropLeft (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_CropRight (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_CropRight (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_CropTop (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_CropTop (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_Filename (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Filename (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Height (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Height (
        float RHS ) = 0;
    virtual HRESULT __stdcall get_LockAspectRatio (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall put_LockAspectRatio (
        enum Office::MsoTriState RHS ) = 0;
    virtual HRESULT __stdcall get_Width (
        float * RHS ) = 0;
    virtual HRESULT __stdcall put_Width (
        float RHS ) = 0;
};

struct __declspec(uuid("0002445a-0001-0000-c000-000000000046"))
IAutoRecover : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetTime,put=PutTime))
    long Time;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetTime ( );
    void PutTime (
        long RHS );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_Time (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_Time (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Path (
        BSTR RHS ) = 0;
};

struct __declspec(uuid("0002445b-0001-0000-c000-000000000046"))
IErrorCheckingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUnlockedFormulaCells,put=PutUnlockedFormulaCells))
    VARIANT_BOOL UnlockedFormulaCells;
    __declspec(property(get=GetEmptyCellReferences,put=PutEmptyCellReferences))
    VARIANT_BOOL EmptyCellReferences;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackgroundChecking,put=PutBackgroundChecking))
    VARIANT_BOOL BackgroundChecking;
    __declspec(property(get=GetIndicatorColorIndex,put=PutIndicatorColorIndex))
    enum XlColorIndex IndicatorColorIndex;
    __declspec(property(get=GetEvaluateToError,put=PutEvaluateToError))
    VARIANT_BOOL EvaluateToError;
    __declspec(property(get=GetTextDate,put=PutTextDate))
    VARIANT_BOOL TextDate;
    __declspec(property(get=GetNumberAsText,put=PutNumberAsText))
    VARIANT_BOOL NumberAsText;
    __declspec(property(get=GetInconsistentFormula,put=PutInconsistentFormula))
    VARIANT_BOOL InconsistentFormula;
    __declspec(property(get=GetOmittedCells,put=PutOmittedCells))
    VARIANT_BOOL OmittedCells;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundChecking ( );
    void PutBackgroundChecking (
        VARIANT_BOOL RHS );
    enum XlColorIndex GetIndicatorColorIndex ( );
    void PutIndicatorColorIndex (
        enum XlColorIndex RHS );
    VARIANT_BOOL GetEvaluateToError ( );
    void PutEvaluateToError (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextDate ( );
    void PutTextDate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetNumberAsText ( );
    void PutNumberAsText (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetInconsistentFormula ( );
    void PutInconsistentFormula (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOmittedCells ( );
    void PutOmittedCells (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUnlockedFormulaCells ( );
    void PutUnlockedFormulaCells (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEmptyCellReferences ( );
    void PutEmptyCellReferences (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_BackgroundChecking (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_BackgroundChecking (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IndicatorColorIndex (
        enum XlColorIndex * RHS ) = 0;
    virtual HRESULT __stdcall put_IndicatorColorIndex (
        enum XlColorIndex RHS ) = 0;
    virtual HRESULT __stdcall get_EvaluateToError (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EvaluateToError (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_TextDate (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_TextDate (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_NumberAsText (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_NumberAsText (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_InconsistentFormula (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_InconsistentFormula (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_OmittedCells (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_OmittedCells (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_UnlockedFormulaCells (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_UnlockedFormulaCells (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_EmptyCellReferences (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EmptyCellReferences (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002445c-0001-0000-c000-000000000046"))
IErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ErrorPtr _Default[];
    __declspec(property(get=GetItem))
    ErrorPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ErrorPtr GetItem (
        const _variant_t & Index );
    ErrorPtr Get_Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct Error * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct Error * * RHS ) = 0;
};

struct __declspec(uuid("0002445d-0001-0000-c000-000000000046"))
IError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIgnore,put=PutIgnore))
    VARIANT_BOOL Ignore;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetValue ( );
    VARIANT_BOOL GetIgnore ( );
    void PutIgnore (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_Ignore (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Ignore (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002445e-0001-0000-c000-000000000046"))
ISmartTagAction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    HRESULT Execute ( );
    _bstr_t Get_Default ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall raw_Execute ( ) = 0;
    virtual HRESULT __stdcall get__Default (
        BSTR * RHS ) = 0;
};

struct __declspec(uuid("0002445f-0001-0000-c000-000000000046"))
ISmartTagActions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagActionPtr _Default[];
    __declspec(property(get=GetItem))
    SmartTagActionPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagActionPtr Get_Default (
        const _variant_t & Index );
    SmartTagActionPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct SmartTagAction * * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct SmartTagAction * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024460-0001-0000-c000-000000000046"))
ISmartTag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetDownloadURL))
    _bstr_t DownloadURL;
    __declspec(property(get=GetXML))
    _bstr_t XML;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetSmartTagActions))
    SmartTagActionsPtr SmartTagActions;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProperties))
    CustomPropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetDownloadURL ( );
    _bstr_t GetName ( );
    _bstr_t Get_Default ( );
    _bstr_t GetXML ( );
    RangePtr GetRange ( );
    HRESULT Delete ( );
    SmartTagActionsPtr GetSmartTagActions ( );
    CustomPropertiesPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_DownloadURL (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_XML (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall get_SmartTagActions (
        struct SmartTagActions * * RHS ) = 0;
    virtual HRESULT __stdcall get_Properties (
        struct CustomProperties * * RHS ) = 0;
};

struct __declspec(uuid("00024461-0001-0000-c000-000000000046"))
ISmartTags : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SmartTagPtr Add (
        _bstr_t SmartTagType );
    long GetCount ( );
    SmartTagPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR SmartTagType,
        struct SmartTag * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct SmartTag * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024462-0001-0000-c000-000000000046"))
ISmartTagRecognizer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    _bstr_t GetprogID ( );
    _bstr_t Get_Default ( );
    _bstr_t GetFullName ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_progID (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_FullName (
        BSTR * RHS ) = 0;
};

struct __declspec(uuid("00024463-0001-0000-c000-000000000046"))
ISmartTagRecognizers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagRecognizerPtr _Default[];
    __declspec(property(get=GetRecognize,put=PutRecognize))
    VARIANT_BOOL Recognize;
    __declspec(property(get=GetItem))
    SmartTagRecognizerPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagRecognizerPtr GetItem (
        const _variant_t & Index );
    SmartTagRecognizerPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL GetRecognize ( );
    void PutRecognize (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct SmartTagRecognizer * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct SmartTagRecognizer * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
    virtual HRESULT __stdcall get_Recognize (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_Recognize (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024464-0001-0000-c000-000000000046"))
ISmartTagOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplaySmartTags,put=PutDisplaySmartTags))
    enum XlSmartTagDisplayMode DisplaySmartTags;
    __declspec(property(get=GetEmbedSmartTags,put=PutEmbedSmartTags))
    VARIANT_BOOL EmbedSmartTags;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlSmartTagDisplayMode GetDisplaySmartTags ( );
    void PutDisplaySmartTags (
        enum XlSmartTagDisplayMode RHS );
    VARIANT_BOOL GetEmbedSmartTags ( );
    void PutEmbedSmartTags (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_DisplaySmartTags (
        enum XlSmartTagDisplayMode * RHS ) = 0;
    virtual HRESULT __stdcall put_DisplaySmartTags (
        enum XlSmartTagDisplayMode RHS ) = 0;
    virtual HRESULT __stdcall get_EmbedSmartTags (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_EmbedSmartTags (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024465-0001-0000-c000-000000000046"))
ISpellingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDictLang,put=PutDictLang))
    long DictLang;
    __declspec(property(get=GetUserDict,put=PutUserDict))
    _bstr_t UserDict;
    __declspec(property(get=GetIgnoreCaps,put=PutIgnoreCaps))
    VARIANT_BOOL IgnoreCaps;
    __declspec(property(get=GetSuggestMainOnly,put=PutSuggestMainOnly))
    VARIANT_BOOL SuggestMainOnly;
    __declspec(property(get=GetIgnoreMixedDigits,put=PutIgnoreMixedDigits))
    VARIANT_BOOL IgnoreMixedDigits;
    __declspec(property(get=GetIgnoreFileNames,put=PutIgnoreFileNames))
    VARIANT_BOOL IgnoreFileNames;
    __declspec(property(get=GetGermanPostReform,put=PutGermanPostReform))
    VARIANT_BOOL GermanPostReform;
    __declspec(property(get=GetKoreanCombineAux,put=PutKoreanCombineAux))
    VARIANT_BOOL KoreanCombineAux;
    __declspec(property(get=GetKoreanUseAutoChangeList,put=PutKoreanUseAutoChangeList))
    VARIANT_BOOL KoreanUseAutoChangeList;
    __declspec(property(get=GetKoreanProcessCompound,put=PutKoreanProcessCompound))
    VARIANT_BOOL KoreanProcessCompound;
    __declspec(property(get=GetHebrewModes,put=PutHebrewModes))
    enum XlHebrewModes HebrewModes;
    __declspec(property(get=GetArabicModes,put=PutArabicModes))
    enum XlArabicModes ArabicModes;

    //
    // Wrapper methods for error-handling
    //

    long GetDictLang ( );
    void PutDictLang (
        long RHS );
    _bstr_t GetUserDict ( );
    void PutUserDict (
        _bstr_t RHS );
    VARIANT_BOOL GetIgnoreCaps ( );
    void PutIgnoreCaps (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSuggestMainOnly ( );
    void PutSuggestMainOnly (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIgnoreMixedDigits ( );
    void PutIgnoreMixedDigits (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIgnoreFileNames ( );
    void PutIgnoreFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetGermanPostReform ( );
    void PutGermanPostReform (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKoreanCombineAux ( );
    void PutKoreanCombineAux (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKoreanUseAutoChangeList ( );
    void PutKoreanUseAutoChangeList (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKoreanProcessCompound ( );
    void PutKoreanProcessCompound (
        VARIANT_BOOL RHS );
    enum XlHebrewModes GetHebrewModes ( );
    void PutHebrewModes (
        enum XlHebrewModes RHS );
    enum XlArabicModes GetArabicModes ( );
    void PutArabicModes (
        enum XlArabicModes RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_DictLang (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_DictLang (
        long RHS ) = 0;
    virtual HRESULT __stdcall get_UserDict (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_UserDict (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_IgnoreCaps (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IgnoreCaps (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_SuggestMainOnly (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SuggestMainOnly (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IgnoreMixedDigits (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IgnoreMixedDigits (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_IgnoreFileNames (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_IgnoreFileNames (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_GermanPostReform (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_GermanPostReform (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_KoreanCombineAux (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_KoreanCombineAux (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_KoreanUseAutoChangeList (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_KoreanUseAutoChangeList (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_KoreanProcessCompound (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_KoreanProcessCompound (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall get_HebrewModes (
        enum XlHebrewModes * RHS ) = 0;
    virtual HRESULT __stdcall put_HebrewModes (
        enum XlHebrewModes RHS ) = 0;
    virtual HRESULT __stdcall get_ArabicModes (
        enum XlArabicModes * RHS ) = 0;
    virtual HRESULT __stdcall put_ArabicModes (
        enum XlArabicModes RHS ) = 0;
};

struct __declspec(uuid("00024466-0001-0000-c000-000000000046"))
ISpeech : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum XlSpeakDirection Direction;
    __declspec(property(get=GetSpeakCellOnEnter,put=PutSpeakCellOnEnter))
    VARIANT_BOOL SpeakCellOnEnter;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Speak (
        _bstr_t Text,
        const _variant_t & SpeakAsync = vtMissing,
        const _variant_t & SpeakXML = vtMissing,
        const _variant_t & Purge = vtMissing );
    enum XlSpeakDirection GetDirection ( );
    void PutDirection (
        enum XlSpeakDirection RHS );
    VARIANT_BOOL GetSpeakCellOnEnter ( );
    void PutSpeakCellOnEnter (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Speak (
        BSTR Text,
        VARIANT SpeakAsync = vtMissing,
        VARIANT SpeakXML = vtMissing,
        VARIANT Purge = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Direction (
        enum XlSpeakDirection * RHS ) = 0;
    virtual HRESULT __stdcall put_Direction (
        enum XlSpeakDirection RHS ) = 0;
    virtual HRESULT __stdcall get_SpeakCellOnEnter (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_SpeakCellOnEnter (
        VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024467-0001-0000-c000-000000000046"))
IProtection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowFormattingCells))
    VARIANT_BOOL AllowFormattingCells;
    __declspec(property(get=GetAllowFormattingColumns))
    VARIANT_BOOL AllowFormattingColumns;
    __declspec(property(get=GetAllowFormattingRows))
    VARIANT_BOOL AllowFormattingRows;
    __declspec(property(get=GetAllowInsertingColumns))
    VARIANT_BOOL AllowInsertingColumns;
    __declspec(property(get=GetAllowInsertingRows))
    VARIANT_BOOL AllowInsertingRows;
    __declspec(property(get=GetAllowInsertingHyperlinks))
    VARIANT_BOOL AllowInsertingHyperlinks;
    __declspec(property(get=GetAllowDeletingColumns))
    VARIANT_BOOL AllowDeletingColumns;
    __declspec(property(get=GetAllowDeletingRows))
    VARIANT_BOOL AllowDeletingRows;
    __declspec(property(get=GetAllowSorting))
    VARIANT_BOOL AllowSorting;
    __declspec(property(get=GetAllowFiltering))
    VARIANT_BOOL AllowFiltering;
    __declspec(property(get=GetAllowUsingPivotTables))
    VARIANT_BOOL AllowUsingPivotTables;
    __declspec(property(get=GetAllowEditRanges))
    AllowEditRangesPtr AllowEditRanges;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAllowFormattingCells ( );
    VARIANT_BOOL GetAllowFormattingColumns ( );
    VARIANT_BOOL GetAllowFormattingRows ( );
    VARIANT_BOOL GetAllowInsertingColumns ( );
    VARIANT_BOOL GetAllowInsertingRows ( );
    VARIANT_BOOL GetAllowInsertingHyperlinks ( );
    VARIANT_BOOL GetAllowDeletingColumns ( );
    VARIANT_BOOL GetAllowDeletingRows ( );
    VARIANT_BOOL GetAllowSorting ( );
    VARIANT_BOOL GetAllowFiltering ( );
    VARIANT_BOOL GetAllowUsingPivotTables ( );
    AllowEditRangesPtr GetAllowEditRanges ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_AllowFormattingCells (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowFormattingColumns (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowFormattingRows (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowInsertingColumns (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowInsertingRows (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowInsertingHyperlinks (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowDeletingColumns (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowDeletingRows (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowSorting (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowFiltering (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowUsingPivotTables (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowEditRanges (
        struct AllowEditRanges * * RHS ) = 0;
};

struct __declspec(uuid("00024468-0001-0000-c000-000000000046"))
IPivotItemList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT Index,
        struct PivotItem * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Field,
        struct PivotItem * * RHS ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024469-0001-0000-c000-000000000046"))
ITab : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    enum XlColorIndex ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    enum XlColorIndex GetColorIndex ( );
    void PutColorIndex (
        enum XlColorIndex RHS );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Color (
        VARIANT * RHS ) = 0;
    virtual HRESULT __stdcall put_Color (
        VARIANT RHS ) = 0;
    virtual HRESULT __stdcall get_ColorIndex (
        enum XlColorIndex * RHS ) = 0;
    virtual HRESULT __stdcall put_ColorIndex (
        enum XlColorIndex RHS ) = 0;
};

struct __declspec(uuid("0002446a-0001-0000-c000-000000000046"))
IAllowEditRanges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AllowEditRangePtr _Default[];
    __declspec(property(get=GetItem))
    AllowEditRangePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    AllowEditRangePtr GetItem (
        const _variant_t & Index );
    AllowEditRangePtr Add (
        _bstr_t Title,
        struct Range * Range,
        const _variant_t & Password = vtMissing );
    AllowEditRangePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct AllowEditRange * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Title,
        struct Range * Range,
        VARIANT Password,
        struct AllowEditRange * * RHS ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct AllowEditRange * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002446b-0001-0000-c000-000000000046"))
IAllowEditRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange,put=PutRefRange))
    RangePtr Range;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetUsers))
    UserAccessListPtr Users;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t RHS );
    RangePtr GetRange ( );
    void PutRefRange (
        struct Range * RHS );
    HRESULT ChangePassword (
        _bstr_t Password );
    HRESULT Delete ( );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    UserAccessListPtr GetUsers ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Title (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall put_Title (
        BSTR RHS ) = 0;
    virtual HRESULT __stdcall get_Range (
        struct Range * * RHS ) = 0;
    virtual HRESULT __stdcall putref_Range (
        struct Range * RHS ) = 0;
    virtual HRESULT __stdcall raw_ChangePassword (
        BSTR Password ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
    virtual HRESULT __stdcall raw_Unprotect (
        VARIANT Password = vtMissing ) = 0;
    virtual HRESULT __stdcall get_Users (
        struct UserAccessList * * RHS ) = 0;
};

struct __declspec(uuid("0002446c-0001-0000-c000-000000000046"))
IUserAccessList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    UserAccessPtr _Default[];
    __declspec(property(get=GetItem))
    UserAccessPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    UserAccessPtr GetItem (
        const _variant_t & Index );
    UserAccessPtr Add (
        _bstr_t Name,
        VARIANT_BOOL AllowEdit );
    HRESULT DeleteAll ( );
    UserAccessPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * RHS ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT Index,
        struct UserAccess * * RHS ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT_BOOL AllowEdit,
        struct UserAccess * * RHS ) = 0;
    virtual HRESULT __stdcall raw_DeleteAll ( ) = 0;
    virtual HRESULT __stdcall get__Default (
        VARIANT Index,
        struct UserAccess * * RHS ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002446d-0001-0000-c000-000000000046"))
IUserAccess : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowEdit,put=PutAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    VARIANT_BOOL GetAllowEdit ( );
    void PutAllowEdit (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * RHS ) = 0;
    virtual HRESULT __stdcall get_AllowEdit (
        VARIANT_BOOL * RHS ) = 0;
    virtual HRESULT __stdcall put_AllowEdit (
        VARIANT_BOOL RHS ) = 0;
    virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002446e-0001-0000-c000-000000000046"))
IRTD : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetThrottleInterval,put=PutThrottleInterval))
    long ThrottleInterval;

    //
    // Wrapper methods for error-handling
    //

    long GetThrottleInterval ( );
    void PutThrottleInterval (
        long RHS );
    HRESULT RefreshData ( );
    HRESULT RestartServers ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ThrottleInterval (
        long * RHS ) = 0;
    virtual HRESULT __stdcall put_ThrottleInterval (
        long RHS ) = 0;
    virtual HRESULT __stdcall raw_RefreshData ( ) = 0;
    virtual HRESULT __stdcall raw_RestartServers ( ) = 0;
};

struct __declspec(uuid("0002446f-0001-0000-c000-000000000046"))
IDiagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNodes))
    DiagramNodesPtr Nodes;
    __declspec(property(get=GetType))
    enum Office::MsoDiagramType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DiagramNodesPtr GetNodes ( );
    enum Office::MsoDiagramType GetType ( );
    enum Office::MsoTriState GetAutoLayout ( );
    void PutAutoLayout (
        enum Office::MsoTriState RHS );
    enum Office::MsoTriState GetReverse ( );
    void PutReverse (
        enum Office::MsoTriState RHS );
    enum Office::MsoTriState GetAutoFormat ( );
    void PutAutoFormat (
        enum Office::MsoTriState RHS );
    HRESULT Convert (
        enum Office::MsoDiagramType Type );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Application (
        struct _Application * * RHS ) = 0;
    virtual HRESULT __stdcall get_Creator (
        enum XlCreator * RHS ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * RHS ) = 0;
    virtual HRESULT __stdcall get_Nodes (
        struct DiagramNodes * * RHS ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum Office::MsoDiagramType * RHS ) = 0;
    virtual HRESULT __stdcall get_AutoLayout (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoLayout (
        enum Office::MsoTriState RHS ) = 0;
    virtual HRESULT __stdcall get_Reverse (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall put_Reverse (
        enum Office::MsoTriState RHS ) = 0;
    virtual HRESULT __stdcall get_AutoFormat (
        enum Office::MsoTriState * RHS ) = 0;
    virtual HRESULT __stdcall put_AutoFormat (
        enum Office::MsoTriState RHS ) = 0;
    virtual HRESULT __stdcall raw_Convert (
        enum Office::MsoDiagramType Type ) = 0;
};

struct __declspec(uuid("0002084d-0000-0000-c000-000000000046"))
Font : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBold,put=PutBold))
    _variant_t Bold;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetItalic,put=PutItalic))
    _variant_t Italic;
    __declspec(property(get=GetShadow,put=PutShadow))
    _variant_t Shadow;
    __declspec(property(get=GetSize,put=PutSize))
    _variant_t Size;
    __declspec(property(get=GetStrikethrough,put=PutStrikethrough))
    _variant_t Strikethrough;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    _variant_t Underline;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _variant_t FontStyle;
    __declspec(property(get=GetSuperscript,put=PutSuperscript))
    _variant_t Superscript;
    __declspec(property(get=GetSubscript,put=PutSubscript))
    _variant_t Subscript;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackground,put=PutBackground))
    _variant_t Background;
    __declspec(property(get=GetOutlineFont,put=PutOutlineFont))
    _variant_t OutlineFont;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBackground ( );
    void PutBackground (
        const _variant_t & _arg1 );
    _variant_t GetBold ( );
    void PutBold (
        const _variant_t & _arg1 );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetFontStyle ( );
    void PutFontStyle (
        const _variant_t & _arg1 );
    _variant_t GetItalic ( );
    void PutItalic (
        const _variant_t & _arg1 );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & _arg1 );
    _variant_t GetOutlineFont ( );
    void PutOutlineFont (
        const _variant_t & _arg1 );
    _variant_t GetShadow ( );
    void PutShadow (
        const _variant_t & _arg1 );
    _variant_t GetSize ( );
    void PutSize (
        const _variant_t & _arg1 );
    _variant_t GetStrikethrough ( );
    void PutStrikethrough (
        const _variant_t & _arg1 );
    _variant_t GetSubscript ( );
    void PutSubscript (
        const _variant_t & _arg1 );
    _variant_t GetSuperscript ( );
    void PutSuperscript (
        const _variant_t & _arg1 );
    _variant_t GetUnderline ( );
    void PutUnderline (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020893-0000-0000-c000-000000000046"))
Window : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSheets))
    SheetsPtr SelectedSheets;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetSplitColumn,put=PutSplitColumn))
    long SplitColumn;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    double SplitHorizontal;
    __declspec(property(get=GetSplitRow,put=PutSplitRow))
    long SplitRow;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    double SplitVertical;
    __declspec(property(get=GetSplit,put=PutSplit))
    VARIANT_BOOL Split;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState;
    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetTabRatio,put=PutTabRatio))
    double TabRatio;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetDisplayHorizontalScrollBar,put=PutDisplayHorizontalScrollBar))
    VARIANT_BOOL DisplayHorizontalScrollBar;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetDisplayWorkbookTabs,put=PutDisplayWorkbookTabs))
    VARIANT_BOOL DisplayWorkbookTabs;
    __declspec(property(get=GetType))
    enum XlWindowType Type;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRangeSelection))
    RangePtr RangeSelection;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetEnableResize,put=PutEnableResize))
    VARIANT_BOOL EnableResize;
    __declspec(property(get=GetView,put=PutView))
    enum XlWindowView View;
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;
    __declspec(property(get=GetWindowNumber))
    long WindowNumber;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetCaption,put=PutCaption))
    _variant_t Caption;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetUsableHeight))
    double UsableHeight;
    __declspec(property(get=GetUsableWidth))
    double UsableWidth;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetDisplayFormulas,put=PutDisplayFormulas))
    VARIANT_BOOL DisplayFormulas;
    __declspec(property(get=GetDisplayGridlines,put=PutDisplayGridlines))
    VARIANT_BOOL DisplayGridlines;
    __declspec(property(get=GetDisplayHeadings,put=PutDisplayHeadings))
    VARIANT_BOOL DisplayHeadings;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    VARIANT_BOOL _DisplayRightToLeft;
    __declspec(property(get=GetDisplayZeros,put=PutDisplayZeros))
    VARIANT_BOOL DisplayZeros;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFreezePanes,put=PutFreezePanes))
    VARIANT_BOOL FreezePanes;
    __declspec(property(get=GetGridlineColor,put=PutGridlineColor))
    long GridlineColor;
    __declspec(property(get=GetGridlineColorIndex,put=PutGridlineColorIndex))
    enum XlColorIndex GridlineColorIndex;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t ActivateNext ( );
    _variant_t ActivatePrevious ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    PanePtr GetActivePane ( );
    IDispatchPtr GetActiveSheet ( );
    _variant_t GetCaption ( );
    void PutCaption (
        const _variant_t & _arg1 );
    VARIANT_BOOL Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    VARIANT_BOOL GetDisplayFormulas ( );
    void PutDisplayFormulas (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayGridlines ( );
    void PutDisplayGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayHeadings ( );
    void PutDisplayHeadings (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayHorizontalScrollBar ( );
    void PutDisplayHorizontalScrollBar (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayWorkbookTabs ( );
    void PutDisplayWorkbookTabs (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayZeros ( );
    void PutDisplayZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableResize ( );
    void PutEnableResize (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFreezePanes ( );
    void PutFreezePanes (
        VARIANT_BOOL _arg1 );
    long GetGridlineColor ( );
    void PutGridlineColor (
        long _arg1 );
    enum XlColorIndex GetGridlineColorIndex ( );
    void PutGridlineColorIndex (
        enum XlColorIndex _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    WindowPtr NewWindow ( );
    _bstr_t GetOnWindow ( );
    void PutOnWindow (
        _bstr_t _arg1 );
    PanesPtr GetPanes ( );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    RangePtr GetRangeSelection ( );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long _arg1 );
    long GetScrollRow ( );
    void PutScrollRow (
        long _arg1 );
    _variant_t ScrollWorkbookTabs (
        const _variant_t & Sheets = vtMissing,
        const _variant_t & Position = vtMissing );
    SheetsPtr GetSelectedSheets ( );
    IDispatchPtr GetSelection ( );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    VARIANT_BOOL GetSplit ( );
    void PutSplit (
        VARIANT_BOOL _arg1 );
    long GetSplitColumn ( );
    void PutSplitColumn (
        long _arg1 );
    double GetSplitHorizontal ( );
    void PutSplitHorizontal (
        double _arg1 );
    long GetSplitRow ( );
    void PutSplitRow (
        long _arg1 );
    double GetSplitVertical ( );
    void PutSplitVertical (
        double _arg1 );
    double GetTabRatio ( );
    void PutTabRatio (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    enum XlWindowType GetType ( );
    double GetUsableHeight ( );
    double GetUsableWidth ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    RangePtr GetVisibleRange ( );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetWindowNumber ( );
    enum XlWindowState GetWindowState ( );
    void PutWindowState (
        enum XlWindowState _arg1 );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & _arg1 );
    enum XlWindowView GetView ( );
    void PutView (
        enum XlWindowView _arg1 );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    long PointsToScreenPixelsX (
        long Points );
    long PointsToScreenPixelsY (
        long Points );
    IDispatchPtr RangeFromPoint (
        long x,
        long y );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );
};

struct __declspec(uuid("00020892-0000-0000-c000-000000000046"))
Windows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WindowPtr _Default[];
    __declspec(property(get=GetItem))
    WindowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Arrange (
        enum XlArrangeStyle ArrangeStyle,
        const _variant_t & ActiveWorkbook = vtMissing,
        const _variant_t & SyncHorizontal = vtMissing,
        const _variant_t & SyncVertical = vtMissing );
    long GetCount ( );
    WindowPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    WindowPtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("00024413-0000-0000-c000-000000000046"))
AppEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT NewWorkbook (
        struct _Workbook * Wb );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT WorkbookOpen (
        struct _Workbook * Wb );
    HRESULT WorkbookActivate (
        struct _Workbook * Wb );
    HRESULT WorkbookDeactivate (
        struct _Workbook * Wb );
    HRESULT WorkbookBeforeClose (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforeSave (
        struct _Workbook * Wb,
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforePrint (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookNewSheet (
        struct _Workbook * Wb,
        IDispatch * Sh );
    HRESULT WorkbookAddinInstall (
        struct _Workbook * Wb );
    HRESULT WorkbookAddinUninstall (
        struct _Workbook * Wb );
    HRESULT WindowResize (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowActivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableCloseConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableOpenConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
};

struct __declspec(uuid("00020845-0000-0000-c000-000000000046"))
WorksheetFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Count (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL IsNA (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsError (
        const _variant_t & Arg1 );
    double Sum (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Average (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Min (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Max (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Npv (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double StDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _bstr_t Dollar (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Fixed (
        double Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing );
    double Pi ( );
    double Ln (
        double Arg1 );
    double Log10 (
        double Arg1 );
    double Round (
        double Arg1,
        double Arg2 );
    _variant_t Lookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Index (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _bstr_t Rept (
        _bstr_t Arg1,
        double Arg2 );
    VARIANT_BOOL And (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL Or (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DCount (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DSum (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DAverage (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMin (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMax (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DStDev (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Var (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DVar (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t Text (
        const _variant_t & Arg1,
        _bstr_t Arg2 );
    _variant_t LinEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Trend (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t LogEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Growth (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    double Pv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Fv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double NPer (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Pmt (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Rate (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double MIrr (
        const _variant_t & Arg1,
        double Arg2,
        double Arg3 );
    double Irr (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Match (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Weekday (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Search (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Transpose (
        const _variant_t & Arg1 );
    double Atan2 (
        double Arg1,
        double Arg2 );
    double Asin (
        double Arg1 );
    double Acos (
        double Arg1 );
    _variant_t Choose (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t HLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    _variant_t VLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Log (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Proper (
        _bstr_t Arg1 );
    _bstr_t Trim (
        _bstr_t Arg1 );
    _bstr_t Replace (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    _bstr_t Substitute (
        _bstr_t Arg1,
        _bstr_t Arg2,
        _bstr_t Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Find (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    VARIANT_BOOL IsErr (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsText (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsNumber (
        const _variant_t & Arg1 );
    double Sln (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Syd (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double Ddb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _bstr_t Clean (
        _bstr_t Arg1 );
    double MDeterm (
        const _variant_t & Arg1 );
    _variant_t MInverse (
        const _variant_t & Arg1 );
    _variant_t MMult (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Ipmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double Ppmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double CountA (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Product (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Fact (
        double Arg1 );
    double DProduct (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsNonText (
        const _variant_t & Arg1 );
    double StDevP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double VarP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DStDevP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DVarP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsLogical (
        const _variant_t & Arg1 );
    double DCountA (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t USDollar (
        double Arg1,
        double Arg2 );
    double FindB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    double SearchB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _bstr_t ReplaceB (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    double RoundUp (
        double Arg1,
        double Arg2 );
    double RoundDown (
        double Arg1,
        double Arg2 );
    double Rank (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Days360 (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Vdb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double Arg5,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing );
    double Median (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumProduct (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Sinh (
        double Arg1 );
    double Cosh (
        double Arg1 );
    double Tanh (
        double Arg1 );
    double Asinh (
        double Arg1 );
    double Acosh (
        double Arg1 );
    double Atanh (
        double Arg1 );
    _variant_t DGet (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Db (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _variant_t Frequency (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double AveDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double BetaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double GammaLn (
        double Arg1 );
    double BetaInv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double BinomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double ChiDist (
        double Arg1,
        double Arg2 );
    double ChiInv (
        double Arg1,
        double Arg2 );
    double Combin (
        double Arg1,
        double Arg2 );
    double Confidence (
        double Arg1,
        double Arg2,
        double Arg3 );
    double CritBinom (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Even (
        double Arg1 );
    double ExponDist (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double FDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double FInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Fisher (
        double Arg1 );
    double FisherInv (
        double Arg1 );
    double Floor (
        double Arg1,
        double Arg2 );
    double GammaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double GammaInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Ceiling (
        double Arg1,
        double Arg2 );
    double HypGeomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double LogNormDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double LogInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NegBinomDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double NormSDist (
        double Arg1 );
    double NormInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormSInv (
        double Arg1 );
    double Standardize (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Odd (
        double Arg1 );
    double Permut (
        double Arg1,
        double Arg2 );
    double Poisson (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double TDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Weibull (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double SumXMY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2MY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2PY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double ChiTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Correl (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Covar (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Forecast (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double FTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Intercept (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Pearson (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double RSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double StEyx (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Slope (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double TTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        double Arg4 );
    double Prob (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing );
    double DevSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double GeoMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double HarMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Kurt (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Skew (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double ZTest (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Large (
        const _variant_t & Arg1,
        double Arg2 );
    double Small (
        const _variant_t & Arg1,
        double Arg2 );
    double Quartile (
        const _variant_t & Arg1,
        double Arg2 );
    double Percentile (
        const _variant_t & Arg1,
        double Arg2 );
    double PercentRank (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Mode (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double TrimMean (
        const _variant_t & Arg1,
        double Arg2 );
    double TInv (
        double Arg1,
        double Arg2 );
    double Power (
        double Arg1,
        double Arg2 );
    double Radians (
        double Arg1 );
    double Degrees (
        double Arg1 );
    double Subtotal (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumIf (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double CountIf (
        struct Range * Arg1,
        const _variant_t & Arg2 );
    double CountBlank (
        struct Range * Arg1 );
    double Ispmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    _bstr_t Roman (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Asc (
        _bstr_t Arg1 );
    _bstr_t Dbcs (
        _bstr_t Arg1 );
    _bstr_t Phonetic (
        struct Range * Arg1 );
    _bstr_t BahtText (
        double Arg1 );
    _bstr_t ThaiDayOfWeek (
        double Arg1 );
    _bstr_t ThaiDigit (
        _bstr_t Arg1 );
    _bstr_t ThaiMonthOfYear (
        double Arg1 );
    _bstr_t ThaiNumSound (
        double Arg1 );
    _bstr_t ThaiNumString (
        double Arg1 );
    double ThaiStringLength (
        _bstr_t Arg1 );
    VARIANT_BOOL IsThaiDigit (
        _bstr_t Arg1 );
    double RoundBahtDown (
        double Arg1 );
    double RoundBahtUp (
        double Arg1 );
    double ThaiYear (
        double Arg1 );
    _variant_t RTD (
        const _variant_t & progID,
        const _variant_t & server,
        const _variant_t & topic1,
        const _variant_t & topic2 = vtMissing,
        const _variant_t & topic3 = vtMissing,
        const _variant_t & topic4 = vtMissing,
        const _variant_t & topic5 = vtMissing,
        const _variant_t & topic6 = vtMissing,
        const _variant_t & topic7 = vtMissing,
        const _variant_t & topic8 = vtMissing,
        const _variant_t & topic9 = vtMissing,
        const _variant_t & topic10 = vtMissing,
        const _variant_t & topic11 = vtMissing,
        const _variant_t & topic12 = vtMissing,
        const _variant_t & topic13 = vtMissing,
        const _variant_t & topic14 = vtMissing,
        const _variant_t & topic15 = vtMissing,
        const _variant_t & topic16 = vtMissing,
        const _variant_t & topic17 = vtMissing,
        const _variant_t & topic18 = vtMissing,
        const _variant_t & topic19 = vtMissing,
        const _variant_t & topic20 = vtMissing,
        const _variant_t & topic21 = vtMissing,
        const _variant_t & topic22 = vtMissing,
        const _variant_t & topic23 = vtMissing,
        const _variant_t & topic24 = vtMissing,
        const _variant_t & topic25 = vtMissing,
        const _variant_t & topic26 = vtMissing,
        const _variant_t & topic27 = vtMissing,
        const _variant_t & topic28 = vtMissing );
};

struct __declspec(uuid("00020846-0000-0000-c000-000000000046"))
Range : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _variant_t _Default[][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetListHeaderRows))
    long ListHeaderRows;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[];
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[][];
    __declspec(property(get=GetComment))
    CommentPtr Comment;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetSoundNote))
    SoundNotePtr SoundNote;
    __declspec(property(get=GetPhonetics))
    PhoneticsPtr Phonetics;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetFormulaLabel,put=PutFormulaLabel))
    enum XlFormulaLabel FormulaLabel;
    __declspec(property(get=GetRange))
    RangePtr _Range[][];
    __declspec(property(get=GetWorksheet))
    _WorksheetPtr Worksheet;
    __declspec(property(get=GetMergeArea))
    RangePtr MergeArea;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetEnd))
    RangePtr End[];
    __declspec(property(get=GetCurrentArray))
    RangePtr CurrentArray;
    __declspec(property(get=GetNext))
    RangePtr Next;
    __declspec(property(get=GetPrevious))
    RangePtr Previous;
    __declspec(property(get=GetPrefixCharacter))
    _variant_t PrefixCharacter;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetValidation))
    ValidationPtr Validation;
    __declspec(property(get=GetValue2,put=PutValue2))
    _variant_t Value2;
    __declspec(property(get=GetPhonetic))
    PhoneticPtr Phonetic;
    __declspec(property(get=GetFormatConditions))
    FormatConditionsPtr FormatConditions;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddress))
    _bstr_t Address[][][][][];
    __declspec(property(get=GetPivotCell))
    PivotCellPtr PivotCell;
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetErrors))
    ErrorsPtr Errors;
    __declspec(property(get=GetColumn))
    long Column;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetColumnWidth,put=PutColumnWidth))
    _variant_t ColumnWidth;
    __declspec(property(get=GetCurrentRegion))
    RangePtr CurrentRegion;
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetEntireColumn))
    RangePtr EntireColumn;
    __declspec(property(get=GetEntireRow))
    RangePtr EntireRow;
    __declspec(property(get=GetLocationInTable))
    enum XlLocationInTable LocationInTable;
    __declspec(property(get=GetDependents))
    RangePtr Dependents;
    __declspec(property(get=GetPrecedents))
    RangePtr Precedents;
    __declspec(property(get=GetDirectDependents))
    RangePtr DirectDependents;
    __declspec(property(get=GetDirectPrecedents))
    RangePtr DirectPrecedents;
    __declspec(property(get=GetOffset))
    RangePtr Offset[][];
    __declspec(property(get=GetPageBreak,put=PutPageBreak))
    long PageBreak;
    __declspec(property(get=GetResize))
    RangePtr Resize[][];
    __declspec(property(get=GetRow))
    long Row;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetStyle,put=PutStyle))
    _variant_t Style;
    __declspec(property(get=GetFormula,put=PutFormula))
    _variant_t Formula;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _variant_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _variant_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _variant_t FormulaR1C1Local;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetHasArray))
    _variant_t HasArray;
    __declspec(property(get=GetHasFormula))
    _variant_t HasFormula;
    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetHeight))
    _variant_t Height;
    __declspec(property(get=GetAreas))
    AreasPtr Areas;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    _variant_t OutlineLevel;
    __declspec(property(get=GetTop))
    _variant_t Top;
    __declspec(property(get=GetLeft))
    _variant_t Left;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _variant_t RowHeight;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetSummary))
    _variant_t Summary;
    __declspec(property(get=GetUseStandardHeight,put=PutUseStandardHeight))
    _variant_t UseStandardHeight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetUseStandardWidth,put=PutUseStandardWidth))
    _variant_t UseStandardWidth;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText))
    _variant_t Text;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    _variant_t ShowDetail;
    __declspec(property(get=GetFormulaArray,put=PutFormulaArray))
    _variant_t FormulaArray;
    __declspec(property(get=GetAddressLocal))
    _bstr_t AddressLocal[][][][][];
    __declspec(property(get=GetWidth))
    _variant_t Width;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & _arg1 );
    _bstr_t GetAddress (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _bstr_t GetAddressLocal (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _variant_t AdvancedFilter (
        enum XlFilterAction Action,
        const _variant_t & CriteriaRange = vtMissing,
        const _variant_t & CopyToRange = vtMissing,
        const _variant_t & Unique = vtMissing );
    _variant_t ApplyNames (
        const _variant_t & Names,
        const _variant_t & IgnoreRelativeAbsolute,
        const _variant_t & UseRowColumnNames,
        const _variant_t & OmitColumn,
        const _variant_t & OmitRow,
        enum XlApplyNamesOrder Order,
        const _variant_t & AppendLast = vtMissing );
    _variant_t ApplyOutlineStyles ( );
    AreasPtr GetAreas ( );
    _bstr_t AutoComplete (
        _bstr_t String );
    _variant_t AutoFill (
        struct Range * Destination,
        enum XlAutoFillType Type );
    _variant_t AutoFilter (
        const _variant_t & Field,
        const _variant_t & Criteria1,
        enum XlAutoFilterOperator Operator,
        const _variant_t & Criteria2 = vtMissing,
        const _variant_t & VisibleDropDown = vtMissing );
    _variant_t AutoFit ( );
    _variant_t AutoFormat (
        enum XlRangeAutoFormat Format,
        const _variant_t & Number = vtMissing,
        const _variant_t & Font = vtMissing,
        const _variant_t & Alignment = vtMissing,
        const _variant_t & Border = vtMissing,
        const _variant_t & Pattern = vtMissing,
        const _variant_t & Width = vtMissing );
    _variant_t AutoOutline ( );
    _variant_t BorderAround (
        const _variant_t & LineStyle,
        enum XlBorderWeight Weight,
        enum XlColorIndex ColorIndex,
        const _variant_t & Color = vtMissing );
    BordersPtr GetBorders ( );
    _variant_t Calculate ( );
    RangePtr GetCells ( );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t ClearFormats ( );
    _variant_t ClearNotes ( );
    _variant_t ClearOutline ( );
    long GetColumn ( );
    RangePtr ColumnDifferences (
        const _variant_t & Comparison );
    RangePtr GetColumns ( );
    _variant_t GetColumnWidth ( );
    void PutColumnWidth (
        const _variant_t & _arg1 );
    _variant_t Consolidate (
        const _variant_t & Sources = vtMissing,
        const _variant_t & Function = vtMissing,
        const _variant_t & TopRow = vtMissing,
        const _variant_t & LeftColumn = vtMissing,
        const _variant_t & CreateLinks = vtMissing );
    _variant_t Copy (
        const _variant_t & Destination = vtMissing );
    long CopyFromRecordset (
        IUnknown * Data,
        const _variant_t & MaxRows = vtMissing,
        const _variant_t & MaxColumns = vtMissing );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    long GetCount ( );
    _variant_t CreateNames (
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    _variant_t CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing );
    RangePtr GetCurrentArray ( );
    RangePtr GetCurrentRegion ( );
    _variant_t Cut (
        const _variant_t & Destination = vtMissing );
    _variant_t DataSeries (
        const _variant_t & Rowcol,
        enum XlDataSeriesType Type,
        enum XlDataSeriesDate Date,
        const _variant_t & Step = vtMissing,
        const _variant_t & Stop = vtMissing,
        const _variant_t & Trend = vtMissing );
    _variant_t Get_Default (
        const _variant_t & RowIndex = vtMissing,
        const _variant_t & ColumnIndex = vtMissing );
    void Put_Default (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        const _variant_t & _arg3 = vtMissing );
    _variant_t Delete (
        const _variant_t & Shift = vtMissing );
    RangePtr GetDependents ( );
    _variant_t ignorethis ( );
    RangePtr GetDirectDependents ( );
    RangePtr GetDirectPrecedents ( );
    _variant_t EditionOptions (
        enum XlEditionType Type,
        enum XlEditionOptionsOption Option,
        const _variant_t & Name,
        const _variant_t & Reference,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance ChartSize,
        const _variant_t & Format = vtMissing );
    RangePtr GetEnd (
        enum XlDirection Direction );
    RangePtr GetEntireColumn ( );
    RangePtr GetEntireRow ( );
    _variant_t FillDown ( );
    _variant_t FillLeft ( );
    _variant_t FillRight ( );
    _variant_t FillUp ( );
    RangePtr Find (
        const _variant_t & What,
        const _variant_t & After,
        const _variant_t & LookIn,
        const _variant_t & LookAt,
        const _variant_t & SearchOrder,
        enum XlSearchDirection SearchDirection,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing );
    RangePtr FindNext (
        const _variant_t & After = vtMissing );
    RangePtr FindPrevious (
        const _variant_t & After = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetFormula ( );
    void PutFormula (
        const _variant_t & _arg1 );
    _variant_t GetFormulaArray ( );
    void PutFormulaArray (
        const _variant_t & _arg1 );
    enum XlFormulaLabel GetFormulaLabel ( );
    void PutFormulaLabel (
        enum XlFormulaLabel _arg1 );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & _arg1 );
    _variant_t GetFormulaLocal ( );
    void PutFormulaLocal (
        const _variant_t & _arg1 );
    _variant_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        const _variant_t & _arg1 );
    _variant_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        const _variant_t & _arg1 );
    _variant_t FunctionWizard ( );
    VARIANT_BOOL GoalSeek (
        const _variant_t & Goal,
        struct Range * ChangingCell );
    _variant_t Group (
        const _variant_t & Start = vtMissing,
        const _variant_t & End = vtMissing,
        const _variant_t & By = vtMissing,
        const _variant_t & Periods = vtMissing );
    _variant_t GetHasArray ( );
    _variant_t GetHasFormula ( );
    _variant_t GetHeight ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & _arg1 );
    HRESULT InsertIndent (
        long InsertAmount );
    _variant_t Insert (
        const _variant_t & Shift = vtMissing,
        const _variant_t & CopyOrigin = vtMissing );
    InteriorPtr GetInterior ( );
    _variant_t GetItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing );
    void PutItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex,
        const _variant_t & _arg3 = vtMissing );
    _variant_t Justify ( );
    _variant_t GetLeft ( );
    long GetListHeaderRows ( );
    _variant_t ListNames ( );
    enum XlLocationInTable GetLocationInTable ( );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & _arg1 );
    HRESULT Merge (
        const _variant_t & Across = vtMissing );
    HRESULT UnMerge ( );
    RangePtr GetMergeArea ( );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & _arg1 );
    _variant_t NavigateArrow (
        const _variant_t & TowardPrecedent = vtMissing,
        const _variant_t & ArrowNumber = vtMissing,
        const _variant_t & LinkNumber = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    RangePtr GetNext ( );
    _bstr_t NoteText (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    RangePtr GetOffset (
        const _variant_t & RowOffset = vtMissing,
        const _variant_t & ColumnOffset = vtMissing );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetOutlineLevel ( );
    void PutOutlineLevel (
        const _variant_t & _arg1 );
    long GetPageBreak ( );
    void PutPageBreak (
        long _arg1 );
    _variant_t Parse (
        const _variant_t & ParseLine = vtMissing,
        const _variant_t & Destination = vtMissing );
    _variant_t _PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotTablePtr GetPivotTable ( );
    RangePtr GetPrecedents ( );
    _variant_t GetPrefixCharacter ( );
    RangePtr GetPrevious ( );
    _variant_t _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    _variant_t RemoveSubtotal ( );
    VARIANT_BOOL Replace (
        const _variant_t & What,
        const _variant_t & Replacement,
        const _variant_t & LookAt = vtMissing,
        const _variant_t & SearchOrder = vtMissing,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing,
        const _variant_t & ReplaceFormat = vtMissing );
    RangePtr GetResize (
        const _variant_t & RowSize = vtMissing,
        const _variant_t & ColumnSize = vtMissing );
    long GetRow ( );
    RangePtr RowDifferences (
        const _variant_t & Comparison );
    _variant_t GetRowHeight ( );
    void PutRowHeight (
        const _variant_t & _arg1 );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t Select ( );
    _variant_t Show ( );
    _variant_t ShowDependents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShowDetail ( );
    void PutShowDetail (
        const _variant_t & _arg1 );
    _variant_t ShowErrors ( );
    _variant_t ShowPrecedents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & _arg1 );
    _variant_t Sort (
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Key2,
        const _variant_t & Type,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortMethod SortMethod,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    _variant_t SortSpecial (
        enum XlSortMethod SortMethod,
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Type,
        const _variant_t & Key2,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    SoundNotePtr GetSoundNote ( );
    RangePtr SpecialCells (
        enum XlCellType Type,
        const _variant_t & Value = vtMissing );
    _variant_t GetStyle ( );
    void PutStyle (
        const _variant_t & _arg1 );
    _variant_t SubscribeTo (
        _bstr_t Edition,
        enum XlSubscribeToFormat Format );
    _variant_t Subtotal (
        long GroupBy,
        enum XlConsolidationFunction Function,
        const _variant_t & TotalList,
        const _variant_t & Replace,
        const _variant_t & PageBreaks,
        enum XlSummaryRow SummaryBelowData );
    _variant_t GetSummary ( );
    _variant_t Table (
        const _variant_t & RowInput = vtMissing,
        const _variant_t & ColumnInput = vtMissing );
    _variant_t GetText ( );
    _variant_t TextToColumns (
        const _variant_t & Destination,
        enum XlTextParsingType DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        const _variant_t & TrailingMinusNumbers = vtMissing );
    _variant_t GetTop ( );
    _variant_t Ungroup ( );
    _variant_t GetUseStandardHeight ( );
    void PutUseStandardHeight (
        const _variant_t & _arg1 );
    _variant_t GetUseStandardWidth ( );
    void PutUseStandardWidth (
        const _variant_t & _arg1 );
    ValidationPtr GetValidation ( );
    _variant_t GetValue (
        const _variant_t & RangeValueDataType = vtMissing );
    void PutValue (
        const _variant_t & RangeValueDataType,
        const _variant_t & _arg2 = vtMissing );
    _variant_t GetValue2 ( );
    void PutValue2 (
        const _variant_t & _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetWidth ( );
    _WorksheetPtr GetWorksheet ( );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & _arg1 );
    CommentPtr AddComment (
        const _variant_t & Text = vtMissing );
    CommentPtr GetComment ( );
    HRESULT ClearComments ( );
    PhoneticPtr GetPhonetic ( );
    FormatConditionsPtr GetFormatConditions ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    HyperlinksPtr GetHyperlinks ( );
    PhoneticsPtr GetPhonetics ( );
    HRESULT SetPhonetic ( );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t _arg1 );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    PivotCellPtr GetPivotCell ( );
    HRESULT Dirty ( );
    ErrorsPtr GetErrors ( );
    SmartTagsPtr GetSmartTags ( );
    HRESULT Speak (
        const _variant_t & SpeakDirection = vtMissing,
        const _variant_t & SpeakFormulas = vtMissing );
    _variant_t PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    VARIANT_BOOL GetAllowEdit ( );
};

struct __declspec(uuid("0002440f-0000-0000-c000-000000000046"))
ChartEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Resize ( );
    HRESULT MouseDown (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseUp (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseMove (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT BeforeRightClick (
        VARIANT_BOOL * Cancel );
    HRESULT DragPlot ( );
    HRESULT DragOver ( );
    HRESULT BeforeDoubleClick (
        long ElementID,
        long Arg1,
        long Arg2,
        VARIANT_BOOL * Cancel );
    HRESULT Select (
        long ElementID,
        long Arg1,
        long Arg2 );
    HRESULT SeriesChange (
        long SeriesIndex,
        long PointIndex );
    HRESULT Calculate ( );
};

struct __declspec(uuid("00024402-0000-0000-c000-000000000046"))
VPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak _arg1 );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * _arg1 );
};

struct __declspec(uuid("00024401-0000-0000-c000-000000000046"))
HPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak _arg1 );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * _arg1 );
};

struct __declspec(uuid("00024404-0000-0000-c000-000000000046"))
HPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    HPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HPageBreakPtr GetItem (
        long Index );
    HPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HPageBreakPtr Add (
        IDispatch * Before );
};

struct __declspec(uuid("00024405-0000-0000-c000-000000000046"))
VPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    VPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    VPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    VPageBreakPtr GetItem (
        long Index );
    VPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VPageBreakPtr Add (
        IDispatch * Before );
};

struct __declspec(uuid("00024407-0000-0000-c000-000000000046"))
RecentFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    long GetIndex ( );
    _WorkbookPtr Open ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024406-0000-0000-c000-000000000046"))
RecentFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RecentFilePtr _Default[];
    __declspec(property(get=GetItem))
    RecentFilePtr Item[];
    __declspec(property(get=GetMaximum,put=PutMaximum))
    long Maximum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetMaximum ( );
    void PutMaximum (
        long _arg1 );
    long GetCount ( );
    RecentFilePtr GetItem (
        long Index );
    RecentFilePtr Get_Default (
        long Index );
    RecentFilePtr Add (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024411-0000-0000-c000-000000000046"))
DocEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT SelectionChange (
        struct Range * Target );
    HRESULT BeforeDoubleClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT BeforeRightClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Calculate ( );
    HRESULT Change (
        struct Range * Target );
    HRESULT FollowHyperlink (
        struct Hyperlink * Target );
    HRESULT PivotTableUpdate (
        struct PivotTable * Target );
};

struct __declspec(uuid("00020852-0000-0000-c000-000000000046"))
Style : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlOrientation Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _bstr_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    long IndentLevel;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    VARIANT_BOOL FormulaHidden;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    VARIANT_BOOL ShrinkToFit;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    VARIANT_BOOL WrapText;
    __declspec(property(get=GetNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIncludeAlignment,put=PutIncludeAlignment))
    VARIANT_BOOL IncludeAlignment;
    __declspec(property(get=GetIncludeBorder,put=PutIncludeBorder))
    VARIANT_BOOL IncludeBorder;
    __declspec(property(get=GetIncludeFont,put=PutIncludeFont))
    VARIANT_BOOL IncludeFont;
    __declspec(property(get=GetIncludeNumber,put=PutIncludeNumber))
    VARIANT_BOOL IncludeNumber;
    __declspec(property(get=GetIncludePatterns,put=PutIncludePatterns))
    VARIANT_BOOL IncludePatterns;
    __declspec(property(get=GetIncludeProtection,put=PutIncludeProtection))
    VARIANT_BOOL IncludeProtection;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBuiltIn ( );
    BordersPtr GetBorders ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetFormulaHidden ( );
    void PutFormulaHidden (
        VARIANT_BOOL _arg1 );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign _arg1 );
    VARIANT_BOOL GetIncludeAlignment ( );
    void PutIncludeAlignment (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeBorder ( );
    void PutIncludeBorder (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeFont ( );
    void PutIncludeFont (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeNumber ( );
    void PutIncludeNumber (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludePatterns ( );
    void PutIncludePatterns (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeProtection ( );
    void PutIncludeProtection (
        VARIANT_BOOL _arg1 );
    long GetIndentLevel ( );
    void PutIndentLevel (
        long _arg1 );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    _bstr_t GetName ( );
    _bstr_t GetNameLocal ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    _bstr_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        _bstr_t _arg1 );
    enum XlOrientation GetOrientation ( );
    void PutOrientation (
        enum XlOrientation _arg1 );
    VARIANT_BOOL GetShrinkToFit ( );
    void PutShrinkToFit (
        VARIANT_BOOL _arg1 );
    _bstr_t GetValue ( );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign _arg1 );
    VARIANT_BOOL GetWrapText ( );
    void PutWrapText (
        VARIANT_BOOL _arg1 );
    _bstr_t Get_Default ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
};

struct __declspec(uuid("00020853-0000-0000-c000-000000000046"))
Styles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    StylePtr _Default[];
    __declspec(property(get=GetItem))
    StylePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    StylePtr Add (
        _bstr_t Name,
        const _variant_t & BasedOn = vtMissing );
    long GetCount ( );
    StylePtr GetItem (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Workbook );
    IUnknownPtr Get_NewEnum ( );
    StylePtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("00020855-0000-0000-c000-000000000046"))
Borders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    BorderPtr _Default[];
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetItem))
    BorderPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    long GetCount ( );
    BorderPtr GetItem (
        enum XlBordersIndex Index );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & _arg1 );
    IUnknownPtr Get_NewEnum ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & _arg1 );
    BorderPtr Get_Default (
        enum XlBordersIndex Index );
};

struct __declspec(uuid("00020857-0000-0000-c000-000000000046"))
AddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstalled,put=PutInstalled))
    VARIANT_BOOL Installed;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetCLSID))
    _bstr_t CLSID;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComments))
    _bstr_t Comments;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetComments ( );
    _bstr_t GetFullName ( );
    VARIANT_BOOL GetInstalled ( );
    void PutInstalled (
        VARIANT_BOOL _arg1 );
    _bstr_t GetKeywords ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    _bstr_t GetSubject ( );
    _bstr_t GetTitle ( );
    _bstr_t GetprogID ( );
    _bstr_t GetCLSID ( );
};

struct __declspec(uuid("00020858-0000-0000-c000-000000000046"))
AddIns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AddInPtr _Default[];
    __declspec(property(get=GetItem))
    AddInPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    AddInPtr Add (
        _bstr_t Filename,
        const _variant_t & JOECopyFile = vtMissing );
    long GetCount ( );
    AddInPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    AddInPtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("0002085c-0000-0000-c000-000000000046"))
Toolbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToolbarButtons))
    ToolbarButtonsPtr ToolbarButtons;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum XlToolbarProtection Protection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    HRESULT Delete ( );
    long GetHeight ( );
    void PutHeight (
        long _arg1 );
    long GetLeft ( );
    void PutLeft (
        long _arg1 );
    _bstr_t GetName ( );
    long GetPosition ( );
    void PutPosition (
        long _arg1 );
    enum XlToolbarProtection GetProtection ( );
    void PutProtection (
        enum XlToolbarProtection _arg1 );
    HRESULT Reset ( );
    ToolbarButtonsPtr GetToolbarButtons ( );
    long GetTop ( );
    void PutTop (
        long _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
};

struct __declspec(uuid("0002085d-0000-0000-c000-000000000046"))
Toolbars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    ToolbarPtr Get_Default (
        const _variant_t & Index );
    ToolbarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002085e-0000-0000-c000-000000000046"))
ToolbarButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPushed,put=PutPushed))
    VARIANT_BOOL Pushed;
    __declspec(property(get=GetIsGap))
    VARIANT_BOOL IsGap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL _arg1 );
    HRESULT Copy (
        struct Toolbar * Toolbar,
        long Before );
    HRESULT CopyFace ( );
    HRESULT Delete ( );
    HRESULT Edit ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetID ( );
    VARIANT_BOOL GetIsGap ( );
    HRESULT Move (
        struct Toolbar * Toolbar,
        long Before );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    HRESULT PasteFace ( );
    VARIANT_BOOL GetPushed ( );
    void PutPushed (
        VARIANT_BOOL _arg1 );
    HRESULT Reset ( );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t _arg1 );
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
};

struct __declspec(uuid("0002085f-0000-0000-c000-000000000046"))
ToolbarButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarButtonPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarButtonPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarButtonPtr Add (
        const _variant_t & Button = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & Pushed = vtMissing,
        const _variant_t & Enabled = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    long GetCount ( );
    ToolbarButtonPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ToolbarButtonPtr Get_Default (
        long Index );
};

struct __declspec(uuid("00020860-0000-0000-c000-000000000046"))
Areas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RangePtr _Default[];
    __declspec(property(get=GetItem))
    RangePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    RangePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    RangePtr Get_Default (
        long Index );
};

struct __declspec(uuid("00024412-0000-0000-c000-000000000046"))
WorkbookEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Open ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT BeforeClose (
        VARIANT_BOOL * Cancel );
    HRESULT BeforeSave (
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT BeforePrint (
        VARIANT_BOOL * Cancel );
    HRESULT NewSheet (
        IDispatch * Sh );
    HRESULT AddinInstall ( );
    HRESULT AddinUninstall ( );
    HRESULT WindowResize (
        struct Window * Wn );
    HRESULT WindowActivate (
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct Window * Wn );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT PivotTableCloseConnection (
        struct PivotTable * Target );
    HRESULT PivotTableOpenConnection (
        struct PivotTable * Target );
};

struct __declspec(uuid("00020863-0000-0000-c000-000000000046"))
MenuBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuBarPtr _Default[];
    __declspec(property(get=GetItem))
    MenuBarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuBarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    MenuBarPtr Get_Default (
        const _variant_t & Index );
    MenuBarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020864-0000-0000-c000-000000000046"))
MenuBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenus))
    MenusPtr Menus;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    long GetIndex ( );
    MenusPtr GetMenus ( );
    HRESULT Reset ( );
};

struct __declspec(uuid("00020865-0000-0000-c000-000000000046"))
Menus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuPtr _Default[];
    __declspec(property(get=GetItem))
    MenuPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuPtr Add (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    MenuPtr Get_Default (
        const _variant_t & Index );
    MenuPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020866-0000-0000-c000-000000000046"))
Menu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenuItems))
    MenuItemsPtr MenuItems;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    MenuItemsPtr GetMenuItems ( );
};

struct __declspec(uuid("00020867-0000-0000-c000-000000000046"))
MenuItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuItemPtr Add (
        _bstr_t Caption,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    MenuPtr AddMenu (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020868-0000-0000-c000-000000000046"))
MenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetChecked ( );
    void PutChecked (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetIndex ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002086d-0000-0000-c000-000000000046"))
Charts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _ChartPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("0002086f-0000-0000-c000-000000000046"))
DrawingObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    VARIANT_BOOL MultiSelect;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    FontPtr GetFont ( );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    InteriorPtr GetInterior ( );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMultiSelect ( );
    void PutMultiSelect (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t Reshape (
        long Vertex,
        const _variant_t & Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    _variant_t Selected (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    IDispatchPtr Ungroup ( );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t Vertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    GroupObjectPtr Group ( );
    _variant_t LinkCombo (
        const _variant_t & Link = vtMissing );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002441c-0000-0000-c000-000000000046"))
PivotCache : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetSourceType))
    enum XlPivotTableSourceType SourceType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetADOConnection))
    IDispatchPtr ADOConnection;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetOLAP))
    VARIANT_BOOL OLAP;
    __declspec(property(get=GetMissingItemsLimit,put=PutMissingItemsLimit))
    enum XlPivotTableMissingItems MissingItemsLimit;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetOptimizeCache,put=PutOptimizeCache))
    VARIANT_BOOL OptimizeCache;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetLocalConnection,put=PutLocalConnection))
    _variant_t LocalConnection;
    __declspec(property(get=GetUseLocalConnection,put=PutUseLocalConnection))
    VARIANT_BOOL UseLocalConnection;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL _arg1 );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetOptimizeCache ( );
    void PutOptimizeCache (
        VARIANT_BOOL _arg1 );
    long GetRecordCount ( );
    HRESULT Refresh ( );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL _arg1 );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & _arg1 );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & _arg1 );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType _arg1 );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL _arg1 );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long _arg1 );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * _arg1 );
    HRESULT ResetTimer ( );
    _variant_t GetLocalConnection ( );
    void PutLocalConnection (
        const _variant_t & _arg1 );
    PivotTablePtr CreatePivotTable (
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );
    VARIANT_BOOL GetUseLocalConnection ( );
    void PutUseLocalConnection (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetADOConnection ( );
    VARIANT_BOOL GetIsConnected ( );
    HRESULT MakeConnection ( );
    VARIANT_BOOL GetOLAP ( );
    enum XlPivotTableSourceType GetSourceType ( );
    enum XlPivotTableMissingItems GetMissingItemsLimit ( );
    void PutMissingItemsLimit (
        enum XlPivotTableMissingItems _arg1 );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t _arg1 );
    _bstr_t GetSourceDataFile ( );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect _arg1 );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );
};

struct __declspec(uuid("0002441d-0000-0000-c000-000000000046"))
PivotCaches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotCachePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotCachePtr Item (
        const _variant_t & Index );
    PivotCachePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotCachePtr Add (
        enum XlPivotTableSourceType SourceType,
        const _variant_t & SourceData = vtMissing );
};

struct __declspec(uuid("0002441e-0000-0000-c000-000000000046"))
PivotFormula : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    long GetIndex ( );
    void PutIndex (
        long _arg1 );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002441f-0000-0000-c000-000000000046"))
PivotFormulas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFormulaPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFormulaPtr _Add (
        _bstr_t Formula );
    PivotFormulaPtr Item (
        const _variant_t & Index );
    PivotFormulaPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotFormulaPtr Add (
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );
};

struct __declspec(uuid("00020872-0000-0000-c000-000000000046"))
PivotTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageFieldWrapCount,put=PutPageFieldWrapCount))
    long PageFieldWrapCount;
    __declspec(property(get=GetPivotSelectionStandard,put=PutPivotSelectionStandard))
    _bstr_t PivotSelectionStandard;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetDataPivotField))
    PivotFieldPtr DataPivotField;
    __declspec(property(get=GetEnableDataValueEditing,put=PutEnableDataValueEditing))
    VARIANT_BOOL EnableDataValueEditing;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetRowGrand,put=PutRowGrand))
    VARIANT_BOOL RowGrand;
    __declspec(property(get=GetColumnGrand,put=PutColumnGrand))
    VARIANT_BOOL ColumnGrand;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;
    __declspec(property(get=GetTableRange1))
    RangePtr TableRange1;
    __declspec(property(get=GetTableRange2))
    RangePtr TableRange2;
    __declspec(property(get=GetRowRange))
    RangePtr RowRange;
    __declspec(property(get=GetColumnRange))
    RangePtr ColumnRange;
    __declspec(property(get=GetPageRange))
    RangePtr PageRange;
    __declspec(property(get=GetDataLabelRange))
    RangePtr DataLabelRange;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMDX))
    _bstr_t MDX;
    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetPageRangeCells))
    RangePtr PageRangeCells;
    __declspec(property(get=GetCacheIndex,put=PutCacheIndex))
    long CacheIndex;
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetDisplayErrorString,put=PutDisplayErrorString))
    VARIANT_BOOL DisplayErrorString;
    __declspec(property(get=GetDisplayNullString,put=PutDisplayNullString))
    VARIANT_BOOL DisplayNullString;
    __declspec(property(get=GetEnableDrilldown,put=PutEnableDrilldown))
    VARIANT_BOOL EnableDrilldown;
    __declspec(property(get=GetEnableFieldDialog,put=PutEnableFieldDialog))
    VARIANT_BOOL EnableFieldDialog;
    __declspec(property(get=GetEnableWizard,put=PutEnableWizard))
    VARIANT_BOOL EnableWizard;
    __declspec(property(get=GetErrorString,put=PutErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetMergeLabels,put=PutMergeLabels))
    VARIANT_BOOL MergeLabels;
    __declspec(property(get=GetNullString,put=PutNullString))
    _bstr_t NullString;
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotFormulas))
    PivotFormulasPtr PivotFormulas;
    __declspec(property(get=GetSubtotalHiddenPageItems,put=PutSubtotalHiddenPageItems))
    VARIANT_BOOL SubtotalHiddenPageItems;
    __declspec(property(get=GetPageFieldStyle,put=PutPageFieldStyle))
    _bstr_t PageFieldStyle;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetViewCalculatedMembers,put=PutViewCalculatedMembers))
    VARIANT_BOOL ViewCalculatedMembers;
    __declspec(property(get=GetPivotSelection,put=PutPivotSelection))
    _bstr_t PivotSelection;
    __declspec(property(get=GetSelectionMode,put=PutSelectionMode))
    enum XlPTSelectionMode SelectionMode;
    __declspec(property(get=GetTableStyle,put=PutTableStyle))
    _bstr_t TableStyle;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetVacatedStyle,put=PutVacatedStyle))
    _bstr_t VacatedStyle;
    __declspec(property(get=GetCalculatedMembers))
    CalculatedMembersPtr CalculatedMembers;
    __declspec(property(get=GetPrintTitles,put=PutPrintTitles))
    VARIANT_BOOL PrintTitles;
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetGrandTotalName,put=PutGrandTotalName))
    _bstr_t GrandTotalName;
    __declspec(property(get=GetSmallGrid,put=PutSmallGrid))
    VARIANT_BOOL SmallGrid;
    __declspec(property(get=GetRepeatItemsOnEachPrintedPage,put=PutRepeatItemsOnEachPrintedPage))
    VARIANT_BOOL RepeatItemsOnEachPrintedPage;
    __declspec(property(get=GetTotalsAnnotation,put=PutTotalsAnnotation))
    VARIANT_BOOL TotalsAnnotation;
    __declspec(property(get=GetDisplayImmediateItems,put=PutDisplayImmediateItems))
    VARIANT_BOOL DisplayImmediateItems;
    __declspec(property(get=GetEnableFieldList,put=PutEnableFieldList))
    VARIANT_BOOL EnableFieldList;
    __declspec(property(get=GetVisualTotals,put=PutVisualTotals))
    VARIANT_BOOL VisualTotals;
    __declspec(property(get=GetShowPageMultipleItemLabel,put=PutShowPageMultipleItemLabel))
    VARIANT_BOOL ShowPageMultipleItemLabel;
    __declspec(property(get=GetVersion))
    enum XlPivotTableVersionList Version;
    __declspec(property(get=GetDisplayEmptyRow,put=PutDisplayEmptyRow))
    VARIANT_BOOL DisplayEmptyRow;
    __declspec(property(get=GetDisplayEmptyColumn,put=PutDisplayEmptyColumn))
    VARIANT_BOOL DisplayEmptyColumn;
    __declspec(property(get=GetShowCellBackgroundFromOLAP,put=PutShowCellBackgroundFromOLAP))
    VARIANT_BOOL ShowCellBackgroundFromOLAP;
    __declspec(property(get=GetPageFieldOrder,put=PutPageFieldOrder))
    long PageFieldOrder;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AddToTable = vtMissing );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetColumnGrand ( );
    void PutColumnGrand (
        VARIANT_BOOL _arg1 );
    RangePtr GetColumnRange ( );
    _variant_t ShowPages (
        const _variant_t & PageField = vtMissing );
    RangePtr GetDataBodyRange ( );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataLabelRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetPageRange ( );
    RangePtr GetPageRangeCells ( );
    IDispatchPtr PivotFields (
        const _variant_t & Index = vtMissing );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL RefreshTable ( );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetRowGrand ( );
    void PutRowGrand (
        VARIANT_BOOL _arg1 );
    RangePtr GetRowRange ( );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & _arg1 );
    RangePtr GetTableRange1 ( );
    RangePtr GetTableRange2 ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    long GetCacheIndex ( );
    void PutCacheIndex (
        long _arg1 );
    CalculatedFieldsPtr CalculatedFields ( );
    VARIANT_BOOL GetDisplayErrorString ( );
    void PutDisplayErrorString (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayNullString ( );
    void PutDisplayNullString (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableDrilldown ( );
    void PutEnableDrilldown (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableFieldDialog ( );
    void PutEnableFieldDialog (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableWizard ( );
    void PutEnableWizard (
        VARIANT_BOOL _arg1 );
    _bstr_t GetErrorString ( );
    void PutErrorString (
        _bstr_t _arg1 );
    double GetData (
        _bstr_t Name );
    HRESULT ListFormulas ( );
    VARIANT_BOOL GetManualUpdate ( );
    void PutManualUpdate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMergeLabels ( );
    void PutMergeLabels (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNullString ( );
    void PutNullString (
        _bstr_t _arg1 );
    PivotCachePtr PivotCache ( );
    PivotFormulasPtr GetPivotFormulas ( );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing );
    VARIANT_BOOL GetSubtotalHiddenPageItems ( );
    void PutSubtotalHiddenPageItems (
        VARIANT_BOOL _arg1 );
    long GetPageFieldOrder ( );
    void PutPageFieldOrder (
        long _arg1 );
    _bstr_t GetPageFieldStyle ( );
    void PutPageFieldStyle (
        _bstr_t _arg1 );
    long GetPageFieldWrapCount ( );
    void PutPageFieldWrapCount (
        long _arg1 );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL _arg1 );
    HRESULT _PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode );
    _bstr_t GetPivotSelection ( );
    void PutPivotSelection (
        _bstr_t _arg1 );
    enum XlPTSelectionMode GetSelectionMode ( );
    void PutSelectionMode (
        enum XlPTSelectionMode _arg1 );
    _bstr_t GetTableStyle ( );
    void PutTableStyle (
        _bstr_t _arg1 );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t _arg1 );
    HRESULT Update ( );
    _bstr_t GetVacatedStyle ( );
    void PutVacatedStyle (
        _bstr_t _arg1 );
    HRESULT Format (
        enum XlPivotFormatType Format );
    VARIANT_BOOL GetPrintTitles ( );
    void PutPrintTitles (
        VARIANT_BOOL _arg1 );
    CubeFieldsPtr GetCubeFields ( );
    _bstr_t GetGrandTotalName ( );
    void PutGrandTotalName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetSmallGrid ( );
    void PutSmallGrid (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRepeatItemsOnEachPrintedPage ( );
    void PutRepeatItemsOnEachPrintedPage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTotalsAnnotation ( );
    void PutTotalsAnnotation (
        VARIANT_BOOL _arg1 );
    HRESULT PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode,
        const _variant_t & UseStandardName = vtMissing );
    _bstr_t GetPivotSelectionStandard ( );
    void PutPivotSelectionStandard (
        _bstr_t _arg1 );
    RangePtr GetPivotData (
        const _variant_t & DataField = vtMissing,
        const _variant_t & Field1 = vtMissing,
        const _variant_t & Item1 = vtMissing,
        const _variant_t & Field2 = vtMissing,
        const _variant_t & Item2 = vtMissing,
        const _variant_t & Field3 = vtMissing,
        const _variant_t & Item3 = vtMissing,
        const _variant_t & Field4 = vtMissing,
        const _variant_t & Item4 = vtMissing,
        const _variant_t & Field5 = vtMissing,
        const _variant_t & Item5 = vtMissing,
        const _variant_t & Field6 = vtMissing,
        const _variant_t & Item6 = vtMissing,
        const _variant_t & Field7 = vtMissing,
        const _variant_t & Item7 = vtMissing,
        const _variant_t & Field8 = vtMissing,
        const _variant_t & Item8 = vtMissing,
        const _variant_t & Field9 = vtMissing,
        const _variant_t & Item9 = vtMissing,
        const _variant_t & Field10 = vtMissing,
        const _variant_t & Item10 = vtMissing,
        const _variant_t & Field11 = vtMissing,
        const _variant_t & Item11 = vtMissing,
        const _variant_t & Field12 = vtMissing,
        const _variant_t & Item12 = vtMissing,
        const _variant_t & Field13 = vtMissing,
        const _variant_t & Item13 = vtMissing,
        const _variant_t & Field14 = vtMissing,
        const _variant_t & Item14 = vtMissing );
    PivotFieldPtr GetDataPivotField ( );
    VARIANT_BOOL GetEnableDataValueEditing ( );
    void PutEnableDataValueEditing (
        VARIANT_BOOL _arg1 );
    PivotFieldPtr AddDataField (
        IDispatch * Field,
        const _variant_t & Caption = vtMissing,
        const _variant_t & Function = vtMissing );
    _bstr_t GetMDX ( );
    VARIANT_BOOL GetViewCalculatedMembers ( );
    void PutViewCalculatedMembers (
        VARIANT_BOOL _arg1 );
    CalculatedMembersPtr GetCalculatedMembers ( );
    VARIANT_BOOL GetDisplayImmediateItems ( );
    void PutDisplayImmediateItems (
        VARIANT_BOOL _arg1 );
    _variant_t Dummy15 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL GetEnableFieldList ( );
    void PutEnableFieldList (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVisualTotals ( );
    void PutVisualTotals (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowPageMultipleItemLabel ( );
    void PutShowPageMultipleItemLabel (
        VARIANT_BOOL _arg1 );
    enum XlPivotTableVersionList GetVersion ( );
    _bstr_t CreateCubeFile (
        _bstr_t File,
        const _variant_t & Measures = vtMissing,
        const _variant_t & Levels = vtMissing,
        const _variant_t & Members = vtMissing,
        const _variant_t & Properties = vtMissing );
    VARIANT_BOOL GetDisplayEmptyRow ( );
    void PutDisplayEmptyRow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayEmptyColumn ( );
    void PutDisplayEmptyColumn (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCellBackgroundFromOLAP ( );
    void PutShowCellBackgroundFromOLAP (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020873-0000-0000-c000-000000000046"))
PivotTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotTablePtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotTablePtr Add (
        struct PivotCache * PivotCache,
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );
};

struct __declspec(uuid("00020874-0000-0000-c000-000000000046"))
PivotField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetShowAllItems,put=PutShowAllItems))
    VARIANT_BOOL ShowAllItems;
    __declspec(property(get=GetFunction,put=PutFunction))
    enum XlConsolidationFunction Function;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetHiddenItemsList,put=PutHiddenItemsList))
    _variant_t HiddenItemsList;
    __declspec(property(get=GetDatabaseSort,put=PutDatabaseSort))
    VARIANT_BOOL DatabaseSort;
    __declspec(property(get=GetIsMemberProperty))
    VARIANT_BOOL IsMemberProperty;
    __declspec(property(get=GetPropertyParentField))
    PivotFieldPtr PropertyParentField;
    __declspec(property(get=GetPropertyOrder,put=PutPropertyOrder))
    long PropertyOrder;
    __declspec(property(get=GetEnableItemSelection,put=PutEnableItemSelection))
    VARIANT_BOOL EnableItemSelection;
    __declspec(property(get=GetCurrentPageList,put=PutCurrentPageList))
    _variant_t CurrentPageList;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetDataType))
    enum XlPivotFieldDataType DataType;
    __declspec(property(get=GetGroupLevel))
    _variant_t GroupLevel;
    __declspec(property(get=GetTotalLevels))
    _variant_t TotalLevels;
    __declspec(property(get=GetVisibleItems))
    _variant_t VisibleItems[];
    __declspec(property(get=GetHiddenItems))
    _variant_t HiddenItems[];
    __declspec(property(get=GetParentItems))
    _variant_t ParentItems[];
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetParentField))
    PivotFieldPtr ParentField;
    __declspec(property(get=GetSubtotals,put=PutSubtotals))
    _variant_t Subtotals[];
    __declspec(property(get=GetBaseField,put=PutBaseField))
    _variant_t BaseField;
    __declspec(property(get=GetBaseItem,put=PutBaseItem))
    _variant_t BaseItem;
    __declspec(property(get=GetChildField))
    PivotFieldPtr ChildField;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    _variant_t CurrentPage;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetServerBased,put=PutServerBased))
    VARIANT_BOOL ServerBased;
    __declspec(property(get=GetAutoSortOrder))
    long AutoSortOrder;
    __declspec(property(get=GetAutoSortField))
    _bstr_t AutoSortField;
    __declspec(property(get=GetAutoShowType))
    long AutoShowType;
    __declspec(property(get=GetAutoShowRange))
    long AutoShowRange;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetAutoShowCount))
    long AutoShowCount;
    __declspec(property(get=GetAutoShowField))
    _bstr_t AutoShowField;
    __declspec(property(get=GetLayoutBlankLine,put=PutLayoutBlankLine))
    VARIANT_BOOL LayoutBlankLine;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum XlSubtototalLocationType LayoutSubtotalLocation;
    __declspec(property(get=GetLayoutPageBreak,put=PutLayoutPageBreak))
    VARIANT_BOOL LayoutPageBreak;
    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetSubtotalName,put=PutSubtotalName))
    _bstr_t SubtotalName;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetCubeField))
    CubeFieldPtr CubeField;
    __declspec(property(get=GetCurrentPageName,put=PutCurrentPageName))
    _bstr_t CurrentPageName;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlPivotFieldCalculation Calculation;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotFieldCalculation GetCalculation ( );
    void PutCalculation (
        enum XlPivotFieldCalculation _arg1 );
    PivotFieldPtr GetChildField ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetCurrentPage ( );
    void PutCurrentPage (
        const _variant_t & _arg1 );
    RangePtr GetDataRange ( );
    enum XlPivotFieldDataType GetDataType ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    enum XlConsolidationFunction GetFunction ( );
    void PutFunction (
        enum XlConsolidationFunction _arg1 );
    _variant_t GetGroupLevel ( );
    _variant_t GetHiddenItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation _arg1 );
    VARIANT_BOOL GetShowAllItems ( );
    void PutShowAllItems (
        VARIANT_BOOL _arg1 );
    PivotFieldPtr GetParentField ( );
    _variant_t GetParentItems (
        const _variant_t & Index = vtMissing );
    _variant_t PivotItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & _arg1 );
    _bstr_t GetSourceName ( );
    _variant_t GetSubtotals (
        const _variant_t & Index = vtMissing );
    void PutSubtotals (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _variant_t GetBaseField ( );
    void PutBaseField (
        const _variant_t & _arg1 );
    _variant_t GetBaseItem ( );
    void PutBaseItem (
        const _variant_t & _arg1 );
    _variant_t GetTotalLevels ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    _variant_t GetVisibleItems (
        const _variant_t & Index = vtMissing );
    CalculatedItemsPtr CalculatedItems ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    VARIANT_BOOL GetIsCalculated ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetServerBased ( );
    void PutServerBased (
        VARIANT_BOOL _arg1 );
    HRESULT AutoSort (
        long Order,
        _bstr_t Field );
    HRESULT AutoShow (
        long Type,
        long Range,
        long Count,
        _bstr_t Field );
    long GetAutoSortOrder ( );
    _bstr_t GetAutoSortField ( );
    long GetAutoShowType ( );
    long GetAutoShowRange ( );
    long GetAutoShowCount ( );
    _bstr_t GetAutoShowField ( );
    VARIANT_BOOL GetLayoutBlankLine ( );
    void PutLayoutBlankLine (
        VARIANT_BOOL _arg1 );
    enum XlSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum XlSubtototalLocationType _arg1 );
    VARIANT_BOOL GetLayoutPageBreak ( );
    void PutLayoutPageBreak (
        VARIANT_BOOL _arg1 );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType _arg1 );
    _bstr_t GetSubtotalName ( );
    void PutSubtotalName (
        _bstr_t _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL _arg1 );
    CubeFieldPtr GetCubeField ( );
    _bstr_t GetCurrentPageName ( );
    void PutCurrentPageName (
        _bstr_t _arg1 );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t _arg1 );
    _variant_t GetHiddenItemsList ( );
    void PutHiddenItemsList (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDatabaseSort ( );
    void PutDatabaseSort (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIsMemberProperty ( );
    PivotFieldPtr GetPropertyParentField ( );
    long GetPropertyOrder ( );
    void PutPropertyOrder (
        long _arg1 );
    VARIANT_BOOL GetEnableItemSelection ( );
    void PutEnableItemSelection (
        VARIANT_BOOL _arg1 );
    _variant_t GetCurrentPageList ( );
    void PutCurrentPageList (
        const _variant_t & _arg1 );
    HRESULT AddPageItem (
        _bstr_t Item,
        const _variant_t & ClearList = vtMissing );
};

struct __declspec(uuid("00020875-0000-0000-c000-000000000046"))
PivotFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotTablePtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotTablePtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024420-0000-0000-c000-000000000046"))
CalculatedFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFieldPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFieldPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotFieldPtr Item (
        const _variant_t & Index );
    PivotFieldPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotFieldPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );
};

struct __declspec(uuid("00020876-0000-0000-c000-000000000046"))
PivotItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    VARIANT_BOOL ShowDetail;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _variant_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetParentShowDetail))
    VARIANT_BOOL ParentShowDetail;
    __declspec(property(get=GetSourceNameStandard))
    _bstr_t SourceNameStandard;
    __declspec(property(get=GetParentItem))
    PivotItemPtr ParentItem;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    PivotItemPtr GetParentItem ( );
    VARIANT_BOOL GetParentShowDetail ( );
    long GetPosition ( );
    void PutPosition (
        long _arg1 );
    VARIANT_BOOL GetShowDetail ( );
    void PutShowDetail (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceName ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsCalculated ( );
    long GetRecordCount ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL _arg1 );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t _arg1 );
    _bstr_t GetSourceNameStandard ( );
};

struct __declspec(uuid("00020877-0000-0000-c000-000000000046"))
PivotItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    HRESULT Add (
        _bstr_t Name );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024421-0000-0000-c000-000000000046"))
CalculatedItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotItemPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );
};

struct __declspec(uuid("00020878-0000-0000-c000-000000000046"))
Characters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetPhoneticCharacters,put=PutPhoneticCharacters))
    _bstr_t PhoneticCharacters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    long GetCount ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _variant_t Insert (
        _bstr_t String );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _bstr_t GetPhoneticCharacters ( );
    void PutPhoneticCharacters (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00020879-0000-0000-c000-000000000046"))
Dialogs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    DialogPtr _Default[];
    __declspec(property(get=GetItem))
    DialogPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    DialogPtr GetItem (
        enum XlBuiltInDialog Index );
    DialogPtr Get_Default (
        enum XlBuiltInDialog Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002087a-0000-0000-c000-000000000046"))
Dialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Show (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
};

struct __declspec(uuid("0002087b-0000-0000-c000-000000000046"))
SoundNote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    _variant_t Import (
        _bstr_t Filename );
    _variant_t Play ( );
    _variant_t Record ( );
};

struct __declspec(uuid("0002087d-0000-0000-c000-000000000046"))
Button : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002087e-0000-0000-c000-000000000046"))
Buttons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    ButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002087f-0000-0000-c000-000000000046"))
CheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020880-0000-0000-c000-000000000046"))
CheckBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    CheckBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020881-0000-0000-c000-000000000046"))
OptionButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    GroupBoxPtr GetGroupBox ( );
};

struct __declspec(uuid("00020882-0000-0000-c000-000000000046"))
OptionButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    GroupBoxPtr GetGroupBox ( );
    OptionButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020883-0000-0000-c000-000000000046"))
EditBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLinkedObject))
    _bstr_t LinkedObject;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    _bstr_t GetLinkedObject ( );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020884-0000-0000-c000-000000000046"))
EditBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL _arg1 );
    EditBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    _variant_t Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020885-0000-0000-c000-000000000046"))
ScrollBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
};

struct __declspec(uuid("00020886-0000-0000-c000-000000000046"))
ScrollBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    ScrollBarPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020887-0000-0000-c000-000000000046"))
ListBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("00020888-0000-0000-c000-000000000046"))
ListBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    ListBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020889-0000-0000-c000-000000000046"))
GroupBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002088a-0000-0000-c000-000000000046"))
GroupBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    GroupBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088b-0000-0000-c000-000000000046"))
DropDown : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002088c-0000-0000-c000-000000000046"))
DropDowns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    DropDownPtr Add (
        double Left,
        double Top,
        double Width,
        double Height,
        const _variant_t & Editable = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088d-0000-0000-c000-000000000046"))
Spinner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("0002088e-0000-0000-c000-000000000046"))
Spinners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    SpinnerPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088f-0000-0000-c000-000000000046"))
DialogFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00020890-0000-0000-c000-000000000046"))
Label : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020891-0000-0000-c000-000000000046"))
Labels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    LabelPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020894-0000-0000-c000-000000000046"))
Panes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PanePtr _Default[];
    __declspec(property(get=GetItem))
    PanePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PanePtr GetItem (
        long Index );
    PanePtr Get_Default (
        long Index );
};

struct __declspec(uuid("00020895-0000-0000-c000-000000000046"))
Pane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Activate ( );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long _arg1 );
    long GetScrollRow ( );
    void PutScrollRow (
        long _arg1 );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    RangePtr GetVisibleRange ( );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );
};

struct __declspec(uuid("00020896-0000-0000-c000-000000000046"))
Scenarios : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ScenarioPtr Add (
        _bstr_t Name,
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing,
        const _variant_t & Comment = vtMissing,
        const _variant_t & Locked = vtMissing,
        const _variant_t & Hidden = vtMissing );
    long GetCount ( );
    _variant_t CreateSummary (
        enum XlSummaryReportType ReportType,
        const _variant_t & ResultCells = vtMissing );
    ScenarioPtr Item (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Source );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020897-0000-0000-c000-000000000046"))
Scenario : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValues))
    _variant_t Values[];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetChangingCells))
    RangePtr ChangingCells;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ChangeScenario (
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing );
    RangePtr GetChangingCells ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t _arg1 );
    _variant_t Delete ( );
    VARIANT_BOOL GetHidden ( );
    void PutHidden (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t Show ( );
    _variant_t GetValues (
        const _variant_t & Index = vtMissing );
};

struct __declspec(uuid("00020898-0000-0000-c000-000000000046"))
GroupObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
};

struct __declspec(uuid("00020899-0000-0000-c000-000000000046"))
GroupObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089a-0000-0000-c000-000000000046"))
Line : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
};

struct __declspec(uuid("0002089b-0000-0000-c000-000000000046"))
Lines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    LinePtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089c-0000-0000-c000-000000000046"))
Rectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002089d-0000-0000-c000-000000000046"))
Rectangles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    RectanglePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089e-0000-0000-c000-000000000046"))
Oval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002089f-0000-0000-c000-000000000046"))
Ovals : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    OvalPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a0-0000-0000-c000-000000000046"))
Arc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
};

struct __declspec(uuid("000208a1-0000-0000-c000-000000000046"))
Arcs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    ArcPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024410-0000-0000-c000-000000000046"))
OLEObjectEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GotFocus ( );
    HRESULT LostFocus ( );
};

struct __declspec(uuid("000208a2-0000-0000-c000-000000000046"))
_OLEObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetOLEType))
    _variant_t OLEType;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Activate ( );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetObject ( );
    _variant_t GetOLEType ( );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t _arg1 );
    _variant_t Update ( );
    _variant_t Verb (
        enum XlOLEVerb Verb );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    _bstr_t GetprogID ( );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t _arg1 );
};

struct __declspec(uuid("000208a3-0000-0000-c000-000000000046"))
OLEObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL _arg1 );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t _arg1 );
    _OLEObjectPtr Add (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a4-0000-0000-c000-000000000046"))
TextBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208a5-0000-0000-c000-000000000046"))
TextBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    TextBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a6-0000-0000-c000-000000000046"))
Picture : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
};

struct __declspec(uuid("000208a7-0000-0000-c000-000000000046"))
Pictures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    PicturePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    PicturePtr Insert (
        _bstr_t Filename,
        const _variant_t & Converter = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PicturePtr Paste (
        const _variant_t & Link = vtMissing );
};

struct __declspec(uuid("000208a8-0000-0000-c000-000000000046"))
Drawing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetVertices))
    _variant_t Vertices[][];
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t AddVertex (
        double Left,
        double Top );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    _variant_t GetVertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
};

struct __declspec(uuid("000208a9-0000-0000-c000-000000000046"))
Drawings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    DrawingPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        VARIANT_BOOL Closed );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208aa-0000-0000-c000-000000000046"))
RoutingSlip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRecipients,put=PutRecipients))
    _variant_t Recipients[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _variant_t Subject;
    __declspec(property(get=GetMessage,put=PutMessage))
    _variant_t Message;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum XlRoutingSlipDelivery Delivery;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetStatus))
    enum XlRoutingSlipStatus Status;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlRoutingSlipDelivery GetDelivery ( );
    void PutDelivery (
        enum XlRoutingSlipDelivery _arg1 );
    _variant_t GetMessage ( );
    void PutMessage (
        const _variant_t & _arg1 );
    _variant_t GetRecipients (
        const _variant_t & Index = vtMissing );
    void PutRecipients (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _variant_t Reset ( );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutReturnWhenDone (
        VARIANT_BOOL _arg1 );
    enum XlRoutingSlipStatus GetStatus ( );
    _variant_t GetSubject ( );
    void PutSubject (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetTrackStatus ( );
    void PutTrackStatus (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208ab-0000-0000-c000-000000000046"))
Outline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryColumn,put=PutSummaryColumn))
    enum XlSummaryColumn SummaryColumn;
    __declspec(property(get=GetSummaryRow,put=PutSummaryRow))
    enum XlSummaryRow SummaryRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutomaticStyles,put=PutAutomaticStyles))
    VARIANT_BOOL AutomaticStyles;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutomaticStyles ( );
    void PutAutomaticStyles (
        VARIANT_BOOL _arg1 );
    _variant_t ShowLevels (
        const _variant_t & RowLevels = vtMissing,
        const _variant_t & ColumnLevels = vtMissing );
    enum XlSummaryColumn GetSummaryColumn ( );
    void PutSummaryColumn (
        enum XlSummaryColumn _arg1 );
    enum XlSummaryRow GetSummaryRow ( );
    void PutSummaryRow (
        enum XlSummaryRow _arg1 );
};

struct __declspec(uuid("000208ad-0000-0000-c000-000000000046"))
Module : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    HRESULT Delete ( );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t _arg1 );
    long GetIndex ( );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetActivate ( );
    void PutOnSheetActivate (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetDeactivate ( );
    void PutOnSheetDeactivate (
        _bstr_t _arg1 );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
    VARIANT_BOOL GetProtectContents ( );
    VARIANT_BOOL GetProtectionMode ( );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    enum XlSheetVisibility GetVisible ( );
    void PutVisible (
        enum XlSheetVisibility _arg1 );
    ShapesPtr GetShapes ( );
    _variant_t InsertFile (
        const _variant_t & Filename,
        const _variant_t & Merge = vtMissing );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
};

struct __declspec(uuid("000208ae-0000-0000-c000-000000000046"))
Modules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ModulePtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208af-0000-0000-c000-000000000046"))
DialogSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter;
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining;
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtection))
    ProtectionPtr Protection;
    __declspec(property(get=GetDialogFrame))
    DialogFramePtr DialogFrame;
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    _variant_t DefaultButton;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate;
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects;
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetCustomProperties))
    CustomPropertiesPtr CustomProperties;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFocus,put=PutFocus))
    _variant_t Focus;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    HRESULT Delete ( );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t _arg1 );
    long GetIndex ( );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetActivate ( );
    void PutOnSheetActivate (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetDeactivate ( );
    void PutOnSheetDeactivate (
        _bstr_t _arg1 );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
    VARIANT_BOOL GetProtectContents ( );
    VARIANT_BOOL GetProtectDrawingObjects ( );
    VARIANT_BOOL GetProtectionMode ( );
    VARIANT_BOOL GetProtectScenarios ( );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    enum XlSheetVisibility GetVisible ( );
    void PutVisible (
        enum XlSheetVisibility _arg1 );
    ShapesPtr GetShapes ( );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL _arg1 );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks ( );
    void PutDisplayAutomaticPageBreaks (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetEnableAutoFilter ( );
    void PutEnableAutoFilter (
        VARIANT_BOOL _arg1 );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection _arg1 );
    VARIANT_BOOL GetEnableOutlining ( );
    void PutEnableOutlining (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnablePivotTable ( );
    void PutEnablePivotTable (
        VARIANT_BOOL _arg1 );
    _variant_t Evaluate (
        const _variant_t & Name );
    _variant_t _Evaluate (
        const _variant_t & Name );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing );
    HRESULT _PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t _arg1 );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL _arg1 );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        long _arg1 );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    CustomPropertiesPtr GetCustomProperties ( );
    SmartTagsPtr GetSmartTags ( );
    ProtectionPtr GetProtection ( );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & NoHTMLFormatting = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        const _variant_t & AllowFormattingCells = vtMissing,
        const _variant_t & AllowFormattingColumns = vtMissing,
        const _variant_t & AllowFormattingRows = vtMissing,
        const _variant_t & AllowInsertingColumns = vtMissing,
        const _variant_t & AllowInsertingRows = vtMissing,
        const _variant_t & AllowInsertingHyperlinks = vtMissing,
        const _variant_t & AllowDeletingColumns = vtMissing,
        const _variant_t & AllowDeletingRows = vtMissing,
        const _variant_t & AllowSorting = vtMissing,
        const _variant_t & AllowFiltering = vtMissing,
        const _variant_t & AllowUsingPivotTables = vtMissing );
    _variant_t GetDefaultButton ( );
    void PutDefaultButton (
        const _variant_t & _arg1 );
    DialogFramePtr GetDialogFrame ( );
    IDispatchPtr EditBoxes (
        const _variant_t & Index = vtMissing );
    _variant_t GetFocus ( );
    void PutFocus (
        const _variant_t & _arg1 );
    VARIANT_BOOL Hide (
        const _variant_t & Cancel = vtMissing );
    VARIANT_BOOL Show ( );
};

struct __declspec(uuid("000208b0-0000-0000-c000-000000000046"))
DialogSheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DialogSheetPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208b1-0000-0000-c000-000000000046"))
Worksheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208b4-0000-0000-c000-000000000046"))
PageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    double LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    double RightMargin;
    __declspec(property(get=GetPrintErrors,put=PutPrintErrors))
    enum XlPrintErrors PrintErrors;
    __declspec(property(get=GetCenterHeaderPicture))
    GraphicPtr CenterHeaderPicture;
    __declspec(property(get=GetCenterFooterPicture))
    GraphicPtr CenterFooterPicture;
    __declspec(property(get=GetLeftHeaderPicture))
    GraphicPtr LeftHeaderPicture;
    __declspec(property(get=GetLeftFooterPicture))
    GraphicPtr LeftFooterPicture;
    __declspec(property(get=GetRightHeaderPicture))
    GraphicPtr RightHeaderPicture;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    double TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    double BottomMargin;
    __declspec(property(get=GetPrintHeadings,put=PutPrintHeadings))
    VARIANT_BOOL PrintHeadings;
    __declspec(property(get=GetPrintGridlines,put=PutPrintGridlines))
    VARIANT_BOOL PrintGridlines;
    __declspec(property(get=GetCenterHorizontally,put=PutCenterHorizontally))
    VARIANT_BOOL CenterHorizontally;
    __declspec(property(get=GetOrder,put=PutOrder))
    enum XlOrder Order;
    __declspec(property(get=GetCenterVertically,put=PutCenterVertically))
    VARIANT_BOOL CenterVertically;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum XlPaperSize PaperSize;
    __declspec(property(get=GetFirstPageNumber,put=PutFirstPageNumber))
    long FirstPageNumber;
    __declspec(property(get=GetBlackAndWhite,put=PutBlackAndWhite))
    VARIANT_BOOL BlackAndWhite;
    __declspec(property(get=GetCenterFooter,put=PutCenterFooter))
    _bstr_t CenterFooter;
    __declspec(property(get=GetCenterHeader,put=PutCenterHeader))
    _bstr_t CenterHeader;
    __declspec(property(get=GetChartSize,put=PutChartSize))
    enum XlObjectSize ChartSize;
    __declspec(property(get=GetDraft,put=PutDraft))
    VARIANT_BOOL Draft;
    __declspec(property(get=GetPrintNotes,put=PutPrintNotes))
    VARIANT_BOOL PrintNotes;
    __declspec(property(get=GetPrintQuality,put=PutPrintQuality))
    _variant_t PrintQuality[];
    __declspec(property(get=GetPrintTitleColumns,put=PutPrintTitleColumns))
    _bstr_t PrintTitleColumns;
    __declspec(property(get=GetPrintTitleRows,put=PutPrintTitleRows))
    _bstr_t PrintTitleRows;
    __declspec(property(get=GetRightFooter,put=PutRightFooter))
    _bstr_t RightFooter;
    __declspec(property(get=GetRightHeader,put=PutRightHeader))
    _bstr_t RightHeader;
    __declspec(property(get=GetFitToPagesTall,put=PutFitToPagesTall))
    _variant_t FitToPagesTall;
    __declspec(property(get=GetFitToPagesWide,put=PutFitToPagesWide))
    _variant_t FitToPagesWide;
    __declspec(property(get=GetFooterMargin,put=PutFooterMargin))
    double FooterMargin;
    __declspec(property(get=GetHeaderMargin,put=PutHeaderMargin))
    double HeaderMargin;
    __declspec(property(get=GetLeftFooter,put=PutLeftFooter))
    _bstr_t LeftFooter;
    __declspec(property(get=GetPrintComments,put=PutPrintComments))
    enum XlPrintLocation PrintComments;
    __declspec(property(get=GetLeftHeader,put=PutLeftHeader))
    _bstr_t LeftHeader;
    __declspec(property(get=GetPrintArea,put=PutPrintArea))
    _bstr_t PrintArea;
    __declspec(property(get=GetRightFooterPicture))
    GraphicPtr RightFooterPicture;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPageOrientation Orientation;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBlackAndWhite ( );
    void PutBlackAndWhite (
        VARIANT_BOOL _arg1 );
    double GetBottomMargin ( );
    void PutBottomMargin (
        double _arg1 );
    _bstr_t GetCenterFooter ( );
    void PutCenterFooter (
        _bstr_t _arg1 );
    _bstr_t GetCenterHeader ( );
    void PutCenterHeader (
        _bstr_t _arg1 );
    VARIANT_BOOL GetCenterHorizontally ( );
    void PutCenterHorizontally (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCenterVertically ( );
    void PutCenterVertically (
        VARIANT_BOOL _arg1 );
    enum XlObjectSize GetChartSize ( );
    void PutChartSize (
        enum XlObjectSize _arg1 );
    VARIANT_BOOL GetDraft ( );
    void PutDraft (
        VARIANT_BOOL _arg1 );
    long GetFirstPageNumber ( );
    void PutFirstPageNumber (
        long _arg1 );
    _variant_t GetFitToPagesTall ( );
    void PutFitToPagesTall (
        const _variant_t & _arg1 );
    _variant_t GetFitToPagesWide ( );
    void PutFitToPagesWide (
        const _variant_t & _arg1 );
    double GetFooterMargin ( );
    void PutFooterMargin (
        double _arg1 );
    double GetHeaderMargin ( );
    void PutHeaderMargin (
        double _arg1 );
    _bstr_t GetLeftFooter ( );
    void PutLeftFooter (
        _bstr_t _arg1 );
    _bstr_t GetLeftHeader ( );
    void PutLeftHeader (
        _bstr_t _arg1 );
    double GetLeftMargin ( );
    void PutLeftMargin (
        double _arg1 );
    enum XlOrder GetOrder ( );
    void PutOrder (
        enum XlOrder _arg1 );
    enum XlPageOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPageOrientation _arg1 );
    enum XlPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum XlPaperSize _arg1 );
    _bstr_t GetPrintArea ( );
    void PutPrintArea (
        _bstr_t _arg1 );
    VARIANT_BOOL GetPrintGridlines ( );
    void PutPrintGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrintHeadings ( );
    void PutPrintHeadings (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrintNotes ( );
    void PutPrintNotes (
        VARIANT_BOOL _arg1 );
    _variant_t GetPrintQuality (
        const _variant_t & Index = vtMissing );
    void PutPrintQuality (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetPrintTitleColumns ( );
    void PutPrintTitleColumns (
        _bstr_t _arg1 );
    _bstr_t GetPrintTitleRows ( );
    void PutPrintTitleRows (
        _bstr_t _arg1 );
    _bstr_t GetRightFooter ( );
    void PutRightFooter (
        _bstr_t _arg1 );
    _bstr_t GetRightHeader ( );
    void PutRightHeader (
        _bstr_t _arg1 );
    double GetRightMargin ( );
    void PutRightMargin (
        double _arg1 );
    double GetTopMargin ( );
    void PutTopMargin (
        double _arg1 );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & _arg1 );
    enum XlPrintLocation GetPrintComments ( );
    void PutPrintComments (
        enum XlPrintLocation _arg1 );
    enum XlPrintErrors GetPrintErrors ( );
    void PutPrintErrors (
        enum XlPrintErrors _arg1 );
    GraphicPtr GetCenterHeaderPicture ( );
    GraphicPtr GetCenterFooterPicture ( );
    GraphicPtr GetLeftHeaderPicture ( );
    GraphicPtr GetLeftFooterPicture ( );
    GraphicPtr GetRightHeaderPicture ( );
    GraphicPtr GetRightFooterPicture ( );
};

struct __declspec(uuid("000208b8-0000-0000-c000-000000000046"))
Names : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    NamePtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & MacroType = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & NameLocal = vtMissing,
        const _variant_t & RefersToLocal = vtMissing,
        const _variant_t & CategoryLocal = vtMissing,
        const _variant_t & RefersToR1C1 = vtMissing,
        const _variant_t & RefersToR1C1Local = vtMissing );
    NamePtr Item (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing );
    NamePtr _Default (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("000208b9-0000-0000-c000-000000000046"))
Name : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetCategoryLocal,put=PutCategoryLocal))
    _bstr_t CategoryLocal;
    __declspec(property(get=GetMacroType,put=PutMacroType))
    enum XlXLMMacroType MacroType;
    __declspec(property(get=GetRefersTo,put=PutRefersTo))
    _variant_t RefersTo;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetRefersToLocal,put=PutRefersToLocal))
    _variant_t RefersToLocal;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t _Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetRefersToR1C1,put=PutRefersToR1C1))
    _variant_t RefersToR1C1;
    __declspec(property(get=GetRefersToR1C1Local,put=PutRefersToR1C1Local))
    _variant_t RefersToR1C1Local;
    __declspec(property(get=GetRefersToRange))
    RangePtr RefersToRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShortcutKey,put=PutShortcutKey))
    _bstr_t ShortcutKey;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    long GetIndex ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t _arg1 );
    _bstr_t GetCategoryLocal ( );
    void PutCategoryLocal (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    enum XlXLMMacroType GetMacroType ( );
    void PutMacroType (
        enum XlXLMMacroType _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t GetRefersTo ( );
    void PutRefersTo (
        const _variant_t & _arg1 );
    _bstr_t GetShortcutKey ( );
    void PutShortcutKey (
        _bstr_t _arg1 );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t _arg1 );
    _variant_t GetRefersToLocal ( );
    void PutRefersToLocal (
        const _variant_t & _arg1 );
    _variant_t GetRefersToR1C1 ( );
    void PutRefersToR1C1 (
        const _variant_t & _arg1 );
    _variant_t GetRefersToR1C1Local ( );
    void PutRefersToR1C1Local (
        const _variant_t & _arg1 );
    RangePtr GetRefersToRange ( );
};

struct __declspec(uuid("000208cf-0000-0000-c000-000000000046"))
ChartObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetChart))
    _ChartPtr Chart;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetProtectChartObject,put=PutProtectChartObject))
    VARIANT_BOOL ProtectChartObject;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t Activate ( );
    _ChartPtr GetChart ( );
    VARIANT_BOOL GetProtectChartObject ( );
    void PutProtectChartObject (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208d0-0000-0000-c000-000000000046"))
ChartObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    ChartObjectPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208d1-0000-0000-c000-000000000046"))
Mailer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWhichAddress,put=PutWhichAddress))
    _variant_t WhichAddress;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBCCRecipients,put=PutBCCRecipients))
    _variant_t BCCRecipients;
    __declspec(property(get=GetCCRecipients,put=PutCCRecipients))
    _variant_t CCRecipients;
    __declspec(property(get=GetEnclosures,put=PutEnclosures))
    _variant_t Enclosures;
    __declspec(property(get=GetReceived))
    VARIANT_BOOL Received;
    __declspec(property(get=GetSendDateTime))
    DATE SendDateTime;
    __declspec(property(get=GetSender))
    _bstr_t Sender;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetToRecipients,put=PutToRecipients))
    _variant_t ToRecipients;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBCCRecipients ( );
    void PutBCCRecipients (
        const _variant_t & _arg1 );
    _variant_t GetCCRecipients ( );
    void PutCCRecipients (
        const _variant_t & _arg1 );
    _variant_t GetEnclosures ( );
    void PutEnclosures (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetReceived ( );
    DATE GetSendDateTime ( );
    _bstr_t GetSender ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t _arg1 );
    _variant_t GetToRecipients ( );
    void PutToRecipients (
        const _variant_t & _arg1 );
    _variant_t GetWhichAddress ( );
    void PutWhichAddress (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024422-0000-0000-c000-000000000046"))
CustomViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomViewPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CustomViewPtr Item (
        const _variant_t & ViewName );
    CustomViewPtr Add (
        _bstr_t ViewName,
        const _variant_t & PrintSettings = vtMissing,
        const _variant_t & RowColSettings = vtMissing );
    CustomViewPtr Get_Default (
        const _variant_t & ViewName );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024423-0000-0000-c000-000000000046"))
CustomView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintSettings))
    VARIANT_BOOL PrintSettings;
    __declspec(property(get=GetRowColSettings))
    VARIANT_BOOL RowColSettings;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetPrintSettings ( );
    VARIANT_BOOL GetRowColSettings ( );
    HRESULT Show ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024424-0000-0000-c000-000000000046"))
FormatConditions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FormatConditionPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FormatConditionPtr Item (
        const _variant_t & Index );
    FormatConditionPtr Add (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    FormatConditionPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024425-0000-0000-c000-000000000046"))
FormatCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Modify (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetType ( );
    long GetOperator ( );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    InteriorPtr GetInterior ( );
    BordersPtr GetBorders ( );
    FontPtr GetFont ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024426-0000-0000-c000-000000000046"))
Comments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CommentPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CommentPtr Item (
        long Index );
    CommentPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024427-0000-0000-c000-000000000046"))
Comment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    ShapePtr GetShape ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    _bstr_t Text (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Overwrite = vtMissing );
    HRESULT Delete ( );
    CommentPtr Next ( );
    CommentPtr Previous ( );
};

struct __declspec(uuid("0002441b-0000-0000-c000-000000000046"))
RefreshEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeRefresh (
        VARIANT_BOOL * Cancel );
    HRESULT AfterRefresh (
        VARIANT_BOOL Success );
};

struct __declspec(uuid("00024428-0000-0000-c000-000000000046"))
_QueryTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTextFilePromptOnRefresh,put=PutTextFilePromptOnRefresh))
    VARIANT_BOOL TextFilePromptOnRefresh;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetTextFileDecimalSeparator,put=PutTextFileDecimalSeparator))
    _bstr_t TextFileDecimalSeparator;
    __declspec(property(get=GetTextFileThousandsSeparator,put=PutTextFileThousandsSeparator))
    _bstr_t TextFileThousandsSeparator;
    __declspec(property(get=GetWebSelectionType,put=PutWebSelectionType))
    enum XlWebSelectionType WebSelectionType;
    __declspec(property(get=GetWebFormatting,put=PutWebFormatting))
    enum XlWebFormatting WebFormatting;
    __declspec(property(get=GetWebTables,put=PutWebTables))
    _bstr_t WebTables;
    __declspec(property(get=GetWebPreFormattedTextToColumns,put=PutWebPreFormattedTextToColumns))
    VARIANT_BOOL WebPreFormattedTextToColumns;
    __declspec(property(get=GetWebSingleBlockTextImport,put=PutWebSingleBlockTextImport))
    VARIANT_BOOL WebSingleBlockTextImport;
    __declspec(property(get=GetWebDisableDateRecognition,put=PutWebDisableDateRecognition))
    VARIANT_BOOL WebDisableDateRecognition;
    __declspec(property(get=GetWebConsecutiveDelimitersAsOne,put=PutWebConsecutiveDelimitersAsOne))
    VARIANT_BOOL WebConsecutiveDelimitersAsOne;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetSourceDataFile,put=PutSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;
    __declspec(property(get=GetDestination))
    RangePtr Destination;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFieldNames,put=PutFieldNames))
    VARIANT_BOOL FieldNames;
    __declspec(property(get=GetRowNumbers,put=PutRowNumbers))
    VARIANT_BOOL RowNumbers;
    __declspec(property(get=GetFillAdjacentFormulas,put=PutFillAdjacentFormulas))
    VARIANT_BOOL FillAdjacentFormulas;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRefreshing))
    VARIANT_BOOL Refreshing;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetFetchedRowOverflow))
    VARIANT_BOOL FetchedRowOverflow;
    __declspec(property(get=GetRefreshStyle,put=PutRefreshStyle))
    enum XlCellInsertionMode RefreshStyle;
    __declspec(property(get=GetPostText,put=PutPostText))
    _bstr_t PostText;
    __declspec(property(get=GetResultRange))
    RangePtr ResultRange;
    __declspec(property(get=GetParameters))
    ParametersPtr Parameters;
    __declspec(property(get=GetTablesOnlyFromHTML,put=PutTablesOnlyFromHTML))
    VARIANT_BOOL TablesOnlyFromHTML;
    __declspec(property(get=GetEnableEditing,put=PutEnableEditing))
    VARIANT_BOOL EnableEditing;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetWebDisableRedirections,put=PutWebDisableRedirections))
    VARIANT_BOOL WebDisableRedirections;
    __declspec(property(get=GetEditWebPage,put=PutEditWebPage))
    _variant_t EditWebPage;
    __declspec(property(get=GetTextFileTrailingMinusNumbers,put=PutTextFileTrailingMinusNumbers))
    VARIANT_BOOL TextFileTrailingMinusNumbers;
    __declspec(property(get=GetTextFilePlatform,put=PutTextFilePlatform))
    long TextFilePlatform;
    __declspec(property(get=GetTextFileStartRow,put=PutTextFileStartRow))
    long TextFileStartRow;
    __declspec(property(get=GetTextFileParseType,put=PutTextFileParseType))
    enum XlTextParsingType TextFileParseType;
    __declspec(property(get=GetTextFileTextQualifier,put=PutTextFileTextQualifier))
    enum XlTextQualifier TextFileTextQualifier;
    __declspec(property(get=GetTextFileConsecutiveDelimiter,put=PutTextFileConsecutiveDelimiter))
    VARIANT_BOOL TextFileConsecutiveDelimiter;
    __declspec(property(get=GetTextFileTabDelimiter,put=PutTextFileTabDelimiter))
    VARIANT_BOOL TextFileTabDelimiter;
    __declspec(property(get=GetTextFileSemicolonDelimiter,put=PutTextFileSemicolonDelimiter))
    VARIANT_BOOL TextFileSemicolonDelimiter;
    __declspec(property(get=GetTextFileCommaDelimiter,put=PutTextFileCommaDelimiter))
    VARIANT_BOOL TextFileCommaDelimiter;
    __declspec(property(get=GetTextFileSpaceDelimiter,put=PutTextFileSpaceDelimiter))
    VARIANT_BOOL TextFileSpaceDelimiter;
    __declspec(property(get=GetTextFileOtherDelimiter,put=PutTextFileOtherDelimiter))
    _bstr_t TextFileOtherDelimiter;
    __declspec(property(get=GetTextFileColumnDataTypes,put=PutTextFileColumnDataTypes))
    _variant_t TextFileColumnDataTypes;
    __declspec(property(get=GetTextFileFixedColumnWidths,put=PutTextFileFixedColumnWidths))
    _variant_t TextFileFixedColumnWidths;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetPreserveColumnInfo,put=PutPreserveColumnInfo))
    VARIANT_BOOL PreserveColumnInfo;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetFieldNames ( );
    void PutFieldNames (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRowNumbers ( );
    void PutRowNumbers (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFillAdjacentFormulas ( );
    void PutFillAdjacentFormulas (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRefreshing ( );
    VARIANT_BOOL GetFetchedRowOverflow ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL _arg1 );
    HRESULT CancelRefresh ( );
    enum XlCellInsertionMode GetRefreshStyle ( );
    void PutRefreshStyle (
        enum XlCellInsertionMode _arg1 );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL _arg1 );
    RangePtr GetDestination ( );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & _arg1 );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & _arg1 );
    _bstr_t GetPostText ( );
    void PutPostText (
        _bstr_t _arg1 );
    RangePtr GetResultRange ( );
    HRESULT Delete ( );
    VARIANT_BOOL Refresh (
        const _variant_t & BackgroundQuery = vtMissing );
    ParametersPtr GetParameters ( );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * _arg1 );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTablesOnlyFromHTML ( );
    void PutTablesOnlyFromHTML (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableEditing ( );
    void PutEnableEditing (
        VARIANT_BOOL _arg1 );
    long GetTextFilePlatform ( );
    void PutTextFilePlatform (
        long _arg1 );
    long GetTextFileStartRow ( );
    void PutTextFileStartRow (
        long _arg1 );
    enum XlTextParsingType GetTextFileParseType ( );
    void PutTextFileParseType (
        enum XlTextParsingType _arg1 );
    enum XlTextQualifier GetTextFileTextQualifier ( );
    void PutTextFileTextQualifier (
        enum XlTextQualifier _arg1 );
    VARIANT_BOOL GetTextFileConsecutiveDelimiter ( );
    void PutTextFileConsecutiveDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileTabDelimiter ( );
    void PutTextFileTabDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileSemicolonDelimiter ( );
    void PutTextFileSemicolonDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileCommaDelimiter ( );
    void PutTextFileCommaDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileSpaceDelimiter ( );
    void PutTextFileSpaceDelimiter (
        VARIANT_BOOL _arg1 );
    _bstr_t GetTextFileOtherDelimiter ( );
    void PutTextFileOtherDelimiter (
        _bstr_t _arg1 );
    _variant_t GetTextFileColumnDataTypes ( );
    void PutTextFileColumnDataTypes (
        const _variant_t & _arg1 );
    _variant_t GetTextFileFixedColumnWidths ( );
    void PutTextFileFixedColumnWidths (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPreserveColumnInfo ( );
    void PutPreserveColumnInfo (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL _arg1 );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & _arg1 );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType _arg1 );
    VARIANT_BOOL GetTextFilePromptOnRefresh ( );
    void PutTextFilePromptOnRefresh (
        VARIANT_BOOL _arg1 );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL _arg1 );
    _bstr_t GetTextFileDecimalSeparator ( );
    void PutTextFileDecimalSeparator (
        _bstr_t _arg1 );
    _bstr_t GetTextFileThousandsSeparator ( );
    void PutTextFileThousandsSeparator (
        _bstr_t _arg1 );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long _arg1 );
    HRESULT ResetTimer ( );
    enum XlWebSelectionType GetWebSelectionType ( );
    void PutWebSelectionType (
        enum XlWebSelectionType _arg1 );
    enum XlWebFormatting GetWebFormatting ( );
    void PutWebFormatting (
        enum XlWebFormatting _arg1 );
    _bstr_t GetWebTables ( );
    void PutWebTables (
        _bstr_t _arg1 );
    VARIANT_BOOL GetWebPreFormattedTextToColumns ( );
    void PutWebPreFormattedTextToColumns (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebSingleBlockTextImport ( );
    void PutWebSingleBlockTextImport (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebDisableDateRecognition ( );
    void PutWebDisableDateRecognition (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebConsecutiveDelimitersAsOne ( );
    void PutWebConsecutiveDelimitersAsOne (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebDisableRedirections ( );
    void PutWebDisableRedirections (
        VARIANT_BOOL _arg1 );
    _variant_t GetEditWebPage ( );
    void PutEditWebPage (
        const _variant_t & _arg1 );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t _arg1 );
    _bstr_t GetSourceDataFile ( );
    void PutSourceDataFile (
        _bstr_t _arg1 );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect _arg1 );
    VARIANT_BOOL GetTextFileTrailingMinusNumbers ( );
    void PutTextFileTrailingMinusNumbers (
        VARIANT_BOOL _arg1 );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );
};

struct __declspec(uuid("00024429-0000-0000-c000-000000000046"))
QueryTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _QueryTablePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    _QueryTablePtr Add (
        const _variant_t & Connection,
        struct Range * Destination,
        const _variant_t & Sql = vtMissing );
    _QueryTablePtr Item (
        const _variant_t & Index );
    _QueryTablePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442a-0000-0000-c000-000000000046"))
Parameter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceRange))
    RangePtr SourceRange;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetType))
    enum XlParameterType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum XlParameterDataType DataType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRefreshOnChange,put=PutRefreshOnChange))
    VARIANT_BOOL RefreshOnChange;
    __declspec(property(get=GetPromptString))
    _bstr_t PromptString;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlParameterDataType GetDataType ( );
    void PutDataType (
        enum XlParameterDataType _arg1 );
    enum XlParameterType GetType ( );
    _bstr_t GetPromptString ( );
    _variant_t GetValue ( );
    RangePtr GetSourceRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    HRESULT SetParam (
        enum XlParameterType Type,
        const _variant_t & Value );
    VARIANT_BOOL GetRefreshOnChange ( );
    void PutRefreshOnChange (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002442b-0000-0000-c000-000000000046"))
Parameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ParameterPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ParameterPtr Add (
        _bstr_t Name,
        const _variant_t & iDataType = vtMissing );
    long GetCount ( );
    ParameterPtr Item (
        const _variant_t & Index );
    ParameterPtr Get_Default (
        const _variant_t & Index );
    HRESULT Delete ( );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442c-0000-0000-c000-000000000046"))
ODBCError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
};

struct __declspec(uuid("0002442d-0000-0000-c000-000000000046"))
ODBCErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ODBCErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ODBCErrorPtr Item (
        long Index );
    ODBCErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442f-0000-0000-c000-000000000046"))
Validation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlertStyle))
    long AlertStyle;
    __declspec(property(get=GetIgnoreBlank,put=PutIgnoreBlank))
    VARIANT_BOOL IgnoreBlank;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    long IMEMode;
    __declspec(property(get=GetInCellDropdown,put=PutInCellDropdown))
    VARIANT_BOOL InCellDropdown;
    __declspec(property(get=GetErrorMessage,put=PutErrorMessage))
    _bstr_t ErrorMessage;
    __declspec(property(get=GetErrorTitle,put=PutErrorTitle))
    _bstr_t ErrorTitle;
    __declspec(property(get=GetInputMessage,put=PutInputMessage))
    _bstr_t InputMessage;
    __declspec(property(get=GetInputTitle,put=PutInputTitle))
    _bstr_t InputTitle;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetShowError,put=PutShowError))
    VARIANT_BOOL ShowError;
    __declspec(property(get=GetShowInput,put=PutShowInput))
    VARIANT_BOOL ShowInput;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Add (
        enum XlDVType Type,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetAlertStyle ( );
    VARIANT_BOOL GetIgnoreBlank ( );
    void PutIgnoreBlank (
        VARIANT_BOOL _arg1 );
    long GetIMEMode ( );
    void PutIMEMode (
        long _arg1 );
    VARIANT_BOOL GetInCellDropdown ( );
    void PutInCellDropdown (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    _bstr_t GetErrorMessage ( );
    void PutErrorMessage (
        _bstr_t _arg1 );
    _bstr_t GetErrorTitle ( );
    void PutErrorTitle (
        _bstr_t _arg1 );
    _bstr_t GetInputMessage ( );
    void PutInputMessage (
        _bstr_t _arg1 );
    _bstr_t GetInputTitle ( );
    void PutInputTitle (
        _bstr_t _arg1 );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    HRESULT Modify (
        const _variant_t & Type = vtMissing,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetOperator ( );
    VARIANT_BOOL GetShowError ( );
    void PutShowError (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowInput ( );
    void PutShowInput (
        VARIANT_BOOL _arg1 );
    long GetType ( );
    VARIANT_BOOL GetValue ( );
};

struct __declspec(uuid("00024430-0000-0000-c000-000000000046"))
Hyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HyperlinkPtr _Default[];
    __declspec(property(get=GetItem))
    HyperlinkPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        IDispatch * Anchor,
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & ScreenTip = vtMissing,
        const _variant_t & TextToDisplay = vtMissing );
    long GetCount ( );
    HyperlinkPtr GetItem (
        const _variant_t & Index );
    HyperlinkPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024431-0000-0000-c000-000000000046"))
Hyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    RangePtr GetRange ( );
    ShapePtr GetShape ( );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t _arg1 );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t _arg1 );
    long GetType ( );
    HRESULT AddToFavorites ( );
    HRESULT Delete ( );
    HRESULT Follow (
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t _arg1 );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t _arg1 );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t _arg1 );
    HRESULT CreateNewDocument (
        _bstr_t Filename,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite );
};

struct __declspec(uuid("00024432-0000-0000-c000-000000000046"))
AutoFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetFilters))
    FiltersPtr Filters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    FiltersPtr GetFilters ( );
};

struct __declspec(uuid("00024433-0000-0000-c000-000000000046"))
Filters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FilterPtr _Default[];
    __declspec(property(get=GetItem))
    FilterPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FilterPtr Get_Default (
        long Index );
    FilterPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024434-0000-0000-c000-000000000046"))
Filter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOn))
    VARIANT_BOOL On;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCriteria1))
    _variant_t Criteria1;
    __declspec(property(get=GetOperator))
    enum XlAutoFilterOperator Operator;
    __declspec(property(get=GetCriteria2))
    _variant_t Criteria2;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOn ( );
    _variant_t GetCriteria1 ( );
    enum XlAutoFilterOperator GetOperator ( );
    _variant_t GetCriteria2 ( );
};

struct __declspec(uuid("000208d4-0000-0000-c000-000000000046"))
AutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayAutoCorrectOptions,put=PutDisplayAutoCorrectOptions))
    VARIANT_BOOL DisplayAutoCorrectOptions;
    __declspec(property(get=GetCorrectSentenceCap,put=PutCorrectSentenceCap))
    VARIANT_BOOL CorrectSentenceCap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCorrectCapsLock,put=PutCorrectCapsLock))
    VARIANT_BOOL CorrectCapsLock;
    __declspec(property(get=GetJOEReplaceText,put=PutJOEReplaceText))
    VARIANT_BOOL JOEReplaceText;
    __declspec(property(get=GetTwoInitialCapitals,put=PutTwoInitialCapitals))
    VARIANT_BOOL TwoInitialCapitals;
    __declspec(property(get=GetCapitalizeNamesOfDays,put=PutCapitalizeNamesOfDays))
    VARIANT_BOOL CapitalizeNamesOfDays;
    __declspec(property(get=GetReplacementList,put=PutReplacementList))
    _variant_t ReplacementList[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddReplacement (
        _bstr_t What,
        _bstr_t Replacement );
    VARIANT_BOOL GetCapitalizeNamesOfDays ( );
    void PutCapitalizeNamesOfDays (
        VARIANT_BOOL _arg1 );
    _variant_t DeleteReplacement (
        _bstr_t What );
    _variant_t GetReplacementList (
        const _variant_t & Index = vtMissing );
    void PutReplacementList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    VARIANT_BOOL GetJOEReplaceText ( );
    void PutJOEReplaceText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTwoInitialCapitals ( );
    void PutTwoInitialCapitals (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCorrectSentenceCap ( );
    void PutCorrectSentenceCap (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCorrectCapsLock ( );
    void PutCorrectCapsLock (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayAutoCorrectOptions ( );
    void PutDisplayAutoCorrectOptions (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020854-0000-0000-c000-000000000046"))
Border : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & _arg1 );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020870-0000-0000-c000-000000000046"))
Interior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetPatternColorIndex,put=PutPatternColorIndex))
    _variant_t PatternColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    _variant_t InvertIfNegative;
    __declspec(property(get=GetPatternColor,put=PutPatternColor))
    _variant_t PatternColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPattern,put=PutPattern))
    _variant_t Pattern;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetInvertIfNegative ( );
    void PutInvertIfNegative (
        const _variant_t & _arg1 );
    _variant_t GetPattern ( );
    void PutPattern (
        const _variant_t & _arg1 );
    _variant_t GetPatternColor ( );
    void PutPatternColor (
        const _variant_t & _arg1 );
    _variant_t GetPatternColorIndex ( );
    void PutPatternColorIndex (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024435-0000-0000-c000-000000000046"))
ChartFillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetBackColor))
    ChartColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor))
    ChartColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    long GradientVariant;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT UserPicture (
        const _variant_t & PictureFile = vtMissing,
        const _variant_t & PictureFormat = vtMissing,
        const _variant_t & PictureStackUnit = vtMissing,
        const _variant_t & PicturePlacement = vtMissing );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    ChartColorFormatPtr GetBackColor ( );
    ChartColorFormatPtr GetForeColor ( );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    long GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
};

struct __declspec(uuid("00024436-0000-0000-c000-000000000046"))
ChartColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    long _Default;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    long SchemeColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Getignorethis))
    long ignorethis;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetSchemeColor ( );
    void PutSchemeColor (
        long _arg1 );
    long Getignorethis ( );
    long Get_Default ( );
    long GetType ( );
};

struct __declspec(uuid("00020848-0000-0000-c000-000000000046"))
Axis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisTitle))
    AxisTitlePtr AxisTitle;
    __declspec(property(get=GetDisplayUnit,put=PutDisplayUnit))
    enum XlDisplayUnit DisplayUnit;
    __declspec(property(get=GetDisplayUnitCustom,put=PutDisplayUnitCustom))
    double DisplayUnitCustom;
    __declspec(property(get=GetHasDisplayUnitLabel,put=PutHasDisplayUnitLabel))
    VARIANT_BOOL HasDisplayUnitLabel;
    __declspec(property(get=GetDisplayUnitLabel))
    DisplayUnitLabelPtr DisplayUnitLabel;
    __declspec(property(get=GetMajorGridlines))
    GridlinesPtr MajorGridlines;
    __declspec(property(get=GetMinorGridlines))
    GridlinesPtr MinorGridlines;
    __declspec(property(get=GetTickLabels))
    TickLabelsPtr TickLabels;
    __declspec(property(get=GetBaseUnit,put=PutBaseUnit))
    enum XlTimeUnit BaseUnit;
    __declspec(property(get=GetBaseUnitIsAuto,put=PutBaseUnitIsAuto))
    VARIANT_BOOL BaseUnitIsAuto;
    __declspec(property(get=GetMajorUnitScale,put=PutMajorUnitScale))
    enum XlTimeUnit MajorUnitScale;
    __declspec(property(get=GetMinorUnitScale,put=PutMinorUnitScale))
    enum XlTimeUnit MinorUnitScale;
    __declspec(property(get=GetCategoryType,put=PutCategoryType))
    enum XlCategoryType CategoryType;
    __declspec(property(get=GetHasMajorGridlines,put=PutHasMajorGridlines))
    VARIANT_BOOL HasMajorGridlines;
    __declspec(property(get=GetHasMinorGridlines,put=PutHasMinorGridlines))
    VARIANT_BOOL HasMinorGridlines;
    __declspec(property(get=GetMajorTickMark,put=PutMajorTickMark))
    enum XlTickMark MajorTickMark;
    __declspec(property(get=GetMinorTickMark,put=PutMinorTickMark))
    enum XlTickMark MinorTickMark;
    __declspec(property(get=GetTickLabelPosition,put=PutTickLabelPosition))
    enum XlTickLabelPosition TickLabelPosition;
    __declspec(property(get=GetTickLabelSpacing,put=PutTickLabelSpacing))
    long TickLabelSpacing;
    __declspec(property(get=GetType,put=PutType))
    enum XlAxisType Type;
    __declspec(property(get=GetTickMarkSpacing,put=PutTickMarkSpacing))
    long TickMarkSpacing;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    double MinimumScale;
    __declspec(property(get=GetMinimumScaleIsAuto,put=PutMinimumScaleIsAuto))
    VARIANT_BOOL MinimumScaleIsAuto;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    double MaximumScale;
    __declspec(property(get=GetMaximumScaleIsAuto,put=PutMaximumScaleIsAuto))
    VARIANT_BOOL MaximumScaleIsAuto;
    __declspec(property(get=GetMajorUnit,put=PutMajorUnit))
    double MajorUnit;
    __declspec(property(get=GetMajorUnitIsAuto,put=PutMajorUnitIsAuto))
    VARIANT_BOOL MajorUnitIsAuto;
    __declspec(property(get=GetMinorUnit,put=PutMinorUnit))
    double MinorUnit;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetMinorUnitIsAuto,put=PutMinorUnitIsAuto))
    VARIANT_BOOL MinorUnitIsAuto;
    __declspec(property(get=GetScaleType,put=PutScaleType))
    enum XlScaleType ScaleType;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetReversePlotOrder,put=PutReversePlotOrder))
    VARIANT_BOOL ReversePlotOrder;
    __declspec(property(get=GetAxisBetweenCategories,put=PutAxisBetweenCategories))
    VARIANT_BOOL AxisBetweenCategories;
    __declspec(property(get=GetAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetCrosses,put=PutCrosses))
    enum XlAxisCrosses Crosses;
    __declspec(property(get=GetCrossesAt,put=PutCrossesAt))
    double CrossesAt;
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCategoryNames,put=PutCategoryNames))
    _variant_t CategoryNames;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAxisBetweenCategories ( );
    void PutAxisBetweenCategories (
        VARIANT_BOOL _arg1 );
    enum XlAxisGroup GetAxisGroup ( );
    AxisTitlePtr GetAxisTitle ( );
    BorderPtr GetBorder ( );
    _variant_t GetCategoryNames ( );
    void PutCategoryNames (
        const _variant_t & _arg1 );
    enum XlAxisCrosses GetCrosses ( );
    void PutCrosses (
        enum XlAxisCrosses _arg1 );
    double GetCrossesAt ( );
    void PutCrossesAt (
        double _arg1 );
    _variant_t Delete ( );
    VARIANT_BOOL GetHasMajorGridlines ( );
    void PutHasMajorGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasMinorGridlines ( );
    void PutHasMinorGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasTitle ( );
    void PutHasTitle (
        VARIANT_BOOL _arg1 );
    GridlinesPtr GetMajorGridlines ( );
    enum XlTickMark GetMajorTickMark ( );
    void PutMajorTickMark (
        enum XlTickMark _arg1 );
    double GetMajorUnit ( );
    void PutMajorUnit (
        double _arg1 );
    VARIANT_BOOL GetMajorUnitIsAuto ( );
    void PutMajorUnitIsAuto (
        VARIANT_BOOL _arg1 );
    double GetMaximumScale ( );
    void PutMaximumScale (
        double _arg1 );
    VARIANT_BOOL GetMaximumScaleIsAuto ( );
    void PutMaximumScaleIsAuto (
        VARIANT_BOOL _arg1 );
    double GetMinimumScale ( );
    void PutMinimumScale (
        double _arg1 );
    VARIANT_BOOL GetMinimumScaleIsAuto ( );
    void PutMinimumScaleIsAuto (
        VARIANT_BOOL _arg1 );
    GridlinesPtr GetMinorGridlines ( );
    enum XlTickMark GetMinorTickMark ( );
    void PutMinorTickMark (
        enum XlTickMark _arg1 );
    double GetMinorUnit ( );
    void PutMinorUnit (
        double _arg1 );
    VARIANT_BOOL GetMinorUnitIsAuto ( );
    void PutMinorUnitIsAuto (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetReversePlotOrder ( );
    void PutReversePlotOrder (
        VARIANT_BOOL _arg1 );
    enum XlScaleType GetScaleType ( );
    void PutScaleType (
        enum XlScaleType _arg1 );
    _variant_t Select ( );
    enum XlTickLabelPosition GetTickLabelPosition ( );
    void PutTickLabelPosition (
        enum XlTickLabelPosition _arg1 );
    TickLabelsPtr GetTickLabels ( );
    long GetTickLabelSpacing ( );
    void PutTickLabelSpacing (
        long _arg1 );
    long GetTickMarkSpacing ( );
    void PutTickMarkSpacing (
        long _arg1 );
    enum XlAxisType GetType ( );
    void PutType (
        enum XlAxisType _arg1 );
    enum XlTimeUnit GetBaseUnit ( );
    void PutBaseUnit (
        enum XlTimeUnit _arg1 );
    VARIANT_BOOL GetBaseUnitIsAuto ( );
    void PutBaseUnitIsAuto (
        VARIANT_BOOL _arg1 );
    enum XlTimeUnit GetMajorUnitScale ( );
    void PutMajorUnitScale (
        enum XlTimeUnit _arg1 );
    enum XlTimeUnit GetMinorUnitScale ( );
    void PutMinorUnitScale (
        enum XlTimeUnit _arg1 );
    enum XlCategoryType GetCategoryType ( );
    void PutCategoryType (
        enum XlCategoryType _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    enum XlDisplayUnit GetDisplayUnit ( );
    void PutDisplayUnit (
        enum XlDisplayUnit _arg1 );
    double GetDisplayUnitCustom ( );
    void PutDisplayUnitCustom (
        double _arg1 );
    VARIANT_BOOL GetHasDisplayUnitLabel ( );
    void PutHasDisplayUnitLabel (
        VARIANT_BOOL _arg1 );
    DisplayUnitLabelPtr GetDisplayUnitLabel ( );
};

struct __declspec(uuid("00020849-0000-0000-c000-000000000046"))
ChartTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002084a-0000-0000-c000-000000000046"))
AxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020859-0000-0000-c000-000000000046"))
ChartGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVaryByCategories,put=PutVaryByCategories))
    VARIANT_BOOL VaryByCategories;
    __declspec(property(get=GetHasDropLines,put=PutHasDropLines))
    VARIANT_BOOL HasDropLines;
    __declspec(property(get=GetHasHiLoLines,put=PutHasHiLoLines))
    VARIANT_BOOL HasHiLoLines;
    __declspec(property(get=GetFirstSliceAngle,put=PutFirstSliceAngle))
    long FirstSliceAngle;
    __declspec(property(get=GetHasRadarAxisLabels,put=PutHasRadarAxisLabels))
    VARIANT_BOOL HasRadarAxisLabels;
    __declspec(property(get=GetHasSeriesLines,put=PutHasSeriesLines))
    VARIANT_BOOL HasSeriesLines;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHasUpDownBars,put=PutHasUpDownBars))
    VARIANT_BOOL HasUpDownBars;
    __declspec(property(get=GetUpBars))
    UpBarsPtr UpBars;
    __declspec(property(get=GetDownBars))
    DownBarsPtr DownBars;
    __declspec(property(get=GetDropLines))
    DropLinesPtr DropLines;
    __declspec(property(get=GetHiLoLines))
    HiLoLinesPtr HiLoLines;
    __declspec(property(get=GetRadarAxisLabels))
    TickLabelsPtr RadarAxisLabels;
    __declspec(property(get=GetSeriesLines))
    SeriesLinesPtr SeriesLines;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSizeRepresents,put=PutSizeRepresents))
    enum XlSizeRepresents SizeRepresents;
    __declspec(property(get=GetBubbleScale,put=PutBubbleScale))
    long BubbleScale;
    __declspec(property(get=GetShowNegativeBubbles,put=PutShowNegativeBubbles))
    VARIANT_BOOL ShowNegativeBubbles;
    __declspec(property(get=GetSplitType,put=PutSplitType))
    enum XlChartSplitType SplitType;
    __declspec(property(get=GetSplitValue,put=PutSplitValue))
    _variant_t SplitValue;
    __declspec(property(get=GetSecondPlotSize,put=PutSecondPlotSize))
    long SecondPlotSize;
    __declspec(property(get=GetHas3DShading,put=PutHas3DShading))
    VARIANT_BOOL Has3DShading;
    __declspec(property(get=GetDoughnutHoleSize,put=PutDoughnutHoleSize))
    long DoughnutHoleSize;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType;
    __declspec(property(get=GetGapWidth,put=PutGapWidth))
    long GapWidth;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup _arg1 );
    long GetDoughnutHoleSize ( );
    void PutDoughnutHoleSize (
        long _arg1 );
    DownBarsPtr GetDownBars ( );
    DropLinesPtr GetDropLines ( );
    long GetFirstSliceAngle ( );
    void PutFirstSliceAngle (
        long _arg1 );
    long GetGapWidth ( );
    void PutGapWidth (
        long _arg1 );
    VARIANT_BOOL GetHasDropLines ( );
    void PutHasDropLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasHiLoLines ( );
    void PutHasHiLoLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasRadarAxisLabels ( );
    void PutHasRadarAxisLabels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasSeriesLines ( );
    void PutHasSeriesLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasUpDownBars ( );
    void PutHasUpDownBars (
        VARIANT_BOOL _arg1 );
    HiLoLinesPtr GetHiLoLines ( );
    long GetIndex ( );
    long GetOverlap ( );
    void PutOverlap (
        long _arg1 );
    TickLabelsPtr GetRadarAxisLabels ( );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing );
    SeriesLinesPtr GetSeriesLines ( );
    long GetSubType ( );
    void PutSubType (
        long _arg1 );
    long GetType ( );
    void PutType (
        long _arg1 );
    UpBarsPtr GetUpBars ( );
    VARIANT_BOOL GetVaryByCategories ( );
    void PutVaryByCategories (
        VARIANT_BOOL _arg1 );
    enum XlSizeRepresents GetSizeRepresents ( );
    void PutSizeRepresents (
        enum XlSizeRepresents _arg1 );
    long GetBubbleScale ( );
    void PutBubbleScale (
        long _arg1 );
    VARIANT_BOOL GetShowNegativeBubbles ( );
    void PutShowNegativeBubbles (
        VARIANT_BOOL _arg1 );
    enum XlChartSplitType GetSplitType ( );
    void PutSplitType (
        enum XlChartSplitType _arg1 );
    _variant_t GetSplitValue ( );
    void PutSplitValue (
        const _variant_t & _arg1 );
    long GetSecondPlotSize ( );
    void PutSecondPlotSize (
        long _arg1 );
    VARIANT_BOOL GetHas3DShading ( );
    void PutHas3DShading (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002085a-0000-0000-c000-000000000046"))
ChartGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ChartGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002085b-0000-0000-c000-000000000046"))
Axes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    AxisPtr Item (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020869-0000-0000-c000-000000000046"))
Points : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PointPtr Item (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002086a-0000-0000-c000-000000000046"))
Point : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetHasDataLabel,put=PutHasDataLabel))
    VARIANT_BOOL HasDataLabel;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetSecondaryPlot,put=PutSecondaryPlot))
    VARIANT_BOOL SecondaryPlot;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    long GetExplosion ( );
    void PutExplosion (
        long _arg1 );
    VARIANT_BOOL GetHasDataLabel ( );
    void PutHasDataLabel (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    _variant_t Select ( );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryPlot ( );
    void PutSecondaryPlot (
        VARIANT_BOOL _arg1 );
    ChartFillFormatPtr GetFill ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );
};

struct __declspec(uuid("0002086b-0000-0000-c000-000000000046"))
Series : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetHasDataLabels,put=PutHasDataLabels))
    VARIANT_BOOL HasDataLabels;
    __declspec(property(get=GetHasLeaderLines,put=PutHasLeaderLines))
    VARIANT_BOOL HasLeaderLines;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetXValues,put=PutXValues))
    _variant_t XValues;
    __declspec(property(get=GetErrorBars))
    ErrorBarsPtr ErrorBars;
    __declspec(property(get=GetHasErrorBars,put=PutHasErrorBars))
    VARIANT_BOOL HasErrorBars;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetValues,put=PutValues))
    _variant_t Values;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetBubbleSizes,put=PutBubbleSizes))
    _variant_t BubbleSizes;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetPlotOrder,put=PutPlotOrder))
    long PlotOrder;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetHas3DEffect,put=PutHas3DEffect))
    VARIANT_BOOL Has3DEffect;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetLeaderLines))
    LeaderLinesPtr LeaderLines;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup _arg1 );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    IDispatchPtr DataLabels (
        const _variant_t & Index = vtMissing );
    _variant_t Delete ( );
    _variant_t ErrorBar (
        enum XlErrorBarDirection Direction,
        enum XlErrorBarInclude Include,
        enum XlErrorBarType Type,
        const _variant_t & Amount = vtMissing,
        const _variant_t & MinusValues = vtMissing );
    ErrorBarsPtr GetErrorBars ( );
    long GetExplosion ( );
    void PutExplosion (
        long _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaLocal (
        _bstr_t _arg1 );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        _bstr_t _arg1 );
    _bstr_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        _bstr_t _arg1 );
    VARIANT_BOOL GetHasDataLabels ( );
    void PutHasDataLabels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasErrorBars ( );
    void PutHasErrorBars (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    long GetPlotOrder ( );
    void PutPlotOrder (
        long _arg1 );
    IDispatchPtr Points (
        const _variant_t & Index = vtMissing );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Trendlines (
        const _variant_t & Index = vtMissing );
    long GetType ( );
    void PutType (
        long _arg1 );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType _arg1 );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType );
    _variant_t GetValues ( );
    void PutValues (
        const _variant_t & _arg1 );
    _variant_t GetXValues ( );
    void PutXValues (
        const _variant_t & _arg1 );
    _variant_t GetBubbleSizes ( );
    void PutBubbleSizes (
        const _variant_t & _arg1 );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape _arg1 );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHas3DEffect ( );
    void PutHas3DEffect (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasLeaderLines ( );
    void PutHasLeaderLines (
        VARIANT_BOOL _arg1 );
    LeaderLinesPtr GetLeaderLines ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );
};

struct __declspec(uuid("0002086c-0000-0000-c000-000000000046"))
SeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SeriesPtr Add (
        const _variant_t & Source,
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing );
    long GetCount ( );
    _variant_t Extend (
        const _variant_t & Source,
        const _variant_t & Rowcol = vtMissing,
        const _variant_t & CategoryLabels = vtMissing );
    SeriesPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    _variant_t Paste (
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing,
        const _variant_t & NewSeries = vtMissing );
    SeriesPtr NewSeries ( );
};

struct __declspec(uuid("000208b2-0000-0000-c000-000000000046"))
DataLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;
    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & _arg1 );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition _arg1 );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL _arg1 );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208b3-0000-0000-c000-000000000046"))
DataLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & _arg1 );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition _arg1 );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL _arg1 );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & _arg1 );
    long GetCount ( );
    DataLabelPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208ba-0000-0000-c000-000000000046"))
LegendEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLegendKey))
    LegendKeyPtr LegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    long GetIndex ( );
    LegendKeyPtr GetLegendKey ( );
    _variant_t Select ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
};

struct __declspec(uuid("000208bb-0000-0000-c000-000000000046"))
LegendEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    LegendEntryPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208bc-0000-0000-c000-000000000046"))
LegendKey : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    long PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    long GetPictureType ( );
    void PutPictureType (
        long _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208bd-0000-0000-c000-000000000046"))
Trendlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    TrendlinePtr Add (
        enum XlTrendlineType Type,
        const _variant_t & Order = vtMissing,
        const _variant_t & Period = vtMissing,
        const _variant_t & Forward = vtMissing,
        const _variant_t & Backward = vtMissing,
        const _variant_t & Intercept = vtMissing,
        const _variant_t & DisplayEquation = vtMissing,
        const _variant_t & DisplayRSquared = vtMissing,
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    TrendlinePtr Item (
        const _variant_t & Index = vtMissing );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208be-0000-0000-c000-000000000046"))
Trendline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetForward,put=PutForward))
    long Forward;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetType,put=PutType))
    enum XlTrendlineType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPeriod,put=PutPeriod))
    long Period;
    __declspec(property(get=GetBackward,put=PutBackward))
    long Backward;
    __declspec(property(get=GetIntercept,put=PutIntercept))
    double Intercept;
    __declspec(property(get=GetInterceptIsAuto,put=PutInterceptIsAuto))
    VARIANT_BOOL InterceptIsAuto;
    __declspec(property(get=GetNameIsAuto,put=PutNameIsAuto))
    VARIANT_BOOL NameIsAuto;
    __declspec(property(get=GetDisplayRSquared,put=PutDisplayRSquared))
    VARIANT_BOOL DisplayRSquared;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetDisplayEquation,put=PutDisplayEquation))
    VARIANT_BOOL DisplayEquation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetBackward ( );
    void PutBackward (
        long _arg1 );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    VARIANT_BOOL GetDisplayEquation ( );
    void PutDisplayEquation (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayRSquared ( );
    void PutDisplayRSquared (
        VARIANT_BOOL _arg1 );
    long GetForward ( );
    void PutForward (
        long _arg1 );
    long GetIndex ( );
    double GetIntercept ( );
    void PutIntercept (
        double _arg1 );
    VARIANT_BOOL GetInterceptIsAuto ( );
    void PutInterceptIsAuto (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNameIsAuto ( );
    void PutNameIsAuto (
        VARIANT_BOOL _arg1 );
    long GetOrder ( );
    void PutOrder (
        long _arg1 );
    long GetPeriod ( );
    void PutPeriod (
        long _arg1 );
    _variant_t Select ( );
    enum XlTrendlineType GetType ( );
    void PutType (
        enum XlTrendlineType _arg1 );
};

struct __declspec(uuid("000208c0-0000-0000-c000-000000000046"))
Corners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
};

struct __declspec(uuid("000208c1-0000-0000-c000-000000000046"))
SeriesLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c2-0000-0000-c000-000000000046"))
HiLoLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c3-0000-0000-c000-000000000046"))
Gridlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c4-0000-0000-c000-000000000046"))
DropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("00024437-0000-0000-c000-000000000046"))
LeaderLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    HRESULT Delete ( );
    HRESULT Select ( );
};

struct __declspec(uuid("000208c5-0000-0000-c000-000000000046"))
UpBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
};

struct __declspec(uuid("000208c6-0000-0000-c000-000000000046"))
DownBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
};

struct __declspec(uuid("000208c7-0000-0000-c000-000000000046"))
Floor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & _arg1 );
    HRESULT Paste ( );
};

struct __declspec(uuid("000208c8-0000-0000-c000-000000000046"))
Walls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    _variant_t PictureUnit;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & _arg1 );
    HRESULT Paste ( );
    _variant_t GetPictureUnit ( );
    void PutPictureUnit (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208c9-0000-0000-c000-000000000046"))
TickLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetDepth))
    long Depth;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlTickLabelOrientation Orientation;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetOffset,put=PutOffset))
    long Offset;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _bstr_t GetName ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    enum XlTickLabelOrientation GetOrientation ( );
    void PutOrientation (
        enum XlTickLabelOrientation _arg1 );
    _variant_t Select ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    long GetDepth ( );
    long GetOffset ( );
    void PutOffset (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
};

struct __declspec(uuid("000208cb-0000-0000-c000-000000000046"))
PlotArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetInsideLeft))
    double InsideLeft;
    __declspec(property(get=GetInsideTop))
    double InsideTop;
    __declspec(property(get=GetInsideWidth))
    double InsideWidth;
    __declspec(property(get=GetInsideHeight))
    double InsideHeight;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    double GetInsideLeft ( );
    double GetInsideTop ( );
    double GetInsideWidth ( );
    double GetInsideHeight ( );
};

struct __declspec(uuid("000208cc-0000-0000-c000-000000000046"))
ChartArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t Copy ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208cd-0000-0000-c000-000000000046"))
Legend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlLegendPosition Position;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    IDispatchPtr LegendEntries (
        const _variant_t & Index = vtMissing );
    enum XlLegendPosition GetPosition ( );
    void PutPosition (
        enum XlLegendPosition _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Clear ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208ce-0000-0000-c000-000000000046"))
ErrorBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum XlEndStyleCap EndStyle;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    _variant_t ClearFormats ( );
    enum XlEndStyleCap GetEndStyle ( );
    void PutEndStyle (
        enum XlEndStyleCap _arg1 );
};

struct __declspec(uuid("00020843-0000-0000-c000-000000000046"))
DataTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetHasBorderHorizontal,put=PutHasBorderHorizontal))
    VARIANT_BOOL HasBorderHorizontal;
    __declspec(property(get=GetHasBorderVertical,put=PutHasBorderVertical))
    VARIANT_BOOL HasBorderVertical;
    __declspec(property(get=GetHasBorderOutline,put=PutHasBorderOutline))
    VARIANT_BOOL HasBorderOutline;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderHorizontal ( );
    void PutHasBorderHorizontal (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderVertical ( );
    void PutHasBorderVertical (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderOutline ( );
    void PutHasBorderOutline (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    FontPtr GetFont ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024438-0000-0000-c000-000000000046"))
Phonetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetCharacterType ( );
    void PutCharacterType (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
    FontPtr GetFont ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00024439-0000-0000-c000-000000000046"))
Shape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum XlPlacement Placement;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetDrawingObject))
    IDispatchPtr DrawingObject;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetControlFormat))
    ControlFormatPtr ControlFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetFormControlType))
    enum XlFormControl FormControlType;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetID))
    long ID;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType _arg1 );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float _arg1 );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float _arg1 );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float _arg1 );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
    long GetZOrderPosition ( );
    HyperlinkPtr GetHyperlink ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode _arg1 );
    IDispatchPtr GetDrawingObject ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    RangePtr GetTopLeftCell ( );
    RangePtr GetBottomRightCell ( );
    enum XlPlacement GetPlacement ( );
    void PutPlacement (
        enum XlPlacement _arg1 );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT CopyPicture (
        const _variant_t & Appearance = vtMissing,
        const _variant_t & Format = vtMissing );
    ControlFormatPtr GetControlFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    OLEFormatPtr GetOLEFormat ( );
    enum XlFormControl GetFormControlType ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t _arg1 );
    Office::ScriptPtr GetScript ( );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
};

struct __declspec(uuid("0002443a-0000-0000-c000-000000000046"))
Shapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t Filename,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr AddFormControl (
        enum XlFormControl Type,
        long Left,
        long Top,
        long Width,
        long Height );
    ShapePtr AddOLEObject (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    ShapePtr AddDiagram (
        enum Office::MsoDiagramType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddCanvas (
        float Left,
        float Top,
        float Width,
        float Height );
};

struct __declspec(uuid("0002443b-0000-0000-c000-000000000046"))
ShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    ShapePtr Regroup ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType _arg1 );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float _arg1 );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float _arg1 );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float _arg1 );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
    long GetZOrderPosition ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode _arg1 );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t _arg1 );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
};

struct __declspec(uuid("0002443c-0000-0000-c000-000000000046"))
GroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
};

struct __declspec(uuid("0002443d-0000-0000-c000-000000000046"))
TextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetAutoMargins,put=PutAutoMargins))
    VARIANT_BOOL AutoMargins;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float _arg1 );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float _arg1 );
    float GetMarginRight ( );
    void PutMarginRight (
        float _arg1 );
    float GetMarginTop ( );
    void PutMarginTop (
        float _arg1 );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation _arg1 );
    CharactersPtr Characters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign _arg1 );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    VARIANT_BOOL GetAutoMargins ( );
    void PutAutoMargins (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002443e-0000-0000-c000-000000000046"))
ConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    long EndConnectionSite;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    long BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT EndDisconnect ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    long GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    long GetEndConnectionSite ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType _arg1 );
};

struct __declspec(uuid("0002443f-0000-0000-c000-000000000046"))
FreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        const _variant_t & X2 = vtMissing,
        const _variant_t & Y2 = vtMissing,
        const _variant_t & X3 = vtMissing,
        const _variant_t & Y3 = vtMissing );
    ShapePtr ConvertToShape ( );
};

struct __declspec(uuid("00024440-0000-0000-c000-000000000046"))
ControlFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListCount,put=PutListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddItem (
        _bstr_t Text,
        const _variant_t & Index = vtMissing );
    HRESULT RemoveAllItems ( );
    HRESULT RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    long GetListCount ( );
    void PutListCount (
        long _arg1 );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("00024441-0000-0000-c000-000000000046"))
OLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetprogID ( );
    HRESULT Verb (
        const _variant_t & Verb = vtMissing );
};

struct __declspec(uuid("00024442-0000-0000-c000-000000000046"))
LinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    HRESULT Update ( );
};

struct __declspec(uuid("00024443-0000-0000-c000-000000000046"))
PublishObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PublishObjectPtr _Default[];
    __declspec(property(get=GetItem))
    PublishObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Add (
        enum XlSourceType SourceType,
        _bstr_t Filename,
        const _variant_t & Sheet = vtMissing,
        const _variant_t & Source = vtMissing,
        const _variant_t & HtmlType = vtMissing,
        const _variant_t & DivID = vtMissing,
        const _variant_t & Title = vtMissing );
    long GetCount ( );
    PublishObjectPtr GetItem (
        const _variant_t & Index );
    PublishObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
    HRESULT Publish ( );
};

struct __declspec(uuid("00024445-0000-0000-c000-000000000046"))
OLEDBError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetNative))
    long Native;
    __declspec(property(get=GetStage))
    long Stage;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
    long GetNative ( );
    long GetNumber ( );
    long GetStage ( );
};

struct __declspec(uuid("00024446-0000-0000-c000-000000000046"))
OLEDBErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    OLEDBErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    OLEDBErrorPtr Item (
        long Index );
    OLEDBErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024447-0000-0000-c000-000000000046"))
Phonetics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetStart ( );
    long GetLength ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetCharacterType ( );
    void PutCharacterType (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
    FontPtr GetFont ( );
    IDispatchPtr GetItem (
        long Index );
    HRESULT Delete ( );
    HRESULT Add (
        long Start,
        long Length,
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    IDispatchPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002444a-0000-0000-c000-000000000046"))
PivotLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotFields))
    IDispatchPtr PivotFields[];
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotCache))
    PivotCachePtr PivotCache;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPivotFields (
        const _variant_t & Index = vtMissing );
    CubeFieldsPtr GetCubeFields ( );
    PivotCachePtr GetPivotCache ( );
    PivotTablePtr GetPivotTable ( );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t _arg1 );
    HRESULT AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AppendField = vtMissing );
};

struct __declspec(uuid("0002084c-0000-0000-c000-000000000046"))
DisplayUnitLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024450-0000-0000-c000-000000000046"))
CellFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior,put=PutRefInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetBorders,put=PutRefBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BordersPtr GetBorders ( );
    void PutRefBorders (
        struct Borders * _arg1 );
    FontPtr GetFont ( );
    void PutRefFont (
        struct Font * _arg1 );
    InteriorPtr GetInterior ( );
    void PutRefInterior (
        struct Interior * _arg1 );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & _arg1 );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & _arg1 );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & _arg1 );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & _arg1 );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & _arg1 );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    HRESULT Clear ( );
};

struct __declspec(uuid("00024451-0000-0000-c000-000000000046"))
UsedObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
};

struct __declspec(uuid("00024452-0000-0000-c000-000000000046"))
CustomProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomPropertyPtr _Default[];
    __declspec(property(get=GetItem))
    CustomPropertyPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    CustomPropertyPtr Add (
        _bstr_t Name,
        const _variant_t & Value );
    long GetCount ( );
    CustomPropertyPtr Get_Default (
        const _variant_t & Index );
    CustomPropertyPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024453-0000-0000-c000-000000000046"))
CustomProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _variant_t _Default;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    _variant_t Get_Default ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024454-0000-0000-c000-000000000046"))
CalculatedMembers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CalculatedMemberPtr _Default[];
    __declspec(property(get=GetItem))
    CalculatedMemberPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CalculatedMemberPtr GetItem (
        const _variant_t & Index );
    CalculatedMemberPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CalculatedMemberPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & SolveOrder = vtMissing,
        const _variant_t & Type = vtMissing );
};

struct __declspec(uuid("00024455-0000-0000-c000-000000000046"))
CalculatedMember : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFormula))
    _bstr_t Formula;
    __declspec(property(get=GetSolveOrder))
    long SolveOrder;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetType))
    enum XlCalculatedMemberType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetFormula ( );
    _bstr_t GetSourceName ( );
    long GetSolveOrder ( );
    VARIANT_BOOL GetIsValid ( );
    _bstr_t Get_Default ( );
    HRESULT Delete ( );
    enum XlCalculatedMemberType GetType ( );
};

struct __declspec(uuid("00024456-0000-0000-c000-000000000046"))
Watches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WatchPtr _Default[];
    __declspec(property(get=GetItem))
    WatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    WatchPtr Add (
        const _variant_t & Source );
    long GetCount ( );
    WatchPtr Get_Default (
        const _variant_t & Index );
    WatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024457-0000-0000-c000-000000000046"))
Watch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSource))
    _variant_t Source;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _variant_t GetSource ( );
};

struct __declspec(uuid("00024458-0000-0000-c000-000000000046"))
PivotCell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetDataField))
    PivotFieldPtr DataField;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotCellType))
    enum XlPivotCellType PivotCellType;
    __declspec(property(get=GetRowItems))
    PivotItemListPtr RowItems;
    __declspec(property(get=GetColumnItems))
    PivotItemListPtr ColumnItems;
    __declspec(property(get=GetDummy18))
    _bstr_t Dummy18;
    __declspec(property(get=GetCustomSubtotalFunction))
    enum XlConsolidationFunction CustomSubtotalFunction;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotCellType GetPivotCellType ( );
    PivotTablePtr GetPivotTable ( );
    PivotFieldPtr GetDataField ( );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotItemListPtr GetRowItems ( );
    PivotItemListPtr GetColumnItems ( );
    RangePtr GetRange ( );
    _bstr_t GetDummy18 ( );
    enum XlConsolidationFunction GetCustomSubtotalFunction ( );
};

struct __declspec(uuid("00024459-0000-0000-c000-000000000046"))
Graphic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetBrightness ( );
    void PutBrightness (
        float _arg1 );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType _arg1 );
    float GetContrast ( );
    void PutContrast (
        float _arg1 );
    float GetCropBottom ( );
    void PutCropBottom (
        float _arg1 );
    float GetCropLeft ( );
    void PutCropLeft (
        float _arg1 );
    float GetCropRight ( );
    void PutCropRight (
        float _arg1 );
    float GetCropTop ( );
    void PutCropTop (
        float _arg1 );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t _arg1 );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
};

struct __declspec(uuid("0002445a-0000-0000-c000-000000000046"))
AutoRecover : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetTime,put=PutTime))
    long Time;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetTime ( );
    void PutTime (
        long _arg1 );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002445b-0000-0000-c000-000000000046"))
ErrorCheckingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUnlockedFormulaCells,put=PutUnlockedFormulaCells))
    VARIANT_BOOL UnlockedFormulaCells;
    __declspec(property(get=GetEmptyCellReferences,put=PutEmptyCellReferences))
    VARIANT_BOOL EmptyCellReferences;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackgroundChecking,put=PutBackgroundChecking))
    VARIANT_BOOL BackgroundChecking;
    __declspec(property(get=GetIndicatorColorIndex,put=PutIndicatorColorIndex))
    enum XlColorIndex IndicatorColorIndex;
    __declspec(property(get=GetEvaluateToError,put=PutEvaluateToError))
    VARIANT_BOOL EvaluateToError;
    __declspec(property(get=GetTextDate,put=PutTextDate))
    VARIANT_BOOL TextDate;
    __declspec(property(get=GetNumberAsText,put=PutNumberAsText))
    VARIANT_BOOL NumberAsText;
    __declspec(property(get=GetInconsistentFormula,put=PutInconsistentFormula))
    VARIANT_BOOL InconsistentFormula;
    __declspec(property(get=GetOmittedCells,put=PutOmittedCells))
    VARIANT_BOOL OmittedCells;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundChecking ( );
    void PutBackgroundChecking (
        VARIANT_BOOL _arg1 );
    enum XlColorIndex GetIndicatorColorIndex ( );
    void PutIndicatorColorIndex (
        enum XlColorIndex _arg1 );
    VARIANT_BOOL GetEvaluateToError ( );
    void PutEvaluateToError (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextDate ( );
    void PutTextDate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetNumberAsText ( );
    void PutNumberAsText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInconsistentFormula ( );
    void PutInconsistentFormula (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOmittedCells ( );
    void PutOmittedCells (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUnlockedFormulaCells ( );
    void PutUnlockedFormulaCells (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEmptyCellReferences ( );
    void PutEmptyCellReferences (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002445c-0000-0000-c000-000000000046"))
Errors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ErrorPtr _Default[];
    __declspec(property(get=GetItem))
    ErrorPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ErrorPtr GetItem (
        const _variant_t & Index );
    ErrorPtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("0002445d-0000-0000-c000-000000000046"))
Error : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIgnore,put=PutIgnore))
    VARIANT_BOOL Ignore;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetValue ( );
    VARIANT_BOOL GetIgnore ( );
    void PutIgnore (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002445e-0000-0000-c000-000000000046"))
SmartTagAction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    HRESULT Execute ( );
    _bstr_t Get_Default ( );
};

struct __declspec(uuid("0002445f-0000-0000-c000-000000000046"))
SmartTagActions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagActionPtr _Default[];
    __declspec(property(get=GetItem))
    SmartTagActionPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagActionPtr Get_Default (
        const _variant_t & Index );
    SmartTagActionPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024460-0000-0000-c000-000000000046"))
SmartTag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetDownloadURL))
    _bstr_t DownloadURL;
    __declspec(property(get=GetXML))
    _bstr_t XML;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetSmartTagActions))
    SmartTagActionsPtr SmartTagActions;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProperties))
    CustomPropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetDownloadURL ( );
    _bstr_t GetName ( );
    _bstr_t Get_Default ( );
    _bstr_t GetXML ( );
    RangePtr GetRange ( );
    HRESULT Delete ( );
    SmartTagActionsPtr GetSmartTagActions ( );
    CustomPropertiesPtr GetProperties ( );
};

struct __declspec(uuid("00024461-0000-0000-c000-000000000046"))
SmartTags : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SmartTagPtr Add (
        _bstr_t SmartTagType );
    long GetCount ( );
    SmartTagPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024462-0000-0000-c000-000000000046"))
SmartTagRecognizer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    _bstr_t GetprogID ( );
    _bstr_t Get_Default ( );
    _bstr_t GetFullName ( );
};

struct __declspec(uuid("00024463-0000-0000-c000-000000000046"))
SmartTagRecognizers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagRecognizerPtr _Default[];
    __declspec(property(get=GetRecognize,put=PutRecognize))
    VARIANT_BOOL Recognize;
    __declspec(property(get=GetItem))
    SmartTagRecognizerPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagRecognizerPtr GetItem (
        const _variant_t & Index );
    SmartTagRecognizerPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL GetRecognize ( );
    void PutRecognize (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00024464-0000-0000-c000-000000000046"))
SmartTagOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplaySmartTags,put=PutDisplaySmartTags))
    enum XlSmartTagDisplayMode DisplaySmartTags;
    __declspec(property(get=GetEmbedSmartTags,put=PutEmbedSmartTags))
    VARIANT_BOOL EmbedSmartTags;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlSmartTagDisplayMode GetDisplaySmartTags ( );
    void PutDisplaySmartTags (
        enum XlSmartTagDisplayMode _arg1 );
    VARIANT_BOOL GetEmbedSmartTags ( );
    void PutEmbedSmartTags (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00024465-0000-0000-c000-000000000046"))
SpellingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDictLang,put=PutDictLang))
    long DictLang;
    __declspec(property(get=GetUserDict,put=PutUserDict))
    _bstr_t UserDict;
    __declspec(property(get=GetIgnoreCaps,put=PutIgnoreCaps))
    VARIANT_BOOL IgnoreCaps;
    __declspec(property(get=GetSuggestMainOnly,put=PutSuggestMainOnly))
    VARIANT_BOOL SuggestMainOnly;
    __declspec(property(get=GetIgnoreMixedDigits,put=PutIgnoreMixedDigits))
    VARIANT_BOOL IgnoreMixedDigits;
    __declspec(property(get=GetIgnoreFileNames,put=PutIgnoreFileNames))
    VARIANT_BOOL IgnoreFileNames;
    __declspec(property(get=GetGermanPostReform,put=PutGermanPostReform))
    VARIANT_BOOL GermanPostReform;
    __declspec(property(get=GetKoreanCombineAux,put=PutKoreanCombineAux))
    VARIANT_BOOL KoreanCombineAux;
    __declspec(property(get=GetKoreanUseAutoChangeList,put=PutKoreanUseAutoChangeList))
    VARIANT_BOOL KoreanUseAutoChangeList;
    __declspec(property(get=GetKoreanProcessCompound,put=PutKoreanProcessCompound))
    VARIANT_BOOL KoreanProcessCompound;
    __declspec(property(get=GetHebrewModes,put=PutHebrewModes))
    enum XlHebrewModes HebrewModes;
    __declspec(property(get=GetArabicModes,put=PutArabicModes))
    enum XlArabicModes ArabicModes;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetDictLang ( );
    void PutDictLang (
        long _arg1 );
    _bstr_t GetUserDict ( );
    void PutUserDict (
        _bstr_t _arg1 );
    VARIANT_BOOL GetIgnoreCaps ( );
    void PutIgnoreCaps (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSuggestMainOnly ( );
    void PutSuggestMainOnly (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIgnoreMixedDigits ( );
    void PutIgnoreMixedDigits (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIgnoreFileNames ( );
    void PutIgnoreFileNames (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetGermanPostReform ( );
    void PutGermanPostReform (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetKoreanCombineAux ( );
    void PutKoreanCombineAux (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetKoreanUseAutoChangeList ( );
    void PutKoreanUseAutoChangeList (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetKoreanProcessCompound ( );
    void PutKoreanProcessCompound (
        VARIANT_BOOL _arg1 );
    enum XlHebrewModes GetHebrewModes ( );
    void PutHebrewModes (
        enum XlHebrewModes _arg1 );
    enum XlArabicModes GetArabicModes ( );
    void PutArabicModes (
        enum XlArabicModes _arg1 );
};

struct __declspec(uuid("00024466-0000-0000-c000-000000000046"))
Speech : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum XlSpeakDirection Direction;
    __declspec(property(get=GetSpeakCellOnEnter,put=PutSpeakCellOnEnter))
    VARIANT_BOOL SpeakCellOnEnter;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Speak (
        _bstr_t Text,
        const _variant_t & SpeakAsync = vtMissing,
        const _variant_t & SpeakXML = vtMissing,
        const _variant_t & Purge = vtMissing );
    enum XlSpeakDirection GetDirection ( );
    void PutDirection (
        enum XlSpeakDirection _arg1 );
    VARIANT_BOOL GetSpeakCellOnEnter ( );
    void PutSpeakCellOnEnter (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00024467-0000-0000-c000-000000000046"))
Protection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowFormattingCells))
    VARIANT_BOOL AllowFormattingCells;
    __declspec(property(get=GetAllowFormattingColumns))
    VARIANT_BOOL AllowFormattingColumns;
    __declspec(property(get=GetAllowFormattingRows))
    VARIANT_BOOL AllowFormattingRows;
    __declspec(property(get=GetAllowInsertingColumns))
    VARIANT_BOOL AllowInsertingColumns;
    __declspec(property(get=GetAllowInsertingRows))
    VARIANT_BOOL AllowInsertingRows;
    __declspec(property(get=GetAllowInsertingHyperlinks))
    VARIANT_BOOL AllowInsertingHyperlinks;
    __declspec(property(get=GetAllowDeletingColumns))
    VARIANT_BOOL AllowDeletingColumns;
    __declspec(property(get=GetAllowDeletingRows))
    VARIANT_BOOL AllowDeletingRows;
    __declspec(property(get=GetAllowSorting))
    VARIANT_BOOL AllowSorting;
    __declspec(property(get=GetAllowFiltering))
    VARIANT_BOOL AllowFiltering;
    __declspec(property(get=GetAllowUsingPivotTables))
    VARIANT_BOOL AllowUsingPivotTables;
    __declspec(property(get=GetAllowEditRanges))
    AllowEditRangesPtr AllowEditRanges;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAllowFormattingCells ( );
    VARIANT_BOOL GetAllowFormattingColumns ( );
    VARIANT_BOOL GetAllowFormattingRows ( );
    VARIANT_BOOL GetAllowInsertingColumns ( );
    VARIANT_BOOL GetAllowInsertingRows ( );
    VARIANT_BOOL GetAllowInsertingHyperlinks ( );
    VARIANT_BOOL GetAllowDeletingColumns ( );
    VARIANT_BOOL GetAllowDeletingRows ( );
    VARIANT_BOOL GetAllowSorting ( );
    VARIANT_BOOL GetAllowFiltering ( );
    VARIANT_BOOL GetAllowUsingPivotTables ( );
    AllowEditRangesPtr GetAllowEditRanges ( );
};

struct __declspec(uuid("00024468-0000-0000-c000-000000000046"))
PivotItemList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024469-0000-0000-c000-000000000046"))
Tab : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    enum XlColorIndex ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    enum XlColorIndex GetColorIndex ( );
    void PutColorIndex (
        enum XlColorIndex _arg1 );
};

struct __declspec(uuid("0002446a-0000-0000-c000-000000000046"))
AllowEditRanges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AllowEditRangePtr _Default[];
    __declspec(property(get=GetItem))
    AllowEditRangePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    AllowEditRangePtr GetItem (
        const _variant_t & Index );
    AllowEditRangePtr Add (
        _bstr_t Title,
        struct Range * Range,
        const _variant_t & Password = vtMissing );
    AllowEditRangePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002446b-0000-0000-c000-000000000046"))
AllowEditRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange,put=PutRefRange))
    RangePtr Range;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetUsers))
    UserAccessListPtr Users;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t _arg1 );
    RangePtr GetRange ( );
    void PutRefRange (
        struct Range * _arg1 );
    HRESULT ChangePassword (
        _bstr_t Password );
    HRESULT Delete ( );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    UserAccessListPtr GetUsers ( );
};

struct __declspec(uuid("0002446c-0000-0000-c000-000000000046"))
UserAccessList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    UserAccessPtr _Default[];
    __declspec(property(get=GetItem))
    UserAccessPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    UserAccessPtr GetItem (
        const _variant_t & Index );
    UserAccessPtr Add (
        _bstr_t Name,
        VARIANT_BOOL AllowEdit );
    HRESULT DeleteAll ( );
    UserAccessPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002446d-0000-0000-c000-000000000046"))
UserAccess : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowEdit,put=PutAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    VARIANT_BOOL GetAllowEdit ( );
    void PutAllowEdit (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
};

struct __declspec(uuid("0002446e-0000-0000-c000-000000000046"))
RTD : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetThrottleInterval,put=PutThrottleInterval))
    long ThrottleInterval;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetThrottleInterval ( );
    void PutThrottleInterval (
        long _arg1 );
    HRESULT RefreshData ( );
    HRESULT RestartServers ( );
};

struct __declspec(uuid("0002446f-0000-0000-c000-000000000046"))
Diagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNodes))
    DiagramNodesPtr Nodes;
    __declspec(property(get=GetType))
    enum Office::MsoDiagramType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DiagramNodesPtr GetNodes ( );
    enum Office::MsoDiagramType GetType ( );
    enum Office::MsoTriState GetAutoLayout ( );
    void PutAutoLayout (
        enum Office::MsoTriState _arg1 );
    enum Office::MsoTriState GetReverse ( );
    void PutReverse (
        enum Office::MsoTriState _arg1 );
    enum Office::MsoTriState GetAutoFormat ( );
    void PutAutoFormat (
        enum Office::MsoTriState _arg1 );
    HRESULT Convert (
        enum Office::MsoDiagramType Type );
};

struct __declspec(uuid("0002442e-0001-0000-c000-000000000046"))
IDummy : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT _ActiveSheetOrChart ( );
    HRESULT ignorethis ( );
    HRESULT ChDir ( );
    HRESULT DoScript ( );
    HRESULT DirectObject ( );
    HRESULT RefreshDocument ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw__ActiveSheetOrChart ( ) = 0;
    virtual HRESULT __stdcall raw_ignorethis ( ) = 0;
    virtual HRESULT __stdcall raw_ChDir ( ) = 0;
    virtual HRESULT __stdcall raw_DoScript ( ) = 0;
    virtual HRESULT __stdcall raw_DirectObject ( ) = 0;
    virtual HRESULT __stdcall raw_RefreshDocument ( ) = 0;
};

struct __declspec(uuid("0002444f-0001-0000-c000-000000000046"))
ICanvasShapes : IDispatch
{};

struct __declspec(uuid("59191da1-ea47-11ce-a51f-00aa0061507f"))
QueryTable;
    // [ default ] dispinterface _QueryTable
    // [ default, source ] dispinterface RefreshEvents

struct __declspec(uuid("00024500-0000-0000-c000-000000000046"))
Application;
    // [ default ] interface _Application
    // [ default, source ] dispinterface AppEvents

struct __declspec(uuid("00020821-0000-0000-c000-000000000046"))
Chart;
    // [ default ] interface _Chart
    // [ default, source ] dispinterface ChartEvents

struct __declspec(uuid("00020820-0000-0000-c000-000000000046"))
Worksheet;
    // [ default ] interface _Worksheet
    // [ default, source ] dispinterface DocEvents

struct __declspec(uuid("00020812-0000-0000-c000-000000000046"))
Global;
    // [ default ] interface _Global

struct __declspec(uuid("00020819-0000-0000-c000-000000000046"))
Workbook;
    // [ default ] interface _Workbook
    // [ default, source ] dispinterface WorkbookEvents

struct __declspec(uuid("00020818-0000-0000-c000-000000000046"))
OLEObject;
    // [ default ] dispinterface _OLEObject
    // [ default, source ] dispinterface OLEObjectEvents

//
// Function implementation mapping
//

#pragma start_map_region("e:\vcÖªÊ¶¿â\callcenter\xcenter\debug\excel.tli")
__declspec(implementation_key(1)) IDispatchPtr Adjustments::GetParent ( );
__declspec(implementation_key(2)) int Adjustments::GetCount ( );
__declspec(implementation_key(3)) float Adjustments::GetItem ( int Index );
__declspec(implementation_key(4)) void Adjustments::PutItem ( int Index, float Val );
__declspec(implementation_key(5)) IDispatchPtr CalloutFormat::GetParent ( );
__declspec(implementation_key(6)) HRESULT CalloutFormat::AutomaticLength ( );
__declspec(implementation_key(7)) HRESULT CalloutFormat::CustomDrop ( float Drop );
__declspec(implementation_key(8)) HRESULT CalloutFormat::CustomLength ( float Length );
__declspec(implementation_key(9)) HRESULT CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType );
__declspec(implementation_key(10)) enum Office::MsoTriState CalloutFormat::GetAccent ( );
__declspec(implementation_key(11)) void CalloutFormat::PutAccent ( enum Office::MsoTriState Accent );
__declspec(implementation_key(12)) enum Office::MsoCalloutAngleType CalloutFormat::GetAngle ( );
__declspec(implementation_key(13)) void CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType Angle );
__declspec(implementation_key(14)) enum Office::MsoTriState CalloutFormat::GetAutoAttach ( );
__declspec(implementation_key(15)) void CalloutFormat::PutAutoAttach ( enum Office::MsoTriState AutoAttach );
__declspec(implementation_key(16)) enum Office::MsoTriState CalloutFormat::GetAutoLength ( );
__declspec(implementation_key(17)) enum Office::MsoTriState CalloutFormat::GetBorder ( );
__declspec(implementation_key(18)) void CalloutFormat::PutBorder ( enum Office::MsoTriState Border );
__declspec(implementation_key(19)) float CalloutFormat::GetDrop ( );
__declspec(implementation_key(20)) enum Office::MsoCalloutDropType CalloutFormat::GetDropType ( );
__declspec(implementation_key(21)) float CalloutFormat::GetGap ( );
__declspec(implementation_key(22)) void CalloutFormat::PutGap ( float Gap );
__declspec(implementation_key(23)) float CalloutFormat::GetLength ( );
__declspec(implementation_key(24)) enum Office::MsoCalloutType CalloutFormat::GetType ( );
__declspec(implementation_key(25)) void CalloutFormat::PutType ( enum Office::MsoCalloutType Type );
__declspec(implementation_key(26)) IDispatchPtr ColorFormat::GetParent ( );
__declspec(implementation_key(27)) Office::MsoRGBType ColorFormat::Getignorethis ( );
__declspec(implementation_key(28)) void ColorFormat::Putignorethis ( Office::MsoRGBType ignorethis );
__declspec(implementation_key(29)) int ColorFormat::GetSchemeColor ( );
__declspec(implementation_key(30)) void ColorFormat::PutSchemeColor ( int SchemeColor );
__declspec(implementation_key(31)) enum Office::MsoColorType ColorFormat::GetType ( );
__declspec(implementation_key(32)) float ColorFormat::GetTintAndShade ( );
__declspec(implementation_key(33)) void ColorFormat::PutTintAndShade ( float pValue );
__declspec(implementation_key(34)) IDispatchPtr LineFormat::GetParent ( );
__declspec(implementation_key(35)) ColorFormatPtr LineFormat::GetBackColor ( );
__declspec(implementation_key(36)) void LineFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(37)) enum Office::MsoArrowheadLength LineFormat::GetBeginArrowheadLength ( );
__declspec(implementation_key(38)) void LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength BeginArrowheadLength );
__declspec(implementation_key(39)) enum Office::MsoArrowheadStyle LineFormat::GetBeginArrowheadStyle ( );
__declspec(implementation_key(40)) void LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle BeginArrowheadStyle );
__declspec(implementation_key(41)) enum Office::MsoArrowheadWidth LineFormat::GetBeginArrowheadWidth ( );
__declspec(implementation_key(42)) void LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth BeginArrowheadWidth );
__declspec(implementation_key(43)) enum Office::MsoLineDashStyle LineFormat::GetDashStyle ( );
__declspec(implementation_key(44)) void LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle DashStyle );
__declspec(implementation_key(45)) enum Office::MsoArrowheadLength LineFormat::GetEndArrowheadLength ( );
__declspec(implementation_key(46)) void LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength EndArrowheadLength );
__declspec(implementation_key(47)) enum Office::MsoArrowheadStyle LineFormat::GetEndArrowheadStyle ( );
__declspec(implementation_key(48)) void LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle EndArrowheadStyle );
__declspec(implementation_key(49)) enum Office::MsoArrowheadWidth LineFormat::GetEndArrowheadWidth ( );
__declspec(implementation_key(50)) void LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth EndArrowheadWidth );
__declspec(implementation_key(51)) ColorFormatPtr LineFormat::GetForeColor ( );
__declspec(implementation_key(52)) void LineFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(53)) enum Office::MsoPatternType LineFormat::GetPattern ( );
__declspec(implementation_key(54)) void LineFormat::PutPattern ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(55)) enum Office::MsoLineStyle LineFormat::GetStyle ( );
__declspec(implementation_key(56)) void LineFormat::PutStyle ( enum Office::MsoLineStyle Style );
__declspec(implementation_key(57)) float LineFormat::GetTransparency ( );
__declspec(implementation_key(58)) void LineFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(59)) enum Office::MsoTriState LineFormat::GetVisible ( );
__declspec(implementation_key(60)) void LineFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(61)) float LineFormat::GetWeight ( );
__declspec(implementation_key(62)) void LineFormat::PutWeight ( float Weight );
__declspec(implementation_key(63)) IDispatchPtr ShapeNode::GetParent ( );
__declspec(implementation_key(64)) enum Office::MsoEditingType ShapeNode::GetEditingType ( );
__declspec(implementation_key(65)) _variant_t ShapeNode::GetPoints ( );
__declspec(implementation_key(66)) enum Office::MsoSegmentType ShapeNode::GetSegmentType ( );
__declspec(implementation_key(67)) IDispatchPtr ShapeNodes::GetParent ( );
__declspec(implementation_key(68)) int ShapeNodes::GetCount ( );
__declspec(implementation_key(69)) ShapeNodePtr ShapeNodes::Item ( const _variant_t & Index );
__declspec(implementation_key(70)) IUnknownPtr ShapeNodes::Get_NewEnum ( );
__declspec(implementation_key(71)) HRESULT ShapeNodes::Delete ( int Index );
__declspec(implementation_key(72)) HRESULT ShapeNodes::Insert ( int Index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(73)) HRESULT ShapeNodes::SetEditingType ( int Index, enum Office::MsoEditingType EditingType );
__declspec(implementation_key(74)) HRESULT ShapeNodes::SetPosition ( int Index, float X1, float Y1 );
__declspec(implementation_key(75)) HRESULT ShapeNodes::SetSegmentType ( int Index, enum Office::MsoSegmentType SegmentType );
__declspec(implementation_key(76)) IDispatchPtr PictureFormat::GetParent ( );
__declspec(implementation_key(77)) HRESULT PictureFormat::IncrementBrightness ( float Increment );
__declspec(implementation_key(78)) HRESULT PictureFormat::IncrementContrast ( float Increment );
__declspec(implementation_key(79)) float PictureFormat::GetBrightness ( );
__declspec(implementation_key(80)) void PictureFormat::PutBrightness ( float Brightness );
__declspec(implementation_key(81)) enum Office::MsoPictureColorType PictureFormat::GetColorType ( );
__declspec(implementation_key(82)) void PictureFormat::PutColorType ( enum Office::MsoPictureColorType ColorType );
__declspec(implementation_key(83)) float PictureFormat::GetContrast ( );
__declspec(implementation_key(84)) void PictureFormat::PutContrast ( float Contrast );
__declspec(implementation_key(85)) float PictureFormat::GetCropBottom ( );
__declspec(implementation_key(86)) void PictureFormat::PutCropBottom ( float CropBottom );
__declspec(implementation_key(87)) float PictureFormat::GetCropLeft ( );
__declspec(implementation_key(88)) void PictureFormat::PutCropLeft ( float CropLeft );
__declspec(implementation_key(89)) float PictureFormat::GetCropRight ( );
__declspec(implementation_key(90)) void PictureFormat::PutCropRight ( float CropRight );
__declspec(implementation_key(91)) float PictureFormat::GetCropTop ( );
__declspec(implementation_key(92)) void PictureFormat::PutCropTop ( float CropTop );
__declspec(implementation_key(93)) Office::MsoRGBType PictureFormat::GetTransparencyColor ( );
__declspec(implementation_key(94)) void PictureFormat::PutTransparencyColor ( Office::MsoRGBType TransparencyColor );
__declspec(implementation_key(95)) enum Office::MsoTriState PictureFormat::GetTransparentBackground ( );
__declspec(implementation_key(96)) void PictureFormat::PutTransparentBackground ( enum Office::MsoTriState TransparentBackground );
__declspec(implementation_key(97)) IDispatchPtr ShadowFormat::GetParent ( );
__declspec(implementation_key(98)) HRESULT ShadowFormat::IncrementOffsetX ( float Increment );
__declspec(implementation_key(99)) HRESULT ShadowFormat::IncrementOffsetY ( float Increment );
__declspec(implementation_key(100)) ColorFormatPtr ShadowFormat::GetForeColor ( );
__declspec(implementation_key(101)) void ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(102)) enum Office::MsoTriState ShadowFormat::GetObscured ( );
__declspec(implementation_key(103)) void ShadowFormat::PutObscured ( enum Office::MsoTriState Obscured );
__declspec(implementation_key(104)) float ShadowFormat::GetOffsetX ( );
__declspec(implementation_key(105)) void ShadowFormat::PutOffsetX ( float OffsetX );
__declspec(implementation_key(106)) float ShadowFormat::GetOffsetY ( );
__declspec(implementation_key(107)) void ShadowFormat::PutOffsetY ( float OffsetY );
__declspec(implementation_key(108)) float ShadowFormat::GetTransparency ( );
__declspec(implementation_key(109)) void ShadowFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(110)) enum Office::MsoShadowType ShadowFormat::GetType ( );
__declspec(implementation_key(111)) void ShadowFormat::PutType ( enum Office::MsoShadowType Type );
__declspec(implementation_key(112)) enum Office::MsoTriState ShadowFormat::GetVisible ( );
__declspec(implementation_key(113)) void ShadowFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(114)) IDispatchPtr TextEffectFormat::GetParent ( );
__declspec(implementation_key(115)) HRESULT TextEffectFormat::ToggleVerticalText ( );
__declspec(implementation_key(116)) enum Office::MsoTextEffectAlignment TextEffectFormat::GetAlignment ( );
__declspec(implementation_key(117)) void TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment Alignment );
__declspec(implementation_key(118)) enum Office::MsoTriState TextEffectFormat::GetFontBold ( );
__declspec(implementation_key(119)) void TextEffectFormat::PutFontBold ( enum Office::MsoTriState FontBold );
__declspec(implementation_key(120)) enum Office::MsoTriState TextEffectFormat::GetFontItalic ( );
__declspec(implementation_key(121)) void TextEffectFormat::PutFontItalic ( enum Office::MsoTriState FontItalic );
__declspec(implementation_key(122)) _bstr_t TextEffectFormat::GetFontName ( );
__declspec(implementation_key(123)) void TextEffectFormat::PutFontName ( _bstr_t FontName );
__declspec(implementation_key(124)) float TextEffectFormat::GetFontSize ( );
__declspec(implementation_key(125)) void TextEffectFormat::PutFontSize ( float FontSize );
__declspec(implementation_key(126)) enum Office::MsoTriState TextEffectFormat::GetKernedPairs ( );
__declspec(implementation_key(127)) void TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState KernedPairs );
__declspec(implementation_key(128)) enum Office::MsoTriState TextEffectFormat::GetNormalizedHeight ( );
__declspec(implementation_key(129)) void TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState NormalizedHeight );
__declspec(implementation_key(130)) enum Office::MsoPresetTextEffectShape TextEffectFormat::GetPresetShape ( );
__declspec(implementation_key(131)) void TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape PresetShape );
__declspec(implementation_key(132)) enum Office::MsoPresetTextEffect TextEffectFormat::GetPresetTextEffect ( );
__declspec(implementation_key(133)) void TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect Preset );
__declspec(implementation_key(134)) enum Office::MsoTriState TextEffectFormat::GetRotatedChars ( );
__declspec(implementation_key(135)) void TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState RotatedChars );
__declspec(implementation_key(136)) _bstr_t TextEffectFormat::GetText ( );
__declspec(implementation_key(137)) void TextEffectFormat::PutText ( _bstr_t Text );
__declspec(implementation_key(138)) float TextEffectFormat::GetTracking ( );
__declspec(implementation_key(139)) void TextEffectFormat::PutTracking ( float Tracking );
__declspec(implementation_key(140)) IDispatchPtr ThreeDFormat::GetParent ( );
__declspec(implementation_key(141)) HRESULT ThreeDFormat::IncrementRotationX ( float Increment );
__declspec(implementation_key(142)) HRESULT ThreeDFormat::IncrementRotationY ( float Increment );
__declspec(implementation_key(143)) HRESULT ThreeDFormat::ResetRotation ( );
__declspec(implementation_key(144)) HRESULT ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
__declspec(implementation_key(145)) HRESULT ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
__declspec(implementation_key(146)) float ThreeDFormat::GetDepth ( );
__declspec(implementation_key(147)) void ThreeDFormat::PutDepth ( float Depth );
__declspec(implementation_key(148)) ColorFormatPtr ThreeDFormat::GetExtrusionColor ( );
__declspec(implementation_key(149)) enum Office::MsoExtrusionColorType ThreeDFormat::GetExtrusionColorType ( );
__declspec(implementation_key(150)) void ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType ExtrusionColorType );
__declspec(implementation_key(151)) enum Office::MsoTriState ThreeDFormat::GetPerspective ( );
__declspec(implementation_key(152)) void ThreeDFormat::PutPerspective ( enum Office::MsoTriState Perspective );
__declspec(implementation_key(153)) enum Office::MsoPresetExtrusionDirection ThreeDFormat::GetPresetExtrusionDirection ( );
__declspec(implementation_key(154)) enum Office::MsoPresetLightingDirection ThreeDFormat::GetPresetLightingDirection ( );
__declspec(implementation_key(155)) void ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection PresetLightingDirection );
__declspec(implementation_key(156)) enum Office::MsoPresetLightingSoftness ThreeDFormat::GetPresetLightingSoftness ( );
__declspec(implementation_key(157)) void ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness PresetLightingSoftness );
__declspec(implementation_key(158)) enum Office::MsoPresetMaterial ThreeDFormat::GetPresetMaterial ( );
__declspec(implementation_key(159)) void ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial PresetMaterial );
__declspec(implementation_key(160)) enum Office::MsoPresetThreeDFormat ThreeDFormat::GetPresetThreeDFormat ( );
__declspec(implementation_key(161)) float ThreeDFormat::GetRotationX ( );
__declspec(implementation_key(162)) void ThreeDFormat::PutRotationX ( float RotationX );
__declspec(implementation_key(163)) float ThreeDFormat::GetRotationY ( );
__declspec(implementation_key(164)) void ThreeDFormat::PutRotationY ( float RotationY );
__declspec(implementation_key(165)) enum Office::MsoTriState ThreeDFormat::GetVisible ( );
__declspec(implementation_key(166)) void ThreeDFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(167)) IDispatchPtr FillFormat::GetParent ( );
__declspec(implementation_key(168)) HRESULT FillFormat::Background ( );
__declspec(implementation_key(169)) HRESULT FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, int Variant, float Degree );
__declspec(implementation_key(170)) HRESULT FillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(171)) HRESULT FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, int Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(172)) HRESULT FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(173)) HRESULT FillFormat::Solid ( );
__declspec(implementation_key(174)) HRESULT FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, int Variant );
__declspec(implementation_key(175)) HRESULT FillFormat::UserPicture ( _bstr_t PictureFile );
__declspec(implementation_key(176)) HRESULT FillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(177)) ColorFormatPtr FillFormat::GetBackColor ( );
__declspec(implementation_key(178)) void FillFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(179)) ColorFormatPtr FillFormat::GetForeColor ( );
__declspec(implementation_key(180)) void FillFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(181)) enum Office::MsoGradientColorType FillFormat::GetGradientColorType ( );
__declspec(implementation_key(182)) float FillFormat::GetGradientDegree ( );
__declspec(implementation_key(183)) enum Office::MsoGradientStyle FillFormat::GetGradientStyle ( );
__declspec(implementation_key(184)) int FillFormat::GetGradientVariant ( );
__declspec(implementation_key(185)) enum Office::MsoPatternType FillFormat::GetPattern ( );
__declspec(implementation_key(186)) enum Office::MsoPresetGradientType FillFormat::GetPresetGradientType ( );
__declspec(implementation_key(187)) enum Office::MsoPresetTexture FillFormat::GetPresetTexture ( );
__declspec(implementation_key(188)) _bstr_t FillFormat::GetTextureName ( );
__declspec(implementation_key(189)) enum Office::MsoTextureType FillFormat::GetTextureType ( );
__declspec(implementation_key(190)) float FillFormat::GetTransparency ( );
__declspec(implementation_key(191)) void FillFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(192)) enum Office::MsoFillType FillFormat::GetType ( );
__declspec(implementation_key(193)) enum Office::MsoTriState FillFormat::GetVisible ( );
__declspec(implementation_key(194)) void FillFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(195)) IUnknownPtr DiagramNodes::Get_NewEnum ( );
__declspec(implementation_key(196)) DiagramNodePtr DiagramNodes::Item ( const _variant_t & Index );
__declspec(implementation_key(197)) HRESULT DiagramNodes::SelectAll ( );
__declspec(implementation_key(198)) IDispatchPtr DiagramNodes::GetParent ( );
__declspec(implementation_key(199)) int DiagramNodes::GetCount ( );
__declspec(implementation_key(200)) IUnknownPtr DiagramNodeChildren::Get_NewEnum ( );
__declspec(implementation_key(201)) DiagramNodePtr DiagramNodeChildren::Item ( const _variant_t & Index );
__declspec(implementation_key(202)) DiagramNodePtr DiagramNodeChildren::AddNode ( const _variant_t & Index, enum Office::MsoDiagramNodeType nodeType );
__declspec(implementation_key(203)) HRESULT DiagramNodeChildren::SelectAll ( );
__declspec(implementation_key(204)) IDispatchPtr DiagramNodeChildren::GetParent ( );
__declspec(implementation_key(205)) int DiagramNodeChildren::GetCount ( );
__declspec(implementation_key(206)) DiagramNodePtr DiagramNodeChildren::GetFirstChild ( );
__declspec(implementation_key(207)) DiagramNodePtr DiagramNodeChildren::GetLastChild ( );
__declspec(implementation_key(208)) DiagramNodePtr DiagramNode::AddNode ( enum Office::MsoRelativeNodePosition pos, enum Office::MsoDiagramNodeType nodeType );
__declspec(implementation_key(209)) HRESULT DiagramNode::Delete ( );
__declspec(implementation_key(210)) HRESULT DiagramNode::MoveNode ( struct DiagramNode * pTargetNode, enum Office::MsoRelativeNodePosition pos );
__declspec(implementation_key(211)) HRESULT DiagramNode::ReplaceNode ( struct DiagramNode * pTargetNode );
__declspec(implementation_key(212)) HRESULT DiagramNode::SwapNode ( struct DiagramNode * pTargetNode, VARIANT_BOOL swapChildren );
__declspec(implementation_key(213)) DiagramNodePtr DiagramNode::CloneNode ( VARIANT_BOOL copyChildren, struct DiagramNode * pTargetNode, enum Office::MsoRelativeNodePosition pos );
__declspec(implementation_key(214)) HRESULT DiagramNode::TransferChildren ( struct DiagramNode * pReceivingNode );
__declspec(implementation_key(215)) DiagramNodePtr DiagramNode::NextNode ( );
__declspec(implementation_key(216)) DiagramNodePtr DiagramNode::PrevNode ( );
__declspec(implementation_key(217)) IDispatchPtr DiagramNode::GetParent ( );
__declspec(implementation_key(218)) DiagramNodeChildrenPtr DiagramNode::GetChildren ( );
__declspec(implementation_key(219)) ShapePtr DiagramNode::GetShape ( );
__declspec(implementation_key(220)) DiagramNodePtr DiagramNode::GetRoot ( );
__declspec(implementation_key(221)) Office::IMsoDiagramPtr DiagramNode::GetDiagram ( );
__declspec(implementation_key(222)) enum Office::MsoOrgChartLayoutType DiagramNode::GetLayout ( );
__declspec(implementation_key(223)) void DiagramNode::PutLayout ( enum Office::MsoOrgChartLayoutType pdgmType );
__declspec(implementation_key(224)) ShapePtr DiagramNode::GetTextShape ( );
__declspec(implementation_key(225)) HRESULT IRTDUpdateEvent::UpdateNotify ( );
__declspec(implementation_key(226)) long IRTDUpdateEvent::GetHeartbeatInterval ( );
__declspec(implementation_key(227)) void IRTDUpdateEvent::PutHeartbeatInterval ( long plRetVal );
__declspec(implementation_key(228)) HRESULT IRTDUpdateEvent::Disconnect ( );
__declspec(implementation_key(229)) long IRtdServer::ServerStart ( struct IRTDUpdateEvent * CallbackObject );
__declspec(implementation_key(230)) _variant_t IRtdServer::ConnectData ( long TopicID, SAFEARRAY * * Strings, VARIANT_BOOL * GetNewValues );
__declspec(implementation_key(231)) SAFEARRAY * IRtdServer::RefreshData ( long * TopicCount );
__declspec(implementation_key(232)) HRESULT IRtdServer::DisconnectData ( long TopicID );
__declspec(implementation_key(233)) long IRtdServer::Heartbeat ( );
__declspec(implementation_key(234)) HRESULT IRtdServer::ServerTerminate ( );
__declspec(implementation_key(235)) _ApplicationPtr IWindow::GetApplication ( );
__declspec(implementation_key(236)) enum XlCreator IWindow::GetCreator ( );
__declspec(implementation_key(237)) IDispatchPtr IWindow::GetParent ( );
__declspec(implementation_key(238)) _variant_t IWindow::Activate ( );
__declspec(implementation_key(239)) _variant_t IWindow::ActivateNext ( );
__declspec(implementation_key(240)) _variant_t IWindow::ActivatePrevious ( );
__declspec(implementation_key(241)) RangePtr IWindow::GetActiveCell ( );
__declspec(implementation_key(242)) _ChartPtr IWindow::GetActiveChart ( );
__declspec(implementation_key(243)) PanePtr IWindow::GetActivePane ( );
__declspec(implementation_key(244)) IDispatchPtr IWindow::GetActiveSheet ( );
__declspec(implementation_key(245)) _variant_t IWindow::GetCaption ( );
__declspec(implementation_key(246)) void IWindow::PutCaption ( const _variant_t & RHS );
__declspec(implementation_key(247)) VARIANT_BOOL IWindow::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook );
__declspec(implementation_key(248)) VARIANT_BOOL IWindow::GetDisplayFormulas ( );
__declspec(implementation_key(249)) void IWindow::PutDisplayFormulas ( VARIANT_BOOL RHS );
__declspec(implementation_key(250)) VARIANT_BOOL IWindow::GetDisplayGridlines ( );
__declspec(implementation_key(251)) void IWindow::PutDisplayGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(252)) VARIANT_BOOL IWindow::GetDisplayHeadings ( );
__declspec(implementation_key(253)) void IWindow::PutDisplayHeadings ( VARIANT_BOOL RHS );
__declspec(implementation_key(254)) VARIANT_BOOL IWindow::GetDisplayHorizontalScrollBar ( );
__declspec(implementation_key(255)) void IWindow::PutDisplayHorizontalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(256)) VARIANT_BOOL IWindow::GetDisplayOutline ( );
__declspec(implementation_key(257)) void IWindow::PutDisplayOutline ( VARIANT_BOOL RHS );
__declspec(implementation_key(258)) VARIANT_BOOL IWindow::Get_DisplayRightToLeft ( );
__declspec(implementation_key(259)) void IWindow::Put_DisplayRightToLeft ( VARIANT_BOOL RHS );
__declspec(implementation_key(260)) VARIANT_BOOL IWindow::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(261)) void IWindow::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(262)) VARIANT_BOOL IWindow::GetDisplayWorkbookTabs ( );
__declspec(implementation_key(263)) void IWindow::PutDisplayWorkbookTabs ( VARIANT_BOOL RHS );
__declspec(implementation_key(264)) VARIANT_BOOL IWindow::GetDisplayZeros ( );
__declspec(implementation_key(265)) void IWindow::PutDisplayZeros ( VARIANT_BOOL RHS );
__declspec(implementation_key(266)) VARIANT_BOOL IWindow::GetEnableResize ( );
__declspec(implementation_key(267)) void IWindow::PutEnableResize ( VARIANT_BOOL RHS );
__declspec(implementation_key(268)) VARIANT_BOOL IWindow::GetFreezePanes ( );
__declspec(implementation_key(269)) void IWindow::PutFreezePanes ( VARIANT_BOOL RHS );
__declspec(implementation_key(270)) long IWindow::GetGridlineColor ( );
__declspec(implementation_key(271)) void IWindow::PutGridlineColor ( long RHS );
__declspec(implementation_key(272)) enum XlColorIndex IWindow::GetGridlineColorIndex ( );
__declspec(implementation_key(273)) void IWindow::PutGridlineColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(274)) double IWindow::GetHeight ( );
__declspec(implementation_key(275)) void IWindow::PutHeight ( double RHS );
__declspec(implementation_key(276)) long IWindow::GetIndex ( );
__declspec(implementation_key(277)) _variant_t IWindow::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(278)) double IWindow::GetLeft ( );
__declspec(implementation_key(279)) void IWindow::PutLeft ( double RHS );
__declspec(implementation_key(280)) WindowPtr IWindow::NewWindow ( );
__declspec(implementation_key(281)) _bstr_t IWindow::GetOnWindow ( );
__declspec(implementation_key(282)) void IWindow::PutOnWindow ( _bstr_t RHS );
__declspec(implementation_key(283)) PanesPtr IWindow::GetPanes ( );
__declspec(implementation_key(284)) _variant_t IWindow::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(285)) _variant_t IWindow::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(286)) RangePtr IWindow::GetRangeSelection ( );
__declspec(implementation_key(287)) long IWindow::GetScrollColumn ( );
__declspec(implementation_key(288)) void IWindow::PutScrollColumn ( long RHS );
__declspec(implementation_key(289)) long IWindow::GetScrollRow ( );
__declspec(implementation_key(290)) void IWindow::PutScrollRow ( long RHS );
__declspec(implementation_key(291)) _variant_t IWindow::ScrollWorkbookTabs ( const _variant_t & Sheets, const _variant_t & Position );
__declspec(implementation_key(292)) SheetsPtr IWindow::GetSelectedSheets ( );
__declspec(implementation_key(293)) IDispatchPtr IWindow::GetSelection ( );
__declspec(implementation_key(294)) _variant_t IWindow::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(295)) VARIANT_BOOL IWindow::GetSplit ( );
__declspec(implementation_key(296)) void IWindow::PutSplit ( VARIANT_BOOL RHS );
__declspec(implementation_key(297)) long IWindow::GetSplitColumn ( );
__declspec(implementation_key(298)) void IWindow::PutSplitColumn ( long RHS );
__declspec(implementation_key(299)) double IWindow::GetSplitHorizontal ( );
__declspec(implementation_key(300)) void IWindow::PutSplitHorizontal ( double RHS );
__declspec(implementation_key(301)) long IWindow::GetSplitRow ( );
__declspec(implementation_key(302)) void IWindow::PutSplitRow ( long RHS );
__declspec(implementation_key(303)) double IWindow::GetSplitVertical ( );
__declspec(implementation_key(304)) void IWindow::PutSplitVertical ( double RHS );
__declspec(implementation_key(305)) double IWindow::GetTabRatio ( );
__declspec(implementation_key(306)) void IWindow::PutTabRatio ( double RHS );
__declspec(implementation_key(307)) double IWindow::GetTop ( );
__declspec(implementation_key(308)) void IWindow::PutTop ( double RHS );
__declspec(implementation_key(309)) enum XlWindowType IWindow::GetType ( );
__declspec(implementation_key(310)) double IWindow::GetUsableHeight ( );
__declspec(implementation_key(311)) double IWindow::GetUsableWidth ( );
__declspec(implementation_key(312)) VARIANT_BOOL IWindow::GetVisible ( );
__declspec(implementation_key(313)) void IWindow::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(314)) RangePtr IWindow::GetVisibleRange ( );
__declspec(implementation_key(315)) double IWindow::GetWidth ( );
__declspec(implementation_key(316)) void IWindow::PutWidth ( double RHS );
__declspec(implementation_key(317)) long IWindow::GetWindowNumber ( );
__declspec(implementation_key(318)) enum XlWindowState IWindow::GetWindowState ( );
__declspec(implementation_key(319)) void IWindow::PutWindowState ( enum XlWindowState RHS );
__declspec(implementation_key(320)) _variant_t IWindow::GetZoom ( );
__declspec(implementation_key(321)) void IWindow::PutZoom ( const _variant_t & RHS );
__declspec(implementation_key(322)) enum XlWindowView IWindow::GetView ( );
__declspec(implementation_key(323)) void IWindow::PutView ( enum XlWindowView RHS );
__declspec(implementation_key(324)) VARIANT_BOOL IWindow::GetDisplayRightToLeft ( );
__declspec(implementation_key(325)) void IWindow::PutDisplayRightToLeft ( VARIANT_BOOL RHS );
__declspec(implementation_key(326)) long IWindow::PointsToScreenPixelsX ( long Points );
__declspec(implementation_key(327)) long IWindow::PointsToScreenPixelsY ( long Points );
__declspec(implementation_key(328)) IDispatchPtr IWindow::RangeFromPoint ( long x, long y );
__declspec(implementation_key(329)) HRESULT IWindow::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(330)) _ApplicationPtr IWindows::GetApplication ( );
__declspec(implementation_key(331)) enum XlCreator IWindows::GetCreator ( );
__declspec(implementation_key(332)) IDispatchPtr IWindows::GetParent ( );
__declspec(implementation_key(333)) _variant_t IWindows::Arrange ( enum XlArrangeStyle ArrangeStyle, const _variant_t & ActiveWorkbook, const _variant_t & SyncHorizontal, const _variant_t & SyncVertical );
__declspec(implementation_key(334)) long IWindows::GetCount ( );
__declspec(implementation_key(335)) WindowPtr IWindows::GetItem ( const _variant_t & Index );
__declspec(implementation_key(336)) IUnknownPtr IWindows::Get_NewEnum ( );
__declspec(implementation_key(337)) WindowPtr IWindows::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(338)) HRESULT IAppEvents::NewWorkbook ( struct _Workbook * Wb );
__declspec(implementation_key(339)) HRESULT IAppEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(340)) HRESULT IAppEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(341)) HRESULT IAppEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(342)) HRESULT IAppEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(343)) HRESULT IAppEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(344)) HRESULT IAppEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(345)) HRESULT IAppEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(346)) HRESULT IAppEvents::WorkbookOpen ( struct _Workbook * Wb );
__declspec(implementation_key(347)) HRESULT IAppEvents::WorkbookActivate ( struct _Workbook * Wb );
__declspec(implementation_key(348)) HRESULT IAppEvents::WorkbookDeactivate ( struct _Workbook * Wb );
__declspec(implementation_key(349)) HRESULT IAppEvents::WorkbookBeforeClose ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(350)) HRESULT IAppEvents::WorkbookBeforeSave ( struct _Workbook * Wb, VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(351)) HRESULT IAppEvents::WorkbookBeforePrint ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(352)) HRESULT IAppEvents::WorkbookNewSheet ( struct _Workbook * Wb, IDispatch * Sh );
__declspec(implementation_key(353)) HRESULT IAppEvents::WorkbookAddinInstall ( struct _Workbook * Wb );
__declspec(implementation_key(354)) HRESULT IAppEvents::WorkbookAddinUninstall ( struct _Workbook * Wb );
__declspec(implementation_key(355)) HRESULT IAppEvents::WindowResize ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(356)) HRESULT IAppEvents::WindowActivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(357)) HRESULT IAppEvents::WindowDeactivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(358)) HRESULT IAppEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(359)) HRESULT IAppEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target );
__declspec(implementation_key(360)) HRESULT IAppEvents::WorkbookPivotTableCloseConnection ( struct _Workbook * Wb, struct PivotTable * Target );
__declspec(implementation_key(361)) HRESULT IAppEvents::WorkbookPivotTableOpenConnection ( struct _Workbook * Wb, struct PivotTable * Target );
__declspec(implementation_key(362)) _ApplicationPtr _Application::GetApplication ( );
__declspec(implementation_key(363)) enum XlCreator _Application::GetCreator ( );
__declspec(implementation_key(364)) _ApplicationPtr _Application::GetParent ( );
__declspec(implementation_key(365)) RangePtr _Application::GetActiveCell ( );
__declspec(implementation_key(366)) _ChartPtr _Application::GetActiveChart ( );
__declspec(implementation_key(367)) DialogSheetPtr _Application::GetActiveDialog ( );
__declspec(implementation_key(368)) MenuBarPtr _Application::GetActiveMenuBar ( );
__declspec(implementation_key(369)) _bstr_t _Application::GetActivePrinter ( long lcid );
__declspec(implementation_key(370)) void _Application::PutActivePrinter ( long lcid, _bstr_t RHS );
__declspec(implementation_key(371)) IDispatchPtr _Application::GetActiveSheet ( );
__declspec(implementation_key(372)) WindowPtr _Application::GetActiveWindow ( );
__declspec(implementation_key(373)) _WorkbookPtr _Application::GetActiveWorkbook ( );
__declspec(implementation_key(374)) AddInsPtr _Application::GetAddIns ( );
__declspec(implementation_key(375)) Office::AssistantPtr _Application::GetAssistant ( );
__declspec(implementation_key(376)) HRESULT _Application::Calculate ( long lcid );
__declspec(implementation_key(377)) RangePtr _Application::GetCells ( );
__declspec(implementation_key(378)) SheetsPtr _Application::GetCharts ( );
__declspec(implementation_key(379)) RangePtr _Application::GetColumns ( );
__declspec(implementation_key(380)) Office::_CommandBarsPtr _Application::GetCommandBars ( );
__declspec(implementation_key(381)) long _Application::GetDDEAppReturnCode ( long lcid );
__declspec(implementation_key(382)) HRESULT _Application::DDEExecute ( long Channel, _bstr_t String, long lcid );
__declspec(implementation_key(383)) long _Application::DDEInitiate ( _bstr_t App, _bstr_t Topic, long lcid );
__declspec(implementation_key(384)) HRESULT _Application::DDEPoke ( long Channel, const _variant_t & Item, const _variant_t & Data, long lcid );
__declspec(implementation_key(385)) _variant_t _Application::DDERequest ( long Channel, _bstr_t Item, long lcid );
__declspec(implementation_key(386)) HRESULT _Application::DDETerminate ( long Channel, long lcid );
__declspec(implementation_key(387)) SheetsPtr _Application::GetDialogSheets ( );
__declspec(implementation_key(388)) _variant_t _Application::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(389)) _variant_t _Application::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(390)) _variant_t _Application::ExecuteExcel4Macro ( _bstr_t String, long lcid );
__declspec(implementation_key(391)) RangePtr _Application::Intersect ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(392)) MenuBarsPtr _Application::GetMenuBars ( );
__declspec(implementation_key(393)) ModulesPtr _Application::GetModules ( );
__declspec(implementation_key(394)) NamesPtr _Application::GetNames ( );
__declspec(implementation_key(395)) RangePtr _Application::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(396)) RangePtr _Application::GetRows ( );
__declspec(implementation_key(397)) _variant_t _Application::Run ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(398)) _variant_t _Application::_Run2 ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(399)) IDispatchPtr _Application::GetSelection ( long lcid );
__declspec(implementation_key(400)) HRESULT _Application::SendKeys ( const _variant_t & Keys, const _variant_t & Wait, long lcid );
__declspec(implementation_key(401)) SheetsPtr _Application::GetSheets ( );
__declspec(implementation_key(402)) MenuPtr _Application::GetShortcutMenus ( long Index );
__declspec(implementation_key(403)) _WorkbookPtr _Application::GetThisWorkbook ( long lcid );
__declspec(implementation_key(404)) ToolbarsPtr _Application::GetToolbars ( );
__declspec(implementation_key(405)) RangePtr _Application::Union ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(406)) WindowsPtr _Application::GetWindows ( );
__declspec(implementation_key(407)) WorkbooksPtr _Application::GetWorkbooks ( );
__declspec(implementation_key(408)) WorksheetFunctionPtr _Application::GetWorksheetFunction ( );
__declspec(implementation_key(409)) SheetsPtr _Application::GetWorksheets ( );
__declspec(implementation_key(410)) SheetsPtr _Application::GetExcel4IntlMacroSheets ( );
__declspec(implementation_key(411)) SheetsPtr _Application::GetExcel4MacroSheets ( );
__declspec(implementation_key(412)) HRESULT _Application::ActivateMicrosoftApp ( enum XlMSApplication Index, long lcid );
__declspec(implementation_key(413)) HRESULT _Application::AddChartAutoFormat ( const _variant_t & Chart, _bstr_t Name, const _variant_t & Description, long lcid );
__declspec(implementation_key(414)) HRESULT _Application::AddCustomList ( const _variant_t & ListArray, const _variant_t & ByRow, long lcid );
__declspec(implementation_key(415)) VARIANT_BOOL _Application::GetAlertBeforeOverwriting ( long lcid );
__declspec(implementation_key(416)) void _Application::PutAlertBeforeOverwriting ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(417)) _bstr_t _Application::GetAltStartupPath ( long lcid );
__declspec(implementation_key(418)) void _Application::PutAltStartupPath ( long lcid, _bstr_t RHS );
__declspec(implementation_key(419)) VARIANT_BOOL _Application::GetAskToUpdateLinks ( long lcid );
__declspec(implementation_key(420)) void _Application::PutAskToUpdateLinks ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(421)) VARIANT_BOOL _Application::GetEnableAnimations ( long lcid );
__declspec(implementation_key(422)) void _Application::PutEnableAnimations ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(423)) AutoCorrectPtr _Application::GetAutoCorrect ( );
__declspec(implementation_key(424)) long _Application::GetBuild ( long lcid );
__declspec(implementation_key(425)) VARIANT_BOOL _Application::GetCalculateBeforeSave ( long lcid );
__declspec(implementation_key(426)) void _Application::PutCalculateBeforeSave ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(427)) enum XlCalculation _Application::GetCalculation ( long lcid );
__declspec(implementation_key(428)) void _Application::PutCalculation ( long lcid, enum XlCalculation RHS );
__declspec(implementation_key(429)) _variant_t _Application::GetCaller ( const _variant_t & Index, long lcid );
__declspec(implementation_key(430)) VARIANT_BOOL _Application::GetCanPlaySounds ( long lcid );
__declspec(implementation_key(431)) VARIANT_BOOL _Application::GetCanRecordSounds ( long lcid );
__declspec(implementation_key(432)) _bstr_t _Application::GetCaption ( );
__declspec(implementation_key(433)) void _Application::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(434)) VARIANT_BOOL _Application::GetCellDragAndDrop ( long lcid );
__declspec(implementation_key(435)) void _Application::PutCellDragAndDrop ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(436)) double _Application::CentimetersToPoints ( double Centimeters, long lcid );
__declspec(implementation_key(437)) VARIANT_BOOL _Application::CheckSpelling ( _bstr_t Word, const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, long lcid );
__declspec(implementation_key(438)) _variant_t _Application::GetClipboardFormats ( const _variant_t & Index, long lcid );
__declspec(implementation_key(439)) VARIANT_BOOL _Application::GetDisplayClipboardWindow ( long lcid );
__declspec(implementation_key(440)) void _Application::PutDisplayClipboardWindow ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(441)) VARIANT_BOOL _Application::GetColorButtons ( );
__declspec(implementation_key(442)) void _Application::PutColorButtons ( VARIANT_BOOL RHS );
__declspec(implementation_key(443)) enum XlCommandUnderlines _Application::GetCommandUnderlines ( long lcid );
__declspec(implementation_key(444)) void _Application::PutCommandUnderlines ( long lcid, enum XlCommandUnderlines RHS );
__declspec(implementation_key(445)) VARIANT_BOOL _Application::GetConstrainNumeric ( long lcid );
__declspec(implementation_key(446)) void _Application::PutConstrainNumeric ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(447)) _variant_t _Application::ConvertFormula ( const _variant_t & Formula, enum XlReferenceStyle FromReferenceStyle, const _variant_t & ToReferenceStyle, const _variant_t & ToAbsolute, const _variant_t & RelativeTo, long lcid );
__declspec(implementation_key(448)) VARIANT_BOOL _Application::GetCopyObjectsWithCells ( long lcid );
__declspec(implementation_key(449)) void _Application::PutCopyObjectsWithCells ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(450)) enum XlMousePointer _Application::GetCursor ( long lcid );
__declspec(implementation_key(451)) void _Application::PutCursor ( long lcid, enum XlMousePointer RHS );
__declspec(implementation_key(452)) long _Application::GetCustomListCount ( long lcid );
__declspec(implementation_key(453)) enum XlCutCopyMode _Application::GetCutCopyMode ( long lcid );
__declspec(implementation_key(454)) void _Application::PutCutCopyMode ( long lcid, enum XlCutCopyMode RHS );
__declspec(implementation_key(455)) long _Application::GetDataEntryMode ( long lcid );
__declspec(implementation_key(456)) void _Application::PutDataEntryMode ( long lcid, long RHS );
__declspec(implementation_key(457)) _variant_t _Application::Dummy1 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(458)) _variant_t _Application::Dummy2 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8 );
__declspec(implementation_key(459)) _variant_t _Application::Dummy3 ( );
__declspec(implementation_key(460)) _variant_t _Application::Dummy4 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15 );
__declspec(implementation_key(461)) _variant_t _Application::Dummy5 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13 );
__declspec(implementation_key(462)) _variant_t _Application::Dummy6 ( );
__declspec(implementation_key(463)) _variant_t _Application::Dummy7 ( );
__declspec(implementation_key(464)) _variant_t _Application::Dummy8 ( const _variant_t & Arg1 );
__declspec(implementation_key(465)) _variant_t _Application::Dummy9 ( );
__declspec(implementation_key(466)) VARIANT_BOOL _Application::Dummy10 ( const _variant_t & arg );
__declspec(implementation_key(467)) HRESULT _Application::Dummy11 ( );
__declspec(implementation_key(468)) _bstr_t _Application::Get_Default ( );
__declspec(implementation_key(469)) _bstr_t _Application::GetDefaultFilePath ( long lcid );
__declspec(implementation_key(470)) void _Application::PutDefaultFilePath ( long lcid, _bstr_t RHS );
__declspec(implementation_key(471)) HRESULT _Application::DeleteChartAutoFormat ( _bstr_t Name, long lcid );
__declspec(implementation_key(472)) HRESULT _Application::DeleteCustomList ( long ListNum, long lcid );
__declspec(implementation_key(473)) DialogsPtr _Application::GetDialogs ( );
__declspec(implementation_key(474)) VARIANT_BOOL _Application::GetDisplayAlerts ( long lcid );
__declspec(implementation_key(475)) void _Application::PutDisplayAlerts ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(476)) VARIANT_BOOL _Application::GetDisplayFormulaBar ( long lcid );
__declspec(implementation_key(477)) void _Application::PutDisplayFormulaBar ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(478)) VARIANT_BOOL _Application::GetDisplayFullScreen ( long lcid );
__declspec(implementation_key(479)) void _Application::PutDisplayFullScreen ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(480)) VARIANT_BOOL _Application::GetDisplayNoteIndicator ( );
__declspec(implementation_key(481)) void _Application::PutDisplayNoteIndicator ( VARIANT_BOOL RHS );
__declspec(implementation_key(482)) enum XlCommentDisplayMode _Application::GetDisplayCommentIndicator ( );
__declspec(implementation_key(483)) void _Application::PutDisplayCommentIndicator ( enum XlCommentDisplayMode RHS );
__declspec(implementation_key(484)) VARIANT_BOOL _Application::GetDisplayExcel4Menus ( long lcid );
__declspec(implementation_key(485)) void _Application::PutDisplayExcel4Menus ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(486)) VARIANT_BOOL _Application::GetDisplayRecentFiles ( );
__declspec(implementation_key(487)) void _Application::PutDisplayRecentFiles ( VARIANT_BOOL RHS );
__declspec(implementation_key(488)) VARIANT_BOOL _Application::GetDisplayScrollBars ( long lcid );
__declspec(implementation_key(489)) void _Application::PutDisplayScrollBars ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(490)) VARIANT_BOOL _Application::GetDisplayStatusBar ( long lcid );
__declspec(implementation_key(491)) void _Application::PutDisplayStatusBar ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(492)) HRESULT _Application::DoubleClick ( long lcid );
__declspec(implementation_key(493)) VARIANT_BOOL _Application::GetEditDirectlyInCell ( long lcid );
__declspec(implementation_key(494)) void _Application::PutEditDirectlyInCell ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(495)) VARIANT_BOOL _Application::GetEnableAutoComplete ( );
__declspec(implementation_key(496)) void _Application::PutEnableAutoComplete ( VARIANT_BOOL RHS );
__declspec(implementation_key(497)) enum XlEnableCancelKey _Application::GetEnableCancelKey ( long lcid );
__declspec(implementation_key(498)) void _Application::PutEnableCancelKey ( long lcid, enum XlEnableCancelKey RHS );
__declspec(implementation_key(499)) VARIANT_BOOL _Application::GetEnableSound ( );
__declspec(implementation_key(500)) void _Application::PutEnableSound ( VARIANT_BOOL RHS );
__declspec(implementation_key(501)) VARIANT_BOOL _Application::GetEnableTipWizard ( long lcid );
__declspec(implementation_key(502)) void _Application::PutEnableTipWizard ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(503)) _variant_t _Application::GetFileConverters ( const _variant_t & Index1, const _variant_t & Index2, long lcid );
__declspec(implementation_key(504)) Office::FileSearchPtr _Application::GetFileSearch ( );
__declspec(implementation_key(505)) Office::IFindPtr _Application::GetFileFind ( );
__declspec(implementation_key(506)) HRESULT _Application::_FindFile ( long lcid );
__declspec(implementation_key(507)) VARIANT_BOOL _Application::GetFixedDecimal ( long lcid );
__declspec(implementation_key(508)) void _Application::PutFixedDecimal ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(509)) long _Application::GetFixedDecimalPlaces ( long lcid );
__declspec(implementation_key(510)) void _Application::PutFixedDecimalPlaces ( long lcid, long RHS );
__declspec(implementation_key(511)) _variant_t _Application::GetCustomListContents ( long ListNum, long lcid );
__declspec(implementation_key(512)) long _Application::GetCustomListNum ( const _variant_t & ListArray, long lcid );
__declspec(implementation_key(513)) _variant_t _Application::GetOpenFilename ( const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & ButtonText, const _variant_t & MultiSelect, long lcid );
__declspec(implementation_key(514)) _variant_t _Application::GetSaveAsFilename ( const _variant_t & InitialFilename, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & ButtonText, long lcid );
__declspec(implementation_key(515)) HRESULT _Application::Goto ( const _variant_t & Reference, const _variant_t & Scroll, long lcid );
__declspec(implementation_key(516)) double _Application::GetHeight ( long lcid );
__declspec(implementation_key(517)) void _Application::PutHeight ( long lcid, double RHS );
__declspec(implementation_key(518)) HRESULT _Application::Help ( const _variant_t & HelpFile, const _variant_t & HelpContextID, long lcid );
__declspec(implementation_key(519)) VARIANT_BOOL _Application::GetIgnoreRemoteRequests ( long lcid );
__declspec(implementation_key(520)) void _Application::PutIgnoreRemoteRequests ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(521)) double _Application::InchesToPoints ( double Inches, long lcid );
__declspec(implementation_key(522)) _variant_t _Application::InputBox ( _bstr_t Prompt, const _variant_t & Title, const _variant_t & Default, const _variant_t & Left, const _variant_t & Top, const _variant_t & HelpFile, const _variant_t & HelpContextID, const _variant_t & Type, long lcid );
__declspec(implementation_key(523)) VARIANT_BOOL _Application::GetInteractive ( long lcid );
__declspec(implementation_key(524)) void _Application::PutInteractive ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(525)) _variant_t _Application::GetInternational ( const _variant_t & Index, long lcid );
__declspec(implementation_key(526)) VARIANT_BOOL _Application::GetIteration ( long lcid );
__declspec(implementation_key(527)) void _Application::PutIteration ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(528)) VARIANT_BOOL _Application::GetLargeButtons ( );
__declspec(implementation_key(529)) void _Application::PutLargeButtons ( VARIANT_BOOL RHS );
__declspec(implementation_key(530)) double _Application::GetLeft ( long lcid );
__declspec(implementation_key(531)) void _Application::PutLeft ( long lcid, double RHS );
__declspec(implementation_key(532)) _bstr_t _Application::GetLibraryPath ( long lcid );
__declspec(implementation_key(533)) HRESULT _Application::MacroOptions ( const _variant_t & Macro, const _variant_t & Description, const _variant_t & HasMenu, const _variant_t & MenuText, const _variant_t & HasShortcutKey, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & StatusBar, const _variant_t & HelpContextID, const _variant_t & HelpFile, long lcid );
__declspec(implementation_key(534)) HRESULT _Application::MailLogoff ( long lcid );
__declspec(implementation_key(535)) HRESULT _Application::MailLogon ( const _variant_t & Name, const _variant_t & Password, const _variant_t & DownloadNewMail, long lcid );
__declspec(implementation_key(536)) _variant_t _Application::GetMailSession ( long lcid );
__declspec(implementation_key(537)) enum XlMailSystem _Application::GetMailSystem ( long lcid );
__declspec(implementation_key(538)) VARIANT_BOOL _Application::GetMathCoprocessorAvailable ( long lcid );
__declspec(implementation_key(539)) double _Application::GetMaxChange ( long lcid );
__declspec(implementation_key(540)) void _Application::PutMaxChange ( long lcid, double RHS );
__declspec(implementation_key(541)) long _Application::GetMaxIterations ( long lcid );
__declspec(implementation_key(542)) void _Application::PutMaxIterations ( long lcid, long RHS );
__declspec(implementation_key(543)) long _Application::GetMemoryFree ( long lcid );
__declspec(implementation_key(544)) long _Application::GetMemoryTotal ( long lcid );
__declspec(implementation_key(545)) long _Application::GetMemoryUsed ( long lcid );
__declspec(implementation_key(546)) VARIANT_BOOL _Application::GetMouseAvailable ( long lcid );
__declspec(implementation_key(547)) VARIANT_BOOL _Application::GetMoveAfterReturn ( long lcid );
__declspec(implementation_key(548)) void _Application::PutMoveAfterReturn ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(549)) enum XlDirection _Application::GetMoveAfterReturnDirection ( long lcid );
__declspec(implementation_key(550)) void _Application::PutMoveAfterReturnDirection ( long lcid, enum XlDirection RHS );
__declspec(implementation_key(551)) RecentFilesPtr _Application::GetRecentFiles ( );
__declspec(implementation_key(552)) _bstr_t _Application::GetName ( );
__declspec(implementation_key(553)) _WorkbookPtr _Application::NextLetter ( long lcid );
__declspec(implementation_key(554)) _bstr_t _Application::GetNetworkTemplatesPath ( long lcid );
__declspec(implementation_key(555)) ODBCErrorsPtr _Application::GetODBCErrors ( );
__declspec(implementation_key(556)) long _Application::GetODBCTimeout ( );
__declspec(implementation_key(557)) void _Application::PutODBCTimeout ( long RHS );
__declspec(implementation_key(558)) _bstr_t _Application::GetOnCalculate ( long lcid );
__declspec(implementation_key(559)) void _Application::PutOnCalculate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(560)) _bstr_t _Application::GetOnData ( long lcid );
__declspec(implementation_key(561)) void _Application::PutOnData ( long lcid, _bstr_t RHS );
__declspec(implementation_key(562)) _bstr_t _Application::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(563)) void _Application::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(564)) _bstr_t _Application::GetOnEntry ( long lcid );
__declspec(implementation_key(565)) void _Application::PutOnEntry ( long lcid, _bstr_t RHS );
__declspec(implementation_key(566)) HRESULT _Application::OnKey ( _bstr_t Key, const _variant_t & Procedure, long lcid );
__declspec(implementation_key(567)) HRESULT _Application::OnRepeat ( _bstr_t Text, _bstr_t Procedure, long lcid );
__declspec(implementation_key(568)) _bstr_t _Application::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(569)) void _Application::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(570)) _bstr_t _Application::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(571)) void _Application::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(572)) HRESULT _Application::OnTime ( const _variant_t & EarliestTime, _bstr_t Procedure, const _variant_t & LatestTime, const _variant_t & Schedule, long lcid );
__declspec(implementation_key(573)) HRESULT _Application::OnUndo ( _bstr_t Text, _bstr_t Procedure, long lcid );
__declspec(implementation_key(574)) _bstr_t _Application::GetOnWindow ( long lcid );
__declspec(implementation_key(575)) void _Application::PutOnWindow ( long lcid, _bstr_t RHS );
__declspec(implementation_key(576)) _bstr_t _Application::GetOperatingSystem ( long lcid );
__declspec(implementation_key(577)) _bstr_t _Application::GetOrganizationName ( long lcid );
__declspec(implementation_key(578)) _bstr_t _Application::GetPath ( long lcid );
__declspec(implementation_key(579)) _bstr_t _Application::GetPathSeparator ( long lcid );
__declspec(implementation_key(580)) _variant_t _Application::GetPreviousSelections ( const _variant_t & Index, long lcid );
__declspec(implementation_key(581)) VARIANT_BOOL _Application::GetPivotTableSelection ( );
__declspec(implementation_key(582)) void _Application::PutPivotTableSelection ( VARIANT_BOOL RHS );
__declspec(implementation_key(583)) VARIANT_BOOL _Application::GetPromptForSummaryInfo ( long lcid );
__declspec(implementation_key(584)) void _Application::PutPromptForSummaryInfo ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(585)) HRESULT _Application::Quit ( );
__declspec(implementation_key(586)) HRESULT _Application::RecordMacro ( const _variant_t & BasicCode, const _variant_t & XlmCode, long lcid );
__declspec(implementation_key(587)) VARIANT_BOOL _Application::GetRecordRelative ( long lcid );
__declspec(implementation_key(588)) enum XlReferenceStyle _Application::GetReferenceStyle ( long lcid );
__declspec(implementation_key(589)) void _Application::PutReferenceStyle ( long lcid, enum XlReferenceStyle RHS );
__declspec(implementation_key(590)) _variant_t _Application::GetRegisteredFunctions ( const _variant_t & Index1, const _variant_t & Index2, long lcid );
__declspec(implementation_key(591)) VARIANT_BOOL _Application::RegisterXLL ( _bstr_t Filename, long lcid );
__declspec(implementation_key(592)) HRESULT _Application::Repeat ( long lcid );
__declspec(implementation_key(593)) HRESULT _Application::ResetTipWizard ( long lcid );
__declspec(implementation_key(594)) VARIANT_BOOL _Application::GetRollZoom ( );
__declspec(implementation_key(595)) void _Application::PutRollZoom ( VARIANT_BOOL RHS );
__declspec(implementation_key(596)) HRESULT _Application::Save ( const _variant_t & Filename, long lcid );
__declspec(implementation_key(597)) HRESULT _Application::SaveWorkspace ( const _variant_t & Filename, long lcid );
__declspec(implementation_key(598)) VARIANT_BOOL _Application::GetScreenUpdating ( long lcid );
__declspec(implementation_key(599)) void _Application::PutScreenUpdating ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(600)) HRESULT _Application::SetDefaultChart ( const _variant_t & FormatName, const _variant_t & Gallery );
__declspec(implementation_key(601)) long _Application::GetSheetsInNewWorkbook ( long lcid );
__declspec(implementation_key(602)) void _Application::PutSheetsInNewWorkbook ( long lcid, long RHS );
__declspec(implementation_key(603)) VARIANT_BOOL _Application::GetShowChartTipNames ( );
__declspec(implementation_key(604)) void _Application::PutShowChartTipNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(605)) VARIANT_BOOL _Application::GetShowChartTipValues ( );
__declspec(implementation_key(606)) void _Application::PutShowChartTipValues ( VARIANT_BOOL RHS );
__declspec(implementation_key(607)) _bstr_t _Application::GetStandardFont ( long lcid );
__declspec(implementation_key(608)) void _Application::PutStandardFont ( long lcid, _bstr_t RHS );
__declspec(implementation_key(609)) double _Application::GetStandardFontSize ( long lcid );
__declspec(implementation_key(610)) void _Application::PutStandardFontSize ( long lcid, double RHS );
__declspec(implementation_key(611)) _bstr_t _Application::GetStartupPath ( long lcid );
__declspec(implementation_key(612)) _variant_t _Application::GetStatusBar ( long lcid );
__declspec(implementation_key(613)) void _Application::PutStatusBar ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(614)) _bstr_t _Application::GetTemplatesPath ( long lcid );
__declspec(implementation_key(615)) VARIANT_BOOL _Application::GetShowToolTips ( );
__declspec(implementation_key(616)) void _Application::PutShowToolTips ( VARIANT_BOOL RHS );
__declspec(implementation_key(617)) double _Application::GetTop ( long lcid );
__declspec(implementation_key(618)) void _Application::PutTop ( long lcid, double RHS );
__declspec(implementation_key(619)) enum XlFileFormat _Application::GetDefaultSaveFormat ( );
__declspec(implementation_key(620)) void _Application::PutDefaultSaveFormat ( enum XlFileFormat RHS );
__declspec(implementation_key(621)) _bstr_t _Application::GetTransitionMenuKey ( long lcid );
__declspec(implementation_key(622)) void _Application::PutTransitionMenuKey ( long lcid, _bstr_t RHS );
__declspec(implementation_key(623)) long _Application::GetTransitionMenuKeyAction ( long lcid );
__declspec(implementation_key(624)) void _Application::PutTransitionMenuKeyAction ( long lcid, long RHS );
__declspec(implementation_key(625)) VARIANT_BOOL _Application::GetTransitionNavigKeys ( long lcid );
__declspec(implementation_key(626)) void _Application::PutTransitionNavigKeys ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(627)) HRESULT _Application::Undo ( long lcid );
__declspec(implementation_key(628)) double _Application::GetUsableHeight ( long lcid );
__declspec(implementation_key(629)) double _Application::GetUsableWidth ( long lcid );
__declspec(implementation_key(630)) VARIANT_BOOL _Application::GetUserControl ( );
__declspec(implementation_key(631)) void _Application::PutUserControl ( VARIANT_BOOL RHS );
__declspec(implementation_key(632)) _bstr_t _Application::GetUserName ( long lcid );
__declspec(implementation_key(633)) void _Application::PutUserName ( long lcid, _bstr_t RHS );
__declspec(implementation_key(634)) _bstr_t _Application::GetValue ( );
__declspec(implementation_key(635)) VBIDE::JOEVBEPtr _Application::GetJOEVBE ( );
__declspec(implementation_key(636)) _bstr_t _Application::GetVersion ( long lcid );
__declspec(implementation_key(637)) VARIANT_BOOL _Application::GetVisible ( long lcid );
__declspec(implementation_key(638)) void _Application::PutVisible ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(639)) HRESULT _Application::Volatile ( const _variant_t & Volatile, long lcid );
__declspec(implementation_key(640)) HRESULT _Application::_Wait ( const _variant_t & Time, long lcid );
__declspec(implementation_key(641)) double _Application::GetWidth ( long lcid );
__declspec(implementation_key(642)) void _Application::PutWidth ( long lcid, double RHS );
__declspec(implementation_key(643)) VARIANT_BOOL _Application::GetWindowsForPens ( long lcid );
__declspec(implementation_key(644)) enum XlWindowState _Application::GetWindowState ( long lcid );
__declspec(implementation_key(645)) void _Application::PutWindowState ( long lcid, enum XlWindowState RHS );
__declspec(implementation_key(646)) long _Application::GetUILanguage ( long lcid );
__declspec(implementation_key(647)) void _Application::PutUILanguage ( long lcid, long RHS );
__declspec(implementation_key(648)) long _Application::GetDefaultSheetDirection ( long lcid );
__declspec(implementation_key(649)) void _Application::PutDefaultSheetDirection ( long lcid, long RHS );
__declspec(implementation_key(650)) long _Application::GetCursorMovement ( long lcid );
__declspec(implementation_key(651)) void _Application::PutCursorMovement ( long lcid, long RHS );
__declspec(implementation_key(652)) VARIANT_BOOL _Application::GetControlCharacters ( long lcid );
__declspec(implementation_key(653)) void _Application::PutControlCharacters ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(654)) _variant_t _Application::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(655)) VARIANT_BOOL _Application::GetEnableEvents ( );
__declspec(implementation_key(656)) void _Application::PutEnableEvents ( VARIANT_BOOL RHS );
__declspec(implementation_key(657)) VARIANT_BOOL _Application::GetDisplayInfoWindow ( );
__declspec(implementation_key(658)) void _Application::PutDisplayInfoWindow ( VARIANT_BOOL RHS );
__declspec(implementation_key(659)) VARIANT_BOOL _Application::Wait ( const _variant_t & Time, long lcid );
__declspec(implementation_key(660)) VARIANT_BOOL _Application::GetExtendList ( );
__declspec(implementation_key(661)) void _Application::PutExtendList ( VARIANT_BOOL RHS );
__declspec(implementation_key(662)) OLEDBErrorsPtr _Application::GetOLEDBErrors ( );
__declspec(implementation_key(663)) _bstr_t _Application::GetPhonetic ( const _variant_t & Text );
__declspec(implementation_key(664)) Office::COMAddInsPtr _Application::GetCOMAddIns ( );
__declspec(implementation_key(665)) DefaultWebOptionsPtr _Application::GetDefaultWebOptions ( );
__declspec(implementation_key(666)) _bstr_t _Application::GetProductCode ( );
__declspec(implementation_key(667)) _bstr_t _Application::GetUserLibraryPath ( );
__declspec(implementation_key(668)) VARIANT_BOOL _Application::GetAutoPercentEntry ( );
__declspec(implementation_key(669)) void _Application::PutAutoPercentEntry ( VARIANT_BOOL RHS );
__declspec(implementation_key(670)) Office::LanguageSettingsPtr _Application::GetLanguageSettings ( );
__declspec(implementation_key(671)) IDispatchPtr _Application::GetDummy101 ( );
__declspec(implementation_key(672)) HRESULT _Application::Dummy12 ( struct PivotTable * p1, struct PivotTable * p2 );
__declspec(implementation_key(673)) Office::AnswerWizardPtr _Application::GetAnswerWizard ( );
__declspec(implementation_key(674)) HRESULT _Application::CalculateFull ( );
__declspec(implementation_key(675)) VARIANT_BOOL _Application::FindFile ( long lcid );
__declspec(implementation_key(676)) long _Application::GetCalculationVersion ( );
__declspec(implementation_key(677)) VARIANT_BOOL _Application::GetShowWindowsInTaskbar ( );
__declspec(implementation_key(678)) void _Application::PutShowWindowsInTaskbar ( VARIANT_BOOL RHS );
__declspec(implementation_key(679)) enum Office::MsoFeatureInstall _Application::GetFeatureInstall ( );
__declspec(implementation_key(680)) void _Application::PutFeatureInstall ( enum Office::MsoFeatureInstall RHS );
__declspec(implementation_key(681)) VARIANT_BOOL _Application::GetReady ( );
__declspec(implementation_key(682)) _variant_t _Application::Dummy13 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(683)) CellFormatPtr _Application::GetFindFormat ( );
__declspec(implementation_key(684)) void _Application::PutRefFindFormat ( struct CellFormat * RHS );
__declspec(implementation_key(685)) CellFormatPtr _Application::GetReplaceFormat ( );
__declspec(implementation_key(686)) void _Application::PutRefReplaceFormat ( struct CellFormat * RHS );
__declspec(implementation_key(687)) UsedObjectsPtr _Application::GetUsedObjects ( );
__declspec(implementation_key(688)) enum XlCalculationState _Application::GetCalculationState ( );
__declspec(implementation_key(689)) enum XlCalculationInterruptKey _Application::GetCalculationInterruptKey ( );
__declspec(implementation_key(690)) void _Application::PutCalculationInterruptKey ( enum XlCalculationInterruptKey RHS );
__declspec(implementation_key(691)) WatchesPtr _Application::GetWatches ( );
__declspec(implementation_key(692)) VARIANT_BOOL _Application::GetDisplayFunctionToolTips ( );
__declspec(implementation_key(693)) void _Application::PutDisplayFunctionToolTips ( VARIANT_BOOL RHS );
__declspec(implementation_key(694)) enum Office::MsoAutomationSecurity _Application::GetAutomationSecurity ( );
__declspec(implementation_key(695)) void _Application::PutAutomationSecurity ( enum Office::MsoAutomationSecurity RHS );
__declspec(implementation_key(696)) Office::FileDialogPtr _Application::GetFileDialog ( enum Office::MsoFileDialogType fileDialogType );
__declspec(implementation_key(697)) HRESULT _Application::Dummy14 ( );
__declspec(implementation_key(698)) HRESULT _Application::CalculateFullRebuild ( );
__declspec(implementation_key(699)) VARIANT_BOOL _Application::GetDisplayPasteOptions ( );
__declspec(implementation_key(700)) void _Application::PutDisplayPasteOptions ( VARIANT_BOOL RHS );
__declspec(implementation_key(701)) VARIANT_BOOL _Application::GetDisplayInsertOptions ( );
__declspec(implementation_key(702)) void _Application::PutDisplayInsertOptions ( VARIANT_BOOL RHS );
__declspec(implementation_key(703)) VARIANT_BOOL _Application::GetGenerateGetPivotData ( );
__declspec(implementation_key(704)) void _Application::PutGenerateGetPivotData ( VARIANT_BOOL RHS );
__declspec(implementation_key(705)) AutoRecoverPtr _Application::GetAutoRecover ( );
__declspec(implementation_key(706)) long _Application::GetHwnd ( );
__declspec(implementation_key(707)) long _Application::GetHinstance ( );
__declspec(implementation_key(708)) HRESULT _Application::CheckAbort ( const _variant_t & KeepAbort );
__declspec(implementation_key(709)) ErrorCheckingOptionsPtr _Application::GetErrorCheckingOptions ( );
__declspec(implementation_key(710)) VARIANT_BOOL _Application::GetAutoFormatAsYouTypeReplaceHyperlinks ( );
__declspec(implementation_key(711)) void _Application::PutAutoFormatAsYouTypeReplaceHyperlinks ( VARIANT_BOOL RHS );
__declspec(implementation_key(712)) SmartTagRecognizersPtr _Application::GetSmartTagRecognizers ( );
__declspec(implementation_key(713)) Office::NewFilePtr _Application::GetNewWorkbook ( );
__declspec(implementation_key(714)) SpellingOptionsPtr _Application::GetSpellingOptions ( );
__declspec(implementation_key(715)) SpeechPtr _Application::GetSpeech ( );
__declspec(implementation_key(716)) VARIANT_BOOL _Application::GetMapPaperSize ( );
__declspec(implementation_key(717)) void _Application::PutMapPaperSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(718)) VARIANT_BOOL _Application::GetShowStartupDialog ( );
__declspec(implementation_key(719)) void _Application::PutShowStartupDialog ( VARIANT_BOOL RHS );
__declspec(implementation_key(720)) _bstr_t _Application::GetDecimalSeparator ( );
__declspec(implementation_key(721)) void _Application::PutDecimalSeparator ( _bstr_t RHS );
__declspec(implementation_key(722)) _bstr_t _Application::GetThousandsSeparator ( );
__declspec(implementation_key(723)) void _Application::PutThousandsSeparator ( _bstr_t RHS );
__declspec(implementation_key(724)) VARIANT_BOOL _Application::GetUseSystemSeparators ( );
__declspec(implementation_key(725)) void _Application::PutUseSystemSeparators ( VARIANT_BOOL RHS );
__declspec(implementation_key(726)) RangePtr _Application::GetThisCell ( );
__declspec(implementation_key(727)) RTDPtr _Application::GetRTD ( );
__declspec(implementation_key(728)) _ApplicationPtr IWorksheetFunction::GetApplication ( );
__declspec(implementation_key(729)) enum XlCreator IWorksheetFunction::GetCreator ( );
__declspec(implementation_key(730)) IDispatchPtr IWorksheetFunction::GetParent ( );
__declspec(implementation_key(731)) _variant_t IWorksheetFunction::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(732)) double IWorksheetFunction::Count ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(733)) VARIANT_BOOL IWorksheetFunction::IsNA ( const _variant_t & Arg1 );
__declspec(implementation_key(734)) VARIANT_BOOL IWorksheetFunction::IsError ( const _variant_t & Arg1 );
__declspec(implementation_key(735)) double IWorksheetFunction::Sum ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(736)) double IWorksheetFunction::Average ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(737)) double IWorksheetFunction::Min ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(738)) double IWorksheetFunction::Max ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(739)) double IWorksheetFunction::Npv ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(740)) double IWorksheetFunction::StDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(741)) _bstr_t IWorksheetFunction::Dollar ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(742)) _bstr_t IWorksheetFunction::Fixed ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(743)) double IWorksheetFunction::Pi ( );
__declspec(implementation_key(744)) double IWorksheetFunction::Ln ( double Arg1 );
__declspec(implementation_key(745)) double IWorksheetFunction::Log10 ( double Arg1 );
__declspec(implementation_key(746)) double IWorksheetFunction::Round ( double Arg1, double Arg2 );
__declspec(implementation_key(747)) _variant_t IWorksheetFunction::Lookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(748)) _variant_t IWorksheetFunction::Index ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(749)) _bstr_t IWorksheetFunction::Rept ( _bstr_t Arg1, double Arg2 );
__declspec(implementation_key(750)) VARIANT_BOOL IWorksheetFunction::And ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(751)) VARIANT_BOOL IWorksheetFunction::Or ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(752)) double IWorksheetFunction::DCount ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(753)) double IWorksheetFunction::DSum ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(754)) double IWorksheetFunction::DAverage ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(755)) double IWorksheetFunction::DMin ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(756)) double IWorksheetFunction::DMax ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(757)) double IWorksheetFunction::DStDev ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(758)) double IWorksheetFunction::Var ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(759)) double IWorksheetFunction::DVar ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(760)) _bstr_t IWorksheetFunction::Text ( const _variant_t & Arg1, _bstr_t Arg2 );
__declspec(implementation_key(761)) _variant_t IWorksheetFunction::LinEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(762)) _variant_t IWorksheetFunction::Trend ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(763)) _variant_t IWorksheetFunction::LogEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(764)) _variant_t IWorksheetFunction::Growth ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(765)) double IWorksheetFunction::Pv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(766)) double IWorksheetFunction::Fv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(767)) double IWorksheetFunction::NPer ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(768)) double IWorksheetFunction::Pmt ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(769)) double IWorksheetFunction::Rate ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(770)) double IWorksheetFunction::MIrr ( const _variant_t & Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(771)) double IWorksheetFunction::Irr ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(772)) double IWorksheetFunction::Match ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(773)) double IWorksheetFunction::Weekday ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(774)) double IWorksheetFunction::Search ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(775)) _variant_t IWorksheetFunction::Transpose ( const _variant_t & Arg1 );
__declspec(implementation_key(776)) double IWorksheetFunction::Atan2 ( double Arg1, double Arg2 );
__declspec(implementation_key(777)) double IWorksheetFunction::Asin ( double Arg1 );
__declspec(implementation_key(778)) double IWorksheetFunction::Acos ( double Arg1 );
__declspec(implementation_key(779)) _variant_t IWorksheetFunction::Choose ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(780)) _variant_t IWorksheetFunction::HLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(781)) _variant_t IWorksheetFunction::VLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(782)) double IWorksheetFunction::Log ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(783)) _bstr_t IWorksheetFunction::Proper ( _bstr_t Arg1 );
__declspec(implementation_key(784)) _bstr_t IWorksheetFunction::Trim ( _bstr_t Arg1 );
__declspec(implementation_key(785)) _bstr_t IWorksheetFunction::Replace ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(786)) _bstr_t IWorksheetFunction::Substitute ( _bstr_t Arg1, _bstr_t Arg2, _bstr_t Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(787)) double IWorksheetFunction::Find ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(788)) VARIANT_BOOL IWorksheetFunction::IsErr ( const _variant_t & Arg1 );
__declspec(implementation_key(789)) VARIANT_BOOL IWorksheetFunction::IsText ( const _variant_t & Arg1 );
__declspec(implementation_key(790)) VARIANT_BOOL IWorksheetFunction::IsNumber ( const _variant_t & Arg1 );
__declspec(implementation_key(791)) double IWorksheetFunction::Sln ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(792)) double IWorksheetFunction::Syd ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(793)) double IWorksheetFunction::Ddb ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(794)) _bstr_t IWorksheetFunction::Clean ( _bstr_t Arg1 );
__declspec(implementation_key(795)) double IWorksheetFunction::MDeterm ( const _variant_t & Arg1 );
__declspec(implementation_key(796)) _variant_t IWorksheetFunction::MInverse ( const _variant_t & Arg1 );
__declspec(implementation_key(797)) _variant_t IWorksheetFunction::MMult ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(798)) double IWorksheetFunction::Ipmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(799)) double IWorksheetFunction::Ppmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(800)) double IWorksheetFunction::CountA ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(801)) double IWorksheetFunction::Product ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(802)) double IWorksheetFunction::Fact ( double Arg1 );
__declspec(implementation_key(803)) double IWorksheetFunction::DProduct ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(804)) VARIANT_BOOL IWorksheetFunction::IsNonText ( const _variant_t & Arg1 );
__declspec(implementation_key(805)) double IWorksheetFunction::StDevP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(806)) double IWorksheetFunction::VarP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(807)) double IWorksheetFunction::DStDevP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(808)) double IWorksheetFunction::DVarP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(809)) VARIANT_BOOL IWorksheetFunction::IsLogical ( const _variant_t & Arg1 );
__declspec(implementation_key(810)) double IWorksheetFunction::DCountA ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(811)) _bstr_t IWorksheetFunction::USDollar ( double Arg1, double Arg2 );
__declspec(implementation_key(812)) double IWorksheetFunction::FindB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(813)) double IWorksheetFunction::SearchB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(814)) _bstr_t IWorksheetFunction::ReplaceB ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(815)) double IWorksheetFunction::RoundUp ( double Arg1, double Arg2 );
__declspec(implementation_key(816)) double IWorksheetFunction::RoundDown ( double Arg1, double Arg2 );
__declspec(implementation_key(817)) double IWorksheetFunction::Rank ( double Arg1, struct Range * Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(818)) double IWorksheetFunction::Days360 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(819)) double IWorksheetFunction::Vdb ( double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, const _variant_t & Arg6, const _variant_t & Arg7 );
__declspec(implementation_key(820)) double IWorksheetFunction::Median ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(821)) double IWorksheetFunction::SumProduct ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(822)) double IWorksheetFunction::Sinh ( double Arg1 );
__declspec(implementation_key(823)) double IWorksheetFunction::Cosh ( double Arg1 );
__declspec(implementation_key(824)) double IWorksheetFunction::Tanh ( double Arg1 );
__declspec(implementation_key(825)) double IWorksheetFunction::Asinh ( double Arg1 );
__declspec(implementation_key(826)) double IWorksheetFunction::Acosh ( double Arg1 );
__declspec(implementation_key(827)) double IWorksheetFunction::Atanh ( double Arg1 );
__declspec(implementation_key(828)) _variant_t IWorksheetFunction::DGet ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(829)) double IWorksheetFunction::Db ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(830)) _variant_t IWorksheetFunction::Frequency ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(831)) double IWorksheetFunction::AveDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(832)) double IWorksheetFunction::BetaDist ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(833)) double IWorksheetFunction::GammaLn ( double Arg1 );
__declspec(implementation_key(834)) double IWorksheetFunction::BetaInv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(835)) double IWorksheetFunction::BinomDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(836)) double IWorksheetFunction::ChiDist ( double Arg1, double Arg2 );
__declspec(implementation_key(837)) double IWorksheetFunction::ChiInv ( double Arg1, double Arg2 );
__declspec(implementation_key(838)) double IWorksheetFunction::Combin ( double Arg1, double Arg2 );
__declspec(implementation_key(839)) double IWorksheetFunction::Confidence ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(840)) double IWorksheetFunction::CritBinom ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(841)) double IWorksheetFunction::Even ( double Arg1 );
__declspec(implementation_key(842)) double IWorksheetFunction::ExponDist ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(843)) double IWorksheetFunction::FDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(844)) double IWorksheetFunction::FInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(845)) double IWorksheetFunction::Fisher ( double Arg1 );
__declspec(implementation_key(846)) double IWorksheetFunction::FisherInv ( double Arg1 );
__declspec(implementation_key(847)) double IWorksheetFunction::Floor ( double Arg1, double Arg2 );
__declspec(implementation_key(848)) double IWorksheetFunction::GammaDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(849)) double IWorksheetFunction::GammaInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(850)) double IWorksheetFunction::Ceiling ( double Arg1, double Arg2 );
__declspec(implementation_key(851)) double IWorksheetFunction::HypGeomDist ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(852)) double IWorksheetFunction::LogNormDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(853)) double IWorksheetFunction::LogInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(854)) double IWorksheetFunction::NegBinomDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(855)) double IWorksheetFunction::NormDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(856)) double IWorksheetFunction::NormSDist ( double Arg1 );
__declspec(implementation_key(857)) double IWorksheetFunction::NormInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(858)) double IWorksheetFunction::NormSInv ( double Arg1 );
__declspec(implementation_key(859)) double IWorksheetFunction::Standardize ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(860)) double IWorksheetFunction::Odd ( double Arg1 );
__declspec(implementation_key(861)) double IWorksheetFunction::Permut ( double Arg1, double Arg2 );
__declspec(implementation_key(862)) double IWorksheetFunction::Poisson ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(863)) double IWorksheetFunction::TDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(864)) double IWorksheetFunction::Weibull ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(865)) double IWorksheetFunction::SumXMY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(866)) double IWorksheetFunction::SumX2MY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(867)) double IWorksheetFunction::SumX2PY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(868)) double IWorksheetFunction::ChiTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(869)) double IWorksheetFunction::Correl ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(870)) double IWorksheetFunction::Covar ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(871)) double IWorksheetFunction::Forecast ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(872)) double IWorksheetFunction::FTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(873)) double IWorksheetFunction::Intercept ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(874)) double IWorksheetFunction::Pearson ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(875)) double IWorksheetFunction::RSq ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(876)) double IWorksheetFunction::StEyx ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(877)) double IWorksheetFunction::Slope ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(878)) double IWorksheetFunction::TTest ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(879)) double IWorksheetFunction::Prob ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(880)) double IWorksheetFunction::DevSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(881)) double IWorksheetFunction::GeoMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(882)) double IWorksheetFunction::HarMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(883)) double IWorksheetFunction::SumSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(884)) double IWorksheetFunction::Kurt ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(885)) double IWorksheetFunction::Skew ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(886)) double IWorksheetFunction::ZTest ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(887)) double IWorksheetFunction::Large ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(888)) double IWorksheetFunction::Small ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(889)) double IWorksheetFunction::Quartile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(890)) double IWorksheetFunction::Percentile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(891)) double IWorksheetFunction::PercentRank ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(892)) double IWorksheetFunction::Mode ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(893)) double IWorksheetFunction::TrimMean ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(894)) double IWorksheetFunction::TInv ( double Arg1, double Arg2 );
__declspec(implementation_key(895)) double IWorksheetFunction::Power ( double Arg1, double Arg2 );
__declspec(implementation_key(896)) double IWorksheetFunction::Radians ( double Arg1 );
__declspec(implementation_key(897)) double IWorksheetFunction::Degrees ( double Arg1 );
__declspec(implementation_key(898)) double IWorksheetFunction::Subtotal ( double Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(899)) double IWorksheetFunction::SumIf ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(900)) double IWorksheetFunction::CountIf ( struct Range * Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(901)) double IWorksheetFunction::CountBlank ( struct Range * Arg1 );
__declspec(implementation_key(902)) double IWorksheetFunction::Ispmt ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(903)) _bstr_t IWorksheetFunction::Roman ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(904)) _bstr_t IWorksheetFunction::Asc ( _bstr_t Arg1 );
__declspec(implementation_key(905)) _bstr_t IWorksheetFunction::Dbcs ( _bstr_t Arg1 );
__declspec(implementation_key(906)) _bstr_t IWorksheetFunction::Phonetic ( struct Range * Arg1 );
__declspec(implementation_key(907)) _bstr_t IWorksheetFunction::BahtText ( double Arg1 );
__declspec(implementation_key(908)) _bstr_t IWorksheetFunction::ThaiDayOfWeek ( double Arg1 );
__declspec(implementation_key(909)) _bstr_t IWorksheetFunction::ThaiDigit ( _bstr_t Arg1 );
__declspec(implementation_key(910)) _bstr_t IWorksheetFunction::ThaiMonthOfYear ( double Arg1 );
__declspec(implementation_key(911)) _bstr_t IWorksheetFunction::ThaiNumSound ( double Arg1 );
__declspec(implementation_key(912)) _bstr_t IWorksheetFunction::ThaiNumString ( double Arg1 );
__declspec(implementation_key(913)) double IWorksheetFunction::ThaiStringLength ( _bstr_t Arg1 );
__declspec(implementation_key(914)) VARIANT_BOOL IWorksheetFunction::IsThaiDigit ( _bstr_t Arg1 );
__declspec(implementation_key(915)) double IWorksheetFunction::RoundBahtDown ( double Arg1 );
__declspec(implementation_key(916)) double IWorksheetFunction::RoundBahtUp ( double Arg1 );
__declspec(implementation_key(917)) double IWorksheetFunction::ThaiYear ( double Arg1 );
__declspec(implementation_key(918)) _variant_t IWorksheetFunction::RTD ( const _variant_t & progID, const _variant_t & server, const _variant_t & topic1, const _variant_t & topic2, const _variant_t & topic3, const _variant_t & topic4, const _variant_t & topic5, const _variant_t & topic6, const _variant_t & topic7, const _variant_t & topic8, const _variant_t & topic9, const _variant_t & topic10, const _variant_t & topic11, const _variant_t & topic12, const _variant_t & topic13, const _variant_t & topic14, const _variant_t & topic15, const _variant_t & topic16, const _variant_t & topic17, const _variant_t & topic18, const _variant_t & topic19, const _variant_t & topic20, const _variant_t & topic21, const _variant_t & topic22, const _variant_t & topic23, const _variant_t & topic24, const _variant_t & topic25, const _variant_t & topic26, const _variant_t & topic27, const _variant_t & topic28 );
__declspec(implementation_key(919)) _ApplicationPtr IRange::GetApplication ( );
__declspec(implementation_key(920)) enum XlCreator IRange::GetCreator ( );
__declspec(implementation_key(921)) IDispatchPtr IRange::GetParent ( );
__declspec(implementation_key(922)) _variant_t IRange::Activate ( );
__declspec(implementation_key(923)) _variant_t IRange::GetAddIndent ( );
__declspec(implementation_key(924)) void IRange::PutAddIndent ( const _variant_t & RHS );
__declspec(implementation_key(925)) _bstr_t IRange::GetAddress ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo, long lcid );
__declspec(implementation_key(926)) _bstr_t IRange::GetAddressLocal ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo );
__declspec(implementation_key(927)) _variant_t IRange::AdvancedFilter ( enum XlFilterAction Action, const _variant_t & CriteriaRange, const _variant_t & CopyToRange, const _variant_t & Unique );
__declspec(implementation_key(928)) _variant_t IRange::ApplyNames ( const _variant_t & Names, const _variant_t & IgnoreRelativeAbsolute, const _variant_t & UseRowColumnNames, const _variant_t & OmitColumn, const _variant_t & OmitRow, enum XlApplyNamesOrder Order, const _variant_t & AppendLast );
__declspec(implementation_key(929)) _variant_t IRange::ApplyOutlineStyles ( );
__declspec(implementation_key(930)) AreasPtr IRange::GetAreas ( );
__declspec(implementation_key(931)) _bstr_t IRange::AutoComplete ( _bstr_t String );
__declspec(implementation_key(932)) _variant_t IRange::AutoFill ( struct Range * Destination, enum XlAutoFillType Type );
__declspec(implementation_key(933)) _variant_t IRange::AutoFilter ( const _variant_t & Field, const _variant_t & Criteria1, enum XlAutoFilterOperator Operator, const _variant_t & Criteria2, const _variant_t & VisibleDropDown );
__declspec(implementation_key(934)) _variant_t IRange::AutoFit ( );
__declspec(implementation_key(935)) _variant_t IRange::AutoFormat ( enum XlRangeAutoFormat Format, const _variant_t & Number, const _variant_t & Font, const _variant_t & Alignment, const _variant_t & Border, const _variant_t & Pattern, const _variant_t & Width );
__declspec(implementation_key(936)) _variant_t IRange::AutoOutline ( );
__declspec(implementation_key(937)) _variant_t IRange::BorderAround ( const _variant_t & LineStyle, enum XlBorderWeight Weight, enum XlColorIndex ColorIndex, const _variant_t & Color );
__declspec(implementation_key(938)) BordersPtr IRange::GetBorders ( );
__declspec(implementation_key(939)) _variant_t IRange::Calculate ( );
__declspec(implementation_key(940)) RangePtr IRange::GetCells ( );
__declspec(implementation_key(941)) CharactersPtr IRange::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(942)) _variant_t IRange::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(943)) _variant_t IRange::Clear ( );
__declspec(implementation_key(944)) _variant_t IRange::ClearContents ( );
__declspec(implementation_key(945)) _variant_t IRange::ClearFormats ( );
__declspec(implementation_key(946)) _variant_t IRange::ClearNotes ( );
__declspec(implementation_key(947)) _variant_t IRange::ClearOutline ( );
__declspec(implementation_key(948)) long IRange::GetColumn ( );
__declspec(implementation_key(949)) RangePtr IRange::ColumnDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(950)) RangePtr IRange::GetColumns ( );
__declspec(implementation_key(951)) _variant_t IRange::GetColumnWidth ( );
__declspec(implementation_key(952)) void IRange::PutColumnWidth ( const _variant_t & RHS );
__declspec(implementation_key(953)) _variant_t IRange::Consolidate ( const _variant_t & Sources, const _variant_t & Function, const _variant_t & TopRow, const _variant_t & LeftColumn, const _variant_t & CreateLinks );
__declspec(implementation_key(954)) _variant_t IRange::Copy ( const _variant_t & Destination );
__declspec(implementation_key(955)) long IRange::CopyFromRecordset ( IUnknown * Data, const _variant_t & MaxRows, const _variant_t & MaxColumns );
__declspec(implementation_key(956)) _variant_t IRange::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(957)) long IRange::GetCount ( );
__declspec(implementation_key(958)) _variant_t IRange::CreateNames ( const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right );
__declspec(implementation_key(959)) _variant_t IRange::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU );
__declspec(implementation_key(960)) RangePtr IRange::GetCurrentArray ( );
__declspec(implementation_key(961)) RangePtr IRange::GetCurrentRegion ( );
__declspec(implementation_key(962)) _variant_t IRange::Cut ( const _variant_t & Destination );
__declspec(implementation_key(963)) _variant_t IRange::DataSeries ( const _variant_t & Rowcol, enum XlDataSeriesType Type, enum XlDataSeriesDate Date, const _variant_t & Step, const _variant_t & Stop, const _variant_t & Trend );
__declspec(implementation_key(964)) _variant_t IRange::Get_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid );
__declspec(implementation_key(965)) void IRange::Put_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid, const _variant_t & RHS );
__declspec(implementation_key(966)) _variant_t IRange::Delete ( const _variant_t & Shift );
__declspec(implementation_key(967)) RangePtr IRange::GetDependents ( );
__declspec(implementation_key(968)) _variant_t IRange::ignorethis ( );
__declspec(implementation_key(969)) RangePtr IRange::GetDirectDependents ( );
__declspec(implementation_key(970)) RangePtr IRange::GetDirectPrecedents ( );
__declspec(implementation_key(971)) _variant_t IRange::EditionOptions ( enum XlEditionType Type, enum XlEditionOptionsOption Option, const _variant_t & Name, const _variant_t & Reference, enum XlPictureAppearance Appearance, enum XlPictureAppearance ChartSize, const _variant_t & Format );
__declspec(implementation_key(972)) RangePtr IRange::GetEnd ( enum XlDirection Direction );
__declspec(implementation_key(973)) RangePtr IRange::GetEntireColumn ( );
__declspec(implementation_key(974)) RangePtr IRange::GetEntireRow ( );
__declspec(implementation_key(975)) _variant_t IRange::FillDown ( );
__declspec(implementation_key(976)) _variant_t IRange::FillLeft ( );
__declspec(implementation_key(977)) _variant_t IRange::FillRight ( );
__declspec(implementation_key(978)) _variant_t IRange::FillUp ( );
__declspec(implementation_key(979)) RangePtr IRange::Find ( const _variant_t & What, const _variant_t & After, const _variant_t & LookIn, const _variant_t & LookAt, const _variant_t & SearchOrder, enum XlSearchDirection SearchDirection, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat );
__declspec(implementation_key(980)) RangePtr IRange::FindNext ( const _variant_t & After );
__declspec(implementation_key(981)) RangePtr IRange::FindPrevious ( const _variant_t & After );
__declspec(implementation_key(982)) FontPtr IRange::GetFont ( );
__declspec(implementation_key(983)) _variant_t IRange::GetFormula ( long lcid );
__declspec(implementation_key(984)) void IRange::PutFormula ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(985)) _variant_t IRange::GetFormulaArray ( );
__declspec(implementation_key(986)) void IRange::PutFormulaArray ( const _variant_t & RHS );
__declspec(implementation_key(987)) enum XlFormulaLabel IRange::GetFormulaLabel ( );
__declspec(implementation_key(988)) void IRange::PutFormulaLabel ( enum XlFormulaLabel RHS );
__declspec(implementation_key(989)) _variant_t IRange::GetFormulaHidden ( );
__declspec(implementation_key(990)) void IRange::PutFormulaHidden ( const _variant_t & RHS );
__declspec(implementation_key(991)) _variant_t IRange::GetFormulaLocal ( );
__declspec(implementation_key(992)) void IRange::PutFormulaLocal ( const _variant_t & RHS );
__declspec(implementation_key(993)) _variant_t IRange::GetFormulaR1C1 ( long lcid );
__declspec(implementation_key(994)) void IRange::PutFormulaR1C1 ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(995)) _variant_t IRange::GetFormulaR1C1Local ( );
__declspec(implementation_key(996)) void IRange::PutFormulaR1C1Local ( const _variant_t & RHS );
__declspec(implementation_key(997)) _variant_t IRange::FunctionWizard ( );
__declspec(implementation_key(998)) VARIANT_BOOL IRange::GoalSeek ( const _variant_t & Goal, struct Range * ChangingCell );
__declspec(implementation_key(999)) _variant_t IRange::Group ( const _variant_t & Start, const _variant_t & End, const _variant_t & By, const _variant_t & Periods );
__declspec(implementation_key(1000)) _variant_t IRange::GetHasArray ( );
__declspec(implementation_key(1001)) _variant_t IRange::GetHasFormula ( );
__declspec(implementation_key(1002)) _variant_t IRange::GetHeight ( );
__declspec(implementation_key(1003)) _variant_t IRange::GetHidden ( );
__declspec(implementation_key(1004)) void IRange::PutHidden ( const _variant_t & RHS );
__declspec(implementation_key(1005)) _variant_t IRange::GetHorizontalAlignment ( );
__declspec(implementation_key(1006)) void IRange::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1007)) _variant_t IRange::GetIndentLevel ( );
__declspec(implementation_key(1008)) void IRange::PutIndentLevel ( const _variant_t & RHS );
__declspec(implementation_key(1009)) HRESULT IRange::InsertIndent ( long InsertAmount );
__declspec(implementation_key(1010)) _variant_t IRange::Insert ( const _variant_t & Shift, const _variant_t & CopyOrigin );
__declspec(implementation_key(1011)) InteriorPtr IRange::GetInterior ( );
__declspec(implementation_key(1012)) _variant_t IRange::GetItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid );
__declspec(implementation_key(1013)) void IRange::PutItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid, const _variant_t & RHS );
__declspec(implementation_key(1014)) _variant_t IRange::Justify ( );
__declspec(implementation_key(1015)) _variant_t IRange::GetLeft ( );
__declspec(implementation_key(1016)) long IRange::GetListHeaderRows ( );
__declspec(implementation_key(1017)) _variant_t IRange::ListNames ( );
__declspec(implementation_key(1018)) enum XlLocationInTable IRange::GetLocationInTable ( );
__declspec(implementation_key(1019)) _variant_t IRange::GetLocked ( );
__declspec(implementation_key(1020)) void IRange::PutLocked ( const _variant_t & RHS );
__declspec(implementation_key(1021)) HRESULT IRange::Merge ( const _variant_t & Across );
__declspec(implementation_key(1022)) HRESULT IRange::UnMerge ( );
__declspec(implementation_key(1023)) RangePtr IRange::GetMergeArea ( );
__declspec(implementation_key(1024)) _variant_t IRange::GetMergeCells ( );
__declspec(implementation_key(1025)) void IRange::PutMergeCells ( const _variant_t & RHS );
__declspec(implementation_key(1026)) _variant_t IRange::GetName ( );
__declspec(implementation_key(1027)) void IRange::PutName ( const _variant_t & RHS );
__declspec(implementation_key(1028)) _variant_t IRange::NavigateArrow ( const _variant_t & TowardPrecedent, const _variant_t & ArrowNumber, const _variant_t & LinkNumber );
__declspec(implementation_key(1029)) IUnknownPtr IRange::Get_NewEnum ( );
__declspec(implementation_key(1030)) RangePtr IRange::GetNext ( );
__declspec(implementation_key(1031)) _bstr_t IRange::NoteText ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1032)) _variant_t IRange::GetNumberFormat ( );
__declspec(implementation_key(1033)) void IRange::PutNumberFormat ( const _variant_t & RHS );
__declspec(implementation_key(1034)) _variant_t IRange::GetNumberFormatLocal ( );
__declspec(implementation_key(1035)) void IRange::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(1036)) RangePtr IRange::GetOffset ( const _variant_t & RowOffset, const _variant_t & ColumnOffset );
__declspec(implementation_key(1037)) _variant_t IRange::GetOrientation ( );
__declspec(implementation_key(1038)) void IRange::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(1039)) _variant_t IRange::GetOutlineLevel ( );
__declspec(implementation_key(1040)) void IRange::PutOutlineLevel ( const _variant_t & RHS );
__declspec(implementation_key(1041)) long IRange::GetPageBreak ( );
__declspec(implementation_key(1042)) void IRange::PutPageBreak ( long RHS );
__declspec(implementation_key(1043)) _variant_t IRange::Parse ( const _variant_t & ParseLine, const _variant_t & Destination );
__declspec(implementation_key(1044)) _variant_t IRange::_PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose );
__declspec(implementation_key(1045)) PivotFieldPtr IRange::GetPivotField ( );
__declspec(implementation_key(1046)) PivotItemPtr IRange::GetPivotItem ( );
__declspec(implementation_key(1047)) PivotTablePtr IRange::GetPivotTable ( );
__declspec(implementation_key(1048)) RangePtr IRange::GetPrecedents ( );
__declspec(implementation_key(1049)) _variant_t IRange::GetPrefixCharacter ( );
__declspec(implementation_key(1050)) RangePtr IRange::GetPrevious ( );
__declspec(implementation_key(1051)) _variant_t IRange::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(1052)) _variant_t IRange::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(1053)) _QueryTablePtr IRange::GetQueryTable ( );
__declspec(implementation_key(1054)) RangePtr IRange::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(1055)) _variant_t IRange::RemoveSubtotal ( );
__declspec(implementation_key(1056)) VARIANT_BOOL IRange::Replace ( const _variant_t & What, const _variant_t & Replacement, const _variant_t & LookAt, const _variant_t & SearchOrder, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat, const _variant_t & ReplaceFormat );
__declspec(implementation_key(1057)) RangePtr IRange::GetResize ( const _variant_t & RowSize, const _variant_t & ColumnSize );
__declspec(implementation_key(1058)) long IRange::GetRow ( );
__declspec(implementation_key(1059)) RangePtr IRange::RowDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(1060)) _variant_t IRange::GetRowHeight ( );
__declspec(implementation_key(1061)) void IRange::PutRowHeight ( const _variant_t & RHS );
__declspec(implementation_key(1062)) RangePtr IRange::GetRows ( );
__declspec(implementation_key(1063)) _variant_t IRange::Run ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(1064)) _variant_t IRange::Select ( );
__declspec(implementation_key(1065)) _variant_t IRange::Show ( );
__declspec(implementation_key(1066)) _variant_t IRange::ShowDependents ( const _variant_t & Remove );
__declspec(implementation_key(1067)) _variant_t IRange::GetShowDetail ( );
__declspec(implementation_key(1068)) void IRange::PutShowDetail ( const _variant_t & RHS );
__declspec(implementation_key(1069)) _variant_t IRange::ShowErrors ( );
__declspec(implementation_key(1070)) _variant_t IRange::ShowPrecedents ( const _variant_t & Remove );
__declspec(implementation_key(1071)) _variant_t IRange::GetShrinkToFit ( );
__declspec(implementation_key(1072)) void IRange::PutShrinkToFit ( const _variant_t & RHS );
__declspec(implementation_key(1073)) _variant_t IRange::Sort ( const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Key2, const _variant_t & Type, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortMethod SortMethod, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 );
__declspec(implementation_key(1074)) _variant_t IRange::SortSpecial ( enum XlSortMethod SortMethod, const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Type, const _variant_t & Key2, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 );
__declspec(implementation_key(1075)) SoundNotePtr IRange::GetSoundNote ( );
__declspec(implementation_key(1076)) RangePtr IRange::SpecialCells ( enum XlCellType Type, const _variant_t & Value );
__declspec(implementation_key(1077)) _variant_t IRange::GetStyle ( );
__declspec(implementation_key(1078)) void IRange::PutStyle ( const _variant_t & RHS );
__declspec(implementation_key(1079)) _variant_t IRange::SubscribeTo ( _bstr_t Edition, enum XlSubscribeToFormat Format );
__declspec(implementation_key(1080)) _variant_t IRange::Subtotal ( long GroupBy, enum XlConsolidationFunction Function, const _variant_t & TotalList, const _variant_t & Replace, const _variant_t & PageBreaks, enum XlSummaryRow SummaryBelowData );
__declspec(implementation_key(1081)) _variant_t IRange::GetSummary ( );
__declspec(implementation_key(1082)) _variant_t IRange::Table ( const _variant_t & RowInput, const _variant_t & ColumnInput );
__declspec(implementation_key(1083)) _variant_t IRange::GetText ( );
__declspec(implementation_key(1084)) _variant_t IRange::TextToColumns ( const _variant_t & Destination, enum XlTextParsingType DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, const _variant_t & TrailingMinusNumbers );
__declspec(implementation_key(1085)) _variant_t IRange::GetTop ( );
__declspec(implementation_key(1086)) _variant_t IRange::Ungroup ( );
__declspec(implementation_key(1087)) _variant_t IRange::GetUseStandardHeight ( );
__declspec(implementation_key(1088)) void IRange::PutUseStandardHeight ( const _variant_t & RHS );
__declspec(implementation_key(1089)) _variant_t IRange::GetUseStandardWidth ( );
__declspec(implementation_key(1090)) void IRange::PutUseStandardWidth ( const _variant_t & RHS );
__declspec(implementation_key(1091)) ValidationPtr IRange::GetValidation ( );
__declspec(implementation_key(1092)) _variant_t IRange::GetValue ( const _variant_t & RangeValueDataType, long lcid );
__declspec(implementation_key(1093)) void IRange::PutValue ( const _variant_t & RangeValueDataType, long lcid, const _variant_t & RHS );
__declspec(implementation_key(1094)) _variant_t IRange::GetValue2 ( long lcid );
__declspec(implementation_key(1095)) void IRange::PutValue2 ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(1096)) _variant_t IRange::GetVerticalAlignment ( );
__declspec(implementation_key(1097)) void IRange::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(1098)) _variant_t IRange::GetWidth ( );
__declspec(implementation_key(1099)) _WorksheetPtr IRange::GetWorksheet ( );
__declspec(implementation_key(1100)) _variant_t IRange::GetWrapText ( );
__declspec(implementation_key(1101)) void IRange::PutWrapText ( const _variant_t & RHS );
__declspec(implementation_key(1102)) CommentPtr IRange::AddComment ( const _variant_t & Text );
__declspec(implementation_key(1103)) CommentPtr IRange::GetComment ( );
__declspec(implementation_key(1104)) HRESULT IRange::ClearComments ( );
__declspec(implementation_key(1105)) PhoneticPtr IRange::GetPhonetic ( );
__declspec(implementation_key(1106)) FormatConditionsPtr IRange::GetFormatConditions ( );
__declspec(implementation_key(1107)) long IRange::GetReadingOrder ( );
__declspec(implementation_key(1108)) void IRange::PutReadingOrder ( long RHS );
__declspec(implementation_key(1109)) HyperlinksPtr IRange::GetHyperlinks ( );
__declspec(implementation_key(1110)) PhoneticsPtr IRange::GetPhonetics ( );
__declspec(implementation_key(1111)) HRESULT IRange::SetPhonetic ( );
__declspec(implementation_key(1112)) _bstr_t IRange::GetID ( );
__declspec(implementation_key(1113)) void IRange::PutID ( _bstr_t RHS );
__declspec(implementation_key(1114)) _variant_t IRange::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(1115)) PivotCellPtr IRange::GetPivotCell ( );
__declspec(implementation_key(1116)) HRESULT IRange::Dirty ( );
__declspec(implementation_key(1117)) ErrorsPtr IRange::GetErrors ( );
__declspec(implementation_key(1118)) SmartTagsPtr IRange::GetSmartTags ( );
__declspec(implementation_key(1119)) HRESULT IRange::Speak ( const _variant_t & SpeakDirection, const _variant_t & SpeakFormulas );
__declspec(implementation_key(1120)) _variant_t IRange::PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose );
__declspec(implementation_key(1121)) VARIANT_BOOL IRange::GetAllowEdit ( );
__declspec(implementation_key(1122)) HRESULT IChartEvents::Activate ( );
__declspec(implementation_key(1123)) HRESULT IChartEvents::Deactivate ( );
__declspec(implementation_key(1124)) HRESULT IChartEvents::Resize ( );
__declspec(implementation_key(1125)) HRESULT IChartEvents::MouseDown ( long Button, long Shift, long x, long y );
__declspec(implementation_key(1126)) HRESULT IChartEvents::MouseUp ( long Button, long Shift, long x, long y );
__declspec(implementation_key(1127)) HRESULT IChartEvents::MouseMove ( long Button, long Shift, long x, long y );
__declspec(implementation_key(1128)) HRESULT IChartEvents::BeforeRightClick ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1129)) HRESULT IChartEvents::DragPlot ( );
__declspec(implementation_key(1130)) HRESULT IChartEvents::DragOver ( );
__declspec(implementation_key(1131)) HRESULT IChartEvents::BeforeDoubleClick ( long ElementID, long Arg1, long Arg2, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1132)) HRESULT IChartEvents::Select ( long ElementID, long Arg1, long Arg2 );
__declspec(implementation_key(1133)) HRESULT IChartEvents::SeriesChange ( long SeriesIndex, long PointIndex );
__declspec(implementation_key(1134)) HRESULT IChartEvents::Calculate ( );
__declspec(implementation_key(1135)) _ApplicationPtr _Chart::GetApplication ( );
__declspec(implementation_key(1136)) enum XlCreator _Chart::GetCreator ( );
__declspec(implementation_key(1137)) IDispatchPtr _Chart::GetParent ( );
__declspec(implementation_key(1138)) HRESULT _Chart::Activate ( long lcid );
__declspec(implementation_key(1139)) HRESULT _Chart::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(1140)) HRESULT _Chart::Delete ( long lcid );
__declspec(implementation_key(1141)) _bstr_t _Chart::GetCodeName ( );
__declspec(implementation_key(1142)) _bstr_t _Chart::Get_CodeName ( );
__declspec(implementation_key(1143)) void _Chart::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(1144)) long _Chart::GetIndex ( long lcid );
__declspec(implementation_key(1145)) HRESULT _Chart::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(1146)) _bstr_t _Chart::GetName ( );
__declspec(implementation_key(1147)) void _Chart::PutName ( _bstr_t RHS );
__declspec(implementation_key(1148)) IDispatchPtr _Chart::GetNext ( );
__declspec(implementation_key(1149)) _bstr_t _Chart::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(1150)) void _Chart::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1151)) _bstr_t _Chart::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(1152)) void _Chart::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1153)) _bstr_t _Chart::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(1154)) void _Chart::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1155)) PageSetupPtr _Chart::GetPageSetup ( );
__declspec(implementation_key(1156)) IDispatchPtr _Chart::GetPrevious ( );
__declspec(implementation_key(1157)) HRESULT _Chart::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(1158)) HRESULT _Chart::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(1159)) HRESULT _Chart::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(1160)) VARIANT_BOOL _Chart::GetProtectContents ( long lcid );
__declspec(implementation_key(1161)) VARIANT_BOOL _Chart::GetProtectDrawingObjects ( long lcid );
__declspec(implementation_key(1162)) VARIANT_BOOL _Chart::GetProtectionMode ( long lcid );
__declspec(implementation_key(1163)) HRESULT _Chart::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(1164)) HRESULT _Chart::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(1165)) HRESULT _Chart::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(1166)) enum XlSheetVisibility _Chart::GetVisible ( long lcid );
__declspec(implementation_key(1167)) void _Chart::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(1168)) ShapesPtr _Chart::GetShapes ( );
__declspec(implementation_key(1169)) HRESULT _Chart::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, long lcid );
__declspec(implementation_key(1170)) IDispatchPtr _Chart::Arcs ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1171)) ChartGroupPtr _Chart::GetArea3DGroup ( long lcid );
__declspec(implementation_key(1172)) IDispatchPtr _Chart::AreaGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1173)) HRESULT _Chart::AutoFormat ( long Gallery, const _variant_t & Format );
__declspec(implementation_key(1174)) VARIANT_BOOL _Chart::GetAutoScaling ( long lcid );
__declspec(implementation_key(1175)) void _Chart::PutAutoScaling ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1176)) IDispatchPtr _Chart::Axes ( const _variant_t & Type, enum XlAxisGroup AxisGroup, long lcid );
__declspec(implementation_key(1177)) HRESULT _Chart::SetBackgroundPicture ( _bstr_t Filename );
__declspec(implementation_key(1178)) ChartGroupPtr _Chart::GetBar3DGroup ( long lcid );
__declspec(implementation_key(1179)) IDispatchPtr _Chart::BarGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1180)) IDispatchPtr _Chart::Buttons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1181)) ChartAreaPtr _Chart::GetChartArea ( long lcid );
__declspec(implementation_key(1182)) IDispatchPtr _Chart::ChartGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1183)) IDispatchPtr _Chart::ChartObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1184)) ChartTitlePtr _Chart::GetChartTitle ( long lcid );
__declspec(implementation_key(1185)) HRESULT _Chart::ChartWizard ( const _variant_t & Source, const _variant_t & Gallery, const _variant_t & Format, const _variant_t & PlotBy, const _variant_t & CategoryLabels, const _variant_t & SeriesLabels, const _variant_t & HasLegend, const _variant_t & Title, const _variant_t & CategoryTitle, const _variant_t & ValueTitle, const _variant_t & ExtraTitle, long lcid );
__declspec(implementation_key(1186)) IDispatchPtr _Chart::CheckBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1187)) HRESULT _Chart::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid );
__declspec(implementation_key(1188)) ChartGroupPtr _Chart::GetColumn3DGroup ( long lcid );
__declspec(implementation_key(1189)) IDispatchPtr _Chart::ColumnGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1190)) HRESULT _Chart::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format, enum XlPictureAppearance Size, long lcid );
__declspec(implementation_key(1191)) CornersPtr _Chart::GetCorners ( long lcid );
__declspec(implementation_key(1192)) HRESULT _Chart::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, enum XlPictureAppearance Size, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU, long lcid );
__declspec(implementation_key(1193)) DataTablePtr _Chart::GetDataTable ( );
__declspec(implementation_key(1194)) long _Chart::GetDepthPercent ( long lcid );
__declspec(implementation_key(1195)) void _Chart::PutDepthPercent ( long lcid, long RHS );
__declspec(implementation_key(1196)) HRESULT _Chart::Deselect ( long lcid );
__declspec(implementation_key(1197)) enum XlDisplayBlanksAs _Chart::GetDisplayBlanksAs ( long lcid );
__declspec(implementation_key(1198)) void _Chart::PutDisplayBlanksAs ( long lcid, enum XlDisplayBlanksAs RHS );
__declspec(implementation_key(1199)) IDispatchPtr _Chart::DoughnutGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1200)) IDispatchPtr _Chart::Drawings ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1201)) IDispatchPtr _Chart::DrawingObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1202)) IDispatchPtr _Chart::DropDowns ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1203)) long _Chart::GetElevation ( long lcid );
__declspec(implementation_key(1204)) void _Chart::PutElevation ( long lcid, long RHS );
__declspec(implementation_key(1205)) _variant_t _Chart::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(1206)) _variant_t _Chart::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(1207)) FloorPtr _Chart::GetFloor ( long lcid );
__declspec(implementation_key(1208)) long _Chart::GetGapDepth ( long lcid );
__declspec(implementation_key(1209)) void _Chart::PutGapDepth ( long lcid, long RHS );
__declspec(implementation_key(1210)) IDispatchPtr _Chart::GroupBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1211)) IDispatchPtr _Chart::GroupObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1212)) _variant_t _Chart::GetHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid );
__declspec(implementation_key(1213)) void _Chart::PutHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid, const _variant_t & RHS );
__declspec(implementation_key(1214)) VARIANT_BOOL _Chart::GetHasDataTable ( );
__declspec(implementation_key(1215)) void _Chart::PutHasDataTable ( VARIANT_BOOL RHS );
__declspec(implementation_key(1216)) VARIANT_BOOL _Chart::GetHasLegend ( long lcid );
__declspec(implementation_key(1217)) void _Chart::PutHasLegend ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1218)) VARIANT_BOOL _Chart::GetHasTitle ( long lcid );
__declspec(implementation_key(1219)) void _Chart::PutHasTitle ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1220)) long _Chart::GetHeightPercent ( long lcid );
__declspec(implementation_key(1221)) void _Chart::PutHeightPercent ( long lcid, long RHS );
__declspec(implementation_key(1222)) HyperlinksPtr _Chart::GetHyperlinks ( );
__declspec(implementation_key(1223)) IDispatchPtr _Chart::Labels ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1224)) LegendPtr _Chart::GetLegend ( long lcid );
__declspec(implementation_key(1225)) ChartGroupPtr _Chart::GetLine3DGroup ( long lcid );
__declspec(implementation_key(1226)) IDispatchPtr _Chart::LineGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1227)) IDispatchPtr _Chart::Lines ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1228)) IDispatchPtr _Chart::ListBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1229)) _ChartPtr _Chart::Location ( enum XlChartLocation Where, const _variant_t & Name );
__declspec(implementation_key(1230)) IDispatchPtr _Chart::OLEObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1231)) IDispatchPtr _Chart::OptionButtons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1232)) IDispatchPtr _Chart::Ovals ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1233)) HRESULT _Chart::Paste ( const _variant_t & Type, long lcid );
__declspec(implementation_key(1234)) long _Chart::GetPerspective ( long lcid );
__declspec(implementation_key(1235)) void _Chart::PutPerspective ( long lcid, long RHS );
__declspec(implementation_key(1236)) IDispatchPtr _Chart::Pictures ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1237)) ChartGroupPtr _Chart::GetPie3DGroup ( long lcid );
__declspec(implementation_key(1238)) IDispatchPtr _Chart::PieGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1239)) PlotAreaPtr _Chart::GetPlotArea ( long lcid );
__declspec(implementation_key(1240)) VARIANT_BOOL _Chart::GetPlotVisibleOnly ( long lcid );
__declspec(implementation_key(1241)) void _Chart::PutPlotVisibleOnly ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1242)) IDispatchPtr _Chart::RadarGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1243)) IDispatchPtr _Chart::Rectangles ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1244)) _variant_t _Chart::GetRightAngleAxes ( long lcid );
__declspec(implementation_key(1245)) void _Chart::PutRightAngleAxes ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(1246)) _variant_t _Chart::GetRotation ( long lcid );
__declspec(implementation_key(1247)) void _Chart::PutRotation ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(1248)) IDispatchPtr _Chart::ScrollBars ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1249)) IDispatchPtr _Chart::SeriesCollection ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1250)) VARIANT_BOOL _Chart::GetSizeWithWindow ( long lcid );
__declspec(implementation_key(1251)) void _Chart::PutSizeWithWindow ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1252)) VARIANT_BOOL _Chart::GetShowWindow ( );
__declspec(implementation_key(1253)) void _Chart::PutShowWindow ( VARIANT_BOOL RHS );
__declspec(implementation_key(1254)) IDispatchPtr _Chart::Spinners ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1255)) long _Chart::GetSubType ( long lcid );
__declspec(implementation_key(1256)) void _Chart::PutSubType ( long lcid, long RHS );
__declspec(implementation_key(1257)) ChartGroupPtr _Chart::GetSurfaceGroup ( long lcid );
__declspec(implementation_key(1258)) IDispatchPtr _Chart::TextBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1259)) long _Chart::GetType ( long lcid );
__declspec(implementation_key(1260)) void _Chart::PutType ( long lcid, long RHS );
__declspec(implementation_key(1261)) enum XlChartType _Chart::GetChartType ( );
__declspec(implementation_key(1262)) void _Chart::PutChartType ( enum XlChartType RHS );
__declspec(implementation_key(1263)) HRESULT _Chart::ApplyCustomType ( enum XlChartType ChartType, const _variant_t & TypeName );
__declspec(implementation_key(1264)) WallsPtr _Chart::GetWalls ( long lcid );
__declspec(implementation_key(1265)) VARIANT_BOOL _Chart::GetWallsAndGridlines2D ( long lcid );
__declspec(implementation_key(1266)) void _Chart::PutWallsAndGridlines2D ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1267)) IDispatchPtr _Chart::XYGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1268)) enum XlBarShape _Chart::GetBarShape ( );
__declspec(implementation_key(1269)) void _Chart::PutBarShape ( enum XlBarShape RHS );
__declspec(implementation_key(1270)) enum XlRowCol _Chart::GetPlotBy ( );
__declspec(implementation_key(1271)) void _Chart::PutPlotBy ( enum XlRowCol RHS );
__declspec(implementation_key(1272)) HRESULT _Chart::CopyChartBuild ( );
__declspec(implementation_key(1273)) VARIANT_BOOL _Chart::GetProtectFormatting ( );
__declspec(implementation_key(1274)) void _Chart::PutProtectFormatting ( VARIANT_BOOL RHS );
__declspec(implementation_key(1275)) VARIANT_BOOL _Chart::GetProtectData ( );
__declspec(implementation_key(1276)) void _Chart::PutProtectData ( VARIANT_BOOL RHS );
__declspec(implementation_key(1277)) VARIANT_BOOL _Chart::GetProtectGoalSeek ( );
__declspec(implementation_key(1278)) void _Chart::PutProtectGoalSeek ( VARIANT_BOOL RHS );
__declspec(implementation_key(1279)) VARIANT_BOOL _Chart::GetProtectSelection ( );
__declspec(implementation_key(1280)) void _Chart::PutProtectSelection ( VARIANT_BOOL RHS );
__declspec(implementation_key(1281)) HRESULT _Chart::GetChartElement ( long x, long y, long * ElementID, long * Arg1, long * Arg2 );
__declspec(implementation_key(1282)) HRESULT _Chart::SetSourceData ( struct Range * Source, const _variant_t & PlotBy );
__declspec(implementation_key(1283)) VARIANT_BOOL _Chart::Export ( _bstr_t Filename, const _variant_t & FilterName, const _variant_t & Interactive );
__declspec(implementation_key(1284)) HRESULT _Chart::Refresh ( );
__declspec(implementation_key(1285)) PivotLayoutPtr _Chart::GetPivotLayout ( );
__declspec(implementation_key(1286)) VARIANT_BOOL _Chart::GetHasPivotFields ( );
__declspec(implementation_key(1287)) void _Chart::PutHasPivotFields ( VARIANT_BOOL RHS );
__declspec(implementation_key(1288)) Office::ScriptsPtr _Chart::GetScripts ( );
__declspec(implementation_key(1289)) HRESULT _Chart::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(1290)) TabPtr _Chart::GetTab ( );
__declspec(implementation_key(1291)) Office::IMsoEnvelopeVBPtr _Chart::GetMailEnvelope ( );
__declspec(implementation_key(1292)) HRESULT _Chart::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator, long lcid );
__declspec(implementation_key(1293)) HRESULT _Chart::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local );
__declspec(implementation_key(1294)) HRESULT _Chart::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(1295)) _ApplicationPtr Sheets::GetApplication ( );
__declspec(implementation_key(1296)) enum XlCreator Sheets::GetCreator ( );
__declspec(implementation_key(1297)) IDispatchPtr Sheets::GetParent ( );
__declspec(implementation_key(1298)) IDispatchPtr Sheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type, long lcid );
__declspec(implementation_key(1299)) HRESULT Sheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(1300)) long Sheets::GetCount ( );
__declspec(implementation_key(1301)) HRESULT Sheets::Delete ( long lcid );
__declspec(implementation_key(1302)) HRESULT Sheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type, long lcid );
__declspec(implementation_key(1303)) IDispatchPtr Sheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1304)) HRESULT Sheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(1305)) IUnknownPtr Sheets::Get_NewEnum ( );
__declspec(implementation_key(1306)) HRESULT Sheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(1307)) HRESULT Sheets::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(1308)) HRESULT Sheets::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(1309)) HPageBreaksPtr Sheets::GetHPageBreaks ( );
__declspec(implementation_key(1310)) VPageBreaksPtr Sheets::GetVPageBreaks ( );
__declspec(implementation_key(1311)) _variant_t Sheets::GetVisible ( long lcid );
__declspec(implementation_key(1312)) void Sheets::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(1313)) IDispatchPtr Sheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1314)) HRESULT Sheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(1315)) _ApplicationPtr IVPageBreak::GetApplication ( );
__declspec(implementation_key(1316)) enum XlCreator IVPageBreak::GetCreator ( );
__declspec(implementation_key(1317)) _WorksheetPtr IVPageBreak::GetParent ( );
__declspec(implementation_key(1318)) HRESULT IVPageBreak::Delete ( );
__declspec(implementation_key(1319)) HRESULT IVPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(1320)) enum XlPageBreak IVPageBreak::GetType ( );
__declspec(implementation_key(1321)) void IVPageBreak::PutType ( enum XlPageBreak RHS );
__declspec(implementation_key(1322)) enum XlPageBreakExtent IVPageBreak::GetExtent ( );
__declspec(implementation_key(1323)) RangePtr IVPageBreak::GetLocation ( );
__declspec(implementation_key(1324)) void IVPageBreak::PutRefLocation ( struct Range * RHS );
__declspec(implementation_key(1325)) _ApplicationPtr IHPageBreak::GetApplication ( );
__declspec(implementation_key(1326)) enum XlCreator IHPageBreak::GetCreator ( );
__declspec(implementation_key(1327)) _WorksheetPtr IHPageBreak::GetParent ( );
__declspec(implementation_key(1328)) HRESULT IHPageBreak::Delete ( );
__declspec(implementation_key(1329)) HRESULT IHPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(1330)) enum XlPageBreak IHPageBreak::GetType ( );
__declspec(implementation_key(1331)) void IHPageBreak::PutType ( enum XlPageBreak RHS );
__declspec(implementation_key(1332)) enum XlPageBreakExtent IHPageBreak::GetExtent ( );
__declspec(implementation_key(1333)) RangePtr IHPageBreak::GetLocation ( );
__declspec(implementation_key(1334)) void IHPageBreak::PutRefLocation ( struct Range * RHS );
__declspec(implementation_key(1335)) _ApplicationPtr IHPageBreaks::GetApplication ( );
__declspec(implementation_key(1336)) enum XlCreator IHPageBreaks::GetCreator ( );
__declspec(implementation_key(1337)) IDispatchPtr IHPageBreaks::GetParent ( );
__declspec(implementation_key(1338)) long IHPageBreaks::GetCount ( );
__declspec(implementation_key(1339)) HPageBreakPtr IHPageBreaks::GetItem ( long Index );
__declspec(implementation_key(1340)) HPageBreakPtr IHPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(1341)) IUnknownPtr IHPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(1342)) HPageBreakPtr IHPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(1343)) _ApplicationPtr IVPageBreaks::GetApplication ( );
__declspec(implementation_key(1344)) enum XlCreator IVPageBreaks::GetCreator ( );
__declspec(implementation_key(1345)) IDispatchPtr IVPageBreaks::GetParent ( );
__declspec(implementation_key(1346)) long IVPageBreaks::GetCount ( );
__declspec(implementation_key(1347)) VPageBreakPtr IVPageBreaks::GetItem ( long Index );
__declspec(implementation_key(1348)) VPageBreakPtr IVPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(1349)) IUnknownPtr IVPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(1350)) VPageBreakPtr IVPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(1351)) _ApplicationPtr IRecentFile::GetApplication ( );
__declspec(implementation_key(1352)) enum XlCreator IRecentFile::GetCreator ( );
__declspec(implementation_key(1353)) IDispatchPtr IRecentFile::GetParent ( );
__declspec(implementation_key(1354)) _bstr_t IRecentFile::GetName ( );
__declspec(implementation_key(1355)) _bstr_t IRecentFile::GetPath ( );
__declspec(implementation_key(1356)) long IRecentFile::GetIndex ( );
__declspec(implementation_key(1357)) _WorkbookPtr IRecentFile::Open ( );
__declspec(implementation_key(1358)) HRESULT IRecentFile::Delete ( );
__declspec(implementation_key(1359)) _ApplicationPtr IRecentFiles::GetApplication ( );
__declspec(implementation_key(1360)) enum XlCreator IRecentFiles::GetCreator ( );
__declspec(implementation_key(1361)) IDispatchPtr IRecentFiles::GetParent ( );
__declspec(implementation_key(1362)) long IRecentFiles::GetMaximum ( );
__declspec(implementation_key(1363)) void IRecentFiles::PutMaximum ( long RHS );
__declspec(implementation_key(1364)) long IRecentFiles::GetCount ( );
__declspec(implementation_key(1365)) RecentFilePtr IRecentFiles::GetItem ( long Index );
__declspec(implementation_key(1366)) RecentFilePtr IRecentFiles::Get_Default ( long Index );
__declspec(implementation_key(1367)) RecentFilePtr IRecentFiles::Add ( _bstr_t Name );
__declspec(implementation_key(1368)) IUnknownPtr IRecentFiles::Get_NewEnum ( );
__declspec(implementation_key(1369)) HRESULT IDocEvents::SelectionChange ( struct Range * Target );
__declspec(implementation_key(1370)) HRESULT IDocEvents::BeforeDoubleClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1371)) HRESULT IDocEvents::BeforeRightClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1372)) HRESULT IDocEvents::Activate ( );
__declspec(implementation_key(1373)) HRESULT IDocEvents::Deactivate ( );
__declspec(implementation_key(1374)) HRESULT IDocEvents::Calculate ( );
__declspec(implementation_key(1375)) HRESULT IDocEvents::Change ( struct Range * Target );
__declspec(implementation_key(1376)) HRESULT IDocEvents::FollowHyperlink ( struct Hyperlink * Target );
__declspec(implementation_key(1377)) HRESULT IDocEvents::PivotTableUpdate ( struct PivotTable * Target );
__declspec(implementation_key(1378)) _ApplicationPtr _Worksheet::GetApplication ( );
__declspec(implementation_key(1379)) enum XlCreator _Worksheet::GetCreator ( );
__declspec(implementation_key(1380)) IDispatchPtr _Worksheet::GetParent ( );
__declspec(implementation_key(1381)) HRESULT _Worksheet::Activate ( long lcid );
__declspec(implementation_key(1382)) HRESULT _Worksheet::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(1383)) HRESULT _Worksheet::Delete ( long lcid );
__declspec(implementation_key(1384)) _bstr_t _Worksheet::GetCodeName ( );
__declspec(implementation_key(1385)) _bstr_t _Worksheet::Get_CodeName ( );
__declspec(implementation_key(1386)) void _Worksheet::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(1387)) long _Worksheet::GetIndex ( long lcid );
__declspec(implementation_key(1388)) HRESULT _Worksheet::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(1389)) _bstr_t _Worksheet::GetName ( );
__declspec(implementation_key(1390)) void _Worksheet::PutName ( _bstr_t RHS );
__declspec(implementation_key(1391)) IDispatchPtr _Worksheet::GetNext ( );
__declspec(implementation_key(1392)) _bstr_t _Worksheet::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(1393)) void _Worksheet::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1394)) _bstr_t _Worksheet::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(1395)) void _Worksheet::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1396)) _bstr_t _Worksheet::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(1397)) void _Worksheet::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1398)) PageSetupPtr _Worksheet::GetPageSetup ( );
__declspec(implementation_key(1399)) IDispatchPtr _Worksheet::GetPrevious ( );
__declspec(implementation_key(1400)) HRESULT _Worksheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(1401)) HRESULT _Worksheet::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(1402)) HRESULT _Worksheet::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(1403)) VARIANT_BOOL _Worksheet::GetProtectContents ( long lcid );
__declspec(implementation_key(1404)) VARIANT_BOOL _Worksheet::GetProtectDrawingObjects ( long lcid );
__declspec(implementation_key(1405)) VARIANT_BOOL _Worksheet::GetProtectionMode ( long lcid );
__declspec(implementation_key(1406)) VARIANT_BOOL _Worksheet::GetProtectScenarios ( long lcid );
__declspec(implementation_key(1407)) HRESULT _Worksheet::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(1408)) HRESULT _Worksheet::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(1409)) HRESULT _Worksheet::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(1410)) enum XlSheetVisibility _Worksheet::GetVisible ( long lcid );
__declspec(implementation_key(1411)) void _Worksheet::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(1412)) ShapesPtr _Worksheet::GetShapes ( );
__declspec(implementation_key(1413)) VARIANT_BOOL _Worksheet::GetTransitionExpEval ( long lcid );
__declspec(implementation_key(1414)) void _Worksheet::PutTransitionExpEval ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1415)) IDispatchPtr _Worksheet::Arcs ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1416)) VARIANT_BOOL _Worksheet::GetAutoFilterMode ( long lcid );
__declspec(implementation_key(1417)) void _Worksheet::PutAutoFilterMode ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1418)) HRESULT _Worksheet::SetBackgroundPicture ( _bstr_t Filename );
__declspec(implementation_key(1419)) IDispatchPtr _Worksheet::Buttons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1420)) HRESULT _Worksheet::Calculate ( long lcid );
__declspec(implementation_key(1421)) VARIANT_BOOL _Worksheet::GetEnableCalculation ( );
__declspec(implementation_key(1422)) void _Worksheet::PutEnableCalculation ( VARIANT_BOOL RHS );
__declspec(implementation_key(1423)) RangePtr _Worksheet::GetCells ( );
__declspec(implementation_key(1424)) IDispatchPtr _Worksheet::ChartObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1425)) IDispatchPtr _Worksheet::CheckBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1426)) HRESULT _Worksheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid );
__declspec(implementation_key(1427)) RangePtr _Worksheet::GetCircularReference ( long lcid );
__declspec(implementation_key(1428)) HRESULT _Worksheet::ClearArrows ( long lcid );
__declspec(implementation_key(1429)) RangePtr _Worksheet::GetColumns ( );
__declspec(implementation_key(1430)) enum XlConsolidationFunction _Worksheet::GetConsolidationFunction ( long lcid );
__declspec(implementation_key(1431)) _variant_t _Worksheet::GetConsolidationOptions ( long lcid );
__declspec(implementation_key(1432)) _variant_t _Worksheet::GetConsolidationSources ( long lcid );
__declspec(implementation_key(1433)) VARIANT_BOOL _Worksheet::GetDisplayAutomaticPageBreaks ( long lcid );
__declspec(implementation_key(1434)) void _Worksheet::PutDisplayAutomaticPageBreaks ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1435)) IDispatchPtr _Worksheet::Drawings ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1436)) IDispatchPtr _Worksheet::DrawingObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1437)) IDispatchPtr _Worksheet::DropDowns ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1438)) VARIANT_BOOL _Worksheet::GetEnableAutoFilter ( long lcid );
__declspec(implementation_key(1439)) void _Worksheet::PutEnableAutoFilter ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1440)) enum XlEnableSelection _Worksheet::GetEnableSelection ( );
__declspec(implementation_key(1441)) void _Worksheet::PutEnableSelection ( enum XlEnableSelection RHS );
__declspec(implementation_key(1442)) VARIANT_BOOL _Worksheet::GetEnableOutlining ( long lcid );
__declspec(implementation_key(1443)) void _Worksheet::PutEnableOutlining ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1444)) VARIANT_BOOL _Worksheet::GetEnablePivotTable ( long lcid );
__declspec(implementation_key(1445)) void _Worksheet::PutEnablePivotTable ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1446)) _variant_t _Worksheet::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(1447)) _variant_t _Worksheet::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(1448)) VARIANT_BOOL _Worksheet::GetFilterMode ( long lcid );
__declspec(implementation_key(1449)) HRESULT _Worksheet::ResetAllPageBreaks ( );
__declspec(implementation_key(1450)) IDispatchPtr _Worksheet::GroupBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1451)) IDispatchPtr _Worksheet::GroupObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1452)) IDispatchPtr _Worksheet::Labels ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1453)) IDispatchPtr _Worksheet::Lines ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1454)) IDispatchPtr _Worksheet::ListBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1455)) NamesPtr _Worksheet::GetNames ( );
__declspec(implementation_key(1456)) IDispatchPtr _Worksheet::OLEObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1457)) _bstr_t _Worksheet::GetOnCalculate ( long lcid );
__declspec(implementation_key(1458)) void _Worksheet::PutOnCalculate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1459)) _bstr_t _Worksheet::GetOnData ( long lcid );
__declspec(implementation_key(1460)) void _Worksheet::PutOnData ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1461)) _bstr_t _Worksheet::GetOnEntry ( long lcid );
__declspec(implementation_key(1462)) void _Worksheet::PutOnEntry ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1463)) IDispatchPtr _Worksheet::OptionButtons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1464)) OutlinePtr _Worksheet::GetOutline ( );
__declspec(implementation_key(1465)) IDispatchPtr _Worksheet::Ovals ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1466)) HRESULT _Worksheet::Paste ( const _variant_t & Destination, const _variant_t & Link, long lcid );
__declspec(implementation_key(1467)) HRESULT _Worksheet::_PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, long lcid );
__declspec(implementation_key(1468)) IDispatchPtr _Worksheet::Pictures ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1469)) IDispatchPtr _Worksheet::PivotTables ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1470)) PivotTablePtr _Worksheet::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection, long lcid );
__declspec(implementation_key(1471)) RangePtr _Worksheet::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(1472)) IDispatchPtr _Worksheet::Rectangles ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1473)) RangePtr _Worksheet::GetRows ( );
__declspec(implementation_key(1474)) IDispatchPtr _Worksheet::Scenarios ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1475)) _bstr_t _Worksheet::GetScrollArea ( );
__declspec(implementation_key(1476)) void _Worksheet::PutScrollArea ( _bstr_t RHS );
__declspec(implementation_key(1477)) IDispatchPtr _Worksheet::ScrollBars ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1478)) HRESULT _Worksheet::ShowAllData ( long lcid );
__declspec(implementation_key(1479)) HRESULT _Worksheet::ShowDataForm ( long lcid );
__declspec(implementation_key(1480)) IDispatchPtr _Worksheet::Spinners ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1481)) double _Worksheet::GetStandardHeight ( long lcid );
__declspec(implementation_key(1482)) double _Worksheet::GetStandardWidth ( long lcid );
__declspec(implementation_key(1483)) void _Worksheet::PutStandardWidth ( long lcid, double RHS );
__declspec(implementation_key(1484)) IDispatchPtr _Worksheet::TextBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1485)) VARIANT_BOOL _Worksheet::GetTransitionFormEntry ( long lcid );
__declspec(implementation_key(1486)) void _Worksheet::PutTransitionFormEntry ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1487)) enum XlSheetType _Worksheet::GetType ( long lcid );
__declspec(implementation_key(1488)) RangePtr _Worksheet::GetUsedRange ( long lcid );
__declspec(implementation_key(1489)) HPageBreaksPtr _Worksheet::GetHPageBreaks ( );
__declspec(implementation_key(1490)) VPageBreaksPtr _Worksheet::GetVPageBreaks ( );
__declspec(implementation_key(1491)) QueryTablesPtr _Worksheet::GetQueryTables ( );
__declspec(implementation_key(1492)) VARIANT_BOOL _Worksheet::GetDisplayPageBreaks ( );
__declspec(implementation_key(1493)) void _Worksheet::PutDisplayPageBreaks ( VARIANT_BOOL RHS );
__declspec(implementation_key(1494)) CommentsPtr _Worksheet::GetComments ( );
__declspec(implementation_key(1495)) HyperlinksPtr _Worksheet::GetHyperlinks ( );
__declspec(implementation_key(1496)) HRESULT _Worksheet::ClearCircles ( );
__declspec(implementation_key(1497)) HRESULT _Worksheet::CircleInvalid ( );
__declspec(implementation_key(1498)) long _Worksheet::Get_DisplayRightToLeft ( long lcid );
__declspec(implementation_key(1499)) void _Worksheet::Put_DisplayRightToLeft ( long lcid, long RHS );
__declspec(implementation_key(1500)) AutoFilterPtr _Worksheet::GetAutoFilter ( );
__declspec(implementation_key(1501)) VARIANT_BOOL _Worksheet::GetDisplayRightToLeft ( long lcid );
__declspec(implementation_key(1502)) void _Worksheet::PutDisplayRightToLeft ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1503)) Office::ScriptsPtr _Worksheet::GetScripts ( );
__declspec(implementation_key(1504)) HRESULT _Worksheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(1505)) HRESULT _Worksheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript, long lcid );
__declspec(implementation_key(1506)) TabPtr _Worksheet::GetTab ( );
__declspec(implementation_key(1507)) Office::IMsoEnvelopeVBPtr _Worksheet::GetMailEnvelope ( );
__declspec(implementation_key(1508)) HRESULT _Worksheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local );
__declspec(implementation_key(1509)) CustomPropertiesPtr _Worksheet::GetCustomProperties ( );
__declspec(implementation_key(1510)) SmartTagsPtr _Worksheet::GetSmartTags ( );
__declspec(implementation_key(1511)) ProtectionPtr _Worksheet::GetProtection ( );
__declspec(implementation_key(1512)) HRESULT _Worksheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & NoHTMLFormatting, long lcid );
__declspec(implementation_key(1513)) HRESULT _Worksheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, const _variant_t & AllowFormattingCells, const _variant_t & AllowFormattingColumns, const _variant_t & AllowFormattingRows, const _variant_t & AllowInsertingColumns, const _variant_t & AllowInsertingRows, const _variant_t & AllowInsertingHyperlinks, const _variant_t & AllowDeletingColumns, const _variant_t & AllowDeletingRows, const _variant_t & AllowSorting, const _variant_t & AllowFiltering, const _variant_t & AllowUsingPivotTables );
__declspec(implementation_key(1514)) _ApplicationPtr IStyle::GetApplication ( );
__declspec(implementation_key(1515)) enum XlCreator IStyle::GetCreator ( );
__declspec(implementation_key(1516)) IDispatchPtr IStyle::GetParent ( );
__declspec(implementation_key(1517)) VARIANT_BOOL IStyle::GetAddIndent ( );
__declspec(implementation_key(1518)) void IStyle::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(1519)) VARIANT_BOOL IStyle::GetBuiltIn ( );
__declspec(implementation_key(1520)) BordersPtr IStyle::GetBorders ( );
__declspec(implementation_key(1521)) _variant_t IStyle::Delete ( );
__declspec(implementation_key(1522)) FontPtr IStyle::GetFont ( );
__declspec(implementation_key(1523)) VARIANT_BOOL IStyle::GetFormulaHidden ( );
__declspec(implementation_key(1524)) void IStyle::PutFormulaHidden ( VARIANT_BOOL RHS );
__declspec(implementation_key(1525)) enum XlHAlign IStyle::GetHorizontalAlignment ( );
__declspec(implementation_key(1526)) void IStyle::PutHorizontalAlignment ( enum XlHAlign RHS );
__declspec(implementation_key(1527)) VARIANT_BOOL IStyle::GetIncludeAlignment ( );
__declspec(implementation_key(1528)) void IStyle::PutIncludeAlignment ( VARIANT_BOOL RHS );
__declspec(implementation_key(1529)) VARIANT_BOOL IStyle::GetIncludeBorder ( );
__declspec(implementation_key(1530)) void IStyle::PutIncludeBorder ( VARIANT_BOOL RHS );
__declspec(implementation_key(1531)) VARIANT_BOOL IStyle::GetIncludeFont ( );
__declspec(implementation_key(1532)) void IStyle::PutIncludeFont ( VARIANT_BOOL RHS );
__declspec(implementation_key(1533)) VARIANT_BOOL IStyle::GetIncludeNumber ( );
__declspec(implementation_key(1534)) void IStyle::PutIncludeNumber ( VARIANT_BOOL RHS );
__declspec(implementation_key(1535)) VARIANT_BOOL IStyle::GetIncludePatterns ( );
__declspec(implementation_key(1536)) void IStyle::PutIncludePatterns ( VARIANT_BOOL RHS );
__declspec(implementation_key(1537)) VARIANT_BOOL IStyle::GetIncludeProtection ( );
__declspec(implementation_key(1538)) void IStyle::PutIncludeProtection ( VARIANT_BOOL RHS );
__declspec(implementation_key(1539)) long IStyle::GetIndentLevel ( );
__declspec(implementation_key(1540)) void IStyle::PutIndentLevel ( long RHS );
__declspec(implementation_key(1541)) InteriorPtr IStyle::GetInterior ( );
__declspec(implementation_key(1542)) VARIANT_BOOL IStyle::GetLocked ( );
__declspec(implementation_key(1543)) void IStyle::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(1544)) _variant_t IStyle::GetMergeCells ( );
__declspec(implementation_key(1545)) void IStyle::PutMergeCells ( const _variant_t & RHS );
__declspec(implementation_key(1546)) _bstr_t IStyle::GetName ( long lcid );
__declspec(implementation_key(1547)) _bstr_t IStyle::GetNameLocal ( );
__declspec(implementation_key(1548)) _bstr_t IStyle::GetNumberFormat ( );
__declspec(implementation_key(1549)) void IStyle::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(1550)) _bstr_t IStyle::GetNumberFormatLocal ( );
__declspec(implementation_key(1551)) void IStyle::PutNumberFormatLocal ( _bstr_t RHS );
__declspec(implementation_key(1552)) enum XlOrientation IStyle::GetOrientation ( );
__declspec(implementation_key(1553)) void IStyle::PutOrientation ( enum XlOrientation RHS );
__declspec(implementation_key(1554)) VARIANT_BOOL IStyle::GetShrinkToFit ( );
__declspec(implementation_key(1555)) void IStyle::PutShrinkToFit ( VARIANT_BOOL RHS );
__declspec(implementation_key(1556)) _bstr_t IStyle::GetValue ( long lcid );
__declspec(implementation_key(1557)) enum XlVAlign IStyle::GetVerticalAlignment ( );
__declspec(implementation_key(1558)) void IStyle::PutVerticalAlignment ( enum XlVAlign RHS );
__declspec(implementation_key(1559)) VARIANT_BOOL IStyle::GetWrapText ( );
__declspec(implementation_key(1560)) void IStyle::PutWrapText ( VARIANT_BOOL RHS );
__declspec(implementation_key(1561)) _bstr_t IStyle::Get_Default ( long lcid );
__declspec(implementation_key(1562)) long IStyle::GetReadingOrder ( );
__declspec(implementation_key(1563)) void IStyle::PutReadingOrder ( long RHS );
__declspec(implementation_key(1564)) _ApplicationPtr IStyles::GetApplication ( );
__declspec(implementation_key(1565)) enum XlCreator IStyles::GetCreator ( );
__declspec(implementation_key(1566)) IDispatchPtr IStyles::GetParent ( );
__declspec(implementation_key(1567)) StylePtr IStyles::Add ( _bstr_t Name, const _variant_t & BasedOn );
__declspec(implementation_key(1568)) long IStyles::GetCount ( );
__declspec(implementation_key(1569)) StylePtr IStyles::GetItem ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1570)) _variant_t IStyles::Merge ( const _variant_t & Workbook );
__declspec(implementation_key(1571)) IUnknownPtr IStyles::Get_NewEnum ( );
__declspec(implementation_key(1572)) StylePtr IStyles::Get_Default ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1573)) _ApplicationPtr IBorders::GetApplication ( );
__declspec(implementation_key(1574)) enum XlCreator IBorders::GetCreator ( );
__declspec(implementation_key(1575)) IDispatchPtr IBorders::GetParent ( );
__declspec(implementation_key(1576)) _variant_t IBorders::GetColor ( );
__declspec(implementation_key(1577)) void IBorders::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(1578)) _variant_t IBorders::GetColorIndex ( );
__declspec(implementation_key(1579)) void IBorders::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(1580)) long IBorders::GetCount ( );
__declspec(implementation_key(1581)) BorderPtr IBorders::GetItem ( enum XlBordersIndex Index );
__declspec(implementation_key(1582)) _variant_t IBorders::GetLineStyle ( );
__declspec(implementation_key(1583)) void IBorders::PutLineStyle ( const _variant_t & RHS );
__declspec(implementation_key(1584)) IUnknownPtr IBorders::Get_NewEnum ( );
__declspec(implementation_key(1585)) _variant_t IBorders::GetValue ( );
__declspec(implementation_key(1586)) void IBorders::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(1587)) _variant_t IBorders::GetWeight ( );
__declspec(implementation_key(1588)) void IBorders::PutWeight ( const _variant_t & RHS );
__declspec(implementation_key(1589)) BorderPtr IBorders::Get_Default ( enum XlBordersIndex Index );
__declspec(implementation_key(1590)) _ApplicationPtr _Global::GetApplication ( );
__declspec(implementation_key(1591)) enum XlCreator _Global::GetCreator ( );
__declspec(implementation_key(1592)) _ApplicationPtr _Global::GetParent ( );
__declspec(implementation_key(1593)) RangePtr _Global::GetActiveCell ( );
__declspec(implementation_key(1594)) _ChartPtr _Global::GetActiveChart ( );
__declspec(implementation_key(1595)) DialogSheetPtr _Global::GetActiveDialog ( );
__declspec(implementation_key(1596)) MenuBarPtr _Global::GetActiveMenuBar ( );
__declspec(implementation_key(1597)) _bstr_t _Global::GetActivePrinter ( long lcid );
__declspec(implementation_key(1598)) void _Global::PutActivePrinter ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1599)) IDispatchPtr _Global::GetActiveSheet ( );
__declspec(implementation_key(1600)) WindowPtr _Global::GetActiveWindow ( );
__declspec(implementation_key(1601)) _WorkbookPtr _Global::GetActiveWorkbook ( );
__declspec(implementation_key(1602)) AddInsPtr _Global::GetAddIns ( );
__declspec(implementation_key(1603)) Office::AssistantPtr _Global::GetAssistant ( );
__declspec(implementation_key(1604)) HRESULT _Global::Calculate ( long lcid );
__declspec(implementation_key(1605)) RangePtr _Global::GetCells ( );
__declspec(implementation_key(1606)) SheetsPtr _Global::GetCharts ( );
__declspec(implementation_key(1607)) RangePtr _Global::GetColumns ( );
__declspec(implementation_key(1608)) Office::_CommandBarsPtr _Global::GetCommandBars ( );
__declspec(implementation_key(1609)) long _Global::GetDDEAppReturnCode ( long lcid );
__declspec(implementation_key(1610)) HRESULT _Global::DDEExecute ( long Channel, _bstr_t String, long lcid );
__declspec(implementation_key(1611)) long _Global::DDEInitiate ( _bstr_t App, _bstr_t Topic, long lcid );
__declspec(implementation_key(1612)) HRESULT _Global::DDEPoke ( long Channel, const _variant_t & Item, const _variant_t & Data, long lcid );
__declspec(implementation_key(1613)) _variant_t _Global::DDERequest ( long Channel, _bstr_t Item, long lcid );
__declspec(implementation_key(1614)) HRESULT _Global::DDETerminate ( long Channel, long lcid );
__declspec(implementation_key(1615)) SheetsPtr _Global::GetDialogSheets ( );
__declspec(implementation_key(1616)) _variant_t _Global::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(1617)) _variant_t _Global::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(1618)) _variant_t _Global::ExecuteExcel4Macro ( _bstr_t String, long lcid );
__declspec(implementation_key(1619)) RangePtr _Global::Intersect ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(1620)) MenuBarsPtr _Global::GetMenuBars ( );
__declspec(implementation_key(1621)) ModulesPtr _Global::GetModules ( );
__declspec(implementation_key(1622)) NamesPtr _Global::GetNames ( );
__declspec(implementation_key(1623)) RangePtr _Global::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(1624)) RangePtr _Global::GetRows ( );
__declspec(implementation_key(1625)) _variant_t _Global::Run ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(1626)) _variant_t _Global::_Run2 ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(1627)) IDispatchPtr _Global::GetSelection ( long lcid );
__declspec(implementation_key(1628)) HRESULT _Global::SendKeys ( const _variant_t & Keys, const _variant_t & Wait, long lcid );
__declspec(implementation_key(1629)) SheetsPtr _Global::GetSheets ( );
__declspec(implementation_key(1630)) MenuPtr _Global::GetShortcutMenus ( long Index );
__declspec(implementation_key(1631)) _WorkbookPtr _Global::GetThisWorkbook ( long lcid );
__declspec(implementation_key(1632)) ToolbarsPtr _Global::GetToolbars ( );
__declspec(implementation_key(1633)) RangePtr _Global::Union ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(1634)) WindowsPtr _Global::GetWindows ( );
__declspec(implementation_key(1635)) WorkbooksPtr _Global::GetWorkbooks ( );
__declspec(implementation_key(1636)) WorksheetFunctionPtr _Global::GetWorksheetFunction ( );
__declspec(implementation_key(1637)) SheetsPtr _Global::GetWorksheets ( );
__declspec(implementation_key(1638)) SheetsPtr _Global::GetExcel4IntlMacroSheets ( );
__declspec(implementation_key(1639)) SheetsPtr _Global::GetExcel4MacroSheets ( );
__declspec(implementation_key(1640)) _ApplicationPtr IAddIn::GetApplication ( );
__declspec(implementation_key(1641)) enum XlCreator IAddIn::GetCreator ( );
__declspec(implementation_key(1642)) IDispatchPtr IAddIn::GetParent ( );
__declspec(implementation_key(1643)) _bstr_t IAddIn::GetAuthor ( );
__declspec(implementation_key(1644)) _bstr_t IAddIn::GetComments ( );
__declspec(implementation_key(1645)) _bstr_t IAddIn::GetFullName ( );
__declspec(implementation_key(1646)) VARIANT_BOOL IAddIn::GetInstalled ( );
__declspec(implementation_key(1647)) void IAddIn::PutInstalled ( VARIANT_BOOL RHS );
__declspec(implementation_key(1648)) _bstr_t IAddIn::GetKeywords ( );
__declspec(implementation_key(1649)) _bstr_t IAddIn::GetName ( );
__declspec(implementation_key(1650)) _bstr_t IAddIn::GetPath ( );
__declspec(implementation_key(1651)) _bstr_t IAddIn::GetSubject ( );
__declspec(implementation_key(1652)) _bstr_t IAddIn::GetTitle ( );
__declspec(implementation_key(1653)) _bstr_t IAddIn::GetprogID ( );
__declspec(implementation_key(1654)) _bstr_t IAddIn::GetCLSID ( );
__declspec(implementation_key(1655)) _ApplicationPtr IAddIns::GetApplication ( );
__declspec(implementation_key(1656)) enum XlCreator IAddIns::GetCreator ( );
__declspec(implementation_key(1657)) IDispatchPtr IAddIns::GetParent ( );
__declspec(implementation_key(1658)) AddInPtr IAddIns::Add ( _bstr_t Filename, const _variant_t & JOECopyFile );
__declspec(implementation_key(1659)) long IAddIns::GetCount ( );
__declspec(implementation_key(1660)) AddInPtr IAddIns::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1661)) IUnknownPtr IAddIns::Get_NewEnum ( );
__declspec(implementation_key(1662)) AddInPtr IAddIns::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1663)) _ApplicationPtr IToolbar::GetApplication ( );
__declspec(implementation_key(1664)) enum XlCreator IToolbar::GetCreator ( );
__declspec(implementation_key(1665)) IDispatchPtr IToolbar::GetParent ( );
__declspec(implementation_key(1666)) VARIANT_BOOL IToolbar::GetBuiltIn ( );
__declspec(implementation_key(1667)) HRESULT IToolbar::Delete ( );
__declspec(implementation_key(1668)) long IToolbar::GetHeight ( );
__declspec(implementation_key(1669)) void IToolbar::PutHeight ( long RHS );
__declspec(implementation_key(1670)) long IToolbar::GetLeft ( );
__declspec(implementation_key(1671)) void IToolbar::PutLeft ( long RHS );
__declspec(implementation_key(1672)) _bstr_t IToolbar::GetName ( );
__declspec(implementation_key(1673)) long IToolbar::GetPosition ( );
__declspec(implementation_key(1674)) void IToolbar::PutPosition ( long RHS );
__declspec(implementation_key(1675)) enum XlToolbarProtection IToolbar::GetProtection ( );
__declspec(implementation_key(1676)) void IToolbar::PutProtection ( enum XlToolbarProtection RHS );
__declspec(implementation_key(1677)) HRESULT IToolbar::Reset ( );
__declspec(implementation_key(1678)) ToolbarButtonsPtr IToolbar::GetToolbarButtons ( );
__declspec(implementation_key(1679)) long IToolbar::GetTop ( );
__declspec(implementation_key(1680)) void IToolbar::PutTop ( long RHS );
__declspec(implementation_key(1681)) VARIANT_BOOL IToolbar::GetVisible ( );
__declspec(implementation_key(1682)) void IToolbar::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(1683)) long IToolbar::GetWidth ( );
__declspec(implementation_key(1684)) void IToolbar::PutWidth ( long RHS );
__declspec(implementation_key(1685)) _ApplicationPtr IToolbars::GetApplication ( );
__declspec(implementation_key(1686)) enum XlCreator IToolbars::GetCreator ( );
__declspec(implementation_key(1687)) IDispatchPtr IToolbars::GetParent ( );
__declspec(implementation_key(1688)) ToolbarPtr IToolbars::Add ( const _variant_t & Name );
__declspec(implementation_key(1689)) long IToolbars::GetCount ( );
__declspec(implementation_key(1690)) ToolbarPtr IToolbars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1691)) ToolbarPtr IToolbars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1692)) IUnknownPtr IToolbars::Get_NewEnum ( );
__declspec(implementation_key(1693)) _ApplicationPtr IToolbarButton::GetApplication ( );
__declspec(implementation_key(1694)) enum XlCreator IToolbarButton::GetCreator ( );
__declspec(implementation_key(1695)) IDispatchPtr IToolbarButton::GetParent ( );
__declspec(implementation_key(1696)) VARIANT_BOOL IToolbarButton::GetBuiltIn ( );
__declspec(implementation_key(1697)) VARIANT_BOOL IToolbarButton::GetBuiltInFace ( );
__declspec(implementation_key(1698)) void IToolbarButton::PutBuiltInFace ( VARIANT_BOOL RHS );
__declspec(implementation_key(1699)) HRESULT IToolbarButton::Copy ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(1700)) HRESULT IToolbarButton::CopyFace ( );
__declspec(implementation_key(1701)) HRESULT IToolbarButton::Delete ( );
__declspec(implementation_key(1702)) HRESULT IToolbarButton::Edit ( );
__declspec(implementation_key(1703)) VARIANT_BOOL IToolbarButton::GetEnabled ( );
__declspec(implementation_key(1704)) void IToolbarButton::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(1705)) long IToolbarButton::GetHelpContextID ( );
__declspec(implementation_key(1706)) void IToolbarButton::PutHelpContextID ( long RHS );
__declspec(implementation_key(1707)) _bstr_t IToolbarButton::GetHelpFile ( );
__declspec(implementation_key(1708)) void IToolbarButton::PutHelpFile ( _bstr_t RHS );
__declspec(implementation_key(1709)) long IToolbarButton::GetID ( );
__declspec(implementation_key(1710)) VARIANT_BOOL IToolbarButton::GetIsGap ( );
__declspec(implementation_key(1711)) HRESULT IToolbarButton::Move ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(1712)) _bstr_t IToolbarButton::GetName ( );
__declspec(implementation_key(1713)) void IToolbarButton::PutName ( _bstr_t RHS );
__declspec(implementation_key(1714)) _bstr_t IToolbarButton::GetOnAction ( );
__declspec(implementation_key(1715)) void IToolbarButton::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(1716)) HRESULT IToolbarButton::PasteFace ( );
__declspec(implementation_key(1717)) VARIANT_BOOL IToolbarButton::GetPushed ( );
__declspec(implementation_key(1718)) void IToolbarButton::PutPushed ( VARIANT_BOOL RHS );
__declspec(implementation_key(1719)) HRESULT IToolbarButton::Reset ( );
__declspec(implementation_key(1720)) _bstr_t IToolbarButton::GetStatusBar ( );
__declspec(implementation_key(1721)) void IToolbarButton::PutStatusBar ( _bstr_t RHS );
__declspec(implementation_key(1722)) long IToolbarButton::GetWidth ( );
__declspec(implementation_key(1723)) void IToolbarButton::PutWidth ( long RHS );
__declspec(implementation_key(1724)) _ApplicationPtr IToolbarButtons::GetApplication ( );
__declspec(implementation_key(1725)) enum XlCreator IToolbarButtons::GetCreator ( );
__declspec(implementation_key(1726)) IDispatchPtr IToolbarButtons::GetParent ( );
__declspec(implementation_key(1727)) ToolbarButtonPtr IToolbarButtons::Add ( const _variant_t & Button, const _variant_t & Before, const _variant_t & OnAction, const _variant_t & Pushed, const _variant_t & Enabled, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(1728)) long IToolbarButtons::GetCount ( );
__declspec(implementation_key(1729)) ToolbarButtonPtr IToolbarButtons::GetItem ( long Index );
__declspec(implementation_key(1730)) IUnknownPtr IToolbarButtons::Get_NewEnum ( );
__declspec(implementation_key(1731)) ToolbarButtonPtr IToolbarButtons::Get_Default ( long Index );
__declspec(implementation_key(1732)) _ApplicationPtr IAreas::GetApplication ( );
__declspec(implementation_key(1733)) enum XlCreator IAreas::GetCreator ( );
__declspec(implementation_key(1734)) IDispatchPtr IAreas::GetParent ( );
__declspec(implementation_key(1735)) long IAreas::GetCount ( );
__declspec(implementation_key(1736)) RangePtr IAreas::GetItem ( long Index );
__declspec(implementation_key(1737)) IUnknownPtr IAreas::Get_NewEnum ( );
__declspec(implementation_key(1738)) RangePtr IAreas::Get_Default ( long Index );
__declspec(implementation_key(1739)) HRESULT IWorkbookEvents::Open ( );
__declspec(implementation_key(1740)) HRESULT IWorkbookEvents::Activate ( );
__declspec(implementation_key(1741)) HRESULT IWorkbookEvents::Deactivate ( );
__declspec(implementation_key(1742)) HRESULT IWorkbookEvents::BeforeClose ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1743)) HRESULT IWorkbookEvents::BeforeSave ( VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1744)) HRESULT IWorkbookEvents::BeforePrint ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1745)) HRESULT IWorkbookEvents::NewSheet ( IDispatch * Sh );
__declspec(implementation_key(1746)) HRESULT IWorkbookEvents::AddinInstall ( );
__declspec(implementation_key(1747)) HRESULT IWorkbookEvents::AddinUninstall ( );
__declspec(implementation_key(1748)) HRESULT IWorkbookEvents::WindowResize ( struct Window * Wn );
__declspec(implementation_key(1749)) HRESULT IWorkbookEvents::WindowActivate ( struct Window * Wn );
__declspec(implementation_key(1750)) HRESULT IWorkbookEvents::WindowDeactivate ( struct Window * Wn );
__declspec(implementation_key(1751)) HRESULT IWorkbookEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(1752)) HRESULT IWorkbookEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1753)) HRESULT IWorkbookEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1754)) HRESULT IWorkbookEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(1755)) HRESULT IWorkbookEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(1756)) HRESULT IWorkbookEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(1757)) HRESULT IWorkbookEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(1758)) HRESULT IWorkbookEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(1759)) HRESULT IWorkbookEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target );
__declspec(implementation_key(1760)) HRESULT IWorkbookEvents::PivotTableCloseConnection ( struct PivotTable * Target );
__declspec(implementation_key(1761)) HRESULT IWorkbookEvents::PivotTableOpenConnection ( struct PivotTable * Target );
__declspec(implementation_key(1762)) _ApplicationPtr _Workbook::GetApplication ( );
__declspec(implementation_key(1763)) enum XlCreator _Workbook::GetCreator ( );
__declspec(implementation_key(1764)) IDispatchPtr _Workbook::GetParent ( );
__declspec(implementation_key(1765)) VARIANT_BOOL _Workbook::GetAcceptLabelsInFormulas ( );
__declspec(implementation_key(1766)) void _Workbook::PutAcceptLabelsInFormulas ( VARIANT_BOOL RHS );
__declspec(implementation_key(1767)) HRESULT _Workbook::Activate ( long lcid );
__declspec(implementation_key(1768)) _ChartPtr _Workbook::GetActiveChart ( );
__declspec(implementation_key(1769)) IDispatchPtr _Workbook::GetActiveSheet ( );
__declspec(implementation_key(1770)) _bstr_t _Workbook::GetAuthor ( long lcid );
__declspec(implementation_key(1771)) void _Workbook::PutAuthor ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1772)) long _Workbook::GetAutoUpdateFrequency ( );
__declspec(implementation_key(1773)) void _Workbook::PutAutoUpdateFrequency ( long RHS );
__declspec(implementation_key(1774)) VARIANT_BOOL _Workbook::GetAutoUpdateSaveChanges ( );
__declspec(implementation_key(1775)) void _Workbook::PutAutoUpdateSaveChanges ( VARIANT_BOOL RHS );
__declspec(implementation_key(1776)) long _Workbook::GetChangeHistoryDuration ( );
__declspec(implementation_key(1777)) void _Workbook::PutChangeHistoryDuration ( long RHS );
__declspec(implementation_key(1778)) IDispatchPtr _Workbook::GetBuiltinDocumentProperties ( );
__declspec(implementation_key(1779)) HRESULT _Workbook::ChangeFileAccess ( enum XlFileAccess Mode, const _variant_t & WritePassword, const _variant_t & Notify, long lcid );
__declspec(implementation_key(1780)) HRESULT _Workbook::ChangeLink ( _bstr_t Name, _bstr_t NewName, enum XlLinkType Type, long lcid );
__declspec(implementation_key(1781)) SheetsPtr _Workbook::GetCharts ( );
__declspec(implementation_key(1782)) HRESULT _Workbook::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook, long lcid );
__declspec(implementation_key(1783)) _bstr_t _Workbook::GetCodeName ( );
__declspec(implementation_key(1784)) _bstr_t _Workbook::Get_CodeName ( );
__declspec(implementation_key(1785)) void _Workbook::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(1786)) _variant_t _Workbook::GetColors ( const _variant_t & Index, long lcid );
__declspec(implementation_key(1787)) void _Workbook::PutColors ( const _variant_t & Index, long lcid, const _variant_t & RHS );
__declspec(implementation_key(1788)) Office::_CommandBarsPtr _Workbook::GetCommandBars ( );
__declspec(implementation_key(1789)) _bstr_t _Workbook::GetComments ( long lcid );
__declspec(implementation_key(1790)) void _Workbook::PutComments ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1791)) enum XlSaveConflictResolution _Workbook::GetConflictResolution ( );
__declspec(implementation_key(1792)) void _Workbook::PutConflictResolution ( enum XlSaveConflictResolution RHS );
__declspec(implementation_key(1793)) IDispatchPtr _Workbook::GetContainer ( );
__declspec(implementation_key(1794)) VARIANT_BOOL _Workbook::GetCreateBackup ( long lcid );
__declspec(implementation_key(1795)) IDispatchPtr _Workbook::GetCustomDocumentProperties ( );
__declspec(implementation_key(1796)) VARIANT_BOOL _Workbook::GetDate1904 ( long lcid );
__declspec(implementation_key(1797)) void _Workbook::PutDate1904 ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1798)) HRESULT _Workbook::DeleteNumberFormat ( _bstr_t NumberFormat, long lcid );
__declspec(implementation_key(1799)) SheetsPtr _Workbook::GetDialogSheets ( );
__declspec(implementation_key(1800)) enum XlDisplayDrawingObjects _Workbook::GetDisplayDrawingObjects ( long lcid );
__declspec(implementation_key(1801)) void _Workbook::PutDisplayDrawingObjects ( long lcid, enum XlDisplayDrawingObjects RHS );
__declspec(implementation_key(1802)) VARIANT_BOOL _Workbook::ExclusiveAccess ( long lcid );
__declspec(implementation_key(1803)) enum XlFileFormat _Workbook::GetFileFormat ( long lcid );
__declspec(implementation_key(1804)) HRESULT _Workbook::ForwardMailer ( long lcid );
__declspec(implementation_key(1805)) _bstr_t _Workbook::GetFullName ( long lcid );
__declspec(implementation_key(1806)) VARIANT_BOOL _Workbook::GetHasMailer ( long lcid );
__declspec(implementation_key(1807)) void _Workbook::PutHasMailer ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1808)) VARIANT_BOOL _Workbook::GetHasPassword ( long lcid );
__declspec(implementation_key(1809)) VARIANT_BOOL _Workbook::GetHasRoutingSlip ( long lcid );
__declspec(implementation_key(1810)) void _Workbook::PutHasRoutingSlip ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1811)) VARIANT_BOOL _Workbook::GetIsAddin ( );
__declspec(implementation_key(1812)) void _Workbook::PutIsAddin ( VARIANT_BOOL RHS );
__declspec(implementation_key(1813)) _bstr_t _Workbook::GetKeywords ( long lcid );
__declspec(implementation_key(1814)) void _Workbook::PutKeywords ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1815)) _variant_t _Workbook::LinkInfo ( _bstr_t Name, enum XlLinkInfo LinkInfo, const _variant_t & Type, const _variant_t & EditionRef, long lcid );
__declspec(implementation_key(1816)) _variant_t _Workbook::LinkSources ( const _variant_t & Type, long lcid );
__declspec(implementation_key(1817)) MailerPtr _Workbook::GetMailer ( );
__declspec(implementation_key(1818)) HRESULT _Workbook::MergeWorkbook ( const _variant_t & Filename );
__declspec(implementation_key(1819)) SheetsPtr _Workbook::GetModules ( );
__declspec(implementation_key(1820)) VARIANT_BOOL _Workbook::GetMultiUserEditing ( long lcid );
__declspec(implementation_key(1821)) _bstr_t _Workbook::GetName ( );
__declspec(implementation_key(1822)) NamesPtr _Workbook::GetNames ( );
__declspec(implementation_key(1823)) WindowPtr _Workbook::NewWindow ( long lcid );
__declspec(implementation_key(1824)) _bstr_t _Workbook::GetOnSave ( long lcid );
__declspec(implementation_key(1825)) void _Workbook::PutOnSave ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1826)) _bstr_t _Workbook::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(1827)) void _Workbook::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1828)) _bstr_t _Workbook::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(1829)) void _Workbook::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1830)) HRESULT _Workbook::OpenLinks ( _bstr_t Name, const _variant_t & ReadOnly, const _variant_t & Type, long lcid );
__declspec(implementation_key(1831)) _bstr_t _Workbook::GetPath ( long lcid );
__declspec(implementation_key(1832)) VARIANT_BOOL _Workbook::GetPersonalViewListSettings ( );
__declspec(implementation_key(1833)) void _Workbook::PutPersonalViewListSettings ( VARIANT_BOOL RHS );
__declspec(implementation_key(1834)) VARIANT_BOOL _Workbook::GetPersonalViewPrintSettings ( );
__declspec(implementation_key(1835)) void _Workbook::PutPersonalViewPrintSettings ( VARIANT_BOOL RHS );
__declspec(implementation_key(1836)) PivotCachesPtr _Workbook::PivotCaches ( );
__declspec(implementation_key(1837)) HRESULT _Workbook::Post ( const _variant_t & DestName, long lcid );
__declspec(implementation_key(1838)) VARIANT_BOOL _Workbook::GetPrecisionAsDisplayed ( long lcid );
__declspec(implementation_key(1839)) void _Workbook::PutPrecisionAsDisplayed ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1840)) HRESULT _Workbook::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(1841)) HRESULT _Workbook::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(1842)) HRESULT _Workbook::_Protect ( const _variant_t & Password, const _variant_t & Structure, const _variant_t & Windows );
__declspec(implementation_key(1843)) HRESULT _Workbook::ProtectSharing ( const _variant_t & Filename, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & SharingPassword );
__declspec(implementation_key(1844)) VARIANT_BOOL _Workbook::GetProtectStructure ( );
__declspec(implementation_key(1845)) VARIANT_BOOL _Workbook::GetProtectWindows ( );
__declspec(implementation_key(1846)) VARIANT_BOOL _Workbook::GetReadOnly ( long lcid );
__declspec(implementation_key(1847)) VARIANT_BOOL _Workbook::Get_ReadOnlyRecommended ( long lcid );
__declspec(implementation_key(1848)) HRESULT _Workbook::RefreshAll ( );
__declspec(implementation_key(1849)) HRESULT _Workbook::Reply ( long lcid );
__declspec(implementation_key(1850)) HRESULT _Workbook::ReplyAll ( long lcid );
__declspec(implementation_key(1851)) HRESULT _Workbook::RemoveUser ( long Index );
__declspec(implementation_key(1852)) long _Workbook::GetRevisionNumber ( long lcid );
__declspec(implementation_key(1853)) HRESULT _Workbook::Route ( long lcid );
__declspec(implementation_key(1854)) VARIANT_BOOL _Workbook::GetRouted ( long lcid );
__declspec(implementation_key(1855)) RoutingSlipPtr _Workbook::GetRoutingSlip ( );
__declspec(implementation_key(1856)) HRESULT _Workbook::RunAutoMacros ( enum XlRunAutoMacro Which, long lcid );
__declspec(implementation_key(1857)) HRESULT _Workbook::Save ( long lcid );
__declspec(implementation_key(1858)) HRESULT _Workbook::_SaveAs ( const _variant_t & Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, enum XlSaveAsAccessMode AccessMode, const _variant_t & ConflictResolution, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(1859)) HRESULT _Workbook::SaveCopyAs ( const _variant_t & Filename, long lcid );
__declspec(implementation_key(1860)) VARIANT_BOOL _Workbook::GetSaved ( long lcid );
__declspec(implementation_key(1861)) void _Workbook::PutSaved ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1862)) VARIANT_BOOL _Workbook::GetSaveLinkValues ( long lcid );
__declspec(implementation_key(1863)) void _Workbook::PutSaveLinkValues ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1864)) HRESULT _Workbook::SendMail ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ReturnReceipt, long lcid );
__declspec(implementation_key(1865)) HRESULT _Workbook::SendMailer ( const _variant_t & FileFormat, enum XlPriority Priority, long lcid );
__declspec(implementation_key(1866)) HRESULT _Workbook::SetLinkOnData ( _bstr_t Name, const _variant_t & Procedure, long lcid );
__declspec(implementation_key(1867)) SheetsPtr _Workbook::GetSheets ( );
__declspec(implementation_key(1868)) VARIANT_BOOL _Workbook::GetShowConflictHistory ( long lcid );
__declspec(implementation_key(1869)) void _Workbook::PutShowConflictHistory ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1870)) StylesPtr _Workbook::GetStyles ( );
__declspec(implementation_key(1871)) _bstr_t _Workbook::GetSubject ( long lcid );
__declspec(implementation_key(1872)) void _Workbook::PutSubject ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1873)) _bstr_t _Workbook::GetTitle ( long lcid );
__declspec(implementation_key(1874)) void _Workbook::PutTitle ( long lcid, _bstr_t RHS );
__declspec(implementation_key(1875)) HRESULT _Workbook::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(1876)) HRESULT _Workbook::UnprotectSharing ( const _variant_t & SharingPassword );
__declspec(implementation_key(1877)) HRESULT _Workbook::UpdateFromFile ( long lcid );
__declspec(implementation_key(1878)) HRESULT _Workbook::UpdateLink ( const _variant_t & Name, const _variant_t & Type, long lcid );
__declspec(implementation_key(1879)) VARIANT_BOOL _Workbook::GetUpdateRemoteReferences ( long lcid );
__declspec(implementation_key(1880)) void _Workbook::PutUpdateRemoteReferences ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(1881)) VARIANT_BOOL _Workbook::GetUserControl ( );
__declspec(implementation_key(1882)) void _Workbook::PutUserControl ( VARIANT_BOOL RHS );
__declspec(implementation_key(1883)) _variant_t _Workbook::GetUserStatus ( long lcid );
__declspec(implementation_key(1884)) CustomViewsPtr _Workbook::GetCustomViews ( );
__declspec(implementation_key(1885)) WindowsPtr _Workbook::GetWindows ( );
__declspec(implementation_key(1886)) SheetsPtr _Workbook::GetWorksheets ( );
__declspec(implementation_key(1887)) VARIANT_BOOL _Workbook::GetWriteReserved ( long lcid );
__declspec(implementation_key(1888)) _bstr_t _Workbook::GetWriteReservedBy ( long lcid );
__declspec(implementation_key(1889)) SheetsPtr _Workbook::GetExcel4IntlMacroSheets ( );
__declspec(implementation_key(1890)) SheetsPtr _Workbook::GetExcel4MacroSheets ( );
__declspec(implementation_key(1891)) VARIANT_BOOL _Workbook::GetTemplateRemoveExtData ( );
__declspec(implementation_key(1892)) void _Workbook::PutTemplateRemoveExtData ( VARIANT_BOOL RHS );
__declspec(implementation_key(1893)) HRESULT _Workbook::HighlightChangesOptions ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where );
__declspec(implementation_key(1894)) VARIANT_BOOL _Workbook::GetHighlightChangesOnScreen ( );
__declspec(implementation_key(1895)) void _Workbook::PutHighlightChangesOnScreen ( VARIANT_BOOL RHS );
__declspec(implementation_key(1896)) VARIANT_BOOL _Workbook::GetKeepChangeHistory ( );
__declspec(implementation_key(1897)) void _Workbook::PutKeepChangeHistory ( VARIANT_BOOL RHS );
__declspec(implementation_key(1898)) VARIANT_BOOL _Workbook::GetListChangesOnNewSheet ( );
__declspec(implementation_key(1899)) void _Workbook::PutListChangesOnNewSheet ( VARIANT_BOOL RHS );
__declspec(implementation_key(1900)) HRESULT _Workbook::PurgeChangeHistoryNow ( long Days, const _variant_t & SharingPassword );
__declspec(implementation_key(1901)) HRESULT _Workbook::AcceptAllChanges ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where );
__declspec(implementation_key(1902)) HRESULT _Workbook::RejectAllChanges ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where );
__declspec(implementation_key(1903)) HRESULT _Workbook::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection, long lcid );
__declspec(implementation_key(1904)) HRESULT _Workbook::ResetColors ( );
__declspec(implementation_key(1905)) VBIDE::_VBProjectPtr _Workbook::GetVBProject ( );
__declspec(implementation_key(1906)) HRESULT _Workbook::FollowHyperlink ( _bstr_t Address, const _variant_t & SubAddress, const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo );
__declspec(implementation_key(1907)) HRESULT _Workbook::AddToFavorites ( );
__declspec(implementation_key(1908)) VARIANT_BOOL _Workbook::GetIsInplace ( );
__declspec(implementation_key(1909)) HRESULT _Workbook::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(1910)) HRESULT _Workbook::WebPagePreview ( );
__declspec(implementation_key(1911)) PublishObjectsPtr _Workbook::GetPublishObjects ( );
__declspec(implementation_key(1912)) WebOptionsPtr _Workbook::GetWebOptions ( );
__declspec(implementation_key(1913)) HRESULT _Workbook::ReloadAs ( enum Office::MsoEncoding Encoding );
__declspec(implementation_key(1914)) Office::HTMLProjectPtr _Workbook::GetHTMLProject ( );
__declspec(implementation_key(1915)) VARIANT_BOOL _Workbook::GetEnvelopeVisible ( );
__declspec(implementation_key(1916)) void _Workbook::PutEnvelopeVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(1917)) long _Workbook::GetCalculationVersion ( );
__declspec(implementation_key(1918)) HRESULT _Workbook::Dummy17 ( long calcid );
__declspec(implementation_key(1919)) HRESULT _Workbook::sblt ( _bstr_t s );
__declspec(implementation_key(1920)) VARIANT_BOOL _Workbook::GetVBASigned ( );
__declspec(implementation_key(1921)) VARIANT_BOOL _Workbook::GetShowPivotTableFieldList ( );
__declspec(implementation_key(1922)) void _Workbook::PutShowPivotTableFieldList ( VARIANT_BOOL RHS );
__declspec(implementation_key(1923)) enum XlUpdateLinks _Workbook::GetUpdateLinks ( );
__declspec(implementation_key(1924)) void _Workbook::PutUpdateLinks ( enum XlUpdateLinks RHS );
__declspec(implementation_key(1925)) HRESULT _Workbook::BreakLink ( _bstr_t Name, enum XlLinkType Type );
__declspec(implementation_key(1926)) HRESULT _Workbook::Dummy16 ( );
__declspec(implementation_key(1927)) HRESULT _Workbook::SaveAs ( const _variant_t & Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, enum XlSaveAsAccessMode AccessMode, const _variant_t & ConflictResolution, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local, long lcid );
__declspec(implementation_key(1928)) VARIANT_BOOL _Workbook::GetEnableAutoRecover ( );
__declspec(implementation_key(1929)) void _Workbook::PutEnableAutoRecover ( VARIANT_BOOL RHS );
__declspec(implementation_key(1930)) VARIANT_BOOL _Workbook::GetRemovePersonalInformation ( );
__declspec(implementation_key(1931)) void _Workbook::PutRemovePersonalInformation ( VARIANT_BOOL RHS );
__declspec(implementation_key(1932)) _bstr_t _Workbook::GetFullNameURLEncoded ( long lcid );
__declspec(implementation_key(1933)) HRESULT _Workbook::CheckIn ( const _variant_t & SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic );
__declspec(implementation_key(1934)) VARIANT_BOOL _Workbook::CanCheckIn ( );
__declspec(implementation_key(1935)) HRESULT _Workbook::SendForReview ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ShowMessage, const _variant_t & IncludeAttachment );
__declspec(implementation_key(1936)) HRESULT _Workbook::ReplyWithChanges ( const _variant_t & ShowMessage );
__declspec(implementation_key(1937)) HRESULT _Workbook::EndReview ( );
__declspec(implementation_key(1938)) _bstr_t _Workbook::GetPassword ( );
__declspec(implementation_key(1939)) void _Workbook::PutPassword ( _bstr_t RHS );
__declspec(implementation_key(1940)) _bstr_t _Workbook::GetWritePassword ( );
__declspec(implementation_key(1941)) void _Workbook::PutWritePassword ( _bstr_t RHS );
__declspec(implementation_key(1942)) _bstr_t _Workbook::GetPasswordEncryptionProvider ( );
__declspec(implementation_key(1943)) _bstr_t _Workbook::GetPasswordEncryptionAlgorithm ( );
__declspec(implementation_key(1944)) long _Workbook::GetPasswordEncryptionKeyLength ( );
__declspec(implementation_key(1945)) HRESULT _Workbook::SetPasswordEncryptionOptions ( const _variant_t & PasswordEncryptionProvider, const _variant_t & PasswordEncryptionAlgorithm, const _variant_t & PasswordEncryptionKeyLength, const _variant_t & PasswordEncryptionFileProperties );
__declspec(implementation_key(1946)) VARIANT_BOOL _Workbook::GetPasswordEncryptionFileProperties ( );
__declspec(implementation_key(1947)) VARIANT_BOOL _Workbook::GetReadOnlyRecommended ( );
__declspec(implementation_key(1948)) void _Workbook::PutReadOnlyRecommended ( VARIANT_BOOL RHS );
__declspec(implementation_key(1949)) HRESULT _Workbook::Protect ( const _variant_t & Password, const _variant_t & Structure, const _variant_t & Windows );
__declspec(implementation_key(1950)) SmartTagOptionsPtr _Workbook::GetSmartTagOptions ( );
__declspec(implementation_key(1951)) HRESULT _Workbook::RecheckSmartTags ( );
__declspec(implementation_key(1952)) _ApplicationPtr Workbooks::GetApplication ( );
__declspec(implementation_key(1953)) enum XlCreator Workbooks::GetCreator ( );
__declspec(implementation_key(1954)) IDispatchPtr Workbooks::GetParent ( );
__declspec(implementation_key(1955)) _WorkbookPtr Workbooks::Add ( const _variant_t & Template, long lcid );
__declspec(implementation_key(1956)) HRESULT Workbooks::Close ( long lcid );
__declspec(implementation_key(1957)) long Workbooks::GetCount ( );
__declspec(implementation_key(1958)) _WorkbookPtr Workbooks::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1959)) IUnknownPtr Workbooks::Get_NewEnum ( );
__declspec(implementation_key(1960)) _WorkbookPtr Workbooks::_Open ( _bstr_t Filename, const _variant_t & UpdateLinks, const _variant_t & ReadOnly, const _variant_t & Format, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & IgnoreReadOnlyRecommended, const _variant_t & Origin, const _variant_t & Delimiter, const _variant_t & Editable, const _variant_t & Notify, const _variant_t & Converter, const _variant_t & AddToMru, long lcid );
__declspec(implementation_key(1961)) HRESULT Workbooks::__OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(1962)) _WorkbookPtr Workbooks::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1963)) HRESULT Workbooks::_OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, long lcid );
__declspec(implementation_key(1964)) _WorkbookPtr Workbooks::Open ( _bstr_t Filename, const _variant_t & UpdateLinks, const _variant_t & ReadOnly, const _variant_t & Format, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & IgnoreReadOnlyRecommended, const _variant_t & Origin, const _variant_t & Delimiter, const _variant_t & Editable, const _variant_t & Notify, const _variant_t & Converter, const _variant_t & AddToMru, const _variant_t & Local, const _variant_t & CorruptLoad, long lcid );
__declspec(implementation_key(1965)) HRESULT Workbooks::OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, const _variant_t & TrailingMinusNumbers, const _variant_t & Local, long lcid );
__declspec(implementation_key(1966)) _WorkbookPtr Workbooks::OpenDatabase ( _bstr_t Filename, const _variant_t & CommandText, const _variant_t & CommandType, const _variant_t & BackgroundQuery, const _variant_t & ImportDataAs );
__declspec(implementation_key(1967)) HRESULT Workbooks::CheckOut ( _bstr_t Filename );
__declspec(implementation_key(1968)) VARIANT_BOOL Workbooks::CanCheckOut ( _bstr_t Filename );
__declspec(implementation_key(1969)) _WorkbookPtr Workbooks::OpenXML ( _bstr_t Filename, const _variant_t & Stylesheets );
__declspec(implementation_key(1970)) _ApplicationPtr IMenuBars::GetApplication ( );
__declspec(implementation_key(1971)) enum XlCreator IMenuBars::GetCreator ( );
__declspec(implementation_key(1972)) IDispatchPtr IMenuBars::GetParent ( );
__declspec(implementation_key(1973)) MenuBarPtr IMenuBars::Add ( const _variant_t & Name );
__declspec(implementation_key(1974)) long IMenuBars::GetCount ( );
__declspec(implementation_key(1975)) MenuBarPtr IMenuBars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1976)) MenuBarPtr IMenuBars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1977)) IUnknownPtr IMenuBars::Get_NewEnum ( );
__declspec(implementation_key(1978)) _ApplicationPtr IMenuBar::GetApplication ( );
__declspec(implementation_key(1979)) enum XlCreator IMenuBar::GetCreator ( );
__declspec(implementation_key(1980)) IDispatchPtr IMenuBar::GetParent ( );
__declspec(implementation_key(1981)) HRESULT IMenuBar::Activate ( );
__declspec(implementation_key(1982)) VARIANT_BOOL IMenuBar::GetBuiltIn ( );
__declspec(implementation_key(1983)) _bstr_t IMenuBar::GetCaption ( );
__declspec(implementation_key(1984)) void IMenuBar::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(1985)) HRESULT IMenuBar::Delete ( );
__declspec(implementation_key(1986)) long IMenuBar::GetIndex ( );
__declspec(implementation_key(1987)) MenusPtr IMenuBar::GetMenus ( );
__declspec(implementation_key(1988)) HRESULT IMenuBar::Reset ( );
__declspec(implementation_key(1989)) _ApplicationPtr IMenus::GetApplication ( );
__declspec(implementation_key(1990)) enum XlCreator IMenus::GetCreator ( );
__declspec(implementation_key(1991)) IDispatchPtr IMenus::GetParent ( );
__declspec(implementation_key(1992)) MenuPtr IMenus::Add ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(1993)) long IMenus::GetCount ( );
__declspec(implementation_key(1994)) MenuPtr IMenus::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1995)) MenuPtr IMenus::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1996)) IUnknownPtr IMenus::Get_NewEnum ( );
__declspec(implementation_key(1997)) _ApplicationPtr IMenu::GetApplication ( );
__declspec(implementation_key(1998)) enum XlCreator IMenu::GetCreator ( );
__declspec(implementation_key(1999)) IDispatchPtr IMenu::GetParent ( );
__declspec(implementation_key(2000)) _bstr_t IMenu::GetCaption ( );
__declspec(implementation_key(2001)) void IMenu::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2002)) HRESULT IMenu::Delete ( );
__declspec(implementation_key(2003)) VARIANT_BOOL IMenu::GetEnabled ( );
__declspec(implementation_key(2004)) void IMenu::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(2005)) long IMenu::GetIndex ( );
__declspec(implementation_key(2006)) MenuItemsPtr IMenu::GetMenuItems ( );
__declspec(implementation_key(2007)) _ApplicationPtr IMenuItems::GetApplication ( );
__declspec(implementation_key(2008)) enum XlCreator IMenuItems::GetCreator ( );
__declspec(implementation_key(2009)) IDispatchPtr IMenuItems::GetParent ( );
__declspec(implementation_key(2010)) MenuItemPtr IMenuItems::Add ( _bstr_t Caption, const _variant_t & OnAction, const _variant_t & ShortcutKey, const _variant_t & Before, const _variant_t & Restore, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(2011)) MenuPtr IMenuItems::AddMenu ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(2012)) long IMenuItems::GetCount ( );
__declspec(implementation_key(2013)) IDispatchPtr IMenuItems::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(2014)) IDispatchPtr IMenuItems::GetItem ( const _variant_t & Index );
__declspec(implementation_key(2015)) IUnknownPtr IMenuItems::Get_NewEnum ( );
__declspec(implementation_key(2016)) _ApplicationPtr IMenuItem::GetApplication ( );
__declspec(implementation_key(2017)) enum XlCreator IMenuItem::GetCreator ( );
__declspec(implementation_key(2018)) IDispatchPtr IMenuItem::GetParent ( );
__declspec(implementation_key(2019)) _bstr_t IMenuItem::GetCaption ( );
__declspec(implementation_key(2020)) void IMenuItem::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2021)) VARIANT_BOOL IMenuItem::GetChecked ( );
__declspec(implementation_key(2022)) void IMenuItem::PutChecked ( VARIANT_BOOL RHS );
__declspec(implementation_key(2023)) HRESULT IMenuItem::Delete ( );
__declspec(implementation_key(2024)) VARIANT_BOOL IMenuItem::GetEnabled ( );
__declspec(implementation_key(2025)) void IMenuItem::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(2026)) long IMenuItem::GetHelpContextID ( );
__declspec(implementation_key(2027)) void IMenuItem::PutHelpContextID ( long RHS );
__declspec(implementation_key(2028)) _bstr_t IMenuItem::GetHelpFile ( );
__declspec(implementation_key(2029)) void IMenuItem::PutHelpFile ( _bstr_t RHS );
__declspec(implementation_key(2030)) long IMenuItem::GetIndex ( );
__declspec(implementation_key(2031)) _bstr_t IMenuItem::GetOnAction ( );
__declspec(implementation_key(2032)) void IMenuItem::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(2033)) _bstr_t IMenuItem::GetStatusBar ( );
__declspec(implementation_key(2034)) void IMenuItem::PutStatusBar ( _bstr_t RHS );
__declspec(implementation_key(2035)) _ApplicationPtr ICharts::GetApplication ( );
__declspec(implementation_key(2036)) enum XlCreator ICharts::GetCreator ( );
__declspec(implementation_key(2037)) IDispatchPtr ICharts::GetParent ( );
__declspec(implementation_key(2038)) _ChartPtr ICharts::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(2039)) HRESULT ICharts::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(2040)) long ICharts::GetCount ( );
__declspec(implementation_key(2041)) HRESULT ICharts::Delete ( long lcid );
__declspec(implementation_key(2042)) IDispatchPtr ICharts::GetItem ( const _variant_t & Index );
__declspec(implementation_key(2043)) HRESULT ICharts::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(2044)) IUnknownPtr ICharts::Get_NewEnum ( );
__declspec(implementation_key(2045)) HRESULT ICharts::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(2046)) HRESULT ICharts::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(2047)) HRESULT ICharts::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(2048)) HPageBreaksPtr ICharts::GetHPageBreaks ( );
__declspec(implementation_key(2049)) VPageBreaksPtr ICharts::GetVPageBreaks ( );
__declspec(implementation_key(2050)) _variant_t ICharts::GetVisible ( long lcid );
__declspec(implementation_key(2051)) void ICharts::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(2052)) IDispatchPtr ICharts::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(2053)) HRESULT ICharts::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(2054)) _ApplicationPtr IDrawingObjects::GetApplication ( );
__declspec(implementation_key(2055)) enum XlCreator IDrawingObjects::GetCreator ( );
__declspec(implementation_key(2056)) IDispatchPtr IDrawingObjects::GetParent ( );
__declspec(implementation_key(2057)) _variant_t IDrawingObjects::BringToFront ( );
__declspec(implementation_key(2058)) _variant_t IDrawingObjects::Copy ( );
__declspec(implementation_key(2059)) _variant_t IDrawingObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2060)) _variant_t IDrawingObjects::Cut ( );
__declspec(implementation_key(2061)) _variant_t IDrawingObjects::Delete ( );
__declspec(implementation_key(2062)) IDispatchPtr IDrawingObjects::Duplicate ( );
__declspec(implementation_key(2063)) VARIANT_BOOL IDrawingObjects::GetEnabled ( );
__declspec(implementation_key(2064)) void IDrawingObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(2065)) double IDrawingObjects::GetHeight ( );
__declspec(implementation_key(2066)) void IDrawingObjects::PutHeight ( double RHS );
__declspec(implementation_key(2067)) double IDrawingObjects::GetLeft ( );
__declspec(implementation_key(2068)) void IDrawingObjects::PutLeft ( double RHS );
__declspec(implementation_key(2069)) VARIANT_BOOL IDrawingObjects::GetLocked ( );
__declspec(implementation_key(2070)) void IDrawingObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(2071)) _bstr_t IDrawingObjects::GetOnAction ( );
__declspec(implementation_key(2072)) void IDrawingObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(2073)) _variant_t IDrawingObjects::GetPlacement ( );
__declspec(implementation_key(2074)) void IDrawingObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(2075)) VARIANT_BOOL IDrawingObjects::GetPrintObject ( );
__declspec(implementation_key(2076)) void IDrawingObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(2077)) _variant_t IDrawingObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(2078)) _variant_t IDrawingObjects::SendToBack ( );
__declspec(implementation_key(2079)) double IDrawingObjects::GetTop ( );
__declspec(implementation_key(2080)) void IDrawingObjects::PutTop ( double RHS );
__declspec(implementation_key(2081)) VARIANT_BOOL IDrawingObjects::GetVisible ( );
__declspec(implementation_key(2082)) void IDrawingObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(2083)) double IDrawingObjects::GetWidth ( );
__declspec(implementation_key(2084)) void IDrawingObjects::PutWidth ( double RHS );
__declspec(implementation_key(2085)) long IDrawingObjects::GetZOrder ( );
__declspec(implementation_key(2086)) ShapeRangePtr IDrawingObjects::GetShapeRange ( );
__declspec(implementation_key(2087)) _variant_t IDrawingObjects::GetAccelerator ( );
__declspec(implementation_key(2088)) void IDrawingObjects::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2089)) VARIANT_BOOL IDrawingObjects::GetAddIndent ( );
__declspec(implementation_key(2090)) void IDrawingObjects::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(2091)) _variant_t IDrawingObjects::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(2092)) _variant_t IDrawingObjects::GetArrowHeadLength ( );
__declspec(implementation_key(2093)) void IDrawingObjects::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(2094)) _variant_t IDrawingObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(2095)) void IDrawingObjects::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(2096)) _variant_t IDrawingObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(2097)) void IDrawingObjects::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(2098)) VARIANT_BOOL IDrawingObjects::GetAutoSize ( );
__declspec(implementation_key(2099)) void IDrawingObjects::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(2100)) BorderPtr IDrawingObjects::GetBorder ( );
__declspec(implementation_key(2101)) VARIANT_BOOL IDrawingObjects::GetCancelButton ( );
__declspec(implementation_key(2102)) void IDrawingObjects::PutCancelButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2103)) _bstr_t IDrawingObjects::GetCaption ( );
__declspec(implementation_key(2104)) void IDrawingObjects::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2105)) CharactersPtr IDrawingObjects::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2106)) _variant_t IDrawingObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2107)) long IDrawingObjects::Get_Default ( );
__declspec(implementation_key(2108)) void IDrawingObjects::Put_Default ( long RHS );
__declspec(implementation_key(2109)) VARIANT_BOOL IDrawingObjects::GetDefaultButton ( );
__declspec(implementation_key(2110)) void IDrawingObjects::PutDefaultButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2111)) VARIANT_BOOL IDrawingObjects::GetDismissButton ( );
__declspec(implementation_key(2112)) void IDrawingObjects::PutDismissButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2113)) VARIANT_BOOL IDrawingObjects::GetDisplay3DShading ( );
__declspec(implementation_key(2114)) void IDrawingObjects::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(2115)) VARIANT_BOOL IDrawingObjects::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(2116)) void IDrawingObjects::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(2117)) long IDrawingObjects::GetDropDownLines ( );
__declspec(implementation_key(2118)) void IDrawingObjects::PutDropDownLines ( long RHS );
__declspec(implementation_key(2119)) FontPtr IDrawingObjects::GetFont ( );
__declspec(implementation_key(2120)) VARIANT_BOOL IDrawingObjects::GetHelpButton ( );
__declspec(implementation_key(2121)) void IDrawingObjects::PutHelpButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2122)) _variant_t IDrawingObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(2123)) void IDrawingObjects::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(2124)) long IDrawingObjects::GetInputType ( );
__declspec(implementation_key(2125)) void IDrawingObjects::PutInputType ( long RHS );
__declspec(implementation_key(2126)) InteriorPtr IDrawingObjects::GetInterior ( );
__declspec(implementation_key(2127)) long IDrawingObjects::GetLargeChange ( );
__declspec(implementation_key(2128)) void IDrawingObjects::PutLargeChange ( long RHS );
__declspec(implementation_key(2129)) _bstr_t IDrawingObjects::GetLinkedCell ( );
__declspec(implementation_key(2130)) void IDrawingObjects::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(2131)) _variant_t IDrawingObjects::List ( const _variant_t & Index );
__declspec(implementation_key(2132)) _bstr_t IDrawingObjects::GetListFillRange ( );
__declspec(implementation_key(2133)) void IDrawingObjects::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(2134)) long IDrawingObjects::GetListIndex ( );
__declspec(implementation_key(2135)) void IDrawingObjects::PutListIndex ( long RHS );
__declspec(implementation_key(2136)) VARIANT_BOOL IDrawingObjects::GetLockedText ( );
__declspec(implementation_key(2137)) void IDrawingObjects::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(2138)) long IDrawingObjects::GetMax ( );
__declspec(implementation_key(2139)) void IDrawingObjects::PutMax ( long RHS );
__declspec(implementation_key(2140)) long IDrawingObjects::GetMin ( );
__declspec(implementation_key(2141)) void IDrawingObjects::PutMin ( long RHS );
__declspec(implementation_key(2142)) VARIANT_BOOL IDrawingObjects::GetMultiLine ( );
__declspec(implementation_key(2143)) void IDrawingObjects::PutMultiLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(2144)) VARIANT_BOOL IDrawingObjects::GetMultiSelect ( );
__declspec(implementation_key(2145)) void IDrawingObjects::PutMultiSelect ( VARIANT_BOOL RHS );
__declspec(implementation_key(2146)) _variant_t IDrawingObjects::GetOrientation ( );
__declspec(implementation_key(2147)) void IDrawingObjects::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(2148)) _variant_t IDrawingObjects::GetPhoneticAccelerator ( );
__declspec(implementation_key(2149)) void IDrawingObjects::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2150)) _variant_t IDrawingObjects::RemoveAllItems ( );
__declspec(implementation_key(2151)) _variant_t IDrawingObjects::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(2152)) _variant_t IDrawingObjects::Reshape ( long Vertex, const _variant_t & Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(2153)) VARIANT_BOOL IDrawingObjects::GetRoundedCorners ( );
__declspec(implementation_key(2154)) void IDrawingObjects::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(2155)) _variant_t IDrawingObjects::Selected ( const _variant_t & Index );
__declspec(implementation_key(2156)) VARIANT_BOOL IDrawingObjects::GetShadow ( );
__declspec(implementation_key(2157)) void IDrawingObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(2158)) long IDrawingObjects::GetSmallChange ( );
__declspec(implementation_key(2159)) void IDrawingObjects::PutSmallChange ( long RHS );
__declspec(implementation_key(2160)) _bstr_t IDrawingObjects::GetText ( );
__declspec(implementation_key(2161)) void IDrawingObjects::PutText ( _bstr_t RHS );
__declspec(implementation_key(2162)) IDispatchPtr IDrawingObjects::Ungroup ( );
__declspec(implementation_key(2163)) long IDrawingObjects::GetValue ( );
__declspec(implementation_key(2164)) void IDrawingObjects::PutValue ( long RHS );
__declspec(implementation_key(2165)) _variant_t IDrawingObjects::GetVerticalAlignment ( );
__declspec(implementation_key(2166)) void IDrawingObjects::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(2167)) _variant_t IDrawingObjects::Vertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(2168)) long IDrawingObjects::GetReadingOrder ( );
__declspec(implementation_key(2169)) void IDrawingObjects::PutReadingOrder ( long RHS );
__declspec(implementation_key(2170)) long IDrawingObjects::GetCount ( );
__declspec(implementation_key(2171)) IDispatchPtr IDrawingObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(2172)) GroupObjectPtr IDrawingObjects::Group ( );
__declspec(implementation_key(2173)) _variant_t IDrawingObjects::LinkCombo ( const _variant_t & Link );
__declspec(implementation_key(2174)) IUnknownPtr IDrawingObjects::_NewEnum ( );
__declspec(implementation_key(2175)) _ApplicationPtr IPivotCache::GetApplication ( );
__declspec(implementation_key(2176)) enum XlCreator IPivotCache::GetCreator ( );
__declspec(implementation_key(2177)) IDispatchPtr IPivotCache::GetParent ( );
__declspec(implementation_key(2178)) VARIANT_BOOL IPivotCache::GetBackgroundQuery ( );
__declspec(implementation_key(2179)) void IPivotCache::PutBackgroundQuery ( VARIANT_BOOL RHS );
__declspec(implementation_key(2180)) _variant_t IPivotCache::GetConnection ( );
__declspec(implementation_key(2181)) void IPivotCache::PutConnection ( const _variant_t & RHS );
__declspec(implementation_key(2182)) VARIANT_BOOL IPivotCache::GetEnableRefresh ( );
__declspec(implementation_key(2183)) void IPivotCache::PutEnableRefresh ( VARIANT_BOOL RHS );
__declspec(implementation_key(2184)) long IPivotCache::GetIndex ( );
__declspec(implementation_key(2185)) long IPivotCache::GetMemoryUsed ( );
__declspec(implementation_key(2186)) VARIANT_BOOL IPivotCache::GetOptimizeCache ( );
__declspec(implementation_key(2187)) void IPivotCache::PutOptimizeCache ( VARIANT_BOOL RHS );
__declspec(implementation_key(2188)) long IPivotCache::GetRecordCount ( );
__declspec(implementation_key(2189)) HRESULT IPivotCache::Refresh ( );
__declspec(implementation_key(2190)) DATE IPivotCache::GetRefreshDate ( );
__declspec(implementation_key(2191)) _bstr_t IPivotCache::GetRefreshName ( );
__declspec(implementation_key(2192)) VARIANT_BOOL IPivotCache::GetRefreshOnFileOpen ( );
__declspec(implementation_key(2193)) void IPivotCache::PutRefreshOnFileOpen ( VARIANT_BOOL RHS );
__declspec(implementation_key(2194)) _variant_t IPivotCache::GetSql ( );
__declspec(implementation_key(2195)) void IPivotCache::PutSql ( const _variant_t & RHS );
__declspec(implementation_key(2196)) VARIANT_BOOL IPivotCache::GetSavePassword ( );
__declspec(implementation_key(2197)) void IPivotCache::PutSavePassword ( VARIANT_BOOL RHS );
__declspec(implementation_key(2198)) _variant_t IPivotCache::GetSourceData ( );
__declspec(implementation_key(2199)) void IPivotCache::PutSourceData ( const _variant_t & RHS );
__declspec(implementation_key(2200)) _variant_t IPivotCache::GetCommandText ( );
__declspec(implementation_key(2201)) void IPivotCache::PutCommandText ( const _variant_t & RHS );
__declspec(implementation_key(2202)) enum XlCmdType IPivotCache::GetCommandType ( );
__declspec(implementation_key(2203)) void IPivotCache::PutCommandType ( enum XlCmdType RHS );
__declspec(implementation_key(2204)) enum XlQueryType IPivotCache::GetQueryType ( );
__declspec(implementation_key(2205)) VARIANT_BOOL IPivotCache::GetMaintainConnection ( );
__declspec(implementation_key(2206)) void IPivotCache::PutMaintainConnection ( VARIANT_BOOL RHS );
__declspec(implementation_key(2207)) long IPivotCache::GetRefreshPeriod ( );
__declspec(implementation_key(2208)) void IPivotCache::PutRefreshPeriod ( long RHS );
__declspec(implementation_key(2209)) IDispatchPtr IPivotCache::GetRecordset ( );
__declspec(implementation_key(2210)) void IPivotCache::PutRefRecordset ( IDispatch * RHS );
__declspec(implementation_key(2211)) HRESULT IPivotCache::ResetTimer ( );
__declspec(implementation_key(2212)) _variant_t IPivotCache::GetLocalConnection ( );
__declspec(implementation_key(2213)) void IPivotCache::PutLocalConnection ( const _variant_t & RHS );
__declspec(implementation_key(2214)) PivotTablePtr IPivotCache::CreatePivotTable ( const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion );
__declspec(implementation_key(2215)) VARIANT_BOOL IPivotCache::GetUseLocalConnection ( );
__declspec(implementation_key(2216)) void IPivotCache::PutUseLocalConnection ( VARIANT_BOOL RHS );
__declspec(implementation_key(2217)) IDispatchPtr IPivotCache::GetADOConnection ( );
__declspec(implementation_key(2218)) VARIANT_BOOL IPivotCache::GetIsConnected ( );
__declspec(implementation_key(2219)) HRESULT IPivotCache::MakeConnection ( );
__declspec(implementation_key(2220)) VARIANT_BOOL IPivotCache::GetOLAP ( );
__declspec(implementation_key(2221)) enum XlPivotTableSourceType IPivotCache::GetSourceType ( );
__declspec(implementation_key(2222)) enum XlPivotTableMissingItems IPivotCache::GetMissingItemsLimit ( );
__declspec(implementation_key(2223)) void IPivotCache::PutMissingItemsLimit ( enum XlPivotTableMissingItems RHS );
__declspec(implementation_key(2224)) _bstr_t IPivotCache::GetSourceConnectionFile ( );
__declspec(implementation_key(2225)) void IPivotCache::PutSourceConnectionFile ( _bstr_t RHS );
__declspec(implementation_key(2226)) _bstr_t IPivotCache::GetSourceDataFile ( );
__declspec(implementation_key(2227)) enum XlRobustConnect IPivotCache::GetRobustConnect ( );
__declspec(implementation_key(2228)) void IPivotCache::PutRobustConnect ( enum XlRobustConnect RHS );
__declspec(implementation_key(2229)) HRESULT IPivotCache::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords );
__declspec(implementation_key(2230)) _ApplicationPtr IPivotCaches::GetApplication ( );
__declspec(implementation_key(2231)) enum XlCreator IPivotCaches::GetCreator ( );
__declspec(implementation_key(2232)) IDispatchPtr IPivotCaches::GetParent ( );
__declspec(implementation_key(2233)) long IPivotCaches::GetCount ( );
__declspec(implementation_key(2234)) PivotCachePtr IPivotCaches::Item ( const _variant_t & Index );
__declspec(implementation_key(2235)) PivotCachePtr IPivotCaches::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(2236)) IUnknownPtr IPivotCaches::_NewEnum ( );
__declspec(implementation_key(2237)) PivotCachePtr IPivotCaches::Add ( enum XlPivotTableSourceType SourceType, const _variant_t & SourceData );
__declspec(implementation_key(2238)) _ApplicationPtr IPivotFormula::GetApplication ( );
__declspec(implementation_key(2239)) enum XlCreator IPivotFormula::GetCreator ( );
__declspec(implementation_key(2240)) IDispatchPtr IPivotFormula::GetParent ( );
__declspec(implementation_key(2241)) HRESULT IPivotFormula::Delete ( );
__declspec(implementation_key(2242)) _bstr_t IPivotFormula::Get_Default ( );
__declspec(implementation_key(2243)) void IPivotFormula::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(2244)) _bstr_t IPivotFormula::GetFormula ( );
__declspec(implementation_key(2245)) void IPivotFormula::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(2246)) _bstr_t IPivotFormula::GetValue ( );
__declspec(implementation_key(2247)) void IPivotFormula::PutValue ( _bstr_t RHS );
__declspec(implementation_key(2248)) long IPivotFormula::GetIndex ( );
__declspec(implementation_key(2249)) void IPivotFormula::PutIndex ( long RHS );
__declspec(implementation_key(2250)) _bstr_t IPivotFormula::GetStandardFormula ( );
__declspec(implementation_key(2251)) void IPivotFormula::PutStandardFormula ( _bstr_t RHS );
__declspec(implementation_key(2252)) _ApplicationPtr IPivotFormulas::GetApplication ( );
__declspec(implementation_key(2253)) enum XlCreator IPivotFormulas::GetCreator ( );
__declspec(implementation_key(2254)) IDispatchPtr IPivotFormulas::GetParent ( );
__declspec(implementation_key(2255)) long IPivotFormulas::GetCount ( );
__declspec(implementation_key(2256)) PivotFormulaPtr IPivotFormulas::_Add ( _bstr_t Formula );
__declspec(implementation_key(2257)) PivotFormulaPtr IPivotFormulas::Item ( const _variant_t & Index );
__declspec(implementation_key(2258)) PivotFormulaPtr IPivotFormulas::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(2259)) IUnknownPtr IPivotFormulas::_NewEnum ( );
__declspec(implementation_key(2260)) PivotFormulaPtr IPivotFormulas::Add ( _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(2261)) _ApplicationPtr IPivotTable::GetApplication ( );
__declspec(implementation_key(2262)) enum XlCreator IPivotTable::GetCreator ( );
__declspec(implementation_key(2263)) IDispatchPtr IPivotTable::GetParent ( );
__declspec(implementation_key(2264)) _variant_t IPivotTable::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AddToTable );
__declspec(implementation_key(2265)) IDispatchPtr IPivotTable::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(2266)) VARIANT_BOOL IPivotTable::GetColumnGrand ( );
__declspec(implementation_key(2267)) void IPivotTable::PutColumnGrand ( VARIANT_BOOL RHS );
__declspec(implementation_key(2268)) RangePtr IPivotTable::GetColumnRange ( );
__declspec(implementation_key(2269)) _variant_t IPivotTable::ShowPages ( const _variant_t & PageField );
__declspec(implementation_key(2270)) RangePtr IPivotTable::GetDataBodyRange ( );
__declspec(implementation_key(2271)) IDispatchPtr IPivotTable::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(2272)) RangePtr IPivotTable::GetDataLabelRange ( );
__declspec(implementation_key(2273)) _bstr_t IPivotTable::Get_Default ( );
__declspec(implementation_key(2274)) void IPivotTable::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(2275)) VARIANT_BOOL IPivotTable::GetHasAutoFormat ( );
__declspec(implementation_key(2276)) void IPivotTable::PutHasAutoFormat ( VARIANT_BOOL RHS );
__declspec(implementation_key(2277)) IDispatchPtr IPivotTable::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(2278)) _bstr_t IPivotTable::GetInnerDetail ( );
__declspec(implementation_key(2279)) void IPivotTable::PutInnerDetail ( _bstr_t RHS );
__declspec(implementation_key(2280)) _bstr_t IPivotTable::GetName ( );
__declspec(implementation_key(2281)) void IPivotTable::PutName ( _bstr_t RHS );
__declspec(implementation_key(2282)) IDispatchPtr IPivotTable::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(2283)) RangePtr IPivotTable::GetPageRange ( );
__declspec(implementation_key(2284)) RangePtr IPivotTable::GetPageRangeCells ( );
__declspec(implementation_key(2285)) IDispatchPtr IPivotTable::PivotFields ( const _variant_t & Index );
__declspec(implementation_key(2286)) DATE IPivotTable::GetRefreshDate ( );
__declspec(implementation_key(2287)) _bstr_t IPivotTable::GetRefreshName ( );
__declspec(implementation_key(2288)) VARIANT_BOOL IPivotTable::RefreshTable ( );
__declspec(implementation_key(2289)) IDispatchPtr IPivotTable::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(2290)) VARIANT_BOOL IPivotTable::GetRowGrand ( );
__declspec(implementation_key(2291)) void IPivotTable::PutRowGrand ( VARIANT_BOOL RHS );
__declspec(implementation_key(2292)) RangePtr IPivotTable::GetRowRange ( );
__declspec(implementation_key(2293)) VARIANT_BOOL IPivotTable::GetSaveData ( );
__declspec(implementation_key(2294)) void IPivotTable::PutSaveData ( VARIANT_BOOL RHS );
__declspec(implementation_key(2295)) _variant_t IPivotTable::GetSourceData ( );
__declspec(implementation_key(2296)) void IPivotTable::PutSourceData ( const _variant_t & RHS );
__declspec(implementation_key(2297)) RangePtr IPivotTable::GetTableRange1 ( );
__declspec(implementation_key(2298)) RangePtr IPivotTable::GetTableRange2 ( );
__declspec(implementation_key(2299)) _bstr_t IPivotTable::GetValue ( );
__declspec(implementation_key(2300)) void IPivotTable::PutValue ( _bstr_t RHS );
__declspec(implementation_key(2301)) IDispatchPtr IPivotTable::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(2302)) long IPivotTable::GetCacheIndex ( );
__declspec(implementation_key(2303)) void IPivotTable::PutCacheIndex ( long RHS );
__declspec(implementation_key(2304)) CalculatedFieldsPtr IPivotTable::CalculatedFields ( );
__declspec(implementation_key(2305)) VARIANT_BOOL IPivotTable::GetDisplayErrorString ( );
__declspec(implementation_key(2306)) void IPivotTable::PutDisplayErrorString ( VARIANT_BOOL RHS );
__declspec(implementation_key(2307)) VARIANT_BOOL IPivotTable::GetDisplayNullString ( );
__declspec(implementation_key(2308)) void IPivotTable::PutDisplayNullString ( VARIANT_BOOL RHS );
__declspec(implementation_key(2309)) VARIANT_BOOL IPivotTable::GetEnableDrilldown ( );
__declspec(implementation_key(2310)) void IPivotTable::PutEnableDrilldown ( VARIANT_BOOL RHS );
__declspec(implementation_key(2311)) VARIANT_BOOL IPivotTable::GetEnableFieldDialog ( );
__declspec(implementation_key(2312)) void IPivotTable::PutEnableFieldDialog ( VARIANT_BOOL RHS );
__declspec(implementation_key(2313)) VARIANT_BOOL IPivotTable::GetEnableWizard ( );
__declspec(implementation_key(2314)) void IPivotTable::PutEnableWizard ( VARIANT_BOOL RHS );
__declspec(implementation_key(2315)) _bstr_t IPivotTable::GetErrorString ( );
__declspec(implementation_key(2316)) void IPivotTable::PutErrorString ( _bstr_t RHS );
__declspec(implementation_key(2317)) double IPivotTable::GetData ( _bstr_t Name );
__declspec(implementation_key(2318)) HRESULT IPivotTable::ListFormulas ( );
__declspec(implementation_key(2319)) VARIANT_BOOL IPivotTable::GetManualUpdate ( );
__declspec(implementation_key(2320)) void IPivotTable::PutManualUpdate ( VARIANT_BOOL RHS );
__declspec(implementation_key(2321)) VARIANT_BOOL IPivotTable::GetMergeLabels ( );
__declspec(implementation_key(2322)) void IPivotTable::PutMergeLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(2323)) _bstr_t IPivotTable::GetNullString ( );
__declspec(implementation_key(2324)) void IPivotTable::PutNullString ( _bstr_t RHS );
__declspec(implementation_key(2325)) PivotCachePtr IPivotTable::PivotCache ( );
__declspec(implementation_key(2326)) PivotFormulasPtr IPivotTable::GetPivotFormulas ( );
__declspec(implementation_key(2327)) HRESULT IPivotTable::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection );
__declspec(implementation_key(2328)) VARIANT_BOOL IPivotTable::GetSubtotalHiddenPageItems ( );
__declspec(implementation_key(2329)) void IPivotTable::PutSubtotalHiddenPageItems ( VARIANT_BOOL RHS );
__declspec(implementation_key(2330)) long IPivotTable::GetPageFieldOrder ( );
__declspec(implementation_key(2331)) void IPivotTable::PutPageFieldOrder ( long RHS );
__declspec(implementation_key(2332)) _bstr_t IPivotTable::GetPageFieldStyle ( );
__declspec(implementation_key(2333)) void IPivotTable::PutPageFieldStyle ( _bstr_t RHS );
__declspec(implementation_key(2334)) long IPivotTable::GetPageFieldWrapCount ( );
__declspec(implementation_key(2335)) void IPivotTable::PutPageFieldWrapCount ( long RHS );
__declspec(implementation_key(2336)) VARIANT_BOOL IPivotTable::GetPreserveFormatting ( );
__declspec(implementation_key(2337)) void IPivotTable::PutPreserveFormatting ( VARIANT_BOOL RHS );
__declspec(implementation_key(2338)) HRESULT IPivotTable::_PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode );
__declspec(implementation_key(2339)) _bstr_t IPivotTable::GetPivotSelection ( );
__declspec(implementation_key(2340)) void IPivotTable::PutPivotSelection ( _bstr_t RHS );
__declspec(implementation_key(2341)) enum XlPTSelectionMode IPivotTable::GetSelectionMode ( );
__declspec(implementation_key(2342)) void IPivotTable::PutSelectionMode ( enum XlPTSelectionMode RHS );
__declspec(implementation_key(2343)) _bstr_t IPivotTable::GetTableStyle ( );
__declspec(implementation_key(2344)) void IPivotTable::PutTableStyle ( _bstr_t RHS );
__declspec(implementation_key(2345)) _bstr_t IPivotTable::GetTag ( );
__declspec(implementation_key(2346)) void IPivotTable::PutTag ( _bstr_t RHS );
__declspec(implementation_key(2347)) HRESULT IPivotTable::Update ( );
__declspec(implementation_key(2348)) _bstr_t IPivotTable::GetVacatedStyle ( );
__declspec(implementation_key(2349)) void IPivotTable::PutVacatedStyle ( _bstr_t RHS );
__declspec(implementation_key(2350)) HRESULT IPivotTable::Format ( enum XlPivotFormatType Format );
__declspec(implementation_key(2351)) VARIANT_BOOL IPivotTable::GetPrintTitles ( );
__declspec(implementation_key(2352)) void IPivotTable::PutPrintTitles ( VARIANT_BOOL RHS );
__declspec(implementation_key(2353)) CubeFieldsPtr IPivotTable::GetCubeFields ( );
__declspec(implementation_key(2354)) _bstr_t IPivotTable::GetGrandTotalName ( );
__declspec(implementation_key(2355)) void IPivotTable::PutGrandTotalName ( _bstr_t RHS );
__declspec(implementation_key(2356)) VARIANT_BOOL IPivotTable::GetSmallGrid ( );
__declspec(implementation_key(2357)) void IPivotTable::PutSmallGrid ( VARIANT_BOOL RHS );
__declspec(implementation_key(2358)) VARIANT_BOOL IPivotTable::GetRepeatItemsOnEachPrintedPage ( );
__declspec(implementation_key(2359)) void IPivotTable::PutRepeatItemsOnEachPrintedPage ( VARIANT_BOOL RHS );
__declspec(implementation_key(2360)) VARIANT_BOOL IPivotTable::GetTotalsAnnotation ( );
__declspec(implementation_key(2361)) void IPivotTable::PutTotalsAnnotation ( VARIANT_BOOL RHS );
__declspec(implementation_key(2362)) HRESULT IPivotTable::PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode, const _variant_t & UseStandardName );
__declspec(implementation_key(2363)) _bstr_t IPivotTable::GetPivotSelectionStandard ( );
__declspec(implementation_key(2364)) void IPivotTable::PutPivotSelectionStandard ( _bstr_t RHS );
__declspec(implementation_key(2365)) RangePtr IPivotTable::GetPivotData ( const _variant_t & DataField, const _variant_t & Field1, const _variant_t & Item1, const _variant_t & Field2, const _variant_t & Item2, const _variant_t & Field3, const _variant_t & Item3, const _variant_t & Field4, const _variant_t & Item4, const _variant_t & Field5, const _variant_t & Item5, const _variant_t & Field6, const _variant_t & Item6, const _variant_t & Field7, const _variant_t & Item7, const _variant_t & Field8, const _variant_t & Item8, const _variant_t & Field9, const _variant_t & Item9, const _variant_t & Field10, const _variant_t & Item10, const _variant_t & Field11, const _variant_t & Item11, const _variant_t & Field12, const _variant_t & Item12, const _variant_t & Field13, const _variant_t & Item13, const _variant_t & Field14, const _variant_t & Item14 );
__declspec(implementation_key(2366)) PivotFieldPtr IPivotTable::GetDataPivotField ( );
__declspec(implementation_key(2367)) VARIANT_BOOL IPivotTable::GetEnableDataValueEditing ( );
__declspec(implementation_key(2368)) void IPivotTable::PutEnableDataValueEditing ( VARIANT_BOOL RHS );
__declspec(implementation_key(2369)) PivotFieldPtr IPivotTable::AddDataField ( IDispatch * Field, const _variant_t & Caption, const _variant_t & Function );
__declspec(implementation_key(2370)) _bstr_t IPivotTable::GetMDX ( );
__declspec(implementation_key(2371)) VARIANT_BOOL IPivotTable::GetViewCalculatedMembers ( );
__declspec(implementation_key(2372)) void IPivotTable::PutViewCalculatedMembers ( VARIANT_BOOL RHS );
__declspec(implementation_key(2373)) CalculatedMembersPtr IPivotTable::GetCalculatedMembers ( );
__declspec(implementation_key(2374)) VARIANT_BOOL IPivotTable::GetDisplayImmediateItems ( );
__declspec(implementation_key(2375)) void IPivotTable::PutDisplayImmediateItems ( VARIANT_BOOL RHS );
__declspec(implementation_key(2376)) _variant_t IPivotTable::Dummy15 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(2377)) VARIANT_BOOL IPivotTable::GetEnableFieldList ( );
__declspec(implementation_key(2378)) void IPivotTable::PutEnableFieldList ( VARIANT_BOOL RHS );
__declspec(implementation_key(2379)) VARIANT_BOOL IPivotTable::GetVisualTotals ( );
__declspec(implementation_key(2380)) void IPivotTable::PutVisualTotals ( VARIANT_BOOL RHS );
__declspec(implementation_key(2381)) VARIANT_BOOL IPivotTable::GetShowPageMultipleItemLabel ( );
__declspec(implementation_key(2382)) void IPivotTable::PutShowPageMultipleItemLabel ( VARIANT_BOOL RHS );
__declspec(implementation_key(2383)) enum XlPivotTableVersionList IPivotTable::GetVersion ( );
__declspec(implementation_key(2384)) _bstr_t IPivotTable::CreateCubeFile ( _bstr_t File, const _variant_t & Measures, const _variant_t & Levels, const _variant_t & Members, const _variant_t & Properties );
__declspec(implementation_key(2385)) VARIANT_BOOL IPivotTable::GetDisplayEmptyRow ( );
__declspec(implementation_key(2386)) void IPivotTable::PutDisplayEmptyRow ( VARIANT_BOOL RHS );
__declspec(implementation_key(2387)) VARIANT_BOOL IPivotTable::GetDisplayEmptyColumn ( );
__declspec(implementation_key(2388)) void IPivotTable::PutDisplayEmptyColumn ( VARIANT_BOOL RHS );
__declspec(implementation_key(2389)) VARIANT_BOOL IPivotTable::GetShowCellBackgroundFromOLAP ( );
__declspec(implementation_key(2390)) void IPivotTable::PutShowCellBackgroundFromOLAP ( VARIANT_BOOL RHS );
__declspec(implementation_key(2391)) _ApplicationPtr IPivotTables::GetApplication ( );
__declspec(implementation_key(2392)) enum XlCreator IPivotTables::GetCreator ( );
__declspec(implementation_key(2393)) IDispatchPtr IPivotTables::GetParent ( );
__declspec(implementation_key(2394)) long IPivotTables::GetCount ( );
__declspec(implementation_key(2395)) PivotTablePtr IPivotTables::Item ( const _variant_t & Index );
__declspec(implementation_key(2396)) IUnknownPtr IPivotTables::_NewEnum ( );
__declspec(implementation_key(2397)) PivotTablePtr IPivotTables::Add ( struct PivotCache * PivotCache, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion );
__declspec(implementation_key(2398)) _ApplicationPtr IPivotField::GetApplication ( );
__declspec(implementation_key(2399)) enum XlCreator IPivotField::GetCreator ( );
__declspec(implementation_key(2400)) IDispatchPtr IPivotField::GetParent ( );
__declspec(implementation_key(2401)) enum XlPivotFieldCalculation IPivotField::GetCalculation ( );
__declspec(implementation_key(2402)) void IPivotField::PutCalculation ( enum XlPivotFieldCalculation RHS );
__declspec(implementation_key(2403)) PivotFieldPtr IPivotField::GetChildField ( );
__declspec(implementation_key(2404)) _variant_t IPivotField::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(2405)) _variant_t IPivotField::GetCurrentPage ( );
__declspec(implementation_key(2406)) void IPivotField::PutCurrentPage ( const _variant_t & RHS );
__declspec(implementation_key(2407)) RangePtr IPivotField::GetDataRange ( );
__declspec(implementation_key(2408)) enum XlPivotFieldDataType IPivotField::GetDataType ( );
__declspec(implementation_key(2409)) _bstr_t IPivotField::Get_Default ( );
__declspec(implementation_key(2410)) void IPivotField::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(2411)) enum XlConsolidationFunction IPivotField::GetFunction ( );
__declspec(implementation_key(2412)) void IPivotField::PutFunction ( enum XlConsolidationFunction RHS );
__declspec(implementation_key(2413)) _variant_t IPivotField::GetGroupLevel ( );
__declspec(implementation_key(2414)) _variant_t IPivotField::GetHiddenItems ( const _variant_t & Index );
__declspec(implementation_key(2415)) RangePtr IPivotField::GetLabelRange ( );
__declspec(implementation_key(2416)) _bstr_t IPivotField::GetName ( );
__declspec(implementation_key(2417)) void IPivotField::PutName ( _bstr_t RHS );
__declspec(implementation_key(2418)) _bstr_t IPivotField::GetNumberFormat ( );
__declspec(implementation_key(2419)) void IPivotField::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(2420)) enum XlPivotFieldOrientation IPivotField::GetOrientation ( );
__declspec(implementation_key(2421)) void IPivotField::PutOrientation ( enum XlPivotFieldOrientation RHS );
__declspec(implementation_key(2422)) VARIANT_BOOL IPivotField::GetShowAllItems ( );
__declspec(implementation_key(2423)) void IPivotField::PutShowAllItems ( VARIANT_BOOL RHS );
__declspec(implementation_key(2424)) PivotFieldPtr IPivotField::GetParentField ( );
__declspec(implementation_key(2425)) _variant_t IPivotField::GetParentItems ( const _variant_t & Index );
__declspec(implementation_key(2426)) _variant_t IPivotField::PivotItems ( const _variant_t & Index );
__declspec(implementation_key(2427)) _variant_t IPivotField::GetPosition ( );
__declspec(implementation_key(2428)) void IPivotField::PutPosition ( const _variant_t & RHS );
__declspec(implementation_key(2429)) _bstr_t IPivotField::GetSourceName ( );
__declspec(implementation_key(2430)) _variant_t IPivotField::GetSubtotals ( const _variant_t & Index );
__declspec(implementation_key(2431)) void IPivotField::PutSubtotals ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(2432)) _variant_t IPivotField::GetBaseField ( );
__declspec(implementation_key(2433)) void IPivotField::PutBaseField ( const _variant_t & RHS );
__declspec(implementation_key(2434)) _variant_t IPivotField::GetBaseItem ( );
__declspec(implementation_key(2435)) void IPivotField::PutBaseItem ( const _variant_t & RHS );
__declspec(implementation_key(2436)) _variant_t IPivotField::GetTotalLevels ( );
__declspec(implementation_key(2437)) _bstr_t IPivotField::GetValue ( );
__declspec(implementation_key(2438)) void IPivotField::PutValue ( _bstr_t RHS );
__declspec(implementation_key(2439)) _variant_t IPivotField::GetVisibleItems ( const _variant_t & Index );
__declspec(implementation_key(2440)) CalculatedItemsPtr IPivotField::CalculatedItems ( );
__declspec(implementation_key(2441)) HRESULT IPivotField::Delete ( );
__declspec(implementation_key(2442)) VARIANT_BOOL IPivotField::GetDragToColumn ( );
__declspec(implementation_key(2443)) void IPivotField::PutDragToColumn ( VARIANT_BOOL RHS );
__declspec(implementation_key(2444)) VARIANT_BOOL IPivotField::GetDragToHide ( );
__declspec(implementation_key(2445)) void IPivotField::PutDragToHide ( VARIANT_BOOL RHS );
__declspec(implementation_key(2446)) VARIANT_BOOL IPivotField::GetDragToPage ( );
__declspec(implementation_key(2447)) void IPivotField::PutDragToPage ( VARIANT_BOOL RHS );
__declspec(implementation_key(2448)) VARIANT_BOOL IPivotField::GetDragToRow ( );
__declspec(implementation_key(2449)) void IPivotField::PutDragToRow ( VARIANT_BOOL RHS );
__declspec(implementation_key(2450)) VARIANT_BOOL IPivotField::GetDragToData ( );
__declspec(implementation_key(2451)) void IPivotField::PutDragToData ( VARIANT_BOOL RHS );
__declspec(implementation_key(2452)) _bstr_t IPivotField::GetFormula ( );
__declspec(implementation_key(2453)) void IPivotField::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(2454)) VARIANT_BOOL IPivotField::GetIsCalculated ( );
__declspec(implementation_key(2455)) long IPivotField::GetMemoryUsed ( );
__declspec(implementation_key(2456)) VARIANT_BOOL IPivotField::GetServerBased ( );
__declspec(implementation_key(2457)) void IPivotField::PutServerBased ( VARIANT_BOOL RHS );
__declspec(implementation_key(2458)) HRESULT IPivotField::AutoSort ( long Order, _bstr_t Field );
__declspec(implementation_key(2459)) HRESULT IPivotField::AutoShow ( long Type, long Range, long Count, _bstr_t Field );
__declspec(implementation_key(2460)) long IPivotField::GetAutoSortOrder ( );
__declspec(implementation_key(2461)) _bstr_t IPivotField::GetAutoSortField ( );
__declspec(implementation_key(2462)) long IPivotField::GetAutoShowType ( );
__declspec(implementation_key(2463)) long IPivotField::GetAutoShowRange ( );
__declspec(implementation_key(2464)) long IPivotField::GetAutoShowCount ( );
__declspec(implementation_key(2465)) _bstr_t IPivotField::GetAutoShowField ( );
__declspec(implementation_key(2466)) VARIANT_BOOL IPivotField::GetLayoutBlankLine ( );
__declspec(implementation_key(2467)) void IPivotField::PutLayoutBlankLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(2468)) enum XlSubtototalLocationType IPivotField::GetLayoutSubtotalLocation ( );
__declspec(implementation_key(2469)) void IPivotField::PutLayoutSubtotalLocation ( enum XlSubtototalLocationType RHS );
__declspec(implementation_key(2470)) VARIANT_BOOL IPivotField::GetLayoutPageBreak ( );
__declspec(implementation_key(2471)) void IPivotField::PutLayoutPageBreak ( VARIANT_BOOL RHS );
__declspec(implementation_key(2472)) enum XlLayoutFormType IPivotField::GetLayoutForm ( );
__declspec(implementation_key(2473)) void IPivotField::PutLayoutForm ( enum XlLayoutFormType RHS );
__declspec(implementation_key(2474)) _bstr_t IPivotField::GetSubtotalName ( );
__declspec(implementation_key(2475)) void IPivotField::PutSubtotalName ( _bstr_t RHS );
__declspec(implementation_key(2476)) _bstr_t IPivotField::GetCaption ( );
__declspec(implementation_key(2477)) void IPivotField::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2478)) VARIANT_BOOL IPivotField::GetDrilledDown ( );
__declspec(implementation_key(2479)) void IPivotField::PutDrilledDown ( VARIANT_BOOL RHS );
__declspec(implementation_key(2480)) CubeFieldPtr IPivotField::GetCubeField ( );
__declspec(implementation_key(2481)) _bstr_t IPivotField::GetCurrentPageName ( );
__declspec(implementation_key(2482)) void IPivotField::PutCurrentPageName ( _bstr_t RHS );
__declspec(implementation_key(2483)) _bstr_t IPivotField::GetStandardFormula ( );
__declspec(implementation_key(2484)) void IPivotField::PutStandardFormula ( _bstr_t RHS );
__declspec(implementation_key(2485)) _variant_t IPivotField::GetHiddenItemsList ( );
__declspec(implementation_key(2486)) void IPivotField::PutHiddenItemsList ( const _variant_t & RHS );
__declspec(implementation_key(2487)) VARIANT_BOOL IPivotField::GetDatabaseSort ( );
__declspec(implementation_key(2488)) void IPivotField::PutDatabaseSort ( VARIANT_BOOL RHS );
__declspec(implementation_key(2489)) VARIANT_BOOL IPivotField::GetIsMemberProperty ( );
__declspec(implementation_key(2490)) PivotFieldPtr IPivotField::GetPropertyParentField ( );
__declspec(implementation_key(2491)) long IPivotField::GetPropertyOrder ( );
__declspec(implementation_key(2492)) void IPivotField::PutPropertyOrder ( long RHS );
__declspec(implementation_key(2493)) VARIANT_BOOL IPivotField::GetEnableItemSelection ( );
__declspec(implementation_key(2494)) void IPivotField::PutEnableItemSelection ( VARIANT_BOOL RHS );
__declspec(implementation_key(2495)) _variant_t IPivotField::GetCurrentPageList ( );
__declspec(implementation_key(2496)) void IPivotField::PutCurrentPageList ( const _variant_t & RHS );
__declspec(implementation_key(2497)) HRESULT IPivotField::AddPageItem ( _bstr_t Item, const _variant_t & ClearList );
__declspec(implementation_key(2498)) _ApplicationPtr IPivotFields::GetApplication ( );
__declspec(implementation_key(2499)) enum XlCreator IPivotFields::GetCreator ( );
__declspec(implementation_key(2500)) PivotTablePtr IPivotFields::GetParent ( );
__declspec(implementation_key(2501)) long IPivotFields::GetCount ( );
__declspec(implementation_key(2502)) IDispatchPtr IPivotFields::Item ( const _variant_t & Index );
__declspec(implementation_key(2503)) IUnknownPtr IPivotFields::_NewEnum ( );
__declspec(implementation_key(2504)) _ApplicationPtr ICalculatedFields::GetApplication ( );
__declspec(implementation_key(2505)) enum XlCreator ICalculatedFields::GetCreator ( );
__declspec(implementation_key(2506)) IDispatchPtr ICalculatedFields::GetParent ( );
__declspec(implementation_key(2507)) long ICalculatedFields::GetCount ( );
__declspec(implementation_key(2508)) PivotFieldPtr ICalculatedFields::_Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(2509)) PivotFieldPtr ICalculatedFields::Item ( const _variant_t & Index );
__declspec(implementation_key(2510)) PivotFieldPtr ICalculatedFields::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(2511)) IUnknownPtr ICalculatedFields::_NewEnum ( );
__declspec(implementation_key(2512)) PivotFieldPtr ICalculatedFields::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(2513)) _ApplicationPtr IPivotItem::GetApplication ( );
__declspec(implementation_key(2514)) enum XlCreator IPivotItem::GetCreator ( );
__declspec(implementation_key(2515)) PivotFieldPtr IPivotItem::GetParent ( );
__declspec(implementation_key(2516)) _variant_t IPivotItem::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(2517)) RangePtr IPivotItem::GetDataRange ( );
__declspec(implementation_key(2518)) _bstr_t IPivotItem::Get_Default ( );
__declspec(implementation_key(2519)) void IPivotItem::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(2520)) RangePtr IPivotItem::GetLabelRange ( );
__declspec(implementation_key(2521)) _bstr_t IPivotItem::GetName ( );
__declspec(implementation_key(2522)) void IPivotItem::PutName ( _bstr_t RHS );
__declspec(implementation_key(2523)) PivotItemPtr IPivotItem::GetParentItem ( );
__declspec(implementation_key(2524)) VARIANT_BOOL IPivotItem::GetParentShowDetail ( );
__declspec(implementation_key(2525)) long IPivotItem::GetPosition ( );
__declspec(implementation_key(2526)) void IPivotItem::PutPosition ( long RHS );
__declspec(implementation_key(2527)) VARIANT_BOOL IPivotItem::GetShowDetail ( );
__declspec(implementation_key(2528)) void IPivotItem::PutShowDetail ( VARIANT_BOOL RHS );
__declspec(implementation_key(2529)) _variant_t IPivotItem::GetSourceName ( );
__declspec(implementation_key(2530)) _bstr_t IPivotItem::GetValue ( );
__declspec(implementation_key(2531)) void IPivotItem::PutValue ( _bstr_t RHS );
__declspec(implementation_key(2532)) VARIANT_BOOL IPivotItem::GetVisible ( );
__declspec(implementation_key(2533)) void IPivotItem::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(2534)) HRESULT IPivotItem::Delete ( );
__declspec(implementation_key(2535)) VARIANT_BOOL IPivotItem::GetIsCalculated ( );
__declspec(implementation_key(2536)) long IPivotItem::GetRecordCount ( );
__declspec(implementation_key(2537)) _bstr_t IPivotItem::GetFormula ( );
__declspec(implementation_key(2538)) void IPivotItem::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(2539)) _bstr_t IPivotItem::GetCaption ( );
__declspec(implementation_key(2540)) void IPivotItem::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2541)) VARIANT_BOOL IPivotItem::GetDrilledDown ( );
__declspec(implementation_key(2542)) void IPivotItem::PutDrilledDown ( VARIANT_BOOL RHS );
__declspec(implementation_key(2543)) _bstr_t IPivotItem::GetStandardFormula ( );
__declspec(implementation_key(2544)) void IPivotItem::PutStandardFormula ( _bstr_t RHS );
__declspec(implementation_key(2545)) _bstr_t IPivotItem::GetSourceNameStandard ( );
__declspec(implementation_key(2546)) _ApplicationPtr IPivotItems::GetApplication ( );
__declspec(implementation_key(2547)) enum XlCreator IPivotItems::GetCreator ( );
__declspec(implementation_key(2548)) PivotFieldPtr IPivotItems::GetParent ( );
__declspec(implementation_key(2549)) HRESULT IPivotItems::Add ( _bstr_t Name );
__declspec(implementation_key(2550)) long IPivotItems::GetCount ( );
__declspec(implementation_key(2551)) IDispatchPtr IPivotItems::Item ( const _variant_t & Index );
__declspec(implementation_key(2552)) IUnknownPtr IPivotItems::_NewEnum ( );
__declspec(implementation_key(2553)) _ApplicationPtr ICalculatedItems::GetApplication ( );
__declspec(implementation_key(2554)) enum XlCreator ICalculatedItems::GetCreator ( );
__declspec(implementation_key(2555)) IDispatchPtr ICalculatedItems::GetParent ( );
__declspec(implementation_key(2556)) long ICalculatedItems::GetCount ( );
__declspec(implementation_key(2557)) PivotItemPtr ICalculatedItems::_Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(2558)) PivotItemPtr ICalculatedItems::Item ( const _variant_t & Index );
__declspec(implementation_key(2559)) PivotItemPtr ICalculatedItems::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(2560)) IUnknownPtr ICalculatedItems::_NewEnum ( );
__declspec(implementation_key(2561)) PivotItemPtr ICalculatedItems::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(2562)) _ApplicationPtr ICharacters::GetApplication ( );
__declspec(implementation_key(2563)) enum XlCreator ICharacters::GetCreator ( );
__declspec(implementation_key(2564)) IDispatchPtr ICharacters::GetParent ( );
__declspec(implementation_key(2565)) _bstr_t ICharacters::GetCaption ( );
__declspec(implementation_key(2566)) void ICharacters::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2567)) long ICharacters::GetCount ( );
__declspec(implementation_key(2568)) _variant_t ICharacters::Delete ( );
__declspec(implementation_key(2569)) FontPtr ICharacters::GetFont ( );
__declspec(implementation_key(2570)) _variant_t ICharacters::Insert ( _bstr_t String );
__declspec(implementation_key(2571)) _bstr_t ICharacters::GetText ( );
__declspec(implementation_key(2572)) void ICharacters::PutText ( _bstr_t RHS );
__declspec(implementation_key(2573)) _bstr_t ICharacters::GetPhoneticCharacters ( );
__declspec(implementation_key(2574)) void ICharacters::PutPhoneticCharacters ( _bstr_t RHS );
__declspec(implementation_key(2575)) _ApplicationPtr IDialogs::GetApplication ( );
__declspec(implementation_key(2576)) enum XlCreator IDialogs::GetCreator ( );
__declspec(implementation_key(2577)) IDispatchPtr IDialogs::GetParent ( );
__declspec(implementation_key(2578)) long IDialogs::GetCount ( );
__declspec(implementation_key(2579)) DialogPtr IDialogs::GetItem ( enum XlBuiltInDialog Index );
__declspec(implementation_key(2580)) DialogPtr IDialogs::Get_Default ( enum XlBuiltInDialog Index );
__declspec(implementation_key(2581)) IUnknownPtr IDialogs::Get_NewEnum ( );
__declspec(implementation_key(2582)) _ApplicationPtr IDialog::GetApplication ( );
__declspec(implementation_key(2583)) enum XlCreator IDialog::GetCreator ( );
__declspec(implementation_key(2584)) IDispatchPtr IDialog::GetParent ( );
__declspec(implementation_key(2585)) VARIANT_BOOL IDialog::Show ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(2586)) _ApplicationPtr ISoundNote::GetApplication ( );
__declspec(implementation_key(2587)) enum XlCreator ISoundNote::GetCreator ( );
__declspec(implementation_key(2588)) IDispatchPtr ISoundNote::GetParent ( );
__declspec(implementation_key(2589)) _variant_t ISoundNote::Delete ( );
__declspec(implementation_key(2590)) _variant_t ISoundNote::Import ( _bstr_t Filename );
__declspec(implementation_key(2591)) _variant_t ISoundNote::Play ( );
__declspec(implementation_key(2592)) _variant_t ISoundNote::Record ( );
__declspec(implementation_key(2593)) _ApplicationPtr IButton::GetApplication ( );
__declspec(implementation_key(2594)) enum XlCreator IButton::GetCreator ( );
__declspec(implementation_key(2595)) IDispatchPtr IButton::GetParent ( );
__declspec(implementation_key(2596)) RangePtr IButton::GetBottomRightCell ( );
__declspec(implementation_key(2597)) _variant_t IButton::BringToFront ( );
__declspec(implementation_key(2598)) _variant_t IButton::Copy ( );
__declspec(implementation_key(2599)) _variant_t IButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2600)) _variant_t IButton::Cut ( );
__declspec(implementation_key(2601)) _variant_t IButton::Delete ( );
__declspec(implementation_key(2602)) IDispatchPtr IButton::Duplicate ( );
__declspec(implementation_key(2603)) VARIANT_BOOL IButton::GetEnabled ( );
__declspec(implementation_key(2604)) void IButton::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(2605)) double IButton::GetHeight ( );
__declspec(implementation_key(2606)) void IButton::PutHeight ( double RHS );
__declspec(implementation_key(2607)) long IButton::GetIndex ( );
__declspec(implementation_key(2608)) double IButton::GetLeft ( );
__declspec(implementation_key(2609)) void IButton::PutLeft ( double RHS );
__declspec(implementation_key(2610)) VARIANT_BOOL IButton::GetLocked ( );
__declspec(implementation_key(2611)) void IButton::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(2612)) _bstr_t IButton::GetName ( );
__declspec(implementation_key(2613)) void IButton::PutName ( _bstr_t RHS );
__declspec(implementation_key(2614)) _bstr_t IButton::GetOnAction ( );
__declspec(implementation_key(2615)) void IButton::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(2616)) _variant_t IButton::GetPlacement ( );
__declspec(implementation_key(2617)) void IButton::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(2618)) VARIANT_BOOL IButton::GetPrintObject ( );
__declspec(implementation_key(2619)) void IButton::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(2620)) _variant_t IButton::Select ( const _variant_t & Replace );
__declspec(implementation_key(2621)) _variant_t IButton::SendToBack ( );
__declspec(implementation_key(2622)) double IButton::GetTop ( );
__declspec(implementation_key(2623)) void IButton::PutTop ( double RHS );
__declspec(implementation_key(2624)) RangePtr IButton::GetTopLeftCell ( );
__declspec(implementation_key(2625)) VARIANT_BOOL IButton::GetVisible ( );
__declspec(implementation_key(2626)) void IButton::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(2627)) double IButton::GetWidth ( );
__declspec(implementation_key(2628)) void IButton::PutWidth ( double RHS );
__declspec(implementation_key(2629)) long IButton::GetZOrder ( );
__declspec(implementation_key(2630)) ShapeRangePtr IButton::GetShapeRange ( );
__declspec(implementation_key(2631)) VARIANT_BOOL IButton::GetAddIndent ( );
__declspec(implementation_key(2632)) void IButton::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(2633)) _variant_t IButton::GetAutoScaleFont ( );
__declspec(implementation_key(2634)) void IButton::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(2635)) VARIANT_BOOL IButton::GetAutoSize ( );
__declspec(implementation_key(2636)) void IButton::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(2637)) _bstr_t IButton::GetCaption ( );
__declspec(implementation_key(2638)) void IButton::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2639)) CharactersPtr IButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2640)) _variant_t IButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2641)) FontPtr IButton::GetFont ( );
__declspec(implementation_key(2642)) _bstr_t IButton::GetFormula ( );
__declspec(implementation_key(2643)) void IButton::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(2644)) _variant_t IButton::GetHorizontalAlignment ( );
__declspec(implementation_key(2645)) void IButton::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(2646)) VARIANT_BOOL IButton::GetLockedText ( );
__declspec(implementation_key(2647)) void IButton::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(2648)) _variant_t IButton::GetOrientation ( );
__declspec(implementation_key(2649)) void IButton::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(2650)) _bstr_t IButton::GetText ( );
__declspec(implementation_key(2651)) void IButton::PutText ( _bstr_t RHS );
__declspec(implementation_key(2652)) _variant_t IButton::GetVerticalAlignment ( );
__declspec(implementation_key(2653)) void IButton::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(2654)) long IButton::GetReadingOrder ( );
__declspec(implementation_key(2655)) void IButton::PutReadingOrder ( long RHS );
__declspec(implementation_key(2656)) _variant_t IButton::GetAccelerator ( );
__declspec(implementation_key(2657)) void IButton::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2658)) VARIANT_BOOL IButton::GetCancelButton ( );
__declspec(implementation_key(2659)) void IButton::PutCancelButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2660)) VARIANT_BOOL IButton::GetDefaultButton ( );
__declspec(implementation_key(2661)) void IButton::PutDefaultButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2662)) VARIANT_BOOL IButton::GetDismissButton ( );
__declspec(implementation_key(2663)) void IButton::PutDismissButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2664)) VARIANT_BOOL IButton::GetHelpButton ( );
__declspec(implementation_key(2665)) void IButton::PutHelpButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2666)) _variant_t IButton::GetPhoneticAccelerator ( );
__declspec(implementation_key(2667)) void IButton::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2668)) _ApplicationPtr IButtons::GetApplication ( );
__declspec(implementation_key(2669)) enum XlCreator IButtons::GetCreator ( );
__declspec(implementation_key(2670)) IDispatchPtr IButtons::GetParent ( );
__declspec(implementation_key(2671)) _variant_t IButtons::BringToFront ( );
__declspec(implementation_key(2672)) _variant_t IButtons::Copy ( );
__declspec(implementation_key(2673)) _variant_t IButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2674)) _variant_t IButtons::Cut ( );
__declspec(implementation_key(2675)) _variant_t IButtons::Delete ( );
__declspec(implementation_key(2676)) IDispatchPtr IButtons::Duplicate ( );
__declspec(implementation_key(2677)) VARIANT_BOOL IButtons::GetEnabled ( );
__declspec(implementation_key(2678)) void IButtons::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(2679)) double IButtons::GetHeight ( );
__declspec(implementation_key(2680)) void IButtons::PutHeight ( double RHS );
__declspec(implementation_key(2681)) double IButtons::GetLeft ( );
__declspec(implementation_key(2682)) void IButtons::PutLeft ( double RHS );
__declspec(implementation_key(2683)) VARIANT_BOOL IButtons::GetLocked ( );
__declspec(implementation_key(2684)) void IButtons::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(2685)) _bstr_t IButtons::GetOnAction ( );
__declspec(implementation_key(2686)) void IButtons::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(2687)) _variant_t IButtons::GetPlacement ( );
__declspec(implementation_key(2688)) void IButtons::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(2689)) VARIANT_BOOL IButtons::GetPrintObject ( );
__declspec(implementation_key(2690)) void IButtons::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(2691)) _variant_t IButtons::Select ( const _variant_t & Replace );
__declspec(implementation_key(2692)) _variant_t IButtons::SendToBack ( );
__declspec(implementation_key(2693)) double IButtons::GetTop ( );
__declspec(implementation_key(2694)) void IButtons::PutTop ( double RHS );
__declspec(implementation_key(2695)) VARIANT_BOOL IButtons::GetVisible ( );
__declspec(implementation_key(2696)) void IButtons::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(2697)) double IButtons::GetWidth ( );
__declspec(implementation_key(2698)) void IButtons::PutWidth ( double RHS );
__declspec(implementation_key(2699)) long IButtons::GetZOrder ( );
__declspec(implementation_key(2700)) ShapeRangePtr IButtons::GetShapeRange ( );
__declspec(implementation_key(2701)) VARIANT_BOOL IButtons::GetAddIndent ( );
__declspec(implementation_key(2702)) void IButtons::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(2703)) _variant_t IButtons::GetAutoScaleFont ( );
__declspec(implementation_key(2704)) void IButtons::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(2705)) VARIANT_BOOL IButtons::GetAutoSize ( );
__declspec(implementation_key(2706)) void IButtons::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(2707)) _bstr_t IButtons::GetCaption ( );
__declspec(implementation_key(2708)) void IButtons::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2709)) CharactersPtr IButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2710)) _variant_t IButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2711)) FontPtr IButtons::GetFont ( );
__declspec(implementation_key(2712)) _bstr_t IButtons::GetFormula ( );
__declspec(implementation_key(2713)) void IButtons::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(2714)) _variant_t IButtons::GetHorizontalAlignment ( );
__declspec(implementation_key(2715)) void IButtons::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(2716)) VARIANT_BOOL IButtons::GetLockedText ( );
__declspec(implementation_key(2717)) void IButtons::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(2718)) _variant_t IButtons::GetOrientation ( );
__declspec(implementation_key(2719)) void IButtons::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(2720)) _bstr_t IButtons::GetText ( );
__declspec(implementation_key(2721)) void IButtons::PutText ( _bstr_t RHS );
__declspec(implementation_key(2722)) _variant_t IButtons::GetVerticalAlignment ( );
__declspec(implementation_key(2723)) void IButtons::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(2724)) long IButtons::GetReadingOrder ( );
__declspec(implementation_key(2725)) void IButtons::PutReadingOrder ( long RHS );
__declspec(implementation_key(2726)) _variant_t IButtons::GetAccelerator ( );
__declspec(implementation_key(2727)) void IButtons::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2728)) VARIANT_BOOL IButtons::GetCancelButton ( );
__declspec(implementation_key(2729)) void IButtons::PutCancelButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2730)) VARIANT_BOOL IButtons::GetDefaultButton ( );
__declspec(implementation_key(2731)) void IButtons::PutDefaultButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2732)) VARIANT_BOOL IButtons::GetDismissButton ( );
__declspec(implementation_key(2733)) void IButtons::PutDismissButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2734)) VARIANT_BOOL IButtons::GetHelpButton ( );
__declspec(implementation_key(2735)) void IButtons::PutHelpButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(2736)) _variant_t IButtons::GetPhoneticAccelerator ( );
__declspec(implementation_key(2737)) void IButtons::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2738)) ButtonPtr IButtons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2739)) long IButtons::GetCount ( );
__declspec(implementation_key(2740)) GroupObjectPtr IButtons::Group ( );
__declspec(implementation_key(2741)) IDispatchPtr IButtons::Item ( const _variant_t & Index );
__declspec(implementation_key(2742)) IUnknownPtr IButtons::_NewEnum ( );
__declspec(implementation_key(2743)) _ApplicationPtr ICheckBox::GetApplication ( );
__declspec(implementation_key(2744)) enum XlCreator ICheckBox::GetCreator ( );
__declspec(implementation_key(2745)) IDispatchPtr ICheckBox::GetParent ( );
__declspec(implementation_key(2746)) RangePtr ICheckBox::GetBottomRightCell ( );
__declspec(implementation_key(2747)) _variant_t ICheckBox::BringToFront ( );
__declspec(implementation_key(2748)) _variant_t ICheckBox::Copy ( );
__declspec(implementation_key(2749)) _variant_t ICheckBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2750)) _variant_t ICheckBox::Cut ( );
__declspec(implementation_key(2751)) _variant_t ICheckBox::Delete ( );
__declspec(implementation_key(2752)) IDispatchPtr ICheckBox::Duplicate ( );
__declspec(implementation_key(2753)) VARIANT_BOOL ICheckBox::GetEnabled ( );
__declspec(implementation_key(2754)) void ICheckBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(2755)) double ICheckBox::GetHeight ( );
__declspec(implementation_key(2756)) void ICheckBox::PutHeight ( double RHS );
__declspec(implementation_key(2757)) long ICheckBox::GetIndex ( );
__declspec(implementation_key(2758)) double ICheckBox::GetLeft ( );
__declspec(implementation_key(2759)) void ICheckBox::PutLeft ( double RHS );
__declspec(implementation_key(2760)) VARIANT_BOOL ICheckBox::GetLocked ( );
__declspec(implementation_key(2761)) void ICheckBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(2762)) _bstr_t ICheckBox::GetName ( );
__declspec(implementation_key(2763)) void ICheckBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(2764)) _bstr_t ICheckBox::GetOnAction ( );
__declspec(implementation_key(2765)) void ICheckBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(2766)) _variant_t ICheckBox::GetPlacement ( );
__declspec(implementation_key(2767)) void ICheckBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(2768)) VARIANT_BOOL ICheckBox::GetPrintObject ( );
__declspec(implementation_key(2769)) void ICheckBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(2770)) _variant_t ICheckBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(2771)) _variant_t ICheckBox::SendToBack ( );
__declspec(implementation_key(2772)) double ICheckBox::GetTop ( );
__declspec(implementation_key(2773)) void ICheckBox::PutTop ( double RHS );
__declspec(implementation_key(2774)) RangePtr ICheckBox::GetTopLeftCell ( );
__declspec(implementation_key(2775)) VARIANT_BOOL ICheckBox::GetVisible ( );
__declspec(implementation_key(2776)) void ICheckBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(2777)) double ICheckBox::GetWidth ( );
__declspec(implementation_key(2778)) void ICheckBox::PutWidth ( double RHS );
__declspec(implementation_key(2779)) long ICheckBox::GetZOrder ( );
__declspec(implementation_key(2780)) ShapeRangePtr ICheckBox::GetShapeRange ( );
__declspec(implementation_key(2781)) _bstr_t ICheckBox::GetCaption ( );
__declspec(implementation_key(2782)) void ICheckBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2783)) CharactersPtr ICheckBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2784)) _variant_t ICheckBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2785)) VARIANT_BOOL ICheckBox::GetLockedText ( );
__declspec(implementation_key(2786)) void ICheckBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(2787)) _bstr_t ICheckBox::GetText ( );
__declspec(implementation_key(2788)) void ICheckBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(2789)) _variant_t ICheckBox::GetAccelerator ( );
__declspec(implementation_key(2790)) void ICheckBox::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2791)) BorderPtr ICheckBox::GetBorder ( );
__declspec(implementation_key(2792)) long ICheckBox::Get_Default ( );
__declspec(implementation_key(2793)) void ICheckBox::Put_Default ( long RHS );
__declspec(implementation_key(2794)) VARIANT_BOOL ICheckBox::GetDisplay3DShading ( );
__declspec(implementation_key(2795)) void ICheckBox::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(2796)) InteriorPtr ICheckBox::GetInterior ( );
__declspec(implementation_key(2797)) _bstr_t ICheckBox::GetLinkedCell ( );
__declspec(implementation_key(2798)) void ICheckBox::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(2799)) _variant_t ICheckBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(2800)) void ICheckBox::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2801)) _variant_t ICheckBox::GetValue ( );
__declspec(implementation_key(2802)) void ICheckBox::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(2803)) _ApplicationPtr ICheckBoxes::GetApplication ( );
__declspec(implementation_key(2804)) enum XlCreator ICheckBoxes::GetCreator ( );
__declspec(implementation_key(2805)) IDispatchPtr ICheckBoxes::GetParent ( );
__declspec(implementation_key(2806)) _variant_t ICheckBoxes::BringToFront ( );
__declspec(implementation_key(2807)) _variant_t ICheckBoxes::Copy ( );
__declspec(implementation_key(2808)) _variant_t ICheckBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2809)) _variant_t ICheckBoxes::Cut ( );
__declspec(implementation_key(2810)) _variant_t ICheckBoxes::Delete ( );
__declspec(implementation_key(2811)) IDispatchPtr ICheckBoxes::Duplicate ( );
__declspec(implementation_key(2812)) VARIANT_BOOL ICheckBoxes::GetEnabled ( );
__declspec(implementation_key(2813)) void ICheckBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(2814)) double ICheckBoxes::GetHeight ( );
__declspec(implementation_key(2815)) void ICheckBoxes::PutHeight ( double RHS );
__declspec(implementation_key(2816)) double ICheckBoxes::GetLeft ( );
__declspec(implementation_key(2817)) void ICheckBoxes::PutLeft ( double RHS );
__declspec(implementation_key(2818)) VARIANT_BOOL ICheckBoxes::GetLocked ( );
__declspec(implementation_key(2819)) void ICheckBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(2820)) _bstr_t ICheckBoxes::GetOnAction ( );
__declspec(implementation_key(2821)) void ICheckBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(2822)) _variant_t ICheckBoxes::GetPlacement ( );
__declspec(implementation_key(2823)) void ICheckBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(2824)) VARIANT_BOOL ICheckBoxes::GetPrintObject ( );
__declspec(implementation_key(2825)) void ICheckBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(2826)) _variant_t ICheckBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(2827)) _variant_t ICheckBoxes::SendToBack ( );
__declspec(implementation_key(2828)) double ICheckBoxes::GetTop ( );
__declspec(implementation_key(2829)) void ICheckBoxes::PutTop ( double RHS );
__declspec(implementation_key(2830)) VARIANT_BOOL ICheckBoxes::GetVisible ( );
__declspec(implementation_key(2831)) void ICheckBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(2832)) double ICheckBoxes::GetWidth ( );
__declspec(implementation_key(2833)) void ICheckBoxes::PutWidth ( double RHS );
__declspec(implementation_key(2834)) long ICheckBoxes::GetZOrder ( );
__declspec(implementation_key(2835)) ShapeRangePtr ICheckBoxes::GetShapeRange ( );
__declspec(implementation_key(2836)) _bstr_t ICheckBoxes::GetCaption ( );
__declspec(implementation_key(2837)) void ICheckBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2838)) CharactersPtr ICheckBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2839)) _variant_t ICheckBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2840)) VARIANT_BOOL ICheckBoxes::GetLockedText ( );
__declspec(implementation_key(2841)) void ICheckBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(2842)) _bstr_t ICheckBoxes::GetText ( );
__declspec(implementation_key(2843)) void ICheckBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(2844)) _variant_t ICheckBoxes::GetAccelerator ( );
__declspec(implementation_key(2845)) void ICheckBoxes::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2846)) BorderPtr ICheckBoxes::GetBorder ( );
__declspec(implementation_key(2847)) long ICheckBoxes::Get_Default ( );
__declspec(implementation_key(2848)) void ICheckBoxes::Put_Default ( long RHS );
__declspec(implementation_key(2849)) VARIANT_BOOL ICheckBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(2850)) void ICheckBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(2851)) InteriorPtr ICheckBoxes::GetInterior ( );
__declspec(implementation_key(2852)) _bstr_t ICheckBoxes::GetLinkedCell ( );
__declspec(implementation_key(2853)) void ICheckBoxes::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(2854)) _variant_t ICheckBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(2855)) void ICheckBoxes::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2856)) _variant_t ICheckBoxes::GetValue ( );
__declspec(implementation_key(2857)) void ICheckBoxes::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(2858)) CheckBoxPtr ICheckBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2859)) long ICheckBoxes::GetCount ( );
__declspec(implementation_key(2860)) GroupObjectPtr ICheckBoxes::Group ( );
__declspec(implementation_key(2861)) IDispatchPtr ICheckBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(2862)) IUnknownPtr ICheckBoxes::_NewEnum ( );
__declspec(implementation_key(2863)) _ApplicationPtr IOptionButton::GetApplication ( );
__declspec(implementation_key(2864)) enum XlCreator IOptionButton::GetCreator ( );
__declspec(implementation_key(2865)) IDispatchPtr IOptionButton::GetParent ( );
__declspec(implementation_key(2866)) RangePtr IOptionButton::GetBottomRightCell ( );
__declspec(implementation_key(2867)) _variant_t IOptionButton::BringToFront ( );
__declspec(implementation_key(2868)) _variant_t IOptionButton::Copy ( );
__declspec(implementation_key(2869)) _variant_t IOptionButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2870)) _variant_t IOptionButton::Cut ( );
__declspec(implementation_key(2871)) _variant_t IOptionButton::Delete ( );
__declspec(implementation_key(2872)) IDispatchPtr IOptionButton::Duplicate ( );
__declspec(implementation_key(2873)) VARIANT_BOOL IOptionButton::GetEnabled ( );
__declspec(implementation_key(2874)) void IOptionButton::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(2875)) double IOptionButton::GetHeight ( );
__declspec(implementation_key(2876)) void IOptionButton::PutHeight ( double RHS );
__declspec(implementation_key(2877)) long IOptionButton::GetIndex ( );
__declspec(implementation_key(2878)) double IOptionButton::GetLeft ( );
__declspec(implementation_key(2879)) void IOptionButton::PutLeft ( double RHS );
__declspec(implementation_key(2880)) VARIANT_BOOL IOptionButton::GetLocked ( );
__declspec(implementation_key(2881)) void IOptionButton::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(2882)) _bstr_t IOptionButton::GetName ( );
__declspec(implementation_key(2883)) void IOptionButton::PutName ( _bstr_t RHS );
__declspec(implementation_key(2884)) _bstr_t IOptionButton::GetOnAction ( );
__declspec(implementation_key(2885)) void IOptionButton::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(2886)) _variant_t IOptionButton::GetPlacement ( );
__declspec(implementation_key(2887)) void IOptionButton::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(2888)) VARIANT_BOOL IOptionButton::GetPrintObject ( );
__declspec(implementation_key(2889)) void IOptionButton::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(2890)) _variant_t IOptionButton::Select ( const _variant_t & Replace );
__declspec(implementation_key(2891)) _variant_t IOptionButton::SendToBack ( );
__declspec(implementation_key(2892)) double IOptionButton::GetTop ( );
__declspec(implementation_key(2893)) void IOptionButton::PutTop ( double RHS );
__declspec(implementation_key(2894)) RangePtr IOptionButton::GetTopLeftCell ( );
__declspec(implementation_key(2895)) VARIANT_BOOL IOptionButton::GetVisible ( );
__declspec(implementation_key(2896)) void IOptionButton::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(2897)) double IOptionButton::GetWidth ( );
__declspec(implementation_key(2898)) void IOptionButton::PutWidth ( double RHS );
__declspec(implementation_key(2899)) long IOptionButton::GetZOrder ( );
__declspec(implementation_key(2900)) ShapeRangePtr IOptionButton::GetShapeRange ( );
__declspec(implementation_key(2901)) _bstr_t IOptionButton::GetCaption ( );
__declspec(implementation_key(2902)) void IOptionButton::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2903)) CharactersPtr IOptionButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2904)) _variant_t IOptionButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2905)) VARIANT_BOOL IOptionButton::GetLockedText ( );
__declspec(implementation_key(2906)) void IOptionButton::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(2907)) _bstr_t IOptionButton::GetText ( );
__declspec(implementation_key(2908)) void IOptionButton::PutText ( _bstr_t RHS );
__declspec(implementation_key(2909)) _variant_t IOptionButton::GetAccelerator ( );
__declspec(implementation_key(2910)) void IOptionButton::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2911)) BorderPtr IOptionButton::GetBorder ( );
__declspec(implementation_key(2912)) long IOptionButton::Get_Default ( );
__declspec(implementation_key(2913)) void IOptionButton::Put_Default ( long RHS );
__declspec(implementation_key(2914)) VARIANT_BOOL IOptionButton::GetDisplay3DShading ( );
__declspec(implementation_key(2915)) void IOptionButton::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(2916)) InteriorPtr IOptionButton::GetInterior ( );
__declspec(implementation_key(2917)) _bstr_t IOptionButton::GetLinkedCell ( );
__declspec(implementation_key(2918)) void IOptionButton::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(2919)) _variant_t IOptionButton::GetPhoneticAccelerator ( );
__declspec(implementation_key(2920)) void IOptionButton::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2921)) _variant_t IOptionButton::GetValue ( );
__declspec(implementation_key(2922)) void IOptionButton::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(2923)) GroupBoxPtr IOptionButton::GetGroupBox ( );
__declspec(implementation_key(2924)) _ApplicationPtr IOptionButtons::GetApplication ( );
__declspec(implementation_key(2925)) enum XlCreator IOptionButtons::GetCreator ( );
__declspec(implementation_key(2926)) IDispatchPtr IOptionButtons::GetParent ( );
__declspec(implementation_key(2927)) _variant_t IOptionButtons::BringToFront ( );
__declspec(implementation_key(2928)) _variant_t IOptionButtons::Copy ( );
__declspec(implementation_key(2929)) _variant_t IOptionButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2930)) _variant_t IOptionButtons::Cut ( );
__declspec(implementation_key(2931)) _variant_t IOptionButtons::Delete ( );
__declspec(implementation_key(2932)) IDispatchPtr IOptionButtons::Duplicate ( );
__declspec(implementation_key(2933)) VARIANT_BOOL IOptionButtons::GetEnabled ( );
__declspec(implementation_key(2934)) void IOptionButtons::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(2935)) double IOptionButtons::GetHeight ( );
__declspec(implementation_key(2936)) void IOptionButtons::PutHeight ( double RHS );
__declspec(implementation_key(2937)) double IOptionButtons::GetLeft ( );
__declspec(implementation_key(2938)) void IOptionButtons::PutLeft ( double RHS );
__declspec(implementation_key(2939)) VARIANT_BOOL IOptionButtons::GetLocked ( );
__declspec(implementation_key(2940)) void IOptionButtons::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(2941)) _bstr_t IOptionButtons::GetOnAction ( );
__declspec(implementation_key(2942)) void IOptionButtons::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(2943)) _variant_t IOptionButtons::GetPlacement ( );
__declspec(implementation_key(2944)) void IOptionButtons::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(2945)) VARIANT_BOOL IOptionButtons::GetPrintObject ( );
__declspec(implementation_key(2946)) void IOptionButtons::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(2947)) _variant_t IOptionButtons::Select ( const _variant_t & Replace );
__declspec(implementation_key(2948)) _variant_t IOptionButtons::SendToBack ( );
__declspec(implementation_key(2949)) double IOptionButtons::GetTop ( );
__declspec(implementation_key(2950)) void IOptionButtons::PutTop ( double RHS );
__declspec(implementation_key(2951)) VARIANT_BOOL IOptionButtons::GetVisible ( );
__declspec(implementation_key(2952)) void IOptionButtons::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(2953)) double IOptionButtons::GetWidth ( );
__declspec(implementation_key(2954)) void IOptionButtons::PutWidth ( double RHS );
__declspec(implementation_key(2955)) long IOptionButtons::GetZOrder ( );
__declspec(implementation_key(2956)) ShapeRangePtr IOptionButtons::GetShapeRange ( );
__declspec(implementation_key(2957)) _bstr_t IOptionButtons::GetCaption ( );
__declspec(implementation_key(2958)) void IOptionButtons::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(2959)) CharactersPtr IOptionButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2960)) _variant_t IOptionButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2961)) VARIANT_BOOL IOptionButtons::GetLockedText ( );
__declspec(implementation_key(2962)) void IOptionButtons::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(2963)) _bstr_t IOptionButtons::GetText ( );
__declspec(implementation_key(2964)) void IOptionButtons::PutText ( _bstr_t RHS );
__declspec(implementation_key(2965)) _variant_t IOptionButtons::GetAccelerator ( );
__declspec(implementation_key(2966)) void IOptionButtons::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2967)) BorderPtr IOptionButtons::GetBorder ( );
__declspec(implementation_key(2968)) long IOptionButtons::Get_Default ( );
__declspec(implementation_key(2969)) void IOptionButtons::Put_Default ( long RHS );
__declspec(implementation_key(2970)) VARIANT_BOOL IOptionButtons::GetDisplay3DShading ( );
__declspec(implementation_key(2971)) void IOptionButtons::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(2972)) InteriorPtr IOptionButtons::GetInterior ( );
__declspec(implementation_key(2973)) _bstr_t IOptionButtons::GetLinkedCell ( );
__declspec(implementation_key(2974)) void IOptionButtons::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(2975)) _variant_t IOptionButtons::GetPhoneticAccelerator ( );
__declspec(implementation_key(2976)) void IOptionButtons::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(2977)) _variant_t IOptionButtons::GetValue ( );
__declspec(implementation_key(2978)) void IOptionButtons::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(2979)) GroupBoxPtr IOptionButtons::GetGroupBox ( );
__declspec(implementation_key(2980)) OptionButtonPtr IOptionButtons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2981)) long IOptionButtons::GetCount ( );
__declspec(implementation_key(2982)) GroupObjectPtr IOptionButtons::Group ( );
__declspec(implementation_key(2983)) IDispatchPtr IOptionButtons::Item ( const _variant_t & Index );
__declspec(implementation_key(2984)) IUnknownPtr IOptionButtons::_NewEnum ( );
__declspec(implementation_key(2985)) _ApplicationPtr IEditBox::GetApplication ( );
__declspec(implementation_key(2986)) enum XlCreator IEditBox::GetCreator ( );
__declspec(implementation_key(2987)) IDispatchPtr IEditBox::GetParent ( );
__declspec(implementation_key(2988)) RangePtr IEditBox::GetBottomRightCell ( );
__declspec(implementation_key(2989)) _variant_t IEditBox::BringToFront ( );
__declspec(implementation_key(2990)) _variant_t IEditBox::Copy ( );
__declspec(implementation_key(2991)) _variant_t IEditBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2992)) _variant_t IEditBox::Cut ( );
__declspec(implementation_key(2993)) _variant_t IEditBox::Delete ( );
__declspec(implementation_key(2994)) IDispatchPtr IEditBox::Duplicate ( );
__declspec(implementation_key(2995)) VARIANT_BOOL IEditBox::GetEnabled ( );
__declspec(implementation_key(2996)) void IEditBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(2997)) double IEditBox::GetHeight ( );
__declspec(implementation_key(2998)) void IEditBox::PutHeight ( double RHS );
__declspec(implementation_key(2999)) long IEditBox::GetIndex ( );
__declspec(implementation_key(3000)) double IEditBox::GetLeft ( );
__declspec(implementation_key(3001)) void IEditBox::PutLeft ( double RHS );
__declspec(implementation_key(3002)) VARIANT_BOOL IEditBox::GetLocked ( );
__declspec(implementation_key(3003)) void IEditBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3004)) _bstr_t IEditBox::GetName ( );
__declspec(implementation_key(3005)) void IEditBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(3006)) _bstr_t IEditBox::GetOnAction ( );
__declspec(implementation_key(3007)) void IEditBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3008)) _variant_t IEditBox::GetPlacement ( );
__declspec(implementation_key(3009)) void IEditBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3010)) VARIANT_BOOL IEditBox::GetPrintObject ( );
__declspec(implementation_key(3011)) void IEditBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3012)) _variant_t IEditBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(3013)) _variant_t IEditBox::SendToBack ( );
__declspec(implementation_key(3014)) double IEditBox::GetTop ( );
__declspec(implementation_key(3015)) void IEditBox::PutTop ( double RHS );
__declspec(implementation_key(3016)) RangePtr IEditBox::GetTopLeftCell ( );
__declspec(implementation_key(3017)) VARIANT_BOOL IEditBox::GetVisible ( );
__declspec(implementation_key(3018)) void IEditBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3019)) double IEditBox::GetWidth ( );
__declspec(implementation_key(3020)) void IEditBox::PutWidth ( double RHS );
__declspec(implementation_key(3021)) long IEditBox::GetZOrder ( );
__declspec(implementation_key(3022)) ShapeRangePtr IEditBox::GetShapeRange ( );
__declspec(implementation_key(3023)) _bstr_t IEditBox::GetCaption ( );
__declspec(implementation_key(3024)) void IEditBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(3025)) CharactersPtr IEditBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3026)) _variant_t IEditBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3027)) VARIANT_BOOL IEditBox::GetLockedText ( );
__declspec(implementation_key(3028)) void IEditBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(3029)) _bstr_t IEditBox::GetText ( );
__declspec(implementation_key(3030)) void IEditBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(3031)) VARIANT_BOOL IEditBox::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(3032)) void IEditBox::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(3033)) long IEditBox::GetInputType ( );
__declspec(implementation_key(3034)) void IEditBox::PutInputType ( long RHS );
__declspec(implementation_key(3035)) _bstr_t IEditBox::GetLinkedObject ( );
__declspec(implementation_key(3036)) VARIANT_BOOL IEditBox::GetMultiLine ( );
__declspec(implementation_key(3037)) void IEditBox::PutMultiLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(3038)) VARIANT_BOOL IEditBox::GetPasswordEdit ( );
__declspec(implementation_key(3039)) void IEditBox::PutPasswordEdit ( VARIANT_BOOL RHS );
__declspec(implementation_key(3040)) _ApplicationPtr IEditBoxes::GetApplication ( );
__declspec(implementation_key(3041)) enum XlCreator IEditBoxes::GetCreator ( );
__declspec(implementation_key(3042)) IDispatchPtr IEditBoxes::GetParent ( );
__declspec(implementation_key(3043)) _variant_t IEditBoxes::BringToFront ( );
__declspec(implementation_key(3044)) _variant_t IEditBoxes::Copy ( );
__declspec(implementation_key(3045)) _variant_t IEditBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3046)) _variant_t IEditBoxes::Cut ( );
__declspec(implementation_key(3047)) _variant_t IEditBoxes::Delete ( );
__declspec(implementation_key(3048)) IDispatchPtr IEditBoxes::Duplicate ( );
__declspec(implementation_key(3049)) VARIANT_BOOL IEditBoxes::GetEnabled ( );
__declspec(implementation_key(3050)) void IEditBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3051)) double IEditBoxes::GetHeight ( );
__declspec(implementation_key(3052)) void IEditBoxes::PutHeight ( double RHS );
__declspec(implementation_key(3053)) double IEditBoxes::GetLeft ( );
__declspec(implementation_key(3054)) void IEditBoxes::PutLeft ( double RHS );
__declspec(implementation_key(3055)) VARIANT_BOOL IEditBoxes::GetLocked ( );
__declspec(implementation_key(3056)) void IEditBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3057)) _bstr_t IEditBoxes::GetOnAction ( );
__declspec(implementation_key(3058)) void IEditBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3059)) _variant_t IEditBoxes::GetPlacement ( );
__declspec(implementation_key(3060)) void IEditBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3061)) VARIANT_BOOL IEditBoxes::GetPrintObject ( );
__declspec(implementation_key(3062)) void IEditBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3063)) _variant_t IEditBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(3064)) _variant_t IEditBoxes::SendToBack ( );
__declspec(implementation_key(3065)) double IEditBoxes::GetTop ( );
__declspec(implementation_key(3066)) void IEditBoxes::PutTop ( double RHS );
__declspec(implementation_key(3067)) VARIANT_BOOL IEditBoxes::GetVisible ( );
__declspec(implementation_key(3068)) void IEditBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3069)) double IEditBoxes::GetWidth ( );
__declspec(implementation_key(3070)) void IEditBoxes::PutWidth ( double RHS );
__declspec(implementation_key(3071)) long IEditBoxes::GetZOrder ( );
__declspec(implementation_key(3072)) ShapeRangePtr IEditBoxes::GetShapeRange ( );
__declspec(implementation_key(3073)) _bstr_t IEditBoxes::GetCaption ( );
__declspec(implementation_key(3074)) void IEditBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(3075)) CharactersPtr IEditBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3076)) _variant_t IEditBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3077)) VARIANT_BOOL IEditBoxes::GetLockedText ( );
__declspec(implementation_key(3078)) void IEditBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(3079)) _bstr_t IEditBoxes::GetText ( );
__declspec(implementation_key(3080)) void IEditBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(3081)) VARIANT_BOOL IEditBoxes::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(3082)) void IEditBoxes::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(3083)) long IEditBoxes::GetInputType ( );
__declspec(implementation_key(3084)) void IEditBoxes::PutInputType ( long RHS );
__declspec(implementation_key(3085)) VARIANT_BOOL IEditBoxes::GetMultiLine ( );
__declspec(implementation_key(3086)) void IEditBoxes::PutMultiLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(3087)) VARIANT_BOOL IEditBoxes::GetPasswordEdit ( );
__declspec(implementation_key(3088)) void IEditBoxes::PutPasswordEdit ( VARIANT_BOOL RHS );
__declspec(implementation_key(3089)) EditBoxPtr IEditBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3090)) long IEditBoxes::GetCount ( );
__declspec(implementation_key(3091)) GroupObjectPtr IEditBoxes::Group ( );
__declspec(implementation_key(3092)) _variant_t IEditBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(3093)) IUnknownPtr IEditBoxes::_NewEnum ( );
__declspec(implementation_key(3094)) _ApplicationPtr IScrollBar::GetApplication ( );
__declspec(implementation_key(3095)) enum XlCreator IScrollBar::GetCreator ( );
__declspec(implementation_key(3096)) IDispatchPtr IScrollBar::GetParent ( );
__declspec(implementation_key(3097)) RangePtr IScrollBar::GetBottomRightCell ( );
__declspec(implementation_key(3098)) _variant_t IScrollBar::BringToFront ( );
__declspec(implementation_key(3099)) _variant_t IScrollBar::Copy ( );
__declspec(implementation_key(3100)) _variant_t IScrollBar::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3101)) _variant_t IScrollBar::Cut ( );
__declspec(implementation_key(3102)) _variant_t IScrollBar::Delete ( );
__declspec(implementation_key(3103)) IDispatchPtr IScrollBar::Duplicate ( );
__declspec(implementation_key(3104)) VARIANT_BOOL IScrollBar::GetEnabled ( );
__declspec(implementation_key(3105)) void IScrollBar::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3106)) double IScrollBar::GetHeight ( );
__declspec(implementation_key(3107)) void IScrollBar::PutHeight ( double RHS );
__declspec(implementation_key(3108)) long IScrollBar::GetIndex ( );
__declspec(implementation_key(3109)) double IScrollBar::GetLeft ( );
__declspec(implementation_key(3110)) void IScrollBar::PutLeft ( double RHS );
__declspec(implementation_key(3111)) VARIANT_BOOL IScrollBar::GetLocked ( );
__declspec(implementation_key(3112)) void IScrollBar::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3113)) _bstr_t IScrollBar::GetName ( );
__declspec(implementation_key(3114)) void IScrollBar::PutName ( _bstr_t RHS );
__declspec(implementation_key(3115)) _bstr_t IScrollBar::GetOnAction ( );
__declspec(implementation_key(3116)) void IScrollBar::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3117)) _variant_t IScrollBar::GetPlacement ( );
__declspec(implementation_key(3118)) void IScrollBar::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3119)) VARIANT_BOOL IScrollBar::GetPrintObject ( );
__declspec(implementation_key(3120)) void IScrollBar::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3121)) _variant_t IScrollBar::Select ( const _variant_t & Replace );
__declspec(implementation_key(3122)) _variant_t IScrollBar::SendToBack ( );
__declspec(implementation_key(3123)) double IScrollBar::GetTop ( );
__declspec(implementation_key(3124)) void IScrollBar::PutTop ( double RHS );
__declspec(implementation_key(3125)) RangePtr IScrollBar::GetTopLeftCell ( );
__declspec(implementation_key(3126)) VARIANT_BOOL IScrollBar::GetVisible ( );
__declspec(implementation_key(3127)) void IScrollBar::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3128)) double IScrollBar::GetWidth ( );
__declspec(implementation_key(3129)) void IScrollBar::PutWidth ( double RHS );
__declspec(implementation_key(3130)) long IScrollBar::GetZOrder ( );
__declspec(implementation_key(3131)) ShapeRangePtr IScrollBar::GetShapeRange ( );
__declspec(implementation_key(3132)) long IScrollBar::Get_Default ( );
__declspec(implementation_key(3133)) void IScrollBar::Put_Default ( long RHS );
__declspec(implementation_key(3134)) VARIANT_BOOL IScrollBar::GetDisplay3DShading ( );
__declspec(implementation_key(3135)) void IScrollBar::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(3136)) _bstr_t IScrollBar::GetLinkedCell ( );
__declspec(implementation_key(3137)) void IScrollBar::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(3138)) long IScrollBar::GetMax ( );
__declspec(implementation_key(3139)) void IScrollBar::PutMax ( long RHS );
__declspec(implementation_key(3140)) long IScrollBar::GetMin ( );
__declspec(implementation_key(3141)) void IScrollBar::PutMin ( long RHS );
__declspec(implementation_key(3142)) long IScrollBar::GetSmallChange ( );
__declspec(implementation_key(3143)) void IScrollBar::PutSmallChange ( long RHS );
__declspec(implementation_key(3144)) long IScrollBar::GetValue ( );
__declspec(implementation_key(3145)) void IScrollBar::PutValue ( long RHS );
__declspec(implementation_key(3146)) long IScrollBar::GetLargeChange ( );
__declspec(implementation_key(3147)) void IScrollBar::PutLargeChange ( long RHS );
__declspec(implementation_key(3148)) _ApplicationPtr IScrollBars::GetApplication ( );
__declspec(implementation_key(3149)) enum XlCreator IScrollBars::GetCreator ( );
__declspec(implementation_key(3150)) IDispatchPtr IScrollBars::GetParent ( );
__declspec(implementation_key(3151)) _variant_t IScrollBars::BringToFront ( );
__declspec(implementation_key(3152)) _variant_t IScrollBars::Copy ( );
__declspec(implementation_key(3153)) _variant_t IScrollBars::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3154)) _variant_t IScrollBars::Cut ( );
__declspec(implementation_key(3155)) _variant_t IScrollBars::Delete ( );
__declspec(implementation_key(3156)) IDispatchPtr IScrollBars::Duplicate ( );
__declspec(implementation_key(3157)) VARIANT_BOOL IScrollBars::GetEnabled ( );
__declspec(implementation_key(3158)) void IScrollBars::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3159)) double IScrollBars::GetHeight ( );
__declspec(implementation_key(3160)) void IScrollBars::PutHeight ( double RHS );
__declspec(implementation_key(3161)) double IScrollBars::GetLeft ( );
__declspec(implementation_key(3162)) void IScrollBars::PutLeft ( double RHS );
__declspec(implementation_key(3163)) VARIANT_BOOL IScrollBars::GetLocked ( );
__declspec(implementation_key(3164)) void IScrollBars::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3165)) _bstr_t IScrollBars::GetOnAction ( );
__declspec(implementation_key(3166)) void IScrollBars::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3167)) _variant_t IScrollBars::GetPlacement ( );
__declspec(implementation_key(3168)) void IScrollBars::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3169)) VARIANT_BOOL IScrollBars::GetPrintObject ( );
__declspec(implementation_key(3170)) void IScrollBars::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3171)) _variant_t IScrollBars::Select ( const _variant_t & Replace );
__declspec(implementation_key(3172)) _variant_t IScrollBars::SendToBack ( );
__declspec(implementation_key(3173)) double IScrollBars::GetTop ( );
__declspec(implementation_key(3174)) void IScrollBars::PutTop ( double RHS );
__declspec(implementation_key(3175)) VARIANT_BOOL IScrollBars::GetVisible ( );
__declspec(implementation_key(3176)) void IScrollBars::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3177)) double IScrollBars::GetWidth ( );
__declspec(implementation_key(3178)) void IScrollBars::PutWidth ( double RHS );
__declspec(implementation_key(3179)) long IScrollBars::GetZOrder ( );
__declspec(implementation_key(3180)) ShapeRangePtr IScrollBars::GetShapeRange ( );
__declspec(implementation_key(3181)) long IScrollBars::Get_Default ( );
__declspec(implementation_key(3182)) void IScrollBars::Put_Default ( long RHS );
__declspec(implementation_key(3183)) VARIANT_BOOL IScrollBars::GetDisplay3DShading ( );
__declspec(implementation_key(3184)) void IScrollBars::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(3185)) _bstr_t IScrollBars::GetLinkedCell ( );
__declspec(implementation_key(3186)) void IScrollBars::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(3187)) long IScrollBars::GetMax ( );
__declspec(implementation_key(3188)) void IScrollBars::PutMax ( long RHS );
__declspec(implementation_key(3189)) long IScrollBars::GetMin ( );
__declspec(implementation_key(3190)) void IScrollBars::PutMin ( long RHS );
__declspec(implementation_key(3191)) long IScrollBars::GetSmallChange ( );
__declspec(implementation_key(3192)) void IScrollBars::PutSmallChange ( long RHS );
__declspec(implementation_key(3193)) long IScrollBars::GetValue ( );
__declspec(implementation_key(3194)) void IScrollBars::PutValue ( long RHS );
__declspec(implementation_key(3195)) long IScrollBars::GetLargeChange ( );
__declspec(implementation_key(3196)) void IScrollBars::PutLargeChange ( long RHS );
__declspec(implementation_key(3197)) ScrollBarPtr IScrollBars::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3198)) long IScrollBars::GetCount ( );
__declspec(implementation_key(3199)) GroupObjectPtr IScrollBars::Group ( );
__declspec(implementation_key(3200)) IDispatchPtr IScrollBars::Item ( const _variant_t & Index );
__declspec(implementation_key(3201)) IUnknownPtr IScrollBars::_NewEnum ( );
__declspec(implementation_key(3202)) _ApplicationPtr IListBox::GetApplication ( );
__declspec(implementation_key(3203)) enum XlCreator IListBox::GetCreator ( );
__declspec(implementation_key(3204)) IDispatchPtr IListBox::GetParent ( );
__declspec(implementation_key(3205)) RangePtr IListBox::GetBottomRightCell ( );
__declspec(implementation_key(3206)) _variant_t IListBox::BringToFront ( );
__declspec(implementation_key(3207)) _variant_t IListBox::Copy ( );
__declspec(implementation_key(3208)) _variant_t IListBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3209)) _variant_t IListBox::Cut ( );
__declspec(implementation_key(3210)) _variant_t IListBox::Delete ( );
__declspec(implementation_key(3211)) IDispatchPtr IListBox::Duplicate ( );
__declspec(implementation_key(3212)) VARIANT_BOOL IListBox::GetEnabled ( );
__declspec(implementation_key(3213)) void IListBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3214)) double IListBox::GetHeight ( );
__declspec(implementation_key(3215)) void IListBox::PutHeight ( double RHS );
__declspec(implementation_key(3216)) long IListBox::GetIndex ( );
__declspec(implementation_key(3217)) double IListBox::GetLeft ( );
__declspec(implementation_key(3218)) void IListBox::PutLeft ( double RHS );
__declspec(implementation_key(3219)) VARIANT_BOOL IListBox::GetLocked ( );
__declspec(implementation_key(3220)) void IListBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3221)) _bstr_t IListBox::GetName ( );
__declspec(implementation_key(3222)) void IListBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(3223)) _bstr_t IListBox::GetOnAction ( );
__declspec(implementation_key(3224)) void IListBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3225)) _variant_t IListBox::GetPlacement ( );
__declspec(implementation_key(3226)) void IListBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3227)) VARIANT_BOOL IListBox::GetPrintObject ( );
__declspec(implementation_key(3228)) void IListBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3229)) _variant_t IListBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(3230)) _variant_t IListBox::SendToBack ( );
__declspec(implementation_key(3231)) double IListBox::GetTop ( );
__declspec(implementation_key(3232)) void IListBox::PutTop ( double RHS );
__declspec(implementation_key(3233)) RangePtr IListBox::GetTopLeftCell ( );
__declspec(implementation_key(3234)) VARIANT_BOOL IListBox::GetVisible ( );
__declspec(implementation_key(3235)) void IListBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3236)) double IListBox::GetWidth ( );
__declspec(implementation_key(3237)) void IListBox::PutWidth ( double RHS );
__declspec(implementation_key(3238)) long IListBox::GetZOrder ( );
__declspec(implementation_key(3239)) ShapeRangePtr IListBox::GetShapeRange ( );
__declspec(implementation_key(3240)) _variant_t IListBox::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(3241)) VARIANT_BOOL IListBox::GetDisplay3DShading ( );
__declspec(implementation_key(3242)) void IListBox::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(3243)) long IListBox::Get_Default ( );
__declspec(implementation_key(3244)) void IListBox::Put_Default ( long RHS );
__declspec(implementation_key(3245)) _bstr_t IListBox::GetLinkedCell ( );
__declspec(implementation_key(3246)) void IListBox::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(3247)) _variant_t IListBox::GetLinkedObject ( );
__declspec(implementation_key(3248)) _variant_t IListBox::GetList ( const _variant_t & Index );
__declspec(implementation_key(3249)) void IListBox::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(3250)) long IListBox::GetListCount ( );
__declspec(implementation_key(3251)) _bstr_t IListBox::GetListFillRange ( );
__declspec(implementation_key(3252)) void IListBox::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(3253)) long IListBox::GetListIndex ( );
__declspec(implementation_key(3254)) void IListBox::PutListIndex ( long RHS );
__declspec(implementation_key(3255)) long IListBox::GetMultiSelect ( );
__declspec(implementation_key(3256)) void IListBox::PutMultiSelect ( long RHS );
__declspec(implementation_key(3257)) _variant_t IListBox::RemoveAllItems ( );
__declspec(implementation_key(3258)) _variant_t IListBox::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(3259)) _variant_t IListBox::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(3260)) void IListBox::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(3261)) long IListBox::GetValue ( );
__declspec(implementation_key(3262)) void IListBox::PutValue ( long RHS );
__declspec(implementation_key(3263)) _ApplicationPtr IListBoxes::GetApplication ( );
__declspec(implementation_key(3264)) enum XlCreator IListBoxes::GetCreator ( );
__declspec(implementation_key(3265)) IDispatchPtr IListBoxes::GetParent ( );
__declspec(implementation_key(3266)) _variant_t IListBoxes::BringToFront ( );
__declspec(implementation_key(3267)) _variant_t IListBoxes::Copy ( );
__declspec(implementation_key(3268)) _variant_t IListBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3269)) _variant_t IListBoxes::Cut ( );
__declspec(implementation_key(3270)) _variant_t IListBoxes::Delete ( );
__declspec(implementation_key(3271)) IDispatchPtr IListBoxes::Duplicate ( );
__declspec(implementation_key(3272)) VARIANT_BOOL IListBoxes::GetEnabled ( );
__declspec(implementation_key(3273)) void IListBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3274)) double IListBoxes::GetHeight ( );
__declspec(implementation_key(3275)) void IListBoxes::PutHeight ( double RHS );
__declspec(implementation_key(3276)) double IListBoxes::GetLeft ( );
__declspec(implementation_key(3277)) void IListBoxes::PutLeft ( double RHS );
__declspec(implementation_key(3278)) VARIANT_BOOL IListBoxes::GetLocked ( );
__declspec(implementation_key(3279)) void IListBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3280)) _bstr_t IListBoxes::GetOnAction ( );
__declspec(implementation_key(3281)) void IListBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3282)) _variant_t IListBoxes::GetPlacement ( );
__declspec(implementation_key(3283)) void IListBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3284)) VARIANT_BOOL IListBoxes::GetPrintObject ( );
__declspec(implementation_key(3285)) void IListBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3286)) _variant_t IListBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(3287)) _variant_t IListBoxes::SendToBack ( );
__declspec(implementation_key(3288)) double IListBoxes::GetTop ( );
__declspec(implementation_key(3289)) void IListBoxes::PutTop ( double RHS );
__declspec(implementation_key(3290)) VARIANT_BOOL IListBoxes::GetVisible ( );
__declspec(implementation_key(3291)) void IListBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3292)) double IListBoxes::GetWidth ( );
__declspec(implementation_key(3293)) void IListBoxes::PutWidth ( double RHS );
__declspec(implementation_key(3294)) long IListBoxes::GetZOrder ( );
__declspec(implementation_key(3295)) ShapeRangePtr IListBoxes::GetShapeRange ( );
__declspec(implementation_key(3296)) _variant_t IListBoxes::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(3297)) VARIANT_BOOL IListBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(3298)) void IListBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(3299)) long IListBoxes::Get_Default ( );
__declspec(implementation_key(3300)) void IListBoxes::Put_Default ( long RHS );
__declspec(implementation_key(3301)) _bstr_t IListBoxes::GetLinkedCell ( );
__declspec(implementation_key(3302)) void IListBoxes::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(3303)) _variant_t IListBoxes::GetList ( const _variant_t & Index );
__declspec(implementation_key(3304)) void IListBoxes::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(3305)) _bstr_t IListBoxes::GetListFillRange ( );
__declspec(implementation_key(3306)) void IListBoxes::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(3307)) long IListBoxes::GetListIndex ( );
__declspec(implementation_key(3308)) void IListBoxes::PutListIndex ( long RHS );
__declspec(implementation_key(3309)) long IListBoxes::GetMultiSelect ( );
__declspec(implementation_key(3310)) void IListBoxes::PutMultiSelect ( long RHS );
__declspec(implementation_key(3311)) _variant_t IListBoxes::RemoveAllItems ( );
__declspec(implementation_key(3312)) _variant_t IListBoxes::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(3313)) _variant_t IListBoxes::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(3314)) void IListBoxes::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(3315)) long IListBoxes::GetValue ( );
__declspec(implementation_key(3316)) void IListBoxes::PutValue ( long RHS );
__declspec(implementation_key(3317)) ListBoxPtr IListBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3318)) long IListBoxes::GetCount ( );
__declspec(implementation_key(3319)) GroupObjectPtr IListBoxes::Group ( );
__declspec(implementation_key(3320)) IDispatchPtr IListBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(3321)) IUnknownPtr IListBoxes::_NewEnum ( );
__declspec(implementation_key(3322)) _ApplicationPtr IGroupBox::GetApplication ( );
__declspec(implementation_key(3323)) enum XlCreator IGroupBox::GetCreator ( );
__declspec(implementation_key(3324)) IDispatchPtr IGroupBox::GetParent ( );
__declspec(implementation_key(3325)) RangePtr IGroupBox::GetBottomRightCell ( );
__declspec(implementation_key(3326)) _variant_t IGroupBox::BringToFront ( );
__declspec(implementation_key(3327)) _variant_t IGroupBox::Copy ( );
__declspec(implementation_key(3328)) _variant_t IGroupBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3329)) _variant_t IGroupBox::Cut ( );
__declspec(implementation_key(3330)) _variant_t IGroupBox::Delete ( );
__declspec(implementation_key(3331)) IDispatchPtr IGroupBox::Duplicate ( );
__declspec(implementation_key(3332)) VARIANT_BOOL IGroupBox::GetEnabled ( );
__declspec(implementation_key(3333)) void IGroupBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3334)) double IGroupBox::GetHeight ( );
__declspec(implementation_key(3335)) void IGroupBox::PutHeight ( double RHS );
__declspec(implementation_key(3336)) long IGroupBox::GetIndex ( );
__declspec(implementation_key(3337)) double IGroupBox::GetLeft ( );
__declspec(implementation_key(3338)) void IGroupBox::PutLeft ( double RHS );
__declspec(implementation_key(3339)) VARIANT_BOOL IGroupBox::GetLocked ( );
__declspec(implementation_key(3340)) void IGroupBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3341)) _bstr_t IGroupBox::GetName ( );
__declspec(implementation_key(3342)) void IGroupBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(3343)) _bstr_t IGroupBox::GetOnAction ( );
__declspec(implementation_key(3344)) void IGroupBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3345)) _variant_t IGroupBox::GetPlacement ( );
__declspec(implementation_key(3346)) void IGroupBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3347)) VARIANT_BOOL IGroupBox::GetPrintObject ( );
__declspec(implementation_key(3348)) void IGroupBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3349)) _variant_t IGroupBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(3350)) _variant_t IGroupBox::SendToBack ( );
__declspec(implementation_key(3351)) double IGroupBox::GetTop ( );
__declspec(implementation_key(3352)) void IGroupBox::PutTop ( double RHS );
__declspec(implementation_key(3353)) RangePtr IGroupBox::GetTopLeftCell ( );
__declspec(implementation_key(3354)) VARIANT_BOOL IGroupBox::GetVisible ( );
__declspec(implementation_key(3355)) void IGroupBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3356)) double IGroupBox::GetWidth ( );
__declspec(implementation_key(3357)) void IGroupBox::PutWidth ( double RHS );
__declspec(implementation_key(3358)) long IGroupBox::GetZOrder ( );
__declspec(implementation_key(3359)) ShapeRangePtr IGroupBox::GetShapeRange ( );
__declspec(implementation_key(3360)) _bstr_t IGroupBox::GetCaption ( );
__declspec(implementation_key(3361)) void IGroupBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(3362)) CharactersPtr IGroupBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3363)) _variant_t IGroupBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3364)) VARIANT_BOOL IGroupBox::GetLockedText ( );
__declspec(implementation_key(3365)) void IGroupBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(3366)) _bstr_t IGroupBox::GetText ( );
__declspec(implementation_key(3367)) void IGroupBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(3368)) _variant_t IGroupBox::GetAccelerator ( );
__declspec(implementation_key(3369)) void IGroupBox::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(3370)) VARIANT_BOOL IGroupBox::GetDisplay3DShading ( );
__declspec(implementation_key(3371)) void IGroupBox::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(3372)) _variant_t IGroupBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(3373)) void IGroupBox::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(3374)) _ApplicationPtr IGroupBoxes::GetApplication ( );
__declspec(implementation_key(3375)) enum XlCreator IGroupBoxes::GetCreator ( );
__declspec(implementation_key(3376)) IDispatchPtr IGroupBoxes::GetParent ( );
__declspec(implementation_key(3377)) _variant_t IGroupBoxes::BringToFront ( );
__declspec(implementation_key(3378)) _variant_t IGroupBoxes::Copy ( );
__declspec(implementation_key(3379)) _variant_t IGroupBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3380)) _variant_t IGroupBoxes::Cut ( );
__declspec(implementation_key(3381)) _variant_t IGroupBoxes::Delete ( );
__declspec(implementation_key(3382)) IDispatchPtr IGroupBoxes::Duplicate ( );
__declspec(implementation_key(3383)) VARIANT_BOOL IGroupBoxes::GetEnabled ( );
__declspec(implementation_key(3384)) void IGroupBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3385)) double IGroupBoxes::GetHeight ( );
__declspec(implementation_key(3386)) void IGroupBoxes::PutHeight ( double RHS );
__declspec(implementation_key(3387)) double IGroupBoxes::GetLeft ( );
__declspec(implementation_key(3388)) void IGroupBoxes::PutLeft ( double RHS );
__declspec(implementation_key(3389)) VARIANT_BOOL IGroupBoxes::GetLocked ( );
__declspec(implementation_key(3390)) void IGroupBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3391)) _bstr_t IGroupBoxes::GetOnAction ( );
__declspec(implementation_key(3392)) void IGroupBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3393)) _variant_t IGroupBoxes::GetPlacement ( );
__declspec(implementation_key(3394)) void IGroupBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3395)) VARIANT_BOOL IGroupBoxes::GetPrintObject ( );
__declspec(implementation_key(3396)) void IGroupBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3397)) _variant_t IGroupBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(3398)) _variant_t IGroupBoxes::SendToBack ( );
__declspec(implementation_key(3399)) double IGroupBoxes::GetTop ( );
__declspec(implementation_key(3400)) void IGroupBoxes::PutTop ( double RHS );
__declspec(implementation_key(3401)) VARIANT_BOOL IGroupBoxes::GetVisible ( );
__declspec(implementation_key(3402)) void IGroupBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3403)) double IGroupBoxes::GetWidth ( );
__declspec(implementation_key(3404)) void IGroupBoxes::PutWidth ( double RHS );
__declspec(implementation_key(3405)) long IGroupBoxes::GetZOrder ( );
__declspec(implementation_key(3406)) ShapeRangePtr IGroupBoxes::GetShapeRange ( );
__declspec(implementation_key(3407)) _bstr_t IGroupBoxes::GetCaption ( );
__declspec(implementation_key(3408)) void IGroupBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(3409)) CharactersPtr IGroupBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3410)) _variant_t IGroupBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3411)) VARIANT_BOOL IGroupBoxes::GetLockedText ( );
__declspec(implementation_key(3412)) void IGroupBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(3413)) _bstr_t IGroupBoxes::GetText ( );
__declspec(implementation_key(3414)) void IGroupBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(3415)) _variant_t IGroupBoxes::GetAccelerator ( );
__declspec(implementation_key(3416)) void IGroupBoxes::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(3417)) VARIANT_BOOL IGroupBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(3418)) void IGroupBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(3419)) _variant_t IGroupBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(3420)) void IGroupBoxes::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(3421)) GroupBoxPtr IGroupBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3422)) long IGroupBoxes::GetCount ( );
__declspec(implementation_key(3423)) GroupObjectPtr IGroupBoxes::Group ( );
__declspec(implementation_key(3424)) IDispatchPtr IGroupBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(3425)) IUnknownPtr IGroupBoxes::_NewEnum ( );
__declspec(implementation_key(3426)) _ApplicationPtr IDropDown::GetApplication ( );
__declspec(implementation_key(3427)) enum XlCreator IDropDown::GetCreator ( );
__declspec(implementation_key(3428)) IDispatchPtr IDropDown::GetParent ( );
__declspec(implementation_key(3429)) RangePtr IDropDown::GetBottomRightCell ( );
__declspec(implementation_key(3430)) _variant_t IDropDown::BringToFront ( );
__declspec(implementation_key(3431)) _variant_t IDropDown::Copy ( );
__declspec(implementation_key(3432)) _variant_t IDropDown::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3433)) _variant_t IDropDown::Cut ( );
__declspec(implementation_key(3434)) _variant_t IDropDown::Delete ( );
__declspec(implementation_key(3435)) IDispatchPtr IDropDown::Duplicate ( );
__declspec(implementation_key(3436)) VARIANT_BOOL IDropDown::GetEnabled ( );
__declspec(implementation_key(3437)) void IDropDown::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3438)) double IDropDown::GetHeight ( );
__declspec(implementation_key(3439)) void IDropDown::PutHeight ( double RHS );
__declspec(implementation_key(3440)) long IDropDown::GetIndex ( );
__declspec(implementation_key(3441)) double IDropDown::GetLeft ( );
__declspec(implementation_key(3442)) void IDropDown::PutLeft ( double RHS );
__declspec(implementation_key(3443)) VARIANT_BOOL IDropDown::GetLocked ( );
__declspec(implementation_key(3444)) void IDropDown::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3445)) _bstr_t IDropDown::GetName ( );
__declspec(implementation_key(3446)) void IDropDown::PutName ( _bstr_t RHS );
__declspec(implementation_key(3447)) _bstr_t IDropDown::GetOnAction ( );
__declspec(implementation_key(3448)) void IDropDown::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3449)) _variant_t IDropDown::GetPlacement ( );
__declspec(implementation_key(3450)) void IDropDown::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3451)) VARIANT_BOOL IDropDown::GetPrintObject ( );
__declspec(implementation_key(3452)) void IDropDown::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3453)) _variant_t IDropDown::Select ( const _variant_t & Replace );
__declspec(implementation_key(3454)) _variant_t IDropDown::SendToBack ( );
__declspec(implementation_key(3455)) double IDropDown::GetTop ( );
__declspec(implementation_key(3456)) void IDropDown::PutTop ( double RHS );
__declspec(implementation_key(3457)) RangePtr IDropDown::GetTopLeftCell ( );
__declspec(implementation_key(3458)) VARIANT_BOOL IDropDown::GetVisible ( );
__declspec(implementation_key(3459)) void IDropDown::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3460)) double IDropDown::GetWidth ( );
__declspec(implementation_key(3461)) void IDropDown::PutWidth ( double RHS );
__declspec(implementation_key(3462)) long IDropDown::GetZOrder ( );
__declspec(implementation_key(3463)) ShapeRangePtr IDropDown::GetShapeRange ( );
__declspec(implementation_key(3464)) _variant_t IDropDown::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(3465)) VARIANT_BOOL IDropDown::GetDisplay3DShading ( );
__declspec(implementation_key(3466)) void IDropDown::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(3467)) long IDropDown::Get_Default ( );
__declspec(implementation_key(3468)) void IDropDown::Put_Default ( long RHS );
__declspec(implementation_key(3469)) _bstr_t IDropDown::GetLinkedCell ( );
__declspec(implementation_key(3470)) void IDropDown::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(3471)) _variant_t IDropDown::GetLinkedObject ( );
__declspec(implementation_key(3472)) _variant_t IDropDown::GetList ( const _variant_t & Index );
__declspec(implementation_key(3473)) void IDropDown::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(3474)) long IDropDown::GetListCount ( );
__declspec(implementation_key(3475)) _bstr_t IDropDown::GetListFillRange ( );
__declspec(implementation_key(3476)) void IDropDown::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(3477)) long IDropDown::GetListIndex ( );
__declspec(implementation_key(3478)) void IDropDown::PutListIndex ( long RHS );
__declspec(implementation_key(3479)) _variant_t IDropDown::RemoveAllItems ( );
__declspec(implementation_key(3480)) _variant_t IDropDown::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(3481)) _variant_t IDropDown::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(3482)) void IDropDown::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(3483)) long IDropDown::GetValue ( );
__declspec(implementation_key(3484)) void IDropDown::PutValue ( long RHS );
__declspec(implementation_key(3485)) _bstr_t IDropDown::GetCaption ( );
__declspec(implementation_key(3486)) void IDropDown::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(3487)) CharactersPtr IDropDown::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3488)) long IDropDown::GetDropDownLines ( );
__declspec(implementation_key(3489)) void IDropDown::PutDropDownLines ( long RHS );
__declspec(implementation_key(3490)) _bstr_t IDropDown::GetText ( );
__declspec(implementation_key(3491)) void IDropDown::PutText ( _bstr_t RHS );
__declspec(implementation_key(3492)) _ApplicationPtr IDropDowns::GetApplication ( );
__declspec(implementation_key(3493)) enum XlCreator IDropDowns::GetCreator ( );
__declspec(implementation_key(3494)) IDispatchPtr IDropDowns::GetParent ( );
__declspec(implementation_key(3495)) _variant_t IDropDowns::BringToFront ( );
__declspec(implementation_key(3496)) _variant_t IDropDowns::Copy ( );
__declspec(implementation_key(3497)) _variant_t IDropDowns::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3498)) _variant_t IDropDowns::Cut ( );
__declspec(implementation_key(3499)) _variant_t IDropDowns::Delete ( );
__declspec(implementation_key(3500)) IDispatchPtr IDropDowns::Duplicate ( );
__declspec(implementation_key(3501)) VARIANT_BOOL IDropDowns::GetEnabled ( );
__declspec(implementation_key(3502)) void IDropDowns::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3503)) double IDropDowns::GetHeight ( );
__declspec(implementation_key(3504)) void IDropDowns::PutHeight ( double RHS );
__declspec(implementation_key(3505)) double IDropDowns::GetLeft ( );
__declspec(implementation_key(3506)) void IDropDowns::PutLeft ( double RHS );
__declspec(implementation_key(3507)) VARIANT_BOOL IDropDowns::GetLocked ( );
__declspec(implementation_key(3508)) void IDropDowns::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3509)) _bstr_t IDropDowns::GetOnAction ( );
__declspec(implementation_key(3510)) void IDropDowns::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3511)) _variant_t IDropDowns::GetPlacement ( );
__declspec(implementation_key(3512)) void IDropDowns::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3513)) VARIANT_BOOL IDropDowns::GetPrintObject ( );
__declspec(implementation_key(3514)) void IDropDowns::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3515)) _variant_t IDropDowns::Select ( const _variant_t & Replace );
__declspec(implementation_key(3516)) _variant_t IDropDowns::SendToBack ( );
__declspec(implementation_key(3517)) double IDropDowns::GetTop ( );
__declspec(implementation_key(3518)) void IDropDowns::PutTop ( double RHS );
__declspec(implementation_key(3519)) VARIANT_BOOL IDropDowns::GetVisible ( );
__declspec(implementation_key(3520)) void IDropDowns::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3521)) double IDropDowns::GetWidth ( );
__declspec(implementation_key(3522)) void IDropDowns::PutWidth ( double RHS );
__declspec(implementation_key(3523)) long IDropDowns::GetZOrder ( );
__declspec(implementation_key(3524)) ShapeRangePtr IDropDowns::GetShapeRange ( );
__declspec(implementation_key(3525)) _variant_t IDropDowns::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(3526)) VARIANT_BOOL IDropDowns::GetDisplay3DShading ( );
__declspec(implementation_key(3527)) void IDropDowns::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(3528)) long IDropDowns::Get_Default ( );
__declspec(implementation_key(3529)) void IDropDowns::Put_Default ( long RHS );
__declspec(implementation_key(3530)) _bstr_t IDropDowns::GetLinkedCell ( );
__declspec(implementation_key(3531)) void IDropDowns::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(3532)) _variant_t IDropDowns::GetList ( const _variant_t & Index );
__declspec(implementation_key(3533)) void IDropDowns::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(3534)) _bstr_t IDropDowns::GetListFillRange ( );
__declspec(implementation_key(3535)) void IDropDowns::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(3536)) long IDropDowns::GetListIndex ( );
__declspec(implementation_key(3537)) void IDropDowns::PutListIndex ( long RHS );
__declspec(implementation_key(3538)) _variant_t IDropDowns::RemoveAllItems ( );
__declspec(implementation_key(3539)) _variant_t IDropDowns::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(3540)) _variant_t IDropDowns::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(3541)) void IDropDowns::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(3542)) long IDropDowns::GetValue ( );
__declspec(implementation_key(3543)) void IDropDowns::PutValue ( long RHS );
__declspec(implementation_key(3544)) _bstr_t IDropDowns::GetCaption ( );
__declspec(implementation_key(3545)) void IDropDowns::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(3546)) CharactersPtr IDropDowns::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3547)) long IDropDowns::GetDropDownLines ( );
__declspec(implementation_key(3548)) void IDropDowns::PutDropDownLines ( long RHS );
__declspec(implementation_key(3549)) _bstr_t IDropDowns::GetText ( );
__declspec(implementation_key(3550)) void IDropDowns::PutText ( _bstr_t RHS );
__declspec(implementation_key(3551)) DropDownPtr IDropDowns::Add ( double Left, double Top, double Width, double Height, const _variant_t & Editable );
__declspec(implementation_key(3552)) long IDropDowns::GetCount ( );
__declspec(implementation_key(3553)) GroupObjectPtr IDropDowns::Group ( );
__declspec(implementation_key(3554)) IDispatchPtr IDropDowns::Item ( const _variant_t & Index );
__declspec(implementation_key(3555)) IUnknownPtr IDropDowns::_NewEnum ( );
__declspec(implementation_key(3556)) _ApplicationPtr ISpinner::GetApplication ( );
__declspec(implementation_key(3557)) enum XlCreator ISpinner::GetCreator ( );
__declspec(implementation_key(3558)) IDispatchPtr ISpinner::GetParent ( );
__declspec(implementation_key(3559)) RangePtr ISpinner::GetBottomRightCell ( );
__declspec(implementation_key(3560)) _variant_t ISpinner::BringToFront ( );
__declspec(implementation_key(3561)) _variant_t ISpinner::Copy ( );
__declspec(implementation_key(3562)) _variant_t ISpinner::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3563)) _variant_t ISpinner::Cut ( );
__declspec(implementation_key(3564)) _variant_t ISpinner::Delete ( );
__declspec(implementation_key(3565)) IDispatchPtr ISpinner::Duplicate ( );
__declspec(implementation_key(3566)) VARIANT_BOOL ISpinner::GetEnabled ( );
__declspec(implementation_key(3567)) void ISpinner::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3568)) double ISpinner::GetHeight ( );
__declspec(implementation_key(3569)) void ISpinner::PutHeight ( double RHS );
__declspec(implementation_key(3570)) long ISpinner::GetIndex ( );
__declspec(implementation_key(3571)) double ISpinner::GetLeft ( );
__declspec(implementation_key(3572)) void ISpinner::PutLeft ( double RHS );
__declspec(implementation_key(3573)) VARIANT_BOOL ISpinner::GetLocked ( );
__declspec(implementation_key(3574)) void ISpinner::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3575)) _bstr_t ISpinner::GetName ( );
__declspec(implementation_key(3576)) void ISpinner::PutName ( _bstr_t RHS );
__declspec(implementation_key(3577)) _bstr_t ISpinner::GetOnAction ( );
__declspec(implementation_key(3578)) void ISpinner::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3579)) _variant_t ISpinner::GetPlacement ( );
__declspec(implementation_key(3580)) void ISpinner::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3581)) VARIANT_BOOL ISpinner::GetPrintObject ( );
__declspec(implementation_key(3582)) void ISpinner::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3583)) _variant_t ISpinner::Select ( const _variant_t & Replace );
__declspec(implementation_key(3584)) _variant_t ISpinner::SendToBack ( );
__declspec(implementation_key(3585)) double ISpinner::GetTop ( );
__declspec(implementation_key(3586)) void ISpinner::PutTop ( double RHS );
__declspec(implementation_key(3587)) RangePtr ISpinner::GetTopLeftCell ( );
__declspec(implementation_key(3588)) VARIANT_BOOL ISpinner::GetVisible ( );
__declspec(implementation_key(3589)) void ISpinner::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3590)) double ISpinner::GetWidth ( );
__declspec(implementation_key(3591)) void ISpinner::PutWidth ( double RHS );
__declspec(implementation_key(3592)) long ISpinner::GetZOrder ( );
__declspec(implementation_key(3593)) ShapeRangePtr ISpinner::GetShapeRange ( );
__declspec(implementation_key(3594)) long ISpinner::Get_Default ( );
__declspec(implementation_key(3595)) void ISpinner::Put_Default ( long RHS );
__declspec(implementation_key(3596)) VARIANT_BOOL ISpinner::GetDisplay3DShading ( );
__declspec(implementation_key(3597)) void ISpinner::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(3598)) _bstr_t ISpinner::GetLinkedCell ( );
__declspec(implementation_key(3599)) void ISpinner::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(3600)) long ISpinner::GetMax ( );
__declspec(implementation_key(3601)) void ISpinner::PutMax ( long RHS );
__declspec(implementation_key(3602)) long ISpinner::GetMin ( );
__declspec(implementation_key(3603)) void ISpinner::PutMin ( long RHS );
__declspec(implementation_key(3604)) long ISpinner::GetSmallChange ( );
__declspec(implementation_key(3605)) void ISpinner::PutSmallChange ( long RHS );
__declspec(implementation_key(3606)) long ISpinner::GetValue ( );
__declspec(implementation_key(3607)) void ISpinner::PutValue ( long RHS );
__declspec(implementation_key(3608)) _ApplicationPtr ISpinners::GetApplication ( );
__declspec(implementation_key(3609)) enum XlCreator ISpinners::GetCreator ( );
__declspec(implementation_key(3610)) IDispatchPtr ISpinners::GetParent ( );
__declspec(implementation_key(3611)) _variant_t ISpinners::BringToFront ( );
__declspec(implementation_key(3612)) _variant_t ISpinners::Copy ( );
__declspec(implementation_key(3613)) _variant_t ISpinners::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3614)) _variant_t ISpinners::Cut ( );
__declspec(implementation_key(3615)) _variant_t ISpinners::Delete ( );
__declspec(implementation_key(3616)) IDispatchPtr ISpinners::Duplicate ( );
__declspec(implementation_key(3617)) VARIANT_BOOL ISpinners::GetEnabled ( );
__declspec(implementation_key(3618)) void ISpinners::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3619)) double ISpinners::GetHeight ( );
__declspec(implementation_key(3620)) void ISpinners::PutHeight ( double RHS );
__declspec(implementation_key(3621)) double ISpinners::GetLeft ( );
__declspec(implementation_key(3622)) void ISpinners::PutLeft ( double RHS );
__declspec(implementation_key(3623)) VARIANT_BOOL ISpinners::GetLocked ( );
__declspec(implementation_key(3624)) void ISpinners::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3625)) _bstr_t ISpinners::GetOnAction ( );
__declspec(implementation_key(3626)) void ISpinners::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3627)) _variant_t ISpinners::GetPlacement ( );
__declspec(implementation_key(3628)) void ISpinners::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3629)) VARIANT_BOOL ISpinners::GetPrintObject ( );
__declspec(implementation_key(3630)) void ISpinners::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3631)) _variant_t ISpinners::Select ( const _variant_t & Replace );
__declspec(implementation_key(3632)) _variant_t ISpinners::SendToBack ( );
__declspec(implementation_key(3633)) double ISpinners::GetTop ( );
__declspec(implementation_key(3634)) void ISpinners::PutTop ( double RHS );
__declspec(implementation_key(3635)) VARIANT_BOOL ISpinners::GetVisible ( );
__declspec(implementation_key(3636)) void ISpinners::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3637)) double ISpinners::GetWidth ( );
__declspec(implementation_key(3638)) void ISpinners::PutWidth ( double RHS );
__declspec(implementation_key(3639)) long ISpinners::GetZOrder ( );
__declspec(implementation_key(3640)) ShapeRangePtr ISpinners::GetShapeRange ( );
__declspec(implementation_key(3641)) long ISpinners::Get_Default ( );
__declspec(implementation_key(3642)) void ISpinners::Put_Default ( long RHS );
__declspec(implementation_key(3643)) VARIANT_BOOL ISpinners::GetDisplay3DShading ( );
__declspec(implementation_key(3644)) void ISpinners::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(3645)) _bstr_t ISpinners::GetLinkedCell ( );
__declspec(implementation_key(3646)) void ISpinners::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(3647)) long ISpinners::GetMax ( );
__declspec(implementation_key(3648)) void ISpinners::PutMax ( long RHS );
__declspec(implementation_key(3649)) long ISpinners::GetMin ( );
__declspec(implementation_key(3650)) void ISpinners::PutMin ( long RHS );
__declspec(implementation_key(3651)) long ISpinners::GetSmallChange ( );
__declspec(implementation_key(3652)) void ISpinners::PutSmallChange ( long RHS );
__declspec(implementation_key(3653)) long ISpinners::GetValue ( );
__declspec(implementation_key(3654)) void ISpinners::PutValue ( long RHS );
__declspec(implementation_key(3655)) SpinnerPtr ISpinners::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3656)) long ISpinners::GetCount ( );
__declspec(implementation_key(3657)) GroupObjectPtr ISpinners::Group ( );
__declspec(implementation_key(3658)) IDispatchPtr ISpinners::Item ( const _variant_t & Index );
__declspec(implementation_key(3659)) IUnknownPtr ISpinners::_NewEnum ( );
__declspec(implementation_key(3660)) _ApplicationPtr IDialogFrame::GetApplication ( );
__declspec(implementation_key(3661)) enum XlCreator IDialogFrame::GetCreator ( );
__declspec(implementation_key(3662)) IDispatchPtr IDialogFrame::GetParent ( );
__declspec(implementation_key(3663)) _variant_t IDialogFrame::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3664)) double IDialogFrame::GetHeight ( );
__declspec(implementation_key(3665)) void IDialogFrame::PutHeight ( double RHS );
__declspec(implementation_key(3666)) double IDialogFrame::GetLeft ( );
__declspec(implementation_key(3667)) void IDialogFrame::PutLeft ( double RHS );
__declspec(implementation_key(3668)) VARIANT_BOOL IDialogFrame::GetLocked ( );
__declspec(implementation_key(3669)) void IDialogFrame::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3670)) _bstr_t IDialogFrame::GetName ( );
__declspec(implementation_key(3671)) void IDialogFrame::PutName ( _bstr_t RHS );
__declspec(implementation_key(3672)) _bstr_t IDialogFrame::GetOnAction ( );
__declspec(implementation_key(3673)) void IDialogFrame::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3674)) _variant_t IDialogFrame::Select ( const _variant_t & Replace );
__declspec(implementation_key(3675)) double IDialogFrame::GetTop ( );
__declspec(implementation_key(3676)) void IDialogFrame::PutTop ( double RHS );
__declspec(implementation_key(3677)) double IDialogFrame::GetWidth ( );
__declspec(implementation_key(3678)) void IDialogFrame::PutWidth ( double RHS );
__declspec(implementation_key(3679)) ShapeRangePtr IDialogFrame::GetShapeRange ( );
__declspec(implementation_key(3680)) _bstr_t IDialogFrame::GetCaption ( );
__declspec(implementation_key(3681)) void IDialogFrame::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(3682)) CharactersPtr IDialogFrame::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3683)) _variant_t IDialogFrame::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3684)) VARIANT_BOOL IDialogFrame::GetLockedText ( );
__declspec(implementation_key(3685)) void IDialogFrame::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(3686)) _bstr_t IDialogFrame::GetText ( );
__declspec(implementation_key(3687)) void IDialogFrame::PutText ( _bstr_t RHS );
__declspec(implementation_key(3688)) _ApplicationPtr ILabel::GetApplication ( );
__declspec(implementation_key(3689)) enum XlCreator ILabel::GetCreator ( );
__declspec(implementation_key(3690)) IDispatchPtr ILabel::GetParent ( );
__declspec(implementation_key(3691)) RangePtr ILabel::GetBottomRightCell ( );
__declspec(implementation_key(3692)) _variant_t ILabel::BringToFront ( );
__declspec(implementation_key(3693)) _variant_t ILabel::Copy ( );
__declspec(implementation_key(3694)) _variant_t ILabel::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3695)) _variant_t ILabel::Cut ( );
__declspec(implementation_key(3696)) _variant_t ILabel::Delete ( );
__declspec(implementation_key(3697)) IDispatchPtr ILabel::Duplicate ( );
__declspec(implementation_key(3698)) VARIANT_BOOL ILabel::GetEnabled ( );
__declspec(implementation_key(3699)) void ILabel::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3700)) double ILabel::GetHeight ( );
__declspec(implementation_key(3701)) void ILabel::PutHeight ( double RHS );
__declspec(implementation_key(3702)) long ILabel::GetIndex ( );
__declspec(implementation_key(3703)) double ILabel::GetLeft ( );
__declspec(implementation_key(3704)) void ILabel::PutLeft ( double RHS );
__declspec(implementation_key(3705)) VARIANT_BOOL ILabel::GetLocked ( );
__declspec(implementation_key(3706)) void ILabel::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3707)) _bstr_t ILabel::GetName ( );
__declspec(implementation_key(3708)) void ILabel::PutName ( _bstr_t RHS );
__declspec(implementation_key(3709)) _bstr_t ILabel::GetOnAction ( );
__declspec(implementation_key(3710)) void ILabel::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3711)) _variant_t ILabel::GetPlacement ( );
__declspec(implementation_key(3712)) void ILabel::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3713)) VARIANT_BOOL ILabel::GetPrintObject ( );
__declspec(implementation_key(3714)) void ILabel::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3715)) _variant_t ILabel::Select ( const _variant_t & Replace );
__declspec(implementation_key(3716)) _variant_t ILabel::SendToBack ( );
__declspec(implementation_key(3717)) double ILabel::GetTop ( );
__declspec(implementation_key(3718)) void ILabel::PutTop ( double RHS );
__declspec(implementation_key(3719)) RangePtr ILabel::GetTopLeftCell ( );
__declspec(implementation_key(3720)) VARIANT_BOOL ILabel::GetVisible ( );
__declspec(implementation_key(3721)) void ILabel::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3722)) double ILabel::GetWidth ( );
__declspec(implementation_key(3723)) void ILabel::PutWidth ( double RHS );
__declspec(implementation_key(3724)) long ILabel::GetZOrder ( );
__declspec(implementation_key(3725)) ShapeRangePtr ILabel::GetShapeRange ( );
__declspec(implementation_key(3726)) _bstr_t ILabel::GetCaption ( );
__declspec(implementation_key(3727)) void ILabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(3728)) CharactersPtr ILabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3729)) _variant_t ILabel::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3730)) VARIANT_BOOL ILabel::GetLockedText ( );
__declspec(implementation_key(3731)) void ILabel::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(3732)) _bstr_t ILabel::GetText ( );
__declspec(implementation_key(3733)) void ILabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(3734)) _variant_t ILabel::GetAccelerator ( );
__declspec(implementation_key(3735)) void ILabel::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(3736)) _variant_t ILabel::GetPhoneticAccelerator ( );
__declspec(implementation_key(3737)) void ILabel::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(3738)) _ApplicationPtr ILabels::GetApplication ( );
__declspec(implementation_key(3739)) enum XlCreator ILabels::GetCreator ( );
__declspec(implementation_key(3740)) IDispatchPtr ILabels::GetParent ( );
__declspec(implementation_key(3741)) _variant_t ILabels::BringToFront ( );
__declspec(implementation_key(3742)) _variant_t ILabels::Copy ( );
__declspec(implementation_key(3743)) _variant_t ILabels::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3744)) _variant_t ILabels::Cut ( );
__declspec(implementation_key(3745)) _variant_t ILabels::Delete ( );
__declspec(implementation_key(3746)) IDispatchPtr ILabels::Duplicate ( );
__declspec(implementation_key(3747)) VARIANT_BOOL ILabels::GetEnabled ( );
__declspec(implementation_key(3748)) void ILabels::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3749)) double ILabels::GetHeight ( );
__declspec(implementation_key(3750)) void ILabels::PutHeight ( double RHS );
__declspec(implementation_key(3751)) double ILabels::GetLeft ( );
__declspec(implementation_key(3752)) void ILabels::PutLeft ( double RHS );
__declspec(implementation_key(3753)) VARIANT_BOOL ILabels::GetLocked ( );
__declspec(implementation_key(3754)) void ILabels::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3755)) _bstr_t ILabels::GetOnAction ( );
__declspec(implementation_key(3756)) void ILabels::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3757)) _variant_t ILabels::GetPlacement ( );
__declspec(implementation_key(3758)) void ILabels::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3759)) VARIANT_BOOL ILabels::GetPrintObject ( );
__declspec(implementation_key(3760)) void ILabels::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3761)) _variant_t ILabels::Select ( const _variant_t & Replace );
__declspec(implementation_key(3762)) _variant_t ILabels::SendToBack ( );
__declspec(implementation_key(3763)) double ILabels::GetTop ( );
__declspec(implementation_key(3764)) void ILabels::PutTop ( double RHS );
__declspec(implementation_key(3765)) VARIANT_BOOL ILabels::GetVisible ( );
__declspec(implementation_key(3766)) void ILabels::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3767)) double ILabels::GetWidth ( );
__declspec(implementation_key(3768)) void ILabels::PutWidth ( double RHS );
__declspec(implementation_key(3769)) long ILabels::GetZOrder ( );
__declspec(implementation_key(3770)) ShapeRangePtr ILabels::GetShapeRange ( );
__declspec(implementation_key(3771)) _bstr_t ILabels::GetCaption ( );
__declspec(implementation_key(3772)) void ILabels::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(3773)) CharactersPtr ILabels::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3774)) _variant_t ILabels::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3775)) VARIANT_BOOL ILabels::GetLockedText ( );
__declspec(implementation_key(3776)) void ILabels::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(3777)) _bstr_t ILabels::GetText ( );
__declspec(implementation_key(3778)) void ILabels::PutText ( _bstr_t RHS );
__declspec(implementation_key(3779)) _variant_t ILabels::GetAccelerator ( );
__declspec(implementation_key(3780)) void ILabels::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(3781)) _variant_t ILabels::GetPhoneticAccelerator ( );
__declspec(implementation_key(3782)) void ILabels::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(3783)) LabelPtr ILabels::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3784)) long ILabels::GetCount ( );
__declspec(implementation_key(3785)) GroupObjectPtr ILabels::Group ( );
__declspec(implementation_key(3786)) IDispatchPtr ILabels::Item ( const _variant_t & Index );
__declspec(implementation_key(3787)) IUnknownPtr ILabels::_NewEnum ( );
__declspec(implementation_key(3788)) _ApplicationPtr IPanes::GetApplication ( );
__declspec(implementation_key(3789)) enum XlCreator IPanes::GetCreator ( );
__declspec(implementation_key(3790)) IDispatchPtr IPanes::GetParent ( );
__declspec(implementation_key(3791)) long IPanes::GetCount ( );
__declspec(implementation_key(3792)) PanePtr IPanes::GetItem ( long Index );
__declspec(implementation_key(3793)) PanePtr IPanes::Get_Default ( long Index );
__declspec(implementation_key(3794)) _ApplicationPtr IPane::GetApplication ( );
__declspec(implementation_key(3795)) enum XlCreator IPane::GetCreator ( );
__declspec(implementation_key(3796)) IDispatchPtr IPane::GetParent ( );
__declspec(implementation_key(3797)) VARIANT_BOOL IPane::Activate ( );
__declspec(implementation_key(3798)) long IPane::GetIndex ( );
__declspec(implementation_key(3799)) _variant_t IPane::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(3800)) long IPane::GetScrollColumn ( );
__declspec(implementation_key(3801)) void IPane::PutScrollColumn ( long RHS );
__declspec(implementation_key(3802)) long IPane::GetScrollRow ( );
__declspec(implementation_key(3803)) void IPane::PutScrollRow ( long RHS );
__declspec(implementation_key(3804)) _variant_t IPane::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(3805)) RangePtr IPane::GetVisibleRange ( );
__declspec(implementation_key(3806)) HRESULT IPane::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(3807)) _ApplicationPtr IScenarios::GetApplication ( );
__declspec(implementation_key(3808)) enum XlCreator IScenarios::GetCreator ( );
__declspec(implementation_key(3809)) IDispatchPtr IScenarios::GetParent ( );
__declspec(implementation_key(3810)) ScenarioPtr IScenarios::Add ( _bstr_t Name, const _variant_t & ChangingCells, const _variant_t & Values, const _variant_t & Comment, const _variant_t & Locked, const _variant_t & Hidden );
__declspec(implementation_key(3811)) long IScenarios::GetCount ( );
__declspec(implementation_key(3812)) _variant_t IScenarios::CreateSummary ( enum XlSummaryReportType ReportType, const _variant_t & ResultCells );
__declspec(implementation_key(3813)) ScenarioPtr IScenarios::Item ( const _variant_t & Index );
__declspec(implementation_key(3814)) _variant_t IScenarios::Merge ( const _variant_t & Source );
__declspec(implementation_key(3815)) IUnknownPtr IScenarios::_NewEnum ( );
__declspec(implementation_key(3816)) _ApplicationPtr IScenario::GetApplication ( );
__declspec(implementation_key(3817)) enum XlCreator IScenario::GetCreator ( );
__declspec(implementation_key(3818)) IDispatchPtr IScenario::GetParent ( );
__declspec(implementation_key(3819)) _variant_t IScenario::ChangeScenario ( const _variant_t & ChangingCells, const _variant_t & Values );
__declspec(implementation_key(3820)) RangePtr IScenario::GetChangingCells ( );
__declspec(implementation_key(3821)) _bstr_t IScenario::GetComment ( );
__declspec(implementation_key(3822)) void IScenario::PutComment ( _bstr_t RHS );
__declspec(implementation_key(3823)) _variant_t IScenario::Delete ( );
__declspec(implementation_key(3824)) VARIANT_BOOL IScenario::GetHidden ( );
__declspec(implementation_key(3825)) void IScenario::PutHidden ( VARIANT_BOOL RHS );
__declspec(implementation_key(3826)) long IScenario::GetIndex ( );
__declspec(implementation_key(3827)) VARIANT_BOOL IScenario::GetLocked ( );
__declspec(implementation_key(3828)) void IScenario::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3829)) _bstr_t IScenario::GetName ( );
__declspec(implementation_key(3830)) void IScenario::PutName ( _bstr_t RHS );
__declspec(implementation_key(3831)) _variant_t IScenario::Show ( );
__declspec(implementation_key(3832)) _variant_t IScenario::GetValues ( const _variant_t & Index );
__declspec(implementation_key(3833)) _ApplicationPtr IGroupObject::GetApplication ( );
__declspec(implementation_key(3834)) enum XlCreator IGroupObject::GetCreator ( );
__declspec(implementation_key(3835)) IDispatchPtr IGroupObject::GetParent ( );
__declspec(implementation_key(3836)) RangePtr IGroupObject::GetBottomRightCell ( );
__declspec(implementation_key(3837)) _variant_t IGroupObject::BringToFront ( );
__declspec(implementation_key(3838)) _variant_t IGroupObject::Copy ( );
__declspec(implementation_key(3839)) _variant_t IGroupObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3840)) _variant_t IGroupObject::Cut ( );
__declspec(implementation_key(3841)) _variant_t IGroupObject::Delete ( );
__declspec(implementation_key(3842)) IDispatchPtr IGroupObject::Duplicate ( );
__declspec(implementation_key(3843)) VARIANT_BOOL IGroupObject::GetEnabled ( );
__declspec(implementation_key(3844)) void IGroupObject::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3845)) double IGroupObject::GetHeight ( );
__declspec(implementation_key(3846)) void IGroupObject::PutHeight ( double RHS );
__declspec(implementation_key(3847)) long IGroupObject::GetIndex ( );
__declspec(implementation_key(3848)) double IGroupObject::GetLeft ( );
__declspec(implementation_key(3849)) void IGroupObject::PutLeft ( double RHS );
__declspec(implementation_key(3850)) VARIANT_BOOL IGroupObject::GetLocked ( );
__declspec(implementation_key(3851)) void IGroupObject::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3852)) _bstr_t IGroupObject::GetName ( );
__declspec(implementation_key(3853)) void IGroupObject::PutName ( _bstr_t RHS );
__declspec(implementation_key(3854)) _bstr_t IGroupObject::GetOnAction ( );
__declspec(implementation_key(3855)) void IGroupObject::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3856)) _variant_t IGroupObject::GetPlacement ( );
__declspec(implementation_key(3857)) void IGroupObject::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3858)) VARIANT_BOOL IGroupObject::GetPrintObject ( );
__declspec(implementation_key(3859)) void IGroupObject::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3860)) _variant_t IGroupObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(3861)) _variant_t IGroupObject::SendToBack ( );
__declspec(implementation_key(3862)) double IGroupObject::GetTop ( );
__declspec(implementation_key(3863)) void IGroupObject::PutTop ( double RHS );
__declspec(implementation_key(3864)) RangePtr IGroupObject::GetTopLeftCell ( );
__declspec(implementation_key(3865)) VARIANT_BOOL IGroupObject::GetVisible ( );
__declspec(implementation_key(3866)) void IGroupObject::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3867)) double IGroupObject::GetWidth ( );
__declspec(implementation_key(3868)) void IGroupObject::PutWidth ( double RHS );
__declspec(implementation_key(3869)) long IGroupObject::GetZOrder ( );
__declspec(implementation_key(3870)) ShapeRangePtr IGroupObject::GetShapeRange ( );
__declspec(implementation_key(3871)) VARIANT_BOOL IGroupObject::GetAddIndent ( );
__declspec(implementation_key(3872)) void IGroupObject::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(3873)) _variant_t IGroupObject::GetArrowHeadLength ( );
__declspec(implementation_key(3874)) void IGroupObject::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(3875)) _variant_t IGroupObject::GetArrowHeadStyle ( );
__declspec(implementation_key(3876)) void IGroupObject::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(3877)) _variant_t IGroupObject::GetArrowHeadWidth ( );
__declspec(implementation_key(3878)) void IGroupObject::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(3879)) VARIANT_BOOL IGroupObject::GetAutoSize ( );
__declspec(implementation_key(3880)) void IGroupObject::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(3881)) BorderPtr IGroupObject::GetBorder ( );
__declspec(implementation_key(3882)) _variant_t IGroupObject::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3883)) long IGroupObject::Get_Default ( );
__declspec(implementation_key(3884)) void IGroupObject::Put_Default ( long RHS );
__declspec(implementation_key(3885)) FontPtr IGroupObject::GetFont ( );
__declspec(implementation_key(3886)) _variant_t IGroupObject::GetHorizontalAlignment ( );
__declspec(implementation_key(3887)) void IGroupObject::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(3888)) InteriorPtr IGroupObject::GetInterior ( );
__declspec(implementation_key(3889)) _variant_t IGroupObject::GetOrientation ( );
__declspec(implementation_key(3890)) void IGroupObject::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(3891)) VARIANT_BOOL IGroupObject::GetRoundedCorners ( );
__declspec(implementation_key(3892)) void IGroupObject::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(3893)) VARIANT_BOOL IGroupObject::GetShadow ( );
__declspec(implementation_key(3894)) void IGroupObject::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(3895)) IDispatchPtr IGroupObject::Ungroup ( );
__declspec(implementation_key(3896)) _variant_t IGroupObject::GetVerticalAlignment ( );
__declspec(implementation_key(3897)) void IGroupObject::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(3898)) long IGroupObject::GetReadingOrder ( );
__declspec(implementation_key(3899)) void IGroupObject::PutReadingOrder ( long RHS );
__declspec(implementation_key(3900)) _ApplicationPtr IGroupObjects::GetApplication ( );
__declspec(implementation_key(3901)) enum XlCreator IGroupObjects::GetCreator ( );
__declspec(implementation_key(3902)) IDispatchPtr IGroupObjects::GetParent ( );
__declspec(implementation_key(3903)) _variant_t IGroupObjects::BringToFront ( );
__declspec(implementation_key(3904)) _variant_t IGroupObjects::Copy ( );
__declspec(implementation_key(3905)) _variant_t IGroupObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3906)) _variant_t IGroupObjects::Cut ( );
__declspec(implementation_key(3907)) _variant_t IGroupObjects::Delete ( );
__declspec(implementation_key(3908)) IDispatchPtr IGroupObjects::Duplicate ( );
__declspec(implementation_key(3909)) VARIANT_BOOL IGroupObjects::GetEnabled ( );
__declspec(implementation_key(3910)) void IGroupObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3911)) double IGroupObjects::GetHeight ( );
__declspec(implementation_key(3912)) void IGroupObjects::PutHeight ( double RHS );
__declspec(implementation_key(3913)) double IGroupObjects::GetLeft ( );
__declspec(implementation_key(3914)) void IGroupObjects::PutLeft ( double RHS );
__declspec(implementation_key(3915)) VARIANT_BOOL IGroupObjects::GetLocked ( );
__declspec(implementation_key(3916)) void IGroupObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3917)) _bstr_t IGroupObjects::GetOnAction ( );
__declspec(implementation_key(3918)) void IGroupObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3919)) _variant_t IGroupObjects::GetPlacement ( );
__declspec(implementation_key(3920)) void IGroupObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3921)) VARIANT_BOOL IGroupObjects::GetPrintObject ( );
__declspec(implementation_key(3922)) void IGroupObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3923)) _variant_t IGroupObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(3924)) _variant_t IGroupObjects::SendToBack ( );
__declspec(implementation_key(3925)) double IGroupObjects::GetTop ( );
__declspec(implementation_key(3926)) void IGroupObjects::PutTop ( double RHS );
__declspec(implementation_key(3927)) VARIANT_BOOL IGroupObjects::GetVisible ( );
__declspec(implementation_key(3928)) void IGroupObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(3929)) double IGroupObjects::GetWidth ( );
__declspec(implementation_key(3930)) void IGroupObjects::PutWidth ( double RHS );
__declspec(implementation_key(3931)) long IGroupObjects::GetZOrder ( );
__declspec(implementation_key(3932)) ShapeRangePtr IGroupObjects::GetShapeRange ( );
__declspec(implementation_key(3933)) VARIANT_BOOL IGroupObjects::GetAddIndent ( );
__declspec(implementation_key(3934)) void IGroupObjects::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(3935)) _variant_t IGroupObjects::GetArrowHeadLength ( );
__declspec(implementation_key(3936)) void IGroupObjects::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(3937)) _variant_t IGroupObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(3938)) void IGroupObjects::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(3939)) _variant_t IGroupObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(3940)) void IGroupObjects::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(3941)) VARIANT_BOOL IGroupObjects::GetAutoSize ( );
__declspec(implementation_key(3942)) void IGroupObjects::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(3943)) BorderPtr IGroupObjects::GetBorder ( );
__declspec(implementation_key(3944)) _variant_t IGroupObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3945)) long IGroupObjects::Get_Default ( );
__declspec(implementation_key(3946)) void IGroupObjects::Put_Default ( long RHS );
__declspec(implementation_key(3947)) FontPtr IGroupObjects::GetFont ( );
__declspec(implementation_key(3948)) _variant_t IGroupObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(3949)) void IGroupObjects::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(3950)) InteriorPtr IGroupObjects::GetInterior ( );
__declspec(implementation_key(3951)) _variant_t IGroupObjects::GetOrientation ( );
__declspec(implementation_key(3952)) void IGroupObjects::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(3953)) VARIANT_BOOL IGroupObjects::GetRoundedCorners ( );
__declspec(implementation_key(3954)) void IGroupObjects::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(3955)) VARIANT_BOOL IGroupObjects::GetShadow ( );
__declspec(implementation_key(3956)) void IGroupObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(3957)) IDispatchPtr IGroupObjects::Ungroup ( );
__declspec(implementation_key(3958)) _variant_t IGroupObjects::GetVerticalAlignment ( );
__declspec(implementation_key(3959)) void IGroupObjects::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(3960)) long IGroupObjects::GetReadingOrder ( );
__declspec(implementation_key(3961)) void IGroupObjects::PutReadingOrder ( long RHS );
__declspec(implementation_key(3962)) long IGroupObjects::GetCount ( );
__declspec(implementation_key(3963)) GroupObjectPtr IGroupObjects::Group ( );
__declspec(implementation_key(3964)) IDispatchPtr IGroupObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(3965)) IUnknownPtr IGroupObjects::_NewEnum ( );
__declspec(implementation_key(3966)) _ApplicationPtr ILine::GetApplication ( );
__declspec(implementation_key(3967)) enum XlCreator ILine::GetCreator ( );
__declspec(implementation_key(3968)) IDispatchPtr ILine::GetParent ( );
__declspec(implementation_key(3969)) RangePtr ILine::GetBottomRightCell ( );
__declspec(implementation_key(3970)) _variant_t ILine::BringToFront ( );
__declspec(implementation_key(3971)) _variant_t ILine::Copy ( );
__declspec(implementation_key(3972)) _variant_t ILine::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3973)) _variant_t ILine::Cut ( );
__declspec(implementation_key(3974)) _variant_t ILine::Delete ( );
__declspec(implementation_key(3975)) IDispatchPtr ILine::Duplicate ( );
__declspec(implementation_key(3976)) VARIANT_BOOL ILine::GetEnabled ( );
__declspec(implementation_key(3977)) void ILine::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(3978)) double ILine::GetHeight ( );
__declspec(implementation_key(3979)) void ILine::PutHeight ( double RHS );
__declspec(implementation_key(3980)) long ILine::GetIndex ( );
__declspec(implementation_key(3981)) double ILine::GetLeft ( );
__declspec(implementation_key(3982)) void ILine::PutLeft ( double RHS );
__declspec(implementation_key(3983)) VARIANT_BOOL ILine::GetLocked ( );
__declspec(implementation_key(3984)) void ILine::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(3985)) _bstr_t ILine::GetName ( );
__declspec(implementation_key(3986)) void ILine::PutName ( _bstr_t RHS );
__declspec(implementation_key(3987)) _bstr_t ILine::GetOnAction ( );
__declspec(implementation_key(3988)) void ILine::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(3989)) _variant_t ILine::GetPlacement ( );
__declspec(implementation_key(3990)) void ILine::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(3991)) VARIANT_BOOL ILine::GetPrintObject ( );
__declspec(implementation_key(3992)) void ILine::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(3993)) _variant_t ILine::Select ( const _variant_t & Replace );
__declspec(implementation_key(3994)) _variant_t ILine::SendToBack ( );
__declspec(implementation_key(3995)) double ILine::GetTop ( );
__declspec(implementation_key(3996)) void ILine::PutTop ( double RHS );
__declspec(implementation_key(3997)) RangePtr ILine::GetTopLeftCell ( );
__declspec(implementation_key(3998)) VARIANT_BOOL ILine::GetVisible ( );
__declspec(implementation_key(3999)) void ILine::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4000)) double ILine::GetWidth ( );
__declspec(implementation_key(4001)) void ILine::PutWidth ( double RHS );
__declspec(implementation_key(4002)) long ILine::GetZOrder ( );
__declspec(implementation_key(4003)) ShapeRangePtr ILine::GetShapeRange ( );
__declspec(implementation_key(4004)) _variant_t ILine::GetArrowHeadLength ( );
__declspec(implementation_key(4005)) void ILine::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(4006)) _variant_t ILine::GetArrowHeadStyle ( );
__declspec(implementation_key(4007)) void ILine::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(4008)) _variant_t ILine::GetArrowHeadWidth ( );
__declspec(implementation_key(4009)) void ILine::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(4010)) BorderPtr ILine::GetBorder ( );
__declspec(implementation_key(4011)) _ApplicationPtr ILines::GetApplication ( );
__declspec(implementation_key(4012)) enum XlCreator ILines::GetCreator ( );
__declspec(implementation_key(4013)) IDispatchPtr ILines::GetParent ( );
__declspec(implementation_key(4014)) _variant_t ILines::BringToFront ( );
__declspec(implementation_key(4015)) _variant_t ILines::Copy ( );
__declspec(implementation_key(4016)) _variant_t ILines::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4017)) _variant_t ILines::Cut ( );
__declspec(implementation_key(4018)) _variant_t ILines::Delete ( );
__declspec(implementation_key(4019)) IDispatchPtr ILines::Duplicate ( );
__declspec(implementation_key(4020)) VARIANT_BOOL ILines::GetEnabled ( );
__declspec(implementation_key(4021)) void ILines::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4022)) double ILines::GetHeight ( );
__declspec(implementation_key(4023)) void ILines::PutHeight ( double RHS );
__declspec(implementation_key(4024)) double ILines::GetLeft ( );
__declspec(implementation_key(4025)) void ILines::PutLeft ( double RHS );
__declspec(implementation_key(4026)) VARIANT_BOOL ILines::GetLocked ( );
__declspec(implementation_key(4027)) void ILines::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4028)) _bstr_t ILines::GetOnAction ( );
__declspec(implementation_key(4029)) void ILines::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4030)) _variant_t ILines::GetPlacement ( );
__declspec(implementation_key(4031)) void ILines::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4032)) VARIANT_BOOL ILines::GetPrintObject ( );
__declspec(implementation_key(4033)) void ILines::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4034)) _variant_t ILines::Select ( const _variant_t & Replace );
__declspec(implementation_key(4035)) _variant_t ILines::SendToBack ( );
__declspec(implementation_key(4036)) double ILines::GetTop ( );
__declspec(implementation_key(4037)) void ILines::PutTop ( double RHS );
__declspec(implementation_key(4038)) VARIANT_BOOL ILines::GetVisible ( );
__declspec(implementation_key(4039)) void ILines::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4040)) double ILines::GetWidth ( );
__declspec(implementation_key(4041)) void ILines::PutWidth ( double RHS );
__declspec(implementation_key(4042)) long ILines::GetZOrder ( );
__declspec(implementation_key(4043)) ShapeRangePtr ILines::GetShapeRange ( );
__declspec(implementation_key(4044)) _variant_t ILines::GetArrowHeadLength ( );
__declspec(implementation_key(4045)) void ILines::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(4046)) _variant_t ILines::GetArrowHeadStyle ( );
__declspec(implementation_key(4047)) void ILines::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(4048)) _variant_t ILines::GetArrowHeadWidth ( );
__declspec(implementation_key(4049)) void ILines::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(4050)) BorderPtr ILines::GetBorder ( );
__declspec(implementation_key(4051)) LinePtr ILines::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(4052)) long ILines::GetCount ( );
__declspec(implementation_key(4053)) GroupObjectPtr ILines::Group ( );
__declspec(implementation_key(4054)) IDispatchPtr ILines::Item ( const _variant_t & Index );
__declspec(implementation_key(4055)) IUnknownPtr ILines::_NewEnum ( );
__declspec(implementation_key(4056)) _ApplicationPtr IRectangle::GetApplication ( );
__declspec(implementation_key(4057)) enum XlCreator IRectangle::GetCreator ( );
__declspec(implementation_key(4058)) IDispatchPtr IRectangle::GetParent ( );
__declspec(implementation_key(4059)) RangePtr IRectangle::GetBottomRightCell ( );
__declspec(implementation_key(4060)) _variant_t IRectangle::BringToFront ( );
__declspec(implementation_key(4061)) _variant_t IRectangle::Copy ( );
__declspec(implementation_key(4062)) _variant_t IRectangle::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4063)) _variant_t IRectangle::Cut ( );
__declspec(implementation_key(4064)) _variant_t IRectangle::Delete ( );
__declspec(implementation_key(4065)) IDispatchPtr IRectangle::Duplicate ( );
__declspec(implementation_key(4066)) VARIANT_BOOL IRectangle::GetEnabled ( );
__declspec(implementation_key(4067)) void IRectangle::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4068)) double IRectangle::GetHeight ( );
__declspec(implementation_key(4069)) void IRectangle::PutHeight ( double RHS );
__declspec(implementation_key(4070)) long IRectangle::GetIndex ( );
__declspec(implementation_key(4071)) double IRectangle::GetLeft ( );
__declspec(implementation_key(4072)) void IRectangle::PutLeft ( double RHS );
__declspec(implementation_key(4073)) VARIANT_BOOL IRectangle::GetLocked ( );
__declspec(implementation_key(4074)) void IRectangle::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4075)) _bstr_t IRectangle::GetName ( );
__declspec(implementation_key(4076)) void IRectangle::PutName ( _bstr_t RHS );
__declspec(implementation_key(4077)) _bstr_t IRectangle::GetOnAction ( );
__declspec(implementation_key(4078)) void IRectangle::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4079)) _variant_t IRectangle::GetPlacement ( );
__declspec(implementation_key(4080)) void IRectangle::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4081)) VARIANT_BOOL IRectangle::GetPrintObject ( );
__declspec(implementation_key(4082)) void IRectangle::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4083)) _variant_t IRectangle::Select ( const _variant_t & Replace );
__declspec(implementation_key(4084)) _variant_t IRectangle::SendToBack ( );
__declspec(implementation_key(4085)) double IRectangle::GetTop ( );
__declspec(implementation_key(4086)) void IRectangle::PutTop ( double RHS );
__declspec(implementation_key(4087)) RangePtr IRectangle::GetTopLeftCell ( );
__declspec(implementation_key(4088)) VARIANT_BOOL IRectangle::GetVisible ( );
__declspec(implementation_key(4089)) void IRectangle::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4090)) double IRectangle::GetWidth ( );
__declspec(implementation_key(4091)) void IRectangle::PutWidth ( double RHS );
__declspec(implementation_key(4092)) long IRectangle::GetZOrder ( );
__declspec(implementation_key(4093)) ShapeRangePtr IRectangle::GetShapeRange ( );
__declspec(implementation_key(4094)) VARIANT_BOOL IRectangle::GetAddIndent ( );
__declspec(implementation_key(4095)) void IRectangle::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(4096)) _variant_t IRectangle::GetAutoScaleFont ( );
__declspec(implementation_key(4097)) void IRectangle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(4098)) VARIANT_BOOL IRectangle::GetAutoSize ( );
__declspec(implementation_key(4099)) void IRectangle::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(4100)) _bstr_t IRectangle::GetCaption ( );
__declspec(implementation_key(4101)) void IRectangle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(4102)) CharactersPtr IRectangle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4103)) _variant_t IRectangle::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4104)) FontPtr IRectangle::GetFont ( );
__declspec(implementation_key(4105)) _bstr_t IRectangle::GetFormula ( );
__declspec(implementation_key(4106)) void IRectangle::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4107)) _variant_t IRectangle::GetHorizontalAlignment ( );
__declspec(implementation_key(4108)) void IRectangle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4109)) VARIANT_BOOL IRectangle::GetLockedText ( );
__declspec(implementation_key(4110)) void IRectangle::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(4111)) _variant_t IRectangle::GetOrientation ( );
__declspec(implementation_key(4112)) void IRectangle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(4113)) _bstr_t IRectangle::GetText ( );
__declspec(implementation_key(4114)) void IRectangle::PutText ( _bstr_t RHS );
__declspec(implementation_key(4115)) _variant_t IRectangle::GetVerticalAlignment ( );
__declspec(implementation_key(4116)) void IRectangle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4117)) long IRectangle::GetReadingOrder ( );
__declspec(implementation_key(4118)) void IRectangle::PutReadingOrder ( long RHS );
__declspec(implementation_key(4119)) BorderPtr IRectangle::GetBorder ( );
__declspec(implementation_key(4120)) InteriorPtr IRectangle::GetInterior ( );
__declspec(implementation_key(4121)) VARIANT_BOOL IRectangle::GetShadow ( );
__declspec(implementation_key(4122)) void IRectangle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4123)) VARIANT_BOOL IRectangle::GetRoundedCorners ( );
__declspec(implementation_key(4124)) void IRectangle::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(4125)) _ApplicationPtr IRectangles::GetApplication ( );
__declspec(implementation_key(4126)) enum XlCreator IRectangles::GetCreator ( );
__declspec(implementation_key(4127)) IDispatchPtr IRectangles::GetParent ( );
__declspec(implementation_key(4128)) _variant_t IRectangles::BringToFront ( );
__declspec(implementation_key(4129)) _variant_t IRectangles::Copy ( );
__declspec(implementation_key(4130)) _variant_t IRectangles::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4131)) _variant_t IRectangles::Cut ( );
__declspec(implementation_key(4132)) _variant_t IRectangles::Delete ( );
__declspec(implementation_key(4133)) IDispatchPtr IRectangles::Duplicate ( );
__declspec(implementation_key(4134)) VARIANT_BOOL IRectangles::GetEnabled ( );
__declspec(implementation_key(4135)) void IRectangles::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4136)) double IRectangles::GetHeight ( );
__declspec(implementation_key(4137)) void IRectangles::PutHeight ( double RHS );
__declspec(implementation_key(4138)) double IRectangles::GetLeft ( );
__declspec(implementation_key(4139)) void IRectangles::PutLeft ( double RHS );
__declspec(implementation_key(4140)) VARIANT_BOOL IRectangles::GetLocked ( );
__declspec(implementation_key(4141)) void IRectangles::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4142)) _bstr_t IRectangles::GetOnAction ( );
__declspec(implementation_key(4143)) void IRectangles::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4144)) _variant_t IRectangles::GetPlacement ( );
__declspec(implementation_key(4145)) void IRectangles::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4146)) VARIANT_BOOL IRectangles::GetPrintObject ( );
__declspec(implementation_key(4147)) void IRectangles::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4148)) _variant_t IRectangles::Select ( const _variant_t & Replace );
__declspec(implementation_key(4149)) _variant_t IRectangles::SendToBack ( );
__declspec(implementation_key(4150)) double IRectangles::GetTop ( );
__declspec(implementation_key(4151)) void IRectangles::PutTop ( double RHS );
__declspec(implementation_key(4152)) VARIANT_BOOL IRectangles::GetVisible ( );
__declspec(implementation_key(4153)) void IRectangles::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4154)) double IRectangles::GetWidth ( );
__declspec(implementation_key(4155)) void IRectangles::PutWidth ( double RHS );
__declspec(implementation_key(4156)) long IRectangles::GetZOrder ( );
__declspec(implementation_key(4157)) ShapeRangePtr IRectangles::GetShapeRange ( );
__declspec(implementation_key(4158)) VARIANT_BOOL IRectangles::GetAddIndent ( );
__declspec(implementation_key(4159)) void IRectangles::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(4160)) _variant_t IRectangles::GetAutoScaleFont ( );
__declspec(implementation_key(4161)) void IRectangles::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(4162)) VARIANT_BOOL IRectangles::GetAutoSize ( );
__declspec(implementation_key(4163)) void IRectangles::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(4164)) _bstr_t IRectangles::GetCaption ( );
__declspec(implementation_key(4165)) void IRectangles::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(4166)) CharactersPtr IRectangles::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4167)) _variant_t IRectangles::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4168)) FontPtr IRectangles::GetFont ( );
__declspec(implementation_key(4169)) _bstr_t IRectangles::GetFormula ( );
__declspec(implementation_key(4170)) void IRectangles::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4171)) _variant_t IRectangles::GetHorizontalAlignment ( );
__declspec(implementation_key(4172)) void IRectangles::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4173)) VARIANT_BOOL IRectangles::GetLockedText ( );
__declspec(implementation_key(4174)) void IRectangles::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(4175)) _variant_t IRectangles::GetOrientation ( );
__declspec(implementation_key(4176)) void IRectangles::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(4177)) _bstr_t IRectangles::GetText ( );
__declspec(implementation_key(4178)) void IRectangles::PutText ( _bstr_t RHS );
__declspec(implementation_key(4179)) _variant_t IRectangles::GetVerticalAlignment ( );
__declspec(implementation_key(4180)) void IRectangles::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4181)) long IRectangles::GetReadingOrder ( );
__declspec(implementation_key(4182)) void IRectangles::PutReadingOrder ( long RHS );
__declspec(implementation_key(4183)) BorderPtr IRectangles::GetBorder ( );
__declspec(implementation_key(4184)) InteriorPtr IRectangles::GetInterior ( );
__declspec(implementation_key(4185)) VARIANT_BOOL IRectangles::GetShadow ( );
__declspec(implementation_key(4186)) void IRectangles::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4187)) VARIANT_BOOL IRectangles::GetRoundedCorners ( );
__declspec(implementation_key(4188)) void IRectangles::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(4189)) RectanglePtr IRectangles::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(4190)) long IRectangles::GetCount ( );
__declspec(implementation_key(4191)) GroupObjectPtr IRectangles::Group ( );
__declspec(implementation_key(4192)) IDispatchPtr IRectangles::Item ( const _variant_t & Index );
__declspec(implementation_key(4193)) IUnknownPtr IRectangles::_NewEnum ( );
__declspec(implementation_key(4194)) _ApplicationPtr IOval::GetApplication ( );
__declspec(implementation_key(4195)) enum XlCreator IOval::GetCreator ( );
__declspec(implementation_key(4196)) IDispatchPtr IOval::GetParent ( );
__declspec(implementation_key(4197)) RangePtr IOval::GetBottomRightCell ( );
__declspec(implementation_key(4198)) _variant_t IOval::BringToFront ( );
__declspec(implementation_key(4199)) _variant_t IOval::Copy ( );
__declspec(implementation_key(4200)) _variant_t IOval::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4201)) _variant_t IOval::Cut ( );
__declspec(implementation_key(4202)) _variant_t IOval::Delete ( );
__declspec(implementation_key(4203)) IDispatchPtr IOval::Duplicate ( );
__declspec(implementation_key(4204)) VARIANT_BOOL IOval::GetEnabled ( );
__declspec(implementation_key(4205)) void IOval::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4206)) double IOval::GetHeight ( );
__declspec(implementation_key(4207)) void IOval::PutHeight ( double RHS );
__declspec(implementation_key(4208)) long IOval::GetIndex ( );
__declspec(implementation_key(4209)) double IOval::GetLeft ( );
__declspec(implementation_key(4210)) void IOval::PutLeft ( double RHS );
__declspec(implementation_key(4211)) VARIANT_BOOL IOval::GetLocked ( );
__declspec(implementation_key(4212)) void IOval::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4213)) _bstr_t IOval::GetName ( );
__declspec(implementation_key(4214)) void IOval::PutName ( _bstr_t RHS );
__declspec(implementation_key(4215)) _bstr_t IOval::GetOnAction ( );
__declspec(implementation_key(4216)) void IOval::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4217)) _variant_t IOval::GetPlacement ( );
__declspec(implementation_key(4218)) void IOval::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4219)) VARIANT_BOOL IOval::GetPrintObject ( );
__declspec(implementation_key(4220)) void IOval::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4221)) _variant_t IOval::Select ( const _variant_t & Replace );
__declspec(implementation_key(4222)) _variant_t IOval::SendToBack ( );
__declspec(implementation_key(4223)) double IOval::GetTop ( );
__declspec(implementation_key(4224)) void IOval::PutTop ( double RHS );
__declspec(implementation_key(4225)) RangePtr IOval::GetTopLeftCell ( );
__declspec(implementation_key(4226)) VARIANT_BOOL IOval::GetVisible ( );
__declspec(implementation_key(4227)) void IOval::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4228)) double IOval::GetWidth ( );
__declspec(implementation_key(4229)) void IOval::PutWidth ( double RHS );
__declspec(implementation_key(4230)) long IOval::GetZOrder ( );
__declspec(implementation_key(4231)) ShapeRangePtr IOval::GetShapeRange ( );
__declspec(implementation_key(4232)) VARIANT_BOOL IOval::GetAddIndent ( );
__declspec(implementation_key(4233)) void IOval::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(4234)) _variant_t IOval::GetAutoScaleFont ( );
__declspec(implementation_key(4235)) void IOval::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(4236)) VARIANT_BOOL IOval::GetAutoSize ( );
__declspec(implementation_key(4237)) void IOval::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(4238)) _bstr_t IOval::GetCaption ( );
__declspec(implementation_key(4239)) void IOval::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(4240)) CharactersPtr IOval::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4241)) _variant_t IOval::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4242)) FontPtr IOval::GetFont ( );
__declspec(implementation_key(4243)) _bstr_t IOval::GetFormula ( );
__declspec(implementation_key(4244)) void IOval::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4245)) _variant_t IOval::GetHorizontalAlignment ( );
__declspec(implementation_key(4246)) void IOval::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4247)) VARIANT_BOOL IOval::GetLockedText ( );
__declspec(implementation_key(4248)) void IOval::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(4249)) _variant_t IOval::GetOrientation ( );
__declspec(implementation_key(4250)) void IOval::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(4251)) _bstr_t IOval::GetText ( );
__declspec(implementation_key(4252)) void IOval::PutText ( _bstr_t RHS );
__declspec(implementation_key(4253)) _variant_t IOval::GetVerticalAlignment ( );
__declspec(implementation_key(4254)) void IOval::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4255)) long IOval::GetReadingOrder ( );
__declspec(implementation_key(4256)) void IOval::PutReadingOrder ( long RHS );
__declspec(implementation_key(4257)) BorderPtr IOval::GetBorder ( );
__declspec(implementation_key(4258)) InteriorPtr IOval::GetInterior ( );
__declspec(implementation_key(4259)) VARIANT_BOOL IOval::GetShadow ( );
__declspec(implementation_key(4260)) void IOval::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4261)) _ApplicationPtr IOvals::GetApplication ( );
__declspec(implementation_key(4262)) enum XlCreator IOvals::GetCreator ( );
__declspec(implementation_key(4263)) IDispatchPtr IOvals::GetParent ( );
__declspec(implementation_key(4264)) _variant_t IOvals::BringToFront ( );
__declspec(implementation_key(4265)) _variant_t IOvals::Copy ( );
__declspec(implementation_key(4266)) _variant_t IOvals::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4267)) _variant_t IOvals::Cut ( );
__declspec(implementation_key(4268)) _variant_t IOvals::Delete ( );
__declspec(implementation_key(4269)) IDispatchPtr IOvals::Duplicate ( );
__declspec(implementation_key(4270)) VARIANT_BOOL IOvals::GetEnabled ( );
__declspec(implementation_key(4271)) void IOvals::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4272)) double IOvals::GetHeight ( );
__declspec(implementation_key(4273)) void IOvals::PutHeight ( double RHS );
__declspec(implementation_key(4274)) double IOvals::GetLeft ( );
__declspec(implementation_key(4275)) void IOvals::PutLeft ( double RHS );
__declspec(implementation_key(4276)) VARIANT_BOOL IOvals::GetLocked ( );
__declspec(implementation_key(4277)) void IOvals::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4278)) _bstr_t IOvals::GetOnAction ( );
__declspec(implementation_key(4279)) void IOvals::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4280)) _variant_t IOvals::GetPlacement ( );
__declspec(implementation_key(4281)) void IOvals::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4282)) VARIANT_BOOL IOvals::GetPrintObject ( );
__declspec(implementation_key(4283)) void IOvals::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4284)) _variant_t IOvals::Select ( const _variant_t & Replace );
__declspec(implementation_key(4285)) _variant_t IOvals::SendToBack ( );
__declspec(implementation_key(4286)) double IOvals::GetTop ( );
__declspec(implementation_key(4287)) void IOvals::PutTop ( double RHS );
__declspec(implementation_key(4288)) VARIANT_BOOL IOvals::GetVisible ( );
__declspec(implementation_key(4289)) void IOvals::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4290)) double IOvals::GetWidth ( );
__declspec(implementation_key(4291)) void IOvals::PutWidth ( double RHS );
__declspec(implementation_key(4292)) long IOvals::GetZOrder ( );
__declspec(implementation_key(4293)) ShapeRangePtr IOvals::GetShapeRange ( );
__declspec(implementation_key(4294)) VARIANT_BOOL IOvals::GetAddIndent ( );
__declspec(implementation_key(4295)) void IOvals::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(4296)) _variant_t IOvals::GetAutoScaleFont ( );
__declspec(implementation_key(4297)) void IOvals::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(4298)) VARIANT_BOOL IOvals::GetAutoSize ( );
__declspec(implementation_key(4299)) void IOvals::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(4300)) _bstr_t IOvals::GetCaption ( );
__declspec(implementation_key(4301)) void IOvals::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(4302)) CharactersPtr IOvals::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4303)) _variant_t IOvals::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4304)) FontPtr IOvals::GetFont ( );
__declspec(implementation_key(4305)) _bstr_t IOvals::GetFormula ( );
__declspec(implementation_key(4306)) void IOvals::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4307)) _variant_t IOvals::GetHorizontalAlignment ( );
__declspec(implementation_key(4308)) void IOvals::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4309)) VARIANT_BOOL IOvals::GetLockedText ( );
__declspec(implementation_key(4310)) void IOvals::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(4311)) _variant_t IOvals::GetOrientation ( );
__declspec(implementation_key(4312)) void IOvals::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(4313)) _bstr_t IOvals::GetText ( );
__declspec(implementation_key(4314)) void IOvals::PutText ( _bstr_t RHS );
__declspec(implementation_key(4315)) _variant_t IOvals::GetVerticalAlignment ( );
__declspec(implementation_key(4316)) void IOvals::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4317)) long IOvals::GetReadingOrder ( );
__declspec(implementation_key(4318)) void IOvals::PutReadingOrder ( long RHS );
__declspec(implementation_key(4319)) BorderPtr IOvals::GetBorder ( );
__declspec(implementation_key(4320)) InteriorPtr IOvals::GetInterior ( );
__declspec(implementation_key(4321)) VARIANT_BOOL IOvals::GetShadow ( );
__declspec(implementation_key(4322)) void IOvals::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4323)) OvalPtr IOvals::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(4324)) long IOvals::GetCount ( );
__declspec(implementation_key(4325)) GroupObjectPtr IOvals::Group ( );
__declspec(implementation_key(4326)) IDispatchPtr IOvals::Item ( const _variant_t & Index );
__declspec(implementation_key(4327)) IUnknownPtr IOvals::_NewEnum ( );
__declspec(implementation_key(4328)) _ApplicationPtr IArc::GetApplication ( );
__declspec(implementation_key(4329)) enum XlCreator IArc::GetCreator ( );
__declspec(implementation_key(4330)) IDispatchPtr IArc::GetParent ( );
__declspec(implementation_key(4331)) RangePtr IArc::GetBottomRightCell ( );
__declspec(implementation_key(4332)) _variant_t IArc::BringToFront ( );
__declspec(implementation_key(4333)) _variant_t IArc::Copy ( );
__declspec(implementation_key(4334)) _variant_t IArc::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4335)) _variant_t IArc::Cut ( );
__declspec(implementation_key(4336)) _variant_t IArc::Delete ( );
__declspec(implementation_key(4337)) IDispatchPtr IArc::Duplicate ( );
__declspec(implementation_key(4338)) VARIANT_BOOL IArc::GetEnabled ( );
__declspec(implementation_key(4339)) void IArc::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4340)) double IArc::GetHeight ( );
__declspec(implementation_key(4341)) void IArc::PutHeight ( double RHS );
__declspec(implementation_key(4342)) long IArc::GetIndex ( );
__declspec(implementation_key(4343)) double IArc::GetLeft ( );
__declspec(implementation_key(4344)) void IArc::PutLeft ( double RHS );
__declspec(implementation_key(4345)) VARIANT_BOOL IArc::GetLocked ( );
__declspec(implementation_key(4346)) void IArc::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4347)) _bstr_t IArc::GetName ( );
__declspec(implementation_key(4348)) void IArc::PutName ( _bstr_t RHS );
__declspec(implementation_key(4349)) _bstr_t IArc::GetOnAction ( );
__declspec(implementation_key(4350)) void IArc::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4351)) _variant_t IArc::GetPlacement ( );
__declspec(implementation_key(4352)) void IArc::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4353)) VARIANT_BOOL IArc::GetPrintObject ( );
__declspec(implementation_key(4354)) void IArc::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4355)) _variant_t IArc::Select ( const _variant_t & Replace );
__declspec(implementation_key(4356)) _variant_t IArc::SendToBack ( );
__declspec(implementation_key(4357)) double IArc::GetTop ( );
__declspec(implementation_key(4358)) void IArc::PutTop ( double RHS );
__declspec(implementation_key(4359)) RangePtr IArc::GetTopLeftCell ( );
__declspec(implementation_key(4360)) VARIANT_BOOL IArc::GetVisible ( );
__declspec(implementation_key(4361)) void IArc::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4362)) double IArc::GetWidth ( );
__declspec(implementation_key(4363)) void IArc::PutWidth ( double RHS );
__declspec(implementation_key(4364)) long IArc::GetZOrder ( );
__declspec(implementation_key(4365)) ShapeRangePtr IArc::GetShapeRange ( );
__declspec(implementation_key(4366)) VARIANT_BOOL IArc::GetAddIndent ( );
__declspec(implementation_key(4367)) void IArc::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(4368)) _variant_t IArc::GetAutoScaleFont ( );
__declspec(implementation_key(4369)) void IArc::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(4370)) VARIANT_BOOL IArc::GetAutoSize ( );
__declspec(implementation_key(4371)) void IArc::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(4372)) _bstr_t IArc::GetCaption ( );
__declspec(implementation_key(4373)) void IArc::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(4374)) CharactersPtr IArc::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4375)) _variant_t IArc::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4376)) FontPtr IArc::GetFont ( );
__declspec(implementation_key(4377)) _bstr_t IArc::GetFormula ( );
__declspec(implementation_key(4378)) void IArc::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4379)) _variant_t IArc::GetHorizontalAlignment ( );
__declspec(implementation_key(4380)) void IArc::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4381)) VARIANT_BOOL IArc::GetLockedText ( );
__declspec(implementation_key(4382)) void IArc::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(4383)) _variant_t IArc::GetOrientation ( );
__declspec(implementation_key(4384)) void IArc::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(4385)) _bstr_t IArc::GetText ( );
__declspec(implementation_key(4386)) void IArc::PutText ( _bstr_t RHS );
__declspec(implementation_key(4387)) _variant_t IArc::GetVerticalAlignment ( );
__declspec(implementation_key(4388)) void IArc::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4389)) long IArc::GetReadingOrder ( );
__declspec(implementation_key(4390)) void IArc::PutReadingOrder ( long RHS );
__declspec(implementation_key(4391)) BorderPtr IArc::GetBorder ( );
__declspec(implementation_key(4392)) InteriorPtr IArc::GetInterior ( );
__declspec(implementation_key(4393)) _ApplicationPtr IArcs::GetApplication ( );
__declspec(implementation_key(4394)) enum XlCreator IArcs::GetCreator ( );
__declspec(implementation_key(4395)) IDispatchPtr IArcs::GetParent ( );
__declspec(implementation_key(4396)) _variant_t IArcs::BringToFront ( );
__declspec(implementation_key(4397)) _variant_t IArcs::Copy ( );
__declspec(implementation_key(4398)) _variant_t IArcs::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4399)) _variant_t IArcs::Cut ( );
__declspec(implementation_key(4400)) _variant_t IArcs::Delete ( );
__declspec(implementation_key(4401)) IDispatchPtr IArcs::Duplicate ( );
__declspec(implementation_key(4402)) VARIANT_BOOL IArcs::GetEnabled ( );
__declspec(implementation_key(4403)) void IArcs::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4404)) double IArcs::GetHeight ( );
__declspec(implementation_key(4405)) void IArcs::PutHeight ( double RHS );
__declspec(implementation_key(4406)) double IArcs::GetLeft ( );
__declspec(implementation_key(4407)) void IArcs::PutLeft ( double RHS );
__declspec(implementation_key(4408)) VARIANT_BOOL IArcs::GetLocked ( );
__declspec(implementation_key(4409)) void IArcs::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4410)) _bstr_t IArcs::GetOnAction ( );
__declspec(implementation_key(4411)) void IArcs::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4412)) _variant_t IArcs::GetPlacement ( );
__declspec(implementation_key(4413)) void IArcs::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4414)) VARIANT_BOOL IArcs::GetPrintObject ( );
__declspec(implementation_key(4415)) void IArcs::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4416)) _variant_t IArcs::Select ( const _variant_t & Replace );
__declspec(implementation_key(4417)) _variant_t IArcs::SendToBack ( );
__declspec(implementation_key(4418)) double IArcs::GetTop ( );
__declspec(implementation_key(4419)) void IArcs::PutTop ( double RHS );
__declspec(implementation_key(4420)) VARIANT_BOOL IArcs::GetVisible ( );
__declspec(implementation_key(4421)) void IArcs::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4422)) double IArcs::GetWidth ( );
__declspec(implementation_key(4423)) void IArcs::PutWidth ( double RHS );
__declspec(implementation_key(4424)) long IArcs::GetZOrder ( );
__declspec(implementation_key(4425)) ShapeRangePtr IArcs::GetShapeRange ( );
__declspec(implementation_key(4426)) VARIANT_BOOL IArcs::GetAddIndent ( );
__declspec(implementation_key(4427)) void IArcs::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(4428)) _variant_t IArcs::GetAutoScaleFont ( );
__declspec(implementation_key(4429)) void IArcs::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(4430)) VARIANT_BOOL IArcs::GetAutoSize ( );
__declspec(implementation_key(4431)) void IArcs::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(4432)) _bstr_t IArcs::GetCaption ( );
__declspec(implementation_key(4433)) void IArcs::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(4434)) CharactersPtr IArcs::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4435)) _variant_t IArcs::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4436)) FontPtr IArcs::GetFont ( );
__declspec(implementation_key(4437)) _bstr_t IArcs::GetFormula ( );
__declspec(implementation_key(4438)) void IArcs::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4439)) _variant_t IArcs::GetHorizontalAlignment ( );
__declspec(implementation_key(4440)) void IArcs::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4441)) VARIANT_BOOL IArcs::GetLockedText ( );
__declspec(implementation_key(4442)) void IArcs::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(4443)) _variant_t IArcs::GetOrientation ( );
__declspec(implementation_key(4444)) void IArcs::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(4445)) _bstr_t IArcs::GetText ( );
__declspec(implementation_key(4446)) void IArcs::PutText ( _bstr_t RHS );
__declspec(implementation_key(4447)) _variant_t IArcs::GetVerticalAlignment ( );
__declspec(implementation_key(4448)) void IArcs::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4449)) long IArcs::GetReadingOrder ( );
__declspec(implementation_key(4450)) void IArcs::PutReadingOrder ( long RHS );
__declspec(implementation_key(4451)) BorderPtr IArcs::GetBorder ( );
__declspec(implementation_key(4452)) InteriorPtr IArcs::GetInterior ( );
__declspec(implementation_key(4453)) ArcPtr IArcs::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(4454)) long IArcs::GetCount ( );
__declspec(implementation_key(4455)) GroupObjectPtr IArcs::Group ( );
__declspec(implementation_key(4456)) IDispatchPtr IArcs::Item ( const _variant_t & Index );
__declspec(implementation_key(4457)) IUnknownPtr IArcs::_NewEnum ( );
__declspec(implementation_key(4458)) HRESULT IOLEObjectEvents::GotFocus ( );
__declspec(implementation_key(4459)) HRESULT IOLEObjectEvents::LostFocus ( );
__declspec(implementation_key(4460)) _ApplicationPtr _IOLEObject::GetApplication ( );
__declspec(implementation_key(4461)) enum XlCreator _IOLEObject::GetCreator ( );
__declspec(implementation_key(4462)) IDispatchPtr _IOLEObject::GetParent ( );
__declspec(implementation_key(4463)) RangePtr _IOLEObject::GetBottomRightCell ( );
__declspec(implementation_key(4464)) _variant_t _IOLEObject::BringToFront ( );
__declspec(implementation_key(4465)) _variant_t _IOLEObject::Copy ( );
__declspec(implementation_key(4466)) _variant_t _IOLEObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4467)) _variant_t _IOLEObject::Cut ( );
__declspec(implementation_key(4468)) _variant_t _IOLEObject::Delete ( );
__declspec(implementation_key(4469)) IDispatchPtr _IOLEObject::Duplicate ( );
__declspec(implementation_key(4470)) VARIANT_BOOL _IOLEObject::GetEnabled ( );
__declspec(implementation_key(4471)) void _IOLEObject::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4472)) double _IOLEObject::GetHeight ( );
__declspec(implementation_key(4473)) void _IOLEObject::PutHeight ( double RHS );
__declspec(implementation_key(4474)) long _IOLEObject::GetIndex ( );
__declspec(implementation_key(4475)) double _IOLEObject::GetLeft ( );
__declspec(implementation_key(4476)) void _IOLEObject::PutLeft ( double RHS );
__declspec(implementation_key(4477)) VARIANT_BOOL _IOLEObject::GetLocked ( );
__declspec(implementation_key(4478)) void _IOLEObject::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4479)) _bstr_t _IOLEObject::GetName ( );
__declspec(implementation_key(4480)) void _IOLEObject::PutName ( _bstr_t RHS );
__declspec(implementation_key(4481)) _bstr_t _IOLEObject::GetOnAction ( );
__declspec(implementation_key(4482)) void _IOLEObject::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4483)) _variant_t _IOLEObject::GetPlacement ( );
__declspec(implementation_key(4484)) void _IOLEObject::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4485)) VARIANT_BOOL _IOLEObject::GetPrintObject ( );
__declspec(implementation_key(4486)) void _IOLEObject::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4487)) _variant_t _IOLEObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(4488)) _variant_t _IOLEObject::SendToBack ( );
__declspec(implementation_key(4489)) double _IOLEObject::GetTop ( );
__declspec(implementation_key(4490)) void _IOLEObject::PutTop ( double RHS );
__declspec(implementation_key(4491)) RangePtr _IOLEObject::GetTopLeftCell ( );
__declspec(implementation_key(4492)) VARIANT_BOOL _IOLEObject::GetVisible ( );
__declspec(implementation_key(4493)) void _IOLEObject::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4494)) double _IOLEObject::GetWidth ( );
__declspec(implementation_key(4495)) void _IOLEObject::PutWidth ( double RHS );
__declspec(implementation_key(4496)) long _IOLEObject::GetZOrder ( );
__declspec(implementation_key(4497)) ShapeRangePtr _IOLEObject::GetShapeRange ( );
__declspec(implementation_key(4498)) BorderPtr _IOLEObject::GetBorder ( );
__declspec(implementation_key(4499)) InteriorPtr _IOLEObject::GetInterior ( );
__declspec(implementation_key(4500)) VARIANT_BOOL _IOLEObject::GetShadow ( );
__declspec(implementation_key(4501)) void _IOLEObject::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4502)) _variant_t _IOLEObject::Activate ( );
__declspec(implementation_key(4503)) VARIANT_BOOL _IOLEObject::GetAutoLoad ( );
__declspec(implementation_key(4504)) void _IOLEObject::PutAutoLoad ( VARIANT_BOOL RHS );
__declspec(implementation_key(4505)) VARIANT_BOOL _IOLEObject::GetAutoUpdate ( );
__declspec(implementation_key(4506)) void _IOLEObject::PutAutoUpdate ( VARIANT_BOOL RHS );
__declspec(implementation_key(4507)) IDispatchPtr _IOLEObject::GetObject ( );
__declspec(implementation_key(4508)) _variant_t _IOLEObject::GetOLEType ( );
__declspec(implementation_key(4509)) _bstr_t _IOLEObject::GetSourceName ( );
__declspec(implementation_key(4510)) void _IOLEObject::PutSourceName ( _bstr_t RHS );
__declspec(implementation_key(4511)) _variant_t _IOLEObject::Update ( );
__declspec(implementation_key(4512)) _variant_t _IOLEObject::Verb ( enum XlOLEVerb Verb );
__declspec(implementation_key(4513)) _bstr_t _IOLEObject::GetLinkedCell ( );
__declspec(implementation_key(4514)) void _IOLEObject::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(4515)) _bstr_t _IOLEObject::GetListFillRange ( );
__declspec(implementation_key(4516)) void _IOLEObject::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(4517)) _bstr_t _IOLEObject::GetprogID ( );
__declspec(implementation_key(4518)) _bstr_t _IOLEObject::GetAltHTML ( );
__declspec(implementation_key(4519)) void _IOLEObject::PutAltHTML ( _bstr_t RHS );
__declspec(implementation_key(4520)) _ApplicationPtr IOLEObjects::GetApplication ( );
__declspec(implementation_key(4521)) enum XlCreator IOLEObjects::GetCreator ( );
__declspec(implementation_key(4522)) IDispatchPtr IOLEObjects::GetParent ( );
__declspec(implementation_key(4523)) _variant_t IOLEObjects::BringToFront ( );
__declspec(implementation_key(4524)) _variant_t IOLEObjects::Copy ( );
__declspec(implementation_key(4525)) _variant_t IOLEObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4526)) _variant_t IOLEObjects::Cut ( );
__declspec(implementation_key(4527)) _variant_t IOLEObjects::Delete ( );
__declspec(implementation_key(4528)) IDispatchPtr IOLEObjects::Duplicate ( );
__declspec(implementation_key(4529)) VARIANT_BOOL IOLEObjects::GetEnabled ( );
__declspec(implementation_key(4530)) void IOLEObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4531)) double IOLEObjects::GetHeight ( );
__declspec(implementation_key(4532)) void IOLEObjects::PutHeight ( double RHS );
__declspec(implementation_key(4533)) double IOLEObjects::GetLeft ( );
__declspec(implementation_key(4534)) void IOLEObjects::PutLeft ( double RHS );
__declspec(implementation_key(4535)) VARIANT_BOOL IOLEObjects::GetLocked ( );
__declspec(implementation_key(4536)) void IOLEObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4537)) _bstr_t IOLEObjects::GetOnAction ( );
__declspec(implementation_key(4538)) void IOLEObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4539)) _variant_t IOLEObjects::GetPlacement ( );
__declspec(implementation_key(4540)) void IOLEObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4541)) VARIANT_BOOL IOLEObjects::GetPrintObject ( );
__declspec(implementation_key(4542)) void IOLEObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4543)) _variant_t IOLEObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(4544)) _variant_t IOLEObjects::SendToBack ( );
__declspec(implementation_key(4545)) double IOLEObjects::GetTop ( );
__declspec(implementation_key(4546)) void IOLEObjects::PutTop ( double RHS );
__declspec(implementation_key(4547)) VARIANT_BOOL IOLEObjects::GetVisible ( );
__declspec(implementation_key(4548)) void IOLEObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4549)) double IOLEObjects::GetWidth ( );
__declspec(implementation_key(4550)) void IOLEObjects::PutWidth ( double RHS );
__declspec(implementation_key(4551)) long IOLEObjects::GetZOrder ( );
__declspec(implementation_key(4552)) ShapeRangePtr IOLEObjects::GetShapeRange ( );
__declspec(implementation_key(4553)) BorderPtr IOLEObjects::GetBorder ( );
__declspec(implementation_key(4554)) InteriorPtr IOLEObjects::GetInterior ( );
__declspec(implementation_key(4555)) VARIANT_BOOL IOLEObjects::GetShadow ( );
__declspec(implementation_key(4556)) void IOLEObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4557)) VARIANT_BOOL IOLEObjects::GetAutoLoad ( );
__declspec(implementation_key(4558)) void IOLEObjects::PutAutoLoad ( VARIANT_BOOL RHS );
__declspec(implementation_key(4559)) _bstr_t IOLEObjects::GetSourceName ( );
__declspec(implementation_key(4560)) void IOLEObjects::PutSourceName ( _bstr_t RHS );
__declspec(implementation_key(4561)) _OLEObjectPtr IOLEObjects::Add ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(4562)) long IOLEObjects::GetCount ( );
__declspec(implementation_key(4563)) GroupObjectPtr IOLEObjects::Group ( );
__declspec(implementation_key(4564)) IDispatchPtr IOLEObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(4565)) IUnknownPtr IOLEObjects::_NewEnum ( );
__declspec(implementation_key(4566)) _ApplicationPtr ITextBox::GetApplication ( );
__declspec(implementation_key(4567)) enum XlCreator ITextBox::GetCreator ( );
__declspec(implementation_key(4568)) IDispatchPtr ITextBox::GetParent ( );
__declspec(implementation_key(4569)) RangePtr ITextBox::GetBottomRightCell ( );
__declspec(implementation_key(4570)) _variant_t ITextBox::BringToFront ( );
__declspec(implementation_key(4571)) _variant_t ITextBox::Copy ( );
__declspec(implementation_key(4572)) _variant_t ITextBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4573)) _variant_t ITextBox::Cut ( );
__declspec(implementation_key(4574)) _variant_t ITextBox::Delete ( );
__declspec(implementation_key(4575)) IDispatchPtr ITextBox::Duplicate ( );
__declspec(implementation_key(4576)) VARIANT_BOOL ITextBox::GetEnabled ( );
__declspec(implementation_key(4577)) void ITextBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4578)) double ITextBox::GetHeight ( );
__declspec(implementation_key(4579)) void ITextBox::PutHeight ( double RHS );
__declspec(implementation_key(4580)) long ITextBox::GetIndex ( );
__declspec(implementation_key(4581)) double ITextBox::GetLeft ( );
__declspec(implementation_key(4582)) void ITextBox::PutLeft ( double RHS );
__declspec(implementation_key(4583)) VARIANT_BOOL ITextBox::GetLocked ( );
__declspec(implementation_key(4584)) void ITextBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4585)) _bstr_t ITextBox::GetName ( );
__declspec(implementation_key(4586)) void ITextBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(4587)) _bstr_t ITextBox::GetOnAction ( );
__declspec(implementation_key(4588)) void ITextBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4589)) _variant_t ITextBox::GetPlacement ( );
__declspec(implementation_key(4590)) void ITextBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4591)) VARIANT_BOOL ITextBox::GetPrintObject ( );
__declspec(implementation_key(4592)) void ITextBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4593)) _variant_t ITextBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(4594)) _variant_t ITextBox::SendToBack ( );
__declspec(implementation_key(4595)) double ITextBox::GetTop ( );
__declspec(implementation_key(4596)) void ITextBox::PutTop ( double RHS );
__declspec(implementation_key(4597)) RangePtr ITextBox::GetTopLeftCell ( );
__declspec(implementation_key(4598)) VARIANT_BOOL ITextBox::GetVisible ( );
__declspec(implementation_key(4599)) void ITextBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4600)) double ITextBox::GetWidth ( );
__declspec(implementation_key(4601)) void ITextBox::PutWidth ( double RHS );
__declspec(implementation_key(4602)) long ITextBox::GetZOrder ( );
__declspec(implementation_key(4603)) ShapeRangePtr ITextBox::GetShapeRange ( );
__declspec(implementation_key(4604)) VARIANT_BOOL ITextBox::GetAddIndent ( );
__declspec(implementation_key(4605)) void ITextBox::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(4606)) _variant_t ITextBox::GetAutoScaleFont ( );
__declspec(implementation_key(4607)) void ITextBox::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(4608)) VARIANT_BOOL ITextBox::GetAutoSize ( );
__declspec(implementation_key(4609)) void ITextBox::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(4610)) _bstr_t ITextBox::GetCaption ( );
__declspec(implementation_key(4611)) void ITextBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(4612)) CharactersPtr ITextBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4613)) _variant_t ITextBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4614)) FontPtr ITextBox::GetFont ( );
__declspec(implementation_key(4615)) _bstr_t ITextBox::GetFormula ( );
__declspec(implementation_key(4616)) void ITextBox::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4617)) _variant_t ITextBox::GetHorizontalAlignment ( );
__declspec(implementation_key(4618)) void ITextBox::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4619)) VARIANT_BOOL ITextBox::GetLockedText ( );
__declspec(implementation_key(4620)) void ITextBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(4621)) _variant_t ITextBox::GetOrientation ( );
__declspec(implementation_key(4622)) void ITextBox::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(4623)) _bstr_t ITextBox::GetText ( );
__declspec(implementation_key(4624)) void ITextBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(4625)) _variant_t ITextBox::GetVerticalAlignment ( );
__declspec(implementation_key(4626)) void ITextBox::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4627)) long ITextBox::GetReadingOrder ( );
__declspec(implementation_key(4628)) void ITextBox::PutReadingOrder ( long RHS );
__declspec(implementation_key(4629)) BorderPtr ITextBox::GetBorder ( );
__declspec(implementation_key(4630)) InteriorPtr ITextBox::GetInterior ( );
__declspec(implementation_key(4631)) VARIANT_BOOL ITextBox::GetRoundedCorners ( );
__declspec(implementation_key(4632)) void ITextBox::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(4633)) VARIANT_BOOL ITextBox::GetShadow ( );
__declspec(implementation_key(4634)) void ITextBox::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4635)) _ApplicationPtr ITextBoxes::GetApplication ( );
__declspec(implementation_key(4636)) enum XlCreator ITextBoxes::GetCreator ( );
__declspec(implementation_key(4637)) IDispatchPtr ITextBoxes::GetParent ( );
__declspec(implementation_key(4638)) _variant_t ITextBoxes::BringToFront ( );
__declspec(implementation_key(4639)) _variant_t ITextBoxes::Copy ( );
__declspec(implementation_key(4640)) _variant_t ITextBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4641)) _variant_t ITextBoxes::Cut ( );
__declspec(implementation_key(4642)) _variant_t ITextBoxes::Delete ( );
__declspec(implementation_key(4643)) IDispatchPtr ITextBoxes::Duplicate ( );
__declspec(implementation_key(4644)) VARIANT_BOOL ITextBoxes::GetEnabled ( );
__declspec(implementation_key(4645)) void ITextBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4646)) double ITextBoxes::GetHeight ( );
__declspec(implementation_key(4647)) void ITextBoxes::PutHeight ( double RHS );
__declspec(implementation_key(4648)) double ITextBoxes::GetLeft ( );
__declspec(implementation_key(4649)) void ITextBoxes::PutLeft ( double RHS );
__declspec(implementation_key(4650)) VARIANT_BOOL ITextBoxes::GetLocked ( );
__declspec(implementation_key(4651)) void ITextBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4652)) _bstr_t ITextBoxes::GetOnAction ( );
__declspec(implementation_key(4653)) void ITextBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4654)) _variant_t ITextBoxes::GetPlacement ( );
__declspec(implementation_key(4655)) void ITextBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4656)) VARIANT_BOOL ITextBoxes::GetPrintObject ( );
__declspec(implementation_key(4657)) void ITextBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4658)) _variant_t ITextBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(4659)) _variant_t ITextBoxes::SendToBack ( );
__declspec(implementation_key(4660)) double ITextBoxes::GetTop ( );
__declspec(implementation_key(4661)) void ITextBoxes::PutTop ( double RHS );
__declspec(implementation_key(4662)) VARIANT_BOOL ITextBoxes::GetVisible ( );
__declspec(implementation_key(4663)) void ITextBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4664)) double ITextBoxes::GetWidth ( );
__declspec(implementation_key(4665)) void ITextBoxes::PutWidth ( double RHS );
__declspec(implementation_key(4666)) long ITextBoxes::GetZOrder ( );
__declspec(implementation_key(4667)) ShapeRangePtr ITextBoxes::GetShapeRange ( );
__declspec(implementation_key(4668)) VARIANT_BOOL ITextBoxes::GetAddIndent ( );
__declspec(implementation_key(4669)) void ITextBoxes::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(4670)) _variant_t ITextBoxes::GetAutoScaleFont ( );
__declspec(implementation_key(4671)) void ITextBoxes::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(4672)) VARIANT_BOOL ITextBoxes::GetAutoSize ( );
__declspec(implementation_key(4673)) void ITextBoxes::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(4674)) _bstr_t ITextBoxes::GetCaption ( );
__declspec(implementation_key(4675)) void ITextBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(4676)) CharactersPtr ITextBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4677)) _variant_t ITextBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4678)) FontPtr ITextBoxes::GetFont ( );
__declspec(implementation_key(4679)) _bstr_t ITextBoxes::GetFormula ( );
__declspec(implementation_key(4680)) void ITextBoxes::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4681)) _variant_t ITextBoxes::GetHorizontalAlignment ( );
__declspec(implementation_key(4682)) void ITextBoxes::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4683)) VARIANT_BOOL ITextBoxes::GetLockedText ( );
__declspec(implementation_key(4684)) void ITextBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(4685)) _variant_t ITextBoxes::GetOrientation ( );
__declspec(implementation_key(4686)) void ITextBoxes::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(4687)) _bstr_t ITextBoxes::GetText ( );
__declspec(implementation_key(4688)) void ITextBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(4689)) _variant_t ITextBoxes::GetVerticalAlignment ( );
__declspec(implementation_key(4690)) void ITextBoxes::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4691)) long ITextBoxes::GetReadingOrder ( );
__declspec(implementation_key(4692)) void ITextBoxes::PutReadingOrder ( long RHS );
__declspec(implementation_key(4693)) BorderPtr ITextBoxes::GetBorder ( );
__declspec(implementation_key(4694)) InteriorPtr ITextBoxes::GetInterior ( );
__declspec(implementation_key(4695)) VARIANT_BOOL ITextBoxes::GetRoundedCorners ( );
__declspec(implementation_key(4696)) void ITextBoxes::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(4697)) VARIANT_BOOL ITextBoxes::GetShadow ( );
__declspec(implementation_key(4698)) void ITextBoxes::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4699)) TextBoxPtr ITextBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(4700)) long ITextBoxes::GetCount ( );
__declspec(implementation_key(4701)) GroupObjectPtr ITextBoxes::Group ( );
__declspec(implementation_key(4702)) IDispatchPtr ITextBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(4703)) IUnknownPtr ITextBoxes::_NewEnum ( );
__declspec(implementation_key(4704)) _ApplicationPtr IPictures::GetApplication ( );
__declspec(implementation_key(4705)) enum XlCreator IPictures::GetCreator ( );
__declspec(implementation_key(4706)) IDispatchPtr IPictures::GetParent ( );
__declspec(implementation_key(4707)) _variant_t IPictures::BringToFront ( );
__declspec(implementation_key(4708)) _variant_t IPictures::Copy ( );
__declspec(implementation_key(4709)) _variant_t IPictures::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4710)) _variant_t IPictures::Cut ( );
__declspec(implementation_key(4711)) _variant_t IPictures::Delete ( );
__declspec(implementation_key(4712)) IDispatchPtr IPictures::Duplicate ( );
__declspec(implementation_key(4713)) VARIANT_BOOL IPictures::GetEnabled ( );
__declspec(implementation_key(4714)) void IPictures::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4715)) double IPictures::GetHeight ( );
__declspec(implementation_key(4716)) void IPictures::PutHeight ( double RHS );
__declspec(implementation_key(4717)) double IPictures::GetLeft ( );
__declspec(implementation_key(4718)) void IPictures::PutLeft ( double RHS );
__declspec(implementation_key(4719)) VARIANT_BOOL IPictures::GetLocked ( );
__declspec(implementation_key(4720)) void IPictures::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4721)) _bstr_t IPictures::GetOnAction ( );
__declspec(implementation_key(4722)) void IPictures::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4723)) _variant_t IPictures::GetPlacement ( );
__declspec(implementation_key(4724)) void IPictures::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4725)) VARIANT_BOOL IPictures::GetPrintObject ( );
__declspec(implementation_key(4726)) void IPictures::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4727)) _variant_t IPictures::Select ( const _variant_t & Replace );
__declspec(implementation_key(4728)) _variant_t IPictures::SendToBack ( );
__declspec(implementation_key(4729)) double IPictures::GetTop ( );
__declspec(implementation_key(4730)) void IPictures::PutTop ( double RHS );
__declspec(implementation_key(4731)) VARIANT_BOOL IPictures::GetVisible ( );
__declspec(implementation_key(4732)) void IPictures::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4733)) double IPictures::GetWidth ( );
__declspec(implementation_key(4734)) void IPictures::PutWidth ( double RHS );
__declspec(implementation_key(4735)) long IPictures::GetZOrder ( );
__declspec(implementation_key(4736)) ShapeRangePtr IPictures::GetShapeRange ( );
__declspec(implementation_key(4737)) BorderPtr IPictures::GetBorder ( );
__declspec(implementation_key(4738)) InteriorPtr IPictures::GetInterior ( );
__declspec(implementation_key(4739)) VARIANT_BOOL IPictures::GetShadow ( );
__declspec(implementation_key(4740)) void IPictures::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4741)) _bstr_t IPictures::GetFormula ( );
__declspec(implementation_key(4742)) void IPictures::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4743)) PicturePtr IPictures::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(4744)) long IPictures::GetCount ( );
__declspec(implementation_key(4745)) GroupObjectPtr IPictures::Group ( );
__declspec(implementation_key(4746)) PicturePtr IPictures::Insert ( _bstr_t Filename, const _variant_t & Converter );
__declspec(implementation_key(4747)) IDispatchPtr IPictures::Item ( const _variant_t & Index );
__declspec(implementation_key(4748)) IUnknownPtr IPictures::_NewEnum ( );
__declspec(implementation_key(4749)) PicturePtr IPictures::Paste ( const _variant_t & Link );
__declspec(implementation_key(4750)) _ApplicationPtr IDrawing::GetApplication ( );
__declspec(implementation_key(4751)) enum XlCreator IDrawing::GetCreator ( );
__declspec(implementation_key(4752)) IDispatchPtr IDrawing::GetParent ( );
__declspec(implementation_key(4753)) RangePtr IDrawing::GetBottomRightCell ( );
__declspec(implementation_key(4754)) _variant_t IDrawing::BringToFront ( );
__declspec(implementation_key(4755)) _variant_t IDrawing::Copy ( );
__declspec(implementation_key(4756)) _variant_t IDrawing::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4757)) _variant_t IDrawing::Cut ( );
__declspec(implementation_key(4758)) _variant_t IDrawing::Delete ( );
__declspec(implementation_key(4759)) IDispatchPtr IDrawing::Duplicate ( );
__declspec(implementation_key(4760)) VARIANT_BOOL IDrawing::GetEnabled ( );
__declspec(implementation_key(4761)) void IDrawing::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4762)) double IDrawing::GetHeight ( );
__declspec(implementation_key(4763)) void IDrawing::PutHeight ( double RHS );
__declspec(implementation_key(4764)) long IDrawing::GetIndex ( );
__declspec(implementation_key(4765)) double IDrawing::GetLeft ( );
__declspec(implementation_key(4766)) void IDrawing::PutLeft ( double RHS );
__declspec(implementation_key(4767)) VARIANT_BOOL IDrawing::GetLocked ( );
__declspec(implementation_key(4768)) void IDrawing::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4769)) _bstr_t IDrawing::GetName ( );
__declspec(implementation_key(4770)) void IDrawing::PutName ( _bstr_t RHS );
__declspec(implementation_key(4771)) _bstr_t IDrawing::GetOnAction ( );
__declspec(implementation_key(4772)) void IDrawing::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4773)) _variant_t IDrawing::GetPlacement ( );
__declspec(implementation_key(4774)) void IDrawing::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4775)) VARIANT_BOOL IDrawing::GetPrintObject ( );
__declspec(implementation_key(4776)) void IDrawing::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4777)) _variant_t IDrawing::Select ( const _variant_t & Replace );
__declspec(implementation_key(4778)) _variant_t IDrawing::SendToBack ( );
__declspec(implementation_key(4779)) double IDrawing::GetTop ( );
__declspec(implementation_key(4780)) void IDrawing::PutTop ( double RHS );
__declspec(implementation_key(4781)) RangePtr IDrawing::GetTopLeftCell ( );
__declspec(implementation_key(4782)) VARIANT_BOOL IDrawing::GetVisible ( );
__declspec(implementation_key(4783)) void IDrawing::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4784)) double IDrawing::GetWidth ( );
__declspec(implementation_key(4785)) void IDrawing::PutWidth ( double RHS );
__declspec(implementation_key(4786)) long IDrawing::GetZOrder ( );
__declspec(implementation_key(4787)) ShapeRangePtr IDrawing::GetShapeRange ( );
__declspec(implementation_key(4788)) VARIANT_BOOL IDrawing::GetAddIndent ( );
__declspec(implementation_key(4789)) void IDrawing::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(4790)) _variant_t IDrawing::GetAutoScaleFont ( );
__declspec(implementation_key(4791)) void IDrawing::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(4792)) VARIANT_BOOL IDrawing::GetAutoSize ( );
__declspec(implementation_key(4793)) void IDrawing::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(4794)) _bstr_t IDrawing::GetCaption ( );
__declspec(implementation_key(4795)) void IDrawing::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(4796)) CharactersPtr IDrawing::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4797)) _variant_t IDrawing::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4798)) FontPtr IDrawing::GetFont ( );
__declspec(implementation_key(4799)) _bstr_t IDrawing::GetFormula ( );
__declspec(implementation_key(4800)) void IDrawing::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4801)) _variant_t IDrawing::GetHorizontalAlignment ( );
__declspec(implementation_key(4802)) void IDrawing::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4803)) VARIANT_BOOL IDrawing::GetLockedText ( );
__declspec(implementation_key(4804)) void IDrawing::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(4805)) _variant_t IDrawing::GetOrientation ( );
__declspec(implementation_key(4806)) void IDrawing::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(4807)) _bstr_t IDrawing::GetText ( );
__declspec(implementation_key(4808)) void IDrawing::PutText ( _bstr_t RHS );
__declspec(implementation_key(4809)) _variant_t IDrawing::GetVerticalAlignment ( );
__declspec(implementation_key(4810)) void IDrawing::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4811)) long IDrawing::GetReadingOrder ( );
__declspec(implementation_key(4812)) void IDrawing::PutReadingOrder ( long RHS );
__declspec(implementation_key(4813)) BorderPtr IDrawing::GetBorder ( );
__declspec(implementation_key(4814)) InteriorPtr IDrawing::GetInterior ( );
__declspec(implementation_key(4815)) VARIANT_BOOL IDrawing::GetShadow ( );
__declspec(implementation_key(4816)) void IDrawing::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4817)) _variant_t IDrawing::AddVertex ( double Left, double Top );
__declspec(implementation_key(4818)) _variant_t IDrawing::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(4819)) _variant_t IDrawing::GetVertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(4820)) _ApplicationPtr IDrawings::GetApplication ( );
__declspec(implementation_key(4821)) enum XlCreator IDrawings::GetCreator ( );
__declspec(implementation_key(4822)) IDispatchPtr IDrawings::GetParent ( );
__declspec(implementation_key(4823)) _variant_t IDrawings::BringToFront ( );
__declspec(implementation_key(4824)) _variant_t IDrawings::Copy ( );
__declspec(implementation_key(4825)) _variant_t IDrawings::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4826)) _variant_t IDrawings::Cut ( );
__declspec(implementation_key(4827)) _variant_t IDrawings::Delete ( );
__declspec(implementation_key(4828)) IDispatchPtr IDrawings::Duplicate ( );
__declspec(implementation_key(4829)) VARIANT_BOOL IDrawings::GetEnabled ( );
__declspec(implementation_key(4830)) void IDrawings::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(4831)) double IDrawings::GetHeight ( );
__declspec(implementation_key(4832)) void IDrawings::PutHeight ( double RHS );
__declspec(implementation_key(4833)) double IDrawings::GetLeft ( );
__declspec(implementation_key(4834)) void IDrawings::PutLeft ( double RHS );
__declspec(implementation_key(4835)) VARIANT_BOOL IDrawings::GetLocked ( );
__declspec(implementation_key(4836)) void IDrawings::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(4837)) _bstr_t IDrawings::GetOnAction ( );
__declspec(implementation_key(4838)) void IDrawings::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(4839)) _variant_t IDrawings::GetPlacement ( );
__declspec(implementation_key(4840)) void IDrawings::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(4841)) VARIANT_BOOL IDrawings::GetPrintObject ( );
__declspec(implementation_key(4842)) void IDrawings::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(4843)) _variant_t IDrawings::Select ( const _variant_t & Replace );
__declspec(implementation_key(4844)) _variant_t IDrawings::SendToBack ( );
__declspec(implementation_key(4845)) double IDrawings::GetTop ( );
__declspec(implementation_key(4846)) void IDrawings::PutTop ( double RHS );
__declspec(implementation_key(4847)) VARIANT_BOOL IDrawings::GetVisible ( );
__declspec(implementation_key(4848)) void IDrawings::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(4849)) double IDrawings::GetWidth ( );
__declspec(implementation_key(4850)) void IDrawings::PutWidth ( double RHS );
__declspec(implementation_key(4851)) long IDrawings::GetZOrder ( );
__declspec(implementation_key(4852)) ShapeRangePtr IDrawings::GetShapeRange ( );
__declspec(implementation_key(4853)) VARIANT_BOOL IDrawings::GetAddIndent ( );
__declspec(implementation_key(4854)) void IDrawings::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(4855)) _variant_t IDrawings::GetAutoScaleFont ( );
__declspec(implementation_key(4856)) void IDrawings::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(4857)) VARIANT_BOOL IDrawings::GetAutoSize ( );
__declspec(implementation_key(4858)) void IDrawings::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(4859)) _bstr_t IDrawings::GetCaption ( );
__declspec(implementation_key(4860)) void IDrawings::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(4861)) CharactersPtr IDrawings::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4862)) _variant_t IDrawings::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4863)) FontPtr IDrawings::GetFont ( );
__declspec(implementation_key(4864)) _bstr_t IDrawings::GetFormula ( );
__declspec(implementation_key(4865)) void IDrawings::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(4866)) _variant_t IDrawings::GetHorizontalAlignment ( );
__declspec(implementation_key(4867)) void IDrawings::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4868)) VARIANT_BOOL IDrawings::GetLockedText ( );
__declspec(implementation_key(4869)) void IDrawings::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(4870)) _variant_t IDrawings::GetOrientation ( );
__declspec(implementation_key(4871)) void IDrawings::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(4872)) _bstr_t IDrawings::GetText ( );
__declspec(implementation_key(4873)) void IDrawings::PutText ( _bstr_t RHS );
__declspec(implementation_key(4874)) _variant_t IDrawings::GetVerticalAlignment ( );
__declspec(implementation_key(4875)) void IDrawings::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(4876)) long IDrawings::GetReadingOrder ( );
__declspec(implementation_key(4877)) void IDrawings::PutReadingOrder ( long RHS );
__declspec(implementation_key(4878)) BorderPtr IDrawings::GetBorder ( );
__declspec(implementation_key(4879)) InteriorPtr IDrawings::GetInterior ( );
__declspec(implementation_key(4880)) VARIANT_BOOL IDrawings::GetShadow ( );
__declspec(implementation_key(4881)) void IDrawings::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(4882)) _variant_t IDrawings::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(4883)) DrawingPtr IDrawings::Add ( double X1, double Y1, double X2, double Y2, VARIANT_BOOL Closed );
__declspec(implementation_key(4884)) long IDrawings::GetCount ( );
__declspec(implementation_key(4885)) GroupObjectPtr IDrawings::Group ( );
__declspec(implementation_key(4886)) IDispatchPtr IDrawings::Item ( const _variant_t & Index );
__declspec(implementation_key(4887)) IUnknownPtr IDrawings::_NewEnum ( );
__declspec(implementation_key(4888)) _ApplicationPtr IRoutingSlip::GetApplication ( );
__declspec(implementation_key(4889)) enum XlCreator IRoutingSlip::GetCreator ( );
__declspec(implementation_key(4890)) IDispatchPtr IRoutingSlip::GetParent ( );
__declspec(implementation_key(4891)) enum XlRoutingSlipDelivery IRoutingSlip::GetDelivery ( );
__declspec(implementation_key(4892)) void IRoutingSlip::PutDelivery ( enum XlRoutingSlipDelivery RHS );
__declspec(implementation_key(4893)) _variant_t IRoutingSlip::GetMessage ( );
__declspec(implementation_key(4894)) void IRoutingSlip::PutMessage ( const _variant_t & RHS );
__declspec(implementation_key(4895)) _variant_t IRoutingSlip::GetRecipients ( const _variant_t & Index );
__declspec(implementation_key(4896)) void IRoutingSlip::PutRecipients ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(4897)) _variant_t IRoutingSlip::Reset ( );
__declspec(implementation_key(4898)) VARIANT_BOOL IRoutingSlip::GetReturnWhenDone ( );
__declspec(implementation_key(4899)) void IRoutingSlip::PutReturnWhenDone ( VARIANT_BOOL RHS );
__declspec(implementation_key(4900)) enum XlRoutingSlipStatus IRoutingSlip::GetStatus ( );
__declspec(implementation_key(4901)) _variant_t IRoutingSlip::GetSubject ( );
__declspec(implementation_key(4902)) void IRoutingSlip::PutSubject ( const _variant_t & RHS );
__declspec(implementation_key(4903)) VARIANT_BOOL IRoutingSlip::GetTrackStatus ( );
__declspec(implementation_key(4904)) void IRoutingSlip::PutTrackStatus ( VARIANT_BOOL RHS );
__declspec(implementation_key(4905)) _ApplicationPtr IOutline::GetApplication ( );
__declspec(implementation_key(4906)) enum XlCreator IOutline::GetCreator ( );
__declspec(implementation_key(4907)) IDispatchPtr IOutline::GetParent ( );
__declspec(implementation_key(4908)) VARIANT_BOOL IOutline::GetAutomaticStyles ( );
__declspec(implementation_key(4909)) void IOutline::PutAutomaticStyles ( VARIANT_BOOL RHS );
__declspec(implementation_key(4910)) _variant_t IOutline::ShowLevels ( const _variant_t & RowLevels, const _variant_t & ColumnLevels );
__declspec(implementation_key(4911)) enum XlSummaryColumn IOutline::GetSummaryColumn ( );
__declspec(implementation_key(4912)) void IOutline::PutSummaryColumn ( enum XlSummaryColumn RHS );
__declspec(implementation_key(4913)) enum XlSummaryRow IOutline::GetSummaryRow ( );
__declspec(implementation_key(4914)) void IOutline::PutSummaryRow ( enum XlSummaryRow RHS );
__declspec(implementation_key(4915)) _ApplicationPtr IModule::GetApplication ( );
__declspec(implementation_key(4916)) enum XlCreator IModule::GetCreator ( );
__declspec(implementation_key(4917)) IDispatchPtr IModule::GetParent ( );
__declspec(implementation_key(4918)) HRESULT IModule::Activate ( long lcid );
__declspec(implementation_key(4919)) HRESULT IModule::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(4920)) HRESULT IModule::Delete ( long lcid );
__declspec(implementation_key(4921)) _bstr_t IModule::GetCodeName ( );
__declspec(implementation_key(4922)) _bstr_t IModule::Get_CodeName ( );
__declspec(implementation_key(4923)) void IModule::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(4924)) long IModule::GetIndex ( long lcid );
__declspec(implementation_key(4925)) HRESULT IModule::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(4926)) _bstr_t IModule::GetName ( );
__declspec(implementation_key(4927)) void IModule::PutName ( _bstr_t RHS );
__declspec(implementation_key(4928)) IDispatchPtr IModule::GetNext ( );
__declspec(implementation_key(4929)) _bstr_t IModule::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(4930)) void IModule::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(4931)) _bstr_t IModule::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(4932)) void IModule::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(4933)) _bstr_t IModule::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(4934)) void IModule::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(4935)) PageSetupPtr IModule::GetPageSetup ( );
__declspec(implementation_key(4936)) IDispatchPtr IModule::GetPrevious ( );
__declspec(implementation_key(4937)) HRESULT IModule::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(4938)) HRESULT IModule::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(4939)) VARIANT_BOOL IModule::GetProtectContents ( long lcid );
__declspec(implementation_key(4940)) VARIANT_BOOL IModule::GetProtectionMode ( long lcid );
__declspec(implementation_key(4941)) HRESULT IModule::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(4942)) HRESULT IModule::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(4943)) HRESULT IModule::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(4944)) enum XlSheetVisibility IModule::GetVisible ( long lcid );
__declspec(implementation_key(4945)) void IModule::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(4946)) ShapesPtr IModule::GetShapes ( );
__declspec(implementation_key(4947)) _variant_t IModule::InsertFile ( const _variant_t & Filename, const _variant_t & Merge );
__declspec(implementation_key(4948)) HRESULT IModule::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout );
__declspec(implementation_key(4949)) HRESULT IModule::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(4950)) _ApplicationPtr IModules::GetApplication ( );
__declspec(implementation_key(4951)) enum XlCreator IModules::GetCreator ( );
__declspec(implementation_key(4952)) IDispatchPtr IModules::GetParent ( );
__declspec(implementation_key(4953)) ModulePtr IModules::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(4954)) HRESULT IModules::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(4955)) long IModules::GetCount ( );
__declspec(implementation_key(4956)) HRESULT IModules::Delete ( long lcid );
__declspec(implementation_key(4957)) IDispatchPtr IModules::GetItem ( const _variant_t & Index );
__declspec(implementation_key(4958)) HRESULT IModules::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(4959)) IUnknownPtr IModules::Get_NewEnum ( );
__declspec(implementation_key(4960)) HRESULT IModules::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(4961)) HRESULT IModules::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(4962)) HPageBreaksPtr IModules::GetHPageBreaks ( );
__declspec(implementation_key(4963)) VPageBreaksPtr IModules::GetVPageBreaks ( );
__declspec(implementation_key(4964)) _variant_t IModules::GetVisible ( long lcid );
__declspec(implementation_key(4965)) void IModules::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(4966)) IDispatchPtr IModules::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4967)) HRESULT IModules::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(4968)) _ApplicationPtr IDialogSheet::GetApplication ( );
__declspec(implementation_key(4969)) enum XlCreator IDialogSheet::GetCreator ( );
__declspec(implementation_key(4970)) IDispatchPtr IDialogSheet::GetParent ( );
__declspec(implementation_key(4971)) HRESULT IDialogSheet::Activate ( long lcid );
__declspec(implementation_key(4972)) HRESULT IDialogSheet::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(4973)) HRESULT IDialogSheet::Delete ( long lcid );
__declspec(implementation_key(4974)) _bstr_t IDialogSheet::GetCodeName ( );
__declspec(implementation_key(4975)) _bstr_t IDialogSheet::Get_CodeName ( );
__declspec(implementation_key(4976)) void IDialogSheet::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(4977)) long IDialogSheet::GetIndex ( long lcid );
__declspec(implementation_key(4978)) HRESULT IDialogSheet::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(4979)) _bstr_t IDialogSheet::GetName ( );
__declspec(implementation_key(4980)) void IDialogSheet::PutName ( _bstr_t RHS );
__declspec(implementation_key(4981)) IDispatchPtr IDialogSheet::GetNext ( );
__declspec(implementation_key(4982)) _bstr_t IDialogSheet::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(4983)) void IDialogSheet::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(4984)) _bstr_t IDialogSheet::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(4985)) void IDialogSheet::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(4986)) _bstr_t IDialogSheet::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(4987)) void IDialogSheet::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(4988)) PageSetupPtr IDialogSheet::GetPageSetup ( );
__declspec(implementation_key(4989)) IDispatchPtr IDialogSheet::GetPrevious ( );
__declspec(implementation_key(4990)) HRESULT IDialogSheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(4991)) HRESULT IDialogSheet::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(4992)) HRESULT IDialogSheet::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(4993)) VARIANT_BOOL IDialogSheet::GetProtectContents ( long lcid );
__declspec(implementation_key(4994)) VARIANT_BOOL IDialogSheet::GetProtectDrawingObjects ( long lcid );
__declspec(implementation_key(4995)) VARIANT_BOOL IDialogSheet::GetProtectionMode ( long lcid );
__declspec(implementation_key(4996)) VARIANT_BOOL IDialogSheet::GetProtectScenarios ( long lcid );
__declspec(implementation_key(4997)) HRESULT IDialogSheet::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(4998)) HRESULT IDialogSheet::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(4999)) HRESULT IDialogSheet::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(5000)) enum XlSheetVisibility IDialogSheet::GetVisible ( long lcid );
__declspec(implementation_key(5001)) void IDialogSheet::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(5002)) ShapesPtr IDialogSheet::GetShapes ( );
__declspec(implementation_key(5003)) IDispatchPtr IDialogSheet::Arcs ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5004)) IDispatchPtr IDialogSheet::Buttons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5005)) VARIANT_BOOL IDialogSheet::GetEnableCalculation ( );
__declspec(implementation_key(5006)) void IDialogSheet::PutEnableCalculation ( VARIANT_BOOL RHS );
__declspec(implementation_key(5007)) IDispatchPtr IDialogSheet::ChartObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5008)) IDispatchPtr IDialogSheet::CheckBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5009)) HRESULT IDialogSheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid );
__declspec(implementation_key(5010)) VARIANT_BOOL IDialogSheet::GetDisplayAutomaticPageBreaks ( long lcid );
__declspec(implementation_key(5011)) void IDialogSheet::PutDisplayAutomaticPageBreaks ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(5012)) IDispatchPtr IDialogSheet::Drawings ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5013)) IDispatchPtr IDialogSheet::DrawingObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5014)) IDispatchPtr IDialogSheet::DropDowns ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5015)) VARIANT_BOOL IDialogSheet::GetEnableAutoFilter ( long lcid );
__declspec(implementation_key(5016)) void IDialogSheet::PutEnableAutoFilter ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(5017)) enum XlEnableSelection IDialogSheet::GetEnableSelection ( );
__declspec(implementation_key(5018)) void IDialogSheet::PutEnableSelection ( enum XlEnableSelection RHS );
__declspec(implementation_key(5019)) VARIANT_BOOL IDialogSheet::GetEnableOutlining ( long lcid );
__declspec(implementation_key(5020)) void IDialogSheet::PutEnableOutlining ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(5021)) VARIANT_BOOL IDialogSheet::GetEnablePivotTable ( long lcid );
__declspec(implementation_key(5022)) void IDialogSheet::PutEnablePivotTable ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(5023)) _variant_t IDialogSheet::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(5024)) _variant_t IDialogSheet::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(5025)) HRESULT IDialogSheet::ResetAllPageBreaks ( );
__declspec(implementation_key(5026)) IDispatchPtr IDialogSheet::GroupBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5027)) IDispatchPtr IDialogSheet::GroupObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5028)) IDispatchPtr IDialogSheet::Labels ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5029)) IDispatchPtr IDialogSheet::Lines ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5030)) IDispatchPtr IDialogSheet::ListBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5031)) NamesPtr IDialogSheet::GetNames ( );
__declspec(implementation_key(5032)) IDispatchPtr IDialogSheet::OLEObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5033)) IDispatchPtr IDialogSheet::OptionButtons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5034)) IDispatchPtr IDialogSheet::Ovals ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5035)) HRESULT IDialogSheet::Paste ( const _variant_t & Destination, const _variant_t & Link, long lcid );
__declspec(implementation_key(5036)) HRESULT IDialogSheet::_PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, long lcid );
__declspec(implementation_key(5037)) IDispatchPtr IDialogSheet::Pictures ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5038)) IDispatchPtr IDialogSheet::Rectangles ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5039)) _bstr_t IDialogSheet::GetScrollArea ( );
__declspec(implementation_key(5040)) void IDialogSheet::PutScrollArea ( _bstr_t RHS );
__declspec(implementation_key(5041)) IDispatchPtr IDialogSheet::ScrollBars ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5042)) IDispatchPtr IDialogSheet::Spinners ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5043)) IDispatchPtr IDialogSheet::TextBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(5044)) HPageBreaksPtr IDialogSheet::GetHPageBreaks ( );
__declspec(implementation_key(5045)) VPageBreaksPtr IDialogSheet::GetVPageBreaks ( );
__declspec(implementation_key(5046)) QueryTablesPtr IDialogSheet::GetQueryTables ( );
__declspec(implementation_key(5047)) VARIANT_BOOL IDialogSheet::GetDisplayPageBreaks ( );
__declspec(implementation_key(5048)) void IDialogSheet::PutDisplayPageBreaks ( VARIANT_BOOL RHS );
__declspec(implementation_key(5049)) CommentsPtr IDialogSheet::GetComments ( );
__declspec(implementation_key(5050)) HyperlinksPtr IDialogSheet::GetHyperlinks ( );
__declspec(implementation_key(5051)) HRESULT IDialogSheet::ClearCircles ( );
__declspec(implementation_key(5052)) HRESULT IDialogSheet::CircleInvalid ( );
__declspec(implementation_key(5053)) long IDialogSheet::Get_DisplayRightToLeft ( long lcid );
__declspec(implementation_key(5054)) void IDialogSheet::Put_DisplayRightToLeft ( long lcid, long RHS );
__declspec(implementation_key(5055)) AutoFilterPtr IDialogSheet::GetAutoFilter ( );
__declspec(implementation_key(5056)) VARIANT_BOOL IDialogSheet::GetDisplayRightToLeft ( long lcid );
__declspec(implementation_key(5057)) void IDialogSheet::PutDisplayRightToLeft ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(5058)) Office::ScriptsPtr IDialogSheet::GetScripts ( );
__declspec(implementation_key(5059)) HRESULT IDialogSheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(5060)) HRESULT IDialogSheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript, long lcid );
__declspec(implementation_key(5061)) TabPtr IDialogSheet::GetTab ( );
__declspec(implementation_key(5062)) Office::IMsoEnvelopeVBPtr IDialogSheet::GetMailEnvelope ( );
__declspec(implementation_key(5063)) HRESULT IDialogSheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local );
__declspec(implementation_key(5064)) CustomPropertiesPtr IDialogSheet::GetCustomProperties ( );
__declspec(implementation_key(5065)) SmartTagsPtr IDialogSheet::GetSmartTags ( );
__declspec(implementation_key(5066)) ProtectionPtr IDialogSheet::GetProtection ( );
__declspec(implementation_key(5067)) HRESULT IDialogSheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & NoHTMLFormatting, long lcid );
__declspec(implementation_key(5068)) HRESULT IDialogSheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, const _variant_t & AllowFormattingCells, const _variant_t & AllowFormattingColumns, const _variant_t & AllowFormattingRows, const _variant_t & AllowInsertingColumns, const _variant_t & AllowInsertingRows, const _variant_t & AllowInsertingHyperlinks, const _variant_t & AllowDeletingColumns, const _variant_t & AllowDeletingRows, const _variant_t & AllowSorting, const _variant_t & AllowFiltering, const _variant_t & AllowUsingPivotTables );
__declspec(implementation_key(5069)) _variant_t IDialogSheet::GetDefaultButton ( );
__declspec(implementation_key(5070)) void IDialogSheet::PutDefaultButton ( const _variant_t & RHS );
__declspec(implementation_key(5071)) DialogFramePtr IDialogSheet::GetDialogFrame ( );
__declspec(implementation_key(5072)) IDispatchPtr IDialogSheet::EditBoxes ( const _variant_t & Index );
__declspec(implementation_key(5073)) _variant_t IDialogSheet::GetFocus ( );
__declspec(implementation_key(5074)) void IDialogSheet::PutFocus ( const _variant_t & RHS );
__declspec(implementation_key(5075)) VARIANT_BOOL IDialogSheet::Hide ( const _variant_t & Cancel );
__declspec(implementation_key(5076)) VARIANT_BOOL IDialogSheet::Show ( );
__declspec(implementation_key(5077)) _ApplicationPtr IDialogSheets::GetApplication ( );
__declspec(implementation_key(5078)) enum XlCreator IDialogSheets::GetCreator ( );
__declspec(implementation_key(5079)) IDispatchPtr IDialogSheets::GetParent ( );
__declspec(implementation_key(5080)) DialogSheetPtr IDialogSheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(5081)) HRESULT IDialogSheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(5082)) long IDialogSheets::GetCount ( );
__declspec(implementation_key(5083)) HRESULT IDialogSheets::Delete ( long lcid );
__declspec(implementation_key(5084)) IDispatchPtr IDialogSheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(5085)) HRESULT IDialogSheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(5086)) IUnknownPtr IDialogSheets::Get_NewEnum ( );
__declspec(implementation_key(5087)) HRESULT IDialogSheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(5088)) HRESULT IDialogSheets::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(5089)) HRESULT IDialogSheets::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(5090)) HPageBreaksPtr IDialogSheets::GetHPageBreaks ( );
__declspec(implementation_key(5091)) VPageBreaksPtr IDialogSheets::GetVPageBreaks ( );
__declspec(implementation_key(5092)) _variant_t IDialogSheets::GetVisible ( long lcid );
__declspec(implementation_key(5093)) void IDialogSheets::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(5094)) IDispatchPtr IDialogSheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(5095)) HRESULT IDialogSheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(5096)) _ApplicationPtr IWorksheets::GetApplication ( );
__declspec(implementation_key(5097)) enum XlCreator IWorksheets::GetCreator ( );
__declspec(implementation_key(5098)) IDispatchPtr IWorksheets::GetParent ( );
__declspec(implementation_key(5099)) IDispatchPtr IWorksheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type, long lcid );
__declspec(implementation_key(5100)) HRESULT IWorksheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(5101)) long IWorksheets::GetCount ( );
__declspec(implementation_key(5102)) HRESULT IWorksheets::Delete ( long lcid );
__declspec(implementation_key(5103)) HRESULT IWorksheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type, long lcid );
__declspec(implementation_key(5104)) IDispatchPtr IWorksheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(5105)) HRESULT IWorksheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(5106)) IUnknownPtr IWorksheets::Get_NewEnum ( );
__declspec(implementation_key(5107)) HRESULT IWorksheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(5108)) HRESULT IWorksheets::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(5109)) HRESULT IWorksheets::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(5110)) HPageBreaksPtr IWorksheets::GetHPageBreaks ( );
__declspec(implementation_key(5111)) VPageBreaksPtr IWorksheets::GetVPageBreaks ( );
__declspec(implementation_key(5112)) _variant_t IWorksheets::GetVisible ( long lcid );
__declspec(implementation_key(5113)) void IWorksheets::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(5114)) IDispatchPtr IWorksheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(5115)) HRESULT IWorksheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(5116)) _ApplicationPtr IPageSetup::GetApplication ( );
__declspec(implementation_key(5117)) enum XlCreator IPageSetup::GetCreator ( );
__declspec(implementation_key(5118)) IDispatchPtr IPageSetup::GetParent ( );
__declspec(implementation_key(5119)) VARIANT_BOOL IPageSetup::GetBlackAndWhite ( );
__declspec(implementation_key(5120)) void IPageSetup::PutBlackAndWhite ( VARIANT_BOOL RHS );
__declspec(implementation_key(5121)) double IPageSetup::GetBottomMargin ( );
__declspec(implementation_key(5122)) void IPageSetup::PutBottomMargin ( double RHS );
__declspec(implementation_key(5123)) _bstr_t IPageSetup::GetCenterFooter ( );
__declspec(implementation_key(5124)) void IPageSetup::PutCenterFooter ( _bstr_t RHS );
__declspec(implementation_key(5125)) _bstr_t IPageSetup::GetCenterHeader ( );
__declspec(implementation_key(5126)) void IPageSetup::PutCenterHeader ( _bstr_t RHS );
__declspec(implementation_key(5127)) VARIANT_BOOL IPageSetup::GetCenterHorizontally ( );
__declspec(implementation_key(5128)) void IPageSetup::PutCenterHorizontally ( VARIANT_BOOL RHS );
__declspec(implementation_key(5129)) VARIANT_BOOL IPageSetup::GetCenterVertically ( );
__declspec(implementation_key(5130)) void IPageSetup::PutCenterVertically ( VARIANT_BOOL RHS );
__declspec(implementation_key(5131)) enum XlObjectSize IPageSetup::GetChartSize ( );
__declspec(implementation_key(5132)) void IPageSetup::PutChartSize ( enum XlObjectSize RHS );
__declspec(implementation_key(5133)) VARIANT_BOOL IPageSetup::GetDraft ( );
__declspec(implementation_key(5134)) void IPageSetup::PutDraft ( VARIANT_BOOL RHS );
__declspec(implementation_key(5135)) long IPageSetup::GetFirstPageNumber ( );
__declspec(implementation_key(5136)) void IPageSetup::PutFirstPageNumber ( long RHS );
__declspec(implementation_key(5137)) _variant_t IPageSetup::GetFitToPagesTall ( );
__declspec(implementation_key(5138)) void IPageSetup::PutFitToPagesTall ( const _variant_t & RHS );
__declspec(implementation_key(5139)) _variant_t IPageSetup::GetFitToPagesWide ( );
__declspec(implementation_key(5140)) void IPageSetup::PutFitToPagesWide ( const _variant_t & RHS );
__declspec(implementation_key(5141)) double IPageSetup::GetFooterMargin ( );
__declspec(implementation_key(5142)) void IPageSetup::PutFooterMargin ( double RHS );
__declspec(implementation_key(5143)) double IPageSetup::GetHeaderMargin ( );
__declspec(implementation_key(5144)) void IPageSetup::PutHeaderMargin ( double RHS );
__declspec(implementation_key(5145)) _bstr_t IPageSetup::GetLeftFooter ( );
__declspec(implementation_key(5146)) void IPageSetup::PutLeftFooter ( _bstr_t RHS );
__declspec(implementation_key(5147)) _bstr_t IPageSetup::GetLeftHeader ( );
__declspec(implementation_key(5148)) void IPageSetup::PutLeftHeader ( _bstr_t RHS );
__declspec(implementation_key(5149)) double IPageSetup::GetLeftMargin ( );
__declspec(implementation_key(5150)) void IPageSetup::PutLeftMargin ( double RHS );
__declspec(implementation_key(5151)) enum XlOrder IPageSetup::GetOrder ( );
__declspec(implementation_key(5152)) void IPageSetup::PutOrder ( enum XlOrder RHS );
__declspec(implementation_key(5153)) enum XlPageOrientation IPageSetup::GetOrientation ( );
__declspec(implementation_key(5154)) void IPageSetup::PutOrientation ( enum XlPageOrientation RHS );
__declspec(implementation_key(5155)) enum XlPaperSize IPageSetup::GetPaperSize ( );
__declspec(implementation_key(5156)) void IPageSetup::PutPaperSize ( enum XlPaperSize RHS );
__declspec(implementation_key(5157)) _bstr_t IPageSetup::GetPrintArea ( );
__declspec(implementation_key(5158)) void IPageSetup::PutPrintArea ( _bstr_t RHS );
__declspec(implementation_key(5159)) VARIANT_BOOL IPageSetup::GetPrintGridlines ( );
__declspec(implementation_key(5160)) void IPageSetup::PutPrintGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(5161)) VARIANT_BOOL IPageSetup::GetPrintHeadings ( );
__declspec(implementation_key(5162)) void IPageSetup::PutPrintHeadings ( VARIANT_BOOL RHS );
__declspec(implementation_key(5163)) VARIANT_BOOL IPageSetup::GetPrintNotes ( );
__declspec(implementation_key(5164)) void IPageSetup::PutPrintNotes ( VARIANT_BOOL RHS );
__declspec(implementation_key(5165)) _variant_t IPageSetup::GetPrintQuality ( const _variant_t & Index );
__declspec(implementation_key(5166)) void IPageSetup::PutPrintQuality ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(5167)) _bstr_t IPageSetup::GetPrintTitleColumns ( );
__declspec(implementation_key(5168)) void IPageSetup::PutPrintTitleColumns ( _bstr_t RHS );
__declspec(implementation_key(5169)) _bstr_t IPageSetup::GetPrintTitleRows ( );
__declspec(implementation_key(5170)) void IPageSetup::PutPrintTitleRows ( _bstr_t RHS );
__declspec(implementation_key(5171)) _bstr_t IPageSetup::GetRightFooter ( );
__declspec(implementation_key(5172)) void IPageSetup::PutRightFooter ( _bstr_t RHS );
__declspec(implementation_key(5173)) _bstr_t IPageSetup::GetRightHeader ( );
__declspec(implementation_key(5174)) void IPageSetup::PutRightHeader ( _bstr_t RHS );
__declspec(implementation_key(5175)) double IPageSetup::GetRightMargin ( );
__declspec(implementation_key(5176)) void IPageSetup::PutRightMargin ( double RHS );
__declspec(implementation_key(5177)) double IPageSetup::GetTopMargin ( );
__declspec(implementation_key(5178)) void IPageSetup::PutTopMargin ( double RHS );
__declspec(implementation_key(5179)) _variant_t IPageSetup::GetZoom ( );
__declspec(implementation_key(5180)) void IPageSetup::PutZoom ( const _variant_t & RHS );
__declspec(implementation_key(5181)) enum XlPrintLocation IPageSetup::GetPrintComments ( );
__declspec(implementation_key(5182)) void IPageSetup::PutPrintComments ( enum XlPrintLocation RHS );
__declspec(implementation_key(5183)) enum XlPrintErrors IPageSetup::GetPrintErrors ( );
__declspec(implementation_key(5184)) void IPageSetup::PutPrintErrors ( enum XlPrintErrors RHS );
__declspec(implementation_key(5185)) GraphicPtr IPageSetup::GetCenterHeaderPicture ( );
__declspec(implementation_key(5186)) GraphicPtr IPageSetup::GetCenterFooterPicture ( );
__declspec(implementation_key(5187)) GraphicPtr IPageSetup::GetLeftHeaderPicture ( );
__declspec(implementation_key(5188)) GraphicPtr IPageSetup::GetLeftFooterPicture ( );
__declspec(implementation_key(5189)) GraphicPtr IPageSetup::GetRightHeaderPicture ( );
__declspec(implementation_key(5190)) GraphicPtr IPageSetup::GetRightFooterPicture ( );
__declspec(implementation_key(5191)) _ApplicationPtr INames::GetApplication ( );
__declspec(implementation_key(5192)) enum XlCreator INames::GetCreator ( );
__declspec(implementation_key(5193)) IDispatchPtr INames::GetParent ( );
__declspec(implementation_key(5194)) NamePtr INames::Add ( const _variant_t & Name, const _variant_t & RefersTo, const _variant_t & Visible, const _variant_t & MacroType, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & NameLocal, const _variant_t & RefersToLocal, const _variant_t & CategoryLocal, const _variant_t & RefersToR1C1, const _variant_t & RefersToR1C1Local );
__declspec(implementation_key(5195)) NamePtr INames::Item ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo, long lcid );
__declspec(implementation_key(5196)) NamePtr INames::_Default ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo, long lcid );
__declspec(implementation_key(5197)) long INames::GetCount ( );
__declspec(implementation_key(5198)) IUnknownPtr INames::Get_NewEnum ( );
__declspec(implementation_key(5199)) _ApplicationPtr IName::GetApplication ( );
__declspec(implementation_key(5200)) enum XlCreator IName::GetCreator ( );
__declspec(implementation_key(5201)) IDispatchPtr IName::GetParent ( );
__declspec(implementation_key(5202)) _bstr_t IName::Get_Default ( );
__declspec(implementation_key(5203)) long IName::GetIndex ( );
__declspec(implementation_key(5204)) _bstr_t IName::GetCategory ( long lcidIn );
__declspec(implementation_key(5205)) void IName::PutCategory ( long lcidIn, _bstr_t RHS );
__declspec(implementation_key(5206)) _bstr_t IName::GetCategoryLocal ( );
__declspec(implementation_key(5207)) void IName::PutCategoryLocal ( _bstr_t RHS );
__declspec(implementation_key(5208)) HRESULT IName::Delete ( );
__declspec(implementation_key(5209)) enum XlXLMMacroType IName::GetMacroType ( );
__declspec(implementation_key(5210)) void IName::PutMacroType ( enum XlXLMMacroType RHS );
__declspec(implementation_key(5211)) _bstr_t IName::GetName ( long lcidIn );
__declspec(implementation_key(5212)) void IName::PutName ( long lcidIn, _bstr_t RHS );
__declspec(implementation_key(5213)) _variant_t IName::GetRefersTo ( long lcidIn );
__declspec(implementation_key(5214)) void IName::PutRefersTo ( long lcidIn, const _variant_t & RHS );
__declspec(implementation_key(5215)) _bstr_t IName::GetShortcutKey ( );
__declspec(implementation_key(5216)) void IName::PutShortcutKey ( _bstr_t RHS );
__declspec(implementation_key(5217)) _bstr_t IName::GetValue ( );
__declspec(implementation_key(5218)) void IName::PutValue ( _bstr_t RHS );
__declspec(implementation_key(5219)) VARIANT_BOOL IName::GetVisible ( );
__declspec(implementation_key(5220)) void IName::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(5221)) _bstr_t IName::GetNameLocal ( );
__declspec(implementation_key(5222)) void IName::PutNameLocal ( _bstr_t RHS );
__declspec(implementation_key(5223)) _variant_t IName::GetRefersToLocal ( );
__declspec(implementation_key(5224)) void IName::PutRefersToLocal ( const _variant_t & RHS );
__declspec(implementation_key(5225)) _variant_t IName::GetRefersToR1C1 ( long lcidIn );
__declspec(implementation_key(5226)) void IName::PutRefersToR1C1 ( long lcidIn, const _variant_t & RHS );
__declspec(implementation_key(5227)) _variant_t IName::GetRefersToR1C1Local ( );
__declspec(implementation_key(5228)) void IName::PutRefersToR1C1Local ( const _variant_t & RHS );
__declspec(implementation_key(5229)) RangePtr IName::GetRefersToRange ( );
__declspec(implementation_key(5230)) _ApplicationPtr IChartObject::GetApplication ( );
__declspec(implementation_key(5231)) enum XlCreator IChartObject::GetCreator ( );
__declspec(implementation_key(5232)) IDispatchPtr IChartObject::GetParent ( );
__declspec(implementation_key(5233)) RangePtr IChartObject::GetBottomRightCell ( );
__declspec(implementation_key(5234)) _variant_t IChartObject::BringToFront ( );
__declspec(implementation_key(5235)) _variant_t IChartObject::Copy ( );
__declspec(implementation_key(5236)) _variant_t IChartObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(5237)) _variant_t IChartObject::Cut ( );
__declspec(implementation_key(5238)) _variant_t IChartObject::Delete ( );
__declspec(implementation_key(5239)) IDispatchPtr IChartObject::Duplicate ( );
__declspec(implementation_key(5240)) VARIANT_BOOL IChartObject::GetEnabled ( );
__declspec(implementation_key(5241)) void IChartObject::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(5242)) double IChartObject::GetHeight ( );
__declspec(implementation_key(5243)) void IChartObject::PutHeight ( double RHS );
__declspec(implementation_key(5244)) long IChartObject::GetIndex ( );
__declspec(implementation_key(5245)) double IChartObject::GetLeft ( );
__declspec(implementation_key(5246)) void IChartObject::PutLeft ( double RHS );
__declspec(implementation_key(5247)) VARIANT_BOOL IChartObject::GetLocked ( );
__declspec(implementation_key(5248)) void IChartObject::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(5249)) _bstr_t IChartObject::GetName ( );
__declspec(implementation_key(5250)) void IChartObject::PutName ( _bstr_t RHS );
__declspec(implementation_key(5251)) _bstr_t IChartObject::GetOnAction ( );
__declspec(implementation_key(5252)) void IChartObject::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(5253)) _variant_t IChartObject::GetPlacement ( );
__declspec(implementation_key(5254)) void IChartObject::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(5255)) VARIANT_BOOL IChartObject::GetPrintObject ( );
__declspec(implementation_key(5256)) void IChartObject::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(5257)) _variant_t IChartObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(5258)) _variant_t IChartObject::SendToBack ( );
__declspec(implementation_key(5259)) double IChartObject::GetTop ( );
__declspec(implementation_key(5260)) void IChartObject::PutTop ( double RHS );
__declspec(implementation_key(5261)) RangePtr IChartObject::GetTopLeftCell ( );
__declspec(implementation_key(5262)) VARIANT_BOOL IChartObject::GetVisible ( );
__declspec(implementation_key(5263)) void IChartObject::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(5264)) double IChartObject::GetWidth ( );
__declspec(implementation_key(5265)) void IChartObject::PutWidth ( double RHS );
__declspec(implementation_key(5266)) long IChartObject::GetZOrder ( );
__declspec(implementation_key(5267)) ShapeRangePtr IChartObject::GetShapeRange ( );
__declspec(implementation_key(5268)) _variant_t IChartObject::Activate ( );
__declspec(implementation_key(5269)) _ChartPtr IChartObject::GetChart ( );
__declspec(implementation_key(5270)) VARIANT_BOOL IChartObject::GetProtectChartObject ( );
__declspec(implementation_key(5271)) void IChartObject::PutProtectChartObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(5272)) VARIANT_BOOL IChartObject::GetRoundedCorners ( );
__declspec(implementation_key(5273)) void IChartObject::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(5274)) BorderPtr IChartObject::GetBorder ( );
__declspec(implementation_key(5275)) InteriorPtr IChartObject::GetInterior ( );
__declspec(implementation_key(5276)) VARIANT_BOOL IChartObject::GetShadow ( );
__declspec(implementation_key(5277)) void IChartObject::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(5278)) _ApplicationPtr IChartObjects::GetApplication ( );
__declspec(implementation_key(5279)) enum XlCreator IChartObjects::GetCreator ( );
__declspec(implementation_key(5280)) IDispatchPtr IChartObjects::GetParent ( );
__declspec(implementation_key(5281)) _variant_t IChartObjects::BringToFront ( );
__declspec(implementation_key(5282)) _variant_t IChartObjects::Copy ( );
__declspec(implementation_key(5283)) _variant_t IChartObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(5284)) _variant_t IChartObjects::Cut ( );
__declspec(implementation_key(5285)) _variant_t IChartObjects::Delete ( );
__declspec(implementation_key(5286)) IDispatchPtr IChartObjects::Duplicate ( );
__declspec(implementation_key(5287)) VARIANT_BOOL IChartObjects::GetEnabled ( );
__declspec(implementation_key(5288)) void IChartObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(5289)) double IChartObjects::GetHeight ( );
__declspec(implementation_key(5290)) void IChartObjects::PutHeight ( double RHS );
__declspec(implementation_key(5291)) double IChartObjects::GetLeft ( );
__declspec(implementation_key(5292)) void IChartObjects::PutLeft ( double RHS );
__declspec(implementation_key(5293)) VARIANT_BOOL IChartObjects::GetLocked ( );
__declspec(implementation_key(5294)) void IChartObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(5295)) _bstr_t IChartObjects::GetOnAction ( );
__declspec(implementation_key(5296)) void IChartObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(5297)) _variant_t IChartObjects::GetPlacement ( );
__declspec(implementation_key(5298)) void IChartObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(5299)) VARIANT_BOOL IChartObjects::GetPrintObject ( );
__declspec(implementation_key(5300)) void IChartObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(5301)) _variant_t IChartObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(5302)) _variant_t IChartObjects::SendToBack ( );
__declspec(implementation_key(5303)) double IChartObjects::GetTop ( );
__declspec(implementation_key(5304)) void IChartObjects::PutTop ( double RHS );
__declspec(implementation_key(5305)) VARIANT_BOOL IChartObjects::GetVisible ( );
__declspec(implementation_key(5306)) void IChartObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(5307)) double IChartObjects::GetWidth ( );
__declspec(implementation_key(5308)) void IChartObjects::PutWidth ( double RHS );
__declspec(implementation_key(5309)) ShapeRangePtr IChartObjects::GetShapeRange ( );
__declspec(implementation_key(5310)) VARIANT_BOOL IChartObjects::GetRoundedCorners ( );
__declspec(implementation_key(5311)) void IChartObjects::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(5312)) BorderPtr IChartObjects::GetBorder ( );
__declspec(implementation_key(5313)) InteriorPtr IChartObjects::GetInterior ( );
__declspec(implementation_key(5314)) VARIANT_BOOL IChartObjects::GetShadow ( );
__declspec(implementation_key(5315)) void IChartObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(5316)) ChartObjectPtr IChartObjects::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(5317)) long IChartObjects::GetCount ( );
__declspec(implementation_key(5318)) GroupObjectPtr IChartObjects::Group ( );
__declspec(implementation_key(5319)) IDispatchPtr IChartObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(5320)) IUnknownPtr IChartObjects::_NewEnum ( );
__declspec(implementation_key(5321)) _ApplicationPtr IMailer::GetApplication ( );
__declspec(implementation_key(5322)) enum XlCreator IMailer::GetCreator ( );
__declspec(implementation_key(5323)) IDispatchPtr IMailer::GetParent ( );
__declspec(implementation_key(5324)) _variant_t IMailer::GetBCCRecipients ( );
__declspec(implementation_key(5325)) void IMailer::PutBCCRecipients ( const _variant_t & RHS );
__declspec(implementation_key(5326)) _variant_t IMailer::GetCCRecipients ( );
__declspec(implementation_key(5327)) void IMailer::PutCCRecipients ( const _variant_t & RHS );
__declspec(implementation_key(5328)) _variant_t IMailer::GetEnclosures ( );
__declspec(implementation_key(5329)) void IMailer::PutEnclosures ( const _variant_t & RHS );
__declspec(implementation_key(5330)) VARIANT_BOOL IMailer::GetReceived ( );
__declspec(implementation_key(5331)) DATE IMailer::GetSendDateTime ( );
__declspec(implementation_key(5332)) _bstr_t IMailer::GetSender ( );
__declspec(implementation_key(5333)) _bstr_t IMailer::GetSubject ( );
__declspec(implementation_key(5334)) void IMailer::PutSubject ( _bstr_t RHS );
__declspec(implementation_key(5335)) _variant_t IMailer::GetToRecipients ( );
__declspec(implementation_key(5336)) void IMailer::PutToRecipients ( const _variant_t & RHS );
__declspec(implementation_key(5337)) _variant_t IMailer::GetWhichAddress ( );
__declspec(implementation_key(5338)) void IMailer::PutWhichAddress ( const _variant_t & RHS );
__declspec(implementation_key(5339)) _ApplicationPtr ICustomViews::GetApplication ( );
__declspec(implementation_key(5340)) enum XlCreator ICustomViews::GetCreator ( );
__declspec(implementation_key(5341)) IDispatchPtr ICustomViews::GetParent ( );
__declspec(implementation_key(5342)) long ICustomViews::GetCount ( );
__declspec(implementation_key(5343)) CustomViewPtr ICustomViews::Item ( const _variant_t & ViewName );
__declspec(implementation_key(5344)) CustomViewPtr ICustomViews::Add ( _bstr_t ViewName, const _variant_t & PrintSettings, const _variant_t & RowColSettings );
__declspec(implementation_key(5345)) CustomViewPtr ICustomViews::Get_Default ( const _variant_t & ViewName );
__declspec(implementation_key(5346)) IUnknownPtr ICustomViews::Get_NewEnum ( );
__declspec(implementation_key(5347)) _ApplicationPtr ICustomView::GetApplication ( );
__declspec(implementation_key(5348)) enum XlCreator ICustomView::GetCreator ( );
__declspec(implementation_key(5349)) IDispatchPtr ICustomView::GetParent ( );
__declspec(implementation_key(5350)) _bstr_t ICustomView::GetName ( );
__declspec(implementation_key(5351)) VARIANT_BOOL ICustomView::GetPrintSettings ( );
__declspec(implementation_key(5352)) VARIANT_BOOL ICustomView::GetRowColSettings ( );
__declspec(implementation_key(5353)) HRESULT ICustomView::Show ( );
__declspec(implementation_key(5354)) HRESULT ICustomView::Delete ( );
__declspec(implementation_key(5355)) _ApplicationPtr IFormatConditions::GetApplication ( );
__declspec(implementation_key(5356)) enum XlCreator IFormatConditions::GetCreator ( );
__declspec(implementation_key(5357)) IDispatchPtr IFormatConditions::GetParent ( );
__declspec(implementation_key(5358)) long IFormatConditions::GetCount ( );
__declspec(implementation_key(5359)) FormatConditionPtr IFormatConditions::Item ( const _variant_t & Index );
__declspec(implementation_key(5360)) FormatConditionPtr IFormatConditions::Add ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(5361)) FormatConditionPtr IFormatConditions::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(5362)) IUnknownPtr IFormatConditions::Get_NewEnum ( );
__declspec(implementation_key(5363)) HRESULT IFormatConditions::Delete ( );
__declspec(implementation_key(5364)) _ApplicationPtr IFormatCondition::GetApplication ( );
__declspec(implementation_key(5365)) enum XlCreator IFormatCondition::GetCreator ( );
__declspec(implementation_key(5366)) IDispatchPtr IFormatCondition::GetParent ( );
__declspec(implementation_key(5367)) HRESULT IFormatCondition::Modify ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(5368)) long IFormatCondition::GetType ( );
__declspec(implementation_key(5369)) long IFormatCondition::GetOperator ( );
__declspec(implementation_key(5370)) _bstr_t IFormatCondition::GetFormula1 ( );
__declspec(implementation_key(5371)) _bstr_t IFormatCondition::GetFormula2 ( );
__declspec(implementation_key(5372)) InteriorPtr IFormatCondition::GetInterior ( );
__declspec(implementation_key(5373)) BordersPtr IFormatCondition::GetBorders ( );
__declspec(implementation_key(5374)) FontPtr IFormatCondition::GetFont ( );
__declspec(implementation_key(5375)) HRESULT IFormatCondition::Delete ( );
__declspec(implementation_key(5376)) _ApplicationPtr IComments::GetApplication ( );
__declspec(implementation_key(5377)) enum XlCreator IComments::GetCreator ( );
__declspec(implementation_key(5378)) IDispatchPtr IComments::GetParent ( );
__declspec(implementation_key(5379)) long IComments::GetCount ( );
__declspec(implementation_key(5380)) CommentPtr IComments::Item ( long Index );
__declspec(implementation_key(5381)) CommentPtr IComments::Get_Default ( long Index );
__declspec(implementation_key(5382)) IUnknownPtr IComments::Get_NewEnum ( );
__declspec(implementation_key(5383)) _ApplicationPtr IComment::GetApplication ( );
__declspec(implementation_key(5384)) enum XlCreator IComment::GetCreator ( );
__declspec(implementation_key(5385)) IDispatchPtr IComment::GetParent ( );
__declspec(implementation_key(5386)) _bstr_t IComment::GetAuthor ( );
__declspec(implementation_key(5387)) ShapePtr IComment::GetShape ( );
__declspec(implementation_key(5388)) VARIANT_BOOL IComment::GetVisible ( );
__declspec(implementation_key(5389)) void IComment::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(5390)) _bstr_t IComment::Text ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Overwrite );
__declspec(implementation_key(5391)) HRESULT IComment::Delete ( );
__declspec(implementation_key(5392)) CommentPtr IComment::Next ( );
__declspec(implementation_key(5393)) CommentPtr IComment::Previous ( );
__declspec(implementation_key(5394)) HRESULT IRefreshEvents::BeforeRefresh ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(5395)) HRESULT IRefreshEvents::AfterRefresh ( VARIANT_BOOL Success );
__declspec(implementation_key(5396)) _ApplicationPtr _IQueryTable::GetApplication ( );
__declspec(implementation_key(5397)) enum XlCreator _IQueryTable::GetCreator ( );
__declspec(implementation_key(5398)) IDispatchPtr _IQueryTable::GetParent ( );
__declspec(implementation_key(5399)) _bstr_t _IQueryTable::GetName ( );
__declspec(implementation_key(5400)) void _IQueryTable::PutName ( _bstr_t RHS );
__declspec(implementation_key(5401)) VARIANT_BOOL _IQueryTable::GetFieldNames ( );
__declspec(implementation_key(5402)) void _IQueryTable::PutFieldNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(5403)) VARIANT_BOOL _IQueryTable::GetRowNumbers ( );
__declspec(implementation_key(5404)) void _IQueryTable::PutRowNumbers ( VARIANT_BOOL RHS );
__declspec(implementation_key(5405)) VARIANT_BOOL _IQueryTable::GetFillAdjacentFormulas ( );
__declspec(implementation_key(5406)) void _IQueryTable::PutFillAdjacentFormulas ( VARIANT_BOOL RHS );
__declspec(implementation_key(5407)) VARIANT_BOOL _IQueryTable::GetHasAutoFormat ( );
__declspec(implementation_key(5408)) void _IQueryTable::PutHasAutoFormat ( VARIANT_BOOL RHS );
__declspec(implementation_key(5409)) VARIANT_BOOL _IQueryTable::GetRefreshOnFileOpen ( );
__declspec(implementation_key(5410)) void _IQueryTable::PutRefreshOnFileOpen ( VARIANT_BOOL RHS );
__declspec(implementation_key(5411)) VARIANT_BOOL _IQueryTable::GetRefreshing ( );
__declspec(implementation_key(5412)) VARIANT_BOOL _IQueryTable::GetFetchedRowOverflow ( );
__declspec(implementation_key(5413)) VARIANT_BOOL _IQueryTable::GetBackgroundQuery ( );
__declspec(implementation_key(5414)) void _IQueryTable::PutBackgroundQuery ( VARIANT_BOOL RHS );
__declspec(implementation_key(5415)) HRESULT _IQueryTable::CancelRefresh ( );
__declspec(implementation_key(5416)) enum XlCellInsertionMode _IQueryTable::GetRefreshStyle ( );
__declspec(implementation_key(5417)) void _IQueryTable::PutRefreshStyle ( enum XlCellInsertionMode RHS );
__declspec(implementation_key(5418)) VARIANT_BOOL _IQueryTable::GetEnableRefresh ( );
__declspec(implementation_key(5419)) void _IQueryTable::PutEnableRefresh ( VARIANT_BOOL RHS );
__declspec(implementation_key(5420)) VARIANT_BOOL _IQueryTable::GetSavePassword ( );
__declspec(implementation_key(5421)) void _IQueryTable::PutSavePassword ( VARIANT_BOOL RHS );
__declspec(implementation_key(5422)) RangePtr _IQueryTable::GetDestination ( );
__declspec(implementation_key(5423)) _variant_t _IQueryTable::GetConnection ( );
__declspec(implementation_key(5424)) void _IQueryTable::PutConnection ( const _variant_t & RHS );
__declspec(implementation_key(5425)) _variant_t _IQueryTable::GetSql ( );
__declspec(implementation_key(5426)) void _IQueryTable::PutSql ( const _variant_t & RHS );
__declspec(implementation_key(5427)) _bstr_t _IQueryTable::GetPostText ( );
__declspec(implementation_key(5428)) void _IQueryTable::PutPostText ( _bstr_t RHS );
__declspec(implementation_key(5429)) RangePtr _IQueryTable::GetResultRange ( );
__declspec(implementation_key(5430)) HRESULT _IQueryTable::Delete ( );
__declspec(implementation_key(5431)) VARIANT_BOOL _IQueryTable::Refresh ( const _variant_t & BackgroundQuery );
__declspec(implementation_key(5432)) ParametersPtr _IQueryTable::GetParameters ( );
__declspec(implementation_key(5433)) IDispatchPtr _IQueryTable::GetRecordset ( );
__declspec(implementation_key(5434)) void _IQueryTable::PutRefRecordset ( IDispatch * RHS );
__declspec(implementation_key(5435)) VARIANT_BOOL _IQueryTable::GetSaveData ( );
__declspec(implementation_key(5436)) void _IQueryTable::PutSaveData ( VARIANT_BOOL RHS );
__declspec(implementation_key(5437)) VARIANT_BOOL _IQueryTable::GetTablesOnlyFromHTML ( );
__declspec(implementation_key(5438)) void _IQueryTable::PutTablesOnlyFromHTML ( VARIANT_BOOL RHS );
__declspec(implementation_key(5439)) VARIANT_BOOL _IQueryTable::GetEnableEditing ( );
__declspec(implementation_key(5440)) void _IQueryTable::PutEnableEditing ( VARIANT_BOOL RHS );
__declspec(implementation_key(5441)) long _IQueryTable::GetTextFilePlatform ( );
__declspec(implementation_key(5442)) void _IQueryTable::PutTextFilePlatform ( long RHS );
__declspec(implementation_key(5443)) long _IQueryTable::GetTextFileStartRow ( );
__declspec(implementation_key(5444)) void _IQueryTable::PutTextFileStartRow ( long RHS );
__declspec(implementation_key(5445)) enum XlTextParsingType _IQueryTable::GetTextFileParseType ( );
__declspec(implementation_key(5446)) void _IQueryTable::PutTextFileParseType ( enum XlTextParsingType RHS );
__declspec(implementation_key(5447)) enum XlTextQualifier _IQueryTable::GetTextFileTextQualifier ( );
__declspec(implementation_key(5448)) void _IQueryTable::PutTextFileTextQualifier ( enum XlTextQualifier RHS );
__declspec(implementation_key(5449)) VARIANT_BOOL _IQueryTable::GetTextFileConsecutiveDelimiter ( );
__declspec(implementation_key(5450)) void _IQueryTable::PutTextFileConsecutiveDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(5451)) VARIANT_BOOL _IQueryTable::GetTextFileTabDelimiter ( );
__declspec(implementation_key(5452)) void _IQueryTable::PutTextFileTabDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(5453)) VARIANT_BOOL _IQueryTable::GetTextFileSemicolonDelimiter ( );
__declspec(implementation_key(5454)) void _IQueryTable::PutTextFileSemicolonDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(5455)) VARIANT_BOOL _IQueryTable::GetTextFileCommaDelimiter ( );
__declspec(implementation_key(5456)) void _IQueryTable::PutTextFileCommaDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(5457)) VARIANT_BOOL _IQueryTable::GetTextFileSpaceDelimiter ( );
__declspec(implementation_key(5458)) void _IQueryTable::PutTextFileSpaceDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(5459)) _bstr_t _IQueryTable::GetTextFileOtherDelimiter ( );
__declspec(implementation_key(5460)) void _IQueryTable::PutTextFileOtherDelimiter ( _bstr_t RHS );
__declspec(implementation_key(5461)) _variant_t _IQueryTable::GetTextFileColumnDataTypes ( );
__declspec(implementation_key(5462)) void _IQueryTable::PutTextFileColumnDataTypes ( const _variant_t & RHS );
__declspec(implementation_key(5463)) _variant_t _IQueryTable::GetTextFileFixedColumnWidths ( );
__declspec(implementation_key(5464)) void _IQueryTable::PutTextFileFixedColumnWidths ( const _variant_t & RHS );
__declspec(implementation_key(5465)) VARIANT_BOOL _IQueryTable::GetPreserveColumnInfo ( );
__declspec(implementation_key(5466)) void _IQueryTable::PutPreserveColumnInfo ( VARIANT_BOOL RHS );
__declspec(implementation_key(5467)) VARIANT_BOOL _IQueryTable::GetPreserveFormatting ( );
__declspec(implementation_key(5468)) void _IQueryTable::PutPreserveFormatting ( VARIANT_BOOL RHS );
__declspec(implementation_key(5469)) VARIANT_BOOL _IQueryTable::GetAdjustColumnWidth ( );
__declspec(implementation_key(5470)) void _IQueryTable::PutAdjustColumnWidth ( VARIANT_BOOL RHS );
__declspec(implementation_key(5471)) _variant_t _IQueryTable::GetCommandText ( );
__declspec(implementation_key(5472)) void _IQueryTable::PutCommandText ( const _variant_t & RHS );
__declspec(implementation_key(5473)) enum XlCmdType _IQueryTable::GetCommandType ( );
__declspec(implementation_key(5474)) void _IQueryTable::PutCommandType ( enum XlCmdType RHS );
__declspec(implementation_key(5475)) VARIANT_BOOL _IQueryTable::GetTextFilePromptOnRefresh ( );
__declspec(implementation_key(5476)) void _IQueryTable::PutTextFilePromptOnRefresh ( VARIANT_BOOL RHS );
__declspec(implementation_key(5477)) enum XlQueryType _IQueryTable::GetQueryType ( );
__declspec(implementation_key(5478)) VARIANT_BOOL _IQueryTable::GetMaintainConnection ( );
__declspec(implementation_key(5479)) void _IQueryTable::PutMaintainConnection ( VARIANT_BOOL RHS );
__declspec(implementation_key(5480)) _bstr_t _IQueryTable::GetTextFileDecimalSeparator ( );
__declspec(implementation_key(5481)) void _IQueryTable::PutTextFileDecimalSeparator ( _bstr_t RHS );
__declspec(implementation_key(5482)) _bstr_t _IQueryTable::GetTextFileThousandsSeparator ( );
__declspec(implementation_key(5483)) void _IQueryTable::PutTextFileThousandsSeparator ( _bstr_t RHS );
__declspec(implementation_key(5484)) long _IQueryTable::GetRefreshPeriod ( );
__declspec(implementation_key(5485)) void _IQueryTable::PutRefreshPeriod ( long RHS );
__declspec(implementation_key(5486)) HRESULT _IQueryTable::ResetTimer ( );
__declspec(implementation_key(5487)) enum XlWebSelectionType _IQueryTable::GetWebSelectionType ( );
__declspec(implementation_key(5488)) void _IQueryTable::PutWebSelectionType ( enum XlWebSelectionType RHS );
__declspec(implementation_key(5489)) enum XlWebFormatting _IQueryTable::GetWebFormatting ( );
__declspec(implementation_key(5490)) void _IQueryTable::PutWebFormatting ( enum XlWebFormatting RHS );
__declspec(implementation_key(5491)) _bstr_t _IQueryTable::GetWebTables ( );
__declspec(implementation_key(5492)) void _IQueryTable::PutWebTables ( _bstr_t RHS );
__declspec(implementation_key(5493)) VARIANT_BOOL _IQueryTable::GetWebPreFormattedTextToColumns ( );
__declspec(implementation_key(5494)) void _IQueryTable::PutWebPreFormattedTextToColumns ( VARIANT_BOOL RHS );
__declspec(implementation_key(5495)) VARIANT_BOOL _IQueryTable::GetWebSingleBlockTextImport ( );
__declspec(implementation_key(5496)) void _IQueryTable::PutWebSingleBlockTextImport ( VARIANT_BOOL RHS );
__declspec(implementation_key(5497)) VARIANT_BOOL _IQueryTable::GetWebDisableDateRecognition ( );
__declspec(implementation_key(5498)) void _IQueryTable::PutWebDisableDateRecognition ( VARIANT_BOOL RHS );
__declspec(implementation_key(5499)) VARIANT_BOOL _IQueryTable::GetWebConsecutiveDelimitersAsOne ( );
__declspec(implementation_key(5500)) void _IQueryTable::PutWebConsecutiveDelimitersAsOne ( VARIANT_BOOL RHS );
__declspec(implementation_key(5501)) VARIANT_BOOL _IQueryTable::GetWebDisableRedirections ( );
__declspec(implementation_key(5502)) void _IQueryTable::PutWebDisableRedirections ( VARIANT_BOOL RHS );
__declspec(implementation_key(5503)) _variant_t _IQueryTable::GetEditWebPage ( );
__declspec(implementation_key(5504)) void _IQueryTable::PutEditWebPage ( const _variant_t & RHS );
__declspec(implementation_key(5505)) _bstr_t _IQueryTable::GetSourceConnectionFile ( );
__declspec(implementation_key(5506)) void _IQueryTable::PutSourceConnectionFile ( _bstr_t RHS );
__declspec(implementation_key(5507)) _bstr_t _IQueryTable::GetSourceDataFile ( );
__declspec(implementation_key(5508)) void _IQueryTable::PutSourceDataFile ( _bstr_t RHS );
__declspec(implementation_key(5509)) enum XlRobustConnect _IQueryTable::GetRobustConnect ( );
__declspec(implementation_key(5510)) void _IQueryTable::PutRobustConnect ( enum XlRobustConnect RHS );
__declspec(implementation_key(5511)) VARIANT_BOOL _IQueryTable::GetTextFileTrailingMinusNumbers ( );
__declspec(implementation_key(5512)) void _IQueryTable::PutTextFileTrailingMinusNumbers ( VARIANT_BOOL RHS );
__declspec(implementation_key(5513)) HRESULT _IQueryTable::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords );
__declspec(implementation_key(5514)) _ApplicationPtr IQueryTables::GetApplication ( );
__declspec(implementation_key(5515)) enum XlCreator IQueryTables::GetCreator ( );
__declspec(implementation_key(5516)) IDispatchPtr IQueryTables::GetParent ( );
__declspec(implementation_key(5517)) long IQueryTables::GetCount ( );
__declspec(implementation_key(5518)) _QueryTablePtr IQueryTables::Add ( const _variant_t & Connection, struct Range * Destination, const _variant_t & Sql );
__declspec(implementation_key(5519)) _QueryTablePtr IQueryTables::Item ( const _variant_t & Index );
__declspec(implementation_key(5520)) _QueryTablePtr IQueryTables::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(5521)) IUnknownPtr IQueryTables::_NewEnum ( );
__declspec(implementation_key(5522)) _ApplicationPtr IParameter::GetApplication ( );
__declspec(implementation_key(5523)) enum XlCreator IParameter::GetCreator ( );
__declspec(implementation_key(5524)) IDispatchPtr IParameter::GetParent ( );
__declspec(implementation_key(5525)) enum XlParameterDataType IParameter::GetDataType ( );
__declspec(implementation_key(5526)) void IParameter::PutDataType ( enum XlParameterDataType RHS );
__declspec(implementation_key(5527)) enum XlParameterType IParameter::GetType ( );
__declspec(implementation_key(5528)) _bstr_t IParameter::GetPromptString ( );
__declspec(implementation_key(5529)) _variant_t IParameter::GetValue ( );
__declspec(implementation_key(5530)) RangePtr IParameter::GetSourceRange ( );
__declspec(implementation_key(5531)) _bstr_t IParameter::GetName ( );
__declspec(implementation_key(5532)) void IParameter::PutName ( _bstr_t RHS );
__declspec(implementation_key(5533)) HRESULT IParameter::SetParam ( enum XlParameterType Type, const _variant_t & Value );
__declspec(implementation_key(5534)) VARIANT_BOOL IParameter::GetRefreshOnChange ( );
__declspec(implementation_key(5535)) void IParameter::PutRefreshOnChange ( VARIANT_BOOL RHS );
__declspec(implementation_key(5536)) _ApplicationPtr IParameters::GetApplication ( );
__declspec(implementation_key(5537)) enum XlCreator IParameters::GetCreator ( );
__declspec(implementation_key(5538)) IDispatchPtr IParameters::GetParent ( );
__declspec(implementation_key(5539)) ParameterPtr IParameters::Add ( _bstr_t Name, const _variant_t & iDataType );
__declspec(implementation_key(5540)) long IParameters::GetCount ( );
__declspec(implementation_key(5541)) ParameterPtr IParameters::Item ( const _variant_t & Index );
__declspec(implementation_key(5542)) ParameterPtr IParameters::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(5543)) HRESULT IParameters::Delete ( );
__declspec(implementation_key(5544)) IUnknownPtr IParameters::_NewEnum ( );
__declspec(implementation_key(5545)) _ApplicationPtr IODBCError::GetApplication ( );
__declspec(implementation_key(5546)) enum XlCreator IODBCError::GetCreator ( );
__declspec(implementation_key(5547)) IDispatchPtr IODBCError::GetParent ( );
__declspec(implementation_key(5548)) _bstr_t IODBCError::GetSqlState ( );
__declspec(implementation_key(5549)) _bstr_t IODBCError::GetErrorString ( );
__declspec(implementation_key(5550)) _ApplicationPtr IODBCErrors::GetApplication ( );
__declspec(implementation_key(5551)) enum XlCreator IODBCErrors::GetCreator ( );
__declspec(implementation_key(5552)) IDispatchPtr IODBCErrors::GetParent ( );
__declspec(implementation_key(5553)) long IODBCErrors::GetCount ( );
__declspec(implementation_key(5554)) ODBCErrorPtr IODBCErrors::Item ( long Index );
__declspec(implementation_key(5555)) ODBCErrorPtr IODBCErrors::Get_Default ( long Index );
__declspec(implementation_key(5556)) IUnknownPtr IODBCErrors::_NewEnum ( );
__declspec(implementation_key(5557)) _ApplicationPtr IValidation::GetApplication ( );
__declspec(implementation_key(5558)) enum XlCreator IValidation::GetCreator ( );
__declspec(implementation_key(5559)) IDispatchPtr IValidation::GetParent ( );
__declspec(implementation_key(5560)) HRESULT IValidation::Add ( enum XlDVType Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(5561)) long IValidation::GetAlertStyle ( );
__declspec(implementation_key(5562)) VARIANT_BOOL IValidation::GetIgnoreBlank ( );
__declspec(implementation_key(5563)) void IValidation::PutIgnoreBlank ( VARIANT_BOOL RHS );
__declspec(implementation_key(5564)) long IValidation::GetIMEMode ( );
__declspec(implementation_key(5565)) void IValidation::PutIMEMode ( long RHS );
__declspec(implementation_key(5566)) VARIANT_BOOL IValidation::GetInCellDropdown ( );
__declspec(implementation_key(5567)) void IValidation::PutInCellDropdown ( VARIANT_BOOL RHS );
__declspec(implementation_key(5568)) HRESULT IValidation::Delete ( );
__declspec(implementation_key(5569)) _bstr_t IValidation::GetErrorMessage ( );
__declspec(implementation_key(5570)) void IValidation::PutErrorMessage ( _bstr_t RHS );
__declspec(implementation_key(5571)) _bstr_t IValidation::GetErrorTitle ( );
__declspec(implementation_key(5572)) void IValidation::PutErrorTitle ( _bstr_t RHS );
__declspec(implementation_key(5573)) _bstr_t IValidation::GetInputMessage ( );
__declspec(implementation_key(5574)) void IValidation::PutInputMessage ( _bstr_t RHS );
__declspec(implementation_key(5575)) _bstr_t IValidation::GetInputTitle ( );
__declspec(implementation_key(5576)) void IValidation::PutInputTitle ( _bstr_t RHS );
__declspec(implementation_key(5577)) _bstr_t IValidation::GetFormula1 ( );
__declspec(implementation_key(5578)) _bstr_t IValidation::GetFormula2 ( );
__declspec(implementation_key(5579)) HRESULT IValidation::Modify ( const _variant_t & Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(5580)) long IValidation::GetOperator ( );
__declspec(implementation_key(5581)) VARIANT_BOOL IValidation::GetShowError ( );
__declspec(implementation_key(5582)) void IValidation::PutShowError ( VARIANT_BOOL RHS );
__declspec(implementation_key(5583)) VARIANT_BOOL IValidation::GetShowInput ( );
__declspec(implementation_key(5584)) void IValidation::PutShowInput ( VARIANT_BOOL RHS );
__declspec(implementation_key(5585)) long IValidation::GetType ( );
__declspec(implementation_key(5586)) VARIANT_BOOL IValidation::GetValue ( );
__declspec(implementation_key(5587)) _ApplicationPtr IHyperlinks::GetApplication ( );
__declspec(implementation_key(5588)) enum XlCreator IHyperlinks::GetCreator ( );
__declspec(implementation_key(5589)) IDispatchPtr IHyperlinks::GetParent ( );
__declspec(implementation_key(5590)) IDispatchPtr IHyperlinks::Add ( IDispatch * Anchor, _bstr_t Address, const _variant_t & SubAddress, const _variant_t & ScreenTip, const _variant_t & TextToDisplay );
__declspec(implementation_key(5591)) long IHyperlinks::GetCount ( );
__declspec(implementation_key(5592)) HyperlinkPtr IHyperlinks::GetItem ( const _variant_t & Index );
__declspec(implementation_key(5593)) HyperlinkPtr IHyperlinks::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(5594)) IUnknownPtr IHyperlinks::Get_NewEnum ( );
__declspec(implementation_key(5595)) HRESULT IHyperlinks::Delete ( );
__declspec(implementation_key(5596)) _ApplicationPtr IHyperlink::GetApplication ( );
__declspec(implementation_key(5597)) enum XlCreator IHyperlink::GetCreator ( );
__declspec(implementation_key(5598)) IDispatchPtr IHyperlink::GetParent ( );
__declspec(implementation_key(5599)) _bstr_t IHyperlink::GetName ( );
__declspec(implementation_key(5600)) RangePtr IHyperlink::GetRange ( );
__declspec(implementation_key(5601)) ShapePtr IHyperlink::GetShape ( );
__declspec(implementation_key(5602)) _bstr_t IHyperlink::GetSubAddress ( );
__declspec(implementation_key(5603)) void IHyperlink::PutSubAddress ( _bstr_t RHS );
__declspec(implementation_key(5604)) _bstr_t IHyperlink::GetAddress ( );
__declspec(implementation_key(5605)) void IHyperlink::PutAddress ( _bstr_t RHS );
__declspec(implementation_key(5606)) long IHyperlink::GetType ( );
__declspec(implementation_key(5607)) HRESULT IHyperlink::AddToFavorites ( );
__declspec(implementation_key(5608)) HRESULT IHyperlink::Delete ( );
__declspec(implementation_key(5609)) HRESULT IHyperlink::Follow ( const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo );
__declspec(implementation_key(5610)) _bstr_t IHyperlink::GetEmailSubject ( );
__declspec(implementation_key(5611)) void IHyperlink::PutEmailSubject ( _bstr_t RHS );
__declspec(implementation_key(5612)) _bstr_t IHyperlink::GetScreenTip ( );
__declspec(implementation_key(5613)) void IHyperlink::PutScreenTip ( _bstr_t RHS );
__declspec(implementation_key(5614)) _bstr_t IHyperlink::GetTextToDisplay ( );
__declspec(implementation_key(5615)) void IHyperlink::PutTextToDisplay ( _bstr_t RHS );
__declspec(implementation_key(5616)) HRESULT IHyperlink::CreateNewDocument ( _bstr_t Filename, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite );
__declspec(implementation_key(5617)) _ApplicationPtr IAutoFilter::GetApplication ( );
__declspec(implementation_key(5618)) enum XlCreator IAutoFilter::GetCreator ( );
__declspec(implementation_key(5619)) IDispatchPtr IAutoFilter::GetParent ( );
__declspec(implementation_key(5620)) RangePtr IAutoFilter::GetRange ( );
__declspec(implementation_key(5621)) FiltersPtr IAutoFilter::GetFilters ( );
__declspec(implementation_key(5622)) _ApplicationPtr IFilters::GetApplication ( );
__declspec(implementation_key(5623)) enum XlCreator IFilters::GetCreator ( );
__declspec(implementation_key(5624)) IDispatchPtr IFilters::GetParent ( );
__declspec(implementation_key(5625)) long IFilters::GetCount ( );
__declspec(implementation_key(5626)) FilterPtr IFilters::Get_Default ( long Index );
__declspec(implementation_key(5627)) FilterPtr IFilters::GetItem ( long Index );
__declspec(implementation_key(5628)) IUnknownPtr IFilters::Get_NewEnum ( );
__declspec(implementation_key(5629)) _ApplicationPtr IFilter::GetApplication ( );
__declspec(implementation_key(5630)) enum XlCreator IFilter::GetCreator ( );
__declspec(implementation_key(5631)) IDispatchPtr IFilter::GetParent ( );
__declspec(implementation_key(5632)) VARIANT_BOOL IFilter::GetOn ( );
__declspec(implementation_key(5633)) _variant_t IFilter::GetCriteria1 ( );
__declspec(implementation_key(5634)) enum XlAutoFilterOperator IFilter::GetOperator ( );
__declspec(implementation_key(5635)) _variant_t IFilter::GetCriteria2 ( );
__declspec(implementation_key(5636)) _ApplicationPtr IAutoCorrect::GetApplication ( );
__declspec(implementation_key(5637)) enum XlCreator IAutoCorrect::GetCreator ( );
__declspec(implementation_key(5638)) IDispatchPtr IAutoCorrect::GetParent ( );
__declspec(implementation_key(5639)) _variant_t IAutoCorrect::AddReplacement ( _bstr_t What, _bstr_t Replacement );
__declspec(implementation_key(5640)) VARIANT_BOOL IAutoCorrect::GetCapitalizeNamesOfDays ( );
__declspec(implementation_key(5641)) void IAutoCorrect::PutCapitalizeNamesOfDays ( VARIANT_BOOL RHS );
__declspec(implementation_key(5642)) _variant_t IAutoCorrect::DeleteReplacement ( _bstr_t What );
__declspec(implementation_key(5643)) _variant_t IAutoCorrect::GetReplacementList ( const _variant_t & Index );
__declspec(implementation_key(5644)) void IAutoCorrect::PutReplacementList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(5645)) VARIANT_BOOL IAutoCorrect::GetJOEReplaceText ( );
__declspec(implementation_key(5646)) void IAutoCorrect::PutJOEReplaceText ( VARIANT_BOOL RHS );
__declspec(implementation_key(5647)) VARIANT_BOOL IAutoCorrect::GetTwoInitialCapitals ( );
__declspec(implementation_key(5648)) void IAutoCorrect::PutTwoInitialCapitals ( VARIANT_BOOL RHS );
__declspec(implementation_key(5649)) VARIANT_BOOL IAutoCorrect::GetCorrectSentenceCap ( );
__declspec(implementation_key(5650)) void IAutoCorrect::PutCorrectSentenceCap ( VARIANT_BOOL RHS );
__declspec(implementation_key(5651)) VARIANT_BOOL IAutoCorrect::GetCorrectCapsLock ( );
__declspec(implementation_key(5652)) void IAutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL RHS );
__declspec(implementation_key(5653)) VARIANT_BOOL IAutoCorrect::GetDisplayAutoCorrectOptions ( );
__declspec(implementation_key(5654)) void IAutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL RHS );
__declspec(implementation_key(5655)) _ApplicationPtr IBorder::GetApplication ( );
__declspec(implementation_key(5656)) enum XlCreator IBorder::GetCreator ( );
__declspec(implementation_key(5657)) IDispatchPtr IBorder::GetParent ( );
__declspec(implementation_key(5658)) _variant_t IBorder::GetColor ( );
__declspec(implementation_key(5659)) void IBorder::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(5660)) _variant_t IBorder::GetColorIndex ( );
__declspec(implementation_key(5661)) void IBorder::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(5662)) _variant_t IBorder::GetLineStyle ( );
__declspec(implementation_key(5663)) void IBorder::PutLineStyle ( const _variant_t & RHS );
__declspec(implementation_key(5664)) _variant_t IBorder::GetWeight ( );
__declspec(implementation_key(5665)) void IBorder::PutWeight ( const _variant_t & RHS );
__declspec(implementation_key(5666)) _ApplicationPtr IInterior::GetApplication ( );
__declspec(implementation_key(5667)) enum XlCreator IInterior::GetCreator ( );
__declspec(implementation_key(5668)) IDispatchPtr IInterior::GetParent ( );
__declspec(implementation_key(5669)) _variant_t IInterior::GetColor ( );
__declspec(implementation_key(5670)) void IInterior::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(5671)) _variant_t IInterior::GetColorIndex ( );
__declspec(implementation_key(5672)) void IInterior::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(5673)) _variant_t IInterior::GetInvertIfNegative ( );
__declspec(implementation_key(5674)) void IInterior::PutInvertIfNegative ( const _variant_t & RHS );
__declspec(implementation_key(5675)) _variant_t IInterior::GetPattern ( );
__declspec(implementation_key(5676)) void IInterior::PutPattern ( const _variant_t & RHS );
__declspec(implementation_key(5677)) _variant_t IInterior::GetPatternColor ( );
__declspec(implementation_key(5678)) void IInterior::PutPatternColor ( const _variant_t & RHS );
__declspec(implementation_key(5679)) _variant_t IInterior::GetPatternColorIndex ( );
__declspec(implementation_key(5680)) void IInterior::PutPatternColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(5681)) _ApplicationPtr IChartFillFormat::GetApplication ( );
__declspec(implementation_key(5682)) enum XlCreator IChartFillFormat::GetCreator ( );
__declspec(implementation_key(5683)) IDispatchPtr IChartFillFormat::GetParent ( );
__declspec(implementation_key(5684)) HRESULT IChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree );
__declspec(implementation_key(5685)) HRESULT IChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant );
__declspec(implementation_key(5686)) HRESULT IChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(5687)) HRESULT IChartFillFormat::Solid ( );
__declspec(implementation_key(5688)) HRESULT IChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(5689)) HRESULT IChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement );
__declspec(implementation_key(5690)) HRESULT IChartFillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(5691)) HRESULT IChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(5692)) ChartColorFormatPtr IChartFillFormat::GetBackColor ( );
__declspec(implementation_key(5693)) ChartColorFormatPtr IChartFillFormat::GetForeColor ( );
__declspec(implementation_key(5694)) enum Office::MsoGradientColorType IChartFillFormat::GetGradientColorType ( );
__declspec(implementation_key(5695)) float IChartFillFormat::GetGradientDegree ( );
__declspec(implementation_key(5696)) enum Office::MsoGradientStyle IChartFillFormat::GetGradientStyle ( );
__declspec(implementation_key(5697)) long IChartFillFormat::GetGradientVariant ( );
__declspec(implementation_key(5698)) enum Office::MsoPatternType IChartFillFormat::GetPattern ( );
__declspec(implementation_key(5699)) enum Office::MsoPresetGradientType IChartFillFormat::GetPresetGradientType ( );
__declspec(implementation_key(5700)) enum Office::MsoPresetTexture IChartFillFormat::GetPresetTexture ( );
__declspec(implementation_key(5701)) _bstr_t IChartFillFormat::GetTextureName ( );
__declspec(implementation_key(5702)) enum Office::MsoTextureType IChartFillFormat::GetTextureType ( );
__declspec(implementation_key(5703)) enum Office::MsoFillType IChartFillFormat::GetType ( );
__declspec(implementation_key(5704)) enum Office::MsoTriState IChartFillFormat::GetVisible ( );
__declspec(implementation_key(5705)) void IChartFillFormat::PutVisible ( enum Office::MsoTriState RHS );
__declspec(implementation_key(5706)) _ApplicationPtr IChartColorFormat::GetApplication ( );
__declspec(implementation_key(5707)) enum XlCreator IChartColorFormat::GetCreator ( );
__declspec(implementation_key(5708)) IDispatchPtr IChartColorFormat::GetParent ( );
__declspec(implementation_key(5709)) long IChartColorFormat::GetSchemeColor ( );
__declspec(implementation_key(5710)) void IChartColorFormat::PutSchemeColor ( long RHS );
__declspec(implementation_key(5711)) long IChartColorFormat::Getignorethis ( );
__declspec(implementation_key(5712)) long IChartColorFormat::Get_Default ( );
__declspec(implementation_key(5713)) long IChartColorFormat::GetType ( );
__declspec(implementation_key(5714)) _ApplicationPtr IAxis::GetApplication ( );
__declspec(implementation_key(5715)) enum XlCreator IAxis::GetCreator ( );
__declspec(implementation_key(5716)) IDispatchPtr IAxis::GetParent ( );
__declspec(implementation_key(5717)) VARIANT_BOOL IAxis::GetAxisBetweenCategories ( );
__declspec(implementation_key(5718)) void IAxis::PutAxisBetweenCategories ( VARIANT_BOOL RHS );
__declspec(implementation_key(5719)) enum XlAxisGroup IAxis::GetAxisGroup ( );
__declspec(implementation_key(5720)) AxisTitlePtr IAxis::GetAxisTitle ( );
__declspec(implementation_key(5721)) BorderPtr IAxis::GetBorder ( );
__declspec(implementation_key(5722)) _variant_t IAxis::GetCategoryNames ( );
__declspec(implementation_key(5723)) void IAxis::PutCategoryNames ( const _variant_t & RHS );
__declspec(implementation_key(5724)) enum XlAxisCrosses IAxis::GetCrosses ( );
__declspec(implementation_key(5725)) void IAxis::PutCrosses ( enum XlAxisCrosses RHS );
__declspec(implementation_key(5726)) double IAxis::GetCrossesAt ( );
__declspec(implementation_key(5727)) void IAxis::PutCrossesAt ( double RHS );
__declspec(implementation_key(5728)) _variant_t IAxis::Delete ( );
__declspec(implementation_key(5729)) VARIANT_BOOL IAxis::GetHasMajorGridlines ( );
__declspec(implementation_key(5730)) void IAxis::PutHasMajorGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(5731)) VARIANT_BOOL IAxis::GetHasMinorGridlines ( );
__declspec(implementation_key(5732)) void IAxis::PutHasMinorGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(5733)) VARIANT_BOOL IAxis::GetHasTitle ( );
__declspec(implementation_key(5734)) void IAxis::PutHasTitle ( VARIANT_BOOL RHS );
__declspec(implementation_key(5735)) GridlinesPtr IAxis::GetMajorGridlines ( );
__declspec(implementation_key(5736)) enum XlTickMark IAxis::GetMajorTickMark ( );
__declspec(implementation_key(5737)) void IAxis::PutMajorTickMark ( enum XlTickMark RHS );
__declspec(implementation_key(5738)) double IAxis::GetMajorUnit ( );
__declspec(implementation_key(5739)) void IAxis::PutMajorUnit ( double RHS );
__declspec(implementation_key(5740)) VARIANT_BOOL IAxis::GetMajorUnitIsAuto ( );
__declspec(implementation_key(5741)) void IAxis::PutMajorUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(5742)) double IAxis::GetMaximumScale ( );
__declspec(implementation_key(5743)) void IAxis::PutMaximumScale ( double RHS );
__declspec(implementation_key(5744)) VARIANT_BOOL IAxis::GetMaximumScaleIsAuto ( );
__declspec(implementation_key(5745)) void IAxis::PutMaximumScaleIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(5746)) double IAxis::GetMinimumScale ( );
__declspec(implementation_key(5747)) void IAxis::PutMinimumScale ( double RHS );
__declspec(implementation_key(5748)) VARIANT_BOOL IAxis::GetMinimumScaleIsAuto ( );
__declspec(implementation_key(5749)) void IAxis::PutMinimumScaleIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(5750)) GridlinesPtr IAxis::GetMinorGridlines ( );
__declspec(implementation_key(5751)) enum XlTickMark IAxis::GetMinorTickMark ( );
__declspec(implementation_key(5752)) void IAxis::PutMinorTickMark ( enum XlTickMark RHS );
__declspec(implementation_key(5753)) double IAxis::GetMinorUnit ( );
__declspec(implementation_key(5754)) void IAxis::PutMinorUnit ( double RHS );
__declspec(implementation_key(5755)) VARIANT_BOOL IAxis::GetMinorUnitIsAuto ( );
__declspec(implementation_key(5756)) void IAxis::PutMinorUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(5757)) VARIANT_BOOL IAxis::GetReversePlotOrder ( );
__declspec(implementation_key(5758)) void IAxis::PutReversePlotOrder ( VARIANT_BOOL RHS );
__declspec(implementation_key(5759)) enum XlScaleType IAxis::GetScaleType ( );
__declspec(implementation_key(5760)) void IAxis::PutScaleType ( enum XlScaleType RHS );
__declspec(implementation_key(5761)) _variant_t IAxis::Select ( );
__declspec(implementation_key(5762)) enum XlTickLabelPosition IAxis::GetTickLabelPosition ( );
__declspec(implementation_key(5763)) void IAxis::PutTickLabelPosition ( enum XlTickLabelPosition RHS );
__declspec(implementation_key(5764)) TickLabelsPtr IAxis::GetTickLabels ( );
__declspec(implementation_key(5765)) long IAxis::GetTickLabelSpacing ( );
__declspec(implementation_key(5766)) void IAxis::PutTickLabelSpacing ( long RHS );
__declspec(implementation_key(5767)) long IAxis::GetTickMarkSpacing ( );
__declspec(implementation_key(5768)) void IAxis::PutTickMarkSpacing ( long RHS );
__declspec(implementation_key(5769)) enum XlAxisType IAxis::GetType ( );
__declspec(implementation_key(5770)) void IAxis::PutType ( enum XlAxisType RHS );
__declspec(implementation_key(5771)) enum XlTimeUnit IAxis::GetBaseUnit ( );
__declspec(implementation_key(5772)) void IAxis::PutBaseUnit ( enum XlTimeUnit RHS );
__declspec(implementation_key(5773)) VARIANT_BOOL IAxis::GetBaseUnitIsAuto ( );
__declspec(implementation_key(5774)) void IAxis::PutBaseUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(5775)) enum XlTimeUnit IAxis::GetMajorUnitScale ( );
__declspec(implementation_key(5776)) void IAxis::PutMajorUnitScale ( enum XlTimeUnit RHS );
__declspec(implementation_key(5777)) enum XlTimeUnit IAxis::GetMinorUnitScale ( );
__declspec(implementation_key(5778)) void IAxis::PutMinorUnitScale ( enum XlTimeUnit RHS );
__declspec(implementation_key(5779)) enum XlCategoryType IAxis::GetCategoryType ( );
__declspec(implementation_key(5780)) void IAxis::PutCategoryType ( enum XlCategoryType RHS );
__declspec(implementation_key(5781)) double IAxis::GetLeft ( );
__declspec(implementation_key(5782)) double IAxis::GetTop ( );
__declspec(implementation_key(5783)) double IAxis::GetWidth ( );
__declspec(implementation_key(5784)) double IAxis::GetHeight ( );
__declspec(implementation_key(5785)) enum XlDisplayUnit IAxis::GetDisplayUnit ( );
__declspec(implementation_key(5786)) void IAxis::PutDisplayUnit ( enum XlDisplayUnit RHS );
__declspec(implementation_key(5787)) double IAxis::GetDisplayUnitCustom ( );
__declspec(implementation_key(5788)) void IAxis::PutDisplayUnitCustom ( double RHS );
__declspec(implementation_key(5789)) VARIANT_BOOL IAxis::GetHasDisplayUnitLabel ( );
__declspec(implementation_key(5790)) void IAxis::PutHasDisplayUnitLabel ( VARIANT_BOOL RHS );
__declspec(implementation_key(5791)) DisplayUnitLabelPtr IAxis::GetDisplayUnitLabel ( );
__declspec(implementation_key(5792)) _ApplicationPtr IChartTitle::GetApplication ( );
__declspec(implementation_key(5793)) enum XlCreator IChartTitle::GetCreator ( );
__declspec(implementation_key(5794)) IDispatchPtr IChartTitle::GetParent ( );
__declspec(implementation_key(5795)) _bstr_t IChartTitle::GetName ( );
__declspec(implementation_key(5796)) _variant_t IChartTitle::Select ( );
__declspec(implementation_key(5797)) BorderPtr IChartTitle::GetBorder ( );
__declspec(implementation_key(5798)) _variant_t IChartTitle::Delete ( );
__declspec(implementation_key(5799)) InteriorPtr IChartTitle::GetInterior ( );
__declspec(implementation_key(5800)) ChartFillFormatPtr IChartTitle::GetFill ( );
__declspec(implementation_key(5801)) _bstr_t IChartTitle::GetCaption ( );
__declspec(implementation_key(5802)) void IChartTitle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(5803)) CharactersPtr IChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(5804)) FontPtr IChartTitle::GetFont ( );
__declspec(implementation_key(5805)) _variant_t IChartTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(5806)) void IChartTitle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(5807)) double IChartTitle::GetLeft ( );
__declspec(implementation_key(5808)) void IChartTitle::PutLeft ( double RHS );
__declspec(implementation_key(5809)) _variant_t IChartTitle::GetOrientation ( );
__declspec(implementation_key(5810)) void IChartTitle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(5811)) VARIANT_BOOL IChartTitle::GetShadow ( );
__declspec(implementation_key(5812)) void IChartTitle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(5813)) _bstr_t IChartTitle::GetText ( );
__declspec(implementation_key(5814)) void IChartTitle::PutText ( _bstr_t RHS );
__declspec(implementation_key(5815)) double IChartTitle::GetTop ( );
__declspec(implementation_key(5816)) void IChartTitle::PutTop ( double RHS );
__declspec(implementation_key(5817)) _variant_t IChartTitle::GetVerticalAlignment ( );
__declspec(implementation_key(5818)) void IChartTitle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(5819)) long IChartTitle::GetReadingOrder ( );
__declspec(implementation_key(5820)) void IChartTitle::PutReadingOrder ( long RHS );
__declspec(implementation_key(5821)) _variant_t IChartTitle::GetAutoScaleFont ( );
__declspec(implementation_key(5822)) void IChartTitle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(5823)) _ApplicationPtr IAxisTitle::GetApplication ( );
__declspec(implementation_key(5824)) enum XlCreator IAxisTitle::GetCreator ( );
__declspec(implementation_key(5825)) IDispatchPtr IAxisTitle::GetParent ( );
__declspec(implementation_key(5826)) _bstr_t IAxisTitle::GetName ( );
__declspec(implementation_key(5827)) _variant_t IAxisTitle::Select ( );
__declspec(implementation_key(5828)) BorderPtr IAxisTitle::GetBorder ( );
__declspec(implementation_key(5829)) _variant_t IAxisTitle::Delete ( );
__declspec(implementation_key(5830)) InteriorPtr IAxisTitle::GetInterior ( );
__declspec(implementation_key(5831)) ChartFillFormatPtr IAxisTitle::GetFill ( );
__declspec(implementation_key(5832)) _bstr_t IAxisTitle::GetCaption ( );
__declspec(implementation_key(5833)) void IAxisTitle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(5834)) CharactersPtr IAxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(5835)) FontPtr IAxisTitle::GetFont ( );
__declspec(implementation_key(5836)) _variant_t IAxisTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(5837)) void IAxisTitle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(5838)) double IAxisTitle::GetLeft ( );
__declspec(implementation_key(5839)) void IAxisTitle::PutLeft ( double RHS );
__declspec(implementation_key(5840)) _variant_t IAxisTitle::GetOrientation ( );
__declspec(implementation_key(5841)) void IAxisTitle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(5842)) VARIANT_BOOL IAxisTitle::GetShadow ( );
__declspec(implementation_key(5843)) void IAxisTitle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(5844)) _bstr_t IAxisTitle::GetText ( );
__declspec(implementation_key(5845)) void IAxisTitle::PutText ( _bstr_t RHS );
__declspec(implementation_key(5846)) double IAxisTitle::GetTop ( );
__declspec(implementation_key(5847)) void IAxisTitle::PutTop ( double RHS );
__declspec(implementation_key(5848)) _variant_t IAxisTitle::GetVerticalAlignment ( );
__declspec(implementation_key(5849)) void IAxisTitle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(5850)) long IAxisTitle::GetReadingOrder ( );
__declspec(implementation_key(5851)) void IAxisTitle::PutReadingOrder ( long RHS );
__declspec(implementation_key(5852)) _variant_t IAxisTitle::GetAutoScaleFont ( );
__declspec(implementation_key(5853)) void IAxisTitle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(5854)) _ApplicationPtr IChartGroup::GetApplication ( );
__declspec(implementation_key(5855)) enum XlCreator IChartGroup::GetCreator ( );
__declspec(implementation_key(5856)) IDispatchPtr IChartGroup::GetParent ( );
__declspec(implementation_key(5857)) enum XlAxisGroup IChartGroup::GetAxisGroup ( );
__declspec(implementation_key(5858)) void IChartGroup::PutAxisGroup ( enum XlAxisGroup RHS );
__declspec(implementation_key(5859)) long IChartGroup::GetDoughnutHoleSize ( );
__declspec(implementation_key(5860)) void IChartGroup::PutDoughnutHoleSize ( long RHS );
__declspec(implementation_key(5861)) DownBarsPtr IChartGroup::GetDownBars ( );
__declspec(implementation_key(5862)) DropLinesPtr IChartGroup::GetDropLines ( );
__declspec(implementation_key(5863)) long IChartGroup::GetFirstSliceAngle ( );
__declspec(implementation_key(5864)) void IChartGroup::PutFirstSliceAngle ( long RHS );
__declspec(implementation_key(5865)) long IChartGroup::GetGapWidth ( );
__declspec(implementation_key(5866)) void IChartGroup::PutGapWidth ( long RHS );
__declspec(implementation_key(5867)) VARIANT_BOOL IChartGroup::GetHasDropLines ( );
__declspec(implementation_key(5868)) void IChartGroup::PutHasDropLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(5869)) VARIANT_BOOL IChartGroup::GetHasHiLoLines ( );
__declspec(implementation_key(5870)) void IChartGroup::PutHasHiLoLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(5871)) VARIANT_BOOL IChartGroup::GetHasRadarAxisLabels ( );
__declspec(implementation_key(5872)) void IChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(5873)) VARIANT_BOOL IChartGroup::GetHasSeriesLines ( );
__declspec(implementation_key(5874)) void IChartGroup::PutHasSeriesLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(5875)) VARIANT_BOOL IChartGroup::GetHasUpDownBars ( );
__declspec(implementation_key(5876)) void IChartGroup::PutHasUpDownBars ( VARIANT_BOOL RHS );
__declspec(implementation_key(5877)) HiLoLinesPtr IChartGroup::GetHiLoLines ( );
__declspec(implementation_key(5878)) long IChartGroup::GetIndex ( );
__declspec(implementation_key(5879)) long IChartGroup::GetOverlap ( );
__declspec(implementation_key(5880)) void IChartGroup::PutOverlap ( long RHS );
__declspec(implementation_key(5881)) TickLabelsPtr IChartGroup::GetRadarAxisLabels ( );
__declspec(implementation_key(5882)) IDispatchPtr IChartGroup::SeriesCollection ( const _variant_t & Index );
__declspec(implementation_key(5883)) SeriesLinesPtr IChartGroup::GetSeriesLines ( );
__declspec(implementation_key(5884)) long IChartGroup::GetSubType ( );
__declspec(implementation_key(5885)) void IChartGroup::PutSubType ( long RHS );
__declspec(implementation_key(5886)) long IChartGroup::GetType ( );
__declspec(implementation_key(5887)) void IChartGroup::PutType ( long RHS );
__declspec(implementation_key(5888)) UpBarsPtr IChartGroup::GetUpBars ( );
__declspec(implementation_key(5889)) VARIANT_BOOL IChartGroup::GetVaryByCategories ( );
__declspec(implementation_key(5890)) void IChartGroup::PutVaryByCategories ( VARIANT_BOOL RHS );
__declspec(implementation_key(5891)) enum XlSizeRepresents IChartGroup::GetSizeRepresents ( );
__declspec(implementation_key(5892)) void IChartGroup::PutSizeRepresents ( enum XlSizeRepresents RHS );
__declspec(implementation_key(5893)) long IChartGroup::GetBubbleScale ( );
__declspec(implementation_key(5894)) void IChartGroup::PutBubbleScale ( long RHS );
__declspec(implementation_key(5895)) VARIANT_BOOL IChartGroup::GetShowNegativeBubbles ( );
__declspec(implementation_key(5896)) void IChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL RHS );
__declspec(implementation_key(5897)) enum XlChartSplitType IChartGroup::GetSplitType ( );
__declspec(implementation_key(5898)) void IChartGroup::PutSplitType ( enum XlChartSplitType RHS );
__declspec(implementation_key(5899)) _variant_t IChartGroup::GetSplitValue ( );
__declspec(implementation_key(5900)) void IChartGroup::PutSplitValue ( const _variant_t & RHS );
__declspec(implementation_key(5901)) long IChartGroup::GetSecondPlotSize ( );
__declspec(implementation_key(5902)) void IChartGroup::PutSecondPlotSize ( long RHS );
__declspec(implementation_key(5903)) VARIANT_BOOL IChartGroup::GetHas3DShading ( );
__declspec(implementation_key(5904)) void IChartGroup::PutHas3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(5905)) _ApplicationPtr IChartGroups::GetApplication ( );
__declspec(implementation_key(5906)) enum XlCreator IChartGroups::GetCreator ( );
__declspec(implementation_key(5907)) IDispatchPtr IChartGroups::GetParent ( );
__declspec(implementation_key(5908)) long IChartGroups::GetCount ( );
__declspec(implementation_key(5909)) ChartGroupPtr IChartGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(5910)) IUnknownPtr IChartGroups::_NewEnum ( );
__declspec(implementation_key(5911)) _ApplicationPtr IAxes::GetApplication ( );
__declspec(implementation_key(5912)) enum XlCreator IAxes::GetCreator ( );
__declspec(implementation_key(5913)) IDispatchPtr IAxes::GetParent ( );
__declspec(implementation_key(5914)) long IAxes::GetCount ( );
__declspec(implementation_key(5915)) AxisPtr IAxes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup );
__declspec(implementation_key(5916)) IUnknownPtr IAxes::_NewEnum ( );
__declspec(implementation_key(5917)) _ApplicationPtr IPoints::GetApplication ( );
__declspec(implementation_key(5918)) enum XlCreator IPoints::GetCreator ( );
__declspec(implementation_key(5919)) IDispatchPtr IPoints::GetParent ( );
__declspec(implementation_key(5920)) long IPoints::GetCount ( );
__declspec(implementation_key(5921)) PointPtr IPoints::Item ( long Index );
__declspec(implementation_key(5922)) IUnknownPtr IPoints::_NewEnum ( );
__declspec(implementation_key(5923)) _ApplicationPtr IPoint::GetApplication ( );
__declspec(implementation_key(5924)) enum XlCreator IPoint::GetCreator ( );
__declspec(implementation_key(5925)) IDispatchPtr IPoint::GetParent ( );
__declspec(implementation_key(5926)) _variant_t IPoint::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(5927)) BorderPtr IPoint::GetBorder ( );
__declspec(implementation_key(5928)) _variant_t IPoint::ClearFormats ( );
__declspec(implementation_key(5929)) _variant_t IPoint::Copy ( );
__declspec(implementation_key(5930)) DataLabelPtr IPoint::GetDataLabel ( );
__declspec(implementation_key(5931)) _variant_t IPoint::Delete ( );
__declspec(implementation_key(5932)) long IPoint::GetExplosion ( );
__declspec(implementation_key(5933)) void IPoint::PutExplosion ( long RHS );
__declspec(implementation_key(5934)) VARIANT_BOOL IPoint::GetHasDataLabel ( );
__declspec(implementation_key(5935)) void IPoint::PutHasDataLabel ( VARIANT_BOOL RHS );
__declspec(implementation_key(5936)) InteriorPtr IPoint::GetInterior ( );
__declspec(implementation_key(5937)) VARIANT_BOOL IPoint::GetInvertIfNegative ( );
__declspec(implementation_key(5938)) void IPoint::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(5939)) long IPoint::GetMarkerBackgroundColor ( );
__declspec(implementation_key(5940)) void IPoint::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(5941)) enum XlColorIndex IPoint::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(5942)) void IPoint::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(5943)) long IPoint::GetMarkerForegroundColor ( );
__declspec(implementation_key(5944)) void IPoint::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(5945)) enum XlColorIndex IPoint::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(5946)) void IPoint::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(5947)) long IPoint::GetMarkerSize ( );
__declspec(implementation_key(5948)) void IPoint::PutMarkerSize ( long RHS );
__declspec(implementation_key(5949)) enum XlMarkerStyle IPoint::GetMarkerStyle ( );
__declspec(implementation_key(5950)) void IPoint::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(5951)) _variant_t IPoint::Paste ( );
__declspec(implementation_key(5952)) enum XlChartPictureType IPoint::GetPictureType ( );
__declspec(implementation_key(5953)) void IPoint::PutPictureType ( enum XlChartPictureType RHS );
__declspec(implementation_key(5954)) long IPoint::GetPictureUnit ( );
__declspec(implementation_key(5955)) void IPoint::PutPictureUnit ( long RHS );
__declspec(implementation_key(5956)) _variant_t IPoint::Select ( );
__declspec(implementation_key(5957)) VARIANT_BOOL IPoint::GetApplyPictToSides ( );
__declspec(implementation_key(5958)) void IPoint::PutApplyPictToSides ( VARIANT_BOOL RHS );
__declspec(implementation_key(5959)) VARIANT_BOOL IPoint::GetApplyPictToFront ( );
__declspec(implementation_key(5960)) void IPoint::PutApplyPictToFront ( VARIANT_BOOL RHS );
__declspec(implementation_key(5961)) VARIANT_BOOL IPoint::GetApplyPictToEnd ( );
__declspec(implementation_key(5962)) void IPoint::PutApplyPictToEnd ( VARIANT_BOOL RHS );
__declspec(implementation_key(5963)) VARIANT_BOOL IPoint::GetShadow ( );
__declspec(implementation_key(5964)) void IPoint::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(5965)) VARIANT_BOOL IPoint::GetSecondaryPlot ( );
__declspec(implementation_key(5966)) void IPoint::PutSecondaryPlot ( VARIANT_BOOL RHS );
__declspec(implementation_key(5967)) ChartFillFormatPtr IPoint::GetFill ( );
__declspec(implementation_key(5968)) _variant_t IPoint::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(5969)) _ApplicationPtr ISeries::GetApplication ( );
__declspec(implementation_key(5970)) enum XlCreator ISeries::GetCreator ( );
__declspec(implementation_key(5971)) IDispatchPtr ISeries::GetParent ( );
__declspec(implementation_key(5972)) _variant_t ISeries::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(5973)) enum XlAxisGroup ISeries::GetAxisGroup ( );
__declspec(implementation_key(5974)) void ISeries::PutAxisGroup ( enum XlAxisGroup RHS );
__declspec(implementation_key(5975)) BorderPtr ISeries::GetBorder ( );
__declspec(implementation_key(5976)) _variant_t ISeries::ClearFormats ( );
__declspec(implementation_key(5977)) _variant_t ISeries::Copy ( );
__declspec(implementation_key(5978)) IDispatchPtr ISeries::DataLabels ( const _variant_t & Index );
__declspec(implementation_key(5979)) _variant_t ISeries::Delete ( );
__declspec(implementation_key(5980)) _variant_t ISeries::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues );
__declspec(implementation_key(5981)) ErrorBarsPtr ISeries::GetErrorBars ( );
__declspec(implementation_key(5982)) long ISeries::GetExplosion ( );
__declspec(implementation_key(5983)) void ISeries::PutExplosion ( long RHS );
__declspec(implementation_key(5984)) _bstr_t ISeries::GetFormula ( );
__declspec(implementation_key(5985)) void ISeries::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(5986)) _bstr_t ISeries::GetFormulaLocal ( );
__declspec(implementation_key(5987)) void ISeries::PutFormulaLocal ( _bstr_t RHS );
__declspec(implementation_key(5988)) _bstr_t ISeries::GetFormulaR1C1 ( );
__declspec(implementation_key(5989)) void ISeries::PutFormulaR1C1 ( _bstr_t RHS );
__declspec(implementation_key(5990)) _bstr_t ISeries::GetFormulaR1C1Local ( );
__declspec(implementation_key(5991)) void ISeries::PutFormulaR1C1Local ( _bstr_t RHS );
__declspec(implementation_key(5992)) VARIANT_BOOL ISeries::GetHasDataLabels ( );
__declspec(implementation_key(5993)) void ISeries::PutHasDataLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(5994)) VARIANT_BOOL ISeries::GetHasErrorBars ( );
__declspec(implementation_key(5995)) void ISeries::PutHasErrorBars ( VARIANT_BOOL RHS );
__declspec(implementation_key(5996)) InteriorPtr ISeries::GetInterior ( );
__declspec(implementation_key(5997)) ChartFillFormatPtr ISeries::GetFill ( );
__declspec(implementation_key(5998)) VARIANT_BOOL ISeries::GetInvertIfNegative ( );
__declspec(implementation_key(5999)) void ISeries::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(6000)) long ISeries::GetMarkerBackgroundColor ( );
__declspec(implementation_key(6001)) void ISeries::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(6002)) enum XlColorIndex ISeries::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(6003)) void ISeries::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(6004)) long ISeries::GetMarkerForegroundColor ( );
__declspec(implementation_key(6005)) void ISeries::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(6006)) enum XlColorIndex ISeries::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(6007)) void ISeries::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(6008)) long ISeries::GetMarkerSize ( );
__declspec(implementation_key(6009)) void ISeries::PutMarkerSize ( long RHS );
__declspec(implementation_key(6010)) enum XlMarkerStyle ISeries::GetMarkerStyle ( );
__declspec(implementation_key(6011)) void ISeries::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(6012)) _bstr_t ISeries::GetName ( );
__declspec(implementation_key(6013)) void ISeries::PutName ( _bstr_t RHS );
__declspec(implementation_key(6014)) _variant_t ISeries::Paste ( );
__declspec(implementation_key(6015)) enum XlChartPictureType ISeries::GetPictureType ( );
__declspec(implementation_key(6016)) void ISeries::PutPictureType ( enum XlChartPictureType RHS );
__declspec(implementation_key(6017)) long ISeries::GetPictureUnit ( );
__declspec(implementation_key(6018)) void ISeries::PutPictureUnit ( long RHS );
__declspec(implementation_key(6019)) long ISeries::GetPlotOrder ( );
__declspec(implementation_key(6020)) void ISeries::PutPlotOrder ( long RHS );
__declspec(implementation_key(6021)) IDispatchPtr ISeries::Points ( const _variant_t & Index );
__declspec(implementation_key(6022)) _variant_t ISeries::Select ( );
__declspec(implementation_key(6023)) VARIANT_BOOL ISeries::GetSmooth ( );
__declspec(implementation_key(6024)) void ISeries::PutSmooth ( VARIANT_BOOL RHS );
__declspec(implementation_key(6025)) IDispatchPtr ISeries::Trendlines ( const _variant_t & Index );
__declspec(implementation_key(6026)) long ISeries::GetType ( );
__declspec(implementation_key(6027)) void ISeries::PutType ( long RHS );
__declspec(implementation_key(6028)) enum XlChartType ISeries::GetChartType ( );
__declspec(implementation_key(6029)) void ISeries::PutChartType ( enum XlChartType RHS );
__declspec(implementation_key(6030)) HRESULT ISeries::ApplyCustomType ( enum XlChartType ChartType );
__declspec(implementation_key(6031)) _variant_t ISeries::GetValues ( );
__declspec(implementation_key(6032)) void ISeries::PutValues ( const _variant_t & RHS );
__declspec(implementation_key(6033)) _variant_t ISeries::GetXValues ( );
__declspec(implementation_key(6034)) void ISeries::PutXValues ( const _variant_t & RHS );
__declspec(implementation_key(6035)) _variant_t ISeries::GetBubbleSizes ( );
__declspec(implementation_key(6036)) void ISeries::PutBubbleSizes ( const _variant_t & RHS );
__declspec(implementation_key(6037)) enum XlBarShape ISeries::GetBarShape ( );
__declspec(implementation_key(6038)) void ISeries::PutBarShape ( enum XlBarShape RHS );
__declspec(implementation_key(6039)) VARIANT_BOOL ISeries::GetApplyPictToSides ( );
__declspec(implementation_key(6040)) void ISeries::PutApplyPictToSides ( VARIANT_BOOL RHS );
__declspec(implementation_key(6041)) VARIANT_BOOL ISeries::GetApplyPictToFront ( );
__declspec(implementation_key(6042)) void ISeries::PutApplyPictToFront ( VARIANT_BOOL RHS );
__declspec(implementation_key(6043)) VARIANT_BOOL ISeries::GetApplyPictToEnd ( );
__declspec(implementation_key(6044)) void ISeries::PutApplyPictToEnd ( VARIANT_BOOL RHS );
__declspec(implementation_key(6045)) VARIANT_BOOL ISeries::GetHas3DEffect ( );
__declspec(implementation_key(6046)) void ISeries::PutHas3DEffect ( VARIANT_BOOL RHS );
__declspec(implementation_key(6047)) VARIANT_BOOL ISeries::GetShadow ( );
__declspec(implementation_key(6048)) void ISeries::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(6049)) VARIANT_BOOL ISeries::GetHasLeaderLines ( );
__declspec(implementation_key(6050)) void ISeries::PutHasLeaderLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(6051)) LeaderLinesPtr ISeries::GetLeaderLines ( );
__declspec(implementation_key(6052)) _variant_t ISeries::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(6053)) _ApplicationPtr ISeriesCollection::GetApplication ( );
__declspec(implementation_key(6054)) enum XlCreator ISeriesCollection::GetCreator ( );
__declspec(implementation_key(6055)) IDispatchPtr ISeriesCollection::GetParent ( );
__declspec(implementation_key(6056)) SeriesPtr ISeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace );
__declspec(implementation_key(6057)) long ISeriesCollection::GetCount ( );
__declspec(implementation_key(6058)) _variant_t ISeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels );
__declspec(implementation_key(6059)) SeriesPtr ISeriesCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(6060)) IUnknownPtr ISeriesCollection::_NewEnum ( );
__declspec(implementation_key(6061)) _variant_t ISeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries );
__declspec(implementation_key(6062)) SeriesPtr ISeriesCollection::NewSeries ( );
__declspec(implementation_key(6063)) _ApplicationPtr IDataLabel::GetApplication ( );
__declspec(implementation_key(6064)) enum XlCreator IDataLabel::GetCreator ( );
__declspec(implementation_key(6065)) IDispatchPtr IDataLabel::GetParent ( );
__declspec(implementation_key(6066)) _bstr_t IDataLabel::GetName ( );
__declspec(implementation_key(6067)) _variant_t IDataLabel::Select ( );
__declspec(implementation_key(6068)) BorderPtr IDataLabel::GetBorder ( );
__declspec(implementation_key(6069)) _variant_t IDataLabel::Delete ( );
__declspec(implementation_key(6070)) InteriorPtr IDataLabel::GetInterior ( );
__declspec(implementation_key(6071)) ChartFillFormatPtr IDataLabel::GetFill ( );
__declspec(implementation_key(6072)) _bstr_t IDataLabel::GetCaption ( );
__declspec(implementation_key(6073)) void IDataLabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6074)) CharactersPtr IDataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(6075)) FontPtr IDataLabel::GetFont ( );
__declspec(implementation_key(6076)) _variant_t IDataLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(6077)) void IDataLabel::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6078)) double IDataLabel::GetLeft ( );
__declspec(implementation_key(6079)) void IDataLabel::PutLeft ( double RHS );
__declspec(implementation_key(6080)) _variant_t IDataLabel::GetOrientation ( );
__declspec(implementation_key(6081)) void IDataLabel::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(6082)) VARIANT_BOOL IDataLabel::GetShadow ( );
__declspec(implementation_key(6083)) void IDataLabel::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(6084)) _bstr_t IDataLabel::GetText ( );
__declspec(implementation_key(6085)) void IDataLabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(6086)) double IDataLabel::GetTop ( );
__declspec(implementation_key(6087)) void IDataLabel::PutTop ( double RHS );
__declspec(implementation_key(6088)) _variant_t IDataLabel::GetVerticalAlignment ( );
__declspec(implementation_key(6089)) void IDataLabel::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6090)) long IDataLabel::GetReadingOrder ( );
__declspec(implementation_key(6091)) void IDataLabel::PutReadingOrder ( long RHS );
__declspec(implementation_key(6092)) _variant_t IDataLabel::GetAutoScaleFont ( );
__declspec(implementation_key(6093)) void IDataLabel::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(6094)) VARIANT_BOOL IDataLabel::GetAutoText ( );
__declspec(implementation_key(6095)) void IDataLabel::PutAutoText ( VARIANT_BOOL RHS );
__declspec(implementation_key(6096)) _bstr_t IDataLabel::GetNumberFormat ( );
__declspec(implementation_key(6097)) void IDataLabel::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(6098)) VARIANT_BOOL IDataLabel::GetNumberFormatLinked ( );
__declspec(implementation_key(6099)) void IDataLabel::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6100)) _variant_t IDataLabel::GetNumberFormatLocal ( );
__declspec(implementation_key(6101)) void IDataLabel::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(6102)) VARIANT_BOOL IDataLabel::GetShowLegendKey ( );
__declspec(implementation_key(6103)) void IDataLabel::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(6104)) _variant_t IDataLabel::GetType ( );
__declspec(implementation_key(6105)) void IDataLabel::PutType ( const _variant_t & RHS );
__declspec(implementation_key(6106)) enum XlDataLabelPosition IDataLabel::GetPosition ( );
__declspec(implementation_key(6107)) void IDataLabel::PutPosition ( enum XlDataLabelPosition RHS );
__declspec(implementation_key(6108)) VARIANT_BOOL IDataLabel::GetShowSeriesName ( );
__declspec(implementation_key(6109)) void IDataLabel::PutShowSeriesName ( VARIANT_BOOL RHS );
__declspec(implementation_key(6110)) VARIANT_BOOL IDataLabel::GetShowCategoryName ( );
__declspec(implementation_key(6111)) void IDataLabel::PutShowCategoryName ( VARIANT_BOOL RHS );
__declspec(implementation_key(6112)) VARIANT_BOOL IDataLabel::GetShowValue ( );
__declspec(implementation_key(6113)) void IDataLabel::PutShowValue ( VARIANT_BOOL RHS );
__declspec(implementation_key(6114)) VARIANT_BOOL IDataLabel::GetShowPercentage ( );
__declspec(implementation_key(6115)) void IDataLabel::PutShowPercentage ( VARIANT_BOOL RHS );
__declspec(implementation_key(6116)) VARIANT_BOOL IDataLabel::GetShowBubbleSize ( );
__declspec(implementation_key(6117)) void IDataLabel::PutShowBubbleSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(6118)) _variant_t IDataLabel::GetSeparator ( );
__declspec(implementation_key(6119)) void IDataLabel::PutSeparator ( const _variant_t & RHS );
__declspec(implementation_key(6120)) _ApplicationPtr IDataLabels::GetApplication ( );
__declspec(implementation_key(6121)) enum XlCreator IDataLabels::GetCreator ( );
__declspec(implementation_key(6122)) IDispatchPtr IDataLabels::GetParent ( );
__declspec(implementation_key(6123)) _bstr_t IDataLabels::GetName ( );
__declspec(implementation_key(6124)) _variant_t IDataLabels::Select ( );
__declspec(implementation_key(6125)) BorderPtr IDataLabels::GetBorder ( );
__declspec(implementation_key(6126)) _variant_t IDataLabels::Delete ( );
__declspec(implementation_key(6127)) InteriorPtr IDataLabels::GetInterior ( );
__declspec(implementation_key(6128)) ChartFillFormatPtr IDataLabels::GetFill ( );
__declspec(implementation_key(6129)) FontPtr IDataLabels::GetFont ( );
__declspec(implementation_key(6130)) _variant_t IDataLabels::GetHorizontalAlignment ( );
__declspec(implementation_key(6131)) void IDataLabels::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6132)) _variant_t IDataLabels::GetOrientation ( );
__declspec(implementation_key(6133)) void IDataLabels::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(6134)) VARIANT_BOOL IDataLabels::GetShadow ( );
__declspec(implementation_key(6135)) void IDataLabels::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(6136)) _variant_t IDataLabels::GetVerticalAlignment ( );
__declspec(implementation_key(6137)) void IDataLabels::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6138)) long IDataLabels::GetReadingOrder ( );
__declspec(implementation_key(6139)) void IDataLabels::PutReadingOrder ( long RHS );
__declspec(implementation_key(6140)) _variant_t IDataLabels::GetAutoScaleFont ( );
__declspec(implementation_key(6141)) void IDataLabels::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(6142)) VARIANT_BOOL IDataLabels::GetAutoText ( );
__declspec(implementation_key(6143)) void IDataLabels::PutAutoText ( VARIANT_BOOL RHS );
__declspec(implementation_key(6144)) _bstr_t IDataLabels::GetNumberFormat ( );
__declspec(implementation_key(6145)) void IDataLabels::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(6146)) VARIANT_BOOL IDataLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(6147)) void IDataLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6148)) _variant_t IDataLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(6149)) void IDataLabels::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(6150)) VARIANT_BOOL IDataLabels::GetShowLegendKey ( );
__declspec(implementation_key(6151)) void IDataLabels::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(6152)) _variant_t IDataLabels::GetType ( );
__declspec(implementation_key(6153)) void IDataLabels::PutType ( const _variant_t & RHS );
__declspec(implementation_key(6154)) enum XlDataLabelPosition IDataLabels::GetPosition ( );
__declspec(implementation_key(6155)) void IDataLabels::PutPosition ( enum XlDataLabelPosition RHS );
__declspec(implementation_key(6156)) VARIANT_BOOL IDataLabels::GetShowSeriesName ( );
__declspec(implementation_key(6157)) void IDataLabels::PutShowSeriesName ( VARIANT_BOOL RHS );
__declspec(implementation_key(6158)) VARIANT_BOOL IDataLabels::GetShowCategoryName ( );
__declspec(implementation_key(6159)) void IDataLabels::PutShowCategoryName ( VARIANT_BOOL RHS );
__declspec(implementation_key(6160)) VARIANT_BOOL IDataLabels::GetShowValue ( );
__declspec(implementation_key(6161)) void IDataLabels::PutShowValue ( VARIANT_BOOL RHS );
__declspec(implementation_key(6162)) VARIANT_BOOL IDataLabels::GetShowPercentage ( );
__declspec(implementation_key(6163)) void IDataLabels::PutShowPercentage ( VARIANT_BOOL RHS );
__declspec(implementation_key(6164)) VARIANT_BOOL IDataLabels::GetShowBubbleSize ( );
__declspec(implementation_key(6165)) void IDataLabels::PutShowBubbleSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(6166)) _variant_t IDataLabels::GetSeparator ( );
__declspec(implementation_key(6167)) void IDataLabels::PutSeparator ( const _variant_t & RHS );
__declspec(implementation_key(6168)) long IDataLabels::GetCount ( );
__declspec(implementation_key(6169)) DataLabelPtr IDataLabels::Item ( const _variant_t & Index );
__declspec(implementation_key(6170)) IUnknownPtr IDataLabels::_NewEnum ( );
__declspec(implementation_key(6171)) _ApplicationPtr ILegendEntry::GetApplication ( );
__declspec(implementation_key(6172)) enum XlCreator ILegendEntry::GetCreator ( );
__declspec(implementation_key(6173)) IDispatchPtr ILegendEntry::GetParent ( );
__declspec(implementation_key(6174)) _variant_t ILegendEntry::Delete ( );
__declspec(implementation_key(6175)) FontPtr ILegendEntry::GetFont ( );
__declspec(implementation_key(6176)) long ILegendEntry::GetIndex ( );
__declspec(implementation_key(6177)) LegendKeyPtr ILegendEntry::GetLegendKey ( );
__declspec(implementation_key(6178)) _variant_t ILegendEntry::Select ( );
__declspec(implementation_key(6179)) _variant_t ILegendEntry::GetAutoScaleFont ( );
__declspec(implementation_key(6180)) void ILegendEntry::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(6181)) double ILegendEntry::GetLeft ( );
__declspec(implementation_key(6182)) double ILegendEntry::GetTop ( );
__declspec(implementation_key(6183)) double ILegendEntry::GetWidth ( );
__declspec(implementation_key(6184)) double ILegendEntry::GetHeight ( );
__declspec(implementation_key(6185)) _ApplicationPtr ILegendEntries::GetApplication ( );
__declspec(implementation_key(6186)) enum XlCreator ILegendEntries::GetCreator ( );
__declspec(implementation_key(6187)) IDispatchPtr ILegendEntries::GetParent ( );
__declspec(implementation_key(6188)) long ILegendEntries::GetCount ( );
__declspec(implementation_key(6189)) LegendEntryPtr ILegendEntries::Item ( const _variant_t & Index );
__declspec(implementation_key(6190)) IUnknownPtr ILegendEntries::_NewEnum ( );
__declspec(implementation_key(6191)) _ApplicationPtr ILegendKey::GetApplication ( );
__declspec(implementation_key(6192)) enum XlCreator ILegendKey::GetCreator ( );
__declspec(implementation_key(6193)) IDispatchPtr ILegendKey::GetParent ( );
__declspec(implementation_key(6194)) BorderPtr ILegendKey::GetBorder ( );
__declspec(implementation_key(6195)) _variant_t ILegendKey::ClearFormats ( );
__declspec(implementation_key(6196)) _variant_t ILegendKey::Delete ( );
__declspec(implementation_key(6197)) InteriorPtr ILegendKey::GetInterior ( );
__declspec(implementation_key(6198)) ChartFillFormatPtr ILegendKey::GetFill ( );
__declspec(implementation_key(6199)) VARIANT_BOOL ILegendKey::GetInvertIfNegative ( );
__declspec(implementation_key(6200)) void ILegendKey::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(6201)) long ILegendKey::GetMarkerBackgroundColor ( );
__declspec(implementation_key(6202)) void ILegendKey::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(6203)) enum XlColorIndex ILegendKey::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(6204)) void ILegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(6205)) long ILegendKey::GetMarkerForegroundColor ( );
__declspec(implementation_key(6206)) void ILegendKey::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(6207)) enum XlColorIndex ILegendKey::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(6208)) void ILegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(6209)) long ILegendKey::GetMarkerSize ( );
__declspec(implementation_key(6210)) void ILegendKey::PutMarkerSize ( long RHS );
__declspec(implementation_key(6211)) enum XlMarkerStyle ILegendKey::GetMarkerStyle ( );
__declspec(implementation_key(6212)) void ILegendKey::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(6213)) long ILegendKey::GetPictureType ( );
__declspec(implementation_key(6214)) void ILegendKey::PutPictureType ( long RHS );
__declspec(implementation_key(6215)) long ILegendKey::GetPictureUnit ( );
__declspec(implementation_key(6216)) void ILegendKey::PutPictureUnit ( long RHS );
__declspec(implementation_key(6217)) _variant_t ILegendKey::Select ( );
__declspec(implementation_key(6218)) VARIANT_BOOL ILegendKey::GetSmooth ( );
__declspec(implementation_key(6219)) void ILegendKey::PutSmooth ( VARIANT_BOOL RHS );
__declspec(implementation_key(6220)) double ILegendKey::GetLeft ( );
__declspec(implementation_key(6221)) double ILegendKey::GetTop ( );
__declspec(implementation_key(6222)) double ILegendKey::GetWidth ( );
__declspec(implementation_key(6223)) double ILegendKey::GetHeight ( );
__declspec(implementation_key(6224)) VARIANT_BOOL ILegendKey::GetShadow ( );
__declspec(implementation_key(6225)) void ILegendKey::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(6226)) _ApplicationPtr ITrendlines::GetApplication ( );
__declspec(implementation_key(6227)) enum XlCreator ITrendlines::GetCreator ( );
__declspec(implementation_key(6228)) IDispatchPtr ITrendlines::GetParent ( );
__declspec(implementation_key(6229)) TrendlinePtr ITrendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name );
__declspec(implementation_key(6230)) long ITrendlines::GetCount ( );
__declspec(implementation_key(6231)) TrendlinePtr ITrendlines::Item ( const _variant_t & Index );
__declspec(implementation_key(6232)) IUnknownPtr ITrendlines::_NewEnum ( );
__declspec(implementation_key(6233)) _ApplicationPtr ITrendline::GetApplication ( );
__declspec(implementation_key(6234)) enum XlCreator ITrendline::GetCreator ( );
__declspec(implementation_key(6235)) IDispatchPtr ITrendline::GetParent ( );
__declspec(implementation_key(6236)) long ITrendline::GetBackward ( );
__declspec(implementation_key(6237)) void ITrendline::PutBackward ( long RHS );
__declspec(implementation_key(6238)) BorderPtr ITrendline::GetBorder ( );
__declspec(implementation_key(6239)) _variant_t ITrendline::ClearFormats ( );
__declspec(implementation_key(6240)) DataLabelPtr ITrendline::GetDataLabel ( );
__declspec(implementation_key(6241)) _variant_t ITrendline::Delete ( );
__declspec(implementation_key(6242)) VARIANT_BOOL ITrendline::GetDisplayEquation ( );
__declspec(implementation_key(6243)) void ITrendline::PutDisplayEquation ( VARIANT_BOOL RHS );
__declspec(implementation_key(6244)) VARIANT_BOOL ITrendline::GetDisplayRSquared ( );
__declspec(implementation_key(6245)) void ITrendline::PutDisplayRSquared ( VARIANT_BOOL RHS );
__declspec(implementation_key(6246)) long ITrendline::GetForward ( );
__declspec(implementation_key(6247)) void ITrendline::PutForward ( long RHS );
__declspec(implementation_key(6248)) long ITrendline::GetIndex ( );
__declspec(implementation_key(6249)) double ITrendline::GetIntercept ( );
__declspec(implementation_key(6250)) void ITrendline::PutIntercept ( double RHS );
__declspec(implementation_key(6251)) VARIANT_BOOL ITrendline::GetInterceptIsAuto ( );
__declspec(implementation_key(6252)) void ITrendline::PutInterceptIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(6253)) _bstr_t ITrendline::GetName ( );
__declspec(implementation_key(6254)) void ITrendline::PutName ( _bstr_t RHS );
__declspec(implementation_key(6255)) VARIANT_BOOL ITrendline::GetNameIsAuto ( );
__declspec(implementation_key(6256)) void ITrendline::PutNameIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(6257)) long ITrendline::GetOrder ( );
__declspec(implementation_key(6258)) void ITrendline::PutOrder ( long RHS );
__declspec(implementation_key(6259)) long ITrendline::GetPeriod ( );
__declspec(implementation_key(6260)) void ITrendline::PutPeriod ( long RHS );
__declspec(implementation_key(6261)) _variant_t ITrendline::Select ( );
__declspec(implementation_key(6262)) enum XlTrendlineType ITrendline::GetType ( );
__declspec(implementation_key(6263)) void ITrendline::PutType ( enum XlTrendlineType RHS );
__declspec(implementation_key(6264)) _ApplicationPtr ICorners::GetApplication ( );
__declspec(implementation_key(6265)) enum XlCreator ICorners::GetCreator ( );
__declspec(implementation_key(6266)) IDispatchPtr ICorners::GetParent ( );
__declspec(implementation_key(6267)) _bstr_t ICorners::GetName ( );
__declspec(implementation_key(6268)) _variant_t ICorners::Select ( );
__declspec(implementation_key(6269)) _ApplicationPtr ISeriesLines::GetApplication ( );
__declspec(implementation_key(6270)) enum XlCreator ISeriesLines::GetCreator ( );
__declspec(implementation_key(6271)) IDispatchPtr ISeriesLines::GetParent ( );
__declspec(implementation_key(6272)) _bstr_t ISeriesLines::GetName ( );
__declspec(implementation_key(6273)) _variant_t ISeriesLines::Select ( );
__declspec(implementation_key(6274)) BorderPtr ISeriesLines::GetBorder ( );
__declspec(implementation_key(6275)) _variant_t ISeriesLines::Delete ( );
__declspec(implementation_key(6276)) _ApplicationPtr IHiLoLines::GetApplication ( );
__declspec(implementation_key(6277)) enum XlCreator IHiLoLines::GetCreator ( );
__declspec(implementation_key(6278)) IDispatchPtr IHiLoLines::GetParent ( );
__declspec(implementation_key(6279)) _bstr_t IHiLoLines::GetName ( );
__declspec(implementation_key(6280)) _variant_t IHiLoLines::Select ( );
__declspec(implementation_key(6281)) BorderPtr IHiLoLines::GetBorder ( );
__declspec(implementation_key(6282)) _variant_t IHiLoLines::Delete ( );
__declspec(implementation_key(6283)) _ApplicationPtr IGridlines::GetApplication ( );
__declspec(implementation_key(6284)) enum XlCreator IGridlines::GetCreator ( );
__declspec(implementation_key(6285)) IDispatchPtr IGridlines::GetParent ( );
__declspec(implementation_key(6286)) _bstr_t IGridlines::GetName ( );
__declspec(implementation_key(6287)) _variant_t IGridlines::Select ( );
__declspec(implementation_key(6288)) BorderPtr IGridlines::GetBorder ( );
__declspec(implementation_key(6289)) _variant_t IGridlines::Delete ( );
__declspec(implementation_key(6290)) _ApplicationPtr IDropLines::GetApplication ( );
__declspec(implementation_key(6291)) enum XlCreator IDropLines::GetCreator ( );
__declspec(implementation_key(6292)) IDispatchPtr IDropLines::GetParent ( );
__declspec(implementation_key(6293)) _bstr_t IDropLines::GetName ( );
__declspec(implementation_key(6294)) _variant_t IDropLines::Select ( );
__declspec(implementation_key(6295)) BorderPtr IDropLines::GetBorder ( );
__declspec(implementation_key(6296)) _variant_t IDropLines::Delete ( );
__declspec(implementation_key(6297)) _ApplicationPtr ILeaderLines::GetApplication ( );
__declspec(implementation_key(6298)) enum XlCreator ILeaderLines::GetCreator ( );
__declspec(implementation_key(6299)) IDispatchPtr ILeaderLines::GetParent ( );
__declspec(implementation_key(6300)) BorderPtr ILeaderLines::GetBorder ( );
__declspec(implementation_key(6301)) HRESULT ILeaderLines::Delete ( );
__declspec(implementation_key(6302)) HRESULT ILeaderLines::Select ( );
__declspec(implementation_key(6303)) _ApplicationPtr IUpBars::GetApplication ( );
__declspec(implementation_key(6304)) enum XlCreator IUpBars::GetCreator ( );
__declspec(implementation_key(6305)) IDispatchPtr IUpBars::GetParent ( );
__declspec(implementation_key(6306)) _bstr_t IUpBars::GetName ( );
__declspec(implementation_key(6307)) _variant_t IUpBars::Select ( );
__declspec(implementation_key(6308)) BorderPtr IUpBars::GetBorder ( );
__declspec(implementation_key(6309)) _variant_t IUpBars::Delete ( );
__declspec(implementation_key(6310)) InteriorPtr IUpBars::GetInterior ( );
__declspec(implementation_key(6311)) ChartFillFormatPtr IUpBars::GetFill ( );
__declspec(implementation_key(6312)) _ApplicationPtr IDownBars::GetApplication ( );
__declspec(implementation_key(6313)) enum XlCreator IDownBars::GetCreator ( );
__declspec(implementation_key(6314)) IDispatchPtr IDownBars::GetParent ( );
__declspec(implementation_key(6315)) _bstr_t IDownBars::GetName ( );
__declspec(implementation_key(6316)) _variant_t IDownBars::Select ( );
__declspec(implementation_key(6317)) BorderPtr IDownBars::GetBorder ( );
__declspec(implementation_key(6318)) _variant_t IDownBars::Delete ( );
__declspec(implementation_key(6319)) InteriorPtr IDownBars::GetInterior ( );
__declspec(implementation_key(6320)) ChartFillFormatPtr IDownBars::GetFill ( );
__declspec(implementation_key(6321)) _ApplicationPtr IFloor::GetApplication ( );
__declspec(implementation_key(6322)) enum XlCreator IFloor::GetCreator ( );
__declspec(implementation_key(6323)) IDispatchPtr IFloor::GetParent ( );
__declspec(implementation_key(6324)) _bstr_t IFloor::GetName ( );
__declspec(implementation_key(6325)) _variant_t IFloor::Select ( );
__declspec(implementation_key(6326)) BorderPtr IFloor::GetBorder ( );
__declspec(implementation_key(6327)) _variant_t IFloor::ClearFormats ( );
__declspec(implementation_key(6328)) InteriorPtr IFloor::GetInterior ( );
__declspec(implementation_key(6329)) ChartFillFormatPtr IFloor::GetFill ( );
__declspec(implementation_key(6330)) _variant_t IFloor::GetPictureType ( );
__declspec(implementation_key(6331)) void IFloor::PutPictureType ( const _variant_t & RHS );
__declspec(implementation_key(6332)) HRESULT IFloor::Paste ( );
__declspec(implementation_key(6333)) _ApplicationPtr IWalls::GetApplication ( );
__declspec(implementation_key(6334)) enum XlCreator IWalls::GetCreator ( );
__declspec(implementation_key(6335)) IDispatchPtr IWalls::GetParent ( );
__declspec(implementation_key(6336)) _bstr_t IWalls::GetName ( );
__declspec(implementation_key(6337)) _variant_t IWalls::Select ( );
__declspec(implementation_key(6338)) BorderPtr IWalls::GetBorder ( );
__declspec(implementation_key(6339)) _variant_t IWalls::ClearFormats ( );
__declspec(implementation_key(6340)) InteriorPtr IWalls::GetInterior ( );
__declspec(implementation_key(6341)) ChartFillFormatPtr IWalls::GetFill ( );
__declspec(implementation_key(6342)) _variant_t IWalls::GetPictureType ( );
__declspec(implementation_key(6343)) void IWalls::PutPictureType ( const _variant_t & RHS );
__declspec(implementation_key(6344)) HRESULT IWalls::Paste ( );
__declspec(implementation_key(6345)) _variant_t IWalls::GetPictureUnit ( );
__declspec(implementation_key(6346)) void IWalls::PutPictureUnit ( const _variant_t & RHS );
__declspec(implementation_key(6347)) _ApplicationPtr ITickLabels::GetApplication ( );
__declspec(implementation_key(6348)) enum XlCreator ITickLabels::GetCreator ( );
__declspec(implementation_key(6349)) IDispatchPtr ITickLabels::GetParent ( );
__declspec(implementation_key(6350)) _variant_t ITickLabels::Delete ( );
__declspec(implementation_key(6351)) FontPtr ITickLabels::GetFont ( );
__declspec(implementation_key(6352)) _bstr_t ITickLabels::GetName ( );
__declspec(implementation_key(6353)) _bstr_t ITickLabels::GetNumberFormat ( );
__declspec(implementation_key(6354)) void ITickLabels::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(6355)) VARIANT_BOOL ITickLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(6356)) void ITickLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6357)) _variant_t ITickLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(6358)) void ITickLabels::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(6359)) enum XlTickLabelOrientation ITickLabels::GetOrientation ( );
__declspec(implementation_key(6360)) void ITickLabels::PutOrientation ( enum XlTickLabelOrientation RHS );
__declspec(implementation_key(6361)) _variant_t ITickLabels::Select ( );
__declspec(implementation_key(6362)) long ITickLabels::GetReadingOrder ( );
__declspec(implementation_key(6363)) void ITickLabels::PutReadingOrder ( long RHS );
__declspec(implementation_key(6364)) _variant_t ITickLabels::GetAutoScaleFont ( );
__declspec(implementation_key(6365)) void ITickLabels::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(6366)) long ITickLabels::GetDepth ( );
__declspec(implementation_key(6367)) long ITickLabels::GetOffset ( );
__declspec(implementation_key(6368)) void ITickLabels::PutOffset ( long RHS );
__declspec(implementation_key(6369)) long ITickLabels::GetAlignment ( );
__declspec(implementation_key(6370)) void ITickLabels::PutAlignment ( long RHS );
__declspec(implementation_key(6371)) _ApplicationPtr IPlotArea::GetApplication ( );
__declspec(implementation_key(6372)) enum XlCreator IPlotArea::GetCreator ( );
__declspec(implementation_key(6373)) IDispatchPtr IPlotArea::GetParent ( );
__declspec(implementation_key(6374)) _bstr_t IPlotArea::GetName ( );
__declspec(implementation_key(6375)) _variant_t IPlotArea::Select ( );
__declspec(implementation_key(6376)) BorderPtr IPlotArea::GetBorder ( );
__declspec(implementation_key(6377)) _variant_t IPlotArea::ClearFormats ( );
__declspec(implementation_key(6378)) double IPlotArea::GetHeight ( );
__declspec(implementation_key(6379)) void IPlotArea::PutHeight ( double RHS );
__declspec(implementation_key(6380)) InteriorPtr IPlotArea::GetInterior ( );
__declspec(implementation_key(6381)) ChartFillFormatPtr IPlotArea::GetFill ( );
__declspec(implementation_key(6382)) double IPlotArea::GetLeft ( );
__declspec(implementation_key(6383)) void IPlotArea::PutLeft ( double RHS );
__declspec(implementation_key(6384)) double IPlotArea::GetTop ( );
__declspec(implementation_key(6385)) void IPlotArea::PutTop ( double RHS );
__declspec(implementation_key(6386)) double IPlotArea::GetWidth ( );
__declspec(implementation_key(6387)) void IPlotArea::PutWidth ( double RHS );
__declspec(implementation_key(6388)) double IPlotArea::GetInsideLeft ( );
__declspec(implementation_key(6389)) double IPlotArea::GetInsideTop ( );
__declspec(implementation_key(6390)) double IPlotArea::GetInsideWidth ( );
__declspec(implementation_key(6391)) double IPlotArea::GetInsideHeight ( );
__declspec(implementation_key(6392)) _ApplicationPtr IChartArea::GetApplication ( );
__declspec(implementation_key(6393)) enum XlCreator IChartArea::GetCreator ( );
__declspec(implementation_key(6394)) IDispatchPtr IChartArea::GetParent ( );
__declspec(implementation_key(6395)) _bstr_t IChartArea::GetName ( );
__declspec(implementation_key(6396)) _variant_t IChartArea::Select ( );
__declspec(implementation_key(6397)) BorderPtr IChartArea::GetBorder ( );
__declspec(implementation_key(6398)) _variant_t IChartArea::Clear ( );
__declspec(implementation_key(6399)) _variant_t IChartArea::ClearContents ( );
__declspec(implementation_key(6400)) _variant_t IChartArea::Copy ( );
__declspec(implementation_key(6401)) FontPtr IChartArea::GetFont ( );
__declspec(implementation_key(6402)) VARIANT_BOOL IChartArea::GetShadow ( );
__declspec(implementation_key(6403)) void IChartArea::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(6404)) _variant_t IChartArea::ClearFormats ( );
__declspec(implementation_key(6405)) double IChartArea::GetHeight ( );
__declspec(implementation_key(6406)) void IChartArea::PutHeight ( double RHS );
__declspec(implementation_key(6407)) InteriorPtr IChartArea::GetInterior ( );
__declspec(implementation_key(6408)) ChartFillFormatPtr IChartArea::GetFill ( );
__declspec(implementation_key(6409)) double IChartArea::GetLeft ( );
__declspec(implementation_key(6410)) void IChartArea::PutLeft ( double RHS );
__declspec(implementation_key(6411)) double IChartArea::GetTop ( );
__declspec(implementation_key(6412)) void IChartArea::PutTop ( double RHS );
__declspec(implementation_key(6413)) double IChartArea::GetWidth ( );
__declspec(implementation_key(6414)) void IChartArea::PutWidth ( double RHS );
__declspec(implementation_key(6415)) _variant_t IChartArea::GetAutoScaleFont ( );
__declspec(implementation_key(6416)) void IChartArea::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(6417)) _ApplicationPtr ILegend::GetApplication ( );
__declspec(implementation_key(6418)) enum XlCreator ILegend::GetCreator ( );
__declspec(implementation_key(6419)) IDispatchPtr ILegend::GetParent ( );
__declspec(implementation_key(6420)) _bstr_t ILegend::GetName ( );
__declspec(implementation_key(6421)) _variant_t ILegend::Select ( );
__declspec(implementation_key(6422)) BorderPtr ILegend::GetBorder ( );
__declspec(implementation_key(6423)) _variant_t ILegend::Delete ( );
__declspec(implementation_key(6424)) FontPtr ILegend::GetFont ( );
__declspec(implementation_key(6425)) IDispatchPtr ILegend::LegendEntries ( const _variant_t & Index );
__declspec(implementation_key(6426)) enum XlLegendPosition ILegend::GetPosition ( );
__declspec(implementation_key(6427)) void ILegend::PutPosition ( enum XlLegendPosition RHS );
__declspec(implementation_key(6428)) VARIANT_BOOL ILegend::GetShadow ( );
__declspec(implementation_key(6429)) void ILegend::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(6430)) _variant_t ILegend::Clear ( );
__declspec(implementation_key(6431)) double ILegend::GetHeight ( );
__declspec(implementation_key(6432)) void ILegend::PutHeight ( double RHS );
__declspec(implementation_key(6433)) InteriorPtr ILegend::GetInterior ( );
__declspec(implementation_key(6434)) ChartFillFormatPtr ILegend::GetFill ( );
__declspec(implementation_key(6435)) double ILegend::GetLeft ( );
__declspec(implementation_key(6436)) void ILegend::PutLeft ( double RHS );
__declspec(implementation_key(6437)) double ILegend::GetTop ( );
__declspec(implementation_key(6438)) void ILegend::PutTop ( double RHS );
__declspec(implementation_key(6439)) double ILegend::GetWidth ( );
__declspec(implementation_key(6440)) void ILegend::PutWidth ( double RHS );
__declspec(implementation_key(6441)) _variant_t ILegend::GetAutoScaleFont ( );
__declspec(implementation_key(6442)) void ILegend::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(6443)) _ApplicationPtr IErrorBars::GetApplication ( );
__declspec(implementation_key(6444)) enum XlCreator IErrorBars::GetCreator ( );
__declspec(implementation_key(6445)) IDispatchPtr IErrorBars::GetParent ( );
__declspec(implementation_key(6446)) _bstr_t IErrorBars::GetName ( );
__declspec(implementation_key(6447)) _variant_t IErrorBars::Select ( );
__declspec(implementation_key(6448)) BorderPtr IErrorBars::GetBorder ( );
__declspec(implementation_key(6449)) _variant_t IErrorBars::Delete ( );
__declspec(implementation_key(6450)) _variant_t IErrorBars::ClearFormats ( );
__declspec(implementation_key(6451)) enum XlEndStyleCap IErrorBars::GetEndStyle ( );
__declspec(implementation_key(6452)) void IErrorBars::PutEndStyle ( enum XlEndStyleCap RHS );
__declspec(implementation_key(6453)) _ApplicationPtr IDataTable::GetApplication ( );
__declspec(implementation_key(6454)) enum XlCreator IDataTable::GetCreator ( );
__declspec(implementation_key(6455)) IDispatchPtr IDataTable::GetParent ( );
__declspec(implementation_key(6456)) VARIANT_BOOL IDataTable::GetShowLegendKey ( );
__declspec(implementation_key(6457)) void IDataTable::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(6458)) VARIANT_BOOL IDataTable::GetHasBorderHorizontal ( );
__declspec(implementation_key(6459)) void IDataTable::PutHasBorderHorizontal ( VARIANT_BOOL RHS );
__declspec(implementation_key(6460)) VARIANT_BOOL IDataTable::GetHasBorderVertical ( );
__declspec(implementation_key(6461)) void IDataTable::PutHasBorderVertical ( VARIANT_BOOL RHS );
__declspec(implementation_key(6462)) VARIANT_BOOL IDataTable::GetHasBorderOutline ( );
__declspec(implementation_key(6463)) void IDataTable::PutHasBorderOutline ( VARIANT_BOOL RHS );
__declspec(implementation_key(6464)) BorderPtr IDataTable::GetBorder ( );
__declspec(implementation_key(6465)) FontPtr IDataTable::GetFont ( );
__declspec(implementation_key(6466)) HRESULT IDataTable::Select ( );
__declspec(implementation_key(6467)) HRESULT IDataTable::Delete ( );
__declspec(implementation_key(6468)) _variant_t IDataTable::GetAutoScaleFont ( );
__declspec(implementation_key(6469)) void IDataTable::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(6470)) _ApplicationPtr IPhonetic::GetApplication ( );
__declspec(implementation_key(6471)) enum XlCreator IPhonetic::GetCreator ( );
__declspec(implementation_key(6472)) IDispatchPtr IPhonetic::GetParent ( );
__declspec(implementation_key(6473)) VARIANT_BOOL IPhonetic::GetVisible ( );
__declspec(implementation_key(6474)) void IPhonetic::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(6475)) long IPhonetic::GetCharacterType ( );
__declspec(implementation_key(6476)) void IPhonetic::PutCharacterType ( long RHS );
__declspec(implementation_key(6477)) long IPhonetic::GetAlignment ( );
__declspec(implementation_key(6478)) void IPhonetic::PutAlignment ( long RHS );
__declspec(implementation_key(6479)) FontPtr IPhonetic::GetFont ( );
__declspec(implementation_key(6480)) _bstr_t IPhonetic::GetText ( );
__declspec(implementation_key(6481)) void IPhonetic::PutText ( _bstr_t RHS );
__declspec(implementation_key(6482)) _ApplicationPtr IShape::GetApplication ( );
__declspec(implementation_key(6483)) enum XlCreator IShape::GetCreator ( );
__declspec(implementation_key(6484)) IDispatchPtr IShape::GetParent ( );
__declspec(implementation_key(6485)) HRESULT IShape::Apply ( );
__declspec(implementation_key(6486)) HRESULT IShape::Delete ( );
__declspec(implementation_key(6487)) ShapePtr IShape::Duplicate ( );
__declspec(implementation_key(6488)) HRESULT IShape::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(6489)) HRESULT IShape::IncrementLeft ( float Increment );
__declspec(implementation_key(6490)) HRESULT IShape::IncrementRotation ( float Increment );
__declspec(implementation_key(6491)) HRESULT IShape::IncrementTop ( float Increment );
__declspec(implementation_key(6492)) HRESULT IShape::PickUp ( );
__declspec(implementation_key(6493)) HRESULT IShape::RerouteConnections ( );
__declspec(implementation_key(6494)) HRESULT IShape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(6495)) HRESULT IShape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(6496)) HRESULT IShape::Select ( const _variant_t & Replace );
__declspec(implementation_key(6497)) HRESULT IShape::SetShapesDefaultProperties ( );
__declspec(implementation_key(6498)) ShapeRangePtr IShape::Ungroup ( );
__declspec(implementation_key(6499)) HRESULT IShape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(6500)) AdjustmentsPtr IShape::GetAdjustments ( );
__declspec(implementation_key(6501)) TextFramePtr IShape::GetTextFrame ( );
__declspec(implementation_key(6502)) enum Office::MsoAutoShapeType IShape::GetAutoShapeType ( );
__declspec(implementation_key(6503)) void IShape::PutAutoShapeType ( enum Office::MsoAutoShapeType RHS );
__declspec(implementation_key(6504)) CalloutFormatPtr IShape::GetCallout ( );
__declspec(implementation_key(6505)) long IShape::GetConnectionSiteCount ( );
__declspec(implementation_key(6506)) enum Office::MsoTriState IShape::GetConnector ( );
__declspec(implementation_key(6507)) ConnectorFormatPtr IShape::GetConnectorFormat ( );
__declspec(implementation_key(6508)) FillFormatPtr IShape::GetFill ( );
__declspec(implementation_key(6509)) GroupShapesPtr IShape::GetGroupItems ( );
__declspec(implementation_key(6510)) float IShape::GetHeight ( );
__declspec(implementation_key(6511)) void IShape::PutHeight ( float RHS );
__declspec(implementation_key(6512)) enum Office::MsoTriState IShape::GetHorizontalFlip ( );
__declspec(implementation_key(6513)) float IShape::GetLeft ( );
__declspec(implementation_key(6514)) void IShape::PutLeft ( float RHS );
__declspec(implementation_key(6515)) LineFormatPtr IShape::GetLine ( );
__declspec(implementation_key(6516)) enum Office::MsoTriState IShape::GetLockAspectRatio ( );
__declspec(implementation_key(6517)) void IShape::PutLockAspectRatio ( enum Office::MsoTriState RHS );
__declspec(implementation_key(6518)) _bstr_t IShape::GetName ( );
__declspec(implementation_key(6519)) void IShape::PutName ( _bstr_t RHS );
__declspec(implementation_key(6520)) ShapeNodesPtr IShape::GetNodes ( );
__declspec(implementation_key(6521)) float IShape::GetRotation ( );
__declspec(implementation_key(6522)) void IShape::PutRotation ( float RHS );
__declspec(implementation_key(6523)) PictureFormatPtr IShape::GetPictureFormat ( );
__declspec(implementation_key(6524)) ShadowFormatPtr IShape::GetShadow ( );
__declspec(implementation_key(6525)) TextEffectFormatPtr IShape::GetTextEffect ( );
__declspec(implementation_key(6526)) ThreeDFormatPtr IShape::GetThreeD ( );
__declspec(implementation_key(6527)) float IShape::GetTop ( );
__declspec(implementation_key(6528)) void IShape::PutTop ( float RHS );
__declspec(implementation_key(6529)) enum Office::MsoShapeType IShape::GetType ( );
__declspec(implementation_key(6530)) enum Office::MsoTriState IShape::GetVerticalFlip ( );
__declspec(implementation_key(6531)) _variant_t IShape::GetVertices ( );
__declspec(implementation_key(6532)) enum Office::MsoTriState IShape::GetVisible ( );
__declspec(implementation_key(6533)) void IShape::PutVisible ( enum Office::MsoTriState RHS );
__declspec(implementation_key(6534)) float IShape::GetWidth ( );
__declspec(implementation_key(6535)) void IShape::PutWidth ( float RHS );
__declspec(implementation_key(6536)) long IShape::GetZOrderPosition ( );
__declspec(implementation_key(6537)) HyperlinkPtr IShape::GetHyperlink ( );
__declspec(implementation_key(6538)) enum Office::MsoBlackWhiteMode IShape::GetBlackWhiteMode ( );
__declspec(implementation_key(6539)) void IShape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode RHS );
__declspec(implementation_key(6540)) IDispatchPtr IShape::GetDrawingObject ( );
__declspec(implementation_key(6541)) _bstr_t IShape::GetOnAction ( );
__declspec(implementation_key(6542)) void IShape::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(6543)) VARIANT_BOOL IShape::GetLocked ( );
__declspec(implementation_key(6544)) void IShape::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6545)) RangePtr IShape::GetTopLeftCell ( );
__declspec(implementation_key(6546)) RangePtr IShape::GetBottomRightCell ( );
__declspec(implementation_key(6547)) enum XlPlacement IShape::GetPlacement ( );
__declspec(implementation_key(6548)) void IShape::PutPlacement ( enum XlPlacement RHS );
__declspec(implementation_key(6549)) HRESULT IShape::Copy ( );
__declspec(implementation_key(6550)) HRESULT IShape::Cut ( );
__declspec(implementation_key(6551)) HRESULT IShape::CopyPicture ( const _variant_t & Appearance, const _variant_t & Format );
__declspec(implementation_key(6552)) ControlFormatPtr IShape::GetControlFormat ( );
__declspec(implementation_key(6553)) LinkFormatPtr IShape::GetLinkFormat ( );
__declspec(implementation_key(6554)) OLEFormatPtr IShape::GetOLEFormat ( );
__declspec(implementation_key(6555)) enum XlFormControl IShape::GetFormControlType ( );
__declspec(implementation_key(6556)) _bstr_t IShape::GetAlternativeText ( );
__declspec(implementation_key(6557)) void IShape::PutAlternativeText ( _bstr_t RHS );
__declspec(implementation_key(6558)) Office::ScriptPtr IShape::GetScript ( );
__declspec(implementation_key(6559)) DiagramNodePtr IShape::GetDiagramNode ( );
__declspec(implementation_key(6560)) enum Office::MsoTriState IShape::GetHasDiagramNode ( );
__declspec(implementation_key(6561)) DiagramPtr IShape::GetDiagram ( );
__declspec(implementation_key(6562)) enum Office::MsoTriState IShape::GetHasDiagram ( );
__declspec(implementation_key(6563)) enum Office::MsoTriState IShape::GetChild ( );
__declspec(implementation_key(6564)) ShapePtr IShape::GetParentGroup ( );
__declspec(implementation_key(6565)) Office::CanvasShapesPtr IShape::GetCanvasItems ( );
__declspec(implementation_key(6566)) long IShape::GetID ( );
__declspec(implementation_key(6567)) HRESULT IShape::CanvasCropLeft ( float Increment );
__declspec(implementation_key(6568)) HRESULT IShape::CanvasCropTop ( float Increment );
__declspec(implementation_key(6569)) HRESULT IShape::CanvasCropRight ( float Increment );
__declspec(implementation_key(6570)) HRESULT IShape::CanvasCropBottom ( float Increment );
__declspec(implementation_key(6571)) _ApplicationPtr IShapes::GetApplication ( );
__declspec(implementation_key(6572)) enum XlCreator IShapes::GetCreator ( );
__declspec(implementation_key(6573)) IDispatchPtr IShapes::GetParent ( );
__declspec(implementation_key(6574)) long IShapes::GetCount ( );
__declspec(implementation_key(6575)) ShapePtr IShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(6576)) ShapePtr IShapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(6577)) IUnknownPtr IShapes::Get_NewEnum ( );
__declspec(implementation_key(6578)) ShapePtr IShapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(6579)) ShapePtr IShapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(6580)) ShapePtr IShapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(6581)) ShapePtr IShapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(6582)) ShapePtr IShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(6583)) ShapePtr IShapes::AddPicture ( _bstr_t Filename, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(6584)) ShapePtr IShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(6585)) ShapePtr IShapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(6586)) ShapePtr IShapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top );
__declspec(implementation_key(6587)) ShapePtr IShapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(6588)) FreeformBuilderPtr IShapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(6589)) ShapeRangePtr IShapes::GetRange ( const _variant_t & Index );
__declspec(implementation_key(6590)) HRESULT IShapes::SelectAll ( );
__declspec(implementation_key(6591)) ShapePtr IShapes::AddFormControl ( enum XlFormControl Type, long Left, long Top, long Width, long Height );
__declspec(implementation_key(6592)) ShapePtr IShapes::AddOLEObject ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(6593)) ShapePtr IShapes::AddDiagram ( enum Office::MsoDiagramType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(6594)) ShapePtr IShapes::AddCanvas ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(6595)) _ApplicationPtr IShapeRange::GetApplication ( );
__declspec(implementation_key(6596)) enum XlCreator IShapeRange::GetCreator ( );
__declspec(implementation_key(6597)) IDispatchPtr IShapeRange::GetParent ( );
__declspec(implementation_key(6598)) long IShapeRange::GetCount ( );
__declspec(implementation_key(6599)) ShapePtr IShapeRange::Item ( const _variant_t & Index );
__declspec(implementation_key(6600)) ShapePtr IShapeRange::_Default ( const _variant_t & Index );
__declspec(implementation_key(6601)) IUnknownPtr IShapeRange::Get_NewEnum ( );
__declspec(implementation_key(6602)) HRESULT IShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(6603)) HRESULT IShapeRange::Apply ( );
__declspec(implementation_key(6604)) HRESULT IShapeRange::Delete ( );
__declspec(implementation_key(6605)) HRESULT IShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(6606)) ShapeRangePtr IShapeRange::Duplicate ( );
__declspec(implementation_key(6607)) HRESULT IShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(6608)) HRESULT IShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(6609)) HRESULT IShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(6610)) HRESULT IShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(6611)) ShapePtr IShapeRange::Group ( );
__declspec(implementation_key(6612)) HRESULT IShapeRange::PickUp ( );
__declspec(implementation_key(6613)) HRESULT IShapeRange::RerouteConnections ( );
__declspec(implementation_key(6614)) ShapePtr IShapeRange::Regroup ( );
__declspec(implementation_key(6615)) HRESULT IShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(6616)) HRESULT IShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(6617)) HRESULT IShapeRange::Select ( const _variant_t & Replace );
__declspec(implementation_key(6618)) HRESULT IShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(6619)) ShapeRangePtr IShapeRange::Ungroup ( );
__declspec(implementation_key(6620)) HRESULT IShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(6621)) AdjustmentsPtr IShapeRange::GetAdjustments ( );
__declspec(implementation_key(6622)) TextFramePtr IShapeRange::GetTextFrame ( );
__declspec(implementation_key(6623)) enum Office::MsoAutoShapeType IShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(6624)) void IShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType RHS );
__declspec(implementation_key(6625)) CalloutFormatPtr IShapeRange::GetCallout ( );
__declspec(implementation_key(6626)) long IShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(6627)) enum Office::MsoTriState IShapeRange::GetConnector ( );
__declspec(implementation_key(6628)) ConnectorFormatPtr IShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(6629)) FillFormatPtr IShapeRange::GetFill ( );
__declspec(implementation_key(6630)) GroupShapesPtr IShapeRange::GetGroupItems ( );
__declspec(implementation_key(6631)) float IShapeRange::GetHeight ( );
__declspec(implementation_key(6632)) void IShapeRange::PutHeight ( float RHS );
__declspec(implementation_key(6633)) enum Office::MsoTriState IShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(6634)) float IShapeRange::GetLeft ( );
__declspec(implementation_key(6635)) void IShapeRange::PutLeft ( float RHS );
__declspec(implementation_key(6636)) LineFormatPtr IShapeRange::GetLine ( );
__declspec(implementation_key(6637)) enum Office::MsoTriState IShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(6638)) void IShapeRange::PutLockAspectRatio ( enum Office::MsoTriState RHS );
__declspec(implementation_key(6639)) _bstr_t IShapeRange::GetName ( );
__declspec(implementation_key(6640)) void IShapeRange::PutName ( _bstr_t RHS );
__declspec(implementation_key(6641)) ShapeNodesPtr IShapeRange::GetNodes ( );
__declspec(implementation_key(6642)) float IShapeRange::GetRotation ( );
__declspec(implementation_key(6643)) void IShapeRange::PutRotation ( float RHS );
__declspec(implementation_key(6644)) PictureFormatPtr IShapeRange::GetPictureFormat ( );
__declspec(implementation_key(6645)) ShadowFormatPtr IShapeRange::GetShadow ( );
__declspec(implementation_key(6646)) TextEffectFormatPtr IShapeRange::GetTextEffect ( );
__declspec(implementation_key(6647)) ThreeDFormatPtr IShapeRange::GetThreeD ( );
__declspec(implementation_key(6648)) float IShapeRange::GetTop ( );
__declspec(implementation_key(6649)) void IShapeRange::PutTop ( float RHS );
__declspec(implementation_key(6650)) enum Office::MsoShapeType IShapeRange::GetType ( );
__declspec(implementation_key(6651)) enum Office::MsoTriState IShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(6652)) _variant_t IShapeRange::GetVertices ( );
__declspec(implementation_key(6653)) enum Office::MsoTriState IShapeRange::GetVisible ( );
__declspec(implementation_key(6654)) void IShapeRange::PutVisible ( enum Office::MsoTriState RHS );
__declspec(implementation_key(6655)) float IShapeRange::GetWidth ( );
__declspec(implementation_key(6656)) void IShapeRange::PutWidth ( float RHS );
__declspec(implementation_key(6657)) long IShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(6658)) enum Office::MsoBlackWhiteMode IShapeRange::GetBlackWhiteMode ( );
__declspec(implementation_key(6659)) void IShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode RHS );
__declspec(implementation_key(6660)) _bstr_t IShapeRange::GetAlternativeText ( );
__declspec(implementation_key(6661)) void IShapeRange::PutAlternativeText ( _bstr_t RHS );
__declspec(implementation_key(6662)) DiagramNodePtr IShapeRange::GetDiagramNode ( );
__declspec(implementation_key(6663)) enum Office::MsoTriState IShapeRange::GetHasDiagramNode ( );
__declspec(implementation_key(6664)) DiagramPtr IShapeRange::GetDiagram ( );
__declspec(implementation_key(6665)) enum Office::MsoTriState IShapeRange::GetHasDiagram ( );
__declspec(implementation_key(6666)) enum Office::MsoTriState IShapeRange::GetChild ( );
__declspec(implementation_key(6667)) ShapePtr IShapeRange::GetParentGroup ( );
__declspec(implementation_key(6668)) Office::CanvasShapesPtr IShapeRange::GetCanvasItems ( );
__declspec(implementation_key(6669)) long IShapeRange::GetID ( );
__declspec(implementation_key(6670)) HRESULT IShapeRange::CanvasCropLeft ( float Increment );
__declspec(implementation_key(6671)) HRESULT IShapeRange::CanvasCropTop ( float Increment );
__declspec(implementation_key(6672)) HRESULT IShapeRange::CanvasCropRight ( float Increment );
__declspec(implementation_key(6673)) HRESULT IShapeRange::CanvasCropBottom ( float Increment );
__declspec(implementation_key(6674)) _ApplicationPtr IGroupShapes::GetApplication ( );
__declspec(implementation_key(6675)) enum XlCreator IGroupShapes::GetCreator ( );
__declspec(implementation_key(6676)) IDispatchPtr IGroupShapes::GetParent ( );
__declspec(implementation_key(6677)) long IGroupShapes::GetCount ( );
__declspec(implementation_key(6678)) ShapePtr IGroupShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(6679)) ShapePtr IGroupShapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(6680)) IUnknownPtr IGroupShapes::Get_NewEnum ( );
__declspec(implementation_key(6681)) ShapeRangePtr IGroupShapes::GetRange ( const _variant_t & Index );
__declspec(implementation_key(6682)) _ApplicationPtr ITextFrame::GetApplication ( );
__declspec(implementation_key(6683)) enum XlCreator ITextFrame::GetCreator ( );
__declspec(implementation_key(6684)) IDispatchPtr ITextFrame::GetParent ( );
__declspec(implementation_key(6685)) float ITextFrame::GetMarginBottom ( );
__declspec(implementation_key(6686)) void ITextFrame::PutMarginBottom ( float RHS );
__declspec(implementation_key(6687)) float ITextFrame::GetMarginLeft ( );
__declspec(implementation_key(6688)) void ITextFrame::PutMarginLeft ( float RHS );
__declspec(implementation_key(6689)) float ITextFrame::GetMarginRight ( );
__declspec(implementation_key(6690)) void ITextFrame::PutMarginRight ( float RHS );
__declspec(implementation_key(6691)) float ITextFrame::GetMarginTop ( );
__declspec(implementation_key(6692)) void ITextFrame::PutMarginTop ( float RHS );
__declspec(implementation_key(6693)) enum Office::MsoTextOrientation ITextFrame::GetOrientation ( );
__declspec(implementation_key(6694)) void ITextFrame::PutOrientation ( enum Office::MsoTextOrientation RHS );
__declspec(implementation_key(6695)) CharactersPtr ITextFrame::Characters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(6696)) enum XlHAlign ITextFrame::GetHorizontalAlignment ( );
__declspec(implementation_key(6697)) void ITextFrame::PutHorizontalAlignment ( enum XlHAlign RHS );
__declspec(implementation_key(6698)) enum XlVAlign ITextFrame::GetVerticalAlignment ( );
__declspec(implementation_key(6699)) void ITextFrame::PutVerticalAlignment ( enum XlVAlign RHS );
__declspec(implementation_key(6700)) VARIANT_BOOL ITextFrame::GetAutoSize ( );
__declspec(implementation_key(6701)) void ITextFrame::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(6702)) long ITextFrame::GetReadingOrder ( );
__declspec(implementation_key(6703)) void ITextFrame::PutReadingOrder ( long RHS );
__declspec(implementation_key(6704)) VARIANT_BOOL ITextFrame::GetAutoMargins ( );
__declspec(implementation_key(6705)) void ITextFrame::PutAutoMargins ( VARIANT_BOOL RHS );
__declspec(implementation_key(6706)) _ApplicationPtr IConnectorFormat::GetApplication ( );
__declspec(implementation_key(6707)) enum XlCreator IConnectorFormat::GetCreator ( );
__declspec(implementation_key(6708)) IDispatchPtr IConnectorFormat::GetParent ( );
__declspec(implementation_key(6709)) HRESULT IConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(6710)) HRESULT IConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(6711)) HRESULT IConnectorFormat::EndConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(6712)) HRESULT IConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(6713)) enum Office::MsoTriState IConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(6714)) ShapePtr IConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(6715)) long IConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(6716)) enum Office::MsoTriState IConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(6717)) ShapePtr IConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(6718)) long IConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(6719)) enum Office::MsoConnectorType IConnectorFormat::GetType ( );
__declspec(implementation_key(6720)) void IConnectorFormat::PutType ( enum Office::MsoConnectorType RHS );
__declspec(implementation_key(6721)) _ApplicationPtr IFreeformBuilder::GetApplication ( );
__declspec(implementation_key(6722)) enum XlCreator IFreeformBuilder::GetCreator ( );
__declspec(implementation_key(6723)) IDispatchPtr IFreeformBuilder::GetParent ( );
__declspec(implementation_key(6724)) HRESULT IFreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, const _variant_t & X2, const _variant_t & Y2, const _variant_t & X3, const _variant_t & Y3 );
__declspec(implementation_key(6725)) ShapePtr IFreeformBuilder::ConvertToShape ( );
__declspec(implementation_key(6726)) _ApplicationPtr IControlFormat::GetApplication ( );
__declspec(implementation_key(6727)) enum XlCreator IControlFormat::GetCreator ( );
__declspec(implementation_key(6728)) IDispatchPtr IControlFormat::GetParent ( );
__declspec(implementation_key(6729)) HRESULT IControlFormat::AddItem ( _bstr_t Text, const _variant_t & Index );
__declspec(implementation_key(6730)) HRESULT IControlFormat::RemoveAllItems ( );
__declspec(implementation_key(6731)) HRESULT IControlFormat::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(6732)) long IControlFormat::GetDropDownLines ( );
__declspec(implementation_key(6733)) void IControlFormat::PutDropDownLines ( long RHS );
__declspec(implementation_key(6734)) VARIANT_BOOL IControlFormat::GetEnabled ( );
__declspec(implementation_key(6735)) void IControlFormat::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(6736)) long IControlFormat::GetLargeChange ( );
__declspec(implementation_key(6737)) void IControlFormat::PutLargeChange ( long RHS );
__declspec(implementation_key(6738)) _bstr_t IControlFormat::GetLinkedCell ( );
__declspec(implementation_key(6739)) void IControlFormat::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(6740)) _variant_t IControlFormat::List ( const _variant_t & Index );
__declspec(implementation_key(6741)) long IControlFormat::GetListCount ( );
__declspec(implementation_key(6742)) void IControlFormat::PutListCount ( long RHS );
__declspec(implementation_key(6743)) _bstr_t IControlFormat::GetListFillRange ( );
__declspec(implementation_key(6744)) void IControlFormat::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(6745)) long IControlFormat::GetListIndex ( );
__declspec(implementation_key(6746)) void IControlFormat::PutListIndex ( long RHS );
__declspec(implementation_key(6747)) VARIANT_BOOL IControlFormat::GetLockedText ( );
__declspec(implementation_key(6748)) void IControlFormat::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(6749)) long IControlFormat::GetMax ( );
__declspec(implementation_key(6750)) void IControlFormat::PutMax ( long RHS );
__declspec(implementation_key(6751)) long IControlFormat::GetMin ( );
__declspec(implementation_key(6752)) void IControlFormat::PutMin ( long RHS );
__declspec(implementation_key(6753)) long IControlFormat::GetMultiSelect ( );
__declspec(implementation_key(6754)) void IControlFormat::PutMultiSelect ( long RHS );
__declspec(implementation_key(6755)) VARIANT_BOOL IControlFormat::GetPrintObject ( );
__declspec(implementation_key(6756)) void IControlFormat::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(6757)) long IControlFormat::GetSmallChange ( );
__declspec(implementation_key(6758)) void IControlFormat::PutSmallChange ( long RHS );
__declspec(implementation_key(6759)) long IControlFormat::Get_Default ( );
__declspec(implementation_key(6760)) void IControlFormat::Put_Default ( long RHS );
__declspec(implementation_key(6761)) long IControlFormat::GetValue ( );
__declspec(implementation_key(6762)) void IControlFormat::PutValue ( long RHS );
__declspec(implementation_key(6763)) _ApplicationPtr IOLEFormat::GetApplication ( );
__declspec(implementation_key(6764)) enum XlCreator IOLEFormat::GetCreator ( );
__declspec(implementation_key(6765)) IDispatchPtr IOLEFormat::GetParent ( );
__declspec(implementation_key(6766)) HRESULT IOLEFormat::Activate ( );
__declspec(implementation_key(6767)) IDispatchPtr IOLEFormat::GetObject ( );
__declspec(implementation_key(6768)) _bstr_t IOLEFormat::GetprogID ( );
__declspec(implementation_key(6769)) HRESULT IOLEFormat::Verb ( const _variant_t & Verb );
__declspec(implementation_key(6770)) _ApplicationPtr ILinkFormat::GetApplication ( );
__declspec(implementation_key(6771)) enum XlCreator ILinkFormat::GetCreator ( );
__declspec(implementation_key(6772)) IDispatchPtr ILinkFormat::GetParent ( );
__declspec(implementation_key(6773)) VARIANT_BOOL ILinkFormat::GetAutoUpdate ( );
__declspec(implementation_key(6774)) void ILinkFormat::PutAutoUpdate ( VARIANT_BOOL RHS );
__declspec(implementation_key(6775)) VARIANT_BOOL ILinkFormat::GetLocked ( );
__declspec(implementation_key(6776)) void ILinkFormat::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6777)) HRESULT ILinkFormat::Update ( );
__declspec(implementation_key(6778)) _ApplicationPtr IPublishObjects::GetApplication ( );
__declspec(implementation_key(6779)) enum XlCreator IPublishObjects::GetCreator ( );
__declspec(implementation_key(6780)) IDispatchPtr IPublishObjects::GetParent ( );
__declspec(implementation_key(6781)) PublishObjectPtr IPublishObjects::Add ( enum XlSourceType SourceType, _bstr_t Filename, const _variant_t & Sheet, const _variant_t & Source, const _variant_t & HtmlType, const _variant_t & DivID, const _variant_t & Title );
__declspec(implementation_key(6782)) long IPublishObjects::GetCount ( );
__declspec(implementation_key(6783)) PublishObjectPtr IPublishObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6784)) PublishObjectPtr IPublishObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6785)) IUnknownPtr IPublishObjects::Get_NewEnum ( );
__declspec(implementation_key(6786)) HRESULT IPublishObjects::Delete ( );
__declspec(implementation_key(6787)) HRESULT IPublishObjects::Publish ( );
__declspec(implementation_key(6788)) _ApplicationPtr PublishObject::GetApplication ( );
__declspec(implementation_key(6789)) enum XlCreator PublishObject::GetCreator ( );
__declspec(implementation_key(6790)) IDispatchPtr PublishObject::GetParent ( );
__declspec(implementation_key(6791)) HRESULT PublishObject::Delete ( );
__declspec(implementation_key(6792)) HRESULT PublishObject::Publish ( const _variant_t & Create );
__declspec(implementation_key(6793)) _bstr_t PublishObject::GetDivID ( );
__declspec(implementation_key(6794)) _bstr_t PublishObject::GetSheet ( );
__declspec(implementation_key(6795)) enum XlSourceType PublishObject::GetSourceType ( );
__declspec(implementation_key(6796)) _bstr_t PublishObject::GetSource ( );
__declspec(implementation_key(6797)) enum XlHtmlType PublishObject::GetHtmlType ( );
__declspec(implementation_key(6798)) void PublishObject::PutHtmlType ( enum XlHtmlType RHS );
__declspec(implementation_key(6799)) _bstr_t PublishObject::GetTitle ( );
__declspec(implementation_key(6800)) void PublishObject::PutTitle ( _bstr_t RHS );
__declspec(implementation_key(6801)) _bstr_t PublishObject::GetFilename ( );
__declspec(implementation_key(6802)) void PublishObject::PutFilename ( _bstr_t RHS );
__declspec(implementation_key(6803)) VARIANT_BOOL PublishObject::GetAutoRepublish ( );
__declspec(implementation_key(6804)) void PublishObject::PutAutoRepublish ( VARIANT_BOOL RHS );
__declspec(implementation_key(6805)) _ApplicationPtr IOLEDBError::GetApplication ( );
__declspec(implementation_key(6806)) enum XlCreator IOLEDBError::GetCreator ( );
__declspec(implementation_key(6807)) IDispatchPtr IOLEDBError::GetParent ( );
__declspec(implementation_key(6808)) _bstr_t IOLEDBError::GetSqlState ( );
__declspec(implementation_key(6809)) _bstr_t IOLEDBError::GetErrorString ( );
__declspec(implementation_key(6810)) long IOLEDBError::GetNative ( );
__declspec(implementation_key(6811)) long IOLEDBError::GetNumber ( );
__declspec(implementation_key(6812)) long IOLEDBError::GetStage ( );
__declspec(implementation_key(6813)) _ApplicationPtr IOLEDBErrors::GetApplication ( );
__declspec(implementation_key(6814)) enum XlCreator IOLEDBErrors::GetCreator ( );
__declspec(implementation_key(6815)) IDispatchPtr IOLEDBErrors::GetParent ( );
__declspec(implementation_key(6816)) long IOLEDBErrors::GetCount ( );
__declspec(implementation_key(6817)) OLEDBErrorPtr IOLEDBErrors::Item ( long Index );
__declspec(implementation_key(6818)) OLEDBErrorPtr IOLEDBErrors::Get_Default ( long Index );
__declspec(implementation_key(6819)) IUnknownPtr IOLEDBErrors::_NewEnum ( );
__declspec(implementation_key(6820)) _ApplicationPtr IPhonetics::GetApplication ( );
__declspec(implementation_key(6821)) enum XlCreator IPhonetics::GetCreator ( );
__declspec(implementation_key(6822)) IDispatchPtr IPhonetics::GetParent ( );
__declspec(implementation_key(6823)) long IPhonetics::GetCount ( );
__declspec(implementation_key(6824)) long IPhonetics::GetStart ( );
__declspec(implementation_key(6825)) long IPhonetics::GetLength ( );
__declspec(implementation_key(6826)) VARIANT_BOOL IPhonetics::GetVisible ( );
__declspec(implementation_key(6827)) void IPhonetics::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(6828)) long IPhonetics::GetCharacterType ( );
__declspec(implementation_key(6829)) void IPhonetics::PutCharacterType ( long RHS );
__declspec(implementation_key(6830)) long IPhonetics::GetAlignment ( );
__declspec(implementation_key(6831)) void IPhonetics::PutAlignment ( long RHS );
__declspec(implementation_key(6832)) FontPtr IPhonetics::GetFont ( );
__declspec(implementation_key(6833)) IDispatchPtr IPhonetics::GetItem ( long Index );
__declspec(implementation_key(6834)) HRESULT IPhonetics::Delete ( );
__declspec(implementation_key(6835)) HRESULT IPhonetics::Add ( long Start, long Length, _bstr_t Text );
__declspec(implementation_key(6836)) _bstr_t IPhonetics::GetText ( );
__declspec(implementation_key(6837)) void IPhonetics::PutText ( _bstr_t RHS );
__declspec(implementation_key(6838)) IDispatchPtr IPhonetics::Get_Default ( long Index );
__declspec(implementation_key(6839)) IUnknownPtr IPhonetics::Get_NewEnum ( );
__declspec(implementation_key(6840)) _ApplicationPtr DefaultWebOptions::GetApplication ( );
__declspec(implementation_key(6841)) enum XlCreator DefaultWebOptions::GetCreator ( );
__declspec(implementation_key(6842)) IDispatchPtr DefaultWebOptions::GetParent ( );
__declspec(implementation_key(6843)) VARIANT_BOOL DefaultWebOptions::GetRelyOnCSS ( );
__declspec(implementation_key(6844)) void DefaultWebOptions::PutRelyOnCSS ( VARIANT_BOOL RHS );
__declspec(implementation_key(6845)) VARIANT_BOOL DefaultWebOptions::GetSaveHiddenData ( );
__declspec(implementation_key(6846)) void DefaultWebOptions::PutSaveHiddenData ( VARIANT_BOOL RHS );
__declspec(implementation_key(6847)) VARIANT_BOOL DefaultWebOptions::GetLoadPictures ( );
__declspec(implementation_key(6848)) void DefaultWebOptions::PutLoadPictures ( VARIANT_BOOL RHS );
__declspec(implementation_key(6849)) VARIANT_BOOL DefaultWebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(6850)) void DefaultWebOptions::PutOrganizeInFolder ( VARIANT_BOOL RHS );
__declspec(implementation_key(6851)) VARIANT_BOOL DefaultWebOptions::GetUpdateLinksOnSave ( );
__declspec(implementation_key(6852)) void DefaultWebOptions::PutUpdateLinksOnSave ( VARIANT_BOOL RHS );
__declspec(implementation_key(6853)) VARIANT_BOOL DefaultWebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(6854)) void DefaultWebOptions::PutUseLongFileNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(6855)) VARIANT_BOOL DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( );
__declspec(implementation_key(6856)) void DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( VARIANT_BOOL RHS );
__declspec(implementation_key(6857)) VARIANT_BOOL DefaultWebOptions::GetDownloadComponents ( );
__declspec(implementation_key(6858)) void DefaultWebOptions::PutDownloadComponents ( VARIANT_BOOL RHS );
__declspec(implementation_key(6859)) VARIANT_BOOL DefaultWebOptions::GetRelyOnVML ( );
__declspec(implementation_key(6860)) void DefaultWebOptions::PutRelyOnVML ( VARIANT_BOOL RHS );
__declspec(implementation_key(6861)) VARIANT_BOOL DefaultWebOptions::GetAllowPNG ( );
__declspec(implementation_key(6862)) void DefaultWebOptions::PutAllowPNG ( VARIANT_BOOL RHS );
__declspec(implementation_key(6863)) enum Office::MsoScreenSize DefaultWebOptions::GetScreenSize ( );
__declspec(implementation_key(6864)) void DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize RHS );
__declspec(implementation_key(6865)) long DefaultWebOptions::GetPixelsPerInch ( );
__declspec(implementation_key(6866)) void DefaultWebOptions::PutPixelsPerInch ( long RHS );
__declspec(implementation_key(6867)) _bstr_t DefaultWebOptions::GetLocationOfComponents ( );
__declspec(implementation_key(6868)) void DefaultWebOptions::PutLocationOfComponents ( _bstr_t RHS );
__declspec(implementation_key(6869)) enum Office::MsoEncoding DefaultWebOptions::GetEncoding ( );
__declspec(implementation_key(6870)) void DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding RHS );
__declspec(implementation_key(6871)) VARIANT_BOOL DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( );
__declspec(implementation_key(6872)) void DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( VARIANT_BOOL RHS );
__declspec(implementation_key(6873)) Office::WebPageFontsPtr DefaultWebOptions::GetFonts ( );
__declspec(implementation_key(6874)) _bstr_t DefaultWebOptions::GetFolderSuffix ( );
__declspec(implementation_key(6875)) enum Office::MsoTargetBrowser DefaultWebOptions::GetTargetBrowser ( );
__declspec(implementation_key(6876)) void DefaultWebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser RHS );
__declspec(implementation_key(6877)) VARIANT_BOOL DefaultWebOptions::GetSaveNewWebPagesAsWebArchives ( );
__declspec(implementation_key(6878)) void DefaultWebOptions::PutSaveNewWebPagesAsWebArchives ( VARIANT_BOOL RHS );
__declspec(implementation_key(6879)) _ApplicationPtr WebOptions::GetApplication ( );
__declspec(implementation_key(6880)) enum XlCreator WebOptions::GetCreator ( );
__declspec(implementation_key(6881)) IDispatchPtr WebOptions::GetParent ( );
__declspec(implementation_key(6882)) VARIANT_BOOL WebOptions::GetRelyOnCSS ( );
__declspec(implementation_key(6883)) void WebOptions::PutRelyOnCSS ( VARIANT_BOOL RHS );
__declspec(implementation_key(6884)) VARIANT_BOOL WebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(6885)) void WebOptions::PutOrganizeInFolder ( VARIANT_BOOL RHS );
__declspec(implementation_key(6886)) VARIANT_BOOL WebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(6887)) void WebOptions::PutUseLongFileNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(6888)) VARIANT_BOOL WebOptions::GetDownloadComponents ( );
__declspec(implementation_key(6889)) void WebOptions::PutDownloadComponents ( VARIANT_BOOL RHS );
__declspec(implementation_key(6890)) VARIANT_BOOL WebOptions::GetRelyOnVML ( );
__declspec(implementation_key(6891)) void WebOptions::PutRelyOnVML ( VARIANT_BOOL RHS );
__declspec(implementation_key(6892)) VARIANT_BOOL WebOptions::GetAllowPNG ( );
__declspec(implementation_key(6893)) void WebOptions::PutAllowPNG ( VARIANT_BOOL RHS );
__declspec(implementation_key(6894)) enum Office::MsoScreenSize WebOptions::GetScreenSize ( );
__declspec(implementation_key(6895)) void WebOptions::PutScreenSize ( enum Office::MsoScreenSize RHS );
__declspec(implementation_key(6896)) long WebOptions::GetPixelsPerInch ( );
__declspec(implementation_key(6897)) void WebOptions::PutPixelsPerInch ( long RHS );
__declspec(implementation_key(6898)) _bstr_t WebOptions::GetLocationOfComponents ( );
__declspec(implementation_key(6899)) void WebOptions::PutLocationOfComponents ( _bstr_t RHS );
__declspec(implementation_key(6900)) enum Office::MsoEncoding WebOptions::GetEncoding ( );
__declspec(implementation_key(6901)) void WebOptions::PutEncoding ( enum Office::MsoEncoding RHS );
__declspec(implementation_key(6902)) _bstr_t WebOptions::GetFolderSuffix ( );
__declspec(implementation_key(6903)) HRESULT WebOptions::UseDefaultFolderSuffix ( );
__declspec(implementation_key(6904)) enum Office::MsoTargetBrowser WebOptions::GetTargetBrowser ( );
__declspec(implementation_key(6905)) void WebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser RHS );
__declspec(implementation_key(6906)) _ApplicationPtr IPivotLayout::GetApplication ( );
__declspec(implementation_key(6907)) enum XlCreator IPivotLayout::GetCreator ( );
__declspec(implementation_key(6908)) IDispatchPtr IPivotLayout::GetParent ( );
__declspec(implementation_key(6909)) IDispatchPtr IPivotLayout::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(6910)) IDispatchPtr IPivotLayout::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(6911)) IDispatchPtr IPivotLayout::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(6912)) IDispatchPtr IPivotLayout::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(6913)) IDispatchPtr IPivotLayout::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(6914)) IDispatchPtr IPivotLayout::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(6915)) IDispatchPtr IPivotLayout::GetPivotFields ( const _variant_t & Index );
__declspec(implementation_key(6916)) CubeFieldsPtr IPivotLayout::GetCubeFields ( );
__declspec(implementation_key(6917)) PivotCachePtr IPivotLayout::GetPivotCache ( );
__declspec(implementation_key(6918)) PivotTablePtr IPivotLayout::GetPivotTable ( );
__declspec(implementation_key(6919)) _bstr_t IPivotLayout::GetInnerDetail ( );
__declspec(implementation_key(6920)) void IPivotLayout::PutInnerDetail ( _bstr_t RHS );
__declspec(implementation_key(6921)) HRESULT IPivotLayout::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AppendField );
__declspec(implementation_key(6922)) _ApplicationPtr TreeviewControl::GetApplication ( );
__declspec(implementation_key(6923)) enum XlCreator TreeviewControl::GetCreator ( );
__declspec(implementation_key(6924)) IDispatchPtr TreeviewControl::GetParent ( );
__declspec(implementation_key(6925)) _variant_t TreeviewControl::GetHidden ( );
__declspec(implementation_key(6926)) void TreeviewControl::PutHidden ( const _variant_t & RHS );
__declspec(implementation_key(6927)) _variant_t TreeviewControl::GetDrilled ( );
__declspec(implementation_key(6928)) void TreeviewControl::PutDrilled ( const _variant_t & RHS );
__declspec(implementation_key(6929)) _ApplicationPtr CubeField::GetApplication ( );
__declspec(implementation_key(6930)) enum XlCreator CubeField::GetCreator ( );
__declspec(implementation_key(6931)) IDispatchPtr CubeField::GetParent ( );
__declspec(implementation_key(6932)) enum XlCubeFieldType CubeField::GetCubeFieldType ( );
__declspec(implementation_key(6933)) _bstr_t CubeField::GetCaption ( );
__declspec(implementation_key(6934)) _bstr_t CubeField::GetName ( );
__declspec(implementation_key(6935)) _bstr_t CubeField::GetValue ( );
__declspec(implementation_key(6936)) enum XlPivotFieldOrientation CubeField::GetOrientation ( );
__declspec(implementation_key(6937)) void CubeField::PutOrientation ( enum XlPivotFieldOrientation RHS );
__declspec(implementation_key(6938)) long CubeField::GetPosition ( );
__declspec(implementation_key(6939)) void CubeField::PutPosition ( long RHS );
__declspec(implementation_key(6940)) TreeviewControlPtr CubeField::GetTreeviewControl ( );
__declspec(implementation_key(6941)) VARIANT_BOOL CubeField::GetDragToColumn ( );
__declspec(implementation_key(6942)) void CubeField::PutDragToColumn ( VARIANT_BOOL RHS );
__declspec(implementation_key(6943)) VARIANT_BOOL CubeField::GetDragToHide ( );
__declspec(implementation_key(6944)) void CubeField::PutDragToHide ( VARIANT_BOOL RHS );
__declspec(implementation_key(6945)) VARIANT_BOOL CubeField::GetDragToPage ( );
__declspec(implementation_key(6946)) void CubeField::PutDragToPage ( VARIANT_BOOL RHS );
__declspec(implementation_key(6947)) VARIANT_BOOL CubeField::GetDragToRow ( );
__declspec(implementation_key(6948)) void CubeField::PutDragToRow ( VARIANT_BOOL RHS );
__declspec(implementation_key(6949)) VARIANT_BOOL CubeField::GetDragToData ( );
__declspec(implementation_key(6950)) void CubeField::PutDragToData ( VARIANT_BOOL RHS );
__declspec(implementation_key(6951)) long CubeField::GetHiddenLevels ( );
__declspec(implementation_key(6952)) void CubeField::PutHiddenLevels ( long RHS );
__declspec(implementation_key(6953)) VARIANT_BOOL CubeField::GetHasMemberProperties ( );
__declspec(implementation_key(6954)) enum XlLayoutFormType CubeField::GetLayoutForm ( );
__declspec(implementation_key(6955)) void CubeField::PutLayoutForm ( enum XlLayoutFormType RHS );
__declspec(implementation_key(6956)) PivotFieldsPtr CubeField::GetPivotFields ( );
__declspec(implementation_key(6957)) HRESULT CubeField::AddMemberPropertyField ( _bstr_t Property, const _variant_t & PropertyOrder );
__declspec(implementation_key(6958)) VARIANT_BOOL CubeField::GetEnableMultiplePageItems ( );
__declspec(implementation_key(6959)) void CubeField::PutEnableMultiplePageItems ( VARIANT_BOOL RHS );
__declspec(implementation_key(6960)) enum XlSubtototalLocationType CubeField::GetLayoutSubtotalLocation ( );
__declspec(implementation_key(6961)) void CubeField::PutLayoutSubtotalLocation ( enum XlSubtototalLocationType RHS );
__declspec(implementation_key(6962)) VARIANT_BOOL CubeField::GetShowInFieldList ( );
__declspec(implementation_key(6963)) void CubeField::PutShowInFieldList ( VARIANT_BOOL RHS );
__declspec(implementation_key(6964)) HRESULT CubeField::Delete ( );
__declspec(implementation_key(6965)) _ApplicationPtr CubeFields::GetApplication ( );
__declspec(implementation_key(6966)) enum XlCreator CubeFields::GetCreator ( );
__declspec(implementation_key(6967)) IDispatchPtr CubeFields::GetParent ( );
__declspec(implementation_key(6968)) long CubeFields::GetCount ( );
__declspec(implementation_key(6969)) CubeFieldPtr CubeFields::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6970)) CubeFieldPtr CubeFields::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6971)) IUnknownPtr CubeFields::Get_NewEnum ( );
__declspec(implementation_key(6972)) CubeFieldPtr CubeFields::AddSet ( _bstr_t Name, _bstr_t Caption );
__declspec(implementation_key(6973)) _ApplicationPtr IDisplayUnitLabel::GetApplication ( );
__declspec(implementation_key(6974)) enum XlCreator IDisplayUnitLabel::GetCreator ( );
__declspec(implementation_key(6975)) IDispatchPtr IDisplayUnitLabel::GetParent ( );
__declspec(implementation_key(6976)) _bstr_t IDisplayUnitLabel::GetName ( );
__declspec(implementation_key(6977)) _variant_t IDisplayUnitLabel::Select ( );
__declspec(implementation_key(6978)) BorderPtr IDisplayUnitLabel::GetBorder ( );
__declspec(implementation_key(6979)) _variant_t IDisplayUnitLabel::Delete ( );
__declspec(implementation_key(6980)) InteriorPtr IDisplayUnitLabel::GetInterior ( );
__declspec(implementation_key(6981)) ChartFillFormatPtr IDisplayUnitLabel::GetFill ( );
__declspec(implementation_key(6982)) _bstr_t IDisplayUnitLabel::GetCaption ( );
__declspec(implementation_key(6983)) void IDisplayUnitLabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6984)) CharactersPtr IDisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(6985)) FontPtr IDisplayUnitLabel::GetFont ( );
__declspec(implementation_key(6986)) _variant_t IDisplayUnitLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(6987)) void IDisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6988)) double IDisplayUnitLabel::GetLeft ( );
__declspec(implementation_key(6989)) void IDisplayUnitLabel::PutLeft ( double RHS );
__declspec(implementation_key(6990)) _variant_t IDisplayUnitLabel::GetOrientation ( );
__declspec(implementation_key(6991)) void IDisplayUnitLabel::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(6992)) VARIANT_BOOL IDisplayUnitLabel::GetShadow ( );
__declspec(implementation_key(6993)) void IDisplayUnitLabel::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(6994)) _bstr_t IDisplayUnitLabel::GetText ( );
__declspec(implementation_key(6995)) void IDisplayUnitLabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(6996)) double IDisplayUnitLabel::GetTop ( );
__declspec(implementation_key(6997)) void IDisplayUnitLabel::PutTop ( double RHS );
__declspec(implementation_key(6998)) _variant_t IDisplayUnitLabel::GetVerticalAlignment ( );
__declspec(implementation_key(6999)) void IDisplayUnitLabel::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(7000)) long IDisplayUnitLabel::GetReadingOrder ( );
__declspec(implementation_key(7001)) void IDisplayUnitLabel::PutReadingOrder ( long RHS );
__declspec(implementation_key(7002)) _variant_t IDisplayUnitLabel::GetAutoScaleFont ( );
__declspec(implementation_key(7003)) void IDisplayUnitLabel::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(7004)) _ApplicationPtr ICellFormat::GetApplication ( );
__declspec(implementation_key(7005)) enum XlCreator ICellFormat::GetCreator ( );
__declspec(implementation_key(7006)) IDispatchPtr ICellFormat::GetParent ( );
__declspec(implementation_key(7007)) BordersPtr ICellFormat::GetBorders ( );
__declspec(implementation_key(7008)) void ICellFormat::PutRefBorders ( struct Borders * RHS );
__declspec(implementation_key(7009)) FontPtr ICellFormat::GetFont ( );
__declspec(implementation_key(7010)) void ICellFormat::PutRefFont ( struct Font * RHS );
__declspec(implementation_key(7011)) InteriorPtr ICellFormat::GetInterior ( );
__declspec(implementation_key(7012)) void ICellFormat::PutRefInterior ( struct Interior * RHS );
__declspec(implementation_key(7013)) _variant_t ICellFormat::GetNumberFormat ( long lcid );
__declspec(implementation_key(7014)) void ICellFormat::PutNumberFormat ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(7015)) _variant_t ICellFormat::GetNumberFormatLocal ( );
__declspec(implementation_key(7016)) void ICellFormat::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(7017)) _variant_t ICellFormat::GetAddIndent ( );
__declspec(implementation_key(7018)) void ICellFormat::PutAddIndent ( const _variant_t & RHS );
__declspec(implementation_key(7019)) _variant_t ICellFormat::GetIndentLevel ( );
__declspec(implementation_key(7020)) void ICellFormat::PutIndentLevel ( const _variant_t & RHS );
__declspec(implementation_key(7021)) _variant_t ICellFormat::GetHorizontalAlignment ( );
__declspec(implementation_key(7022)) void ICellFormat::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(7023)) _variant_t ICellFormat::GetVerticalAlignment ( );
__declspec(implementation_key(7024)) void ICellFormat::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(7025)) _variant_t ICellFormat::GetOrientation ( );
__declspec(implementation_key(7026)) void ICellFormat::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(7027)) _variant_t ICellFormat::GetShrinkToFit ( );
__declspec(implementation_key(7028)) void ICellFormat::PutShrinkToFit ( const _variant_t & RHS );
__declspec(implementation_key(7029)) _variant_t ICellFormat::GetWrapText ( );
__declspec(implementation_key(7030)) void ICellFormat::PutWrapText ( const _variant_t & RHS );
__declspec(implementation_key(7031)) _variant_t ICellFormat::GetLocked ( );
__declspec(implementation_key(7032)) void ICellFormat::PutLocked ( const _variant_t & RHS );
__declspec(implementation_key(7033)) _variant_t ICellFormat::GetFormulaHidden ( );
__declspec(implementation_key(7034)) void ICellFormat::PutFormulaHidden ( const _variant_t & RHS );
__declspec(implementation_key(7035)) _variant_t ICellFormat::GetMergeCells ( );
__declspec(implementation_key(7036)) void ICellFormat::PutMergeCells ( const _variant_t & RHS );
__declspec(implementation_key(7037)) HRESULT ICellFormat::Clear ( );
__declspec(implementation_key(7038)) _ApplicationPtr IUsedObjects::GetApplication ( );
__declspec(implementation_key(7039)) enum XlCreator IUsedObjects::GetCreator ( );
__declspec(implementation_key(7040)) IDispatchPtr IUsedObjects::GetParent ( );
__declspec(implementation_key(7041)) long IUsedObjects::GetCount ( );
__declspec(implementation_key(7042)) IUnknownPtr IUsedObjects::Get_NewEnum ( );
__declspec(implementation_key(7043)) IDispatchPtr IUsedObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7044)) IDispatchPtr IUsedObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7045)) _ApplicationPtr ICustomProperties::GetApplication ( );
__declspec(implementation_key(7046)) enum XlCreator ICustomProperties::GetCreator ( );
__declspec(implementation_key(7047)) IDispatchPtr ICustomProperties::GetParent ( );
__declspec(implementation_key(7048)) CustomPropertyPtr ICustomProperties::Add ( _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(7049)) long ICustomProperties::GetCount ( );
__declspec(implementation_key(7050)) CustomPropertyPtr ICustomProperties::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7051)) CustomPropertyPtr ICustomProperties::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7052)) IUnknownPtr ICustomProperties::Get_NewEnum ( );
__declspec(implementation_key(7053)) _ApplicationPtr ICustomProperty::GetApplication ( );
__declspec(implementation_key(7054)) enum XlCreator ICustomProperty::GetCreator ( );
__declspec(implementation_key(7055)) IDispatchPtr ICustomProperty::GetParent ( );
__declspec(implementation_key(7056)) _bstr_t ICustomProperty::GetName ( );
__declspec(implementation_key(7057)) void ICustomProperty::PutName ( _bstr_t RHS );
__declspec(implementation_key(7058)) _variant_t ICustomProperty::GetValue ( );
__declspec(implementation_key(7059)) void ICustomProperty::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(7060)) _variant_t ICustomProperty::Get_Default ( );
__declspec(implementation_key(7061)) HRESULT ICustomProperty::Delete ( );
__declspec(implementation_key(7062)) _ApplicationPtr ICalculatedMembers::GetApplication ( );
__declspec(implementation_key(7063)) enum XlCreator ICalculatedMembers::GetCreator ( );
__declspec(implementation_key(7064)) IDispatchPtr ICalculatedMembers::GetParent ( );
__declspec(implementation_key(7065)) long ICalculatedMembers::GetCount ( );
__declspec(implementation_key(7066)) CalculatedMemberPtr ICalculatedMembers::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7067)) CalculatedMemberPtr ICalculatedMembers::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7068)) IUnknownPtr ICalculatedMembers::Get_NewEnum ( );
__declspec(implementation_key(7069)) CalculatedMemberPtr ICalculatedMembers::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & SolveOrder, const _variant_t & Type );
__declspec(implementation_key(7070)) _ApplicationPtr ICalculatedMember::GetApplication ( );
__declspec(implementation_key(7071)) enum XlCreator ICalculatedMember::GetCreator ( );
__declspec(implementation_key(7072)) IDispatchPtr ICalculatedMember::GetParent ( );
__declspec(implementation_key(7073)) _bstr_t ICalculatedMember::GetName ( );
__declspec(implementation_key(7074)) _bstr_t ICalculatedMember::GetFormula ( );
__declspec(implementation_key(7075)) _bstr_t ICalculatedMember::GetSourceName ( );
__declspec(implementation_key(7076)) long ICalculatedMember::GetSolveOrder ( );
__declspec(implementation_key(7077)) VARIANT_BOOL ICalculatedMember::GetIsValid ( );
__declspec(implementation_key(7078)) _bstr_t ICalculatedMember::Get_Default ( );
__declspec(implementation_key(7079)) HRESULT ICalculatedMember::Delete ( );
__declspec(implementation_key(7080)) enum XlCalculatedMemberType ICalculatedMember::GetType ( );
__declspec(implementation_key(7081)) _ApplicationPtr IWatches::GetApplication ( );
__declspec(implementation_key(7082)) enum XlCreator IWatches::GetCreator ( );
__declspec(implementation_key(7083)) IDispatchPtr IWatches::GetParent ( );
__declspec(implementation_key(7084)) WatchPtr IWatches::Add ( const _variant_t & Source );
__declspec(implementation_key(7085)) long IWatches::GetCount ( );
__declspec(implementation_key(7086)) WatchPtr IWatches::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7087)) WatchPtr IWatches::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7088)) IUnknownPtr IWatches::Get_NewEnum ( );
__declspec(implementation_key(7089)) HRESULT IWatches::Delete ( );
__declspec(implementation_key(7090)) _ApplicationPtr IWatch::GetApplication ( );
__declspec(implementation_key(7091)) enum XlCreator IWatch::GetCreator ( );
__declspec(implementation_key(7092)) IDispatchPtr IWatch::GetParent ( );
__declspec(implementation_key(7093)) HRESULT IWatch::Delete ( );
__declspec(implementation_key(7094)) _variant_t IWatch::GetSource ( );
__declspec(implementation_key(7095)) _ApplicationPtr IPivotCell::GetApplication ( );
__declspec(implementation_key(7096)) enum XlCreator IPivotCell::GetCreator ( );
__declspec(implementation_key(7097)) IDispatchPtr IPivotCell::GetParent ( );
__declspec(implementation_key(7098)) enum XlPivotCellType IPivotCell::GetPivotCellType ( );
__declspec(implementation_key(7099)) PivotTablePtr IPivotCell::GetPivotTable ( );
__declspec(implementation_key(7100)) PivotFieldPtr IPivotCell::GetDataField ( );
__declspec(implementation_key(7101)) PivotFieldPtr IPivotCell::GetPivotField ( );
__declspec(implementation_key(7102)) PivotItemPtr IPivotCell::GetPivotItem ( );
__declspec(implementation_key(7103)) PivotItemListPtr IPivotCell::GetRowItems ( );
__declspec(implementation_key(7104)) PivotItemListPtr IPivotCell::GetColumnItems ( );
__declspec(implementation_key(7105)) RangePtr IPivotCell::GetRange ( );
__declspec(implementation_key(7106)) _bstr_t IPivotCell::GetDummy18 ( );
__declspec(implementation_key(7107)) enum XlConsolidationFunction IPivotCell::GetCustomSubtotalFunction ( );
__declspec(implementation_key(7108)) _ApplicationPtr IGraphic::GetApplication ( );
__declspec(implementation_key(7109)) enum XlCreator IGraphic::GetCreator ( );
__declspec(implementation_key(7110)) IDispatchPtr IGraphic::GetParent ( );
__declspec(implementation_key(7111)) float IGraphic::GetBrightness ( );
__declspec(implementation_key(7112)) void IGraphic::PutBrightness ( float RHS );
__declspec(implementation_key(7113)) enum Office::MsoPictureColorType IGraphic::GetColorType ( );
__declspec(implementation_key(7114)) void IGraphic::PutColorType ( enum Office::MsoPictureColorType RHS );
__declspec(implementation_key(7115)) float IGraphic::GetContrast ( );
__declspec(implementation_key(7116)) void IGraphic::PutContrast ( float RHS );
__declspec(implementation_key(7117)) float IGraphic::GetCropBottom ( );
__declspec(implementation_key(7118)) void IGraphic::PutCropBottom ( float RHS );
__declspec(implementation_key(7119)) float IGraphic::GetCropLeft ( );
__declspec(implementation_key(7120)) void IGraphic::PutCropLeft ( float RHS );
__declspec(implementation_key(7121)) float IGraphic::GetCropRight ( );
__declspec(implementation_key(7122)) void IGraphic::PutCropRight ( float RHS );
__declspec(implementation_key(7123)) float IGraphic::GetCropTop ( );
__declspec(implementation_key(7124)) void IGraphic::PutCropTop ( float RHS );
__declspec(implementation_key(7125)) _bstr_t IGraphic::GetFilename ( );
__declspec(implementation_key(7126)) void IGraphic::PutFilename ( _bstr_t RHS );
__declspec(implementation_key(7127)) float IGraphic::GetHeight ( );
__declspec(implementation_key(7128)) void IGraphic::PutHeight ( float RHS );
__declspec(implementation_key(7129)) enum Office::MsoTriState IGraphic::GetLockAspectRatio ( );
__declspec(implementation_key(7130)) void IGraphic::PutLockAspectRatio ( enum Office::MsoTriState RHS );
__declspec(implementation_key(7131)) float IGraphic::GetWidth ( );
__declspec(implementation_key(7132)) void IGraphic::PutWidth ( float RHS );
__declspec(implementation_key(7133)) _ApplicationPtr IAutoRecover::GetApplication ( );
__declspec(implementation_key(7134)) enum XlCreator IAutoRecover::GetCreator ( );
__declspec(implementation_key(7135)) IDispatchPtr IAutoRecover::GetParent ( );
__declspec(implementation_key(7136)) VARIANT_BOOL IAutoRecover::GetEnabled ( );
__declspec(implementation_key(7137)) void IAutoRecover::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7138)) long IAutoRecover::GetTime ( );
__declspec(implementation_key(7139)) void IAutoRecover::PutTime ( long RHS );
__declspec(implementation_key(7140)) _bstr_t IAutoRecover::GetPath ( );
__declspec(implementation_key(7141)) void IAutoRecover::PutPath ( _bstr_t RHS );
__declspec(implementation_key(7142)) _ApplicationPtr IErrorCheckingOptions::GetApplication ( );
__declspec(implementation_key(7143)) enum XlCreator IErrorCheckingOptions::GetCreator ( );
__declspec(implementation_key(7144)) IDispatchPtr IErrorCheckingOptions::GetParent ( );
__declspec(implementation_key(7145)) VARIANT_BOOL IErrorCheckingOptions::GetBackgroundChecking ( );
__declspec(implementation_key(7146)) void IErrorCheckingOptions::PutBackgroundChecking ( VARIANT_BOOL RHS );
__declspec(implementation_key(7147)) enum XlColorIndex IErrorCheckingOptions::GetIndicatorColorIndex ( );
__declspec(implementation_key(7148)) void IErrorCheckingOptions::PutIndicatorColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(7149)) VARIANT_BOOL IErrorCheckingOptions::GetEvaluateToError ( );
__declspec(implementation_key(7150)) void IErrorCheckingOptions::PutEvaluateToError ( VARIANT_BOOL RHS );
__declspec(implementation_key(7151)) VARIANT_BOOL IErrorCheckingOptions::GetTextDate ( );
__declspec(implementation_key(7152)) void IErrorCheckingOptions::PutTextDate ( VARIANT_BOOL RHS );
__declspec(implementation_key(7153)) VARIANT_BOOL IErrorCheckingOptions::GetNumberAsText ( );
__declspec(implementation_key(7154)) void IErrorCheckingOptions::PutNumberAsText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7155)) VARIANT_BOOL IErrorCheckingOptions::GetInconsistentFormula ( );
__declspec(implementation_key(7156)) void IErrorCheckingOptions::PutInconsistentFormula ( VARIANT_BOOL RHS );
__declspec(implementation_key(7157)) VARIANT_BOOL IErrorCheckingOptions::GetOmittedCells ( );
__declspec(implementation_key(7158)) void IErrorCheckingOptions::PutOmittedCells ( VARIANT_BOOL RHS );
__declspec(implementation_key(7159)) VARIANT_BOOL IErrorCheckingOptions::GetUnlockedFormulaCells ( );
__declspec(implementation_key(7160)) void IErrorCheckingOptions::PutUnlockedFormulaCells ( VARIANT_BOOL RHS );
__declspec(implementation_key(7161)) VARIANT_BOOL IErrorCheckingOptions::GetEmptyCellReferences ( );
__declspec(implementation_key(7162)) void IErrorCheckingOptions::PutEmptyCellReferences ( VARIANT_BOOL RHS );
__declspec(implementation_key(7163)) _ApplicationPtr IErrors::GetApplication ( );
__declspec(implementation_key(7164)) enum XlCreator IErrors::GetCreator ( );
__declspec(implementation_key(7165)) IDispatchPtr IErrors::GetParent ( );
__declspec(implementation_key(7166)) ErrorPtr IErrors::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7167)) ErrorPtr IErrors::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7168)) _ApplicationPtr IError::GetApplication ( );
__declspec(implementation_key(7169)) enum XlCreator IError::GetCreator ( );
__declspec(implementation_key(7170)) IDispatchPtr IError::GetParent ( );
__declspec(implementation_key(7171)) VARIANT_BOOL IError::GetValue ( );
__declspec(implementation_key(7172)) VARIANT_BOOL IError::GetIgnore ( );
__declspec(implementation_key(7173)) void IError::PutIgnore ( VARIANT_BOOL RHS );
__declspec(implementation_key(7174)) _ApplicationPtr ISmartTagAction::GetApplication ( );
__declspec(implementation_key(7175)) enum XlCreator ISmartTagAction::GetCreator ( );
__declspec(implementation_key(7176)) IDispatchPtr ISmartTagAction::GetParent ( );
__declspec(implementation_key(7177)) _bstr_t ISmartTagAction::GetName ( );
__declspec(implementation_key(7178)) HRESULT ISmartTagAction::Execute ( );
__declspec(implementation_key(7179)) _bstr_t ISmartTagAction::Get_Default ( );
__declspec(implementation_key(7180)) _ApplicationPtr ISmartTagActions::GetApplication ( );
__declspec(implementation_key(7181)) enum XlCreator ISmartTagActions::GetCreator ( );
__declspec(implementation_key(7182)) IDispatchPtr ISmartTagActions::GetParent ( );
__declspec(implementation_key(7183)) long ISmartTagActions::GetCount ( );
__declspec(implementation_key(7184)) SmartTagActionPtr ISmartTagActions::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7185)) SmartTagActionPtr ISmartTagActions::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7186)) IUnknownPtr ISmartTagActions::Get_NewEnum ( );
__declspec(implementation_key(7187)) _ApplicationPtr ISmartTag::GetApplication ( );
__declspec(implementation_key(7188)) enum XlCreator ISmartTag::GetCreator ( );
__declspec(implementation_key(7189)) IDispatchPtr ISmartTag::GetParent ( );
__declspec(implementation_key(7190)) _bstr_t ISmartTag::GetDownloadURL ( );
__declspec(implementation_key(7191)) _bstr_t ISmartTag::GetName ( );
__declspec(implementation_key(7192)) _bstr_t ISmartTag::Get_Default ( );
__declspec(implementation_key(7193)) _bstr_t ISmartTag::GetXML ( );
__declspec(implementation_key(7194)) RangePtr ISmartTag::GetRange ( );
__declspec(implementation_key(7195)) HRESULT ISmartTag::Delete ( );
__declspec(implementation_key(7196)) SmartTagActionsPtr ISmartTag::GetSmartTagActions ( );
__declspec(implementation_key(7197)) CustomPropertiesPtr ISmartTag::GetProperties ( );
__declspec(implementation_key(7198)) _ApplicationPtr ISmartTags::GetApplication ( );
__declspec(implementation_key(7199)) enum XlCreator ISmartTags::GetCreator ( );
__declspec(implementation_key(7200)) IDispatchPtr ISmartTags::GetParent ( );
__declspec(implementation_key(7201)) SmartTagPtr ISmartTags::Add ( _bstr_t SmartTagType );
__declspec(implementation_key(7202)) long ISmartTags::GetCount ( );
__declspec(implementation_key(7203)) SmartTagPtr ISmartTags::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7204)) IUnknownPtr ISmartTags::Get_NewEnum ( );
__declspec(implementation_key(7205)) _ApplicationPtr ISmartTagRecognizer::GetApplication ( );
__declspec(implementation_key(7206)) enum XlCreator ISmartTagRecognizer::GetCreator ( );
__declspec(implementation_key(7207)) IDispatchPtr ISmartTagRecognizer::GetParent ( );
__declspec(implementation_key(7208)) VARIANT_BOOL ISmartTagRecognizer::GetEnabled ( );
__declspec(implementation_key(7209)) void ISmartTagRecognizer::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7210)) _bstr_t ISmartTagRecognizer::GetprogID ( );
__declspec(implementation_key(7211)) _bstr_t ISmartTagRecognizer::Get_Default ( );
__declspec(implementation_key(7212)) _bstr_t ISmartTagRecognizer::GetFullName ( );
__declspec(implementation_key(7213)) _ApplicationPtr ISmartTagRecognizers::GetApplication ( );
__declspec(implementation_key(7214)) enum XlCreator ISmartTagRecognizers::GetCreator ( );
__declspec(implementation_key(7215)) IDispatchPtr ISmartTagRecognizers::GetParent ( );
__declspec(implementation_key(7216)) long ISmartTagRecognizers::GetCount ( );
__declspec(implementation_key(7217)) SmartTagRecognizerPtr ISmartTagRecognizers::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7218)) SmartTagRecognizerPtr ISmartTagRecognizers::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7219)) IUnknownPtr ISmartTagRecognizers::Get_NewEnum ( );
__declspec(implementation_key(7220)) VARIANT_BOOL ISmartTagRecognizers::GetRecognize ( );
__declspec(implementation_key(7221)) void ISmartTagRecognizers::PutRecognize ( VARIANT_BOOL RHS );
__declspec(implementation_key(7222)) _ApplicationPtr ISmartTagOptions::GetApplication ( );
__declspec(implementation_key(7223)) enum XlCreator ISmartTagOptions::GetCreator ( );
__declspec(implementation_key(7224)) IDispatchPtr ISmartTagOptions::GetParent ( );
__declspec(implementation_key(7225)) enum XlSmartTagDisplayMode ISmartTagOptions::GetDisplaySmartTags ( );
__declspec(implementation_key(7226)) void ISmartTagOptions::PutDisplaySmartTags ( enum XlSmartTagDisplayMode RHS );
__declspec(implementation_key(7227)) VARIANT_BOOL ISmartTagOptions::GetEmbedSmartTags ( );
__declspec(implementation_key(7228)) void ISmartTagOptions::PutEmbedSmartTags ( VARIANT_BOOL RHS );
__declspec(implementation_key(7229)) long ISpellingOptions::GetDictLang ( );
__declspec(implementation_key(7230)) void ISpellingOptions::PutDictLang ( long RHS );
__declspec(implementation_key(7231)) _bstr_t ISpellingOptions::GetUserDict ( );
__declspec(implementation_key(7232)) void ISpellingOptions::PutUserDict ( _bstr_t RHS );
__declspec(implementation_key(7233)) VARIANT_BOOL ISpellingOptions::GetIgnoreCaps ( );
__declspec(implementation_key(7234)) void ISpellingOptions::PutIgnoreCaps ( VARIANT_BOOL RHS );
__declspec(implementation_key(7235)) VARIANT_BOOL ISpellingOptions::GetSuggestMainOnly ( );
__declspec(implementation_key(7236)) void ISpellingOptions::PutSuggestMainOnly ( VARIANT_BOOL RHS );
__declspec(implementation_key(7237)) VARIANT_BOOL ISpellingOptions::GetIgnoreMixedDigits ( );
__declspec(implementation_key(7238)) void ISpellingOptions::PutIgnoreMixedDigits ( VARIANT_BOOL RHS );
__declspec(implementation_key(7239)) VARIANT_BOOL ISpellingOptions::GetIgnoreFileNames ( );
__declspec(implementation_key(7240)) void ISpellingOptions::PutIgnoreFileNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(7241)) VARIANT_BOOL ISpellingOptions::GetGermanPostReform ( );
__declspec(implementation_key(7242)) void ISpellingOptions::PutGermanPostReform ( VARIANT_BOOL RHS );
__declspec(implementation_key(7243)) VARIANT_BOOL ISpellingOptions::GetKoreanCombineAux ( );
__declspec(implementation_key(7244)) void ISpellingOptions::PutKoreanCombineAux ( VARIANT_BOOL RHS );
__declspec(implementation_key(7245)) VARIANT_BOOL ISpellingOptions::GetKoreanUseAutoChangeList ( );
__declspec(implementation_key(7246)) void ISpellingOptions::PutKoreanUseAutoChangeList ( VARIANT_BOOL RHS );
__declspec(implementation_key(7247)) VARIANT_BOOL ISpellingOptions::GetKoreanProcessCompound ( );
__declspec(implementation_key(7248)) void ISpellingOptions::PutKoreanProcessCompound ( VARIANT_BOOL RHS );
__declspec(implementation_key(7249)) enum XlHebrewModes ISpellingOptions::GetHebrewModes ( );
__declspec(implementation_key(7250)) void ISpellingOptions::PutHebrewModes ( enum XlHebrewModes RHS );
__declspec(implementation_key(7251)) enum XlArabicModes ISpellingOptions::GetArabicModes ( );
__declspec(implementation_key(7252)) void ISpellingOptions::PutArabicModes ( enum XlArabicModes RHS );
__declspec(implementation_key(7253)) HRESULT ISpeech::Speak ( _bstr_t Text, const _variant_t & SpeakAsync, const _variant_t & SpeakXML, const _variant_t & Purge );
__declspec(implementation_key(7254)) enum XlSpeakDirection ISpeech::GetDirection ( );
__declspec(implementation_key(7255)) void ISpeech::PutDirection ( enum XlSpeakDirection RHS );
__declspec(implementation_key(7256)) VARIANT_BOOL ISpeech::GetSpeakCellOnEnter ( );
__declspec(implementation_key(7257)) void ISpeech::PutSpeakCellOnEnter ( VARIANT_BOOL RHS );
__declspec(implementation_key(7258)) VARIANT_BOOL IProtection::GetAllowFormattingCells ( );
__declspec(implementation_key(7259)) VARIANT_BOOL IProtection::GetAllowFormattingColumns ( );
__declspec(implementation_key(7260)) VARIANT_BOOL IProtection::GetAllowFormattingRows ( );
__declspec(implementation_key(7261)) VARIANT_BOOL IProtection::GetAllowInsertingColumns ( );
__declspec(implementation_key(7262)) VARIANT_BOOL IProtection::GetAllowInsertingRows ( );
__declspec(implementation_key(7263)) VARIANT_BOOL IProtection::GetAllowInsertingHyperlinks ( );
__declspec(implementation_key(7264)) VARIANT_BOOL IProtection::GetAllowDeletingColumns ( );
__declspec(implementation_key(7265)) VARIANT_BOOL IProtection::GetAllowDeletingRows ( );
__declspec(implementation_key(7266)) VARIANT_BOOL IProtection::GetAllowSorting ( );
__declspec(implementation_key(7267)) VARIANT_BOOL IProtection::GetAllowFiltering ( );
__declspec(implementation_key(7268)) VARIANT_BOOL IProtection::GetAllowUsingPivotTables ( );
__declspec(implementation_key(7269)) AllowEditRangesPtr IProtection::GetAllowEditRanges ( );
__declspec(implementation_key(7270)) _ApplicationPtr IPivotItemList::GetApplication ( );
__declspec(implementation_key(7271)) enum XlCreator IPivotItemList::GetCreator ( );
__declspec(implementation_key(7272)) IDispatchPtr IPivotItemList::GetParent ( );
__declspec(implementation_key(7273)) long IPivotItemList::GetCount ( );
__declspec(implementation_key(7274)) PivotItemPtr IPivotItemList::Item ( const _variant_t & Index );
__declspec(implementation_key(7275)) PivotItemPtr IPivotItemList::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(7276)) IUnknownPtr IPivotItemList::_NewEnum ( );
__declspec(implementation_key(7277)) _ApplicationPtr ITab::GetApplication ( );
__declspec(implementation_key(7278)) enum XlCreator ITab::GetCreator ( );
__declspec(implementation_key(7279)) IDispatchPtr ITab::GetParent ( );
__declspec(implementation_key(7280)) _variant_t ITab::GetColor ( );
__declspec(implementation_key(7281)) void ITab::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(7282)) enum XlColorIndex ITab::GetColorIndex ( );
__declspec(implementation_key(7283)) void ITab::PutColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(7284)) long IAllowEditRanges::GetCount ( );
__declspec(implementation_key(7285)) AllowEditRangePtr IAllowEditRanges::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7286)) AllowEditRangePtr IAllowEditRanges::Add ( _bstr_t Title, struct Range * Range, const _variant_t & Password );
__declspec(implementation_key(7287)) AllowEditRangePtr IAllowEditRanges::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7288)) IUnknownPtr IAllowEditRanges::Get_NewEnum ( );
__declspec(implementation_key(7289)) _bstr_t IAllowEditRange::GetTitle ( );
__declspec(implementation_key(7290)) void IAllowEditRange::PutTitle ( _bstr_t RHS );
__declspec(implementation_key(7291)) RangePtr IAllowEditRange::GetRange ( );
__declspec(implementation_key(7292)) void IAllowEditRange::PutRefRange ( struct Range * RHS );
__declspec(implementation_key(7293)) HRESULT IAllowEditRange::ChangePassword ( _bstr_t Password );
__declspec(implementation_key(7294)) HRESULT IAllowEditRange::Delete ( );
__declspec(implementation_key(7295)) HRESULT IAllowEditRange::Unprotect ( const _variant_t & Password );
__declspec(implementation_key(7296)) UserAccessListPtr IAllowEditRange::GetUsers ( );
__declspec(implementation_key(7297)) long IUserAccessList::GetCount ( );
__declspec(implementation_key(7298)) UserAccessPtr IUserAccessList::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7299)) UserAccessPtr IUserAccessList::Add ( _bstr_t Name, VARIANT_BOOL AllowEdit );
__declspec(implementation_key(7300)) HRESULT IUserAccessList::DeleteAll ( );
__declspec(implementation_key(7301)) UserAccessPtr IUserAccessList::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7302)) IUnknownPtr IUserAccessList::Get_NewEnum ( );
__declspec(implementation_key(7303)) _bstr_t IUserAccess::GetName ( );
__declspec(implementation_key(7304)) VARIANT_BOOL IUserAccess::GetAllowEdit ( );
__declspec(implementation_key(7305)) void IUserAccess::PutAllowEdit ( VARIANT_BOOL RHS );
__declspec(implementation_key(7306)) HRESULT IUserAccess::Delete ( );
__declspec(implementation_key(7307)) long IRTD::GetThrottleInterval ( );
__declspec(implementation_key(7308)) void IRTD::PutThrottleInterval ( long RHS );
__declspec(implementation_key(7309)) HRESULT IRTD::RefreshData ( );
__declspec(implementation_key(7310)) HRESULT IRTD::RestartServers ( );
__declspec(implementation_key(7311)) _ApplicationPtr IDiagram::GetApplication ( );
__declspec(implementation_key(7312)) enum XlCreator IDiagram::GetCreator ( );
__declspec(implementation_key(7313)) IDispatchPtr IDiagram::GetParent ( );
__declspec(implementation_key(7314)) DiagramNodesPtr IDiagram::GetNodes ( );
__declspec(implementation_key(7315)) enum Office::MsoDiagramType IDiagram::GetType ( );
__declspec(implementation_key(7316)) enum Office::MsoTriState IDiagram::GetAutoLayout ( );
__declspec(implementation_key(7317)) void IDiagram::PutAutoLayout ( enum Office::MsoTriState RHS );
__declspec(implementation_key(7318)) enum Office::MsoTriState IDiagram::GetReverse ( );
__declspec(implementation_key(7319)) void IDiagram::PutReverse ( enum Office::MsoTriState RHS );
__declspec(implementation_key(7320)) enum Office::MsoTriState IDiagram::GetAutoFormat ( );
__declspec(implementation_key(7321)) void IDiagram::PutAutoFormat ( enum Office::MsoTriState RHS );
__declspec(implementation_key(7322)) HRESULT IDiagram::Convert ( enum Office::MsoDiagramType Type );
__declspec(implementation_key(7323)) _ApplicationPtr Font::GetApplication ( );
__declspec(implementation_key(7324)) enum XlCreator Font::GetCreator ( );
__declspec(implementation_key(7325)) IDispatchPtr Font::GetParent ( );
__declspec(implementation_key(7326)) _variant_t Font::GetBackground ( );
__declspec(implementation_key(7327)) void Font::PutBackground ( const _variant_t & _arg1 );
__declspec(implementation_key(7328)) _variant_t Font::GetBold ( );
__declspec(implementation_key(7329)) void Font::PutBold ( const _variant_t & _arg1 );
__declspec(implementation_key(7330)) _variant_t Font::GetColor ( );
__declspec(implementation_key(7331)) void Font::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(7332)) _variant_t Font::GetColorIndex ( );
__declspec(implementation_key(7333)) void Font::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(7334)) _variant_t Font::GetFontStyle ( );
__declspec(implementation_key(7335)) void Font::PutFontStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(7336)) _variant_t Font::GetItalic ( );
__declspec(implementation_key(7337)) void Font::PutItalic ( const _variant_t & _arg1 );
__declspec(implementation_key(7338)) _variant_t Font::GetName ( );
__declspec(implementation_key(7339)) void Font::PutName ( const _variant_t & _arg1 );
__declspec(implementation_key(7340)) _variant_t Font::GetOutlineFont ( );
__declspec(implementation_key(7341)) void Font::PutOutlineFont ( const _variant_t & _arg1 );
__declspec(implementation_key(7342)) _variant_t Font::GetShadow ( );
__declspec(implementation_key(7343)) void Font::PutShadow ( const _variant_t & _arg1 );
__declspec(implementation_key(7344)) _variant_t Font::GetSize ( );
__declspec(implementation_key(7345)) void Font::PutSize ( const _variant_t & _arg1 );
__declspec(implementation_key(7346)) _variant_t Font::GetStrikethrough ( );
__declspec(implementation_key(7347)) void Font::PutStrikethrough ( const _variant_t & _arg1 );
__declspec(implementation_key(7348)) _variant_t Font::GetSubscript ( );
__declspec(implementation_key(7349)) void Font::PutSubscript ( const _variant_t & _arg1 );
__declspec(implementation_key(7350)) _variant_t Font::GetSuperscript ( );
__declspec(implementation_key(7351)) void Font::PutSuperscript ( const _variant_t & _arg1 );
__declspec(implementation_key(7352)) _variant_t Font::GetUnderline ( );
__declspec(implementation_key(7353)) void Font::PutUnderline ( const _variant_t & _arg1 );
__declspec(implementation_key(7354)) _ApplicationPtr Window::GetApplication ( );
__declspec(implementation_key(7355)) enum XlCreator Window::GetCreator ( );
__declspec(implementation_key(7356)) IDispatchPtr Window::GetParent ( );
__declspec(implementation_key(7357)) _variant_t Window::Activate ( );
__declspec(implementation_key(7358)) _variant_t Window::ActivateNext ( );
__declspec(implementation_key(7359)) _variant_t Window::ActivatePrevious ( );
__declspec(implementation_key(7360)) RangePtr Window::GetActiveCell ( );
__declspec(implementation_key(7361)) _ChartPtr Window::GetActiveChart ( );
__declspec(implementation_key(7362)) PanePtr Window::GetActivePane ( );
__declspec(implementation_key(7363)) IDispatchPtr Window::GetActiveSheet ( );
__declspec(implementation_key(7364)) _variant_t Window::GetCaption ( );
__declspec(implementation_key(7365)) void Window::PutCaption ( const _variant_t & _arg1 );
__declspec(implementation_key(7366)) VARIANT_BOOL Window::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook );
__declspec(implementation_key(7367)) VARIANT_BOOL Window::GetDisplayFormulas ( );
__declspec(implementation_key(7368)) void Window::PutDisplayFormulas ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7369)) VARIANT_BOOL Window::GetDisplayGridlines ( );
__declspec(implementation_key(7370)) void Window::PutDisplayGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7371)) VARIANT_BOOL Window::GetDisplayHeadings ( );
__declspec(implementation_key(7372)) void Window::PutDisplayHeadings ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7373)) VARIANT_BOOL Window::GetDisplayHorizontalScrollBar ( );
__declspec(implementation_key(7374)) void Window::PutDisplayHorizontalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7375)) VARIANT_BOOL Window::GetDisplayOutline ( );
__declspec(implementation_key(7376)) void Window::PutDisplayOutline ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7377)) VARIANT_BOOL Window::Get_DisplayRightToLeft ( );
__declspec(implementation_key(7378)) void Window::Put_DisplayRightToLeft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7379)) VARIANT_BOOL Window::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(7380)) void Window::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7381)) VARIANT_BOOL Window::GetDisplayWorkbookTabs ( );
__declspec(implementation_key(7382)) void Window::PutDisplayWorkbookTabs ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7383)) VARIANT_BOOL Window::GetDisplayZeros ( );
__declspec(implementation_key(7384)) void Window::PutDisplayZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7385)) VARIANT_BOOL Window::GetEnableResize ( );
__declspec(implementation_key(7386)) void Window::PutEnableResize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7387)) VARIANT_BOOL Window::GetFreezePanes ( );
__declspec(implementation_key(7388)) void Window::PutFreezePanes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7389)) long Window::GetGridlineColor ( );
__declspec(implementation_key(7390)) void Window::PutGridlineColor ( long _arg1 );
__declspec(implementation_key(7391)) enum XlColorIndex Window::GetGridlineColorIndex ( );
__declspec(implementation_key(7392)) void Window::PutGridlineColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(7393)) double Window::GetHeight ( );
__declspec(implementation_key(7394)) void Window::PutHeight ( double _arg1 );
__declspec(implementation_key(7395)) long Window::GetIndex ( );
__declspec(implementation_key(7396)) _variant_t Window::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(7397)) double Window::GetLeft ( );
__declspec(implementation_key(7398)) void Window::PutLeft ( double _arg1 );
__declspec(implementation_key(7399)) WindowPtr Window::NewWindow ( );
__declspec(implementation_key(7400)) _bstr_t Window::GetOnWindow ( );
__declspec(implementation_key(7401)) void Window::PutOnWindow ( _bstr_t _arg1 );
__declspec(implementation_key(7402)) PanesPtr Window::GetPanes ( );
__declspec(implementation_key(7403)) _variant_t Window::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(7404)) _variant_t Window::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(7405)) RangePtr Window::GetRangeSelection ( );
__declspec(implementation_key(7406)) long Window::GetScrollColumn ( );
__declspec(implementation_key(7407)) void Window::PutScrollColumn ( long _arg1 );
__declspec(implementation_key(7408)) long Window::GetScrollRow ( );
__declspec(implementation_key(7409)) void Window::PutScrollRow ( long _arg1 );
__declspec(implementation_key(7410)) _variant_t Window::ScrollWorkbookTabs ( const _variant_t & Sheets, const _variant_t & Position );
__declspec(implementation_key(7411)) SheetsPtr Window::GetSelectedSheets ( );
__declspec(implementation_key(7412)) IDispatchPtr Window::GetSelection ( );
__declspec(implementation_key(7413)) _variant_t Window::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(7414)) VARIANT_BOOL Window::GetSplit ( );
__declspec(implementation_key(7415)) void Window::PutSplit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7416)) long Window::GetSplitColumn ( );
__declspec(implementation_key(7417)) void Window::PutSplitColumn ( long _arg1 );
__declspec(implementation_key(7418)) double Window::GetSplitHorizontal ( );
__declspec(implementation_key(7419)) void Window::PutSplitHorizontal ( double _arg1 );
__declspec(implementation_key(7420)) long Window::GetSplitRow ( );
__declspec(implementation_key(7421)) void Window::PutSplitRow ( long _arg1 );
__declspec(implementation_key(7422)) double Window::GetSplitVertical ( );
__declspec(implementation_key(7423)) void Window::PutSplitVertical ( double _arg1 );
__declspec(implementation_key(7424)) double Window::GetTabRatio ( );
__declspec(implementation_key(7425)) void Window::PutTabRatio ( double _arg1 );
__declspec(implementation_key(7426)) double Window::GetTop ( );
__declspec(implementation_key(7427)) void Window::PutTop ( double _arg1 );
__declspec(implementation_key(7428)) enum XlWindowType Window::GetType ( );
__declspec(implementation_key(7429)) double Window::GetUsableHeight ( );
__declspec(implementation_key(7430)) double Window::GetUsableWidth ( );
__declspec(implementation_key(7431)) VARIANT_BOOL Window::GetVisible ( );
__declspec(implementation_key(7432)) void Window::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7433)) RangePtr Window::GetVisibleRange ( );
__declspec(implementation_key(7434)) double Window::GetWidth ( );
__declspec(implementation_key(7435)) void Window::PutWidth ( double _arg1 );
__declspec(implementation_key(7436)) long Window::GetWindowNumber ( );
__declspec(implementation_key(7437)) enum XlWindowState Window::GetWindowState ( );
__declspec(implementation_key(7438)) void Window::PutWindowState ( enum XlWindowState _arg1 );
__declspec(implementation_key(7439)) _variant_t Window::GetZoom ( );
__declspec(implementation_key(7440)) void Window::PutZoom ( const _variant_t & _arg1 );
__declspec(implementation_key(7441)) enum XlWindowView Window::GetView ( );
__declspec(implementation_key(7442)) void Window::PutView ( enum XlWindowView _arg1 );
__declspec(implementation_key(7443)) VARIANT_BOOL Window::GetDisplayRightToLeft ( );
__declspec(implementation_key(7444)) void Window::PutDisplayRightToLeft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7445)) long Window::PointsToScreenPixelsX ( long Points );
__declspec(implementation_key(7446)) long Window::PointsToScreenPixelsY ( long Points );
__declspec(implementation_key(7447)) IDispatchPtr Window::RangeFromPoint ( long x, long y );
__declspec(implementation_key(7448)) HRESULT Window::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(7449)) _ApplicationPtr Windows::GetApplication ( );
__declspec(implementation_key(7450)) enum XlCreator Windows::GetCreator ( );
__declspec(implementation_key(7451)) IDispatchPtr Windows::GetParent ( );
__declspec(implementation_key(7452)) _variant_t Windows::Arrange ( enum XlArrangeStyle ArrangeStyle, const _variant_t & ActiveWorkbook, const _variant_t & SyncHorizontal, const _variant_t & SyncVertical );
__declspec(implementation_key(7453)) long Windows::GetCount ( );
__declspec(implementation_key(7454)) WindowPtr Windows::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7455)) IUnknownPtr Windows::Get_NewEnum ( );
__declspec(implementation_key(7456)) WindowPtr Windows::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7457)) HRESULT AppEvents::NewWorkbook ( struct _Workbook * Wb );
__declspec(implementation_key(7458)) HRESULT AppEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(7459)) HRESULT AppEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(7460)) HRESULT AppEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(7461)) HRESULT AppEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(7462)) HRESULT AppEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(7463)) HRESULT AppEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(7464)) HRESULT AppEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(7465)) HRESULT AppEvents::WorkbookOpen ( struct _Workbook * Wb );
__declspec(implementation_key(7466)) HRESULT AppEvents::WorkbookActivate ( struct _Workbook * Wb );
__declspec(implementation_key(7467)) HRESULT AppEvents::WorkbookDeactivate ( struct _Workbook * Wb );
__declspec(implementation_key(7468)) HRESULT AppEvents::WorkbookBeforeClose ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(7469)) HRESULT AppEvents::WorkbookBeforeSave ( struct _Workbook * Wb, VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(7470)) HRESULT AppEvents::WorkbookBeforePrint ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(7471)) HRESULT AppEvents::WorkbookNewSheet ( struct _Workbook * Wb, IDispatch * Sh );
__declspec(implementation_key(7472)) HRESULT AppEvents::WorkbookAddinInstall ( struct _Workbook * Wb );
__declspec(implementation_key(7473)) HRESULT AppEvents::WorkbookAddinUninstall ( struct _Workbook * Wb );
__declspec(implementation_key(7474)) HRESULT AppEvents::WindowResize ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(7475)) HRESULT AppEvents::WindowActivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(7476)) HRESULT AppEvents::WindowDeactivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(7477)) HRESULT AppEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(7478)) HRESULT AppEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target );
__declspec(implementation_key(7479)) HRESULT AppEvents::WorkbookPivotTableCloseConnection ( struct _Workbook * Wb, struct PivotTable * Target );
__declspec(implementation_key(7480)) HRESULT AppEvents::WorkbookPivotTableOpenConnection ( struct _Workbook * Wb, struct PivotTable * Target );
__declspec(implementation_key(7481)) _ApplicationPtr WorksheetFunction::GetApplication ( );
__declspec(implementation_key(7482)) enum XlCreator WorksheetFunction::GetCreator ( );
__declspec(implementation_key(7483)) IDispatchPtr WorksheetFunction::GetParent ( );
__declspec(implementation_key(7484)) _variant_t WorksheetFunction::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7485)) double WorksheetFunction::Count ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7486)) VARIANT_BOOL WorksheetFunction::IsNA ( const _variant_t & Arg1 );
__declspec(implementation_key(7487)) VARIANT_BOOL WorksheetFunction::IsError ( const _variant_t & Arg1 );
__declspec(implementation_key(7488)) double WorksheetFunction::Sum ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7489)) double WorksheetFunction::Average ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7490)) double WorksheetFunction::Min ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7491)) double WorksheetFunction::Max ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7492)) double WorksheetFunction::Npv ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7493)) double WorksheetFunction::StDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7494)) _bstr_t WorksheetFunction::Dollar ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7495)) _bstr_t WorksheetFunction::Fixed ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7496)) double WorksheetFunction::Pi ( );
__declspec(implementation_key(7497)) double WorksheetFunction::Ln ( double Arg1 );
__declspec(implementation_key(7498)) double WorksheetFunction::Log10 ( double Arg1 );
__declspec(implementation_key(7499)) double WorksheetFunction::Round ( double Arg1, double Arg2 );
__declspec(implementation_key(7500)) _variant_t WorksheetFunction::Lookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7501)) _variant_t WorksheetFunction::Index ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(7502)) _bstr_t WorksheetFunction::Rept ( _bstr_t Arg1, double Arg2 );
__declspec(implementation_key(7503)) VARIANT_BOOL WorksheetFunction::And ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7504)) VARIANT_BOOL WorksheetFunction::Or ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7505)) double WorksheetFunction::DCount ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7506)) double WorksheetFunction::DSum ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7507)) double WorksheetFunction::DAverage ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7508)) double WorksheetFunction::DMin ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7509)) double WorksheetFunction::DMax ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7510)) double WorksheetFunction::DStDev ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7511)) double WorksheetFunction::Var ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7512)) double WorksheetFunction::DVar ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7513)) _bstr_t WorksheetFunction::Text ( const _variant_t & Arg1, _bstr_t Arg2 );
__declspec(implementation_key(7514)) _variant_t WorksheetFunction::LinEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(7515)) _variant_t WorksheetFunction::Trend ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(7516)) _variant_t WorksheetFunction::LogEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(7517)) _variant_t WorksheetFunction::Growth ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(7518)) double WorksheetFunction::Pv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(7519)) double WorksheetFunction::Fv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(7520)) double WorksheetFunction::NPer ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(7521)) double WorksheetFunction::Pmt ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(7522)) double WorksheetFunction::Rate ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(7523)) double WorksheetFunction::MIrr ( const _variant_t & Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7524)) double WorksheetFunction::Irr ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7525)) double WorksheetFunction::Match ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7526)) double WorksheetFunction::Weekday ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7527)) double WorksheetFunction::Search ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7528)) _variant_t WorksheetFunction::Transpose ( const _variant_t & Arg1 );
__declspec(implementation_key(7529)) double WorksheetFunction::Atan2 ( double Arg1, double Arg2 );
__declspec(implementation_key(7530)) double WorksheetFunction::Asin ( double Arg1 );
__declspec(implementation_key(7531)) double WorksheetFunction::Acos ( double Arg1 );
__declspec(implementation_key(7532)) _variant_t WorksheetFunction::Choose ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7533)) _variant_t WorksheetFunction::HLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(7534)) _variant_t WorksheetFunction::VLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(7535)) double WorksheetFunction::Log ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7536)) _bstr_t WorksheetFunction::Proper ( _bstr_t Arg1 );
__declspec(implementation_key(7537)) _bstr_t WorksheetFunction::Trim ( _bstr_t Arg1 );
__declspec(implementation_key(7538)) _bstr_t WorksheetFunction::Replace ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(7539)) _bstr_t WorksheetFunction::Substitute ( _bstr_t Arg1, _bstr_t Arg2, _bstr_t Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(7540)) double WorksheetFunction::Find ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7541)) VARIANT_BOOL WorksheetFunction::IsErr ( const _variant_t & Arg1 );
__declspec(implementation_key(7542)) VARIANT_BOOL WorksheetFunction::IsText ( const _variant_t & Arg1 );
__declspec(implementation_key(7543)) VARIANT_BOOL WorksheetFunction::IsNumber ( const _variant_t & Arg1 );
__declspec(implementation_key(7544)) double WorksheetFunction::Sln ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7545)) double WorksheetFunction::Syd ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(7546)) double WorksheetFunction::Ddb ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(7547)) _bstr_t WorksheetFunction::Clean ( _bstr_t Arg1 );
__declspec(implementation_key(7548)) double WorksheetFunction::MDeterm ( const _variant_t & Arg1 );
__declspec(implementation_key(7549)) _variant_t WorksheetFunction::MInverse ( const _variant_t & Arg1 );
__declspec(implementation_key(7550)) _variant_t WorksheetFunction::MMult ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7551)) double WorksheetFunction::Ipmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(7552)) double WorksheetFunction::Ppmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(7553)) double WorksheetFunction::CountA ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7554)) double WorksheetFunction::Product ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7555)) double WorksheetFunction::Fact ( double Arg1 );
__declspec(implementation_key(7556)) double WorksheetFunction::DProduct ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7557)) VARIANT_BOOL WorksheetFunction::IsNonText ( const _variant_t & Arg1 );
__declspec(implementation_key(7558)) double WorksheetFunction::StDevP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7559)) double WorksheetFunction::VarP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7560)) double WorksheetFunction::DStDevP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7561)) double WorksheetFunction::DVarP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7562)) VARIANT_BOOL WorksheetFunction::IsLogical ( const _variant_t & Arg1 );
__declspec(implementation_key(7563)) double WorksheetFunction::DCountA ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7564)) _bstr_t WorksheetFunction::USDollar ( double Arg1, double Arg2 );
__declspec(implementation_key(7565)) double WorksheetFunction::FindB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7566)) double WorksheetFunction::SearchB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7567)) _bstr_t WorksheetFunction::ReplaceB ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(7568)) double WorksheetFunction::RoundUp ( double Arg1, double Arg2 );
__declspec(implementation_key(7569)) double WorksheetFunction::RoundDown ( double Arg1, double Arg2 );
__declspec(implementation_key(7570)) double WorksheetFunction::Rank ( double Arg1, struct Range * Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7571)) double WorksheetFunction::Days360 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7572)) double WorksheetFunction::Vdb ( double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, const _variant_t & Arg6, const _variant_t & Arg7 );
__declspec(implementation_key(7573)) double WorksheetFunction::Median ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7574)) double WorksheetFunction::SumProduct ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7575)) double WorksheetFunction::Sinh ( double Arg1 );
__declspec(implementation_key(7576)) double WorksheetFunction::Cosh ( double Arg1 );
__declspec(implementation_key(7577)) double WorksheetFunction::Tanh ( double Arg1 );
__declspec(implementation_key(7578)) double WorksheetFunction::Asinh ( double Arg1 );
__declspec(implementation_key(7579)) double WorksheetFunction::Acosh ( double Arg1 );
__declspec(implementation_key(7580)) double WorksheetFunction::Atanh ( double Arg1 );
__declspec(implementation_key(7581)) _variant_t WorksheetFunction::DGet ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7582)) double WorksheetFunction::Db ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(7583)) _variant_t WorksheetFunction::Frequency ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7584)) double WorksheetFunction::AveDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7585)) double WorksheetFunction::BetaDist ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(7586)) double WorksheetFunction::GammaLn ( double Arg1 );
__declspec(implementation_key(7587)) double WorksheetFunction::BetaInv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(7588)) double WorksheetFunction::BinomDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(7589)) double WorksheetFunction::ChiDist ( double Arg1, double Arg2 );
__declspec(implementation_key(7590)) double WorksheetFunction::ChiInv ( double Arg1, double Arg2 );
__declspec(implementation_key(7591)) double WorksheetFunction::Combin ( double Arg1, double Arg2 );
__declspec(implementation_key(7592)) double WorksheetFunction::Confidence ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7593)) double WorksheetFunction::CritBinom ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7594)) double WorksheetFunction::Even ( double Arg1 );
__declspec(implementation_key(7595)) double WorksheetFunction::ExponDist ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(7596)) double WorksheetFunction::FDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7597)) double WorksheetFunction::FInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7598)) double WorksheetFunction::Fisher ( double Arg1 );
__declspec(implementation_key(7599)) double WorksheetFunction::FisherInv ( double Arg1 );
__declspec(implementation_key(7600)) double WorksheetFunction::Floor ( double Arg1, double Arg2 );
__declspec(implementation_key(7601)) double WorksheetFunction::GammaDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(7602)) double WorksheetFunction::GammaInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7603)) double WorksheetFunction::Ceiling ( double Arg1, double Arg2 );
__declspec(implementation_key(7604)) double WorksheetFunction::HypGeomDist ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(7605)) double WorksheetFunction::LogNormDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7606)) double WorksheetFunction::LogInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7607)) double WorksheetFunction::NegBinomDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7608)) double WorksheetFunction::NormDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(7609)) double WorksheetFunction::NormSDist ( double Arg1 );
__declspec(implementation_key(7610)) double WorksheetFunction::NormInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7611)) double WorksheetFunction::NormSInv ( double Arg1 );
__declspec(implementation_key(7612)) double WorksheetFunction::Standardize ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7613)) double WorksheetFunction::Odd ( double Arg1 );
__declspec(implementation_key(7614)) double WorksheetFunction::Permut ( double Arg1, double Arg2 );
__declspec(implementation_key(7615)) double WorksheetFunction::Poisson ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(7616)) double WorksheetFunction::TDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(7617)) double WorksheetFunction::Weibull ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(7618)) double WorksheetFunction::SumXMY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7619)) double WorksheetFunction::SumX2MY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7620)) double WorksheetFunction::SumX2PY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7621)) double WorksheetFunction::ChiTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7622)) double WorksheetFunction::Correl ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7623)) double WorksheetFunction::Covar ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7624)) double WorksheetFunction::Forecast ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7625)) double WorksheetFunction::FTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7626)) double WorksheetFunction::Intercept ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7627)) double WorksheetFunction::Pearson ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7628)) double WorksheetFunction::RSq ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7629)) double WorksheetFunction::StEyx ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7630)) double WorksheetFunction::Slope ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7631)) double WorksheetFunction::TTest ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(7632)) double WorksheetFunction::Prob ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(7633)) double WorksheetFunction::DevSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7634)) double WorksheetFunction::GeoMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7635)) double WorksheetFunction::HarMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7636)) double WorksheetFunction::SumSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7637)) double WorksheetFunction::Kurt ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7638)) double WorksheetFunction::Skew ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7639)) double WorksheetFunction::ZTest ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7640)) double WorksheetFunction::Large ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(7641)) double WorksheetFunction::Small ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(7642)) double WorksheetFunction::Quartile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(7643)) double WorksheetFunction::Percentile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(7644)) double WorksheetFunction::PercentRank ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7645)) double WorksheetFunction::Mode ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7646)) double WorksheetFunction::TrimMean ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(7647)) double WorksheetFunction::TInv ( double Arg1, double Arg2 );
__declspec(implementation_key(7648)) double WorksheetFunction::Power ( double Arg1, double Arg2 );
__declspec(implementation_key(7649)) double WorksheetFunction::Radians ( double Arg1 );
__declspec(implementation_key(7650)) double WorksheetFunction::Degrees ( double Arg1 );
__declspec(implementation_key(7651)) double WorksheetFunction::Subtotal ( double Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7652)) double WorksheetFunction::SumIf ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(7653)) double WorksheetFunction::CountIf ( struct Range * Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7654)) double WorksheetFunction::CountBlank ( struct Range * Arg1 );
__declspec(implementation_key(7655)) double WorksheetFunction::Ispmt ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(7656)) _bstr_t WorksheetFunction::Roman ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(7657)) _bstr_t WorksheetFunction::Asc ( _bstr_t Arg1 );
__declspec(implementation_key(7658)) _bstr_t WorksheetFunction::Dbcs ( _bstr_t Arg1 );
__declspec(implementation_key(7659)) _bstr_t WorksheetFunction::Phonetic ( struct Range * Arg1 );
__declspec(implementation_key(7660)) _bstr_t WorksheetFunction::BahtText ( double Arg1 );
__declspec(implementation_key(7661)) _bstr_t WorksheetFunction::ThaiDayOfWeek ( double Arg1 );
__declspec(implementation_key(7662)) _bstr_t WorksheetFunction::ThaiDigit ( _bstr_t Arg1 );
__declspec(implementation_key(7663)) _bstr_t WorksheetFunction::ThaiMonthOfYear ( double Arg1 );
__declspec(implementation_key(7664)) _bstr_t WorksheetFunction::ThaiNumSound ( double Arg1 );
__declspec(implementation_key(7665)) _bstr_t WorksheetFunction::ThaiNumString ( double Arg1 );
__declspec(implementation_key(7666)) double WorksheetFunction::ThaiStringLength ( _bstr_t Arg1 );
__declspec(implementation_key(7667)) VARIANT_BOOL WorksheetFunction::IsThaiDigit ( _bstr_t Arg1 );
__declspec(implementation_key(7668)) double WorksheetFunction::RoundBahtDown ( double Arg1 );
__declspec(implementation_key(7669)) double WorksheetFunction::RoundBahtUp ( double Arg1 );
__declspec(implementation_key(7670)) double WorksheetFunction::ThaiYear ( double Arg1 );
__declspec(implementation_key(7671)) _variant_t WorksheetFunction::RTD ( const _variant_t & progID, const _variant_t & server, const _variant_t & topic1, const _variant_t & topic2, const _variant_t & topic3, const _variant_t & topic4, const _variant_t & topic5, const _variant_t & topic6, const _variant_t & topic7, const _variant_t & topic8, const _variant_t & topic9, const _variant_t & topic10, const _variant_t & topic11, const _variant_t & topic12, const _variant_t & topic13, const _variant_t & topic14, const _variant_t & topic15, const _variant_t & topic16, const _variant_t & topic17, const _variant_t & topic18, const _variant_t & topic19, const _variant_t & topic20, const _variant_t & topic21, const _variant_t & topic22, const _variant_t & topic23, const _variant_t & topic24, const _variant_t & topic25, const _variant_t & topic26, const _variant_t & topic27, const _variant_t & topic28 );
__declspec(implementation_key(7672)) _ApplicationPtr Range::GetApplication ( );
__declspec(implementation_key(7673)) enum XlCreator Range::GetCreator ( );
__declspec(implementation_key(7674)) IDispatchPtr Range::GetParent ( );
__declspec(implementation_key(7675)) _variant_t Range::Activate ( );
__declspec(implementation_key(7676)) _variant_t Range::GetAddIndent ( );
__declspec(implementation_key(7677)) void Range::PutAddIndent ( const _variant_t & _arg1 );
__declspec(implementation_key(7678)) _bstr_t Range::GetAddress ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo );
__declspec(implementation_key(7679)) _bstr_t Range::GetAddressLocal ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo );
__declspec(implementation_key(7680)) _variant_t Range::AdvancedFilter ( enum XlFilterAction Action, const _variant_t & CriteriaRange, const _variant_t & CopyToRange, const _variant_t & Unique );
__declspec(implementation_key(7681)) _variant_t Range::ApplyNames ( const _variant_t & Names, const _variant_t & IgnoreRelativeAbsolute, const _variant_t & UseRowColumnNames, const _variant_t & OmitColumn, const _variant_t & OmitRow, enum XlApplyNamesOrder Order, const _variant_t & AppendLast );
__declspec(implementation_key(7682)) _variant_t Range::ApplyOutlineStyles ( );
__declspec(implementation_key(7683)) AreasPtr Range::GetAreas ( );
__declspec(implementation_key(7684)) _bstr_t Range::AutoComplete ( _bstr_t String );
__declspec(implementation_key(7685)) _variant_t Range::AutoFill ( struct Range * Destination, enum XlAutoFillType Type );
__declspec(implementation_key(7686)) _variant_t Range::AutoFilter ( const _variant_t & Field, const _variant_t & Criteria1, enum XlAutoFilterOperator Operator, const _variant_t & Criteria2, const _variant_t & VisibleDropDown );
__declspec(implementation_key(7687)) _variant_t Range::AutoFit ( );
__declspec(implementation_key(7688)) _variant_t Range::AutoFormat ( enum XlRangeAutoFormat Format, const _variant_t & Number, const _variant_t & Font, const _variant_t & Alignment, const _variant_t & Border, const _variant_t & Pattern, const _variant_t & Width );
__declspec(implementation_key(7689)) _variant_t Range::AutoOutline ( );
__declspec(implementation_key(7690)) _variant_t Range::BorderAround ( const _variant_t & LineStyle, enum XlBorderWeight Weight, enum XlColorIndex ColorIndex, const _variant_t & Color );
__declspec(implementation_key(7691)) BordersPtr Range::GetBorders ( );
__declspec(implementation_key(7692)) _variant_t Range::Calculate ( );
__declspec(implementation_key(7693)) RangePtr Range::GetCells ( );
__declspec(implementation_key(7694)) CharactersPtr Range::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7695)) _variant_t Range::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7696)) _variant_t Range::Clear ( );
__declspec(implementation_key(7697)) _variant_t Range::ClearContents ( );
__declspec(implementation_key(7698)) _variant_t Range::ClearFormats ( );
__declspec(implementation_key(7699)) _variant_t Range::ClearNotes ( );
__declspec(implementation_key(7700)) _variant_t Range::ClearOutline ( );
__declspec(implementation_key(7701)) long Range::GetColumn ( );
__declspec(implementation_key(7702)) RangePtr Range::ColumnDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(7703)) RangePtr Range::GetColumns ( );
__declspec(implementation_key(7704)) _variant_t Range::GetColumnWidth ( );
__declspec(implementation_key(7705)) void Range::PutColumnWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(7706)) _variant_t Range::Consolidate ( const _variant_t & Sources, const _variant_t & Function, const _variant_t & TopRow, const _variant_t & LeftColumn, const _variant_t & CreateLinks );
__declspec(implementation_key(7707)) _variant_t Range::Copy ( const _variant_t & Destination );
__declspec(implementation_key(7708)) long Range::CopyFromRecordset ( IUnknown * Data, const _variant_t & MaxRows, const _variant_t & MaxColumns );
__declspec(implementation_key(7709)) _variant_t Range::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7710)) long Range::GetCount ( );
__declspec(implementation_key(7711)) _variant_t Range::CreateNames ( const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right );
__declspec(implementation_key(7712)) _variant_t Range::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU );
__declspec(implementation_key(7713)) RangePtr Range::GetCurrentArray ( );
__declspec(implementation_key(7714)) RangePtr Range::GetCurrentRegion ( );
__declspec(implementation_key(7715)) _variant_t Range::Cut ( const _variant_t & Destination );
__declspec(implementation_key(7716)) _variant_t Range::DataSeries ( const _variant_t & Rowcol, enum XlDataSeriesType Type, enum XlDataSeriesDate Date, const _variant_t & Step, const _variant_t & Stop, const _variant_t & Trend );
__declspec(implementation_key(7717)) _variant_t Range::Get_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex );
__declspec(implementation_key(7718)) void Range::Put_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, const _variant_t & _arg3 );
__declspec(implementation_key(7719)) _variant_t Range::Delete ( const _variant_t & Shift );
__declspec(implementation_key(7720)) RangePtr Range::GetDependents ( );
__declspec(implementation_key(7721)) _variant_t Range::ignorethis ( );
__declspec(implementation_key(7722)) RangePtr Range::GetDirectDependents ( );
__declspec(implementation_key(7723)) RangePtr Range::GetDirectPrecedents ( );
__declspec(implementation_key(7724)) _variant_t Range::EditionOptions ( enum XlEditionType Type, enum XlEditionOptionsOption Option, const _variant_t & Name, const _variant_t & Reference, enum XlPictureAppearance Appearance, enum XlPictureAppearance ChartSize, const _variant_t & Format );
__declspec(implementation_key(7725)) RangePtr Range::GetEnd ( enum XlDirection Direction );
__declspec(implementation_key(7726)) RangePtr Range::GetEntireColumn ( );
__declspec(implementation_key(7727)) RangePtr Range::GetEntireRow ( );
__declspec(implementation_key(7728)) _variant_t Range::FillDown ( );
__declspec(implementation_key(7729)) _variant_t Range::FillLeft ( );
__declspec(implementation_key(7730)) _variant_t Range::FillRight ( );
__declspec(implementation_key(7731)) _variant_t Range::FillUp ( );
__declspec(implementation_key(7732)) RangePtr Range::Find ( const _variant_t & What, const _variant_t & After, const _variant_t & LookIn, const _variant_t & LookAt, const _variant_t & SearchOrder, enum XlSearchDirection SearchDirection, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat );
__declspec(implementation_key(7733)) RangePtr Range::FindNext ( const _variant_t & After );
__declspec(implementation_key(7734)) RangePtr Range::FindPrevious ( const _variant_t & After );
__declspec(implementation_key(7735)) FontPtr Range::GetFont ( );
__declspec(implementation_key(7736)) _variant_t Range::GetFormula ( );
__declspec(implementation_key(7737)) void Range::PutFormula ( const _variant_t & _arg1 );
__declspec(implementation_key(7738)) _variant_t Range::GetFormulaArray ( );
__declspec(implementation_key(7739)) void Range::PutFormulaArray ( const _variant_t & _arg1 );
__declspec(implementation_key(7740)) enum XlFormulaLabel Range::GetFormulaLabel ( );
__declspec(implementation_key(7741)) void Range::PutFormulaLabel ( enum XlFormulaLabel _arg1 );
__declspec(implementation_key(7742)) _variant_t Range::GetFormulaHidden ( );
__declspec(implementation_key(7743)) void Range::PutFormulaHidden ( const _variant_t & _arg1 );
__declspec(implementation_key(7744)) _variant_t Range::GetFormulaLocal ( );
__declspec(implementation_key(7745)) void Range::PutFormulaLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(7746)) _variant_t Range::GetFormulaR1C1 ( );
__declspec(implementation_key(7747)) void Range::PutFormulaR1C1 ( const _variant_t & _arg1 );
__declspec(implementation_key(7748)) _variant_t Range::GetFormulaR1C1Local ( );
__declspec(implementation_key(7749)) void Range::PutFormulaR1C1Local ( const _variant_t & _arg1 );
__declspec(implementation_key(7750)) _variant_t Range::FunctionWizard ( );
__declspec(implementation_key(7751)) VARIANT_BOOL Range::GoalSeek ( const _variant_t & Goal, struct Range * ChangingCell );
__declspec(implementation_key(7752)) _variant_t Range::Group ( const _variant_t & Start, const _variant_t & End, const _variant_t & By, const _variant_t & Periods );
__declspec(implementation_key(7753)) _variant_t Range::GetHasArray ( );
__declspec(implementation_key(7754)) _variant_t Range::GetHasFormula ( );
__declspec(implementation_key(7755)) _variant_t Range::GetHeight ( );
__declspec(implementation_key(7756)) _variant_t Range::GetHidden ( );
__declspec(implementation_key(7757)) void Range::PutHidden ( const _variant_t & _arg1 );
__declspec(implementation_key(7758)) _variant_t Range::GetHorizontalAlignment ( );
__declspec(implementation_key(7759)) void Range::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(7760)) _variant_t Range::GetIndentLevel ( );
__declspec(implementation_key(7761)) void Range::PutIndentLevel ( const _variant_t & _arg1 );
__declspec(implementation_key(7762)) HRESULT Range::InsertIndent ( long InsertAmount );
__declspec(implementation_key(7763)) _variant_t Range::Insert ( const _variant_t & Shift, const _variant_t & CopyOrigin );
__declspec(implementation_key(7764)) InteriorPtr Range::GetInterior ( );
__declspec(implementation_key(7765)) _variant_t Range::GetItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex );
__declspec(implementation_key(7766)) void Range::PutItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, const _variant_t & _arg3 );
__declspec(implementation_key(7767)) _variant_t Range::Justify ( );
__declspec(implementation_key(7768)) _variant_t Range::GetLeft ( );
__declspec(implementation_key(7769)) long Range::GetListHeaderRows ( );
__declspec(implementation_key(7770)) _variant_t Range::ListNames ( );
__declspec(implementation_key(7771)) enum XlLocationInTable Range::GetLocationInTable ( );
__declspec(implementation_key(7772)) _variant_t Range::GetLocked ( );
__declspec(implementation_key(7773)) void Range::PutLocked ( const _variant_t & _arg1 );
__declspec(implementation_key(7774)) HRESULT Range::Merge ( const _variant_t & Across );
__declspec(implementation_key(7775)) HRESULT Range::UnMerge ( );
__declspec(implementation_key(7776)) RangePtr Range::GetMergeArea ( );
__declspec(implementation_key(7777)) _variant_t Range::GetMergeCells ( );
__declspec(implementation_key(7778)) void Range::PutMergeCells ( const _variant_t & _arg1 );
__declspec(implementation_key(7779)) _variant_t Range::GetName ( );
__declspec(implementation_key(7780)) void Range::PutName ( const _variant_t & _arg1 );
__declspec(implementation_key(7781)) _variant_t Range::NavigateArrow ( const _variant_t & TowardPrecedent, const _variant_t & ArrowNumber, const _variant_t & LinkNumber );
__declspec(implementation_key(7782)) IUnknownPtr Range::Get_NewEnum ( );
__declspec(implementation_key(7783)) RangePtr Range::GetNext ( );
__declspec(implementation_key(7784)) _bstr_t Range::NoteText ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7785)) _variant_t Range::GetNumberFormat ( );
__declspec(implementation_key(7786)) void Range::PutNumberFormat ( const _variant_t & _arg1 );
__declspec(implementation_key(7787)) _variant_t Range::GetNumberFormatLocal ( );
__declspec(implementation_key(7788)) void Range::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(7789)) RangePtr Range::GetOffset ( const _variant_t & RowOffset, const _variant_t & ColumnOffset );
__declspec(implementation_key(7790)) _variant_t Range::GetOrientation ( );
__declspec(implementation_key(7791)) void Range::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(7792)) _variant_t Range::GetOutlineLevel ( );
__declspec(implementation_key(7793)) void Range::PutOutlineLevel ( const _variant_t & _arg1 );
__declspec(implementation_key(7794)) long Range::GetPageBreak ( );
__declspec(implementation_key(7795)) void Range::PutPageBreak ( long _arg1 );
__declspec(implementation_key(7796)) _variant_t Range::Parse ( const _variant_t & ParseLine, const _variant_t & Destination );
__declspec(implementation_key(7797)) _variant_t Range::_PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose );
__declspec(implementation_key(7798)) PivotFieldPtr Range::GetPivotField ( );
__declspec(implementation_key(7799)) PivotItemPtr Range::GetPivotItem ( );
__declspec(implementation_key(7800)) PivotTablePtr Range::GetPivotTable ( );
__declspec(implementation_key(7801)) RangePtr Range::GetPrecedents ( );
__declspec(implementation_key(7802)) _variant_t Range::GetPrefixCharacter ( );
__declspec(implementation_key(7803)) RangePtr Range::GetPrevious ( );
__declspec(implementation_key(7804)) _variant_t Range::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(7805)) _variant_t Range::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(7806)) _QueryTablePtr Range::GetQueryTable ( );
__declspec(implementation_key(7807)) RangePtr Range::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(7808)) _variant_t Range::RemoveSubtotal ( );
__declspec(implementation_key(7809)) VARIANT_BOOL Range::Replace ( const _variant_t & What, const _variant_t & Replacement, const _variant_t & LookAt, const _variant_t & SearchOrder, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat, const _variant_t & ReplaceFormat );
__declspec(implementation_key(7810)) RangePtr Range::GetResize ( const _variant_t & RowSize, const _variant_t & ColumnSize );
__declspec(implementation_key(7811)) long Range::GetRow ( );
__declspec(implementation_key(7812)) RangePtr Range::RowDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(7813)) _variant_t Range::GetRowHeight ( );
__declspec(implementation_key(7814)) void Range::PutRowHeight ( const _variant_t & _arg1 );
__declspec(implementation_key(7815)) RangePtr Range::GetRows ( );
__declspec(implementation_key(7816)) _variant_t Range::Run ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7817)) _variant_t Range::Select ( );
__declspec(implementation_key(7818)) _variant_t Range::Show ( );
__declspec(implementation_key(7819)) _variant_t Range::ShowDependents ( const _variant_t & Remove );
__declspec(implementation_key(7820)) _variant_t Range::GetShowDetail ( );
__declspec(implementation_key(7821)) void Range::PutShowDetail ( const _variant_t & _arg1 );
__declspec(implementation_key(7822)) _variant_t Range::ShowErrors ( );
__declspec(implementation_key(7823)) _variant_t Range::ShowPrecedents ( const _variant_t & Remove );
__declspec(implementation_key(7824)) _variant_t Range::GetShrinkToFit ( );
__declspec(implementation_key(7825)) void Range::PutShrinkToFit ( const _variant_t & _arg1 );
__declspec(implementation_key(7826)) _variant_t Range::Sort ( const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Key2, const _variant_t & Type, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortMethod SortMethod, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 );
__declspec(implementation_key(7827)) _variant_t Range::SortSpecial ( enum XlSortMethod SortMethod, const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Type, const _variant_t & Key2, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 );
__declspec(implementation_key(7828)) SoundNotePtr Range::GetSoundNote ( );
__declspec(implementation_key(7829)) RangePtr Range::SpecialCells ( enum XlCellType Type, const _variant_t & Value );
__declspec(implementation_key(7830)) _variant_t Range::GetStyle ( );
__declspec(implementation_key(7831)) void Range::PutStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(7832)) _variant_t Range::SubscribeTo ( _bstr_t Edition, enum XlSubscribeToFormat Format );
__declspec(implementation_key(7833)) _variant_t Range::Subtotal ( long GroupBy, enum XlConsolidationFunction Function, const _variant_t & TotalList, const _variant_t & Replace, const _variant_t & PageBreaks, enum XlSummaryRow SummaryBelowData );
__declspec(implementation_key(7834)) _variant_t Range::GetSummary ( );
__declspec(implementation_key(7835)) _variant_t Range::Table ( const _variant_t & RowInput, const _variant_t & ColumnInput );
__declspec(implementation_key(7836)) _variant_t Range::GetText ( );
__declspec(implementation_key(7837)) _variant_t Range::TextToColumns ( const _variant_t & Destination, enum XlTextParsingType DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, const _variant_t & TrailingMinusNumbers );
__declspec(implementation_key(7838)) _variant_t Range::GetTop ( );
__declspec(implementation_key(7839)) _variant_t Range::Ungroup ( );
__declspec(implementation_key(7840)) _variant_t Range::GetUseStandardHeight ( );
__declspec(implementation_key(7841)) void Range::PutUseStandardHeight ( const _variant_t & _arg1 );
__declspec(implementation_key(7842)) _variant_t Range::GetUseStandardWidth ( );
__declspec(implementation_key(7843)) void Range::PutUseStandardWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(7844)) ValidationPtr Range::GetValidation ( );
__declspec(implementation_key(7845)) _variant_t Range::GetValue ( const _variant_t & RangeValueDataType );
__declspec(implementation_key(7846)) void Range::PutValue ( const _variant_t & RangeValueDataType, const _variant_t & _arg2 );
__declspec(implementation_key(7847)) _variant_t Range::GetValue2 ( );
__declspec(implementation_key(7848)) void Range::PutValue2 ( const _variant_t & _arg1 );
__declspec(implementation_key(7849)) _variant_t Range::GetVerticalAlignment ( );
__declspec(implementation_key(7850)) void Range::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(7851)) _variant_t Range::GetWidth ( );
__declspec(implementation_key(7852)) _WorksheetPtr Range::GetWorksheet ( );
__declspec(implementation_key(7853)) _variant_t Range::GetWrapText ( );
__declspec(implementation_key(7854)) void Range::PutWrapText ( const _variant_t & _arg1 );
__declspec(implementation_key(7855)) CommentPtr Range::AddComment ( const _variant_t & Text );
__declspec(implementation_key(7856)) CommentPtr Range::GetComment ( );
__declspec(implementation_key(7857)) HRESULT Range::ClearComments ( );
__declspec(implementation_key(7858)) PhoneticPtr Range::GetPhonetic ( );
__declspec(implementation_key(7859)) FormatConditionsPtr Range::GetFormatConditions ( );
__declspec(implementation_key(7860)) long Range::GetReadingOrder ( );
__declspec(implementation_key(7861)) void Range::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(7862)) HyperlinksPtr Range::GetHyperlinks ( );
__declspec(implementation_key(7863)) PhoneticsPtr Range::GetPhonetics ( );
__declspec(implementation_key(7864)) HRESULT Range::SetPhonetic ( );
__declspec(implementation_key(7865)) _bstr_t Range::GetID ( );
__declspec(implementation_key(7866)) void Range::PutID ( _bstr_t _arg1 );
__declspec(implementation_key(7867)) _variant_t Range::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(7868)) PivotCellPtr Range::GetPivotCell ( );
__declspec(implementation_key(7869)) HRESULT Range::Dirty ( );
__declspec(implementation_key(7870)) ErrorsPtr Range::GetErrors ( );
__declspec(implementation_key(7871)) SmartTagsPtr Range::GetSmartTags ( );
__declspec(implementation_key(7872)) HRESULT Range::Speak ( const _variant_t & SpeakDirection, const _variant_t & SpeakFormulas );
__declspec(implementation_key(7873)) _variant_t Range::PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose );
__declspec(implementation_key(7874)) VARIANT_BOOL Range::GetAllowEdit ( );
__declspec(implementation_key(7875)) HRESULT ChartEvents::Activate ( );
__declspec(implementation_key(7876)) HRESULT ChartEvents::Deactivate ( );
__declspec(implementation_key(7877)) HRESULT ChartEvents::Resize ( );
__declspec(implementation_key(7878)) HRESULT ChartEvents::MouseDown ( long Button, long Shift, long x, long y );
__declspec(implementation_key(7879)) HRESULT ChartEvents::MouseUp ( long Button, long Shift, long x, long y );
__declspec(implementation_key(7880)) HRESULT ChartEvents::MouseMove ( long Button, long Shift, long x, long y );
__declspec(implementation_key(7881)) HRESULT ChartEvents::BeforeRightClick ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(7882)) HRESULT ChartEvents::DragPlot ( );
__declspec(implementation_key(7883)) HRESULT ChartEvents::DragOver ( );
__declspec(implementation_key(7884)) HRESULT ChartEvents::BeforeDoubleClick ( long ElementID, long Arg1, long Arg2, VARIANT_BOOL * Cancel );
__declspec(implementation_key(7885)) HRESULT ChartEvents::Select ( long ElementID, long Arg1, long Arg2 );
__declspec(implementation_key(7886)) HRESULT ChartEvents::SeriesChange ( long SeriesIndex, long PointIndex );
__declspec(implementation_key(7887)) HRESULT ChartEvents::Calculate ( );
__declspec(implementation_key(7888)) _ApplicationPtr VPageBreak::GetApplication ( );
__declspec(implementation_key(7889)) enum XlCreator VPageBreak::GetCreator ( );
__declspec(implementation_key(7890)) _WorksheetPtr VPageBreak::GetParent ( );
__declspec(implementation_key(7891)) HRESULT VPageBreak::Delete ( );
__declspec(implementation_key(7892)) HRESULT VPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(7893)) enum XlPageBreak VPageBreak::GetType ( );
__declspec(implementation_key(7894)) void VPageBreak::PutType ( enum XlPageBreak _arg1 );
__declspec(implementation_key(7895)) enum XlPageBreakExtent VPageBreak::GetExtent ( );
__declspec(implementation_key(7896)) RangePtr VPageBreak::GetLocation ( );
__declspec(implementation_key(7897)) void VPageBreak::PutRefLocation ( struct Range * _arg1 );
__declspec(implementation_key(7898)) _ApplicationPtr HPageBreak::GetApplication ( );
__declspec(implementation_key(7899)) enum XlCreator HPageBreak::GetCreator ( );
__declspec(implementation_key(7900)) _WorksheetPtr HPageBreak::GetParent ( );
__declspec(implementation_key(7901)) HRESULT HPageBreak::Delete ( );
__declspec(implementation_key(7902)) HRESULT HPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(7903)) enum XlPageBreak HPageBreak::GetType ( );
__declspec(implementation_key(7904)) void HPageBreak::PutType ( enum XlPageBreak _arg1 );
__declspec(implementation_key(7905)) enum XlPageBreakExtent HPageBreak::GetExtent ( );
__declspec(implementation_key(7906)) RangePtr HPageBreak::GetLocation ( );
__declspec(implementation_key(7907)) void HPageBreak::PutRefLocation ( struct Range * _arg1 );
__declspec(implementation_key(7908)) _ApplicationPtr HPageBreaks::GetApplication ( );
__declspec(implementation_key(7909)) enum XlCreator HPageBreaks::GetCreator ( );
__declspec(implementation_key(7910)) IDispatchPtr HPageBreaks::GetParent ( );
__declspec(implementation_key(7911)) long HPageBreaks::GetCount ( );
__declspec(implementation_key(7912)) HPageBreakPtr HPageBreaks::GetItem ( long Index );
__declspec(implementation_key(7913)) HPageBreakPtr HPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(7914)) IUnknownPtr HPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(7915)) HPageBreakPtr HPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(7916)) _ApplicationPtr VPageBreaks::GetApplication ( );
__declspec(implementation_key(7917)) enum XlCreator VPageBreaks::GetCreator ( );
__declspec(implementation_key(7918)) IDispatchPtr VPageBreaks::GetParent ( );
__declspec(implementation_key(7919)) long VPageBreaks::GetCount ( );
__declspec(implementation_key(7920)) VPageBreakPtr VPageBreaks::GetItem ( long Index );
__declspec(implementation_key(7921)) VPageBreakPtr VPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(7922)) IUnknownPtr VPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(7923)) VPageBreakPtr VPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(7924)) _ApplicationPtr RecentFile::GetApplication ( );
__declspec(implementation_key(7925)) enum XlCreator RecentFile::GetCreator ( );
__declspec(implementation_key(7926)) IDispatchPtr RecentFile::GetParent ( );
__declspec(implementation_key(7927)) _bstr_t RecentFile::GetName ( );
__declspec(implementation_key(7928)) _bstr_t RecentFile::GetPath ( );
__declspec(implementation_key(7929)) long RecentFile::GetIndex ( );
__declspec(implementation_key(7930)) _WorkbookPtr RecentFile::Open ( );
__declspec(implementation_key(7931)) HRESULT RecentFile::Delete ( );
__declspec(implementation_key(7932)) _ApplicationPtr RecentFiles::GetApplication ( );
__declspec(implementation_key(7933)) enum XlCreator RecentFiles::GetCreator ( );
__declspec(implementation_key(7934)) IDispatchPtr RecentFiles::GetParent ( );
__declspec(implementation_key(7935)) long RecentFiles::GetMaximum ( );
__declspec(implementation_key(7936)) void RecentFiles::PutMaximum ( long _arg1 );
__declspec(implementation_key(7937)) long RecentFiles::GetCount ( );
__declspec(implementation_key(7938)) RecentFilePtr RecentFiles::GetItem ( long Index );
__declspec(implementation_key(7939)) RecentFilePtr RecentFiles::Get_Default ( long Index );
__declspec(implementation_key(7940)) RecentFilePtr RecentFiles::Add ( _bstr_t Name );
__declspec(implementation_key(7941)) IUnknownPtr RecentFiles::Get_NewEnum ( );
__declspec(implementation_key(7942)) HRESULT DocEvents::SelectionChange ( struct Range * Target );
__declspec(implementation_key(7943)) HRESULT DocEvents::BeforeDoubleClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(7944)) HRESULT DocEvents::BeforeRightClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(7945)) HRESULT DocEvents::Activate ( );
__declspec(implementation_key(7946)) HRESULT DocEvents::Deactivate ( );
__declspec(implementation_key(7947)) HRESULT DocEvents::Calculate ( );
__declspec(implementation_key(7948)) HRESULT DocEvents::Change ( struct Range * Target );
__declspec(implementation_key(7949)) HRESULT DocEvents::FollowHyperlink ( struct Hyperlink * Target );
__declspec(implementation_key(7950)) HRESULT DocEvents::PivotTableUpdate ( struct PivotTable * Target );
__declspec(implementation_key(7951)) _ApplicationPtr Style::GetApplication ( );
__declspec(implementation_key(7952)) enum XlCreator Style::GetCreator ( );
__declspec(implementation_key(7953)) IDispatchPtr Style::GetParent ( );
__declspec(implementation_key(7954)) VARIANT_BOOL Style::GetAddIndent ( );
__declspec(implementation_key(7955)) void Style::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7956)) VARIANT_BOOL Style::GetBuiltIn ( );
__declspec(implementation_key(7957)) BordersPtr Style::GetBorders ( );
__declspec(implementation_key(7958)) _variant_t Style::Delete ( );
__declspec(implementation_key(7959)) FontPtr Style::GetFont ( );
__declspec(implementation_key(7960)) VARIANT_BOOL Style::GetFormulaHidden ( );
__declspec(implementation_key(7961)) void Style::PutFormulaHidden ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7962)) enum XlHAlign Style::GetHorizontalAlignment ( );
__declspec(implementation_key(7963)) void Style::PutHorizontalAlignment ( enum XlHAlign _arg1 );
__declspec(implementation_key(7964)) VARIANT_BOOL Style::GetIncludeAlignment ( );
__declspec(implementation_key(7965)) void Style::PutIncludeAlignment ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7966)) VARIANT_BOOL Style::GetIncludeBorder ( );
__declspec(implementation_key(7967)) void Style::PutIncludeBorder ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7968)) VARIANT_BOOL Style::GetIncludeFont ( );
__declspec(implementation_key(7969)) void Style::PutIncludeFont ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7970)) VARIANT_BOOL Style::GetIncludeNumber ( );
__declspec(implementation_key(7971)) void Style::PutIncludeNumber ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7972)) VARIANT_BOOL Style::GetIncludePatterns ( );
__declspec(implementation_key(7973)) void Style::PutIncludePatterns ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7974)) VARIANT_BOOL Style::GetIncludeProtection ( );
__declspec(implementation_key(7975)) void Style::PutIncludeProtection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7976)) long Style::GetIndentLevel ( );
__declspec(implementation_key(7977)) void Style::PutIndentLevel ( long _arg1 );
__declspec(implementation_key(7978)) InteriorPtr Style::GetInterior ( );
__declspec(implementation_key(7979)) VARIANT_BOOL Style::GetLocked ( );
__declspec(implementation_key(7980)) void Style::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7981)) _variant_t Style::GetMergeCells ( );
__declspec(implementation_key(7982)) void Style::PutMergeCells ( const _variant_t & _arg1 );
__declspec(implementation_key(7983)) _bstr_t Style::GetName ( );
__declspec(implementation_key(7984)) _bstr_t Style::GetNameLocal ( );
__declspec(implementation_key(7985)) _bstr_t Style::GetNumberFormat ( );
__declspec(implementation_key(7986)) void Style::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(7987)) _bstr_t Style::GetNumberFormatLocal ( );
__declspec(implementation_key(7988)) void Style::PutNumberFormatLocal ( _bstr_t _arg1 );
__declspec(implementation_key(7989)) enum XlOrientation Style::GetOrientation ( );
__declspec(implementation_key(7990)) void Style::PutOrientation ( enum XlOrientation _arg1 );
__declspec(implementation_key(7991)) VARIANT_BOOL Style::GetShrinkToFit ( );
__declspec(implementation_key(7992)) void Style::PutShrinkToFit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7993)) _bstr_t Style::GetValue ( );
__declspec(implementation_key(7994)) enum XlVAlign Style::GetVerticalAlignment ( );
__declspec(implementation_key(7995)) void Style::PutVerticalAlignment ( enum XlVAlign _arg1 );
__declspec(implementation_key(7996)) VARIANT_BOOL Style::GetWrapText ( );
__declspec(implementation_key(7997)) void Style::PutWrapText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7998)) _bstr_t Style::Get_Default ( );
__declspec(implementation_key(7999)) long Style::GetReadingOrder ( );
__declspec(implementation_key(8000)) void Style::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(8001)) _ApplicationPtr Styles::GetApplication ( );
__declspec(implementation_key(8002)) enum XlCreator Styles::GetCreator ( );
__declspec(implementation_key(8003)) IDispatchPtr Styles::GetParent ( );
__declspec(implementation_key(8004)) StylePtr Styles::Add ( _bstr_t Name, const _variant_t & BasedOn );
__declspec(implementation_key(8005)) long Styles::GetCount ( );
__declspec(implementation_key(8006)) StylePtr Styles::GetItem ( const _variant_t & Index );
__declspec(implementation_key(8007)) _variant_t Styles::Merge ( const _variant_t & Workbook );
__declspec(implementation_key(8008)) IUnknownPtr Styles::Get_NewEnum ( );
__declspec(implementation_key(8009)) StylePtr Styles::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(8010)) _ApplicationPtr Borders::GetApplication ( );
__declspec(implementation_key(8011)) enum XlCreator Borders::GetCreator ( );
__declspec(implementation_key(8012)) IDispatchPtr Borders::GetParent ( );
__declspec(implementation_key(8013)) _variant_t Borders::GetColor ( );
__declspec(implementation_key(8014)) void Borders::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(8015)) _variant_t Borders::GetColorIndex ( );
__declspec(implementation_key(8016)) void Borders::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(8017)) long Borders::GetCount ( );
__declspec(implementation_key(8018)) BorderPtr Borders::GetItem ( enum XlBordersIndex Index );
__declspec(implementation_key(8019)) _variant_t Borders::GetLineStyle ( );
__declspec(implementation_key(8020)) void Borders::PutLineStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(8021)) IUnknownPtr Borders::Get_NewEnum ( );
__declspec(implementation_key(8022)) _variant_t Borders::GetValue ( );
__declspec(implementation_key(8023)) void Borders::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(8024)) _variant_t Borders::GetWeight ( );
__declspec(implementation_key(8025)) void Borders::PutWeight ( const _variant_t & _arg1 );
__declspec(implementation_key(8026)) BorderPtr Borders::Get_Default ( enum XlBordersIndex Index );
__declspec(implementation_key(8027)) _ApplicationPtr AddIn::GetApplication ( );
__declspec(implementation_key(8028)) enum XlCreator AddIn::GetCreator ( );
__declspec(implementation_key(8029)) IDispatchPtr AddIn::GetParent ( );
__declspec(implementation_key(8030)) _bstr_t AddIn::GetAuthor ( );
__declspec(implementation_key(8031)) _bstr_t AddIn::GetComments ( );
__declspec(implementation_key(8032)) _bstr_t AddIn::GetFullName ( );
__declspec(implementation_key(8033)) VARIANT_BOOL AddIn::GetInstalled ( );
__declspec(implementation_key(8034)) void AddIn::PutInstalled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8035)) _bstr_t AddIn::GetKeywords ( );
__declspec(implementation_key(8036)) _bstr_t AddIn::GetName ( );
__declspec(implementation_key(8037)) _bstr_t AddIn::GetPath ( );
__declspec(implementation_key(8038)) _bstr_t AddIn::GetSubject ( );
__declspec(implementation_key(8039)) _bstr_t AddIn::GetTitle ( );
__declspec(implementation_key(8040)) _bstr_t AddIn::GetprogID ( );
__declspec(implementation_key(8041)) _bstr_t AddIn::GetCLSID ( );
__declspec(implementation_key(8042)) _ApplicationPtr AddIns::GetApplication ( );
__declspec(implementation_key(8043)) enum XlCreator AddIns::GetCreator ( );
__declspec(implementation_key(8044)) IDispatchPtr AddIns::GetParent ( );
__declspec(implementation_key(8045)) AddInPtr AddIns::Add ( _bstr_t Filename, const _variant_t & JOECopyFile );
__declspec(implementation_key(8046)) long AddIns::GetCount ( );
__declspec(implementation_key(8047)) AddInPtr AddIns::GetItem ( const _variant_t & Index );
__declspec(implementation_key(8048)) IUnknownPtr AddIns::Get_NewEnum ( );
__declspec(implementation_key(8049)) AddInPtr AddIns::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(8050)) _ApplicationPtr Toolbar::GetApplication ( );
__declspec(implementation_key(8051)) enum XlCreator Toolbar::GetCreator ( );
__declspec(implementation_key(8052)) IDispatchPtr Toolbar::GetParent ( );
__declspec(implementation_key(8053)) VARIANT_BOOL Toolbar::GetBuiltIn ( );
__declspec(implementation_key(8054)) HRESULT Toolbar::Delete ( );
__declspec(implementation_key(8055)) long Toolbar::GetHeight ( );
__declspec(implementation_key(8056)) void Toolbar::PutHeight ( long _arg1 );
__declspec(implementation_key(8057)) long Toolbar::GetLeft ( );
__declspec(implementation_key(8058)) void Toolbar::PutLeft ( long _arg1 );
__declspec(implementation_key(8059)) _bstr_t Toolbar::GetName ( );
__declspec(implementation_key(8060)) long Toolbar::GetPosition ( );
__declspec(implementation_key(8061)) void Toolbar::PutPosition ( long _arg1 );
__declspec(implementation_key(8062)) enum XlToolbarProtection Toolbar::GetProtection ( );
__declspec(implementation_key(8063)) void Toolbar::PutProtection ( enum XlToolbarProtection _arg1 );
__declspec(implementation_key(8064)) HRESULT Toolbar::Reset ( );
__declspec(implementation_key(8065)) ToolbarButtonsPtr Toolbar::GetToolbarButtons ( );
__declspec(implementation_key(8066)) long Toolbar::GetTop ( );
__declspec(implementation_key(8067)) void Toolbar::PutTop ( long _arg1 );
__declspec(implementation_key(8068)) VARIANT_BOOL Toolbar::GetVisible ( );
__declspec(implementation_key(8069)) void Toolbar::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8070)) long Toolbar::GetWidth ( );
__declspec(implementation_key(8071)) void Toolbar::PutWidth ( long _arg1 );
__declspec(implementation_key(8072)) _ApplicationPtr Toolbars::GetApplication ( );
__declspec(implementation_key(8073)) enum XlCreator Toolbars::GetCreator ( );
__declspec(implementation_key(8074)) IDispatchPtr Toolbars::GetParent ( );
__declspec(implementation_key(8075)) ToolbarPtr Toolbars::Add ( const _variant_t & Name );
__declspec(implementation_key(8076)) long Toolbars::GetCount ( );
__declspec(implementation_key(8077)) ToolbarPtr Toolbars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(8078)) ToolbarPtr Toolbars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(8079)) IUnknownPtr Toolbars::Get_NewEnum ( );
__declspec(implementation_key(8080)) _ApplicationPtr ToolbarButton::GetApplication ( );
__declspec(implementation_key(8081)) enum XlCreator ToolbarButton::GetCreator ( );
__declspec(implementation_key(8082)) IDispatchPtr ToolbarButton::GetParent ( );
__declspec(implementation_key(8083)) VARIANT_BOOL ToolbarButton::GetBuiltIn ( );
__declspec(implementation_key(8084)) VARIANT_BOOL ToolbarButton::GetBuiltInFace ( );
__declspec(implementation_key(8085)) void ToolbarButton::PutBuiltInFace ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8086)) HRESULT ToolbarButton::Copy ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(8087)) HRESULT ToolbarButton::CopyFace ( );
__declspec(implementation_key(8088)) HRESULT ToolbarButton::Delete ( );
__declspec(implementation_key(8089)) HRESULT ToolbarButton::Edit ( );
__declspec(implementation_key(8090)) VARIANT_BOOL ToolbarButton::GetEnabled ( );
__declspec(implementation_key(8091)) void ToolbarButton::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8092)) long ToolbarButton::GetHelpContextID ( );
__declspec(implementation_key(8093)) void ToolbarButton::PutHelpContextID ( long _arg1 );
__declspec(implementation_key(8094)) _bstr_t ToolbarButton::GetHelpFile ( );
__declspec(implementation_key(8095)) void ToolbarButton::PutHelpFile ( _bstr_t _arg1 );
__declspec(implementation_key(8096)) long ToolbarButton::GetID ( );
__declspec(implementation_key(8097)) VARIANT_BOOL ToolbarButton::GetIsGap ( );
__declspec(implementation_key(8098)) HRESULT ToolbarButton::Move ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(8099)) _bstr_t ToolbarButton::GetName ( );
__declspec(implementation_key(8100)) void ToolbarButton::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(8101)) _bstr_t ToolbarButton::GetOnAction ( );
__declspec(implementation_key(8102)) void ToolbarButton::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(8103)) HRESULT ToolbarButton::PasteFace ( );
__declspec(implementation_key(8104)) VARIANT_BOOL ToolbarButton::GetPushed ( );
__declspec(implementation_key(8105)) void ToolbarButton::PutPushed ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8106)) HRESULT ToolbarButton::Reset ( );
__declspec(implementation_key(8107)) _bstr_t ToolbarButton::GetStatusBar ( );
__declspec(implementation_key(8108)) void ToolbarButton::PutStatusBar ( _bstr_t _arg1 );
__declspec(implementation_key(8109)) long ToolbarButton::GetWidth ( );
__declspec(implementation_key(8110)) void ToolbarButton::PutWidth ( long _arg1 );
__declspec(implementation_key(8111)) _ApplicationPtr ToolbarButtons::GetApplication ( );
__declspec(implementation_key(8112)) enum XlCreator ToolbarButtons::GetCreator ( );
__declspec(implementation_key(8113)) IDispatchPtr ToolbarButtons::GetParent ( );
__declspec(implementation_key(8114)) ToolbarButtonPtr ToolbarButtons::Add ( const _variant_t & Button, const _variant_t & Before, const _variant_t & OnAction, const _variant_t & Pushed, const _variant_t & Enabled, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(8115)) long ToolbarButtons::GetCount ( );
__declspec(implementation_key(8116)) ToolbarButtonPtr ToolbarButtons::GetItem ( long Index );
__declspec(implementation_key(8117)) IUnknownPtr ToolbarButtons::Get_NewEnum ( );
__declspec(implementation_key(8118)) ToolbarButtonPtr ToolbarButtons::Get_Default ( long Index );
__declspec(implementation_key(8119)) _ApplicationPtr Areas::GetApplication ( );
__declspec(implementation_key(8120)) enum XlCreator Areas::GetCreator ( );
__declspec(implementation_key(8121)) IDispatchPtr Areas::GetParent ( );
__declspec(implementation_key(8122)) long Areas::GetCount ( );
__declspec(implementation_key(8123)) RangePtr Areas::GetItem ( long Index );
__declspec(implementation_key(8124)) IUnknownPtr Areas::Get_NewEnum ( );
__declspec(implementation_key(8125)) RangePtr Areas::Get_Default ( long Index );
__declspec(implementation_key(8126)) HRESULT WorkbookEvents::Open ( );
__declspec(implementation_key(8127)) HRESULT WorkbookEvents::Activate ( );
__declspec(implementation_key(8128)) HRESULT WorkbookEvents::Deactivate ( );
__declspec(implementation_key(8129)) HRESULT WorkbookEvents::BeforeClose ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(8130)) HRESULT WorkbookEvents::BeforeSave ( VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(8131)) HRESULT WorkbookEvents::BeforePrint ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(8132)) HRESULT WorkbookEvents::NewSheet ( IDispatch * Sh );
__declspec(implementation_key(8133)) HRESULT WorkbookEvents::AddinInstall ( );
__declspec(implementation_key(8134)) HRESULT WorkbookEvents::AddinUninstall ( );
__declspec(implementation_key(8135)) HRESULT WorkbookEvents::WindowResize ( struct Window * Wn );
__declspec(implementation_key(8136)) HRESULT WorkbookEvents::WindowActivate ( struct Window * Wn );
__declspec(implementation_key(8137)) HRESULT WorkbookEvents::WindowDeactivate ( struct Window * Wn );
__declspec(implementation_key(8138)) HRESULT WorkbookEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(8139)) HRESULT WorkbookEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(8140)) HRESULT WorkbookEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(8141)) HRESULT WorkbookEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(8142)) HRESULT WorkbookEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(8143)) HRESULT WorkbookEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(8144)) HRESULT WorkbookEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(8145)) HRESULT WorkbookEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(8146)) HRESULT WorkbookEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target );
__declspec(implementation_key(8147)) HRESULT WorkbookEvents::PivotTableCloseConnection ( struct PivotTable * Target );
__declspec(implementation_key(8148)) HRESULT WorkbookEvents::PivotTableOpenConnection ( struct PivotTable * Target );
__declspec(implementation_key(8149)) _ApplicationPtr MenuBars::GetApplication ( );
__declspec(implementation_key(8150)) enum XlCreator MenuBars::GetCreator ( );
__declspec(implementation_key(8151)) IDispatchPtr MenuBars::GetParent ( );
__declspec(implementation_key(8152)) MenuBarPtr MenuBars::Add ( const _variant_t & Name );
__declspec(implementation_key(8153)) long MenuBars::GetCount ( );
__declspec(implementation_key(8154)) MenuBarPtr MenuBars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(8155)) MenuBarPtr MenuBars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(8156)) IUnknownPtr MenuBars::Get_NewEnum ( );
__declspec(implementation_key(8157)) _ApplicationPtr MenuBar::GetApplication ( );
__declspec(implementation_key(8158)) enum XlCreator MenuBar::GetCreator ( );
__declspec(implementation_key(8159)) IDispatchPtr MenuBar::GetParent ( );
__declspec(implementation_key(8160)) HRESULT MenuBar::Activate ( );
__declspec(implementation_key(8161)) VARIANT_BOOL MenuBar::GetBuiltIn ( );
__declspec(implementation_key(8162)) _bstr_t MenuBar::GetCaption ( );
__declspec(implementation_key(8163)) void MenuBar::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(8164)) HRESULT MenuBar::Delete ( );
__declspec(implementation_key(8165)) long MenuBar::GetIndex ( );
__declspec(implementation_key(8166)) MenusPtr MenuBar::GetMenus ( );
__declspec(implementation_key(8167)) HRESULT MenuBar::Reset ( );
__declspec(implementation_key(8168)) _ApplicationPtr Menus::GetApplication ( );
__declspec(implementation_key(8169)) enum XlCreator Menus::GetCreator ( );
__declspec(implementation_key(8170)) IDispatchPtr Menus::GetParent ( );
__declspec(implementation_key(8171)) MenuPtr Menus::Add ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(8172)) long Menus::GetCount ( );
__declspec(implementation_key(8173)) MenuPtr Menus::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(8174)) MenuPtr Menus::GetItem ( const _variant_t & Index );
__declspec(implementation_key(8175)) IUnknownPtr Menus::Get_NewEnum ( );
__declspec(implementation_key(8176)) _ApplicationPtr Menu::GetApplication ( );
__declspec(implementation_key(8177)) enum XlCreator Menu::GetCreator ( );
__declspec(implementation_key(8178)) IDispatchPtr Menu::GetParent ( );
__declspec(implementation_key(8179)) _bstr_t Menu::GetCaption ( );
__declspec(implementation_key(8180)) void Menu::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(8181)) HRESULT Menu::Delete ( );
__declspec(implementation_key(8182)) VARIANT_BOOL Menu::GetEnabled ( );
__declspec(implementation_key(8183)) void Menu::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8184)) long Menu::GetIndex ( );
__declspec(implementation_key(8185)) MenuItemsPtr Menu::GetMenuItems ( );
__declspec(implementation_key(8186)) _ApplicationPtr MenuItems::GetApplication ( );
__declspec(implementation_key(8187)) enum XlCreator MenuItems::GetCreator ( );
__declspec(implementation_key(8188)) IDispatchPtr MenuItems::GetParent ( );
__declspec(implementation_key(8189)) MenuItemPtr MenuItems::Add ( _bstr_t Caption, const _variant_t & OnAction, const _variant_t & ShortcutKey, const _variant_t & Before, const _variant_t & Restore, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(8190)) MenuPtr MenuItems::AddMenu ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(8191)) long MenuItems::GetCount ( );
__declspec(implementation_key(8192)) IDispatchPtr MenuItems::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(8193)) IDispatchPtr MenuItems::GetItem ( const _variant_t & Index );
__declspec(implementation_key(8194)) IUnknownPtr MenuItems::Get_NewEnum ( );
__declspec(implementation_key(8195)) _ApplicationPtr MenuItem::GetApplication ( );
__declspec(implementation_key(8196)) enum XlCreator MenuItem::GetCreator ( );
__declspec(implementation_key(8197)) IDispatchPtr MenuItem::GetParent ( );
__declspec(implementation_key(8198)) _bstr_t MenuItem::GetCaption ( );
__declspec(implementation_key(8199)) void MenuItem::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(8200)) VARIANT_BOOL MenuItem::GetChecked ( );
__declspec(implementation_key(8201)) void MenuItem::PutChecked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8202)) HRESULT MenuItem::Delete ( );
__declspec(implementation_key(8203)) VARIANT_BOOL MenuItem::GetEnabled ( );
__declspec(implementation_key(8204)) void MenuItem::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8205)) long MenuItem::GetHelpContextID ( );
__declspec(implementation_key(8206)) void MenuItem::PutHelpContextID ( long _arg1 );
__declspec(implementation_key(8207)) _bstr_t MenuItem::GetHelpFile ( );
__declspec(implementation_key(8208)) void MenuItem::PutHelpFile ( _bstr_t _arg1 );
__declspec(implementation_key(8209)) long MenuItem::GetIndex ( );
__declspec(implementation_key(8210)) _bstr_t MenuItem::GetOnAction ( );
__declspec(implementation_key(8211)) void MenuItem::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(8212)) _bstr_t MenuItem::GetStatusBar ( );
__declspec(implementation_key(8213)) void MenuItem::PutStatusBar ( _bstr_t _arg1 );
__declspec(implementation_key(8214)) _ApplicationPtr Charts::GetApplication ( );
__declspec(implementation_key(8215)) enum XlCreator Charts::GetCreator ( );
__declspec(implementation_key(8216)) IDispatchPtr Charts::GetParent ( );
__declspec(implementation_key(8217)) _ChartPtr Charts::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(8218)) HRESULT Charts::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(8219)) long Charts::GetCount ( );
__declspec(implementation_key(8220)) HRESULT Charts::Delete ( );
__declspec(implementation_key(8221)) IDispatchPtr Charts::GetItem ( const _variant_t & Index );
__declspec(implementation_key(8222)) HRESULT Charts::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(8223)) IUnknownPtr Charts::Get_NewEnum ( );
__declspec(implementation_key(8224)) HRESULT Charts::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(8225)) HRESULT Charts::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(8226)) HRESULT Charts::Select ( const _variant_t & Replace );
__declspec(implementation_key(8227)) HPageBreaksPtr Charts::GetHPageBreaks ( );
__declspec(implementation_key(8228)) VPageBreaksPtr Charts::GetVPageBreaks ( );
__declspec(implementation_key(8229)) _variant_t Charts::GetVisible ( );
__declspec(implementation_key(8230)) void Charts::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(8231)) IDispatchPtr Charts::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(8232)) HRESULT Charts::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(8233)) _ApplicationPtr DrawingObjects::GetApplication ( );
__declspec(implementation_key(8234)) enum XlCreator DrawingObjects::GetCreator ( );
__declspec(implementation_key(8235)) IDispatchPtr DrawingObjects::GetParent ( );
__declspec(implementation_key(8236)) _variant_t DrawingObjects::BringToFront ( );
__declspec(implementation_key(8237)) _variant_t DrawingObjects::Copy ( );
__declspec(implementation_key(8238)) _variant_t DrawingObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8239)) _variant_t DrawingObjects::Cut ( );
__declspec(implementation_key(8240)) _variant_t DrawingObjects::Delete ( );
__declspec(implementation_key(8241)) IDispatchPtr DrawingObjects::Duplicate ( );
__declspec(implementation_key(8242)) VARIANT_BOOL DrawingObjects::GetEnabled ( );
__declspec(implementation_key(8243)) void DrawingObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8244)) double DrawingObjects::GetHeight ( );
__declspec(implementation_key(8245)) void DrawingObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(8246)) double DrawingObjects::GetLeft ( );
__declspec(implementation_key(8247)) void DrawingObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(8248)) VARIANT_BOOL DrawingObjects::GetLocked ( );
__declspec(implementation_key(8249)) void DrawingObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8250)) _bstr_t DrawingObjects::GetOnAction ( );
__declspec(implementation_key(8251)) void DrawingObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(8252)) _variant_t DrawingObjects::GetPlacement ( );
__declspec(implementation_key(8253)) void DrawingObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(8254)) VARIANT_BOOL DrawingObjects::GetPrintObject ( );
__declspec(implementation_key(8255)) void DrawingObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8256)) _variant_t DrawingObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(8257)) _variant_t DrawingObjects::SendToBack ( );
__declspec(implementation_key(8258)) double DrawingObjects::GetTop ( );
__declspec(implementation_key(8259)) void DrawingObjects::PutTop ( double _arg1 );
__declspec(implementation_key(8260)) VARIANT_BOOL DrawingObjects::GetVisible ( );
__declspec(implementation_key(8261)) void DrawingObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8262)) double DrawingObjects::GetWidth ( );
__declspec(implementation_key(8263)) void DrawingObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(8264)) long DrawingObjects::GetZOrder ( );
__declspec(implementation_key(8265)) ShapeRangePtr DrawingObjects::GetShapeRange ( );
__declspec(implementation_key(8266)) _variant_t DrawingObjects::GetAccelerator ( );
__declspec(implementation_key(8267)) void DrawingObjects::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(8268)) VARIANT_BOOL DrawingObjects::GetAddIndent ( );
__declspec(implementation_key(8269)) void DrawingObjects::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8270)) _variant_t DrawingObjects::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(8271)) _variant_t DrawingObjects::GetArrowHeadLength ( );
__declspec(implementation_key(8272)) void DrawingObjects::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(8273)) _variant_t DrawingObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(8274)) void DrawingObjects::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(8275)) _variant_t DrawingObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(8276)) void DrawingObjects::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(8277)) VARIANT_BOOL DrawingObjects::GetAutoSize ( );
__declspec(implementation_key(8278)) void DrawingObjects::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8279)) BorderPtr DrawingObjects::GetBorder ( );
__declspec(implementation_key(8280)) VARIANT_BOOL DrawingObjects::GetCancelButton ( );
__declspec(implementation_key(8281)) void DrawingObjects::PutCancelButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8282)) _bstr_t DrawingObjects::GetCaption ( );
__declspec(implementation_key(8283)) void DrawingObjects::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(8284)) CharactersPtr DrawingObjects::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8285)) _variant_t DrawingObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8286)) long DrawingObjects::Get_Default ( );
__declspec(implementation_key(8287)) void DrawingObjects::Put_Default ( long _arg1 );
__declspec(implementation_key(8288)) VARIANT_BOOL DrawingObjects::GetDefaultButton ( );
__declspec(implementation_key(8289)) void DrawingObjects::PutDefaultButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8290)) VARIANT_BOOL DrawingObjects::GetDismissButton ( );
__declspec(implementation_key(8291)) void DrawingObjects::PutDismissButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8292)) VARIANT_BOOL DrawingObjects::GetDisplay3DShading ( );
__declspec(implementation_key(8293)) void DrawingObjects::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8294)) VARIANT_BOOL DrawingObjects::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(8295)) void DrawingObjects::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8296)) long DrawingObjects::GetDropDownLines ( );
__declspec(implementation_key(8297)) void DrawingObjects::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(8298)) FontPtr DrawingObjects::GetFont ( );
__declspec(implementation_key(8299)) VARIANT_BOOL DrawingObjects::GetHelpButton ( );
__declspec(implementation_key(8300)) void DrawingObjects::PutHelpButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8301)) _variant_t DrawingObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(8302)) void DrawingObjects::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(8303)) long DrawingObjects::GetInputType ( );
__declspec(implementation_key(8304)) void DrawingObjects::PutInputType ( long _arg1 );
__declspec(implementation_key(8305)) InteriorPtr DrawingObjects::GetInterior ( );
__declspec(implementation_key(8306)) long DrawingObjects::GetLargeChange ( );
__declspec(implementation_key(8307)) void DrawingObjects::PutLargeChange ( long _arg1 );
__declspec(implementation_key(8308)) _bstr_t DrawingObjects::GetLinkedCell ( );
__declspec(implementation_key(8309)) void DrawingObjects::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(8310)) _variant_t DrawingObjects::List ( const _variant_t & Index );
__declspec(implementation_key(8311)) _bstr_t DrawingObjects::GetListFillRange ( );
__declspec(implementation_key(8312)) void DrawingObjects::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(8313)) long DrawingObjects::GetListIndex ( );
__declspec(implementation_key(8314)) void DrawingObjects::PutListIndex ( long _arg1 );
__declspec(implementation_key(8315)) VARIANT_BOOL DrawingObjects::GetLockedText ( );
__declspec(implementation_key(8316)) void DrawingObjects::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8317)) long DrawingObjects::GetMax ( );
__declspec(implementation_key(8318)) void DrawingObjects::PutMax ( long _arg1 );
__declspec(implementation_key(8319)) long DrawingObjects::GetMin ( );
__declspec(implementation_key(8320)) void DrawingObjects::PutMin ( long _arg1 );
__declspec(implementation_key(8321)) VARIANT_BOOL DrawingObjects::GetMultiLine ( );
__declspec(implementation_key(8322)) void DrawingObjects::PutMultiLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8323)) VARIANT_BOOL DrawingObjects::GetMultiSelect ( );
__declspec(implementation_key(8324)) void DrawingObjects::PutMultiSelect ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8325)) _variant_t DrawingObjects::GetOrientation ( );
__declspec(implementation_key(8326)) void DrawingObjects::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(8327)) _variant_t DrawingObjects::GetPhoneticAccelerator ( );
__declspec(implementation_key(8328)) void DrawingObjects::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(8329)) _variant_t DrawingObjects::RemoveAllItems ( );
__declspec(implementation_key(8330)) _variant_t DrawingObjects::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(8331)) _variant_t DrawingObjects::Reshape ( long Vertex, const _variant_t & Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(8332)) VARIANT_BOOL DrawingObjects::GetRoundedCorners ( );
__declspec(implementation_key(8333)) void DrawingObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8334)) _variant_t DrawingObjects::Selected ( const _variant_t & Index );
__declspec(implementation_key(8335)) VARIANT_BOOL DrawingObjects::GetShadow ( );
__declspec(implementation_key(8336)) void DrawingObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8337)) long DrawingObjects::GetSmallChange ( );
__declspec(implementation_key(8338)) void DrawingObjects::PutSmallChange ( long _arg1 );
__declspec(implementation_key(8339)) _bstr_t DrawingObjects::GetText ( );
__declspec(implementation_key(8340)) void DrawingObjects::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(8341)) IDispatchPtr DrawingObjects::Ungroup ( );
__declspec(implementation_key(8342)) long DrawingObjects::GetValue ( );
__declspec(implementation_key(8343)) void DrawingObjects::PutValue ( long _arg1 );
__declspec(implementation_key(8344)) _variant_t DrawingObjects::GetVerticalAlignment ( );
__declspec(implementation_key(8345)) void DrawingObjects::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(8346)) _variant_t DrawingObjects::Vertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(8347)) long DrawingObjects::GetReadingOrder ( );
__declspec(implementation_key(8348)) void DrawingObjects::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(8349)) long DrawingObjects::GetCount ( );
__declspec(implementation_key(8350)) IDispatchPtr DrawingObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(8351)) GroupObjectPtr DrawingObjects::Group ( );
__declspec(implementation_key(8352)) _variant_t DrawingObjects::LinkCombo ( const _variant_t & Link );
__declspec(implementation_key(8353)) IUnknownPtr DrawingObjects::_NewEnum ( );
__declspec(implementation_key(8354)) _ApplicationPtr PivotCache::GetApplication ( );
__declspec(implementation_key(8355)) enum XlCreator PivotCache::GetCreator ( );
__declspec(implementation_key(8356)) IDispatchPtr PivotCache::GetParent ( );
__declspec(implementation_key(8357)) VARIANT_BOOL PivotCache::GetBackgroundQuery ( );
__declspec(implementation_key(8358)) void PivotCache::PutBackgroundQuery ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8359)) _variant_t PivotCache::GetConnection ( );
__declspec(implementation_key(8360)) void PivotCache::PutConnection ( const _variant_t & _arg1 );
__declspec(implementation_key(8361)) VARIANT_BOOL PivotCache::GetEnableRefresh ( );
__declspec(implementation_key(8362)) void PivotCache::PutEnableRefresh ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8363)) long PivotCache::GetIndex ( );
__declspec(implementation_key(8364)) long PivotCache::GetMemoryUsed ( );
__declspec(implementation_key(8365)) VARIANT_BOOL PivotCache::GetOptimizeCache ( );
__declspec(implementation_key(8366)) void PivotCache::PutOptimizeCache ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8367)) long PivotCache::GetRecordCount ( );
__declspec(implementation_key(8368)) HRESULT PivotCache::Refresh ( );
__declspec(implementation_key(8369)) DATE PivotCache::GetRefreshDate ( );
__declspec(implementation_key(8370)) _bstr_t PivotCache::GetRefreshName ( );
__declspec(implementation_key(8371)) VARIANT_BOOL PivotCache::GetRefreshOnFileOpen ( );
__declspec(implementation_key(8372)) void PivotCache::PutRefreshOnFileOpen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8373)) _variant_t PivotCache::GetSql ( );
__declspec(implementation_key(8374)) void PivotCache::PutSql ( const _variant_t & _arg1 );
__declspec(implementation_key(8375)) VARIANT_BOOL PivotCache::GetSavePassword ( );
__declspec(implementation_key(8376)) void PivotCache::PutSavePassword ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8377)) _variant_t PivotCache::GetSourceData ( );
__declspec(implementation_key(8378)) void PivotCache::PutSourceData ( const _variant_t & _arg1 );
__declspec(implementation_key(8379)) _variant_t PivotCache::GetCommandText ( );
__declspec(implementation_key(8380)) void PivotCache::PutCommandText ( const _variant_t & _arg1 );
__declspec(implementation_key(8381)) enum XlCmdType PivotCache::GetCommandType ( );
__declspec(implementation_key(8382)) void PivotCache::PutCommandType ( enum XlCmdType _arg1 );
__declspec(implementation_key(8383)) enum XlQueryType PivotCache::GetQueryType ( );
__declspec(implementation_key(8384)) VARIANT_BOOL PivotCache::GetMaintainConnection ( );
__declspec(implementation_key(8385)) void PivotCache::PutMaintainConnection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8386)) long PivotCache::GetRefreshPeriod ( );
__declspec(implementation_key(8387)) void PivotCache::PutRefreshPeriod ( long _arg1 );
__declspec(implementation_key(8388)) IDispatchPtr PivotCache::GetRecordset ( );
__declspec(implementation_key(8389)) void PivotCache::PutRefRecordset ( IDispatch * _arg1 );
__declspec(implementation_key(8390)) HRESULT PivotCache::ResetTimer ( );
__declspec(implementation_key(8391)) _variant_t PivotCache::GetLocalConnection ( );
__declspec(implementation_key(8392)) void PivotCache::PutLocalConnection ( const _variant_t & _arg1 );
__declspec(implementation_key(8393)) PivotTablePtr PivotCache::CreatePivotTable ( const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion );
__declspec(implementation_key(8394)) VARIANT_BOOL PivotCache::GetUseLocalConnection ( );
__declspec(implementation_key(8395)) void PivotCache::PutUseLocalConnection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8396)) IDispatchPtr PivotCache::GetADOConnection ( );
__declspec(implementation_key(8397)) VARIANT_BOOL PivotCache::GetIsConnected ( );
__declspec(implementation_key(8398)) HRESULT PivotCache::MakeConnection ( );
__declspec(implementation_key(8399)) VARIANT_BOOL PivotCache::GetOLAP ( );
__declspec(implementation_key(8400)) enum XlPivotTableSourceType PivotCache::GetSourceType ( );
__declspec(implementation_key(8401)) enum XlPivotTableMissingItems PivotCache::GetMissingItemsLimit ( );
__declspec(implementation_key(8402)) void PivotCache::PutMissingItemsLimit ( enum XlPivotTableMissingItems _arg1 );
__declspec(implementation_key(8403)) _bstr_t PivotCache::GetSourceConnectionFile ( );
__declspec(implementation_key(8404)) void PivotCache::PutSourceConnectionFile ( _bstr_t _arg1 );
__declspec(implementation_key(8405)) _bstr_t PivotCache::GetSourceDataFile ( );
__declspec(implementation_key(8406)) enum XlRobustConnect PivotCache::GetRobustConnect ( );
__declspec(implementation_key(8407)) void PivotCache::PutRobustConnect ( enum XlRobustConnect _arg1 );
__declspec(implementation_key(8408)) HRESULT PivotCache::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords );
__declspec(implementation_key(8409)) _ApplicationPtr PivotCaches::GetApplication ( );
__declspec(implementation_key(8410)) enum XlCreator PivotCaches::GetCreator ( );
__declspec(implementation_key(8411)) IDispatchPtr PivotCaches::GetParent ( );
__declspec(implementation_key(8412)) long PivotCaches::GetCount ( );
__declspec(implementation_key(8413)) PivotCachePtr PivotCaches::Item ( const _variant_t & Index );
__declspec(implementation_key(8414)) PivotCachePtr PivotCaches::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(8415)) IUnknownPtr PivotCaches::_NewEnum ( );
__declspec(implementation_key(8416)) PivotCachePtr PivotCaches::Add ( enum XlPivotTableSourceType SourceType, const _variant_t & SourceData );
__declspec(implementation_key(8417)) _ApplicationPtr PivotFormula::GetApplication ( );
__declspec(implementation_key(8418)) enum XlCreator PivotFormula::GetCreator ( );
__declspec(implementation_key(8419)) IDispatchPtr PivotFormula::GetParent ( );
__declspec(implementation_key(8420)) HRESULT PivotFormula::Delete ( );
__declspec(implementation_key(8421)) _bstr_t PivotFormula::Get_Default ( );
__declspec(implementation_key(8422)) void PivotFormula::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(8423)) _bstr_t PivotFormula::GetFormula ( );
__declspec(implementation_key(8424)) void PivotFormula::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(8425)) _bstr_t PivotFormula::GetValue ( );
__declspec(implementation_key(8426)) void PivotFormula::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(8427)) long PivotFormula::GetIndex ( );
__declspec(implementation_key(8428)) void PivotFormula::PutIndex ( long _arg1 );
__declspec(implementation_key(8429)) _bstr_t PivotFormula::GetStandardFormula ( );
__declspec(implementation_key(8430)) void PivotFormula::PutStandardFormula ( _bstr_t _arg1 );
__declspec(implementation_key(8431)) _ApplicationPtr PivotFormulas::GetApplication ( );
__declspec(implementation_key(8432)) enum XlCreator PivotFormulas::GetCreator ( );
__declspec(implementation_key(8433)) IDispatchPtr PivotFormulas::GetParent ( );
__declspec(implementation_key(8434)) long PivotFormulas::GetCount ( );
__declspec(implementation_key(8435)) PivotFormulaPtr PivotFormulas::_Add ( _bstr_t Formula );
__declspec(implementation_key(8436)) PivotFormulaPtr PivotFormulas::Item ( const _variant_t & Index );
__declspec(implementation_key(8437)) PivotFormulaPtr PivotFormulas::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(8438)) IUnknownPtr PivotFormulas::_NewEnum ( );
__declspec(implementation_key(8439)) PivotFormulaPtr PivotFormulas::Add ( _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(8440)) _ApplicationPtr PivotTable::GetApplication ( );
__declspec(implementation_key(8441)) enum XlCreator PivotTable::GetCreator ( );
__declspec(implementation_key(8442)) IDispatchPtr PivotTable::GetParent ( );
__declspec(implementation_key(8443)) _variant_t PivotTable::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AddToTable );
__declspec(implementation_key(8444)) IDispatchPtr PivotTable::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(8445)) VARIANT_BOOL PivotTable::GetColumnGrand ( );
__declspec(implementation_key(8446)) void PivotTable::PutColumnGrand ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8447)) RangePtr PivotTable::GetColumnRange ( );
__declspec(implementation_key(8448)) _variant_t PivotTable::ShowPages ( const _variant_t & PageField );
__declspec(implementation_key(8449)) RangePtr PivotTable::GetDataBodyRange ( );
__declspec(implementation_key(8450)) IDispatchPtr PivotTable::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(8451)) RangePtr PivotTable::GetDataLabelRange ( );
__declspec(implementation_key(8452)) _bstr_t PivotTable::Get_Default ( );
__declspec(implementation_key(8453)) void PivotTable::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(8454)) VARIANT_BOOL PivotTable::GetHasAutoFormat ( );
__declspec(implementation_key(8455)) void PivotTable::PutHasAutoFormat ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8456)) IDispatchPtr PivotTable::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(8457)) _bstr_t PivotTable::GetInnerDetail ( );
__declspec(implementation_key(8458)) void PivotTable::PutInnerDetail ( _bstr_t _arg1 );
__declspec(implementation_key(8459)) _bstr_t PivotTable::GetName ( );
__declspec(implementation_key(8460)) void PivotTable::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(8461)) IDispatchPtr PivotTable::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(8462)) RangePtr PivotTable::GetPageRange ( );
__declspec(implementation_key(8463)) RangePtr PivotTable::GetPageRangeCells ( );
__declspec(implementation_key(8464)) IDispatchPtr PivotTable::PivotFields ( const _variant_t & Index );
__declspec(implementation_key(8465)) DATE PivotTable::GetRefreshDate ( );
__declspec(implementation_key(8466)) _bstr_t PivotTable::GetRefreshName ( );
__declspec(implementation_key(8467)) VARIANT_BOOL PivotTable::RefreshTable ( );
__declspec(implementation_key(8468)) IDispatchPtr PivotTable::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(8469)) VARIANT_BOOL PivotTable::GetRowGrand ( );
__declspec(implementation_key(8470)) void PivotTable::PutRowGrand ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8471)) RangePtr PivotTable::GetRowRange ( );
__declspec(implementation_key(8472)) VARIANT_BOOL PivotTable::GetSaveData ( );
__declspec(implementation_key(8473)) void PivotTable::PutSaveData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8474)) _variant_t PivotTable::GetSourceData ( );
__declspec(implementation_key(8475)) void PivotTable::PutSourceData ( const _variant_t & _arg1 );
__declspec(implementation_key(8476)) RangePtr PivotTable::GetTableRange1 ( );
__declspec(implementation_key(8477)) RangePtr PivotTable::GetTableRange2 ( );
__declspec(implementation_key(8478)) _bstr_t PivotTable::GetValue ( );
__declspec(implementation_key(8479)) void PivotTable::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(8480)) IDispatchPtr PivotTable::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(8481)) long PivotTable::GetCacheIndex ( );
__declspec(implementation_key(8482)) void PivotTable::PutCacheIndex ( long _arg1 );
__declspec(implementation_key(8483)) CalculatedFieldsPtr PivotTable::CalculatedFields ( );
__declspec(implementation_key(8484)) VARIANT_BOOL PivotTable::GetDisplayErrorString ( );
__declspec(implementation_key(8485)) void PivotTable::PutDisplayErrorString ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8486)) VARIANT_BOOL PivotTable::GetDisplayNullString ( );
__declspec(implementation_key(8487)) void PivotTable::PutDisplayNullString ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8488)) VARIANT_BOOL PivotTable::GetEnableDrilldown ( );
__declspec(implementation_key(8489)) void PivotTable::PutEnableDrilldown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8490)) VARIANT_BOOL PivotTable::GetEnableFieldDialog ( );
__declspec(implementation_key(8491)) void PivotTable::PutEnableFieldDialog ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8492)) VARIANT_BOOL PivotTable::GetEnableWizard ( );
__declspec(implementation_key(8493)) void PivotTable::PutEnableWizard ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8494)) _bstr_t PivotTable::GetErrorString ( );
__declspec(implementation_key(8495)) void PivotTable::PutErrorString ( _bstr_t _arg1 );
__declspec(implementation_key(8496)) double PivotTable::GetData ( _bstr_t Name );
__declspec(implementation_key(8497)) HRESULT PivotTable::ListFormulas ( );
__declspec(implementation_key(8498)) VARIANT_BOOL PivotTable::GetManualUpdate ( );
__declspec(implementation_key(8499)) void PivotTable::PutManualUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8500)) VARIANT_BOOL PivotTable::GetMergeLabels ( );
__declspec(implementation_key(8501)) void PivotTable::PutMergeLabels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8502)) _bstr_t PivotTable::GetNullString ( );
__declspec(implementation_key(8503)) void PivotTable::PutNullString ( _bstr_t _arg1 );
__declspec(implementation_key(8504)) PivotCachePtr PivotTable::PivotCache ( );
__declspec(implementation_key(8505)) PivotFormulasPtr PivotTable::GetPivotFormulas ( );
__declspec(implementation_key(8506)) HRESULT PivotTable::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection );
__declspec(implementation_key(8507)) VARIANT_BOOL PivotTable::GetSubtotalHiddenPageItems ( );
__declspec(implementation_key(8508)) void PivotTable::PutSubtotalHiddenPageItems ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8509)) long PivotTable::GetPageFieldOrder ( );
__declspec(implementation_key(8510)) void PivotTable::PutPageFieldOrder ( long _arg1 );
__declspec(implementation_key(8511)) _bstr_t PivotTable::GetPageFieldStyle ( );
__declspec(implementation_key(8512)) void PivotTable::PutPageFieldStyle ( _bstr_t _arg1 );
__declspec(implementation_key(8513)) long PivotTable::GetPageFieldWrapCount ( );
__declspec(implementation_key(8514)) void PivotTable::PutPageFieldWrapCount ( long _arg1 );
__declspec(implementation_key(8515)) VARIANT_BOOL PivotTable::GetPreserveFormatting ( );
__declspec(implementation_key(8516)) void PivotTable::PutPreserveFormatting ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8517)) HRESULT PivotTable::_PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode );
__declspec(implementation_key(8518)) _bstr_t PivotTable::GetPivotSelection ( );
__declspec(implementation_key(8519)) void PivotTable::PutPivotSelection ( _bstr_t _arg1 );
__declspec(implementation_key(8520)) enum XlPTSelectionMode PivotTable::GetSelectionMode ( );
__declspec(implementation_key(8521)) void PivotTable::PutSelectionMode ( enum XlPTSelectionMode _arg1 );
__declspec(implementation_key(8522)) _bstr_t PivotTable::GetTableStyle ( );
__declspec(implementation_key(8523)) void PivotTable::PutTableStyle ( _bstr_t _arg1 );
__declspec(implementation_key(8524)) _bstr_t PivotTable::GetTag ( );
__declspec(implementation_key(8525)) void PivotTable::PutTag ( _bstr_t _arg1 );
__declspec(implementation_key(8526)) HRESULT PivotTable::Update ( );
__declspec(implementation_key(8527)) _bstr_t PivotTable::GetVacatedStyle ( );
__declspec(implementation_key(8528)) void PivotTable::PutVacatedStyle ( _bstr_t _arg1 );
__declspec(implementation_key(8529)) HRESULT PivotTable::Format ( enum XlPivotFormatType Format );
__declspec(implementation_key(8530)) VARIANT_BOOL PivotTable::GetPrintTitles ( );
__declspec(implementation_key(8531)) void PivotTable::PutPrintTitles ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8532)) CubeFieldsPtr PivotTable::GetCubeFields ( );
__declspec(implementation_key(8533)) _bstr_t PivotTable::GetGrandTotalName ( );
__declspec(implementation_key(8534)) void PivotTable::PutGrandTotalName ( _bstr_t _arg1 );
__declspec(implementation_key(8535)) VARIANT_BOOL PivotTable::GetSmallGrid ( );
__declspec(implementation_key(8536)) void PivotTable::PutSmallGrid ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8537)) VARIANT_BOOL PivotTable::GetRepeatItemsOnEachPrintedPage ( );
__declspec(implementation_key(8538)) void PivotTable::PutRepeatItemsOnEachPrintedPage ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8539)) VARIANT_BOOL PivotTable::GetTotalsAnnotation ( );
__declspec(implementation_key(8540)) void PivotTable::PutTotalsAnnotation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8541)) HRESULT PivotTable::PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode, const _variant_t & UseStandardName );
__declspec(implementation_key(8542)) _bstr_t PivotTable::GetPivotSelectionStandard ( );
__declspec(implementation_key(8543)) void PivotTable::PutPivotSelectionStandard ( _bstr_t _arg1 );
__declspec(implementation_key(8544)) RangePtr PivotTable::GetPivotData ( const _variant_t & DataField, const _variant_t & Field1, const _variant_t & Item1, const _variant_t & Field2, const _variant_t & Item2, const _variant_t & Field3, const _variant_t & Item3, const _variant_t & Field4, const _variant_t & Item4, const _variant_t & Field5, const _variant_t & Item5, const _variant_t & Field6, const _variant_t & Item6, const _variant_t & Field7, const _variant_t & Item7, const _variant_t & Field8, const _variant_t & Item8, const _variant_t & Field9, const _variant_t & Item9, const _variant_t & Field10, const _variant_t & Item10, const _variant_t & Field11, const _variant_t & Item11, const _variant_t & Field12, const _variant_t & Item12, const _variant_t & Field13, const _variant_t & Item13, const _variant_t & Field14, const _variant_t & Item14 );
__declspec(implementation_key(8545)) PivotFieldPtr PivotTable::GetDataPivotField ( );
__declspec(implementation_key(8546)) VARIANT_BOOL PivotTable::GetEnableDataValueEditing ( );
__declspec(implementation_key(8547)) void PivotTable::PutEnableDataValueEditing ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8548)) PivotFieldPtr PivotTable::AddDataField ( IDispatch * Field, const _variant_t & Caption, const _variant_t & Function );
__declspec(implementation_key(8549)) _bstr_t PivotTable::GetMDX ( );
__declspec(implementation_key(8550)) VARIANT_BOOL PivotTable::GetViewCalculatedMembers ( );
__declspec(implementation_key(8551)) void PivotTable::PutViewCalculatedMembers ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8552)) CalculatedMembersPtr PivotTable::GetCalculatedMembers ( );
__declspec(implementation_key(8553)) VARIANT_BOOL PivotTable::GetDisplayImmediateItems ( );
__declspec(implementation_key(8554)) void PivotTable::PutDisplayImmediateItems ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8555)) _variant_t PivotTable::Dummy15 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(8556)) VARIANT_BOOL PivotTable::GetEnableFieldList ( );
__declspec(implementation_key(8557)) void PivotTable::PutEnableFieldList ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8558)) VARIANT_BOOL PivotTable::GetVisualTotals ( );
__declspec(implementation_key(8559)) void PivotTable::PutVisualTotals ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8560)) VARIANT_BOOL PivotTable::GetShowPageMultipleItemLabel ( );
__declspec(implementation_key(8561)) void PivotTable::PutShowPageMultipleItemLabel ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8562)) enum XlPivotTableVersionList PivotTable::GetVersion ( );
__declspec(implementation_key(8563)) _bstr_t PivotTable::CreateCubeFile ( _bstr_t File, const _variant_t & Measures, const _variant_t & Levels, const _variant_t & Members, const _variant_t & Properties );
__declspec(implementation_key(8564)) VARIANT_BOOL PivotTable::GetDisplayEmptyRow ( );
__declspec(implementation_key(8565)) void PivotTable::PutDisplayEmptyRow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8566)) VARIANT_BOOL PivotTable::GetDisplayEmptyColumn ( );
__declspec(implementation_key(8567)) void PivotTable::PutDisplayEmptyColumn ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8568)) VARIANT_BOOL PivotTable::GetShowCellBackgroundFromOLAP ( );
__declspec(implementation_key(8569)) void PivotTable::PutShowCellBackgroundFromOLAP ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8570)) _ApplicationPtr PivotTables::GetApplication ( );
__declspec(implementation_key(8571)) enum XlCreator PivotTables::GetCreator ( );
__declspec(implementation_key(8572)) IDispatchPtr PivotTables::GetParent ( );
__declspec(implementation_key(8573)) long PivotTables::GetCount ( );
__declspec(implementation_key(8574)) PivotTablePtr PivotTables::Item ( const _variant_t & Index );
__declspec(implementation_key(8575)) IUnknownPtr PivotTables::_NewEnum ( );
__declspec(implementation_key(8576)) PivotTablePtr PivotTables::Add ( struct PivotCache * PivotCache, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion );
__declspec(implementation_key(8577)) _ApplicationPtr PivotField::GetApplication ( );
__declspec(implementation_key(8578)) enum XlCreator PivotField::GetCreator ( );
__declspec(implementation_key(8579)) IDispatchPtr PivotField::GetParent ( );
__declspec(implementation_key(8580)) enum XlPivotFieldCalculation PivotField::GetCalculation ( );
__declspec(implementation_key(8581)) void PivotField::PutCalculation ( enum XlPivotFieldCalculation _arg1 );
__declspec(implementation_key(8582)) PivotFieldPtr PivotField::GetChildField ( );
__declspec(implementation_key(8583)) _variant_t PivotField::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(8584)) _variant_t PivotField::GetCurrentPage ( );
__declspec(implementation_key(8585)) void PivotField::PutCurrentPage ( const _variant_t & _arg1 );
__declspec(implementation_key(8586)) RangePtr PivotField::GetDataRange ( );
__declspec(implementation_key(8587)) enum XlPivotFieldDataType PivotField::GetDataType ( );
__declspec(implementation_key(8588)) _bstr_t PivotField::Get_Default ( );
__declspec(implementation_key(8589)) void PivotField::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(8590)) enum XlConsolidationFunction PivotField::GetFunction ( );
__declspec(implementation_key(8591)) void PivotField::PutFunction ( enum XlConsolidationFunction _arg1 );
__declspec(implementation_key(8592)) _variant_t PivotField::GetGroupLevel ( );
__declspec(implementation_key(8593)) _variant_t PivotField::GetHiddenItems ( const _variant_t & Index );
__declspec(implementation_key(8594)) RangePtr PivotField::GetLabelRange ( );
__declspec(implementation_key(8595)) _bstr_t PivotField::GetName ( );
__declspec(implementation_key(8596)) void PivotField::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(8597)) _bstr_t PivotField::GetNumberFormat ( );
__declspec(implementation_key(8598)) void PivotField::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(8599)) enum XlPivotFieldOrientation PivotField::GetOrientation ( );
__declspec(implementation_key(8600)) void PivotField::PutOrientation ( enum XlPivotFieldOrientation _arg1 );
__declspec(implementation_key(8601)) VARIANT_BOOL PivotField::GetShowAllItems ( );
__declspec(implementation_key(8602)) void PivotField::PutShowAllItems ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8603)) PivotFieldPtr PivotField::GetParentField ( );
__declspec(implementation_key(8604)) _variant_t PivotField::GetParentItems ( const _variant_t & Index );
__declspec(implementation_key(8605)) _variant_t PivotField::PivotItems ( const _variant_t & Index );
__declspec(implementation_key(8606)) _variant_t PivotField::GetPosition ( );
__declspec(implementation_key(8607)) void PivotField::PutPosition ( const _variant_t & _arg1 );
__declspec(implementation_key(8608)) _bstr_t PivotField::GetSourceName ( );
__declspec(implementation_key(8609)) _variant_t PivotField::GetSubtotals ( const _variant_t & Index );
__declspec(implementation_key(8610)) void PivotField::PutSubtotals ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(8611)) _variant_t PivotField::GetBaseField ( );
__declspec(implementation_key(8612)) void PivotField::PutBaseField ( const _variant_t & _arg1 );
__declspec(implementation_key(8613)) _variant_t PivotField::GetBaseItem ( );
__declspec(implementation_key(8614)) void PivotField::PutBaseItem ( const _variant_t & _arg1 );
__declspec(implementation_key(8615)) _variant_t PivotField::GetTotalLevels ( );
__declspec(implementation_key(8616)) _bstr_t PivotField::GetValue ( );
__declspec(implementation_key(8617)) void PivotField::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(8618)) _variant_t PivotField::GetVisibleItems ( const _variant_t & Index );
__declspec(implementation_key(8619)) CalculatedItemsPtr PivotField::CalculatedItems ( );
__declspec(implementation_key(8620)) HRESULT PivotField::Delete ( );
__declspec(implementation_key(8621)) VARIANT_BOOL PivotField::GetDragToColumn ( );
__declspec(implementation_key(8622)) void PivotField::PutDragToColumn ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8623)) VARIANT_BOOL PivotField::GetDragToHide ( );
__declspec(implementation_key(8624)) void PivotField::PutDragToHide ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8625)) VARIANT_BOOL PivotField::GetDragToPage ( );
__declspec(implementation_key(8626)) void PivotField::PutDragToPage ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8627)) VARIANT_BOOL PivotField::GetDragToRow ( );
__declspec(implementation_key(8628)) void PivotField::PutDragToRow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8629)) VARIANT_BOOL PivotField::GetDragToData ( );
__declspec(implementation_key(8630)) void PivotField::PutDragToData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8631)) _bstr_t PivotField::GetFormula ( );
__declspec(implementation_key(8632)) void PivotField::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(8633)) VARIANT_BOOL PivotField::GetIsCalculated ( );
__declspec(implementation_key(8634)) long PivotField::GetMemoryUsed ( );
__declspec(implementation_key(8635)) VARIANT_BOOL PivotField::GetServerBased ( );
__declspec(implementation_key(8636)) void PivotField::PutServerBased ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8637)) HRESULT PivotField::AutoSort ( long Order, _bstr_t Field );
__declspec(implementation_key(8638)) HRESULT PivotField::AutoShow ( long Type, long Range, long Count, _bstr_t Field );
__declspec(implementation_key(8639)) long PivotField::GetAutoSortOrder ( );
__declspec(implementation_key(8640)) _bstr_t PivotField::GetAutoSortField ( );
__declspec(implementation_key(8641)) long PivotField::GetAutoShowType ( );
__declspec(implementation_key(8642)) long PivotField::GetAutoShowRange ( );
__declspec(implementation_key(8643)) long PivotField::GetAutoShowCount ( );
__declspec(implementation_key(8644)) _bstr_t PivotField::GetAutoShowField ( );
__declspec(implementation_key(8645)) VARIANT_BOOL PivotField::GetLayoutBlankLine ( );
__declspec(implementation_key(8646)) void PivotField::PutLayoutBlankLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8647)) enum XlSubtototalLocationType PivotField::GetLayoutSubtotalLocation ( );
__declspec(implementation_key(8648)) void PivotField::PutLayoutSubtotalLocation ( enum XlSubtototalLocationType _arg1 );
__declspec(implementation_key(8649)) VARIANT_BOOL PivotField::GetLayoutPageBreak ( );
__declspec(implementation_key(8650)) void PivotField::PutLayoutPageBreak ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8651)) enum XlLayoutFormType PivotField::GetLayoutForm ( );
__declspec(implementation_key(8652)) void PivotField::PutLayoutForm ( enum XlLayoutFormType _arg1 );
__declspec(implementation_key(8653)) _bstr_t PivotField::GetSubtotalName ( );
__declspec(implementation_key(8654)) void PivotField::PutSubtotalName ( _bstr_t _arg1 );
__declspec(implementation_key(8655)) _bstr_t PivotField::GetCaption ( );
__declspec(implementation_key(8656)) void PivotField::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(8657)) VARIANT_BOOL PivotField::GetDrilledDown ( );
__declspec(implementation_key(8658)) void PivotField::PutDrilledDown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8659)) CubeFieldPtr PivotField::GetCubeField ( );
__declspec(implementation_key(8660)) _bstr_t PivotField::GetCurrentPageName ( );
__declspec(implementation_key(8661)) void PivotField::PutCurrentPageName ( _bstr_t _arg1 );
__declspec(implementation_key(8662)) _bstr_t PivotField::GetStandardFormula ( );
__declspec(implementation_key(8663)) void PivotField::PutStandardFormula ( _bstr_t _arg1 );
__declspec(implementation_key(8664)) _variant_t PivotField::GetHiddenItemsList ( );
__declspec(implementation_key(8665)) void PivotField::PutHiddenItemsList ( const _variant_t & _arg1 );
__declspec(implementation_key(8666)) VARIANT_BOOL PivotField::GetDatabaseSort ( );
__declspec(implementation_key(8667)) void PivotField::PutDatabaseSort ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8668)) VARIANT_BOOL PivotField::GetIsMemberProperty ( );
__declspec(implementation_key(8669)) PivotFieldPtr PivotField::GetPropertyParentField ( );
__declspec(implementation_key(8670)) long PivotField::GetPropertyOrder ( );
__declspec(implementation_key(8671)) void PivotField::PutPropertyOrder ( long _arg1 );
__declspec(implementation_key(8672)) VARIANT_BOOL PivotField::GetEnableItemSelection ( );
__declspec(implementation_key(8673)) void PivotField::PutEnableItemSelection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8674)) _variant_t PivotField::GetCurrentPageList ( );
__declspec(implementation_key(8675)) void PivotField::PutCurrentPageList ( const _variant_t & _arg1 );
__declspec(implementation_key(8676)) HRESULT PivotField::AddPageItem ( _bstr_t Item, const _variant_t & ClearList );
__declspec(implementation_key(8677)) _ApplicationPtr PivotFields::GetApplication ( );
__declspec(implementation_key(8678)) enum XlCreator PivotFields::GetCreator ( );
__declspec(implementation_key(8679)) PivotTablePtr PivotFields::GetParent ( );
__declspec(implementation_key(8680)) long PivotFields::GetCount ( );
__declspec(implementation_key(8681)) IDispatchPtr PivotFields::Item ( const _variant_t & Index );
__declspec(implementation_key(8682)) IUnknownPtr PivotFields::_NewEnum ( );
__declspec(implementation_key(8683)) _ApplicationPtr CalculatedFields::GetApplication ( );
__declspec(implementation_key(8684)) enum XlCreator CalculatedFields::GetCreator ( );
__declspec(implementation_key(8685)) IDispatchPtr CalculatedFields::GetParent ( );
__declspec(implementation_key(8686)) long CalculatedFields::GetCount ( );
__declspec(implementation_key(8687)) PivotFieldPtr CalculatedFields::_Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(8688)) PivotFieldPtr CalculatedFields::Item ( const _variant_t & Index );
__declspec(implementation_key(8689)) PivotFieldPtr CalculatedFields::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(8690)) IUnknownPtr CalculatedFields::_NewEnum ( );
__declspec(implementation_key(8691)) PivotFieldPtr CalculatedFields::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(8692)) _ApplicationPtr PivotItem::GetApplication ( );
__declspec(implementation_key(8693)) enum XlCreator PivotItem::GetCreator ( );
__declspec(implementation_key(8694)) PivotFieldPtr PivotItem::GetParent ( );
__declspec(implementation_key(8695)) _variant_t PivotItem::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(8696)) RangePtr PivotItem::GetDataRange ( );
__declspec(implementation_key(8697)) _bstr_t PivotItem::Get_Default ( );
__declspec(implementation_key(8698)) void PivotItem::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(8699)) RangePtr PivotItem::GetLabelRange ( );
__declspec(implementation_key(8700)) _bstr_t PivotItem::GetName ( );
__declspec(implementation_key(8701)) void PivotItem::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(8702)) PivotItemPtr PivotItem::GetParentItem ( );
__declspec(implementation_key(8703)) VARIANT_BOOL PivotItem::GetParentShowDetail ( );
__declspec(implementation_key(8704)) long PivotItem::GetPosition ( );
__declspec(implementation_key(8705)) void PivotItem::PutPosition ( long _arg1 );
__declspec(implementation_key(8706)) VARIANT_BOOL PivotItem::GetShowDetail ( );
__declspec(implementation_key(8707)) void PivotItem::PutShowDetail ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8708)) _variant_t PivotItem::GetSourceName ( );
__declspec(implementation_key(8709)) _bstr_t PivotItem::GetValue ( );
__declspec(implementation_key(8710)) void PivotItem::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(8711)) VARIANT_BOOL PivotItem::GetVisible ( );
__declspec(implementation_key(8712)) void PivotItem::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8713)) HRESULT PivotItem::Delete ( );
__declspec(implementation_key(8714)) VARIANT_BOOL PivotItem::GetIsCalculated ( );
__declspec(implementation_key(8715)) long PivotItem::GetRecordCount ( );
__declspec(implementation_key(8716)) _bstr_t PivotItem::GetFormula ( );
__declspec(implementation_key(8717)) void PivotItem::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(8718)) _bstr_t PivotItem::GetCaption ( );
__declspec(implementation_key(8719)) void PivotItem::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(8720)) VARIANT_BOOL PivotItem::GetDrilledDown ( );
__declspec(implementation_key(8721)) void PivotItem::PutDrilledDown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8722)) _bstr_t PivotItem::GetStandardFormula ( );
__declspec(implementation_key(8723)) void PivotItem::PutStandardFormula ( _bstr_t _arg1 );
__declspec(implementation_key(8724)) _bstr_t PivotItem::GetSourceNameStandard ( );
__declspec(implementation_key(8725)) _ApplicationPtr PivotItems::GetApplication ( );
__declspec(implementation_key(8726)) enum XlCreator PivotItems::GetCreator ( );
__declspec(implementation_key(8727)) PivotFieldPtr PivotItems::GetParent ( );
__declspec(implementation_key(8728)) HRESULT PivotItems::Add ( _bstr_t Name );
__declspec(implementation_key(8729)) long PivotItems::GetCount ( );
__declspec(implementation_key(8730)) IDispatchPtr PivotItems::Item ( const _variant_t & Index );
__declspec(implementation_key(8731)) IUnknownPtr PivotItems::_NewEnum ( );
__declspec(implementation_key(8732)) _ApplicationPtr CalculatedItems::GetApplication ( );
__declspec(implementation_key(8733)) enum XlCreator CalculatedItems::GetCreator ( );
__declspec(implementation_key(8734)) IDispatchPtr CalculatedItems::GetParent ( );
__declspec(implementation_key(8735)) long CalculatedItems::GetCount ( );
__declspec(implementation_key(8736)) PivotItemPtr CalculatedItems::_Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(8737)) PivotItemPtr CalculatedItems::Item ( const _variant_t & Index );
__declspec(implementation_key(8738)) PivotItemPtr CalculatedItems::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(8739)) IUnknownPtr CalculatedItems::_NewEnum ( );
__declspec(implementation_key(8740)) PivotItemPtr CalculatedItems::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(8741)) _ApplicationPtr Characters::GetApplication ( );
__declspec(implementation_key(8742)) enum XlCreator Characters::GetCreator ( );
__declspec(implementation_key(8743)) IDispatchPtr Characters::GetParent ( );
__declspec(implementation_key(8744)) _bstr_t Characters::GetCaption ( );
__declspec(implementation_key(8745)) void Characters::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(8746)) long Characters::GetCount ( );
__declspec(implementation_key(8747)) _variant_t Characters::Delete ( );
__declspec(implementation_key(8748)) FontPtr Characters::GetFont ( );
__declspec(implementation_key(8749)) _variant_t Characters::Insert ( _bstr_t String );
__declspec(implementation_key(8750)) _bstr_t Characters::GetText ( );
__declspec(implementation_key(8751)) void Characters::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(8752)) _bstr_t Characters::GetPhoneticCharacters ( );
__declspec(implementation_key(8753)) void Characters::PutPhoneticCharacters ( _bstr_t _arg1 );
__declspec(implementation_key(8754)) _ApplicationPtr Dialogs::GetApplication ( );
__declspec(implementation_key(8755)) enum XlCreator Dialogs::GetCreator ( );
__declspec(implementation_key(8756)) IDispatchPtr Dialogs::GetParent ( );
__declspec(implementation_key(8757)) long Dialogs::GetCount ( );
__declspec(implementation_key(8758)) DialogPtr Dialogs::GetItem ( enum XlBuiltInDialog Index );
__declspec(implementation_key(8759)) DialogPtr Dialogs::Get_Default ( enum XlBuiltInDialog Index );
__declspec(implementation_key(8760)) IUnknownPtr Dialogs::Get_NewEnum ( );
__declspec(implementation_key(8761)) _ApplicationPtr Dialog::GetApplication ( );
__declspec(implementation_key(8762)) enum XlCreator Dialog::GetCreator ( );
__declspec(implementation_key(8763)) IDispatchPtr Dialog::GetParent ( );
__declspec(implementation_key(8764)) VARIANT_BOOL Dialog::Show ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(8765)) _ApplicationPtr SoundNote::GetApplication ( );
__declspec(implementation_key(8766)) enum XlCreator SoundNote::GetCreator ( );
__declspec(implementation_key(8767)) IDispatchPtr SoundNote::GetParent ( );
__declspec(implementation_key(8768)) _variant_t SoundNote::Delete ( );
__declspec(implementation_key(8769)) _variant_t SoundNote::Import ( _bstr_t Filename );
__declspec(implementation_key(8770)) _variant_t SoundNote::Play ( );
__declspec(implementation_key(8771)) _variant_t SoundNote::Record ( );
__declspec(implementation_key(8772)) _ApplicationPtr Button::GetApplication ( );
__declspec(implementation_key(8773)) enum XlCreator Button::GetCreator ( );
__declspec(implementation_key(8774)) IDispatchPtr Button::GetParent ( );
__declspec(implementation_key(8775)) RangePtr Button::GetBottomRightCell ( );
__declspec(implementation_key(8776)) _variant_t Button::BringToFront ( );
__declspec(implementation_key(8777)) _variant_t Button::Copy ( );
__declspec(implementation_key(8778)) _variant_t Button::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8779)) _variant_t Button::Cut ( );
__declspec(implementation_key(8780)) _variant_t Button::Delete ( );
__declspec(implementation_key(8781)) IDispatchPtr Button::Duplicate ( );
__declspec(implementation_key(8782)) VARIANT_BOOL Button::GetEnabled ( );
__declspec(implementation_key(8783)) void Button::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8784)) double Button::GetHeight ( );
__declspec(implementation_key(8785)) void Button::PutHeight ( double _arg1 );
__declspec(implementation_key(8786)) long Button::GetIndex ( );
__declspec(implementation_key(8787)) double Button::GetLeft ( );
__declspec(implementation_key(8788)) void Button::PutLeft ( double _arg1 );
__declspec(implementation_key(8789)) VARIANT_BOOL Button::GetLocked ( );
__declspec(implementation_key(8790)) void Button::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8791)) _bstr_t Button::GetName ( );
__declspec(implementation_key(8792)) void Button::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(8793)) _bstr_t Button::GetOnAction ( );
__declspec(implementation_key(8794)) void Button::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(8795)) _variant_t Button::GetPlacement ( );
__declspec(implementation_key(8796)) void Button::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(8797)) VARIANT_BOOL Button::GetPrintObject ( );
__declspec(implementation_key(8798)) void Button::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8799)) _variant_t Button::Select ( const _variant_t & Replace );
__declspec(implementation_key(8800)) _variant_t Button::SendToBack ( );
__declspec(implementation_key(8801)) double Button::GetTop ( );
__declspec(implementation_key(8802)) void Button::PutTop ( double _arg1 );
__declspec(implementation_key(8803)) RangePtr Button::GetTopLeftCell ( );
__declspec(implementation_key(8804)) VARIANT_BOOL Button::GetVisible ( );
__declspec(implementation_key(8805)) void Button::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8806)) double Button::GetWidth ( );
__declspec(implementation_key(8807)) void Button::PutWidth ( double _arg1 );
__declspec(implementation_key(8808)) long Button::GetZOrder ( );
__declspec(implementation_key(8809)) ShapeRangePtr Button::GetShapeRange ( );
__declspec(implementation_key(8810)) VARIANT_BOOL Button::GetAddIndent ( );
__declspec(implementation_key(8811)) void Button::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8812)) _variant_t Button::GetAutoScaleFont ( );
__declspec(implementation_key(8813)) void Button::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(8814)) VARIANT_BOOL Button::GetAutoSize ( );
__declspec(implementation_key(8815)) void Button::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8816)) _bstr_t Button::GetCaption ( );
__declspec(implementation_key(8817)) void Button::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(8818)) CharactersPtr Button::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8819)) _variant_t Button::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8820)) FontPtr Button::GetFont ( );
__declspec(implementation_key(8821)) _bstr_t Button::GetFormula ( );
__declspec(implementation_key(8822)) void Button::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(8823)) _variant_t Button::GetHorizontalAlignment ( );
__declspec(implementation_key(8824)) void Button::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(8825)) VARIANT_BOOL Button::GetLockedText ( );
__declspec(implementation_key(8826)) void Button::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8827)) _variant_t Button::GetOrientation ( );
__declspec(implementation_key(8828)) void Button::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(8829)) _bstr_t Button::GetText ( );
__declspec(implementation_key(8830)) void Button::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(8831)) _variant_t Button::GetVerticalAlignment ( );
__declspec(implementation_key(8832)) void Button::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(8833)) long Button::GetReadingOrder ( );
__declspec(implementation_key(8834)) void Button::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(8835)) _variant_t Button::GetAccelerator ( );
__declspec(implementation_key(8836)) void Button::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(8837)) VARIANT_BOOL Button::GetCancelButton ( );
__declspec(implementation_key(8838)) void Button::PutCancelButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8839)) VARIANT_BOOL Button::GetDefaultButton ( );
__declspec(implementation_key(8840)) void Button::PutDefaultButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8841)) VARIANT_BOOL Button::GetDismissButton ( );
__declspec(implementation_key(8842)) void Button::PutDismissButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8843)) VARIANT_BOOL Button::GetHelpButton ( );
__declspec(implementation_key(8844)) void Button::PutHelpButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8845)) _variant_t Button::GetPhoneticAccelerator ( );
__declspec(implementation_key(8846)) void Button::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(8847)) _ApplicationPtr Buttons::GetApplication ( );
__declspec(implementation_key(8848)) enum XlCreator Buttons::GetCreator ( );
__declspec(implementation_key(8849)) IDispatchPtr Buttons::GetParent ( );
__declspec(implementation_key(8850)) _variant_t Buttons::BringToFront ( );
__declspec(implementation_key(8851)) _variant_t Buttons::Copy ( );
__declspec(implementation_key(8852)) _variant_t Buttons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8853)) _variant_t Buttons::Cut ( );
__declspec(implementation_key(8854)) _variant_t Buttons::Delete ( );
__declspec(implementation_key(8855)) IDispatchPtr Buttons::Duplicate ( );
__declspec(implementation_key(8856)) VARIANT_BOOL Buttons::GetEnabled ( );
__declspec(implementation_key(8857)) void Buttons::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8858)) double Buttons::GetHeight ( );
__declspec(implementation_key(8859)) void Buttons::PutHeight ( double _arg1 );
__declspec(implementation_key(8860)) double Buttons::GetLeft ( );
__declspec(implementation_key(8861)) void Buttons::PutLeft ( double _arg1 );
__declspec(implementation_key(8862)) VARIANT_BOOL Buttons::GetLocked ( );
__declspec(implementation_key(8863)) void Buttons::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8864)) _bstr_t Buttons::GetOnAction ( );
__declspec(implementation_key(8865)) void Buttons::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(8866)) _variant_t Buttons::GetPlacement ( );
__declspec(implementation_key(8867)) void Buttons::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(8868)) VARIANT_BOOL Buttons::GetPrintObject ( );
__declspec(implementation_key(8869)) void Buttons::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8870)) _variant_t Buttons::Select ( const _variant_t & Replace );
__declspec(implementation_key(8871)) _variant_t Buttons::SendToBack ( );
__declspec(implementation_key(8872)) double Buttons::GetTop ( );
__declspec(implementation_key(8873)) void Buttons::PutTop ( double _arg1 );
__declspec(implementation_key(8874)) VARIANT_BOOL Buttons::GetVisible ( );
__declspec(implementation_key(8875)) void Buttons::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8876)) double Buttons::GetWidth ( );
__declspec(implementation_key(8877)) void Buttons::PutWidth ( double _arg1 );
__declspec(implementation_key(8878)) long Buttons::GetZOrder ( );
__declspec(implementation_key(8879)) ShapeRangePtr Buttons::GetShapeRange ( );
__declspec(implementation_key(8880)) VARIANT_BOOL Buttons::GetAddIndent ( );
__declspec(implementation_key(8881)) void Buttons::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8882)) _variant_t Buttons::GetAutoScaleFont ( );
__declspec(implementation_key(8883)) void Buttons::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(8884)) VARIANT_BOOL Buttons::GetAutoSize ( );
__declspec(implementation_key(8885)) void Buttons::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8886)) _bstr_t Buttons::GetCaption ( );
__declspec(implementation_key(8887)) void Buttons::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(8888)) CharactersPtr Buttons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8889)) _variant_t Buttons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8890)) FontPtr Buttons::GetFont ( );
__declspec(implementation_key(8891)) _bstr_t Buttons::GetFormula ( );
__declspec(implementation_key(8892)) void Buttons::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(8893)) _variant_t Buttons::GetHorizontalAlignment ( );
__declspec(implementation_key(8894)) void Buttons::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(8895)) VARIANT_BOOL Buttons::GetLockedText ( );
__declspec(implementation_key(8896)) void Buttons::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8897)) _variant_t Buttons::GetOrientation ( );
__declspec(implementation_key(8898)) void Buttons::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(8899)) _bstr_t Buttons::GetText ( );
__declspec(implementation_key(8900)) void Buttons::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(8901)) _variant_t Buttons::GetVerticalAlignment ( );
__declspec(implementation_key(8902)) void Buttons::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(8903)) long Buttons::GetReadingOrder ( );
__declspec(implementation_key(8904)) void Buttons::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(8905)) _variant_t Buttons::GetAccelerator ( );
__declspec(implementation_key(8906)) void Buttons::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(8907)) VARIANT_BOOL Buttons::GetCancelButton ( );
__declspec(implementation_key(8908)) void Buttons::PutCancelButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8909)) VARIANT_BOOL Buttons::GetDefaultButton ( );
__declspec(implementation_key(8910)) void Buttons::PutDefaultButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8911)) VARIANT_BOOL Buttons::GetDismissButton ( );
__declspec(implementation_key(8912)) void Buttons::PutDismissButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8913)) VARIANT_BOOL Buttons::GetHelpButton ( );
__declspec(implementation_key(8914)) void Buttons::PutHelpButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8915)) _variant_t Buttons::GetPhoneticAccelerator ( );
__declspec(implementation_key(8916)) void Buttons::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(8917)) ButtonPtr Buttons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8918)) long Buttons::GetCount ( );
__declspec(implementation_key(8919)) GroupObjectPtr Buttons::Group ( );
__declspec(implementation_key(8920)) IDispatchPtr Buttons::Item ( const _variant_t & Index );
__declspec(implementation_key(8921)) IUnknownPtr Buttons::_NewEnum ( );
__declspec(implementation_key(8922)) _ApplicationPtr CheckBox::GetApplication ( );
__declspec(implementation_key(8923)) enum XlCreator CheckBox::GetCreator ( );
__declspec(implementation_key(8924)) IDispatchPtr CheckBox::GetParent ( );
__declspec(implementation_key(8925)) RangePtr CheckBox::GetBottomRightCell ( );
__declspec(implementation_key(8926)) _variant_t CheckBox::BringToFront ( );
__declspec(implementation_key(8927)) _variant_t CheckBox::Copy ( );
__declspec(implementation_key(8928)) _variant_t CheckBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8929)) _variant_t CheckBox::Cut ( );
__declspec(implementation_key(8930)) _variant_t CheckBox::Delete ( );
__declspec(implementation_key(8931)) IDispatchPtr CheckBox::Duplicate ( );
__declspec(implementation_key(8932)) VARIANT_BOOL CheckBox::GetEnabled ( );
__declspec(implementation_key(8933)) void CheckBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8934)) double CheckBox::GetHeight ( );
__declspec(implementation_key(8935)) void CheckBox::PutHeight ( double _arg1 );
__declspec(implementation_key(8936)) long CheckBox::GetIndex ( );
__declspec(implementation_key(8937)) double CheckBox::GetLeft ( );
__declspec(implementation_key(8938)) void CheckBox::PutLeft ( double _arg1 );
__declspec(implementation_key(8939)) VARIANT_BOOL CheckBox::GetLocked ( );
__declspec(implementation_key(8940)) void CheckBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8941)) _bstr_t CheckBox::GetName ( );
__declspec(implementation_key(8942)) void CheckBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(8943)) _bstr_t CheckBox::GetOnAction ( );
__declspec(implementation_key(8944)) void CheckBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(8945)) _variant_t CheckBox::GetPlacement ( );
__declspec(implementation_key(8946)) void CheckBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(8947)) VARIANT_BOOL CheckBox::GetPrintObject ( );
__declspec(implementation_key(8948)) void CheckBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8949)) _variant_t CheckBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(8950)) _variant_t CheckBox::SendToBack ( );
__declspec(implementation_key(8951)) double CheckBox::GetTop ( );
__declspec(implementation_key(8952)) void CheckBox::PutTop ( double _arg1 );
__declspec(implementation_key(8953)) RangePtr CheckBox::GetTopLeftCell ( );
__declspec(implementation_key(8954)) VARIANT_BOOL CheckBox::GetVisible ( );
__declspec(implementation_key(8955)) void CheckBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8956)) double CheckBox::GetWidth ( );
__declspec(implementation_key(8957)) void CheckBox::PutWidth ( double _arg1 );
__declspec(implementation_key(8958)) long CheckBox::GetZOrder ( );
__declspec(implementation_key(8959)) ShapeRangePtr CheckBox::GetShapeRange ( );
__declspec(implementation_key(8960)) _bstr_t CheckBox::GetCaption ( );
__declspec(implementation_key(8961)) void CheckBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(8962)) CharactersPtr CheckBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8963)) _variant_t CheckBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8964)) VARIANT_BOOL CheckBox::GetLockedText ( );
__declspec(implementation_key(8965)) void CheckBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8966)) _bstr_t CheckBox::GetText ( );
__declspec(implementation_key(8967)) void CheckBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(8968)) _variant_t CheckBox::GetAccelerator ( );
__declspec(implementation_key(8969)) void CheckBox::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(8970)) BorderPtr CheckBox::GetBorder ( );
__declspec(implementation_key(8971)) long CheckBox::Get_Default ( );
__declspec(implementation_key(8972)) void CheckBox::Put_Default ( long _arg1 );
__declspec(implementation_key(8973)) VARIANT_BOOL CheckBox::GetDisplay3DShading ( );
__declspec(implementation_key(8974)) void CheckBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8975)) InteriorPtr CheckBox::GetInterior ( );
__declspec(implementation_key(8976)) _bstr_t CheckBox::GetLinkedCell ( );
__declspec(implementation_key(8977)) void CheckBox::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(8978)) _variant_t CheckBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(8979)) void CheckBox::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(8980)) _variant_t CheckBox::GetValue ( );
__declspec(implementation_key(8981)) void CheckBox::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(8982)) _ApplicationPtr CheckBoxes::GetApplication ( );
__declspec(implementation_key(8983)) enum XlCreator CheckBoxes::GetCreator ( );
__declspec(implementation_key(8984)) IDispatchPtr CheckBoxes::GetParent ( );
__declspec(implementation_key(8985)) _variant_t CheckBoxes::BringToFront ( );
__declspec(implementation_key(8986)) _variant_t CheckBoxes::Copy ( );
__declspec(implementation_key(8987)) _variant_t CheckBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8988)) _variant_t CheckBoxes::Cut ( );
__declspec(implementation_key(8989)) _variant_t CheckBoxes::Delete ( );
__declspec(implementation_key(8990)) IDispatchPtr CheckBoxes::Duplicate ( );
__declspec(implementation_key(8991)) VARIANT_BOOL CheckBoxes::GetEnabled ( );
__declspec(implementation_key(8992)) void CheckBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8993)) double CheckBoxes::GetHeight ( );
__declspec(implementation_key(8994)) void CheckBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(8995)) double CheckBoxes::GetLeft ( );
__declspec(implementation_key(8996)) void CheckBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(8997)) VARIANT_BOOL CheckBoxes::GetLocked ( );
__declspec(implementation_key(8998)) void CheckBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8999)) _bstr_t CheckBoxes::GetOnAction ( );
__declspec(implementation_key(9000)) void CheckBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9001)) _variant_t CheckBoxes::GetPlacement ( );
__declspec(implementation_key(9002)) void CheckBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9003)) VARIANT_BOOL CheckBoxes::GetPrintObject ( );
__declspec(implementation_key(9004)) void CheckBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9005)) _variant_t CheckBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(9006)) _variant_t CheckBoxes::SendToBack ( );
__declspec(implementation_key(9007)) double CheckBoxes::GetTop ( );
__declspec(implementation_key(9008)) void CheckBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(9009)) VARIANT_BOOL CheckBoxes::GetVisible ( );
__declspec(implementation_key(9010)) void CheckBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9011)) double CheckBoxes::GetWidth ( );
__declspec(implementation_key(9012)) void CheckBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(9013)) long CheckBoxes::GetZOrder ( );
__declspec(implementation_key(9014)) ShapeRangePtr CheckBoxes::GetShapeRange ( );
__declspec(implementation_key(9015)) _bstr_t CheckBoxes::GetCaption ( );
__declspec(implementation_key(9016)) void CheckBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9017)) CharactersPtr CheckBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9018)) _variant_t CheckBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9019)) VARIANT_BOOL CheckBoxes::GetLockedText ( );
__declspec(implementation_key(9020)) void CheckBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9021)) _bstr_t CheckBoxes::GetText ( );
__declspec(implementation_key(9022)) void CheckBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9023)) _variant_t CheckBoxes::GetAccelerator ( );
__declspec(implementation_key(9024)) void CheckBoxes::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9025)) BorderPtr CheckBoxes::GetBorder ( );
__declspec(implementation_key(9026)) long CheckBoxes::Get_Default ( );
__declspec(implementation_key(9027)) void CheckBoxes::Put_Default ( long _arg1 );
__declspec(implementation_key(9028)) VARIANT_BOOL CheckBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(9029)) void CheckBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9030)) InteriorPtr CheckBoxes::GetInterior ( );
__declspec(implementation_key(9031)) _bstr_t CheckBoxes::GetLinkedCell ( );
__declspec(implementation_key(9032)) void CheckBoxes::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9033)) _variant_t CheckBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(9034)) void CheckBoxes::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9035)) _variant_t CheckBoxes::GetValue ( );
__declspec(implementation_key(9036)) void CheckBoxes::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(9037)) CheckBoxPtr CheckBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9038)) long CheckBoxes::GetCount ( );
__declspec(implementation_key(9039)) GroupObjectPtr CheckBoxes::Group ( );
__declspec(implementation_key(9040)) IDispatchPtr CheckBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(9041)) IUnknownPtr CheckBoxes::_NewEnum ( );
__declspec(implementation_key(9042)) _ApplicationPtr OptionButton::GetApplication ( );
__declspec(implementation_key(9043)) enum XlCreator OptionButton::GetCreator ( );
__declspec(implementation_key(9044)) IDispatchPtr OptionButton::GetParent ( );
__declspec(implementation_key(9045)) RangePtr OptionButton::GetBottomRightCell ( );
__declspec(implementation_key(9046)) _variant_t OptionButton::BringToFront ( );
__declspec(implementation_key(9047)) _variant_t OptionButton::Copy ( );
__declspec(implementation_key(9048)) _variant_t OptionButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9049)) _variant_t OptionButton::Cut ( );
__declspec(implementation_key(9050)) _variant_t OptionButton::Delete ( );
__declspec(implementation_key(9051)) IDispatchPtr OptionButton::Duplicate ( );
__declspec(implementation_key(9052)) VARIANT_BOOL OptionButton::GetEnabled ( );
__declspec(implementation_key(9053)) void OptionButton::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9054)) double OptionButton::GetHeight ( );
__declspec(implementation_key(9055)) void OptionButton::PutHeight ( double _arg1 );
__declspec(implementation_key(9056)) long OptionButton::GetIndex ( );
__declspec(implementation_key(9057)) double OptionButton::GetLeft ( );
__declspec(implementation_key(9058)) void OptionButton::PutLeft ( double _arg1 );
__declspec(implementation_key(9059)) VARIANT_BOOL OptionButton::GetLocked ( );
__declspec(implementation_key(9060)) void OptionButton::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9061)) _bstr_t OptionButton::GetName ( );
__declspec(implementation_key(9062)) void OptionButton::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(9063)) _bstr_t OptionButton::GetOnAction ( );
__declspec(implementation_key(9064)) void OptionButton::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9065)) _variant_t OptionButton::GetPlacement ( );
__declspec(implementation_key(9066)) void OptionButton::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9067)) VARIANT_BOOL OptionButton::GetPrintObject ( );
__declspec(implementation_key(9068)) void OptionButton::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9069)) _variant_t OptionButton::Select ( const _variant_t & Replace );
__declspec(implementation_key(9070)) _variant_t OptionButton::SendToBack ( );
__declspec(implementation_key(9071)) double OptionButton::GetTop ( );
__declspec(implementation_key(9072)) void OptionButton::PutTop ( double _arg1 );
__declspec(implementation_key(9073)) RangePtr OptionButton::GetTopLeftCell ( );
__declspec(implementation_key(9074)) VARIANT_BOOL OptionButton::GetVisible ( );
__declspec(implementation_key(9075)) void OptionButton::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9076)) double OptionButton::GetWidth ( );
__declspec(implementation_key(9077)) void OptionButton::PutWidth ( double _arg1 );
__declspec(implementation_key(9078)) long OptionButton::GetZOrder ( );
__declspec(implementation_key(9079)) ShapeRangePtr OptionButton::GetShapeRange ( );
__declspec(implementation_key(9080)) _bstr_t OptionButton::GetCaption ( );
__declspec(implementation_key(9081)) void OptionButton::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9082)) CharactersPtr OptionButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9083)) _variant_t OptionButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9084)) VARIANT_BOOL OptionButton::GetLockedText ( );
__declspec(implementation_key(9085)) void OptionButton::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9086)) _bstr_t OptionButton::GetText ( );
__declspec(implementation_key(9087)) void OptionButton::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9088)) _variant_t OptionButton::GetAccelerator ( );
__declspec(implementation_key(9089)) void OptionButton::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9090)) BorderPtr OptionButton::GetBorder ( );
__declspec(implementation_key(9091)) long OptionButton::Get_Default ( );
__declspec(implementation_key(9092)) void OptionButton::Put_Default ( long _arg1 );
__declspec(implementation_key(9093)) VARIANT_BOOL OptionButton::GetDisplay3DShading ( );
__declspec(implementation_key(9094)) void OptionButton::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9095)) InteriorPtr OptionButton::GetInterior ( );
__declspec(implementation_key(9096)) _bstr_t OptionButton::GetLinkedCell ( );
__declspec(implementation_key(9097)) void OptionButton::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9098)) _variant_t OptionButton::GetPhoneticAccelerator ( );
__declspec(implementation_key(9099)) void OptionButton::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9100)) _variant_t OptionButton::GetValue ( );
__declspec(implementation_key(9101)) void OptionButton::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(9102)) GroupBoxPtr OptionButton::GetGroupBox ( );
__declspec(implementation_key(9103)) _ApplicationPtr OptionButtons::GetApplication ( );
__declspec(implementation_key(9104)) enum XlCreator OptionButtons::GetCreator ( );
__declspec(implementation_key(9105)) IDispatchPtr OptionButtons::GetParent ( );
__declspec(implementation_key(9106)) _variant_t OptionButtons::BringToFront ( );
__declspec(implementation_key(9107)) _variant_t OptionButtons::Copy ( );
__declspec(implementation_key(9108)) _variant_t OptionButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9109)) _variant_t OptionButtons::Cut ( );
__declspec(implementation_key(9110)) _variant_t OptionButtons::Delete ( );
__declspec(implementation_key(9111)) IDispatchPtr OptionButtons::Duplicate ( );
__declspec(implementation_key(9112)) VARIANT_BOOL OptionButtons::GetEnabled ( );
__declspec(implementation_key(9113)) void OptionButtons::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9114)) double OptionButtons::GetHeight ( );
__declspec(implementation_key(9115)) void OptionButtons::PutHeight ( double _arg1 );
__declspec(implementation_key(9116)) double OptionButtons::GetLeft ( );
__declspec(implementation_key(9117)) void OptionButtons::PutLeft ( double _arg1 );
__declspec(implementation_key(9118)) VARIANT_BOOL OptionButtons::GetLocked ( );
__declspec(implementation_key(9119)) void OptionButtons::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9120)) _bstr_t OptionButtons::GetOnAction ( );
__declspec(implementation_key(9121)) void OptionButtons::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9122)) _variant_t OptionButtons::GetPlacement ( );
__declspec(implementation_key(9123)) void OptionButtons::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9124)) VARIANT_BOOL OptionButtons::GetPrintObject ( );
__declspec(implementation_key(9125)) void OptionButtons::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9126)) _variant_t OptionButtons::Select ( const _variant_t & Replace );
__declspec(implementation_key(9127)) _variant_t OptionButtons::SendToBack ( );
__declspec(implementation_key(9128)) double OptionButtons::GetTop ( );
__declspec(implementation_key(9129)) void OptionButtons::PutTop ( double _arg1 );
__declspec(implementation_key(9130)) VARIANT_BOOL OptionButtons::GetVisible ( );
__declspec(implementation_key(9131)) void OptionButtons::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9132)) double OptionButtons::GetWidth ( );
__declspec(implementation_key(9133)) void OptionButtons::PutWidth ( double _arg1 );
__declspec(implementation_key(9134)) long OptionButtons::GetZOrder ( );
__declspec(implementation_key(9135)) ShapeRangePtr OptionButtons::GetShapeRange ( );
__declspec(implementation_key(9136)) _bstr_t OptionButtons::GetCaption ( );
__declspec(implementation_key(9137)) void OptionButtons::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9138)) CharactersPtr OptionButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9139)) _variant_t OptionButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9140)) VARIANT_BOOL OptionButtons::GetLockedText ( );
__declspec(implementation_key(9141)) void OptionButtons::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9142)) _bstr_t OptionButtons::GetText ( );
__declspec(implementation_key(9143)) void OptionButtons::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9144)) _variant_t OptionButtons::GetAccelerator ( );
__declspec(implementation_key(9145)) void OptionButtons::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9146)) BorderPtr OptionButtons::GetBorder ( );
__declspec(implementation_key(9147)) long OptionButtons::Get_Default ( );
__declspec(implementation_key(9148)) void OptionButtons::Put_Default ( long _arg1 );
__declspec(implementation_key(9149)) VARIANT_BOOL OptionButtons::GetDisplay3DShading ( );
__declspec(implementation_key(9150)) void OptionButtons::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9151)) InteriorPtr OptionButtons::GetInterior ( );
__declspec(implementation_key(9152)) _bstr_t OptionButtons::GetLinkedCell ( );
__declspec(implementation_key(9153)) void OptionButtons::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9154)) _variant_t OptionButtons::GetPhoneticAccelerator ( );
__declspec(implementation_key(9155)) void OptionButtons::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9156)) _variant_t OptionButtons::GetValue ( );
__declspec(implementation_key(9157)) void OptionButtons::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(9158)) GroupBoxPtr OptionButtons::GetGroupBox ( );
__declspec(implementation_key(9159)) OptionButtonPtr OptionButtons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9160)) long OptionButtons::GetCount ( );
__declspec(implementation_key(9161)) GroupObjectPtr OptionButtons::Group ( );
__declspec(implementation_key(9162)) IDispatchPtr OptionButtons::Item ( const _variant_t & Index );
__declspec(implementation_key(9163)) IUnknownPtr OptionButtons::_NewEnum ( );
__declspec(implementation_key(9164)) _ApplicationPtr EditBox::GetApplication ( );
__declspec(implementation_key(9165)) enum XlCreator EditBox::GetCreator ( );
__declspec(implementation_key(9166)) IDispatchPtr EditBox::GetParent ( );
__declspec(implementation_key(9167)) RangePtr EditBox::GetBottomRightCell ( );
__declspec(implementation_key(9168)) _variant_t EditBox::BringToFront ( );
__declspec(implementation_key(9169)) _variant_t EditBox::Copy ( );
__declspec(implementation_key(9170)) _variant_t EditBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9171)) _variant_t EditBox::Cut ( );
__declspec(implementation_key(9172)) _variant_t EditBox::Delete ( );
__declspec(implementation_key(9173)) IDispatchPtr EditBox::Duplicate ( );
__declspec(implementation_key(9174)) VARIANT_BOOL EditBox::GetEnabled ( );
__declspec(implementation_key(9175)) void EditBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9176)) double EditBox::GetHeight ( );
__declspec(implementation_key(9177)) void EditBox::PutHeight ( double _arg1 );
__declspec(implementation_key(9178)) long EditBox::GetIndex ( );
__declspec(implementation_key(9179)) double EditBox::GetLeft ( );
__declspec(implementation_key(9180)) void EditBox::PutLeft ( double _arg1 );
__declspec(implementation_key(9181)) VARIANT_BOOL EditBox::GetLocked ( );
__declspec(implementation_key(9182)) void EditBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9183)) _bstr_t EditBox::GetName ( );
__declspec(implementation_key(9184)) void EditBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(9185)) _bstr_t EditBox::GetOnAction ( );
__declspec(implementation_key(9186)) void EditBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9187)) _variant_t EditBox::GetPlacement ( );
__declspec(implementation_key(9188)) void EditBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9189)) VARIANT_BOOL EditBox::GetPrintObject ( );
__declspec(implementation_key(9190)) void EditBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9191)) _variant_t EditBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(9192)) _variant_t EditBox::SendToBack ( );
__declspec(implementation_key(9193)) double EditBox::GetTop ( );
__declspec(implementation_key(9194)) void EditBox::PutTop ( double _arg1 );
__declspec(implementation_key(9195)) RangePtr EditBox::GetTopLeftCell ( );
__declspec(implementation_key(9196)) VARIANT_BOOL EditBox::GetVisible ( );
__declspec(implementation_key(9197)) void EditBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9198)) double EditBox::GetWidth ( );
__declspec(implementation_key(9199)) void EditBox::PutWidth ( double _arg1 );
__declspec(implementation_key(9200)) long EditBox::GetZOrder ( );
__declspec(implementation_key(9201)) ShapeRangePtr EditBox::GetShapeRange ( );
__declspec(implementation_key(9202)) _bstr_t EditBox::GetCaption ( );
__declspec(implementation_key(9203)) void EditBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9204)) CharactersPtr EditBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9205)) _variant_t EditBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9206)) VARIANT_BOOL EditBox::GetLockedText ( );
__declspec(implementation_key(9207)) void EditBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9208)) _bstr_t EditBox::GetText ( );
__declspec(implementation_key(9209)) void EditBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9210)) VARIANT_BOOL EditBox::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(9211)) void EditBox::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9212)) long EditBox::GetInputType ( );
__declspec(implementation_key(9213)) void EditBox::PutInputType ( long _arg1 );
__declspec(implementation_key(9214)) _bstr_t EditBox::GetLinkedObject ( );
__declspec(implementation_key(9215)) VARIANT_BOOL EditBox::GetMultiLine ( );
__declspec(implementation_key(9216)) void EditBox::PutMultiLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9217)) VARIANT_BOOL EditBox::GetPasswordEdit ( );
__declspec(implementation_key(9218)) void EditBox::PutPasswordEdit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9219)) _ApplicationPtr EditBoxes::GetApplication ( );
__declspec(implementation_key(9220)) enum XlCreator EditBoxes::GetCreator ( );
__declspec(implementation_key(9221)) IDispatchPtr EditBoxes::GetParent ( );
__declspec(implementation_key(9222)) _variant_t EditBoxes::BringToFront ( );
__declspec(implementation_key(9223)) _variant_t EditBoxes::Copy ( );
__declspec(implementation_key(9224)) _variant_t EditBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9225)) _variant_t EditBoxes::Cut ( );
__declspec(implementation_key(9226)) _variant_t EditBoxes::Delete ( );
__declspec(implementation_key(9227)) IDispatchPtr EditBoxes::Duplicate ( );
__declspec(implementation_key(9228)) VARIANT_BOOL EditBoxes::GetEnabled ( );
__declspec(implementation_key(9229)) void EditBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9230)) double EditBoxes::GetHeight ( );
__declspec(implementation_key(9231)) void EditBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(9232)) double EditBoxes::GetLeft ( );
__declspec(implementation_key(9233)) void EditBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(9234)) VARIANT_BOOL EditBoxes::GetLocked ( );
__declspec(implementation_key(9235)) void EditBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9236)) _bstr_t EditBoxes::GetOnAction ( );
__declspec(implementation_key(9237)) void EditBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9238)) _variant_t EditBoxes::GetPlacement ( );
__declspec(implementation_key(9239)) void EditBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9240)) VARIANT_BOOL EditBoxes::GetPrintObject ( );
__declspec(implementation_key(9241)) void EditBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9242)) _variant_t EditBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(9243)) _variant_t EditBoxes::SendToBack ( );
__declspec(implementation_key(9244)) double EditBoxes::GetTop ( );
__declspec(implementation_key(9245)) void EditBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(9246)) VARIANT_BOOL EditBoxes::GetVisible ( );
__declspec(implementation_key(9247)) void EditBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9248)) double EditBoxes::GetWidth ( );
__declspec(implementation_key(9249)) void EditBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(9250)) long EditBoxes::GetZOrder ( );
__declspec(implementation_key(9251)) ShapeRangePtr EditBoxes::GetShapeRange ( );
__declspec(implementation_key(9252)) _bstr_t EditBoxes::GetCaption ( );
__declspec(implementation_key(9253)) void EditBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9254)) CharactersPtr EditBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9255)) _variant_t EditBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9256)) VARIANT_BOOL EditBoxes::GetLockedText ( );
__declspec(implementation_key(9257)) void EditBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9258)) _bstr_t EditBoxes::GetText ( );
__declspec(implementation_key(9259)) void EditBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9260)) VARIANT_BOOL EditBoxes::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(9261)) void EditBoxes::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9262)) long EditBoxes::GetInputType ( );
__declspec(implementation_key(9263)) void EditBoxes::PutInputType ( long _arg1 );
__declspec(implementation_key(9264)) VARIANT_BOOL EditBoxes::GetMultiLine ( );
__declspec(implementation_key(9265)) void EditBoxes::PutMultiLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9266)) VARIANT_BOOL EditBoxes::GetPasswordEdit ( );
__declspec(implementation_key(9267)) void EditBoxes::PutPasswordEdit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9268)) EditBoxPtr EditBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9269)) long EditBoxes::GetCount ( );
__declspec(implementation_key(9270)) GroupObjectPtr EditBoxes::Group ( );
__declspec(implementation_key(9271)) _variant_t EditBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(9272)) IUnknownPtr EditBoxes::_NewEnum ( );
__declspec(implementation_key(9273)) _ApplicationPtr ScrollBar::GetApplication ( );
__declspec(implementation_key(9274)) enum XlCreator ScrollBar::GetCreator ( );
__declspec(implementation_key(9275)) IDispatchPtr ScrollBar::GetParent ( );
__declspec(implementation_key(9276)) RangePtr ScrollBar::GetBottomRightCell ( );
__declspec(implementation_key(9277)) _variant_t ScrollBar::BringToFront ( );
__declspec(implementation_key(9278)) _variant_t ScrollBar::Copy ( );
__declspec(implementation_key(9279)) _variant_t ScrollBar::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9280)) _variant_t ScrollBar::Cut ( );
__declspec(implementation_key(9281)) _variant_t ScrollBar::Delete ( );
__declspec(implementation_key(9282)) IDispatchPtr ScrollBar::Duplicate ( );
__declspec(implementation_key(9283)) VARIANT_BOOL ScrollBar::GetEnabled ( );
__declspec(implementation_key(9284)) void ScrollBar::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9285)) double ScrollBar::GetHeight ( );
__declspec(implementation_key(9286)) void ScrollBar::PutHeight ( double _arg1 );
__declspec(implementation_key(9287)) long ScrollBar::GetIndex ( );
__declspec(implementation_key(9288)) double ScrollBar::GetLeft ( );
__declspec(implementation_key(9289)) void ScrollBar::PutLeft ( double _arg1 );
__declspec(implementation_key(9290)) VARIANT_BOOL ScrollBar::GetLocked ( );
__declspec(implementation_key(9291)) void ScrollBar::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9292)) _bstr_t ScrollBar::GetName ( );
__declspec(implementation_key(9293)) void ScrollBar::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(9294)) _bstr_t ScrollBar::GetOnAction ( );
__declspec(implementation_key(9295)) void ScrollBar::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9296)) _variant_t ScrollBar::GetPlacement ( );
__declspec(implementation_key(9297)) void ScrollBar::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9298)) VARIANT_BOOL ScrollBar::GetPrintObject ( );
__declspec(implementation_key(9299)) void ScrollBar::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9300)) _variant_t ScrollBar::Select ( const _variant_t & Replace );
__declspec(implementation_key(9301)) _variant_t ScrollBar::SendToBack ( );
__declspec(implementation_key(9302)) double ScrollBar::GetTop ( );
__declspec(implementation_key(9303)) void ScrollBar::PutTop ( double _arg1 );
__declspec(implementation_key(9304)) RangePtr ScrollBar::GetTopLeftCell ( );
__declspec(implementation_key(9305)) VARIANT_BOOL ScrollBar::GetVisible ( );
__declspec(implementation_key(9306)) void ScrollBar::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9307)) double ScrollBar::GetWidth ( );
__declspec(implementation_key(9308)) void ScrollBar::PutWidth ( double _arg1 );
__declspec(implementation_key(9309)) long ScrollBar::GetZOrder ( );
__declspec(implementation_key(9310)) ShapeRangePtr ScrollBar::GetShapeRange ( );
__declspec(implementation_key(9311)) long ScrollBar::Get_Default ( );
__declspec(implementation_key(9312)) void ScrollBar::Put_Default ( long _arg1 );
__declspec(implementation_key(9313)) VARIANT_BOOL ScrollBar::GetDisplay3DShading ( );
__declspec(implementation_key(9314)) void ScrollBar::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9315)) _bstr_t ScrollBar::GetLinkedCell ( );
__declspec(implementation_key(9316)) void ScrollBar::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9317)) long ScrollBar::GetMax ( );
__declspec(implementation_key(9318)) void ScrollBar::PutMax ( long _arg1 );
__declspec(implementation_key(9319)) long ScrollBar::GetMin ( );
__declspec(implementation_key(9320)) void ScrollBar::PutMin ( long _arg1 );
__declspec(implementation_key(9321)) long ScrollBar::GetSmallChange ( );
__declspec(implementation_key(9322)) void ScrollBar::PutSmallChange ( long _arg1 );
__declspec(implementation_key(9323)) long ScrollBar::GetValue ( );
__declspec(implementation_key(9324)) void ScrollBar::PutValue ( long _arg1 );
__declspec(implementation_key(9325)) long ScrollBar::GetLargeChange ( );
__declspec(implementation_key(9326)) void ScrollBar::PutLargeChange ( long _arg1 );
__declspec(implementation_key(9327)) _ApplicationPtr ScrollBars::GetApplication ( );
__declspec(implementation_key(9328)) enum XlCreator ScrollBars::GetCreator ( );
__declspec(implementation_key(9329)) IDispatchPtr ScrollBars::GetParent ( );
__declspec(implementation_key(9330)) _variant_t ScrollBars::BringToFront ( );
__declspec(implementation_key(9331)) _variant_t ScrollBars::Copy ( );
__declspec(implementation_key(9332)) _variant_t ScrollBars::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9333)) _variant_t ScrollBars::Cut ( );
__declspec(implementation_key(9334)) _variant_t ScrollBars::Delete ( );
__declspec(implementation_key(9335)) IDispatchPtr ScrollBars::Duplicate ( );
__declspec(implementation_key(9336)) VARIANT_BOOL ScrollBars::GetEnabled ( );
__declspec(implementation_key(9337)) void ScrollBars::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9338)) double ScrollBars::GetHeight ( );
__declspec(implementation_key(9339)) void ScrollBars::PutHeight ( double _arg1 );
__declspec(implementation_key(9340)) double ScrollBars::GetLeft ( );
__declspec(implementation_key(9341)) void ScrollBars::PutLeft ( double _arg1 );
__declspec(implementation_key(9342)) VARIANT_BOOL ScrollBars::GetLocked ( );
__declspec(implementation_key(9343)) void ScrollBars::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9344)) _bstr_t ScrollBars::GetOnAction ( );
__declspec(implementation_key(9345)) void ScrollBars::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9346)) _variant_t ScrollBars::GetPlacement ( );
__declspec(implementation_key(9347)) void ScrollBars::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9348)) VARIANT_BOOL ScrollBars::GetPrintObject ( );
__declspec(implementation_key(9349)) void ScrollBars::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9350)) _variant_t ScrollBars::Select ( const _variant_t & Replace );
__declspec(implementation_key(9351)) _variant_t ScrollBars::SendToBack ( );
__declspec(implementation_key(9352)) double ScrollBars::GetTop ( );
__declspec(implementation_key(9353)) void ScrollBars::PutTop ( double _arg1 );
__declspec(implementation_key(9354)) VARIANT_BOOL ScrollBars::GetVisible ( );
__declspec(implementation_key(9355)) void ScrollBars::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9356)) double ScrollBars::GetWidth ( );
__declspec(implementation_key(9357)) void ScrollBars::PutWidth ( double _arg1 );
__declspec(implementation_key(9358)) long ScrollBars::GetZOrder ( );
__declspec(implementation_key(9359)) ShapeRangePtr ScrollBars::GetShapeRange ( );
__declspec(implementation_key(9360)) long ScrollBars::Get_Default ( );
__declspec(implementation_key(9361)) void ScrollBars::Put_Default ( long _arg1 );
__declspec(implementation_key(9362)) VARIANT_BOOL ScrollBars::GetDisplay3DShading ( );
__declspec(implementation_key(9363)) void ScrollBars::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9364)) _bstr_t ScrollBars::GetLinkedCell ( );
__declspec(implementation_key(9365)) void ScrollBars::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9366)) long ScrollBars::GetMax ( );
__declspec(implementation_key(9367)) void ScrollBars::PutMax ( long _arg1 );
__declspec(implementation_key(9368)) long ScrollBars::GetMin ( );
__declspec(implementation_key(9369)) void ScrollBars::PutMin ( long _arg1 );
__declspec(implementation_key(9370)) long ScrollBars::GetSmallChange ( );
__declspec(implementation_key(9371)) void ScrollBars::PutSmallChange ( long _arg1 );
__declspec(implementation_key(9372)) long ScrollBars::GetValue ( );
__declspec(implementation_key(9373)) void ScrollBars::PutValue ( long _arg1 );
__declspec(implementation_key(9374)) long ScrollBars::GetLargeChange ( );
__declspec(implementation_key(9375)) void ScrollBars::PutLargeChange ( long _arg1 );
__declspec(implementation_key(9376)) ScrollBarPtr ScrollBars::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9377)) long ScrollBars::GetCount ( );
__declspec(implementation_key(9378)) GroupObjectPtr ScrollBars::Group ( );
__declspec(implementation_key(9379)) IDispatchPtr ScrollBars::Item ( const _variant_t & Index );
__declspec(implementation_key(9380)) IUnknownPtr ScrollBars::_NewEnum ( );
__declspec(implementation_key(9381)) _ApplicationPtr ListBox::GetApplication ( );
__declspec(implementation_key(9382)) enum XlCreator ListBox::GetCreator ( );
__declspec(implementation_key(9383)) IDispatchPtr ListBox::GetParent ( );
__declspec(implementation_key(9384)) RangePtr ListBox::GetBottomRightCell ( );
__declspec(implementation_key(9385)) _variant_t ListBox::BringToFront ( );
__declspec(implementation_key(9386)) _variant_t ListBox::Copy ( );
__declspec(implementation_key(9387)) _variant_t ListBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9388)) _variant_t ListBox::Cut ( );
__declspec(implementation_key(9389)) _variant_t ListBox::Delete ( );
__declspec(implementation_key(9390)) IDispatchPtr ListBox::Duplicate ( );
__declspec(implementation_key(9391)) VARIANT_BOOL ListBox::GetEnabled ( );
__declspec(implementation_key(9392)) void ListBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9393)) double ListBox::GetHeight ( );
__declspec(implementation_key(9394)) void ListBox::PutHeight ( double _arg1 );
__declspec(implementation_key(9395)) long ListBox::GetIndex ( );
__declspec(implementation_key(9396)) double ListBox::GetLeft ( );
__declspec(implementation_key(9397)) void ListBox::PutLeft ( double _arg1 );
__declspec(implementation_key(9398)) VARIANT_BOOL ListBox::GetLocked ( );
__declspec(implementation_key(9399)) void ListBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9400)) _bstr_t ListBox::GetName ( );
__declspec(implementation_key(9401)) void ListBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(9402)) _bstr_t ListBox::GetOnAction ( );
__declspec(implementation_key(9403)) void ListBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9404)) _variant_t ListBox::GetPlacement ( );
__declspec(implementation_key(9405)) void ListBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9406)) VARIANT_BOOL ListBox::GetPrintObject ( );
__declspec(implementation_key(9407)) void ListBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9408)) _variant_t ListBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(9409)) _variant_t ListBox::SendToBack ( );
__declspec(implementation_key(9410)) double ListBox::GetTop ( );
__declspec(implementation_key(9411)) void ListBox::PutTop ( double _arg1 );
__declspec(implementation_key(9412)) RangePtr ListBox::GetTopLeftCell ( );
__declspec(implementation_key(9413)) VARIANT_BOOL ListBox::GetVisible ( );
__declspec(implementation_key(9414)) void ListBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9415)) double ListBox::GetWidth ( );
__declspec(implementation_key(9416)) void ListBox::PutWidth ( double _arg1 );
__declspec(implementation_key(9417)) long ListBox::GetZOrder ( );
__declspec(implementation_key(9418)) ShapeRangePtr ListBox::GetShapeRange ( );
__declspec(implementation_key(9419)) _variant_t ListBox::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(9420)) VARIANT_BOOL ListBox::GetDisplay3DShading ( );
__declspec(implementation_key(9421)) void ListBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9422)) long ListBox::Get_Default ( );
__declspec(implementation_key(9423)) void ListBox::Put_Default ( long _arg1 );
__declspec(implementation_key(9424)) _bstr_t ListBox::GetLinkedCell ( );
__declspec(implementation_key(9425)) void ListBox::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9426)) _variant_t ListBox::GetLinkedObject ( );
__declspec(implementation_key(9427)) _variant_t ListBox::GetList ( const _variant_t & Index );
__declspec(implementation_key(9428)) void ListBox::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(9429)) long ListBox::GetListCount ( );
__declspec(implementation_key(9430)) _bstr_t ListBox::GetListFillRange ( );
__declspec(implementation_key(9431)) void ListBox::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(9432)) long ListBox::GetListIndex ( );
__declspec(implementation_key(9433)) void ListBox::PutListIndex ( long _arg1 );
__declspec(implementation_key(9434)) long ListBox::GetMultiSelect ( );
__declspec(implementation_key(9435)) void ListBox::PutMultiSelect ( long _arg1 );
__declspec(implementation_key(9436)) _variant_t ListBox::RemoveAllItems ( );
__declspec(implementation_key(9437)) _variant_t ListBox::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(9438)) _variant_t ListBox::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(9439)) void ListBox::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(9440)) long ListBox::GetValue ( );
__declspec(implementation_key(9441)) void ListBox::PutValue ( long _arg1 );
__declspec(implementation_key(9442)) _ApplicationPtr ListBoxes::GetApplication ( );
__declspec(implementation_key(9443)) enum XlCreator ListBoxes::GetCreator ( );
__declspec(implementation_key(9444)) IDispatchPtr ListBoxes::GetParent ( );
__declspec(implementation_key(9445)) _variant_t ListBoxes::BringToFront ( );
__declspec(implementation_key(9446)) _variant_t ListBoxes::Copy ( );
__declspec(implementation_key(9447)) _variant_t ListBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9448)) _variant_t ListBoxes::Cut ( );
__declspec(implementation_key(9449)) _variant_t ListBoxes::Delete ( );
__declspec(implementation_key(9450)) IDispatchPtr ListBoxes::Duplicate ( );
__declspec(implementation_key(9451)) VARIANT_BOOL ListBoxes::GetEnabled ( );
__declspec(implementation_key(9452)) void ListBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9453)) double ListBoxes::GetHeight ( );
__declspec(implementation_key(9454)) void ListBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(9455)) double ListBoxes::GetLeft ( );
__declspec(implementation_key(9456)) void ListBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(9457)) VARIANT_BOOL ListBoxes::GetLocked ( );
__declspec(implementation_key(9458)) void ListBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9459)) _bstr_t ListBoxes::GetOnAction ( );
__declspec(implementation_key(9460)) void ListBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9461)) _variant_t ListBoxes::GetPlacement ( );
__declspec(implementation_key(9462)) void ListBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9463)) VARIANT_BOOL ListBoxes::GetPrintObject ( );
__declspec(implementation_key(9464)) void ListBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9465)) _variant_t ListBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(9466)) _variant_t ListBoxes::SendToBack ( );
__declspec(implementation_key(9467)) double ListBoxes::GetTop ( );
__declspec(implementation_key(9468)) void ListBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(9469)) VARIANT_BOOL ListBoxes::GetVisible ( );
__declspec(implementation_key(9470)) void ListBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9471)) double ListBoxes::GetWidth ( );
__declspec(implementation_key(9472)) void ListBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(9473)) long ListBoxes::GetZOrder ( );
__declspec(implementation_key(9474)) ShapeRangePtr ListBoxes::GetShapeRange ( );
__declspec(implementation_key(9475)) _variant_t ListBoxes::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(9476)) VARIANT_BOOL ListBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(9477)) void ListBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9478)) long ListBoxes::Get_Default ( );
__declspec(implementation_key(9479)) void ListBoxes::Put_Default ( long _arg1 );
__declspec(implementation_key(9480)) _bstr_t ListBoxes::GetLinkedCell ( );
__declspec(implementation_key(9481)) void ListBoxes::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9482)) _variant_t ListBoxes::GetList ( const _variant_t & Index );
__declspec(implementation_key(9483)) void ListBoxes::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(9484)) _bstr_t ListBoxes::GetListFillRange ( );
__declspec(implementation_key(9485)) void ListBoxes::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(9486)) long ListBoxes::GetListIndex ( );
__declspec(implementation_key(9487)) void ListBoxes::PutListIndex ( long _arg1 );
__declspec(implementation_key(9488)) long ListBoxes::GetMultiSelect ( );
__declspec(implementation_key(9489)) void ListBoxes::PutMultiSelect ( long _arg1 );
__declspec(implementation_key(9490)) _variant_t ListBoxes::RemoveAllItems ( );
__declspec(implementation_key(9491)) _variant_t ListBoxes::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(9492)) _variant_t ListBoxes::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(9493)) void ListBoxes::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(9494)) long ListBoxes::GetValue ( );
__declspec(implementation_key(9495)) void ListBoxes::PutValue ( long _arg1 );
__declspec(implementation_key(9496)) ListBoxPtr ListBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9497)) long ListBoxes::GetCount ( );
__declspec(implementation_key(9498)) GroupObjectPtr ListBoxes::Group ( );
__declspec(implementation_key(9499)) IDispatchPtr ListBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(9500)) IUnknownPtr ListBoxes::_NewEnum ( );
__declspec(implementation_key(9501)) _ApplicationPtr GroupBox::GetApplication ( );
__declspec(implementation_key(9502)) enum XlCreator GroupBox::GetCreator ( );
__declspec(implementation_key(9503)) IDispatchPtr GroupBox::GetParent ( );
__declspec(implementation_key(9504)) RangePtr GroupBox::GetBottomRightCell ( );
__declspec(implementation_key(9505)) _variant_t GroupBox::BringToFront ( );
__declspec(implementation_key(9506)) _variant_t GroupBox::Copy ( );
__declspec(implementation_key(9507)) _variant_t GroupBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9508)) _variant_t GroupBox::Cut ( );
__declspec(implementation_key(9509)) _variant_t GroupBox::Delete ( );
__declspec(implementation_key(9510)) IDispatchPtr GroupBox::Duplicate ( );
__declspec(implementation_key(9511)) VARIANT_BOOL GroupBox::GetEnabled ( );
__declspec(implementation_key(9512)) void GroupBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9513)) double GroupBox::GetHeight ( );
__declspec(implementation_key(9514)) void GroupBox::PutHeight ( double _arg1 );
__declspec(implementation_key(9515)) long GroupBox::GetIndex ( );
__declspec(implementation_key(9516)) double GroupBox::GetLeft ( );
__declspec(implementation_key(9517)) void GroupBox::PutLeft ( double _arg1 );
__declspec(implementation_key(9518)) VARIANT_BOOL GroupBox::GetLocked ( );
__declspec(implementation_key(9519)) void GroupBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9520)) _bstr_t GroupBox::GetName ( );
__declspec(implementation_key(9521)) void GroupBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(9522)) _bstr_t GroupBox::GetOnAction ( );
__declspec(implementation_key(9523)) void GroupBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9524)) _variant_t GroupBox::GetPlacement ( );
__declspec(implementation_key(9525)) void GroupBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9526)) VARIANT_BOOL GroupBox::GetPrintObject ( );
__declspec(implementation_key(9527)) void GroupBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9528)) _variant_t GroupBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(9529)) _variant_t GroupBox::SendToBack ( );
__declspec(implementation_key(9530)) double GroupBox::GetTop ( );
__declspec(implementation_key(9531)) void GroupBox::PutTop ( double _arg1 );
__declspec(implementation_key(9532)) RangePtr GroupBox::GetTopLeftCell ( );
__declspec(implementation_key(9533)) VARIANT_BOOL GroupBox::GetVisible ( );
__declspec(implementation_key(9534)) void GroupBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9535)) double GroupBox::GetWidth ( );
__declspec(implementation_key(9536)) void GroupBox::PutWidth ( double _arg1 );
__declspec(implementation_key(9537)) long GroupBox::GetZOrder ( );
__declspec(implementation_key(9538)) ShapeRangePtr GroupBox::GetShapeRange ( );
__declspec(implementation_key(9539)) _bstr_t GroupBox::GetCaption ( );
__declspec(implementation_key(9540)) void GroupBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9541)) CharactersPtr GroupBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9542)) _variant_t GroupBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9543)) VARIANT_BOOL GroupBox::GetLockedText ( );
__declspec(implementation_key(9544)) void GroupBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9545)) _bstr_t GroupBox::GetText ( );
__declspec(implementation_key(9546)) void GroupBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9547)) _variant_t GroupBox::GetAccelerator ( );
__declspec(implementation_key(9548)) void GroupBox::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9549)) VARIANT_BOOL GroupBox::GetDisplay3DShading ( );
__declspec(implementation_key(9550)) void GroupBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9551)) _variant_t GroupBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(9552)) void GroupBox::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9553)) _ApplicationPtr GroupBoxes::GetApplication ( );
__declspec(implementation_key(9554)) enum XlCreator GroupBoxes::GetCreator ( );
__declspec(implementation_key(9555)) IDispatchPtr GroupBoxes::GetParent ( );
__declspec(implementation_key(9556)) _variant_t GroupBoxes::BringToFront ( );
__declspec(implementation_key(9557)) _variant_t GroupBoxes::Copy ( );
__declspec(implementation_key(9558)) _variant_t GroupBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9559)) _variant_t GroupBoxes::Cut ( );
__declspec(implementation_key(9560)) _variant_t GroupBoxes::Delete ( );
__declspec(implementation_key(9561)) IDispatchPtr GroupBoxes::Duplicate ( );
__declspec(implementation_key(9562)) VARIANT_BOOL GroupBoxes::GetEnabled ( );
__declspec(implementation_key(9563)) void GroupBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9564)) double GroupBoxes::GetHeight ( );
__declspec(implementation_key(9565)) void GroupBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(9566)) double GroupBoxes::GetLeft ( );
__declspec(implementation_key(9567)) void GroupBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(9568)) VARIANT_BOOL GroupBoxes::GetLocked ( );
__declspec(implementation_key(9569)) void GroupBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9570)) _bstr_t GroupBoxes::GetOnAction ( );
__declspec(implementation_key(9571)) void GroupBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9572)) _variant_t GroupBoxes::GetPlacement ( );
__declspec(implementation_key(9573)) void GroupBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9574)) VARIANT_BOOL GroupBoxes::GetPrintObject ( );
__declspec(implementation_key(9575)) void GroupBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9576)) _variant_t GroupBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(9577)) _variant_t GroupBoxes::SendToBack ( );
__declspec(implementation_key(9578)) double GroupBoxes::GetTop ( );
__declspec(implementation_key(9579)) void GroupBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(9580)) VARIANT_BOOL GroupBoxes::GetVisible ( );
__declspec(implementation_key(9581)) void GroupBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9582)) double GroupBoxes::GetWidth ( );
__declspec(implementation_key(9583)) void GroupBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(9584)) long GroupBoxes::GetZOrder ( );
__declspec(implementation_key(9585)) ShapeRangePtr GroupBoxes::GetShapeRange ( );
__declspec(implementation_key(9586)) _bstr_t GroupBoxes::GetCaption ( );
__declspec(implementation_key(9587)) void GroupBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9588)) CharactersPtr GroupBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9589)) _variant_t GroupBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9590)) VARIANT_BOOL GroupBoxes::GetLockedText ( );
__declspec(implementation_key(9591)) void GroupBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9592)) _bstr_t GroupBoxes::GetText ( );
__declspec(implementation_key(9593)) void GroupBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9594)) _variant_t GroupBoxes::GetAccelerator ( );
__declspec(implementation_key(9595)) void GroupBoxes::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9596)) VARIANT_BOOL GroupBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(9597)) void GroupBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9598)) _variant_t GroupBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(9599)) void GroupBoxes::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9600)) GroupBoxPtr GroupBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9601)) long GroupBoxes::GetCount ( );
__declspec(implementation_key(9602)) GroupObjectPtr GroupBoxes::Group ( );
__declspec(implementation_key(9603)) IDispatchPtr GroupBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(9604)) IUnknownPtr GroupBoxes::_NewEnum ( );
__declspec(implementation_key(9605)) _ApplicationPtr DropDown::GetApplication ( );
__declspec(implementation_key(9606)) enum XlCreator DropDown::GetCreator ( );
__declspec(implementation_key(9607)) IDispatchPtr DropDown::GetParent ( );
__declspec(implementation_key(9608)) RangePtr DropDown::GetBottomRightCell ( );
__declspec(implementation_key(9609)) _variant_t DropDown::BringToFront ( );
__declspec(implementation_key(9610)) _variant_t DropDown::Copy ( );
__declspec(implementation_key(9611)) _variant_t DropDown::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9612)) _variant_t DropDown::Cut ( );
__declspec(implementation_key(9613)) _variant_t DropDown::Delete ( );
__declspec(implementation_key(9614)) IDispatchPtr DropDown::Duplicate ( );
__declspec(implementation_key(9615)) VARIANT_BOOL DropDown::GetEnabled ( );
__declspec(implementation_key(9616)) void DropDown::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9617)) double DropDown::GetHeight ( );
__declspec(implementation_key(9618)) void DropDown::PutHeight ( double _arg1 );
__declspec(implementation_key(9619)) long DropDown::GetIndex ( );
__declspec(implementation_key(9620)) double DropDown::GetLeft ( );
__declspec(implementation_key(9621)) void DropDown::PutLeft ( double _arg1 );
__declspec(implementation_key(9622)) VARIANT_BOOL DropDown::GetLocked ( );
__declspec(implementation_key(9623)) void DropDown::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9624)) _bstr_t DropDown::GetName ( );
__declspec(implementation_key(9625)) void DropDown::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(9626)) _bstr_t DropDown::GetOnAction ( );
__declspec(implementation_key(9627)) void DropDown::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9628)) _variant_t DropDown::GetPlacement ( );
__declspec(implementation_key(9629)) void DropDown::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9630)) VARIANT_BOOL DropDown::GetPrintObject ( );
__declspec(implementation_key(9631)) void DropDown::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9632)) _variant_t DropDown::Select ( const _variant_t & Replace );
__declspec(implementation_key(9633)) _variant_t DropDown::SendToBack ( );
__declspec(implementation_key(9634)) double DropDown::GetTop ( );
__declspec(implementation_key(9635)) void DropDown::PutTop ( double _arg1 );
__declspec(implementation_key(9636)) RangePtr DropDown::GetTopLeftCell ( );
__declspec(implementation_key(9637)) VARIANT_BOOL DropDown::GetVisible ( );
__declspec(implementation_key(9638)) void DropDown::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9639)) double DropDown::GetWidth ( );
__declspec(implementation_key(9640)) void DropDown::PutWidth ( double _arg1 );
__declspec(implementation_key(9641)) long DropDown::GetZOrder ( );
__declspec(implementation_key(9642)) ShapeRangePtr DropDown::GetShapeRange ( );
__declspec(implementation_key(9643)) _variant_t DropDown::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(9644)) VARIANT_BOOL DropDown::GetDisplay3DShading ( );
__declspec(implementation_key(9645)) void DropDown::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9646)) long DropDown::Get_Default ( );
__declspec(implementation_key(9647)) void DropDown::Put_Default ( long _arg1 );
__declspec(implementation_key(9648)) _bstr_t DropDown::GetLinkedCell ( );
__declspec(implementation_key(9649)) void DropDown::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9650)) _variant_t DropDown::GetLinkedObject ( );
__declspec(implementation_key(9651)) _variant_t DropDown::GetList ( const _variant_t & Index );
__declspec(implementation_key(9652)) void DropDown::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(9653)) long DropDown::GetListCount ( );
__declspec(implementation_key(9654)) _bstr_t DropDown::GetListFillRange ( );
__declspec(implementation_key(9655)) void DropDown::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(9656)) long DropDown::GetListIndex ( );
__declspec(implementation_key(9657)) void DropDown::PutListIndex ( long _arg1 );
__declspec(implementation_key(9658)) _variant_t DropDown::RemoveAllItems ( );
__declspec(implementation_key(9659)) _variant_t DropDown::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(9660)) _variant_t DropDown::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(9661)) void DropDown::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(9662)) long DropDown::GetValue ( );
__declspec(implementation_key(9663)) void DropDown::PutValue ( long _arg1 );
__declspec(implementation_key(9664)) _bstr_t DropDown::GetCaption ( );
__declspec(implementation_key(9665)) void DropDown::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9666)) CharactersPtr DropDown::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9667)) long DropDown::GetDropDownLines ( );
__declspec(implementation_key(9668)) void DropDown::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(9669)) _bstr_t DropDown::GetText ( );
__declspec(implementation_key(9670)) void DropDown::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9671)) _ApplicationPtr DropDowns::GetApplication ( );
__declspec(implementation_key(9672)) enum XlCreator DropDowns::GetCreator ( );
__declspec(implementation_key(9673)) IDispatchPtr DropDowns::GetParent ( );
__declspec(implementation_key(9674)) _variant_t DropDowns::BringToFront ( );
__declspec(implementation_key(9675)) _variant_t DropDowns::Copy ( );
__declspec(implementation_key(9676)) _variant_t DropDowns::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9677)) _variant_t DropDowns::Cut ( );
__declspec(implementation_key(9678)) _variant_t DropDowns::Delete ( );
__declspec(implementation_key(9679)) IDispatchPtr DropDowns::Duplicate ( );
__declspec(implementation_key(9680)) VARIANT_BOOL DropDowns::GetEnabled ( );
__declspec(implementation_key(9681)) void DropDowns::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9682)) double DropDowns::GetHeight ( );
__declspec(implementation_key(9683)) void DropDowns::PutHeight ( double _arg1 );
__declspec(implementation_key(9684)) double DropDowns::GetLeft ( );
__declspec(implementation_key(9685)) void DropDowns::PutLeft ( double _arg1 );
__declspec(implementation_key(9686)) VARIANT_BOOL DropDowns::GetLocked ( );
__declspec(implementation_key(9687)) void DropDowns::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9688)) _bstr_t DropDowns::GetOnAction ( );
__declspec(implementation_key(9689)) void DropDowns::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9690)) _variant_t DropDowns::GetPlacement ( );
__declspec(implementation_key(9691)) void DropDowns::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9692)) VARIANT_BOOL DropDowns::GetPrintObject ( );
__declspec(implementation_key(9693)) void DropDowns::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9694)) _variant_t DropDowns::Select ( const _variant_t & Replace );
__declspec(implementation_key(9695)) _variant_t DropDowns::SendToBack ( );
__declspec(implementation_key(9696)) double DropDowns::GetTop ( );
__declspec(implementation_key(9697)) void DropDowns::PutTop ( double _arg1 );
__declspec(implementation_key(9698)) VARIANT_BOOL DropDowns::GetVisible ( );
__declspec(implementation_key(9699)) void DropDowns::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9700)) double DropDowns::GetWidth ( );
__declspec(implementation_key(9701)) void DropDowns::PutWidth ( double _arg1 );
__declspec(implementation_key(9702)) long DropDowns::GetZOrder ( );
__declspec(implementation_key(9703)) ShapeRangePtr DropDowns::GetShapeRange ( );
__declspec(implementation_key(9704)) _variant_t DropDowns::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(9705)) VARIANT_BOOL DropDowns::GetDisplay3DShading ( );
__declspec(implementation_key(9706)) void DropDowns::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9707)) long DropDowns::Get_Default ( );
__declspec(implementation_key(9708)) void DropDowns::Put_Default ( long _arg1 );
__declspec(implementation_key(9709)) _bstr_t DropDowns::GetLinkedCell ( );
__declspec(implementation_key(9710)) void DropDowns::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9711)) _variant_t DropDowns::GetList ( const _variant_t & Index );
__declspec(implementation_key(9712)) void DropDowns::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(9713)) _bstr_t DropDowns::GetListFillRange ( );
__declspec(implementation_key(9714)) void DropDowns::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(9715)) long DropDowns::GetListIndex ( );
__declspec(implementation_key(9716)) void DropDowns::PutListIndex ( long _arg1 );
__declspec(implementation_key(9717)) _variant_t DropDowns::RemoveAllItems ( );
__declspec(implementation_key(9718)) _variant_t DropDowns::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(9719)) _variant_t DropDowns::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(9720)) void DropDowns::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(9721)) long DropDowns::GetValue ( );
__declspec(implementation_key(9722)) void DropDowns::PutValue ( long _arg1 );
__declspec(implementation_key(9723)) _bstr_t DropDowns::GetCaption ( );
__declspec(implementation_key(9724)) void DropDowns::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9725)) CharactersPtr DropDowns::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9726)) long DropDowns::GetDropDownLines ( );
__declspec(implementation_key(9727)) void DropDowns::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(9728)) _bstr_t DropDowns::GetText ( );
__declspec(implementation_key(9729)) void DropDowns::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9730)) DropDownPtr DropDowns::Add ( double Left, double Top, double Width, double Height, const _variant_t & Editable );
__declspec(implementation_key(9731)) long DropDowns::GetCount ( );
__declspec(implementation_key(9732)) GroupObjectPtr DropDowns::Group ( );
__declspec(implementation_key(9733)) IDispatchPtr DropDowns::Item ( const _variant_t & Index );
__declspec(implementation_key(9734)) IUnknownPtr DropDowns::_NewEnum ( );
__declspec(implementation_key(9735)) _ApplicationPtr Spinner::GetApplication ( );
__declspec(implementation_key(9736)) enum XlCreator Spinner::GetCreator ( );
__declspec(implementation_key(9737)) IDispatchPtr Spinner::GetParent ( );
__declspec(implementation_key(9738)) RangePtr Spinner::GetBottomRightCell ( );
__declspec(implementation_key(9739)) _variant_t Spinner::BringToFront ( );
__declspec(implementation_key(9740)) _variant_t Spinner::Copy ( );
__declspec(implementation_key(9741)) _variant_t Spinner::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9742)) _variant_t Spinner::Cut ( );
__declspec(implementation_key(9743)) _variant_t Spinner::Delete ( );
__declspec(implementation_key(9744)) IDispatchPtr Spinner::Duplicate ( );
__declspec(implementation_key(9745)) VARIANT_BOOL Spinner::GetEnabled ( );
__declspec(implementation_key(9746)) void Spinner::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9747)) double Spinner::GetHeight ( );
__declspec(implementation_key(9748)) void Spinner::PutHeight ( double _arg1 );
__declspec(implementation_key(9749)) long Spinner::GetIndex ( );
__declspec(implementation_key(9750)) double Spinner::GetLeft ( );
__declspec(implementation_key(9751)) void Spinner::PutLeft ( double _arg1 );
__declspec(implementation_key(9752)) VARIANT_BOOL Spinner::GetLocked ( );
__declspec(implementation_key(9753)) void Spinner::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9754)) _bstr_t Spinner::GetName ( );
__declspec(implementation_key(9755)) void Spinner::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(9756)) _bstr_t Spinner::GetOnAction ( );
__declspec(implementation_key(9757)) void Spinner::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9758)) _variant_t Spinner::GetPlacement ( );
__declspec(implementation_key(9759)) void Spinner::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9760)) VARIANT_BOOL Spinner::GetPrintObject ( );
__declspec(implementation_key(9761)) void Spinner::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9762)) _variant_t Spinner::Select ( const _variant_t & Replace );
__declspec(implementation_key(9763)) _variant_t Spinner::SendToBack ( );
__declspec(implementation_key(9764)) double Spinner::GetTop ( );
__declspec(implementation_key(9765)) void Spinner::PutTop ( double _arg1 );
__declspec(implementation_key(9766)) RangePtr Spinner::GetTopLeftCell ( );
__declspec(implementation_key(9767)) VARIANT_BOOL Spinner::GetVisible ( );
__declspec(implementation_key(9768)) void Spinner::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9769)) double Spinner::GetWidth ( );
__declspec(implementation_key(9770)) void Spinner::PutWidth ( double _arg1 );
__declspec(implementation_key(9771)) long Spinner::GetZOrder ( );
__declspec(implementation_key(9772)) ShapeRangePtr Spinner::GetShapeRange ( );
__declspec(implementation_key(9773)) long Spinner::Get_Default ( );
__declspec(implementation_key(9774)) void Spinner::Put_Default ( long _arg1 );
__declspec(implementation_key(9775)) VARIANT_BOOL Spinner::GetDisplay3DShading ( );
__declspec(implementation_key(9776)) void Spinner::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9777)) _bstr_t Spinner::GetLinkedCell ( );
__declspec(implementation_key(9778)) void Spinner::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9779)) long Spinner::GetMax ( );
__declspec(implementation_key(9780)) void Spinner::PutMax ( long _arg1 );
__declspec(implementation_key(9781)) long Spinner::GetMin ( );
__declspec(implementation_key(9782)) void Spinner::PutMin ( long _arg1 );
__declspec(implementation_key(9783)) long Spinner::GetSmallChange ( );
__declspec(implementation_key(9784)) void Spinner::PutSmallChange ( long _arg1 );
__declspec(implementation_key(9785)) long Spinner::GetValue ( );
__declspec(implementation_key(9786)) void Spinner::PutValue ( long _arg1 );
__declspec(implementation_key(9787)) _ApplicationPtr Spinners::GetApplication ( );
__declspec(implementation_key(9788)) enum XlCreator Spinners::GetCreator ( );
__declspec(implementation_key(9789)) IDispatchPtr Spinners::GetParent ( );
__declspec(implementation_key(9790)) _variant_t Spinners::BringToFront ( );
__declspec(implementation_key(9791)) _variant_t Spinners::Copy ( );
__declspec(implementation_key(9792)) _variant_t Spinners::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9793)) _variant_t Spinners::Cut ( );
__declspec(implementation_key(9794)) _variant_t Spinners::Delete ( );
__declspec(implementation_key(9795)) IDispatchPtr Spinners::Duplicate ( );
__declspec(implementation_key(9796)) VARIANT_BOOL Spinners::GetEnabled ( );
__declspec(implementation_key(9797)) void Spinners::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9798)) double Spinners::GetHeight ( );
__declspec(implementation_key(9799)) void Spinners::PutHeight ( double _arg1 );
__declspec(implementation_key(9800)) double Spinners::GetLeft ( );
__declspec(implementation_key(9801)) void Spinners::PutLeft ( double _arg1 );
__declspec(implementation_key(9802)) VARIANT_BOOL Spinners::GetLocked ( );
__declspec(implementation_key(9803)) void Spinners::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9804)) _bstr_t Spinners::GetOnAction ( );
__declspec(implementation_key(9805)) void Spinners::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9806)) _variant_t Spinners::GetPlacement ( );
__declspec(implementation_key(9807)) void Spinners::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9808)) VARIANT_BOOL Spinners::GetPrintObject ( );
__declspec(implementation_key(9809)) void Spinners::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9810)) _variant_t Spinners::Select ( const _variant_t & Replace );
__declspec(implementation_key(9811)) _variant_t Spinners::SendToBack ( );
__declspec(implementation_key(9812)) double Spinners::GetTop ( );
__declspec(implementation_key(9813)) void Spinners::PutTop ( double _arg1 );
__declspec(implementation_key(9814)) VARIANT_BOOL Spinners::GetVisible ( );
__declspec(implementation_key(9815)) void Spinners::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9816)) double Spinners::GetWidth ( );
__declspec(implementation_key(9817)) void Spinners::PutWidth ( double _arg1 );
__declspec(implementation_key(9818)) long Spinners::GetZOrder ( );
__declspec(implementation_key(9819)) ShapeRangePtr Spinners::GetShapeRange ( );
__declspec(implementation_key(9820)) long Spinners::Get_Default ( );
__declspec(implementation_key(9821)) void Spinners::Put_Default ( long _arg1 );
__declspec(implementation_key(9822)) VARIANT_BOOL Spinners::GetDisplay3DShading ( );
__declspec(implementation_key(9823)) void Spinners::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9824)) _bstr_t Spinners::GetLinkedCell ( );
__declspec(implementation_key(9825)) void Spinners::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(9826)) long Spinners::GetMax ( );
__declspec(implementation_key(9827)) void Spinners::PutMax ( long _arg1 );
__declspec(implementation_key(9828)) long Spinners::GetMin ( );
__declspec(implementation_key(9829)) void Spinners::PutMin ( long _arg1 );
__declspec(implementation_key(9830)) long Spinners::GetSmallChange ( );
__declspec(implementation_key(9831)) void Spinners::PutSmallChange ( long _arg1 );
__declspec(implementation_key(9832)) long Spinners::GetValue ( );
__declspec(implementation_key(9833)) void Spinners::PutValue ( long _arg1 );
__declspec(implementation_key(9834)) SpinnerPtr Spinners::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9835)) long Spinners::GetCount ( );
__declspec(implementation_key(9836)) GroupObjectPtr Spinners::Group ( );
__declspec(implementation_key(9837)) IDispatchPtr Spinners::Item ( const _variant_t & Index );
__declspec(implementation_key(9838)) IUnknownPtr Spinners::_NewEnum ( );
__declspec(implementation_key(9839)) _ApplicationPtr DialogFrame::GetApplication ( );
__declspec(implementation_key(9840)) enum XlCreator DialogFrame::GetCreator ( );
__declspec(implementation_key(9841)) IDispatchPtr DialogFrame::GetParent ( );
__declspec(implementation_key(9842)) _variant_t DialogFrame::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9843)) double DialogFrame::GetHeight ( );
__declspec(implementation_key(9844)) void DialogFrame::PutHeight ( double _arg1 );
__declspec(implementation_key(9845)) double DialogFrame::GetLeft ( );
__declspec(implementation_key(9846)) void DialogFrame::PutLeft ( double _arg1 );
__declspec(implementation_key(9847)) VARIANT_BOOL DialogFrame::GetLocked ( );
__declspec(implementation_key(9848)) void DialogFrame::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9849)) _bstr_t DialogFrame::GetName ( );
__declspec(implementation_key(9850)) void DialogFrame::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(9851)) _bstr_t DialogFrame::GetOnAction ( );
__declspec(implementation_key(9852)) void DialogFrame::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9853)) _variant_t DialogFrame::Select ( const _variant_t & Replace );
__declspec(implementation_key(9854)) double DialogFrame::GetTop ( );
__declspec(implementation_key(9855)) void DialogFrame::PutTop ( double _arg1 );
__declspec(implementation_key(9856)) double DialogFrame::GetWidth ( );
__declspec(implementation_key(9857)) void DialogFrame::PutWidth ( double _arg1 );
__declspec(implementation_key(9858)) ShapeRangePtr DialogFrame::GetShapeRange ( );
__declspec(implementation_key(9859)) _bstr_t DialogFrame::GetCaption ( );
__declspec(implementation_key(9860)) void DialogFrame::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9861)) CharactersPtr DialogFrame::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9862)) _variant_t DialogFrame::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9863)) VARIANT_BOOL DialogFrame::GetLockedText ( );
__declspec(implementation_key(9864)) void DialogFrame::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9865)) _bstr_t DialogFrame::GetText ( );
__declspec(implementation_key(9866)) void DialogFrame::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9867)) _ApplicationPtr Label::GetApplication ( );
__declspec(implementation_key(9868)) enum XlCreator Label::GetCreator ( );
__declspec(implementation_key(9869)) IDispatchPtr Label::GetParent ( );
__declspec(implementation_key(9870)) RangePtr Label::GetBottomRightCell ( );
__declspec(implementation_key(9871)) _variant_t Label::BringToFront ( );
__declspec(implementation_key(9872)) _variant_t Label::Copy ( );
__declspec(implementation_key(9873)) _variant_t Label::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9874)) _variant_t Label::Cut ( );
__declspec(implementation_key(9875)) _variant_t Label::Delete ( );
__declspec(implementation_key(9876)) IDispatchPtr Label::Duplicate ( );
__declspec(implementation_key(9877)) VARIANT_BOOL Label::GetEnabled ( );
__declspec(implementation_key(9878)) void Label::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9879)) double Label::GetHeight ( );
__declspec(implementation_key(9880)) void Label::PutHeight ( double _arg1 );
__declspec(implementation_key(9881)) long Label::GetIndex ( );
__declspec(implementation_key(9882)) double Label::GetLeft ( );
__declspec(implementation_key(9883)) void Label::PutLeft ( double _arg1 );
__declspec(implementation_key(9884)) VARIANT_BOOL Label::GetLocked ( );
__declspec(implementation_key(9885)) void Label::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9886)) _bstr_t Label::GetName ( );
__declspec(implementation_key(9887)) void Label::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(9888)) _bstr_t Label::GetOnAction ( );
__declspec(implementation_key(9889)) void Label::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9890)) _variant_t Label::GetPlacement ( );
__declspec(implementation_key(9891)) void Label::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9892)) VARIANT_BOOL Label::GetPrintObject ( );
__declspec(implementation_key(9893)) void Label::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9894)) _variant_t Label::Select ( const _variant_t & Replace );
__declspec(implementation_key(9895)) _variant_t Label::SendToBack ( );
__declspec(implementation_key(9896)) double Label::GetTop ( );
__declspec(implementation_key(9897)) void Label::PutTop ( double _arg1 );
__declspec(implementation_key(9898)) RangePtr Label::GetTopLeftCell ( );
__declspec(implementation_key(9899)) VARIANT_BOOL Label::GetVisible ( );
__declspec(implementation_key(9900)) void Label::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9901)) double Label::GetWidth ( );
__declspec(implementation_key(9902)) void Label::PutWidth ( double _arg1 );
__declspec(implementation_key(9903)) long Label::GetZOrder ( );
__declspec(implementation_key(9904)) ShapeRangePtr Label::GetShapeRange ( );
__declspec(implementation_key(9905)) _bstr_t Label::GetCaption ( );
__declspec(implementation_key(9906)) void Label::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9907)) CharactersPtr Label::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9908)) _variant_t Label::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9909)) VARIANT_BOOL Label::GetLockedText ( );
__declspec(implementation_key(9910)) void Label::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9911)) _bstr_t Label::GetText ( );
__declspec(implementation_key(9912)) void Label::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9913)) _variant_t Label::GetAccelerator ( );
__declspec(implementation_key(9914)) void Label::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9915)) _variant_t Label::GetPhoneticAccelerator ( );
__declspec(implementation_key(9916)) void Label::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9917)) _ApplicationPtr Labels::GetApplication ( );
__declspec(implementation_key(9918)) enum XlCreator Labels::GetCreator ( );
__declspec(implementation_key(9919)) IDispatchPtr Labels::GetParent ( );
__declspec(implementation_key(9920)) _variant_t Labels::BringToFront ( );
__declspec(implementation_key(9921)) _variant_t Labels::Copy ( );
__declspec(implementation_key(9922)) _variant_t Labels::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9923)) _variant_t Labels::Cut ( );
__declspec(implementation_key(9924)) _variant_t Labels::Delete ( );
__declspec(implementation_key(9925)) IDispatchPtr Labels::Duplicate ( );
__declspec(implementation_key(9926)) VARIANT_BOOL Labels::GetEnabled ( );
__declspec(implementation_key(9927)) void Labels::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9928)) double Labels::GetHeight ( );
__declspec(implementation_key(9929)) void Labels::PutHeight ( double _arg1 );
__declspec(implementation_key(9930)) double Labels::GetLeft ( );
__declspec(implementation_key(9931)) void Labels::PutLeft ( double _arg1 );
__declspec(implementation_key(9932)) VARIANT_BOOL Labels::GetLocked ( );
__declspec(implementation_key(9933)) void Labels::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9934)) _bstr_t Labels::GetOnAction ( );
__declspec(implementation_key(9935)) void Labels::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(9936)) _variant_t Labels::GetPlacement ( );
__declspec(implementation_key(9937)) void Labels::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(9938)) VARIANT_BOOL Labels::GetPrintObject ( );
__declspec(implementation_key(9939)) void Labels::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9940)) _variant_t Labels::Select ( const _variant_t & Replace );
__declspec(implementation_key(9941)) _variant_t Labels::SendToBack ( );
__declspec(implementation_key(9942)) double Labels::GetTop ( );
__declspec(implementation_key(9943)) void Labels::PutTop ( double _arg1 );
__declspec(implementation_key(9944)) VARIANT_BOOL Labels::GetVisible ( );
__declspec(implementation_key(9945)) void Labels::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9946)) double Labels::GetWidth ( );
__declspec(implementation_key(9947)) void Labels::PutWidth ( double _arg1 );
__declspec(implementation_key(9948)) long Labels::GetZOrder ( );
__declspec(implementation_key(9949)) ShapeRangePtr Labels::GetShapeRange ( );
__declspec(implementation_key(9950)) _bstr_t Labels::GetCaption ( );
__declspec(implementation_key(9951)) void Labels::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(9952)) CharactersPtr Labels::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9953)) _variant_t Labels::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9954)) VARIANT_BOOL Labels::GetLockedText ( );
__declspec(implementation_key(9955)) void Labels::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(9956)) _bstr_t Labels::GetText ( );
__declspec(implementation_key(9957)) void Labels::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(9958)) _variant_t Labels::GetAccelerator ( );
__declspec(implementation_key(9959)) void Labels::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9960)) _variant_t Labels::GetPhoneticAccelerator ( );
__declspec(implementation_key(9961)) void Labels::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(9962)) LabelPtr Labels::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9963)) long Labels::GetCount ( );
__declspec(implementation_key(9964)) GroupObjectPtr Labels::Group ( );
__declspec(implementation_key(9965)) IDispatchPtr Labels::Item ( const _variant_t & Index );
__declspec(implementation_key(9966)) IUnknownPtr Labels::_NewEnum ( );
__declspec(implementation_key(9967)) _ApplicationPtr Panes::GetApplication ( );
__declspec(implementation_key(9968)) enum XlCreator Panes::GetCreator ( );
__declspec(implementation_key(9969)) IDispatchPtr Panes::GetParent ( );
__declspec(implementation_key(9970)) long Panes::GetCount ( );
__declspec(implementation_key(9971)) PanePtr Panes::GetItem ( long Index );
__declspec(implementation_key(9972)) PanePtr Panes::Get_Default ( long Index );
__declspec(implementation_key(9973)) _ApplicationPtr Pane::GetApplication ( );
__declspec(implementation_key(9974)) enum XlCreator Pane::GetCreator ( );
__declspec(implementation_key(9975)) IDispatchPtr Pane::GetParent ( );
__declspec(implementation_key(9976)) VARIANT_BOOL Pane::Activate ( );
__declspec(implementation_key(9977)) long Pane::GetIndex ( );
__declspec(implementation_key(9978)) _variant_t Pane::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(9979)) long Pane::GetScrollColumn ( );
__declspec(implementation_key(9980)) void Pane::PutScrollColumn ( long _arg1 );
__declspec(implementation_key(9981)) long Pane::GetScrollRow ( );
__declspec(implementation_key(9982)) void Pane::PutScrollRow ( long _arg1 );
__declspec(implementation_key(9983)) _variant_t Pane::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(9984)) RangePtr Pane::GetVisibleRange ( );
__declspec(implementation_key(9985)) HRESULT Pane::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(9986)) _ApplicationPtr Scenarios::GetApplication ( );
__declspec(implementation_key(9987)) enum XlCreator Scenarios::GetCreator ( );
__declspec(implementation_key(9988)) IDispatchPtr Scenarios::GetParent ( );
__declspec(implementation_key(9989)) ScenarioPtr Scenarios::Add ( _bstr_t Name, const _variant_t & ChangingCells, const _variant_t & Values, const _variant_t & Comment, const _variant_t & Locked, const _variant_t & Hidden );
__declspec(implementation_key(9990)) long Scenarios::GetCount ( );
__declspec(implementation_key(9991)) _variant_t Scenarios::CreateSummary ( enum XlSummaryReportType ReportType, const _variant_t & ResultCells );
__declspec(implementation_key(9992)) ScenarioPtr Scenarios::Item ( const _variant_t & Index );
__declspec(implementation_key(9993)) _variant_t Scenarios::Merge ( const _variant_t & Source );
__declspec(implementation_key(9994)) IUnknownPtr Scenarios::_NewEnum ( );
__declspec(implementation_key(9995)) _ApplicationPtr Scenario::GetApplication ( );
__declspec(implementation_key(9996)) enum XlCreator Scenario::GetCreator ( );
__declspec(implementation_key(9997)) IDispatchPtr Scenario::GetParent ( );
__declspec(implementation_key(9998)) _variant_t Scenario::ChangeScenario ( const _variant_t & ChangingCells, const _variant_t & Values );
__declspec(implementation_key(9999)) RangePtr Scenario::GetChangingCells ( );
__declspec(implementation_key(10000)) _bstr_t Scenario::GetComment ( );
__declspec(implementation_key(10001)) void Scenario::PutComment ( _bstr_t _arg1 );
__declspec(implementation_key(10002)) _variant_t Scenario::Delete ( );
__declspec(implementation_key(10003)) VARIANT_BOOL Scenario::GetHidden ( );
__declspec(implementation_key(10004)) void Scenario::PutHidden ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10005)) long Scenario::GetIndex ( );
__declspec(implementation_key(10006)) VARIANT_BOOL Scenario::GetLocked ( );
__declspec(implementation_key(10007)) void Scenario::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10008)) _bstr_t Scenario::GetName ( );
__declspec(implementation_key(10009)) void Scenario::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(10010)) _variant_t Scenario::Show ( );
__declspec(implementation_key(10011)) _variant_t Scenario::GetValues ( const _variant_t & Index );
__declspec(implementation_key(10012)) _ApplicationPtr GroupObject::GetApplication ( );
__declspec(implementation_key(10013)) enum XlCreator GroupObject::GetCreator ( );
__declspec(implementation_key(10014)) IDispatchPtr GroupObject::GetParent ( );
__declspec(implementation_key(10015)) RangePtr GroupObject::GetBottomRightCell ( );
__declspec(implementation_key(10016)) _variant_t GroupObject::BringToFront ( );
__declspec(implementation_key(10017)) _variant_t GroupObject::Copy ( );
__declspec(implementation_key(10018)) _variant_t GroupObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10019)) _variant_t GroupObject::Cut ( );
__declspec(implementation_key(10020)) _variant_t GroupObject::Delete ( );
__declspec(implementation_key(10021)) IDispatchPtr GroupObject::Duplicate ( );
__declspec(implementation_key(10022)) VARIANT_BOOL GroupObject::GetEnabled ( );
__declspec(implementation_key(10023)) void GroupObject::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10024)) double GroupObject::GetHeight ( );
__declspec(implementation_key(10025)) void GroupObject::PutHeight ( double _arg1 );
__declspec(implementation_key(10026)) long GroupObject::GetIndex ( );
__declspec(implementation_key(10027)) double GroupObject::GetLeft ( );
__declspec(implementation_key(10028)) void GroupObject::PutLeft ( double _arg1 );
__declspec(implementation_key(10029)) VARIANT_BOOL GroupObject::GetLocked ( );
__declspec(implementation_key(10030)) void GroupObject::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10031)) _bstr_t GroupObject::GetName ( );
__declspec(implementation_key(10032)) void GroupObject::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(10033)) _bstr_t GroupObject::GetOnAction ( );
__declspec(implementation_key(10034)) void GroupObject::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10035)) _variant_t GroupObject::GetPlacement ( );
__declspec(implementation_key(10036)) void GroupObject::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10037)) VARIANT_BOOL GroupObject::GetPrintObject ( );
__declspec(implementation_key(10038)) void GroupObject::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10039)) _variant_t GroupObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(10040)) _variant_t GroupObject::SendToBack ( );
__declspec(implementation_key(10041)) double GroupObject::GetTop ( );
__declspec(implementation_key(10042)) void GroupObject::PutTop ( double _arg1 );
__declspec(implementation_key(10043)) RangePtr GroupObject::GetTopLeftCell ( );
__declspec(implementation_key(10044)) VARIANT_BOOL GroupObject::GetVisible ( );
__declspec(implementation_key(10045)) void GroupObject::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10046)) double GroupObject::GetWidth ( );
__declspec(implementation_key(10047)) void GroupObject::PutWidth ( double _arg1 );
__declspec(implementation_key(10048)) long GroupObject::GetZOrder ( );
__declspec(implementation_key(10049)) ShapeRangePtr GroupObject::GetShapeRange ( );
__declspec(implementation_key(10050)) VARIANT_BOOL GroupObject::GetAddIndent ( );
__declspec(implementation_key(10051)) void GroupObject::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10052)) _variant_t GroupObject::GetArrowHeadLength ( );
__declspec(implementation_key(10053)) void GroupObject::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(10054)) _variant_t GroupObject::GetArrowHeadStyle ( );
__declspec(implementation_key(10055)) void GroupObject::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(10056)) _variant_t GroupObject::GetArrowHeadWidth ( );
__declspec(implementation_key(10057)) void GroupObject::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(10058)) VARIANT_BOOL GroupObject::GetAutoSize ( );
__declspec(implementation_key(10059)) void GroupObject::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10060)) BorderPtr GroupObject::GetBorder ( );
__declspec(implementation_key(10061)) _variant_t GroupObject::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(10062)) long GroupObject::Get_Default ( );
__declspec(implementation_key(10063)) void GroupObject::Put_Default ( long _arg1 );
__declspec(implementation_key(10064)) FontPtr GroupObject::GetFont ( );
__declspec(implementation_key(10065)) _variant_t GroupObject::GetHorizontalAlignment ( );
__declspec(implementation_key(10066)) void GroupObject::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10067)) InteriorPtr GroupObject::GetInterior ( );
__declspec(implementation_key(10068)) _variant_t GroupObject::GetOrientation ( );
__declspec(implementation_key(10069)) void GroupObject::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(10070)) VARIANT_BOOL GroupObject::GetRoundedCorners ( );
__declspec(implementation_key(10071)) void GroupObject::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10072)) VARIANT_BOOL GroupObject::GetShadow ( );
__declspec(implementation_key(10073)) void GroupObject::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10074)) IDispatchPtr GroupObject::Ungroup ( );
__declspec(implementation_key(10075)) _variant_t GroupObject::GetVerticalAlignment ( );
__declspec(implementation_key(10076)) void GroupObject::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10077)) long GroupObject::GetReadingOrder ( );
__declspec(implementation_key(10078)) void GroupObject::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(10079)) _ApplicationPtr GroupObjects::GetApplication ( );
__declspec(implementation_key(10080)) enum XlCreator GroupObjects::GetCreator ( );
__declspec(implementation_key(10081)) IDispatchPtr GroupObjects::GetParent ( );
__declspec(implementation_key(10082)) _variant_t GroupObjects::BringToFront ( );
__declspec(implementation_key(10083)) _variant_t GroupObjects::Copy ( );
__declspec(implementation_key(10084)) _variant_t GroupObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10085)) _variant_t GroupObjects::Cut ( );
__declspec(implementation_key(10086)) _variant_t GroupObjects::Delete ( );
__declspec(implementation_key(10087)) IDispatchPtr GroupObjects::Duplicate ( );
__declspec(implementation_key(10088)) VARIANT_BOOL GroupObjects::GetEnabled ( );
__declspec(implementation_key(10089)) void GroupObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10090)) double GroupObjects::GetHeight ( );
__declspec(implementation_key(10091)) void GroupObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(10092)) double GroupObjects::GetLeft ( );
__declspec(implementation_key(10093)) void GroupObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(10094)) VARIANT_BOOL GroupObjects::GetLocked ( );
__declspec(implementation_key(10095)) void GroupObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10096)) _bstr_t GroupObjects::GetOnAction ( );
__declspec(implementation_key(10097)) void GroupObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10098)) _variant_t GroupObjects::GetPlacement ( );
__declspec(implementation_key(10099)) void GroupObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10100)) VARIANT_BOOL GroupObjects::GetPrintObject ( );
__declspec(implementation_key(10101)) void GroupObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10102)) _variant_t GroupObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(10103)) _variant_t GroupObjects::SendToBack ( );
__declspec(implementation_key(10104)) double GroupObjects::GetTop ( );
__declspec(implementation_key(10105)) void GroupObjects::PutTop ( double _arg1 );
__declspec(implementation_key(10106)) VARIANT_BOOL GroupObjects::GetVisible ( );
__declspec(implementation_key(10107)) void GroupObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10108)) double GroupObjects::GetWidth ( );
__declspec(implementation_key(10109)) void GroupObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(10110)) long GroupObjects::GetZOrder ( );
__declspec(implementation_key(10111)) ShapeRangePtr GroupObjects::GetShapeRange ( );
__declspec(implementation_key(10112)) VARIANT_BOOL GroupObjects::GetAddIndent ( );
__declspec(implementation_key(10113)) void GroupObjects::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10114)) _variant_t GroupObjects::GetArrowHeadLength ( );
__declspec(implementation_key(10115)) void GroupObjects::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(10116)) _variant_t GroupObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(10117)) void GroupObjects::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(10118)) _variant_t GroupObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(10119)) void GroupObjects::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(10120)) VARIANT_BOOL GroupObjects::GetAutoSize ( );
__declspec(implementation_key(10121)) void GroupObjects::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10122)) BorderPtr GroupObjects::GetBorder ( );
__declspec(implementation_key(10123)) _variant_t GroupObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(10124)) long GroupObjects::Get_Default ( );
__declspec(implementation_key(10125)) void GroupObjects::Put_Default ( long _arg1 );
__declspec(implementation_key(10126)) FontPtr GroupObjects::GetFont ( );
__declspec(implementation_key(10127)) _variant_t GroupObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(10128)) void GroupObjects::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10129)) InteriorPtr GroupObjects::GetInterior ( );
__declspec(implementation_key(10130)) _variant_t GroupObjects::GetOrientation ( );
__declspec(implementation_key(10131)) void GroupObjects::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(10132)) VARIANT_BOOL GroupObjects::GetRoundedCorners ( );
__declspec(implementation_key(10133)) void GroupObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10134)) VARIANT_BOOL GroupObjects::GetShadow ( );
__declspec(implementation_key(10135)) void GroupObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10136)) IDispatchPtr GroupObjects::Ungroup ( );
__declspec(implementation_key(10137)) _variant_t GroupObjects::GetVerticalAlignment ( );
__declspec(implementation_key(10138)) void GroupObjects::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10139)) long GroupObjects::GetReadingOrder ( );
__declspec(implementation_key(10140)) void GroupObjects::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(10141)) long GroupObjects::GetCount ( );
__declspec(implementation_key(10142)) GroupObjectPtr GroupObjects::Group ( );
__declspec(implementation_key(10143)) IDispatchPtr GroupObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(10144)) IUnknownPtr GroupObjects::_NewEnum ( );
__declspec(implementation_key(10145)) _ApplicationPtr Line::GetApplication ( );
__declspec(implementation_key(10146)) enum XlCreator Line::GetCreator ( );
__declspec(implementation_key(10147)) IDispatchPtr Line::GetParent ( );
__declspec(implementation_key(10148)) RangePtr Line::GetBottomRightCell ( );
__declspec(implementation_key(10149)) _variant_t Line::BringToFront ( );
__declspec(implementation_key(10150)) _variant_t Line::Copy ( );
__declspec(implementation_key(10151)) _variant_t Line::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10152)) _variant_t Line::Cut ( );
__declspec(implementation_key(10153)) _variant_t Line::Delete ( );
__declspec(implementation_key(10154)) IDispatchPtr Line::Duplicate ( );
__declspec(implementation_key(10155)) VARIANT_BOOL Line::GetEnabled ( );
__declspec(implementation_key(10156)) void Line::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10157)) double Line::GetHeight ( );
__declspec(implementation_key(10158)) void Line::PutHeight ( double _arg1 );
__declspec(implementation_key(10159)) long Line::GetIndex ( );
__declspec(implementation_key(10160)) double Line::GetLeft ( );
__declspec(implementation_key(10161)) void Line::PutLeft ( double _arg1 );
__declspec(implementation_key(10162)) VARIANT_BOOL Line::GetLocked ( );
__declspec(implementation_key(10163)) void Line::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10164)) _bstr_t Line::GetName ( );
__declspec(implementation_key(10165)) void Line::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(10166)) _bstr_t Line::GetOnAction ( );
__declspec(implementation_key(10167)) void Line::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10168)) _variant_t Line::GetPlacement ( );
__declspec(implementation_key(10169)) void Line::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10170)) VARIANT_BOOL Line::GetPrintObject ( );
__declspec(implementation_key(10171)) void Line::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10172)) _variant_t Line::Select ( const _variant_t & Replace );
__declspec(implementation_key(10173)) _variant_t Line::SendToBack ( );
__declspec(implementation_key(10174)) double Line::GetTop ( );
__declspec(implementation_key(10175)) void Line::PutTop ( double _arg1 );
__declspec(implementation_key(10176)) RangePtr Line::GetTopLeftCell ( );
__declspec(implementation_key(10177)) VARIANT_BOOL Line::GetVisible ( );
__declspec(implementation_key(10178)) void Line::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10179)) double Line::GetWidth ( );
__declspec(implementation_key(10180)) void Line::PutWidth ( double _arg1 );
__declspec(implementation_key(10181)) long Line::GetZOrder ( );
__declspec(implementation_key(10182)) ShapeRangePtr Line::GetShapeRange ( );
__declspec(implementation_key(10183)) _variant_t Line::GetArrowHeadLength ( );
__declspec(implementation_key(10184)) void Line::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(10185)) _variant_t Line::GetArrowHeadStyle ( );
__declspec(implementation_key(10186)) void Line::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(10187)) _variant_t Line::GetArrowHeadWidth ( );
__declspec(implementation_key(10188)) void Line::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(10189)) BorderPtr Line::GetBorder ( );
__declspec(implementation_key(10190)) _ApplicationPtr Lines::GetApplication ( );
__declspec(implementation_key(10191)) enum XlCreator Lines::GetCreator ( );
__declspec(implementation_key(10192)) IDispatchPtr Lines::GetParent ( );
__declspec(implementation_key(10193)) _variant_t Lines::BringToFront ( );
__declspec(implementation_key(10194)) _variant_t Lines::Copy ( );
__declspec(implementation_key(10195)) _variant_t Lines::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10196)) _variant_t Lines::Cut ( );
__declspec(implementation_key(10197)) _variant_t Lines::Delete ( );
__declspec(implementation_key(10198)) IDispatchPtr Lines::Duplicate ( );
__declspec(implementation_key(10199)) VARIANT_BOOL Lines::GetEnabled ( );
__declspec(implementation_key(10200)) void Lines::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10201)) double Lines::GetHeight ( );
__declspec(implementation_key(10202)) void Lines::PutHeight ( double _arg1 );
__declspec(implementation_key(10203)) double Lines::GetLeft ( );
__declspec(implementation_key(10204)) void Lines::PutLeft ( double _arg1 );
__declspec(implementation_key(10205)) VARIANT_BOOL Lines::GetLocked ( );
__declspec(implementation_key(10206)) void Lines::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10207)) _bstr_t Lines::GetOnAction ( );
__declspec(implementation_key(10208)) void Lines::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10209)) _variant_t Lines::GetPlacement ( );
__declspec(implementation_key(10210)) void Lines::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10211)) VARIANT_BOOL Lines::GetPrintObject ( );
__declspec(implementation_key(10212)) void Lines::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10213)) _variant_t Lines::Select ( const _variant_t & Replace );
__declspec(implementation_key(10214)) _variant_t Lines::SendToBack ( );
__declspec(implementation_key(10215)) double Lines::GetTop ( );
__declspec(implementation_key(10216)) void Lines::PutTop ( double _arg1 );
__declspec(implementation_key(10217)) VARIANT_BOOL Lines::GetVisible ( );
__declspec(implementation_key(10218)) void Lines::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10219)) double Lines::GetWidth ( );
__declspec(implementation_key(10220)) void Lines::PutWidth ( double _arg1 );
__declspec(implementation_key(10221)) long Lines::GetZOrder ( );
__declspec(implementation_key(10222)) ShapeRangePtr Lines::GetShapeRange ( );
__declspec(implementation_key(10223)) _variant_t Lines::GetArrowHeadLength ( );
__declspec(implementation_key(10224)) void Lines::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(10225)) _variant_t Lines::GetArrowHeadStyle ( );
__declspec(implementation_key(10226)) void Lines::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(10227)) _variant_t Lines::GetArrowHeadWidth ( );
__declspec(implementation_key(10228)) void Lines::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(10229)) BorderPtr Lines::GetBorder ( );
__declspec(implementation_key(10230)) LinePtr Lines::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(10231)) long Lines::GetCount ( );
__declspec(implementation_key(10232)) GroupObjectPtr Lines::Group ( );
__declspec(implementation_key(10233)) IDispatchPtr Lines::Item ( const _variant_t & Index );
__declspec(implementation_key(10234)) IUnknownPtr Lines::_NewEnum ( );
__declspec(implementation_key(10235)) _ApplicationPtr Rectangle::GetApplication ( );
__declspec(implementation_key(10236)) enum XlCreator Rectangle::GetCreator ( );
__declspec(implementation_key(10237)) IDispatchPtr Rectangle::GetParent ( );
__declspec(implementation_key(10238)) RangePtr Rectangle::GetBottomRightCell ( );
__declspec(implementation_key(10239)) _variant_t Rectangle::BringToFront ( );
__declspec(implementation_key(10240)) _variant_t Rectangle::Copy ( );
__declspec(implementation_key(10241)) _variant_t Rectangle::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10242)) _variant_t Rectangle::Cut ( );
__declspec(implementation_key(10243)) _variant_t Rectangle::Delete ( );
__declspec(implementation_key(10244)) IDispatchPtr Rectangle::Duplicate ( );
__declspec(implementation_key(10245)) VARIANT_BOOL Rectangle::GetEnabled ( );
__declspec(implementation_key(10246)) void Rectangle::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10247)) double Rectangle::GetHeight ( );
__declspec(implementation_key(10248)) void Rectangle::PutHeight ( double _arg1 );
__declspec(implementation_key(10249)) long Rectangle::GetIndex ( );
__declspec(implementation_key(10250)) double Rectangle::GetLeft ( );
__declspec(implementation_key(10251)) void Rectangle::PutLeft ( double _arg1 );
__declspec(implementation_key(10252)) VARIANT_BOOL Rectangle::GetLocked ( );
__declspec(implementation_key(10253)) void Rectangle::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10254)) _bstr_t Rectangle::GetName ( );
__declspec(implementation_key(10255)) void Rectangle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(10256)) _bstr_t Rectangle::GetOnAction ( );
__declspec(implementation_key(10257)) void Rectangle::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10258)) _variant_t Rectangle::GetPlacement ( );
__declspec(implementation_key(10259)) void Rectangle::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10260)) VARIANT_BOOL Rectangle::GetPrintObject ( );
__declspec(implementation_key(10261)) void Rectangle::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10262)) _variant_t Rectangle::Select ( const _variant_t & Replace );
__declspec(implementation_key(10263)) _variant_t Rectangle::SendToBack ( );
__declspec(implementation_key(10264)) double Rectangle::GetTop ( );
__declspec(implementation_key(10265)) void Rectangle::PutTop ( double _arg1 );
__declspec(implementation_key(10266)) RangePtr Rectangle::GetTopLeftCell ( );
__declspec(implementation_key(10267)) VARIANT_BOOL Rectangle::GetVisible ( );
__declspec(implementation_key(10268)) void Rectangle::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10269)) double Rectangle::GetWidth ( );
__declspec(implementation_key(10270)) void Rectangle::PutWidth ( double _arg1 );
__declspec(implementation_key(10271)) long Rectangle::GetZOrder ( );
__declspec(implementation_key(10272)) ShapeRangePtr Rectangle::GetShapeRange ( );
__declspec(implementation_key(10273)) VARIANT_BOOL Rectangle::GetAddIndent ( );
__declspec(implementation_key(10274)) void Rectangle::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10275)) _variant_t Rectangle::GetAutoScaleFont ( );
__declspec(implementation_key(10276)) void Rectangle::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(10277)) VARIANT_BOOL Rectangle::GetAutoSize ( );
__declspec(implementation_key(10278)) void Rectangle::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10279)) _bstr_t Rectangle::GetCaption ( );
__declspec(implementation_key(10280)) void Rectangle::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(10281)) CharactersPtr Rectangle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10282)) _variant_t Rectangle::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(10283)) FontPtr Rectangle::GetFont ( );
__declspec(implementation_key(10284)) _bstr_t Rectangle::GetFormula ( );
__declspec(implementation_key(10285)) void Rectangle::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(10286)) _variant_t Rectangle::GetHorizontalAlignment ( );
__declspec(implementation_key(10287)) void Rectangle::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10288)) VARIANT_BOOL Rectangle::GetLockedText ( );
__declspec(implementation_key(10289)) void Rectangle::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10290)) _variant_t Rectangle::GetOrientation ( );
__declspec(implementation_key(10291)) void Rectangle::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(10292)) _bstr_t Rectangle::GetText ( );
__declspec(implementation_key(10293)) void Rectangle::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(10294)) _variant_t Rectangle::GetVerticalAlignment ( );
__declspec(implementation_key(10295)) void Rectangle::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10296)) long Rectangle::GetReadingOrder ( );
__declspec(implementation_key(10297)) void Rectangle::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(10298)) BorderPtr Rectangle::GetBorder ( );
__declspec(implementation_key(10299)) InteriorPtr Rectangle::GetInterior ( );
__declspec(implementation_key(10300)) VARIANT_BOOL Rectangle::GetShadow ( );
__declspec(implementation_key(10301)) void Rectangle::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10302)) VARIANT_BOOL Rectangle::GetRoundedCorners ( );
__declspec(implementation_key(10303)) void Rectangle::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10304)) _ApplicationPtr Rectangles::GetApplication ( );
__declspec(implementation_key(10305)) enum XlCreator Rectangles::GetCreator ( );
__declspec(implementation_key(10306)) IDispatchPtr Rectangles::GetParent ( );
__declspec(implementation_key(10307)) _variant_t Rectangles::BringToFront ( );
__declspec(implementation_key(10308)) _variant_t Rectangles::Copy ( );
__declspec(implementation_key(10309)) _variant_t Rectangles::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10310)) _variant_t Rectangles::Cut ( );
__declspec(implementation_key(10311)) _variant_t Rectangles::Delete ( );
__declspec(implementation_key(10312)) IDispatchPtr Rectangles::Duplicate ( );
__declspec(implementation_key(10313)) VARIANT_BOOL Rectangles::GetEnabled ( );
__declspec(implementation_key(10314)) void Rectangles::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10315)) double Rectangles::GetHeight ( );
__declspec(implementation_key(10316)) void Rectangles::PutHeight ( double _arg1 );
__declspec(implementation_key(10317)) double Rectangles::GetLeft ( );
__declspec(implementation_key(10318)) void Rectangles::PutLeft ( double _arg1 );
__declspec(implementation_key(10319)) VARIANT_BOOL Rectangles::GetLocked ( );
__declspec(implementation_key(10320)) void Rectangles::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10321)) _bstr_t Rectangles::GetOnAction ( );
__declspec(implementation_key(10322)) void Rectangles::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10323)) _variant_t Rectangles::GetPlacement ( );
__declspec(implementation_key(10324)) void Rectangles::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10325)) VARIANT_BOOL Rectangles::GetPrintObject ( );
__declspec(implementation_key(10326)) void Rectangles::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10327)) _variant_t Rectangles::Select ( const _variant_t & Replace );
__declspec(implementation_key(10328)) _variant_t Rectangles::SendToBack ( );
__declspec(implementation_key(10329)) double Rectangles::GetTop ( );
__declspec(implementation_key(10330)) void Rectangles::PutTop ( double _arg1 );
__declspec(implementation_key(10331)) VARIANT_BOOL Rectangles::GetVisible ( );
__declspec(implementation_key(10332)) void Rectangles::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10333)) double Rectangles::GetWidth ( );
__declspec(implementation_key(10334)) void Rectangles::PutWidth ( double _arg1 );
__declspec(implementation_key(10335)) long Rectangles::GetZOrder ( );
__declspec(implementation_key(10336)) ShapeRangePtr Rectangles::GetShapeRange ( );
__declspec(implementation_key(10337)) VARIANT_BOOL Rectangles::GetAddIndent ( );
__declspec(implementation_key(10338)) void Rectangles::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10339)) _variant_t Rectangles::GetAutoScaleFont ( );
__declspec(implementation_key(10340)) void Rectangles::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(10341)) VARIANT_BOOL Rectangles::GetAutoSize ( );
__declspec(implementation_key(10342)) void Rectangles::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10343)) _bstr_t Rectangles::GetCaption ( );
__declspec(implementation_key(10344)) void Rectangles::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(10345)) CharactersPtr Rectangles::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10346)) _variant_t Rectangles::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(10347)) FontPtr Rectangles::GetFont ( );
__declspec(implementation_key(10348)) _bstr_t Rectangles::GetFormula ( );
__declspec(implementation_key(10349)) void Rectangles::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(10350)) _variant_t Rectangles::GetHorizontalAlignment ( );
__declspec(implementation_key(10351)) void Rectangles::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10352)) VARIANT_BOOL Rectangles::GetLockedText ( );
__declspec(implementation_key(10353)) void Rectangles::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10354)) _variant_t Rectangles::GetOrientation ( );
__declspec(implementation_key(10355)) void Rectangles::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(10356)) _bstr_t Rectangles::GetText ( );
__declspec(implementation_key(10357)) void Rectangles::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(10358)) _variant_t Rectangles::GetVerticalAlignment ( );
__declspec(implementation_key(10359)) void Rectangles::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10360)) long Rectangles::GetReadingOrder ( );
__declspec(implementation_key(10361)) void Rectangles::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(10362)) BorderPtr Rectangles::GetBorder ( );
__declspec(implementation_key(10363)) InteriorPtr Rectangles::GetInterior ( );
__declspec(implementation_key(10364)) VARIANT_BOOL Rectangles::GetShadow ( );
__declspec(implementation_key(10365)) void Rectangles::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10366)) VARIANT_BOOL Rectangles::GetRoundedCorners ( );
__declspec(implementation_key(10367)) void Rectangles::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10368)) RectanglePtr Rectangles::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(10369)) long Rectangles::GetCount ( );
__declspec(implementation_key(10370)) GroupObjectPtr Rectangles::Group ( );
__declspec(implementation_key(10371)) IDispatchPtr Rectangles::Item ( const _variant_t & Index );
__declspec(implementation_key(10372)) IUnknownPtr Rectangles::_NewEnum ( );
__declspec(implementation_key(10373)) _ApplicationPtr Oval::GetApplication ( );
__declspec(implementation_key(10374)) enum XlCreator Oval::GetCreator ( );
__declspec(implementation_key(10375)) IDispatchPtr Oval::GetParent ( );
__declspec(implementation_key(10376)) RangePtr Oval::GetBottomRightCell ( );
__declspec(implementation_key(10377)) _variant_t Oval::BringToFront ( );
__declspec(implementation_key(10378)) _variant_t Oval::Copy ( );
__declspec(implementation_key(10379)) _variant_t Oval::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10380)) _variant_t Oval::Cut ( );
__declspec(implementation_key(10381)) _variant_t Oval::Delete ( );
__declspec(implementation_key(10382)) IDispatchPtr Oval::Duplicate ( );
__declspec(implementation_key(10383)) VARIANT_BOOL Oval::GetEnabled ( );
__declspec(implementation_key(10384)) void Oval::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10385)) double Oval::GetHeight ( );
__declspec(implementation_key(10386)) void Oval::PutHeight ( double _arg1 );
__declspec(implementation_key(10387)) long Oval::GetIndex ( );
__declspec(implementation_key(10388)) double Oval::GetLeft ( );
__declspec(implementation_key(10389)) void Oval::PutLeft ( double _arg1 );
__declspec(implementation_key(10390)) VARIANT_BOOL Oval::GetLocked ( );
__declspec(implementation_key(10391)) void Oval::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10392)) _bstr_t Oval::GetName ( );
__declspec(implementation_key(10393)) void Oval::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(10394)) _bstr_t Oval::GetOnAction ( );
__declspec(implementation_key(10395)) void Oval::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10396)) _variant_t Oval::GetPlacement ( );
__declspec(implementation_key(10397)) void Oval::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10398)) VARIANT_BOOL Oval::GetPrintObject ( );
__declspec(implementation_key(10399)) void Oval::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10400)) _variant_t Oval::Select ( const _variant_t & Replace );
__declspec(implementation_key(10401)) _variant_t Oval::SendToBack ( );
__declspec(implementation_key(10402)) double Oval::GetTop ( );
__declspec(implementation_key(10403)) void Oval::PutTop ( double _arg1 );
__declspec(implementation_key(10404)) RangePtr Oval::GetTopLeftCell ( );
__declspec(implementation_key(10405)) VARIANT_BOOL Oval::GetVisible ( );
__declspec(implementation_key(10406)) void Oval::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10407)) double Oval::GetWidth ( );
__declspec(implementation_key(10408)) void Oval::PutWidth ( double _arg1 );
__declspec(implementation_key(10409)) long Oval::GetZOrder ( );
__declspec(implementation_key(10410)) ShapeRangePtr Oval::GetShapeRange ( );
__declspec(implementation_key(10411)) VARIANT_BOOL Oval::GetAddIndent ( );
__declspec(implementation_key(10412)) void Oval::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10413)) _variant_t Oval::GetAutoScaleFont ( );
__declspec(implementation_key(10414)) void Oval::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(10415)) VARIANT_BOOL Oval::GetAutoSize ( );
__declspec(implementation_key(10416)) void Oval::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10417)) _bstr_t Oval::GetCaption ( );
__declspec(implementation_key(10418)) void Oval::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(10419)) CharactersPtr Oval::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10420)) _variant_t Oval::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(10421)) FontPtr Oval::GetFont ( );
__declspec(implementation_key(10422)) _bstr_t Oval::GetFormula ( );
__declspec(implementation_key(10423)) void Oval::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(10424)) _variant_t Oval::GetHorizontalAlignment ( );
__declspec(implementation_key(10425)) void Oval::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10426)) VARIANT_BOOL Oval::GetLockedText ( );
__declspec(implementation_key(10427)) void Oval::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10428)) _variant_t Oval::GetOrientation ( );
__declspec(implementation_key(10429)) void Oval::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(10430)) _bstr_t Oval::GetText ( );
__declspec(implementation_key(10431)) void Oval::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(10432)) _variant_t Oval::GetVerticalAlignment ( );
__declspec(implementation_key(10433)) void Oval::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10434)) long Oval::GetReadingOrder ( );
__declspec(implementation_key(10435)) void Oval::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(10436)) BorderPtr Oval::GetBorder ( );
__declspec(implementation_key(10437)) InteriorPtr Oval::GetInterior ( );
__declspec(implementation_key(10438)) VARIANT_BOOL Oval::GetShadow ( );
__declspec(implementation_key(10439)) void Oval::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10440)) _ApplicationPtr Ovals::GetApplication ( );
__declspec(implementation_key(10441)) enum XlCreator Ovals::GetCreator ( );
__declspec(implementation_key(10442)) IDispatchPtr Ovals::GetParent ( );
__declspec(implementation_key(10443)) _variant_t Ovals::BringToFront ( );
__declspec(implementation_key(10444)) _variant_t Ovals::Copy ( );
__declspec(implementation_key(10445)) _variant_t Ovals::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10446)) _variant_t Ovals::Cut ( );
__declspec(implementation_key(10447)) _variant_t Ovals::Delete ( );
__declspec(implementation_key(10448)) IDispatchPtr Ovals::Duplicate ( );
__declspec(implementation_key(10449)) VARIANT_BOOL Ovals::GetEnabled ( );
__declspec(implementation_key(10450)) void Ovals::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10451)) double Ovals::GetHeight ( );
__declspec(implementation_key(10452)) void Ovals::PutHeight ( double _arg1 );
__declspec(implementation_key(10453)) double Ovals::GetLeft ( );
__declspec(implementation_key(10454)) void Ovals::PutLeft ( double _arg1 );
__declspec(implementation_key(10455)) VARIANT_BOOL Ovals::GetLocked ( );
__declspec(implementation_key(10456)) void Ovals::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10457)) _bstr_t Ovals::GetOnAction ( );
__declspec(implementation_key(10458)) void Ovals::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10459)) _variant_t Ovals::GetPlacement ( );
__declspec(implementation_key(10460)) void Ovals::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10461)) VARIANT_BOOL Ovals::GetPrintObject ( );
__declspec(implementation_key(10462)) void Ovals::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10463)) _variant_t Ovals::Select ( const _variant_t & Replace );
__declspec(implementation_key(10464)) _variant_t Ovals::SendToBack ( );
__declspec(implementation_key(10465)) double Ovals::GetTop ( );
__declspec(implementation_key(10466)) void Ovals::PutTop ( double _arg1 );
__declspec(implementation_key(10467)) VARIANT_BOOL Ovals::GetVisible ( );
__declspec(implementation_key(10468)) void Ovals::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10469)) double Ovals::GetWidth ( );
__declspec(implementation_key(10470)) void Ovals::PutWidth ( double _arg1 );
__declspec(implementation_key(10471)) long Ovals::GetZOrder ( );
__declspec(implementation_key(10472)) ShapeRangePtr Ovals::GetShapeRange ( );
__declspec(implementation_key(10473)) VARIANT_BOOL Ovals::GetAddIndent ( );
__declspec(implementation_key(10474)) void Ovals::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10475)) _variant_t Ovals::GetAutoScaleFont ( );
__declspec(implementation_key(10476)) void Ovals::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(10477)) VARIANT_BOOL Ovals::GetAutoSize ( );
__declspec(implementation_key(10478)) void Ovals::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10479)) _bstr_t Ovals::GetCaption ( );
__declspec(implementation_key(10480)) void Ovals::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(10481)) CharactersPtr Ovals::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10482)) _variant_t Ovals::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(10483)) FontPtr Ovals::GetFont ( );
__declspec(implementation_key(10484)) _bstr_t Ovals::GetFormula ( );
__declspec(implementation_key(10485)) void Ovals::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(10486)) _variant_t Ovals::GetHorizontalAlignment ( );
__declspec(implementation_key(10487)) void Ovals::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10488)) VARIANT_BOOL Ovals::GetLockedText ( );
__declspec(implementation_key(10489)) void Ovals::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10490)) _variant_t Ovals::GetOrientation ( );
__declspec(implementation_key(10491)) void Ovals::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(10492)) _bstr_t Ovals::GetText ( );
__declspec(implementation_key(10493)) void Ovals::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(10494)) _variant_t Ovals::GetVerticalAlignment ( );
__declspec(implementation_key(10495)) void Ovals::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10496)) long Ovals::GetReadingOrder ( );
__declspec(implementation_key(10497)) void Ovals::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(10498)) BorderPtr Ovals::GetBorder ( );
__declspec(implementation_key(10499)) InteriorPtr Ovals::GetInterior ( );
__declspec(implementation_key(10500)) VARIANT_BOOL Ovals::GetShadow ( );
__declspec(implementation_key(10501)) void Ovals::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10502)) OvalPtr Ovals::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(10503)) long Ovals::GetCount ( );
__declspec(implementation_key(10504)) GroupObjectPtr Ovals::Group ( );
__declspec(implementation_key(10505)) IDispatchPtr Ovals::Item ( const _variant_t & Index );
__declspec(implementation_key(10506)) IUnknownPtr Ovals::_NewEnum ( );
__declspec(implementation_key(10507)) _ApplicationPtr Arc::GetApplication ( );
__declspec(implementation_key(10508)) enum XlCreator Arc::GetCreator ( );
__declspec(implementation_key(10509)) IDispatchPtr Arc::GetParent ( );
__declspec(implementation_key(10510)) RangePtr Arc::GetBottomRightCell ( );
__declspec(implementation_key(10511)) _variant_t Arc::BringToFront ( );
__declspec(implementation_key(10512)) _variant_t Arc::Copy ( );
__declspec(implementation_key(10513)) _variant_t Arc::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10514)) _variant_t Arc::Cut ( );
__declspec(implementation_key(10515)) _variant_t Arc::Delete ( );
__declspec(implementation_key(10516)) IDispatchPtr Arc::Duplicate ( );
__declspec(implementation_key(10517)) VARIANT_BOOL Arc::GetEnabled ( );
__declspec(implementation_key(10518)) void Arc::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10519)) double Arc::GetHeight ( );
__declspec(implementation_key(10520)) void Arc::PutHeight ( double _arg1 );
__declspec(implementation_key(10521)) long Arc::GetIndex ( );
__declspec(implementation_key(10522)) double Arc::GetLeft ( );
__declspec(implementation_key(10523)) void Arc::PutLeft ( double _arg1 );
__declspec(implementation_key(10524)) VARIANT_BOOL Arc::GetLocked ( );
__declspec(implementation_key(10525)) void Arc::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10526)) _bstr_t Arc::GetName ( );
__declspec(implementation_key(10527)) void Arc::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(10528)) _bstr_t Arc::GetOnAction ( );
__declspec(implementation_key(10529)) void Arc::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10530)) _variant_t Arc::GetPlacement ( );
__declspec(implementation_key(10531)) void Arc::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10532)) VARIANT_BOOL Arc::GetPrintObject ( );
__declspec(implementation_key(10533)) void Arc::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10534)) _variant_t Arc::Select ( const _variant_t & Replace );
__declspec(implementation_key(10535)) _variant_t Arc::SendToBack ( );
__declspec(implementation_key(10536)) double Arc::GetTop ( );
__declspec(implementation_key(10537)) void Arc::PutTop ( double _arg1 );
__declspec(implementation_key(10538)) RangePtr Arc::GetTopLeftCell ( );
__declspec(implementation_key(10539)) VARIANT_BOOL Arc::GetVisible ( );
__declspec(implementation_key(10540)) void Arc::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10541)) double Arc::GetWidth ( );
__declspec(implementation_key(10542)) void Arc::PutWidth ( double _arg1 );
__declspec(implementation_key(10543)) long Arc::GetZOrder ( );
__declspec(implementation_key(10544)) ShapeRangePtr Arc::GetShapeRange ( );
__declspec(implementation_key(10545)) VARIANT_BOOL Arc::GetAddIndent ( );
__declspec(implementation_key(10546)) void Arc::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10547)) _variant_t Arc::GetAutoScaleFont ( );
__declspec(implementation_key(10548)) void Arc::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(10549)) VARIANT_BOOL Arc::GetAutoSize ( );
__declspec(implementation_key(10550)) void Arc::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10551)) _bstr_t Arc::GetCaption ( );
__declspec(implementation_key(10552)) void Arc::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(10553)) CharactersPtr Arc::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10554)) _variant_t Arc::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(10555)) FontPtr Arc::GetFont ( );
__declspec(implementation_key(10556)) _bstr_t Arc::GetFormula ( );
__declspec(implementation_key(10557)) void Arc::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(10558)) _variant_t Arc::GetHorizontalAlignment ( );
__declspec(implementation_key(10559)) void Arc::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10560)) VARIANT_BOOL Arc::GetLockedText ( );
__declspec(implementation_key(10561)) void Arc::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10562)) _variant_t Arc::GetOrientation ( );
__declspec(implementation_key(10563)) void Arc::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(10564)) _bstr_t Arc::GetText ( );
__declspec(implementation_key(10565)) void Arc::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(10566)) _variant_t Arc::GetVerticalAlignment ( );
__declspec(implementation_key(10567)) void Arc::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10568)) long Arc::GetReadingOrder ( );
__declspec(implementation_key(10569)) void Arc::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(10570)) BorderPtr Arc::GetBorder ( );
__declspec(implementation_key(10571)) InteriorPtr Arc::GetInterior ( );
__declspec(implementation_key(10572)) _ApplicationPtr Arcs::GetApplication ( );
__declspec(implementation_key(10573)) enum XlCreator Arcs::GetCreator ( );
__declspec(implementation_key(10574)) IDispatchPtr Arcs::GetParent ( );
__declspec(implementation_key(10575)) _variant_t Arcs::BringToFront ( );
__declspec(implementation_key(10576)) _variant_t Arcs::Copy ( );
__declspec(implementation_key(10577)) _variant_t Arcs::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10578)) _variant_t Arcs::Cut ( );
__declspec(implementation_key(10579)) _variant_t Arcs::Delete ( );
__declspec(implementation_key(10580)) IDispatchPtr Arcs::Duplicate ( );
__declspec(implementation_key(10581)) VARIANT_BOOL Arcs::GetEnabled ( );
__declspec(implementation_key(10582)) void Arcs::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10583)) double Arcs::GetHeight ( );
__declspec(implementation_key(10584)) void Arcs::PutHeight ( double _arg1 );
__declspec(implementation_key(10585)) double Arcs::GetLeft ( );
__declspec(implementation_key(10586)) void Arcs::PutLeft ( double _arg1 );
__declspec(implementation_key(10587)) VARIANT_BOOL Arcs::GetLocked ( );
__declspec(implementation_key(10588)) void Arcs::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10589)) _bstr_t Arcs::GetOnAction ( );
__declspec(implementation_key(10590)) void Arcs::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10591)) _variant_t Arcs::GetPlacement ( );
__declspec(implementation_key(10592)) void Arcs::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10593)) VARIANT_BOOL Arcs::GetPrintObject ( );
__declspec(implementation_key(10594)) void Arcs::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10595)) _variant_t Arcs::Select ( const _variant_t & Replace );
__declspec(implementation_key(10596)) _variant_t Arcs::SendToBack ( );
__declspec(implementation_key(10597)) double Arcs::GetTop ( );
__declspec(implementation_key(10598)) void Arcs::PutTop ( double _arg1 );
__declspec(implementation_key(10599)) VARIANT_BOOL Arcs::GetVisible ( );
__declspec(implementation_key(10600)) void Arcs::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10601)) double Arcs::GetWidth ( );
__declspec(implementation_key(10602)) void Arcs::PutWidth ( double _arg1 );
__declspec(implementation_key(10603)) long Arcs::GetZOrder ( );
__declspec(implementation_key(10604)) ShapeRangePtr Arcs::GetShapeRange ( );
__declspec(implementation_key(10605)) VARIANT_BOOL Arcs::GetAddIndent ( );
__declspec(implementation_key(10606)) void Arcs::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10607)) _variant_t Arcs::GetAutoScaleFont ( );
__declspec(implementation_key(10608)) void Arcs::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(10609)) VARIANT_BOOL Arcs::GetAutoSize ( );
__declspec(implementation_key(10610)) void Arcs::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10611)) _bstr_t Arcs::GetCaption ( );
__declspec(implementation_key(10612)) void Arcs::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(10613)) CharactersPtr Arcs::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10614)) _variant_t Arcs::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(10615)) FontPtr Arcs::GetFont ( );
__declspec(implementation_key(10616)) _bstr_t Arcs::GetFormula ( );
__declspec(implementation_key(10617)) void Arcs::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(10618)) _variant_t Arcs::GetHorizontalAlignment ( );
__declspec(implementation_key(10619)) void Arcs::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10620)) VARIANT_BOOL Arcs::GetLockedText ( );
__declspec(implementation_key(10621)) void Arcs::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10622)) _variant_t Arcs::GetOrientation ( );
__declspec(implementation_key(10623)) void Arcs::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(10624)) _bstr_t Arcs::GetText ( );
__declspec(implementation_key(10625)) void Arcs::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(10626)) _variant_t Arcs::GetVerticalAlignment ( );
__declspec(implementation_key(10627)) void Arcs::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10628)) long Arcs::GetReadingOrder ( );
__declspec(implementation_key(10629)) void Arcs::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(10630)) BorderPtr Arcs::GetBorder ( );
__declspec(implementation_key(10631)) InteriorPtr Arcs::GetInterior ( );
__declspec(implementation_key(10632)) ArcPtr Arcs::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(10633)) long Arcs::GetCount ( );
__declspec(implementation_key(10634)) GroupObjectPtr Arcs::Group ( );
__declspec(implementation_key(10635)) IDispatchPtr Arcs::Item ( const _variant_t & Index );
__declspec(implementation_key(10636)) IUnknownPtr Arcs::_NewEnum ( );
__declspec(implementation_key(10637)) HRESULT OLEObjectEvents::GotFocus ( );
__declspec(implementation_key(10638)) HRESULT OLEObjectEvents::LostFocus ( );
__declspec(implementation_key(10639)) _ApplicationPtr _OLEObject::GetApplication ( );
__declspec(implementation_key(10640)) enum XlCreator _OLEObject::GetCreator ( );
__declspec(implementation_key(10641)) IDispatchPtr _OLEObject::GetParent ( );
__declspec(implementation_key(10642)) RangePtr _OLEObject::GetBottomRightCell ( );
__declspec(implementation_key(10643)) _variant_t _OLEObject::BringToFront ( );
__declspec(implementation_key(10644)) _variant_t _OLEObject::Copy ( );
__declspec(implementation_key(10645)) _variant_t _OLEObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10646)) _variant_t _OLEObject::Cut ( );
__declspec(implementation_key(10647)) _variant_t _OLEObject::Delete ( );
__declspec(implementation_key(10648)) IDispatchPtr _OLEObject::Duplicate ( );
__declspec(implementation_key(10649)) VARIANT_BOOL _OLEObject::GetEnabled ( );
__declspec(implementation_key(10650)) void _OLEObject::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10651)) double _OLEObject::GetHeight ( );
__declspec(implementation_key(10652)) void _OLEObject::PutHeight ( double _arg1 );
__declspec(implementation_key(10653)) long _OLEObject::GetIndex ( );
__declspec(implementation_key(10654)) double _OLEObject::GetLeft ( );
__declspec(implementation_key(10655)) void _OLEObject::PutLeft ( double _arg1 );
__declspec(implementation_key(10656)) VARIANT_BOOL _OLEObject::GetLocked ( );
__declspec(implementation_key(10657)) void _OLEObject::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10658)) _bstr_t _OLEObject::GetName ( );
__declspec(implementation_key(10659)) void _OLEObject::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(10660)) _bstr_t _OLEObject::GetOnAction ( );
__declspec(implementation_key(10661)) void _OLEObject::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10662)) _variant_t _OLEObject::GetPlacement ( );
__declspec(implementation_key(10663)) void _OLEObject::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10664)) VARIANT_BOOL _OLEObject::GetPrintObject ( );
__declspec(implementation_key(10665)) void _OLEObject::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10666)) _variant_t _OLEObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(10667)) _variant_t _OLEObject::SendToBack ( );
__declspec(implementation_key(10668)) double _OLEObject::GetTop ( );
__declspec(implementation_key(10669)) void _OLEObject::PutTop ( double _arg1 );
__declspec(implementation_key(10670)) RangePtr _OLEObject::GetTopLeftCell ( );
__declspec(implementation_key(10671)) VARIANT_BOOL _OLEObject::GetVisible ( );
__declspec(implementation_key(10672)) void _OLEObject::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10673)) double _OLEObject::GetWidth ( );
__declspec(implementation_key(10674)) void _OLEObject::PutWidth ( double _arg1 );
__declspec(implementation_key(10675)) long _OLEObject::GetZOrder ( );
__declspec(implementation_key(10676)) ShapeRangePtr _OLEObject::GetShapeRange ( );
__declspec(implementation_key(10677)) BorderPtr _OLEObject::GetBorder ( );
__declspec(implementation_key(10678)) InteriorPtr _OLEObject::GetInterior ( );
__declspec(implementation_key(10679)) VARIANT_BOOL _OLEObject::GetShadow ( );
__declspec(implementation_key(10680)) void _OLEObject::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10681)) _variant_t _OLEObject::Activate ( );
__declspec(implementation_key(10682)) VARIANT_BOOL _OLEObject::GetAutoLoad ( );
__declspec(implementation_key(10683)) void _OLEObject::PutAutoLoad ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10684)) VARIANT_BOOL _OLEObject::GetAutoUpdate ( );
__declspec(implementation_key(10685)) void _OLEObject::PutAutoUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10686)) IDispatchPtr _OLEObject::GetObject ( );
__declspec(implementation_key(10687)) _variant_t _OLEObject::GetOLEType ( );
__declspec(implementation_key(10688)) _bstr_t _OLEObject::GetSourceName ( );
__declspec(implementation_key(10689)) void _OLEObject::PutSourceName ( _bstr_t _arg1 );
__declspec(implementation_key(10690)) _variant_t _OLEObject::Update ( );
__declspec(implementation_key(10691)) _variant_t _OLEObject::Verb ( enum XlOLEVerb Verb );
__declspec(implementation_key(10692)) _bstr_t _OLEObject::GetLinkedCell ( );
__declspec(implementation_key(10693)) void _OLEObject::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(10694)) _bstr_t _OLEObject::GetListFillRange ( );
__declspec(implementation_key(10695)) void _OLEObject::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(10696)) _bstr_t _OLEObject::GetprogID ( );
__declspec(implementation_key(10697)) _bstr_t _OLEObject::GetAltHTML ( );
__declspec(implementation_key(10698)) void _OLEObject::PutAltHTML ( _bstr_t _arg1 );
__declspec(implementation_key(10699)) _ApplicationPtr OLEObjects::GetApplication ( );
__declspec(implementation_key(10700)) enum XlCreator OLEObjects::GetCreator ( );
__declspec(implementation_key(10701)) IDispatchPtr OLEObjects::GetParent ( );
__declspec(implementation_key(10702)) _variant_t OLEObjects::BringToFront ( );
__declspec(implementation_key(10703)) _variant_t OLEObjects::Copy ( );
__declspec(implementation_key(10704)) _variant_t OLEObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10705)) _variant_t OLEObjects::Cut ( );
__declspec(implementation_key(10706)) _variant_t OLEObjects::Delete ( );
__declspec(implementation_key(10707)) IDispatchPtr OLEObjects::Duplicate ( );
__declspec(implementation_key(10708)) VARIANT_BOOL OLEObjects::GetEnabled ( );
__declspec(implementation_key(10709)) void OLEObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10710)) double OLEObjects::GetHeight ( );
__declspec(implementation_key(10711)) void OLEObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(10712)) double OLEObjects::GetLeft ( );
__declspec(implementation_key(10713)) void OLEObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(10714)) VARIANT_BOOL OLEObjects::GetLocked ( );
__declspec(implementation_key(10715)) void OLEObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10716)) _bstr_t OLEObjects::GetOnAction ( );
__declspec(implementation_key(10717)) void OLEObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10718)) _variant_t OLEObjects::GetPlacement ( );
__declspec(implementation_key(10719)) void OLEObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10720)) VARIANT_BOOL OLEObjects::GetPrintObject ( );
__declspec(implementation_key(10721)) void OLEObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10722)) _variant_t OLEObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(10723)) _variant_t OLEObjects::SendToBack ( );
__declspec(implementation_key(10724)) double OLEObjects::GetTop ( );
__declspec(implementation_key(10725)) void OLEObjects::PutTop ( double _arg1 );
__declspec(implementation_key(10726)) VARIANT_BOOL OLEObjects::GetVisible ( );
__declspec(implementation_key(10727)) void OLEObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10728)) double OLEObjects::GetWidth ( );
__declspec(implementation_key(10729)) void OLEObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(10730)) long OLEObjects::GetZOrder ( );
__declspec(implementation_key(10731)) ShapeRangePtr OLEObjects::GetShapeRange ( );
__declspec(implementation_key(10732)) BorderPtr OLEObjects::GetBorder ( );
__declspec(implementation_key(10733)) InteriorPtr OLEObjects::GetInterior ( );
__declspec(implementation_key(10734)) VARIANT_BOOL OLEObjects::GetShadow ( );
__declspec(implementation_key(10735)) void OLEObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10736)) VARIANT_BOOL OLEObjects::GetAutoLoad ( );
__declspec(implementation_key(10737)) void OLEObjects::PutAutoLoad ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10738)) _bstr_t OLEObjects::GetSourceName ( );
__declspec(implementation_key(10739)) void OLEObjects::PutSourceName ( _bstr_t _arg1 );
__declspec(implementation_key(10740)) _OLEObjectPtr OLEObjects::Add ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(10741)) long OLEObjects::GetCount ( );
__declspec(implementation_key(10742)) GroupObjectPtr OLEObjects::Group ( );
__declspec(implementation_key(10743)) IDispatchPtr OLEObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(10744)) IUnknownPtr OLEObjects::_NewEnum ( );
__declspec(implementation_key(10745)) _ApplicationPtr TextBox::GetApplication ( );
__declspec(implementation_key(10746)) enum XlCreator TextBox::GetCreator ( );
__declspec(implementation_key(10747)) IDispatchPtr TextBox::GetParent ( );
__declspec(implementation_key(10748)) RangePtr TextBox::GetBottomRightCell ( );
__declspec(implementation_key(10749)) _variant_t TextBox::BringToFront ( );
__declspec(implementation_key(10750)) _variant_t TextBox::Copy ( );
__declspec(implementation_key(10751)) _variant_t TextBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10752)) _variant_t TextBox::Cut ( );
__declspec(implementation_key(10753)) _variant_t TextBox::Delete ( );
__declspec(implementation_key(10754)) IDispatchPtr TextBox::Duplicate ( );
__declspec(implementation_key(10755)) VARIANT_BOOL TextBox::GetEnabled ( );
__declspec(implementation_key(10756)) void TextBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10757)) double TextBox::GetHeight ( );
__declspec(implementation_key(10758)) void TextBox::PutHeight ( double _arg1 );
__declspec(implementation_key(10759)) long TextBox::GetIndex ( );
__declspec(implementation_key(10760)) double TextBox::GetLeft ( );
__declspec(implementation_key(10761)) void TextBox::PutLeft ( double _arg1 );
__declspec(implementation_key(10762)) VARIANT_BOOL TextBox::GetLocked ( );
__declspec(implementation_key(10763)) void TextBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10764)) _bstr_t TextBox::GetName ( );
__declspec(implementation_key(10765)) void TextBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(10766)) _bstr_t TextBox::GetOnAction ( );
__declspec(implementation_key(10767)) void TextBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10768)) _variant_t TextBox::GetPlacement ( );
__declspec(implementation_key(10769)) void TextBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10770)) VARIANT_BOOL TextBox::GetPrintObject ( );
__declspec(implementation_key(10771)) void TextBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10772)) _variant_t TextBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(10773)) _variant_t TextBox::SendToBack ( );
__declspec(implementation_key(10774)) double TextBox::GetTop ( );
__declspec(implementation_key(10775)) void TextBox::PutTop ( double _arg1 );
__declspec(implementation_key(10776)) RangePtr TextBox::GetTopLeftCell ( );
__declspec(implementation_key(10777)) VARIANT_BOOL TextBox::GetVisible ( );
__declspec(implementation_key(10778)) void TextBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10779)) double TextBox::GetWidth ( );
__declspec(implementation_key(10780)) void TextBox::PutWidth ( double _arg1 );
__declspec(implementation_key(10781)) long TextBox::GetZOrder ( );
__declspec(implementation_key(10782)) ShapeRangePtr TextBox::GetShapeRange ( );
__declspec(implementation_key(10783)) VARIANT_BOOL TextBox::GetAddIndent ( );
__declspec(implementation_key(10784)) void TextBox::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10785)) _variant_t TextBox::GetAutoScaleFont ( );
__declspec(implementation_key(10786)) void TextBox::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(10787)) VARIANT_BOOL TextBox::GetAutoSize ( );
__declspec(implementation_key(10788)) void TextBox::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10789)) _bstr_t TextBox::GetCaption ( );
__declspec(implementation_key(10790)) void TextBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(10791)) CharactersPtr TextBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10792)) _variant_t TextBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(10793)) FontPtr TextBox::GetFont ( );
__declspec(implementation_key(10794)) _bstr_t TextBox::GetFormula ( );
__declspec(implementation_key(10795)) void TextBox::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(10796)) _variant_t TextBox::GetHorizontalAlignment ( );
__declspec(implementation_key(10797)) void TextBox::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10798)) VARIANT_BOOL TextBox::GetLockedText ( );
__declspec(implementation_key(10799)) void TextBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10800)) _variant_t TextBox::GetOrientation ( );
__declspec(implementation_key(10801)) void TextBox::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(10802)) _bstr_t TextBox::GetText ( );
__declspec(implementation_key(10803)) void TextBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(10804)) _variant_t TextBox::GetVerticalAlignment ( );
__declspec(implementation_key(10805)) void TextBox::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10806)) long TextBox::GetReadingOrder ( );
__declspec(implementation_key(10807)) void TextBox::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(10808)) BorderPtr TextBox::GetBorder ( );
__declspec(implementation_key(10809)) InteriorPtr TextBox::GetInterior ( );
__declspec(implementation_key(10810)) VARIANT_BOOL TextBox::GetRoundedCorners ( );
__declspec(implementation_key(10811)) void TextBox::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10812)) VARIANT_BOOL TextBox::GetShadow ( );
__declspec(implementation_key(10813)) void TextBox::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10814)) _ApplicationPtr TextBoxes::GetApplication ( );
__declspec(implementation_key(10815)) enum XlCreator TextBoxes::GetCreator ( );
__declspec(implementation_key(10816)) IDispatchPtr TextBoxes::GetParent ( );
__declspec(implementation_key(10817)) _variant_t TextBoxes::BringToFront ( );
__declspec(implementation_key(10818)) _variant_t TextBoxes::Copy ( );
__declspec(implementation_key(10819)) _variant_t TextBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10820)) _variant_t TextBoxes::Cut ( );
__declspec(implementation_key(10821)) _variant_t TextBoxes::Delete ( );
__declspec(implementation_key(10822)) IDispatchPtr TextBoxes::Duplicate ( );
__declspec(implementation_key(10823)) VARIANT_BOOL TextBoxes::GetEnabled ( );
__declspec(implementation_key(10824)) void TextBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10825)) double TextBoxes::GetHeight ( );
__declspec(implementation_key(10826)) void TextBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(10827)) double TextBoxes::GetLeft ( );
__declspec(implementation_key(10828)) void TextBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(10829)) VARIANT_BOOL TextBoxes::GetLocked ( );
__declspec(implementation_key(10830)) void TextBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10831)) _bstr_t TextBoxes::GetOnAction ( );
__declspec(implementation_key(10832)) void TextBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10833)) _variant_t TextBoxes::GetPlacement ( );
__declspec(implementation_key(10834)) void TextBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10835)) VARIANT_BOOL TextBoxes::GetPrintObject ( );
__declspec(implementation_key(10836)) void TextBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10837)) _variant_t TextBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(10838)) _variant_t TextBoxes::SendToBack ( );
__declspec(implementation_key(10839)) double TextBoxes::GetTop ( );
__declspec(implementation_key(10840)) void TextBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(10841)) VARIANT_BOOL TextBoxes::GetVisible ( );
__declspec(implementation_key(10842)) void TextBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10843)) double TextBoxes::GetWidth ( );
__declspec(implementation_key(10844)) void TextBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(10845)) long TextBoxes::GetZOrder ( );
__declspec(implementation_key(10846)) ShapeRangePtr TextBoxes::GetShapeRange ( );
__declspec(implementation_key(10847)) VARIANT_BOOL TextBoxes::GetAddIndent ( );
__declspec(implementation_key(10848)) void TextBoxes::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10849)) _variant_t TextBoxes::GetAutoScaleFont ( );
__declspec(implementation_key(10850)) void TextBoxes::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(10851)) VARIANT_BOOL TextBoxes::GetAutoSize ( );
__declspec(implementation_key(10852)) void TextBoxes::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10853)) _bstr_t TextBoxes::GetCaption ( );
__declspec(implementation_key(10854)) void TextBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(10855)) CharactersPtr TextBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10856)) _variant_t TextBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(10857)) FontPtr TextBoxes::GetFont ( );
__declspec(implementation_key(10858)) _bstr_t TextBoxes::GetFormula ( );
__declspec(implementation_key(10859)) void TextBoxes::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(10860)) _variant_t TextBoxes::GetHorizontalAlignment ( );
__declspec(implementation_key(10861)) void TextBoxes::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10862)) VARIANT_BOOL TextBoxes::GetLockedText ( );
__declspec(implementation_key(10863)) void TextBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10864)) _variant_t TextBoxes::GetOrientation ( );
__declspec(implementation_key(10865)) void TextBoxes::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(10866)) _bstr_t TextBoxes::GetText ( );
__declspec(implementation_key(10867)) void TextBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(10868)) _variant_t TextBoxes::GetVerticalAlignment ( );
__declspec(implementation_key(10869)) void TextBoxes::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(10870)) long TextBoxes::GetReadingOrder ( );
__declspec(implementation_key(10871)) void TextBoxes::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(10872)) BorderPtr TextBoxes::GetBorder ( );
__declspec(implementation_key(10873)) InteriorPtr TextBoxes::GetInterior ( );
__declspec(implementation_key(10874)) VARIANT_BOOL TextBoxes::GetRoundedCorners ( );
__declspec(implementation_key(10875)) void TextBoxes::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10876)) VARIANT_BOOL TextBoxes::GetShadow ( );
__declspec(implementation_key(10877)) void TextBoxes::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10878)) TextBoxPtr TextBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(10879)) long TextBoxes::GetCount ( );
__declspec(implementation_key(10880)) GroupObjectPtr TextBoxes::Group ( );
__declspec(implementation_key(10881)) IDispatchPtr TextBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(10882)) IUnknownPtr TextBoxes::_NewEnum ( );
__declspec(implementation_key(10883)) _ApplicationPtr Picture::GetApplication ( );
__declspec(implementation_key(10884)) enum XlCreator Picture::GetCreator ( );
__declspec(implementation_key(10885)) IDispatchPtr Picture::GetParent ( );
__declspec(implementation_key(10886)) RangePtr Picture::GetBottomRightCell ( );
__declspec(implementation_key(10887)) _variant_t Picture::BringToFront ( );
__declspec(implementation_key(10888)) _variant_t Picture::Copy ( );
__declspec(implementation_key(10889)) _variant_t Picture::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10890)) _variant_t Picture::Cut ( );
__declspec(implementation_key(10891)) _variant_t Picture::Delete ( );
__declspec(implementation_key(10892)) IDispatchPtr Picture::Duplicate ( );
__declspec(implementation_key(10893)) VARIANT_BOOL Picture::GetEnabled ( );
__declspec(implementation_key(10894)) void Picture::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10895)) double Picture::GetHeight ( );
__declspec(implementation_key(10896)) void Picture::PutHeight ( double _arg1 );
__declspec(implementation_key(10897)) long Picture::GetIndex ( );
__declspec(implementation_key(10898)) double Picture::GetLeft ( );
__declspec(implementation_key(10899)) void Picture::PutLeft ( double _arg1 );
__declspec(implementation_key(10900)) VARIANT_BOOL Picture::GetLocked ( );
__declspec(implementation_key(10901)) void Picture::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10902)) _bstr_t Picture::GetName ( );
__declspec(implementation_key(10903)) void Picture::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(10904)) _bstr_t Picture::GetOnAction ( );
__declspec(implementation_key(10905)) void Picture::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10906)) _variant_t Picture::GetPlacement ( );
__declspec(implementation_key(10907)) void Picture::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10908)) VARIANT_BOOL Picture::GetPrintObject ( );
__declspec(implementation_key(10909)) void Picture::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10910)) _variant_t Picture::Select ( const _variant_t & Replace );
__declspec(implementation_key(10911)) _variant_t Picture::SendToBack ( );
__declspec(implementation_key(10912)) double Picture::GetTop ( );
__declspec(implementation_key(10913)) void Picture::PutTop ( double _arg1 );
__declspec(implementation_key(10914)) RangePtr Picture::GetTopLeftCell ( );
__declspec(implementation_key(10915)) VARIANT_BOOL Picture::GetVisible ( );
__declspec(implementation_key(10916)) void Picture::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10917)) double Picture::GetWidth ( );
__declspec(implementation_key(10918)) void Picture::PutWidth ( double _arg1 );
__declspec(implementation_key(10919)) long Picture::GetZOrder ( );
__declspec(implementation_key(10920)) ShapeRangePtr Picture::GetShapeRange ( );
__declspec(implementation_key(10921)) BorderPtr Picture::GetBorder ( );
__declspec(implementation_key(10922)) InteriorPtr Picture::GetInterior ( );
__declspec(implementation_key(10923)) VARIANT_BOOL Picture::GetShadow ( );
__declspec(implementation_key(10924)) void Picture::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10925)) _bstr_t Picture::GetFormula ( );
__declspec(implementation_key(10926)) void Picture::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(10927)) _ApplicationPtr Pictures::GetApplication ( );
__declspec(implementation_key(10928)) enum XlCreator Pictures::GetCreator ( );
__declspec(implementation_key(10929)) IDispatchPtr Pictures::GetParent ( );
__declspec(implementation_key(10930)) _variant_t Pictures::BringToFront ( );
__declspec(implementation_key(10931)) _variant_t Pictures::Copy ( );
__declspec(implementation_key(10932)) _variant_t Pictures::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10933)) _variant_t Pictures::Cut ( );
__declspec(implementation_key(10934)) _variant_t Pictures::Delete ( );
__declspec(implementation_key(10935)) IDispatchPtr Pictures::Duplicate ( );
__declspec(implementation_key(10936)) VARIANT_BOOL Pictures::GetEnabled ( );
__declspec(implementation_key(10937)) void Pictures::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10938)) double Pictures::GetHeight ( );
__declspec(implementation_key(10939)) void Pictures::PutHeight ( double _arg1 );
__declspec(implementation_key(10940)) double Pictures::GetLeft ( );
__declspec(implementation_key(10941)) void Pictures::PutLeft ( double _arg1 );
__declspec(implementation_key(10942)) VARIANT_BOOL Pictures::GetLocked ( );
__declspec(implementation_key(10943)) void Pictures::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10944)) _bstr_t Pictures::GetOnAction ( );
__declspec(implementation_key(10945)) void Pictures::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10946)) _variant_t Pictures::GetPlacement ( );
__declspec(implementation_key(10947)) void Pictures::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10948)) VARIANT_BOOL Pictures::GetPrintObject ( );
__declspec(implementation_key(10949)) void Pictures::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10950)) _variant_t Pictures::Select ( const _variant_t & Replace );
__declspec(implementation_key(10951)) _variant_t Pictures::SendToBack ( );
__declspec(implementation_key(10952)) double Pictures::GetTop ( );
__declspec(implementation_key(10953)) void Pictures::PutTop ( double _arg1 );
__declspec(implementation_key(10954)) VARIANT_BOOL Pictures::GetVisible ( );
__declspec(implementation_key(10955)) void Pictures::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10956)) double Pictures::GetWidth ( );
__declspec(implementation_key(10957)) void Pictures::PutWidth ( double _arg1 );
__declspec(implementation_key(10958)) long Pictures::GetZOrder ( );
__declspec(implementation_key(10959)) ShapeRangePtr Pictures::GetShapeRange ( );
__declspec(implementation_key(10960)) BorderPtr Pictures::GetBorder ( );
__declspec(implementation_key(10961)) InteriorPtr Pictures::GetInterior ( );
__declspec(implementation_key(10962)) VARIANT_BOOL Pictures::GetShadow ( );
__declspec(implementation_key(10963)) void Pictures::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10964)) _bstr_t Pictures::GetFormula ( );
__declspec(implementation_key(10965)) void Pictures::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(10966)) PicturePtr Pictures::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(10967)) long Pictures::GetCount ( );
__declspec(implementation_key(10968)) GroupObjectPtr Pictures::Group ( );
__declspec(implementation_key(10969)) PicturePtr Pictures::Insert ( _bstr_t Filename, const _variant_t & Converter );
__declspec(implementation_key(10970)) IDispatchPtr Pictures::Item ( const _variant_t & Index );
__declspec(implementation_key(10971)) IUnknownPtr Pictures::_NewEnum ( );
__declspec(implementation_key(10972)) PicturePtr Pictures::Paste ( const _variant_t & Link );
__declspec(implementation_key(10973)) _ApplicationPtr Drawing::GetApplication ( );
__declspec(implementation_key(10974)) enum XlCreator Drawing::GetCreator ( );
__declspec(implementation_key(10975)) IDispatchPtr Drawing::GetParent ( );
__declspec(implementation_key(10976)) RangePtr Drawing::GetBottomRightCell ( );
__declspec(implementation_key(10977)) _variant_t Drawing::BringToFront ( );
__declspec(implementation_key(10978)) _variant_t Drawing::Copy ( );
__declspec(implementation_key(10979)) _variant_t Drawing::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10980)) _variant_t Drawing::Cut ( );
__declspec(implementation_key(10981)) _variant_t Drawing::Delete ( );
__declspec(implementation_key(10982)) IDispatchPtr Drawing::Duplicate ( );
__declspec(implementation_key(10983)) VARIANT_BOOL Drawing::GetEnabled ( );
__declspec(implementation_key(10984)) void Drawing::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10985)) double Drawing::GetHeight ( );
__declspec(implementation_key(10986)) void Drawing::PutHeight ( double _arg1 );
__declspec(implementation_key(10987)) long Drawing::GetIndex ( );
__declspec(implementation_key(10988)) double Drawing::GetLeft ( );
__declspec(implementation_key(10989)) void Drawing::PutLeft ( double _arg1 );
__declspec(implementation_key(10990)) VARIANT_BOOL Drawing::GetLocked ( );
__declspec(implementation_key(10991)) void Drawing::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(10992)) _bstr_t Drawing::GetName ( );
__declspec(implementation_key(10993)) void Drawing::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(10994)) _bstr_t Drawing::GetOnAction ( );
__declspec(implementation_key(10995)) void Drawing::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(10996)) _variant_t Drawing::GetPlacement ( );
__declspec(implementation_key(10997)) void Drawing::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(10998)) VARIANT_BOOL Drawing::GetPrintObject ( );
__declspec(implementation_key(10999)) void Drawing::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11000)) _variant_t Drawing::Select ( const _variant_t & Replace );
__declspec(implementation_key(11001)) _variant_t Drawing::SendToBack ( );
__declspec(implementation_key(11002)) double Drawing::GetTop ( );
__declspec(implementation_key(11003)) void Drawing::PutTop ( double _arg1 );
__declspec(implementation_key(11004)) RangePtr Drawing::GetTopLeftCell ( );
__declspec(implementation_key(11005)) VARIANT_BOOL Drawing::GetVisible ( );
__declspec(implementation_key(11006)) void Drawing::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11007)) double Drawing::GetWidth ( );
__declspec(implementation_key(11008)) void Drawing::PutWidth ( double _arg1 );
__declspec(implementation_key(11009)) long Drawing::GetZOrder ( );
__declspec(implementation_key(11010)) ShapeRangePtr Drawing::GetShapeRange ( );
__declspec(implementation_key(11011)) VARIANT_BOOL Drawing::GetAddIndent ( );
__declspec(implementation_key(11012)) void Drawing::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11013)) _variant_t Drawing::GetAutoScaleFont ( );
__declspec(implementation_key(11014)) void Drawing::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(11015)) VARIANT_BOOL Drawing::GetAutoSize ( );
__declspec(implementation_key(11016)) void Drawing::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11017)) _bstr_t Drawing::GetCaption ( );
__declspec(implementation_key(11018)) void Drawing::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(11019)) CharactersPtr Drawing::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(11020)) _variant_t Drawing::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(11021)) FontPtr Drawing::GetFont ( );
__declspec(implementation_key(11022)) _bstr_t Drawing::GetFormula ( );
__declspec(implementation_key(11023)) void Drawing::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(11024)) _variant_t Drawing::GetHorizontalAlignment ( );
__declspec(implementation_key(11025)) void Drawing::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(11026)) VARIANT_BOOL Drawing::GetLockedText ( );
__declspec(implementation_key(11027)) void Drawing::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11028)) _variant_t Drawing::GetOrientation ( );
__declspec(implementation_key(11029)) void Drawing::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(11030)) _bstr_t Drawing::GetText ( );
__declspec(implementation_key(11031)) void Drawing::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(11032)) _variant_t Drawing::GetVerticalAlignment ( );
__declspec(implementation_key(11033)) void Drawing::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(11034)) long Drawing::GetReadingOrder ( );
__declspec(implementation_key(11035)) void Drawing::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(11036)) BorderPtr Drawing::GetBorder ( );
__declspec(implementation_key(11037)) InteriorPtr Drawing::GetInterior ( );
__declspec(implementation_key(11038)) VARIANT_BOOL Drawing::GetShadow ( );
__declspec(implementation_key(11039)) void Drawing::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11040)) _variant_t Drawing::AddVertex ( double Left, double Top );
__declspec(implementation_key(11041)) _variant_t Drawing::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(11042)) _variant_t Drawing::GetVertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(11043)) _ApplicationPtr Drawings::GetApplication ( );
__declspec(implementation_key(11044)) enum XlCreator Drawings::GetCreator ( );
__declspec(implementation_key(11045)) IDispatchPtr Drawings::GetParent ( );
__declspec(implementation_key(11046)) _variant_t Drawings::BringToFront ( );
__declspec(implementation_key(11047)) _variant_t Drawings::Copy ( );
__declspec(implementation_key(11048)) _variant_t Drawings::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(11049)) _variant_t Drawings::Cut ( );
__declspec(implementation_key(11050)) _variant_t Drawings::Delete ( );
__declspec(implementation_key(11051)) IDispatchPtr Drawings::Duplicate ( );
__declspec(implementation_key(11052)) VARIANT_BOOL Drawings::GetEnabled ( );
__declspec(implementation_key(11053)) void Drawings::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11054)) double Drawings::GetHeight ( );
__declspec(implementation_key(11055)) void Drawings::PutHeight ( double _arg1 );
__declspec(implementation_key(11056)) double Drawings::GetLeft ( );
__declspec(implementation_key(11057)) void Drawings::PutLeft ( double _arg1 );
__declspec(implementation_key(11058)) VARIANT_BOOL Drawings::GetLocked ( );
__declspec(implementation_key(11059)) void Drawings::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11060)) _bstr_t Drawings::GetOnAction ( );
__declspec(implementation_key(11061)) void Drawings::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(11062)) _variant_t Drawings::GetPlacement ( );
__declspec(implementation_key(11063)) void Drawings::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(11064)) VARIANT_BOOL Drawings::GetPrintObject ( );
__declspec(implementation_key(11065)) void Drawings::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11066)) _variant_t Drawings::Select ( const _variant_t & Replace );
__declspec(implementation_key(11067)) _variant_t Drawings::SendToBack ( );
__declspec(implementation_key(11068)) double Drawings::GetTop ( );
__declspec(implementation_key(11069)) void Drawings::PutTop ( double _arg1 );
__declspec(implementation_key(11070)) VARIANT_BOOL Drawings::GetVisible ( );
__declspec(implementation_key(11071)) void Drawings::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11072)) double Drawings::GetWidth ( );
__declspec(implementation_key(11073)) void Drawings::PutWidth ( double _arg1 );
__declspec(implementation_key(11074)) long Drawings::GetZOrder ( );
__declspec(implementation_key(11075)) ShapeRangePtr Drawings::GetShapeRange ( );
__declspec(implementation_key(11076)) VARIANT_BOOL Drawings::GetAddIndent ( );
__declspec(implementation_key(11077)) void Drawings::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11078)) _variant_t Drawings::GetAutoScaleFont ( );
__declspec(implementation_key(11079)) void Drawings::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(11080)) VARIANT_BOOL Drawings::GetAutoSize ( );
__declspec(implementation_key(11081)) void Drawings::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11082)) _bstr_t Drawings::GetCaption ( );
__declspec(implementation_key(11083)) void Drawings::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(11084)) CharactersPtr Drawings::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(11085)) _variant_t Drawings::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(11086)) FontPtr Drawings::GetFont ( );
__declspec(implementation_key(11087)) _bstr_t Drawings::GetFormula ( );
__declspec(implementation_key(11088)) void Drawings::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(11089)) _variant_t Drawings::GetHorizontalAlignment ( );
__declspec(implementation_key(11090)) void Drawings::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(11091)) VARIANT_BOOL Drawings::GetLockedText ( );
__declspec(implementation_key(11092)) void Drawings::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11093)) _variant_t Drawings::GetOrientation ( );
__declspec(implementation_key(11094)) void Drawings::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(11095)) _bstr_t Drawings::GetText ( );
__declspec(implementation_key(11096)) void Drawings::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(11097)) _variant_t Drawings::GetVerticalAlignment ( );
__declspec(implementation_key(11098)) void Drawings::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(11099)) long Drawings::GetReadingOrder ( );
__declspec(implementation_key(11100)) void Drawings::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(11101)) BorderPtr Drawings::GetBorder ( );
__declspec(implementation_key(11102)) InteriorPtr Drawings::GetInterior ( );
__declspec(implementation_key(11103)) VARIANT_BOOL Drawings::GetShadow ( );
__declspec(implementation_key(11104)) void Drawings::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11105)) _variant_t Drawings::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(11106)) DrawingPtr Drawings::Add ( double X1, double Y1, double X2, double Y2, VARIANT_BOOL Closed );
__declspec(implementation_key(11107)) long Drawings::GetCount ( );
__declspec(implementation_key(11108)) GroupObjectPtr Drawings::Group ( );
__declspec(implementation_key(11109)) IDispatchPtr Drawings::Item ( const _variant_t & Index );
__declspec(implementation_key(11110)) IUnknownPtr Drawings::_NewEnum ( );
__declspec(implementation_key(11111)) _ApplicationPtr RoutingSlip::GetApplication ( );
__declspec(implementation_key(11112)) enum XlCreator RoutingSlip::GetCreator ( );
__declspec(implementation_key(11113)) IDispatchPtr RoutingSlip::GetParent ( );
__declspec(implementation_key(11114)) enum XlRoutingSlipDelivery RoutingSlip::GetDelivery ( );
__declspec(implementation_key(11115)) void RoutingSlip::PutDelivery ( enum XlRoutingSlipDelivery _arg1 );
__declspec(implementation_key(11116)) _variant_t RoutingSlip::GetMessage ( );
__declspec(implementation_key(11117)) void RoutingSlip::PutMessage ( const _variant_t & _arg1 );
__declspec(implementation_key(11118)) _variant_t RoutingSlip::GetRecipients ( const _variant_t & Index );
__declspec(implementation_key(11119)) void RoutingSlip::PutRecipients ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(11120)) _variant_t RoutingSlip::Reset ( );
__declspec(implementation_key(11121)) VARIANT_BOOL RoutingSlip::GetReturnWhenDone ( );
__declspec(implementation_key(11122)) void RoutingSlip::PutReturnWhenDone ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11123)) enum XlRoutingSlipStatus RoutingSlip::GetStatus ( );
__declspec(implementation_key(11124)) _variant_t RoutingSlip::GetSubject ( );
__declspec(implementation_key(11125)) void RoutingSlip::PutSubject ( const _variant_t & _arg1 );
__declspec(implementation_key(11126)) VARIANT_BOOL RoutingSlip::GetTrackStatus ( );
__declspec(implementation_key(11127)) void RoutingSlip::PutTrackStatus ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11128)) _ApplicationPtr Outline::GetApplication ( );
__declspec(implementation_key(11129)) enum XlCreator Outline::GetCreator ( );
__declspec(implementation_key(11130)) IDispatchPtr Outline::GetParent ( );
__declspec(implementation_key(11131)) VARIANT_BOOL Outline::GetAutomaticStyles ( );
__declspec(implementation_key(11132)) void Outline::PutAutomaticStyles ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11133)) _variant_t Outline::ShowLevels ( const _variant_t & RowLevels, const _variant_t & ColumnLevels );
__declspec(implementation_key(11134)) enum XlSummaryColumn Outline::GetSummaryColumn ( );
__declspec(implementation_key(11135)) void Outline::PutSummaryColumn ( enum XlSummaryColumn _arg1 );
__declspec(implementation_key(11136)) enum XlSummaryRow Outline::GetSummaryRow ( );
__declspec(implementation_key(11137)) void Outline::PutSummaryRow ( enum XlSummaryRow _arg1 );
__declspec(implementation_key(11138)) _ApplicationPtr Module::GetApplication ( );
__declspec(implementation_key(11139)) enum XlCreator Module::GetCreator ( );
__declspec(implementation_key(11140)) IDispatchPtr Module::GetParent ( );
__declspec(implementation_key(11141)) HRESULT Module::Activate ( );
__declspec(implementation_key(11142)) HRESULT Module::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(11143)) HRESULT Module::Delete ( );
__declspec(implementation_key(11144)) _bstr_t Module::GetCodeName ( );
__declspec(implementation_key(11145)) _bstr_t Module::Get_CodeName ( );
__declspec(implementation_key(11146)) void Module::Put_CodeName ( _bstr_t _arg1 );
__declspec(implementation_key(11147)) long Module::GetIndex ( );
__declspec(implementation_key(11148)) HRESULT Module::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(11149)) _bstr_t Module::GetName ( );
__declspec(implementation_key(11150)) void Module::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(11151)) IDispatchPtr Module::GetNext ( );
__declspec(implementation_key(11152)) _bstr_t Module::GetOnDoubleClick ( );
__declspec(implementation_key(11153)) void Module::PutOnDoubleClick ( _bstr_t _arg1 );
__declspec(implementation_key(11154)) _bstr_t Module::GetOnSheetActivate ( );
__declspec(implementation_key(11155)) void Module::PutOnSheetActivate ( _bstr_t _arg1 );
__declspec(implementation_key(11156)) _bstr_t Module::GetOnSheetDeactivate ( );
__declspec(implementation_key(11157)) void Module::PutOnSheetDeactivate ( _bstr_t _arg1 );
__declspec(implementation_key(11158)) PageSetupPtr Module::GetPageSetup ( );
__declspec(implementation_key(11159)) IDispatchPtr Module::GetPrevious ( );
__declspec(implementation_key(11160)) HRESULT Module::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(11161)) HRESULT Module::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(11162)) VARIANT_BOOL Module::GetProtectContents ( );
__declspec(implementation_key(11163)) VARIANT_BOOL Module::GetProtectionMode ( );
__declspec(implementation_key(11164)) HRESULT Module::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout );
__declspec(implementation_key(11165)) HRESULT Module::Select ( const _variant_t & Replace );
__declspec(implementation_key(11166)) HRESULT Module::Unprotect ( const _variant_t & Password );
__declspec(implementation_key(11167)) enum XlSheetVisibility Module::GetVisible ( );
__declspec(implementation_key(11168)) void Module::PutVisible ( enum XlSheetVisibility _arg1 );
__declspec(implementation_key(11169)) ShapesPtr Module::GetShapes ( );
__declspec(implementation_key(11170)) _variant_t Module::InsertFile ( const _variant_t & Filename, const _variant_t & Merge );
__declspec(implementation_key(11171)) HRESULT Module::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout );
__declspec(implementation_key(11172)) HRESULT Module::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(11173)) _ApplicationPtr Modules::GetApplication ( );
__declspec(implementation_key(11174)) enum XlCreator Modules::GetCreator ( );
__declspec(implementation_key(11175)) IDispatchPtr Modules::GetParent ( );
__declspec(implementation_key(11176)) ModulePtr Modules::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(11177)) HRESULT Modules::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(11178)) long Modules::GetCount ( );
__declspec(implementation_key(11179)) HRESULT Modules::Delete ( );
__declspec(implementation_key(11180)) IDispatchPtr Modules::GetItem ( const _variant_t & Index );
__declspec(implementation_key(11181)) HRESULT Modules::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(11182)) IUnknownPtr Modules::Get_NewEnum ( );
__declspec(implementation_key(11183)) HRESULT Modules::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(11184)) HRESULT Modules::Select ( const _variant_t & Replace );
__declspec(implementation_key(11185)) HPageBreaksPtr Modules::GetHPageBreaks ( );
__declspec(implementation_key(11186)) VPageBreaksPtr Modules::GetVPageBreaks ( );
__declspec(implementation_key(11187)) _variant_t Modules::GetVisible ( );
__declspec(implementation_key(11188)) void Modules::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(11189)) IDispatchPtr Modules::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11190)) HRESULT Modules::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(11191)) _ApplicationPtr DialogSheet::GetApplication ( );
__declspec(implementation_key(11192)) enum XlCreator DialogSheet::GetCreator ( );
__declspec(implementation_key(11193)) IDispatchPtr DialogSheet::GetParent ( );
__declspec(implementation_key(11194)) HRESULT DialogSheet::Activate ( );
__declspec(implementation_key(11195)) HRESULT DialogSheet::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(11196)) HRESULT DialogSheet::Delete ( );
__declspec(implementation_key(11197)) _bstr_t DialogSheet::GetCodeName ( );
__declspec(implementation_key(11198)) _bstr_t DialogSheet::Get_CodeName ( );
__declspec(implementation_key(11199)) void DialogSheet::Put_CodeName ( _bstr_t _arg1 );
__declspec(implementation_key(11200)) long DialogSheet::GetIndex ( );
__declspec(implementation_key(11201)) HRESULT DialogSheet::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(11202)) _bstr_t DialogSheet::GetName ( );
__declspec(implementation_key(11203)) void DialogSheet::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(11204)) IDispatchPtr DialogSheet::GetNext ( );
__declspec(implementation_key(11205)) _bstr_t DialogSheet::GetOnDoubleClick ( );
__declspec(implementation_key(11206)) void DialogSheet::PutOnDoubleClick ( _bstr_t _arg1 );
__declspec(implementation_key(11207)) _bstr_t DialogSheet::GetOnSheetActivate ( );
__declspec(implementation_key(11208)) void DialogSheet::PutOnSheetActivate ( _bstr_t _arg1 );
__declspec(implementation_key(11209)) _bstr_t DialogSheet::GetOnSheetDeactivate ( );
__declspec(implementation_key(11210)) void DialogSheet::PutOnSheetDeactivate ( _bstr_t _arg1 );
__declspec(implementation_key(11211)) PageSetupPtr DialogSheet::GetPageSetup ( );
__declspec(implementation_key(11212)) IDispatchPtr DialogSheet::GetPrevious ( );
__declspec(implementation_key(11213)) HRESULT DialogSheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(11214)) HRESULT DialogSheet::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(11215)) HRESULT DialogSheet::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(11216)) VARIANT_BOOL DialogSheet::GetProtectContents ( );
__declspec(implementation_key(11217)) VARIANT_BOOL DialogSheet::GetProtectDrawingObjects ( );
__declspec(implementation_key(11218)) VARIANT_BOOL DialogSheet::GetProtectionMode ( );
__declspec(implementation_key(11219)) VARIANT_BOOL DialogSheet::GetProtectScenarios ( );
__declspec(implementation_key(11220)) HRESULT DialogSheet::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout );
__declspec(implementation_key(11221)) HRESULT DialogSheet::Select ( const _variant_t & Replace );
__declspec(implementation_key(11222)) HRESULT DialogSheet::Unprotect ( const _variant_t & Password );
__declspec(implementation_key(11223)) enum XlSheetVisibility DialogSheet::GetVisible ( );
__declspec(implementation_key(11224)) void DialogSheet::PutVisible ( enum XlSheetVisibility _arg1 );
__declspec(implementation_key(11225)) ShapesPtr DialogSheet::GetShapes ( );
__declspec(implementation_key(11226)) IDispatchPtr DialogSheet::Arcs ( const _variant_t & Index );
__declspec(implementation_key(11227)) IDispatchPtr DialogSheet::Buttons ( const _variant_t & Index );
__declspec(implementation_key(11228)) VARIANT_BOOL DialogSheet::GetEnableCalculation ( );
__declspec(implementation_key(11229)) void DialogSheet::PutEnableCalculation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11230)) IDispatchPtr DialogSheet::ChartObjects ( const _variant_t & Index );
__declspec(implementation_key(11231)) IDispatchPtr DialogSheet::CheckBoxes ( const _variant_t & Index );
__declspec(implementation_key(11232)) HRESULT DialogSheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(11233)) VARIANT_BOOL DialogSheet::GetDisplayAutomaticPageBreaks ( );
__declspec(implementation_key(11234)) void DialogSheet::PutDisplayAutomaticPageBreaks ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11235)) IDispatchPtr DialogSheet::Drawings ( const _variant_t & Index );
__declspec(implementation_key(11236)) IDispatchPtr DialogSheet::DrawingObjects ( const _variant_t & Index );
__declspec(implementation_key(11237)) IDispatchPtr DialogSheet::DropDowns ( const _variant_t & Index );
__declspec(implementation_key(11238)) VARIANT_BOOL DialogSheet::GetEnableAutoFilter ( );
__declspec(implementation_key(11239)) void DialogSheet::PutEnableAutoFilter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11240)) enum XlEnableSelection DialogSheet::GetEnableSelection ( );
__declspec(implementation_key(11241)) void DialogSheet::PutEnableSelection ( enum XlEnableSelection _arg1 );
__declspec(implementation_key(11242)) VARIANT_BOOL DialogSheet::GetEnableOutlining ( );
__declspec(implementation_key(11243)) void DialogSheet::PutEnableOutlining ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11244)) VARIANT_BOOL DialogSheet::GetEnablePivotTable ( );
__declspec(implementation_key(11245)) void DialogSheet::PutEnablePivotTable ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11246)) _variant_t DialogSheet::Evaluate ( const _variant_t & Name );
__declspec(implementation_key(11247)) _variant_t DialogSheet::_Evaluate ( const _variant_t & Name );
__declspec(implementation_key(11248)) HRESULT DialogSheet::ResetAllPageBreaks ( );
__declspec(implementation_key(11249)) IDispatchPtr DialogSheet::GroupBoxes ( const _variant_t & Index );
__declspec(implementation_key(11250)) IDispatchPtr DialogSheet::GroupObjects ( const _variant_t & Index );
__declspec(implementation_key(11251)) IDispatchPtr DialogSheet::Labels ( const _variant_t & Index );
__declspec(implementation_key(11252)) IDispatchPtr DialogSheet::Lines ( const _variant_t & Index );
__declspec(implementation_key(11253)) IDispatchPtr DialogSheet::ListBoxes ( const _variant_t & Index );
__declspec(implementation_key(11254)) NamesPtr DialogSheet::GetNames ( );
__declspec(implementation_key(11255)) IDispatchPtr DialogSheet::OLEObjects ( const _variant_t & Index );
__declspec(implementation_key(11256)) IDispatchPtr DialogSheet::OptionButtons ( const _variant_t & Index );
__declspec(implementation_key(11257)) IDispatchPtr DialogSheet::Ovals ( const _variant_t & Index );
__declspec(implementation_key(11258)) HRESULT DialogSheet::Paste ( const _variant_t & Destination, const _variant_t & Link );
__declspec(implementation_key(11259)) HRESULT DialogSheet::_PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel );
__declspec(implementation_key(11260)) IDispatchPtr DialogSheet::Pictures ( const _variant_t & Index );
__declspec(implementation_key(11261)) IDispatchPtr DialogSheet::Rectangles ( const _variant_t & Index );
__declspec(implementation_key(11262)) _bstr_t DialogSheet::GetScrollArea ( );
__declspec(implementation_key(11263)) void DialogSheet::PutScrollArea ( _bstr_t _arg1 );
__declspec(implementation_key(11264)) IDispatchPtr DialogSheet::ScrollBars ( const _variant_t & Index );
__declspec(implementation_key(11265)) IDispatchPtr DialogSheet::Spinners ( const _variant_t & Index );
__declspec(implementation_key(11266)) IDispatchPtr DialogSheet::TextBoxes ( const _variant_t & Index );
__declspec(implementation_key(11267)) HPageBreaksPtr DialogSheet::GetHPageBreaks ( );
__declspec(implementation_key(11268)) VPageBreaksPtr DialogSheet::GetVPageBreaks ( );
__declspec(implementation_key(11269)) QueryTablesPtr DialogSheet::GetQueryTables ( );
__declspec(implementation_key(11270)) VARIANT_BOOL DialogSheet::GetDisplayPageBreaks ( );
__declspec(implementation_key(11271)) void DialogSheet::PutDisplayPageBreaks ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11272)) CommentsPtr DialogSheet::GetComments ( );
__declspec(implementation_key(11273)) HyperlinksPtr DialogSheet::GetHyperlinks ( );
__declspec(implementation_key(11274)) HRESULT DialogSheet::ClearCircles ( );
__declspec(implementation_key(11275)) HRESULT DialogSheet::CircleInvalid ( );
__declspec(implementation_key(11276)) long DialogSheet::Get_DisplayRightToLeft ( );
__declspec(implementation_key(11277)) void DialogSheet::Put_DisplayRightToLeft ( long _arg1 );
__declspec(implementation_key(11278)) AutoFilterPtr DialogSheet::GetAutoFilter ( );
__declspec(implementation_key(11279)) VARIANT_BOOL DialogSheet::GetDisplayRightToLeft ( );
__declspec(implementation_key(11280)) void DialogSheet::PutDisplayRightToLeft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11281)) Office::ScriptsPtr DialogSheet::GetScripts ( );
__declspec(implementation_key(11282)) HRESULT DialogSheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(11283)) HRESULT DialogSheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript );
__declspec(implementation_key(11284)) TabPtr DialogSheet::GetTab ( );
__declspec(implementation_key(11285)) Office::IMsoEnvelopeVBPtr DialogSheet::GetMailEnvelope ( );
__declspec(implementation_key(11286)) HRESULT DialogSheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local );
__declspec(implementation_key(11287)) CustomPropertiesPtr DialogSheet::GetCustomProperties ( );
__declspec(implementation_key(11288)) SmartTagsPtr DialogSheet::GetSmartTags ( );
__declspec(implementation_key(11289)) ProtectionPtr DialogSheet::GetProtection ( );
__declspec(implementation_key(11290)) HRESULT DialogSheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & NoHTMLFormatting );
__declspec(implementation_key(11291)) HRESULT DialogSheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, const _variant_t & AllowFormattingCells, const _variant_t & AllowFormattingColumns, const _variant_t & AllowFormattingRows, const _variant_t & AllowInsertingColumns, const _variant_t & AllowInsertingRows, const _variant_t & AllowInsertingHyperlinks, const _variant_t & AllowDeletingColumns, const _variant_t & AllowDeletingRows, const _variant_t & AllowSorting, const _variant_t & AllowFiltering, const _variant_t & AllowUsingPivotTables );
__declspec(implementation_key(11292)) _variant_t DialogSheet::GetDefaultButton ( );
__declspec(implementation_key(11293)) void DialogSheet::PutDefaultButton ( const _variant_t & _arg1 );
__declspec(implementation_key(11294)) DialogFramePtr DialogSheet::GetDialogFrame ( );
__declspec(implementation_key(11295)) IDispatchPtr DialogSheet::EditBoxes ( const _variant_t & Index );
__declspec(implementation_key(11296)) _variant_t DialogSheet::GetFocus ( );
__declspec(implementation_key(11297)) void DialogSheet::PutFocus ( const _variant_t & _arg1 );
__declspec(implementation_key(11298)) VARIANT_BOOL DialogSheet::Hide ( const _variant_t & Cancel );
__declspec(implementation_key(11299)) VARIANT_BOOL DialogSheet::Show ( );
__declspec(implementation_key(11300)) _ApplicationPtr DialogSheets::GetApplication ( );
__declspec(implementation_key(11301)) enum XlCreator DialogSheets::GetCreator ( );
__declspec(implementation_key(11302)) IDispatchPtr DialogSheets::GetParent ( );
__declspec(implementation_key(11303)) DialogSheetPtr DialogSheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(11304)) HRESULT DialogSheets::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(11305)) long DialogSheets::GetCount ( );
__declspec(implementation_key(11306)) HRESULT DialogSheets::Delete ( );
__declspec(implementation_key(11307)) IDispatchPtr DialogSheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(11308)) HRESULT DialogSheets::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(11309)) IUnknownPtr DialogSheets::Get_NewEnum ( );
__declspec(implementation_key(11310)) HRESULT DialogSheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(11311)) HRESULT DialogSheets::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(11312)) HRESULT DialogSheets::Select ( const _variant_t & Replace );
__declspec(implementation_key(11313)) HPageBreaksPtr DialogSheets::GetHPageBreaks ( );
__declspec(implementation_key(11314)) VPageBreaksPtr DialogSheets::GetVPageBreaks ( );
__declspec(implementation_key(11315)) _variant_t DialogSheets::GetVisible ( );
__declspec(implementation_key(11316)) void DialogSheets::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(11317)) IDispatchPtr DialogSheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11318)) HRESULT DialogSheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(11319)) _ApplicationPtr Worksheets::GetApplication ( );
__declspec(implementation_key(11320)) enum XlCreator Worksheets::GetCreator ( );
__declspec(implementation_key(11321)) IDispatchPtr Worksheets::GetParent ( );
__declspec(implementation_key(11322)) IDispatchPtr Worksheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type );
__declspec(implementation_key(11323)) HRESULT Worksheets::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(11324)) long Worksheets::GetCount ( );
__declspec(implementation_key(11325)) HRESULT Worksheets::Delete ( );
__declspec(implementation_key(11326)) HRESULT Worksheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type );
__declspec(implementation_key(11327)) IDispatchPtr Worksheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(11328)) HRESULT Worksheets::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(11329)) IUnknownPtr Worksheets::Get_NewEnum ( );
__declspec(implementation_key(11330)) HRESULT Worksheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(11331)) HRESULT Worksheets::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(11332)) HRESULT Worksheets::Select ( const _variant_t & Replace );
__declspec(implementation_key(11333)) HPageBreaksPtr Worksheets::GetHPageBreaks ( );
__declspec(implementation_key(11334)) VPageBreaksPtr Worksheets::GetVPageBreaks ( );
__declspec(implementation_key(11335)) _variant_t Worksheets::GetVisible ( );
__declspec(implementation_key(11336)) void Worksheets::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(11337)) IDispatchPtr Worksheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11338)) HRESULT Worksheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(11339)) _ApplicationPtr PageSetup::GetApplication ( );
__declspec(implementation_key(11340)) enum XlCreator PageSetup::GetCreator ( );
__declspec(implementation_key(11341)) IDispatchPtr PageSetup::GetParent ( );
__declspec(implementation_key(11342)) VARIANT_BOOL PageSetup::GetBlackAndWhite ( );
__declspec(implementation_key(11343)) void PageSetup::PutBlackAndWhite ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11344)) double PageSetup::GetBottomMargin ( );
__declspec(implementation_key(11345)) void PageSetup::PutBottomMargin ( double _arg1 );
__declspec(implementation_key(11346)) _bstr_t PageSetup::GetCenterFooter ( );
__declspec(implementation_key(11347)) void PageSetup::PutCenterFooter ( _bstr_t _arg1 );
__declspec(implementation_key(11348)) _bstr_t PageSetup::GetCenterHeader ( );
__declspec(implementation_key(11349)) void PageSetup::PutCenterHeader ( _bstr_t _arg1 );
__declspec(implementation_key(11350)) VARIANT_BOOL PageSetup::GetCenterHorizontally ( );
__declspec(implementation_key(11351)) void PageSetup::PutCenterHorizontally ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11352)) VARIANT_BOOL PageSetup::GetCenterVertically ( );
__declspec(implementation_key(11353)) void PageSetup::PutCenterVertically ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11354)) enum XlObjectSize PageSetup::GetChartSize ( );
__declspec(implementation_key(11355)) void PageSetup::PutChartSize ( enum XlObjectSize _arg1 );
__declspec(implementation_key(11356)) VARIANT_BOOL PageSetup::GetDraft ( );
__declspec(implementation_key(11357)) void PageSetup::PutDraft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11358)) long PageSetup::GetFirstPageNumber ( );
__declspec(implementation_key(11359)) void PageSetup::PutFirstPageNumber ( long _arg1 );
__declspec(implementation_key(11360)) _variant_t PageSetup::GetFitToPagesTall ( );
__declspec(implementation_key(11361)) void PageSetup::PutFitToPagesTall ( const _variant_t & _arg1 );
__declspec(implementation_key(11362)) _variant_t PageSetup::GetFitToPagesWide ( );
__declspec(implementation_key(11363)) void PageSetup::PutFitToPagesWide ( const _variant_t & _arg1 );
__declspec(implementation_key(11364)) double PageSetup::GetFooterMargin ( );
__declspec(implementation_key(11365)) void PageSetup::PutFooterMargin ( double _arg1 );
__declspec(implementation_key(11366)) double PageSetup::GetHeaderMargin ( );
__declspec(implementation_key(11367)) void PageSetup::PutHeaderMargin ( double _arg1 );
__declspec(implementation_key(11368)) _bstr_t PageSetup::GetLeftFooter ( );
__declspec(implementation_key(11369)) void PageSetup::PutLeftFooter ( _bstr_t _arg1 );
__declspec(implementation_key(11370)) _bstr_t PageSetup::GetLeftHeader ( );
__declspec(implementation_key(11371)) void PageSetup::PutLeftHeader ( _bstr_t _arg1 );
__declspec(implementation_key(11372)) double PageSetup::GetLeftMargin ( );
__declspec(implementation_key(11373)) void PageSetup::PutLeftMargin ( double _arg1 );
__declspec(implementation_key(11374)) enum XlOrder PageSetup::GetOrder ( );
__declspec(implementation_key(11375)) void PageSetup::PutOrder ( enum XlOrder _arg1 );
__declspec(implementation_key(11376)) enum XlPageOrientation PageSetup::GetOrientation ( );
__declspec(implementation_key(11377)) void PageSetup::PutOrientation ( enum XlPageOrientation _arg1 );
__declspec(implementation_key(11378)) enum XlPaperSize PageSetup::GetPaperSize ( );
__declspec(implementation_key(11379)) void PageSetup::PutPaperSize ( enum XlPaperSize _arg1 );
__declspec(implementation_key(11380)) _bstr_t PageSetup::GetPrintArea ( );
__declspec(implementation_key(11381)) void PageSetup::PutPrintArea ( _bstr_t _arg1 );
__declspec(implementation_key(11382)) VARIANT_BOOL PageSetup::GetPrintGridlines ( );
__declspec(implementation_key(11383)) void PageSetup::PutPrintGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11384)) VARIANT_BOOL PageSetup::GetPrintHeadings ( );
__declspec(implementation_key(11385)) void PageSetup::PutPrintHeadings ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11386)) VARIANT_BOOL PageSetup::GetPrintNotes ( );
__declspec(implementation_key(11387)) void PageSetup::PutPrintNotes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11388)) _variant_t PageSetup::GetPrintQuality ( const _variant_t & Index );
__declspec(implementation_key(11389)) void PageSetup::PutPrintQuality ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(11390)) _bstr_t PageSetup::GetPrintTitleColumns ( );
__declspec(implementation_key(11391)) void PageSetup::PutPrintTitleColumns ( _bstr_t _arg1 );
__declspec(implementation_key(11392)) _bstr_t PageSetup::GetPrintTitleRows ( );
__declspec(implementation_key(11393)) void PageSetup::PutPrintTitleRows ( _bstr_t _arg1 );
__declspec(implementation_key(11394)) _bstr_t PageSetup::GetRightFooter ( );
__declspec(implementation_key(11395)) void PageSetup::PutRightFooter ( _bstr_t _arg1 );
__declspec(implementation_key(11396)) _bstr_t PageSetup::GetRightHeader ( );
__declspec(implementation_key(11397)) void PageSetup::PutRightHeader ( _bstr_t _arg1 );
__declspec(implementation_key(11398)) double PageSetup::GetRightMargin ( );
__declspec(implementation_key(11399)) void PageSetup::PutRightMargin ( double _arg1 );
__declspec(implementation_key(11400)) double PageSetup::GetTopMargin ( );
__declspec(implementation_key(11401)) void PageSetup::PutTopMargin ( double _arg1 );
__declspec(implementation_key(11402)) _variant_t PageSetup::GetZoom ( );
__declspec(implementation_key(11403)) void PageSetup::PutZoom ( const _variant_t & _arg1 );
__declspec(implementation_key(11404)) enum XlPrintLocation PageSetup::GetPrintComments ( );
__declspec(implementation_key(11405)) void PageSetup::PutPrintComments ( enum XlPrintLocation _arg1 );
__declspec(implementation_key(11406)) enum XlPrintErrors PageSetup::GetPrintErrors ( );
__declspec(implementation_key(11407)) void PageSetup::PutPrintErrors ( enum XlPrintErrors _arg1 );
__declspec(implementation_key(11408)) GraphicPtr PageSetup::GetCenterHeaderPicture ( );
__declspec(implementation_key(11409)) GraphicPtr PageSetup::GetCenterFooterPicture ( );
__declspec(implementation_key(11410)) GraphicPtr PageSetup::GetLeftHeaderPicture ( );
__declspec(implementation_key(11411)) GraphicPtr PageSetup::GetLeftFooterPicture ( );
__declspec(implementation_key(11412)) GraphicPtr PageSetup::GetRightHeaderPicture ( );
__declspec(implementation_key(11413)) GraphicPtr PageSetup::GetRightFooterPicture ( );
__declspec(implementation_key(11414)) _ApplicationPtr Names::GetApplication ( );
__declspec(implementation_key(11415)) enum XlCreator Names::GetCreator ( );
__declspec(implementation_key(11416)) IDispatchPtr Names::GetParent ( );
__declspec(implementation_key(11417)) NamePtr Names::Add ( const _variant_t & Name, const _variant_t & RefersTo, const _variant_t & Visible, const _variant_t & MacroType, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & NameLocal, const _variant_t & RefersToLocal, const _variant_t & CategoryLocal, const _variant_t & RefersToR1C1, const _variant_t & RefersToR1C1Local );
__declspec(implementation_key(11418)) NamePtr Names::Item ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo );
__declspec(implementation_key(11419)) NamePtr Names::_Default ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo );
__declspec(implementation_key(11420)) long Names::GetCount ( );
__declspec(implementation_key(11421)) IUnknownPtr Names::Get_NewEnum ( );
__declspec(implementation_key(11422)) _ApplicationPtr Name::GetApplication ( );
__declspec(implementation_key(11423)) enum XlCreator Name::GetCreator ( );
__declspec(implementation_key(11424)) IDispatchPtr Name::GetParent ( );
__declspec(implementation_key(11425)) _bstr_t Name::Get_Default ( );
__declspec(implementation_key(11426)) long Name::GetIndex ( );
__declspec(implementation_key(11427)) _bstr_t Name::GetCategory ( );
__declspec(implementation_key(11428)) void Name::PutCategory ( _bstr_t _arg1 );
__declspec(implementation_key(11429)) _bstr_t Name::GetCategoryLocal ( );
__declspec(implementation_key(11430)) void Name::PutCategoryLocal ( _bstr_t _arg1 );
__declspec(implementation_key(11431)) HRESULT Name::Delete ( );
__declspec(implementation_key(11432)) enum XlXLMMacroType Name::GetMacroType ( );
__declspec(implementation_key(11433)) void Name::PutMacroType ( enum XlXLMMacroType _arg1 );
__declspec(implementation_key(11434)) _bstr_t Name::GetName ( );
__declspec(implementation_key(11435)) void Name::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(11436)) _variant_t Name::GetRefersTo ( );
__declspec(implementation_key(11437)) void Name::PutRefersTo ( const _variant_t & _arg1 );
__declspec(implementation_key(11438)) _bstr_t Name::GetShortcutKey ( );
__declspec(implementation_key(11439)) void Name::PutShortcutKey ( _bstr_t _arg1 );
__declspec(implementation_key(11440)) _bstr_t Name::GetValue ( );
__declspec(implementation_key(11441)) void Name::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(11442)) VARIANT_BOOL Name::GetVisible ( );
__declspec(implementation_key(11443)) void Name::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11444)) _bstr_t Name::GetNameLocal ( );
__declspec(implementation_key(11445)) void Name::PutNameLocal ( _bstr_t _arg1 );
__declspec(implementation_key(11446)) _variant_t Name::GetRefersToLocal ( );
__declspec(implementation_key(11447)) void Name::PutRefersToLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(11448)) _variant_t Name::GetRefersToR1C1 ( );
__declspec(implementation_key(11449)) void Name::PutRefersToR1C1 ( const _variant_t & _arg1 );
__declspec(implementation_key(11450)) _variant_t Name::GetRefersToR1C1Local ( );
__declspec(implementation_key(11451)) void Name::PutRefersToR1C1Local ( const _variant_t & _arg1 );
__declspec(implementation_key(11452)) RangePtr Name::GetRefersToRange ( );
__declspec(implementation_key(11453)) _ApplicationPtr ChartObject::GetApplication ( );
__declspec(implementation_key(11454)) enum XlCreator ChartObject::GetCreator ( );
__declspec(implementation_key(11455)) IDispatchPtr ChartObject::GetParent ( );
__declspec(implementation_key(11456)) RangePtr ChartObject::GetBottomRightCell ( );
__declspec(implementation_key(11457)) _variant_t ChartObject::BringToFront ( );
__declspec(implementation_key(11458)) _variant_t ChartObject::Copy ( );
__declspec(implementation_key(11459)) _variant_t ChartObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(11460)) _variant_t ChartObject::Cut ( );
__declspec(implementation_key(11461)) _variant_t ChartObject::Delete ( );
__declspec(implementation_key(11462)) IDispatchPtr ChartObject::Duplicate ( );
__declspec(implementation_key(11463)) VARIANT_BOOL ChartObject::GetEnabled ( );
__declspec(implementation_key(11464)) void ChartObject::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11465)) double ChartObject::GetHeight ( );
__declspec(implementation_key(11466)) void ChartObject::PutHeight ( double _arg1 );
__declspec(implementation_key(11467)) long ChartObject::GetIndex ( );
__declspec(implementation_key(11468)) double ChartObject::GetLeft ( );
__declspec(implementation_key(11469)) void ChartObject::PutLeft ( double _arg1 );
__declspec(implementation_key(11470)) VARIANT_BOOL ChartObject::GetLocked ( );
__declspec(implementation_key(11471)) void ChartObject::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11472)) _bstr_t ChartObject::GetName ( );
__declspec(implementation_key(11473)) void ChartObject::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(11474)) _bstr_t ChartObject::GetOnAction ( );
__declspec(implementation_key(11475)) void ChartObject::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(11476)) _variant_t ChartObject::GetPlacement ( );
__declspec(implementation_key(11477)) void ChartObject::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(11478)) VARIANT_BOOL ChartObject::GetPrintObject ( );
__declspec(implementation_key(11479)) void ChartObject::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11480)) _variant_t ChartObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(11481)) _variant_t ChartObject::SendToBack ( );
__declspec(implementation_key(11482)) double ChartObject::GetTop ( );
__declspec(implementation_key(11483)) void ChartObject::PutTop ( double _arg1 );
__declspec(implementation_key(11484)) RangePtr ChartObject::GetTopLeftCell ( );
__declspec(implementation_key(11485)) VARIANT_BOOL ChartObject::GetVisible ( );
__declspec(implementation_key(11486)) void ChartObject::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11487)) double ChartObject::GetWidth ( );
__declspec(implementation_key(11488)) void ChartObject::PutWidth ( double _arg1 );
__declspec(implementation_key(11489)) long ChartObject::GetZOrder ( );
__declspec(implementation_key(11490)) ShapeRangePtr ChartObject::GetShapeRange ( );
__declspec(implementation_key(11491)) _variant_t ChartObject::Activate ( );
__declspec(implementation_key(11492)) _ChartPtr ChartObject::GetChart ( );
__declspec(implementation_key(11493)) VARIANT_BOOL ChartObject::GetProtectChartObject ( );
__declspec(implementation_key(11494)) void ChartObject::PutProtectChartObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11495)) VARIANT_BOOL ChartObject::GetRoundedCorners ( );
__declspec(implementation_key(11496)) void ChartObject::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11497)) BorderPtr ChartObject::GetBorder ( );
__declspec(implementation_key(11498)) InteriorPtr ChartObject::GetInterior ( );
__declspec(implementation_key(11499)) VARIANT_BOOL ChartObject::GetShadow ( );
__declspec(implementation_key(11500)) void ChartObject::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11501)) _ApplicationPtr ChartObjects::GetApplication ( );
__declspec(implementation_key(11502)) enum XlCreator ChartObjects::GetCreator ( );
__declspec(implementation_key(11503)) IDispatchPtr ChartObjects::GetParent ( );
__declspec(implementation_key(11504)) _variant_t ChartObjects::BringToFront ( );
__declspec(implementation_key(11505)) _variant_t ChartObjects::Copy ( );
__declspec(implementation_key(11506)) _variant_t ChartObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(11507)) _variant_t ChartObjects::Cut ( );
__declspec(implementation_key(11508)) _variant_t ChartObjects::Delete ( );
__declspec(implementation_key(11509)) IDispatchPtr ChartObjects::Duplicate ( );
__declspec(implementation_key(11510)) VARIANT_BOOL ChartObjects::GetEnabled ( );
__declspec(implementation_key(11511)) void ChartObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11512)) double ChartObjects::GetHeight ( );
__declspec(implementation_key(11513)) void ChartObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(11514)) double ChartObjects::GetLeft ( );
__declspec(implementation_key(11515)) void ChartObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(11516)) VARIANT_BOOL ChartObjects::GetLocked ( );
__declspec(implementation_key(11517)) void ChartObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11518)) _bstr_t ChartObjects::GetOnAction ( );
__declspec(implementation_key(11519)) void ChartObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(11520)) _variant_t ChartObjects::GetPlacement ( );
__declspec(implementation_key(11521)) void ChartObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(11522)) VARIANT_BOOL ChartObjects::GetPrintObject ( );
__declspec(implementation_key(11523)) void ChartObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11524)) _variant_t ChartObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(11525)) _variant_t ChartObjects::SendToBack ( );
__declspec(implementation_key(11526)) double ChartObjects::GetTop ( );
__declspec(implementation_key(11527)) void ChartObjects::PutTop ( double _arg1 );
__declspec(implementation_key(11528)) VARIANT_BOOL ChartObjects::GetVisible ( );
__declspec(implementation_key(11529)) void ChartObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11530)) double ChartObjects::GetWidth ( );
__declspec(implementation_key(11531)) void ChartObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(11532)) ShapeRangePtr ChartObjects::GetShapeRange ( );
__declspec(implementation_key(11533)) VARIANT_BOOL ChartObjects::GetRoundedCorners ( );
__declspec(implementation_key(11534)) void ChartObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11535)) BorderPtr ChartObjects::GetBorder ( );
__declspec(implementation_key(11536)) InteriorPtr ChartObjects::GetInterior ( );
__declspec(implementation_key(11537)) VARIANT_BOOL ChartObjects::GetShadow ( );
__declspec(implementation_key(11538)) void ChartObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11539)) ChartObjectPtr ChartObjects::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(11540)) long ChartObjects::GetCount ( );
__declspec(implementation_key(11541)) GroupObjectPtr ChartObjects::Group ( );
__declspec(implementation_key(11542)) IDispatchPtr ChartObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(11543)) IUnknownPtr ChartObjects::_NewEnum ( );
__declspec(implementation_key(11544)) _ApplicationPtr Mailer::GetApplication ( );
__declspec(implementation_key(11545)) enum XlCreator Mailer::GetCreator ( );
__declspec(implementation_key(11546)) IDispatchPtr Mailer::GetParent ( );
__declspec(implementation_key(11547)) _variant_t Mailer::GetBCCRecipients ( );
__declspec(implementation_key(11548)) void Mailer::PutBCCRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(11549)) _variant_t Mailer::GetCCRecipients ( );
__declspec(implementation_key(11550)) void Mailer::PutCCRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(11551)) _variant_t Mailer::GetEnclosures ( );
__declspec(implementation_key(11552)) void Mailer::PutEnclosures ( const _variant_t & _arg1 );
__declspec(implementation_key(11553)) VARIANT_BOOL Mailer::GetReceived ( );
__declspec(implementation_key(11554)) DATE Mailer::GetSendDateTime ( );
__declspec(implementation_key(11555)) _bstr_t Mailer::GetSender ( );
__declspec(implementation_key(11556)) _bstr_t Mailer::GetSubject ( );
__declspec(implementation_key(11557)) void Mailer::PutSubject ( _bstr_t _arg1 );
__declspec(implementation_key(11558)) _variant_t Mailer::GetToRecipients ( );
__declspec(implementation_key(11559)) void Mailer::PutToRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(11560)) _variant_t Mailer::GetWhichAddress ( );
__declspec(implementation_key(11561)) void Mailer::PutWhichAddress ( const _variant_t & _arg1 );
__declspec(implementation_key(11562)) _ApplicationPtr CustomViews::GetApplication ( );
__declspec(implementation_key(11563)) enum XlCreator CustomViews::GetCreator ( );
__declspec(implementation_key(11564)) IDispatchPtr CustomViews::GetParent ( );
__declspec(implementation_key(11565)) long CustomViews::GetCount ( );
__declspec(implementation_key(11566)) CustomViewPtr CustomViews::Item ( const _variant_t & ViewName );
__declspec(implementation_key(11567)) CustomViewPtr CustomViews::Add ( _bstr_t ViewName, const _variant_t & PrintSettings, const _variant_t & RowColSettings );
__declspec(implementation_key(11568)) CustomViewPtr CustomViews::Get_Default ( const _variant_t & ViewName );
__declspec(implementation_key(11569)) IUnknownPtr CustomViews::Get_NewEnum ( );
__declspec(implementation_key(11570)) _ApplicationPtr CustomView::GetApplication ( );
__declspec(implementation_key(11571)) enum XlCreator CustomView::GetCreator ( );
__declspec(implementation_key(11572)) IDispatchPtr CustomView::GetParent ( );
__declspec(implementation_key(11573)) _bstr_t CustomView::GetName ( );
__declspec(implementation_key(11574)) VARIANT_BOOL CustomView::GetPrintSettings ( );
__declspec(implementation_key(11575)) VARIANT_BOOL CustomView::GetRowColSettings ( );
__declspec(implementation_key(11576)) HRESULT CustomView::Show ( );
__declspec(implementation_key(11577)) HRESULT CustomView::Delete ( );
__declspec(implementation_key(11578)) _ApplicationPtr FormatConditions::GetApplication ( );
__declspec(implementation_key(11579)) enum XlCreator FormatConditions::GetCreator ( );
__declspec(implementation_key(11580)) IDispatchPtr FormatConditions::GetParent ( );
__declspec(implementation_key(11581)) long FormatConditions::GetCount ( );
__declspec(implementation_key(11582)) FormatConditionPtr FormatConditions::Item ( const _variant_t & Index );
__declspec(implementation_key(11583)) FormatConditionPtr FormatConditions::Add ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(11584)) FormatConditionPtr FormatConditions::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11585)) IUnknownPtr FormatConditions::Get_NewEnum ( );
__declspec(implementation_key(11586)) HRESULT FormatConditions::Delete ( );
__declspec(implementation_key(11587)) _ApplicationPtr FormatCondition::GetApplication ( );
__declspec(implementation_key(11588)) enum XlCreator FormatCondition::GetCreator ( );
__declspec(implementation_key(11589)) IDispatchPtr FormatCondition::GetParent ( );
__declspec(implementation_key(11590)) HRESULT FormatCondition::Modify ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(11591)) long FormatCondition::GetType ( );
__declspec(implementation_key(11592)) long FormatCondition::GetOperator ( );
__declspec(implementation_key(11593)) _bstr_t FormatCondition::GetFormula1 ( );
__declspec(implementation_key(11594)) _bstr_t FormatCondition::GetFormula2 ( );
__declspec(implementation_key(11595)) InteriorPtr FormatCondition::GetInterior ( );
__declspec(implementation_key(11596)) BordersPtr FormatCondition::GetBorders ( );
__declspec(implementation_key(11597)) FontPtr FormatCondition::GetFont ( );
__declspec(implementation_key(11598)) HRESULT FormatCondition::Delete ( );
__declspec(implementation_key(11599)) _ApplicationPtr Comments::GetApplication ( );
__declspec(implementation_key(11600)) enum XlCreator Comments::GetCreator ( );
__declspec(implementation_key(11601)) IDispatchPtr Comments::GetParent ( );
__declspec(implementation_key(11602)) long Comments::GetCount ( );
__declspec(implementation_key(11603)) CommentPtr Comments::Item ( long Index );
__declspec(implementation_key(11604)) CommentPtr Comments::Get_Default ( long Index );
__declspec(implementation_key(11605)) IUnknownPtr Comments::Get_NewEnum ( );
__declspec(implementation_key(11606)) _ApplicationPtr Comment::GetApplication ( );
__declspec(implementation_key(11607)) enum XlCreator Comment::GetCreator ( );
__declspec(implementation_key(11608)) IDispatchPtr Comment::GetParent ( );
__declspec(implementation_key(11609)) _bstr_t Comment::GetAuthor ( );
__declspec(implementation_key(11610)) ShapePtr Comment::GetShape ( );
__declspec(implementation_key(11611)) VARIANT_BOOL Comment::GetVisible ( );
__declspec(implementation_key(11612)) void Comment::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11613)) _bstr_t Comment::Text ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Overwrite );
__declspec(implementation_key(11614)) HRESULT Comment::Delete ( );
__declspec(implementation_key(11615)) CommentPtr Comment::Next ( );
__declspec(implementation_key(11616)) CommentPtr Comment::Previous ( );
__declspec(implementation_key(11617)) HRESULT RefreshEvents::BeforeRefresh ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(11618)) HRESULT RefreshEvents::AfterRefresh ( VARIANT_BOOL Success );
__declspec(implementation_key(11619)) _ApplicationPtr _QueryTable::GetApplication ( );
__declspec(implementation_key(11620)) enum XlCreator _QueryTable::GetCreator ( );
__declspec(implementation_key(11621)) IDispatchPtr _QueryTable::GetParent ( );
__declspec(implementation_key(11622)) _bstr_t _QueryTable::GetName ( );
__declspec(implementation_key(11623)) void _QueryTable::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(11624)) VARIANT_BOOL _QueryTable::GetFieldNames ( );
__declspec(implementation_key(11625)) void _QueryTable::PutFieldNames ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11626)) VARIANT_BOOL _QueryTable::GetRowNumbers ( );
__declspec(implementation_key(11627)) void _QueryTable::PutRowNumbers ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11628)) VARIANT_BOOL _QueryTable::GetFillAdjacentFormulas ( );
__declspec(implementation_key(11629)) void _QueryTable::PutFillAdjacentFormulas ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11630)) VARIANT_BOOL _QueryTable::GetHasAutoFormat ( );
__declspec(implementation_key(11631)) void _QueryTable::PutHasAutoFormat ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11632)) VARIANT_BOOL _QueryTable::GetRefreshOnFileOpen ( );
__declspec(implementation_key(11633)) void _QueryTable::PutRefreshOnFileOpen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11634)) VARIANT_BOOL _QueryTable::GetRefreshing ( );
__declspec(implementation_key(11635)) VARIANT_BOOL _QueryTable::GetFetchedRowOverflow ( );
__declspec(implementation_key(11636)) VARIANT_BOOL _QueryTable::GetBackgroundQuery ( );
__declspec(implementation_key(11637)) void _QueryTable::PutBackgroundQuery ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11638)) HRESULT _QueryTable::CancelRefresh ( );
__declspec(implementation_key(11639)) enum XlCellInsertionMode _QueryTable::GetRefreshStyle ( );
__declspec(implementation_key(11640)) void _QueryTable::PutRefreshStyle ( enum XlCellInsertionMode _arg1 );
__declspec(implementation_key(11641)) VARIANT_BOOL _QueryTable::GetEnableRefresh ( );
__declspec(implementation_key(11642)) void _QueryTable::PutEnableRefresh ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11643)) VARIANT_BOOL _QueryTable::GetSavePassword ( );
__declspec(implementation_key(11644)) void _QueryTable::PutSavePassword ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11645)) RangePtr _QueryTable::GetDestination ( );
__declspec(implementation_key(11646)) _variant_t _QueryTable::GetConnection ( );
__declspec(implementation_key(11647)) void _QueryTable::PutConnection ( const _variant_t & _arg1 );
__declspec(implementation_key(11648)) _variant_t _QueryTable::GetSql ( );
__declspec(implementation_key(11649)) void _QueryTable::PutSql ( const _variant_t & _arg1 );
__declspec(implementation_key(11650)) _bstr_t _QueryTable::GetPostText ( );
__declspec(implementation_key(11651)) void _QueryTable::PutPostText ( _bstr_t _arg1 );
__declspec(implementation_key(11652)) RangePtr _QueryTable::GetResultRange ( );
__declspec(implementation_key(11653)) HRESULT _QueryTable::Delete ( );
__declspec(implementation_key(11654)) VARIANT_BOOL _QueryTable::Refresh ( const _variant_t & BackgroundQuery );
__declspec(implementation_key(11655)) ParametersPtr _QueryTable::GetParameters ( );
__declspec(implementation_key(11656)) IDispatchPtr _QueryTable::GetRecordset ( );
__declspec(implementation_key(11657)) void _QueryTable::PutRefRecordset ( IDispatch * _arg1 );
__declspec(implementation_key(11658)) VARIANT_BOOL _QueryTable::GetSaveData ( );
__declspec(implementation_key(11659)) void _QueryTable::PutSaveData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11660)) VARIANT_BOOL _QueryTable::GetTablesOnlyFromHTML ( );
__declspec(implementation_key(11661)) void _QueryTable::PutTablesOnlyFromHTML ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11662)) VARIANT_BOOL _QueryTable::GetEnableEditing ( );
__declspec(implementation_key(11663)) void _QueryTable::PutEnableEditing ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11664)) long _QueryTable::GetTextFilePlatform ( );
__declspec(implementation_key(11665)) void _QueryTable::PutTextFilePlatform ( long _arg1 );
__declspec(implementation_key(11666)) long _QueryTable::GetTextFileStartRow ( );
__declspec(implementation_key(11667)) void _QueryTable::PutTextFileStartRow ( long _arg1 );
__declspec(implementation_key(11668)) enum XlTextParsingType _QueryTable::GetTextFileParseType ( );
__declspec(implementation_key(11669)) void _QueryTable::PutTextFileParseType ( enum XlTextParsingType _arg1 );
__declspec(implementation_key(11670)) enum XlTextQualifier _QueryTable::GetTextFileTextQualifier ( );
__declspec(implementation_key(11671)) void _QueryTable::PutTextFileTextQualifier ( enum XlTextQualifier _arg1 );
__declspec(implementation_key(11672)) VARIANT_BOOL _QueryTable::GetTextFileConsecutiveDelimiter ( );
__declspec(implementation_key(11673)) void _QueryTable::PutTextFileConsecutiveDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11674)) VARIANT_BOOL _QueryTable::GetTextFileTabDelimiter ( );
__declspec(implementation_key(11675)) void _QueryTable::PutTextFileTabDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11676)) VARIANT_BOOL _QueryTable::GetTextFileSemicolonDelimiter ( );
__declspec(implementation_key(11677)) void _QueryTable::PutTextFileSemicolonDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11678)) VARIANT_BOOL _QueryTable::GetTextFileCommaDelimiter ( );
__declspec(implementation_key(11679)) void _QueryTable::PutTextFileCommaDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11680)) VARIANT_BOOL _QueryTable::GetTextFileSpaceDelimiter ( );
__declspec(implementation_key(11681)) void _QueryTable::PutTextFileSpaceDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11682)) _bstr_t _QueryTable::GetTextFileOtherDelimiter ( );
__declspec(implementation_key(11683)) void _QueryTable::PutTextFileOtherDelimiter ( _bstr_t _arg1 );
__declspec(implementation_key(11684)) _variant_t _QueryTable::GetTextFileColumnDataTypes ( );
__declspec(implementation_key(11685)) void _QueryTable::PutTextFileColumnDataTypes ( const _variant_t & _arg1 );
__declspec(implementation_key(11686)) _variant_t _QueryTable::GetTextFileFixedColumnWidths ( );
__declspec(implementation_key(11687)) void _QueryTable::PutTextFileFixedColumnWidths ( const _variant_t & _arg1 );
__declspec(implementation_key(11688)) VARIANT_BOOL _QueryTable::GetPreserveColumnInfo ( );
__declspec(implementation_key(11689)) void _QueryTable::PutPreserveColumnInfo ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11690)) VARIANT_BOOL _QueryTable::GetPreserveFormatting ( );
__declspec(implementation_key(11691)) void _QueryTable::PutPreserveFormatting ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11692)) VARIANT_BOOL _QueryTable::GetAdjustColumnWidth ( );
__declspec(implementation_key(11693)) void _QueryTable::PutAdjustColumnWidth ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11694)) _variant_t _QueryTable::GetCommandText ( );
__declspec(implementation_key(11695)) void _QueryTable::PutCommandText ( const _variant_t & _arg1 );
__declspec(implementation_key(11696)) enum XlCmdType _QueryTable::GetCommandType ( );
__declspec(implementation_key(11697)) void _QueryTable::PutCommandType ( enum XlCmdType _arg1 );
__declspec(implementation_key(11698)) VARIANT_BOOL _QueryTable::GetTextFilePromptOnRefresh ( );
__declspec(implementation_key(11699)) void _QueryTable::PutTextFilePromptOnRefresh ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11700)) enum XlQueryType _QueryTable::GetQueryType ( );
__declspec(implementation_key(11701)) VARIANT_BOOL _QueryTable::GetMaintainConnection ( );
__declspec(implementation_key(11702)) void _QueryTable::PutMaintainConnection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11703)) _bstr_t _QueryTable::GetTextFileDecimalSeparator ( );
__declspec(implementation_key(11704)) void _QueryTable::PutTextFileDecimalSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(11705)) _bstr_t _QueryTable::GetTextFileThousandsSeparator ( );
__declspec(implementation_key(11706)) void _QueryTable::PutTextFileThousandsSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(11707)) long _QueryTable::GetRefreshPeriod ( );
__declspec(implementation_key(11708)) void _QueryTable::PutRefreshPeriod ( long _arg1 );
__declspec(implementation_key(11709)) HRESULT _QueryTable::ResetTimer ( );
__declspec(implementation_key(11710)) enum XlWebSelectionType _QueryTable::GetWebSelectionType ( );
__declspec(implementation_key(11711)) void _QueryTable::PutWebSelectionType ( enum XlWebSelectionType _arg1 );
__declspec(implementation_key(11712)) enum XlWebFormatting _QueryTable::GetWebFormatting ( );
__declspec(implementation_key(11713)) void _QueryTable::PutWebFormatting ( enum XlWebFormatting _arg1 );
__declspec(implementation_key(11714)) _bstr_t _QueryTable::GetWebTables ( );
__declspec(implementation_key(11715)) void _QueryTable::PutWebTables ( _bstr_t _arg1 );
__declspec(implementation_key(11716)) VARIANT_BOOL _QueryTable::GetWebPreFormattedTextToColumns ( );
__declspec(implementation_key(11717)) void _QueryTable::PutWebPreFormattedTextToColumns ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11718)) VARIANT_BOOL _QueryTable::GetWebSingleBlockTextImport ( );
__declspec(implementation_key(11719)) void _QueryTable::PutWebSingleBlockTextImport ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11720)) VARIANT_BOOL _QueryTable::GetWebDisableDateRecognition ( );
__declspec(implementation_key(11721)) void _QueryTable::PutWebDisableDateRecognition ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11722)) VARIANT_BOOL _QueryTable::GetWebConsecutiveDelimitersAsOne ( );
__declspec(implementation_key(11723)) void _QueryTable::PutWebConsecutiveDelimitersAsOne ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11724)) VARIANT_BOOL _QueryTable::GetWebDisableRedirections ( );
__declspec(implementation_key(11725)) void _QueryTable::PutWebDisableRedirections ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11726)) _variant_t _QueryTable::GetEditWebPage ( );
__declspec(implementation_key(11727)) void _QueryTable::PutEditWebPage ( const _variant_t & _arg1 );
__declspec(implementation_key(11728)) _bstr_t _QueryTable::GetSourceConnectionFile ( );
__declspec(implementation_key(11729)) void _QueryTable::PutSourceConnectionFile ( _bstr_t _arg1 );
__declspec(implementation_key(11730)) _bstr_t _QueryTable::GetSourceDataFile ( );
__declspec(implementation_key(11731)) void _QueryTable::PutSourceDataFile ( _bstr_t _arg1 );
__declspec(implementation_key(11732)) enum XlRobustConnect _QueryTable::GetRobustConnect ( );
__declspec(implementation_key(11733)) void _QueryTable::PutRobustConnect ( enum XlRobustConnect _arg1 );
__declspec(implementation_key(11734)) VARIANT_BOOL _QueryTable::GetTextFileTrailingMinusNumbers ( );
__declspec(implementation_key(11735)) void _QueryTable::PutTextFileTrailingMinusNumbers ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11736)) HRESULT _QueryTable::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords );
__declspec(implementation_key(11737)) _ApplicationPtr QueryTables::GetApplication ( );
__declspec(implementation_key(11738)) enum XlCreator QueryTables::GetCreator ( );
__declspec(implementation_key(11739)) IDispatchPtr QueryTables::GetParent ( );
__declspec(implementation_key(11740)) long QueryTables::GetCount ( );
__declspec(implementation_key(11741)) _QueryTablePtr QueryTables::Add ( const _variant_t & Connection, struct Range * Destination, const _variant_t & Sql );
__declspec(implementation_key(11742)) _QueryTablePtr QueryTables::Item ( const _variant_t & Index );
__declspec(implementation_key(11743)) _QueryTablePtr QueryTables::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11744)) IUnknownPtr QueryTables::_NewEnum ( );
__declspec(implementation_key(11745)) _ApplicationPtr Parameter::GetApplication ( );
__declspec(implementation_key(11746)) enum XlCreator Parameter::GetCreator ( );
__declspec(implementation_key(11747)) IDispatchPtr Parameter::GetParent ( );
__declspec(implementation_key(11748)) enum XlParameterDataType Parameter::GetDataType ( );
__declspec(implementation_key(11749)) void Parameter::PutDataType ( enum XlParameterDataType _arg1 );
__declspec(implementation_key(11750)) enum XlParameterType Parameter::GetType ( );
__declspec(implementation_key(11751)) _bstr_t Parameter::GetPromptString ( );
__declspec(implementation_key(11752)) _variant_t Parameter::GetValue ( );
__declspec(implementation_key(11753)) RangePtr Parameter::GetSourceRange ( );
__declspec(implementation_key(11754)) _bstr_t Parameter::GetName ( );
__declspec(implementation_key(11755)) void Parameter::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(11756)) HRESULT Parameter::SetParam ( enum XlParameterType Type, const _variant_t & Value );
__declspec(implementation_key(11757)) VARIANT_BOOL Parameter::GetRefreshOnChange ( );
__declspec(implementation_key(11758)) void Parameter::PutRefreshOnChange ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11759)) _ApplicationPtr Parameters::GetApplication ( );
__declspec(implementation_key(11760)) enum XlCreator Parameters::GetCreator ( );
__declspec(implementation_key(11761)) IDispatchPtr Parameters::GetParent ( );
__declspec(implementation_key(11762)) ParameterPtr Parameters::Add ( _bstr_t Name, const _variant_t & iDataType );
__declspec(implementation_key(11763)) long Parameters::GetCount ( );
__declspec(implementation_key(11764)) ParameterPtr Parameters::Item ( const _variant_t & Index );
__declspec(implementation_key(11765)) ParameterPtr Parameters::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11766)) HRESULT Parameters::Delete ( );
__declspec(implementation_key(11767)) IUnknownPtr Parameters::_NewEnum ( );
__declspec(implementation_key(11768)) _ApplicationPtr ODBCError::GetApplication ( );
__declspec(implementation_key(11769)) enum XlCreator ODBCError::GetCreator ( );
__declspec(implementation_key(11770)) IDispatchPtr ODBCError::GetParent ( );
__declspec(implementation_key(11771)) _bstr_t ODBCError::GetSqlState ( );
__declspec(implementation_key(11772)) _bstr_t ODBCError::GetErrorString ( );
__declspec(implementation_key(11773)) _ApplicationPtr ODBCErrors::GetApplication ( );
__declspec(implementation_key(11774)) enum XlCreator ODBCErrors::GetCreator ( );
__declspec(implementation_key(11775)) IDispatchPtr ODBCErrors::GetParent ( );
__declspec(implementation_key(11776)) long ODBCErrors::GetCount ( );
__declspec(implementation_key(11777)) ODBCErrorPtr ODBCErrors::Item ( long Index );
__declspec(implementation_key(11778)) ODBCErrorPtr ODBCErrors::Get_Default ( long Index );
__declspec(implementation_key(11779)) IUnknownPtr ODBCErrors::_NewEnum ( );
__declspec(implementation_key(11780)) _ApplicationPtr Validation::GetApplication ( );
__declspec(implementation_key(11781)) enum XlCreator Validation::GetCreator ( );
__declspec(implementation_key(11782)) IDispatchPtr Validation::GetParent ( );
__declspec(implementation_key(11783)) HRESULT Validation::Add ( enum XlDVType Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(11784)) long Validation::GetAlertStyle ( );
__declspec(implementation_key(11785)) VARIANT_BOOL Validation::GetIgnoreBlank ( );
__declspec(implementation_key(11786)) void Validation::PutIgnoreBlank ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11787)) long Validation::GetIMEMode ( );
__declspec(implementation_key(11788)) void Validation::PutIMEMode ( long _arg1 );
__declspec(implementation_key(11789)) VARIANT_BOOL Validation::GetInCellDropdown ( );
__declspec(implementation_key(11790)) void Validation::PutInCellDropdown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11791)) HRESULT Validation::Delete ( );
__declspec(implementation_key(11792)) _bstr_t Validation::GetErrorMessage ( );
__declspec(implementation_key(11793)) void Validation::PutErrorMessage ( _bstr_t _arg1 );
__declspec(implementation_key(11794)) _bstr_t Validation::GetErrorTitle ( );
__declspec(implementation_key(11795)) void Validation::PutErrorTitle ( _bstr_t _arg1 );
__declspec(implementation_key(11796)) _bstr_t Validation::GetInputMessage ( );
__declspec(implementation_key(11797)) void Validation::PutInputMessage ( _bstr_t _arg1 );
__declspec(implementation_key(11798)) _bstr_t Validation::GetInputTitle ( );
__declspec(implementation_key(11799)) void Validation::PutInputTitle ( _bstr_t _arg1 );
__declspec(implementation_key(11800)) _bstr_t Validation::GetFormula1 ( );
__declspec(implementation_key(11801)) _bstr_t Validation::GetFormula2 ( );
__declspec(implementation_key(11802)) HRESULT Validation::Modify ( const _variant_t & Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(11803)) long Validation::GetOperator ( );
__declspec(implementation_key(11804)) VARIANT_BOOL Validation::GetShowError ( );
__declspec(implementation_key(11805)) void Validation::PutShowError ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11806)) VARIANT_BOOL Validation::GetShowInput ( );
__declspec(implementation_key(11807)) void Validation::PutShowInput ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11808)) long Validation::GetType ( );
__declspec(implementation_key(11809)) VARIANT_BOOL Validation::GetValue ( );
__declspec(implementation_key(11810)) _ApplicationPtr Hyperlinks::GetApplication ( );
__declspec(implementation_key(11811)) enum XlCreator Hyperlinks::GetCreator ( );
__declspec(implementation_key(11812)) IDispatchPtr Hyperlinks::GetParent ( );
__declspec(implementation_key(11813)) IDispatchPtr Hyperlinks::Add ( IDispatch * Anchor, _bstr_t Address, const _variant_t & SubAddress, const _variant_t & ScreenTip, const _variant_t & TextToDisplay );
__declspec(implementation_key(11814)) long Hyperlinks::GetCount ( );
__declspec(implementation_key(11815)) HyperlinkPtr Hyperlinks::GetItem ( const _variant_t & Index );
__declspec(implementation_key(11816)) HyperlinkPtr Hyperlinks::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11817)) IUnknownPtr Hyperlinks::Get_NewEnum ( );
__declspec(implementation_key(11818)) HRESULT Hyperlinks::Delete ( );
__declspec(implementation_key(11819)) _ApplicationPtr Hyperlink::GetApplication ( );
__declspec(implementation_key(11820)) enum XlCreator Hyperlink::GetCreator ( );
__declspec(implementation_key(11821)) IDispatchPtr Hyperlink::GetParent ( );
__declspec(implementation_key(11822)) _bstr_t Hyperlink::GetName ( );
__declspec(implementation_key(11823)) RangePtr Hyperlink::GetRange ( );
__declspec(implementation_key(11824)) ShapePtr Hyperlink::GetShape ( );
__declspec(implementation_key(11825)) _bstr_t Hyperlink::GetSubAddress ( );
__declspec(implementation_key(11826)) void Hyperlink::PutSubAddress ( _bstr_t _arg1 );
__declspec(implementation_key(11827)) _bstr_t Hyperlink::GetAddress ( );
__declspec(implementation_key(11828)) void Hyperlink::PutAddress ( _bstr_t _arg1 );
__declspec(implementation_key(11829)) long Hyperlink::GetType ( );
__declspec(implementation_key(11830)) HRESULT Hyperlink::AddToFavorites ( );
__declspec(implementation_key(11831)) HRESULT Hyperlink::Delete ( );
__declspec(implementation_key(11832)) HRESULT Hyperlink::Follow ( const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo );
__declspec(implementation_key(11833)) _bstr_t Hyperlink::GetEmailSubject ( );
__declspec(implementation_key(11834)) void Hyperlink::PutEmailSubject ( _bstr_t _arg1 );
__declspec(implementation_key(11835)) _bstr_t Hyperlink::GetScreenTip ( );
__declspec(implementation_key(11836)) void Hyperlink::PutScreenTip ( _bstr_t _arg1 );
__declspec(implementation_key(11837)) _bstr_t Hyperlink::GetTextToDisplay ( );
__declspec(implementation_key(11838)) void Hyperlink::PutTextToDisplay ( _bstr_t _arg1 );
__declspec(implementation_key(11839)) HRESULT Hyperlink::CreateNewDocument ( _bstr_t Filename, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite );
__declspec(implementation_key(11840)) _ApplicationPtr AutoFilter::GetApplication ( );
__declspec(implementation_key(11841)) enum XlCreator AutoFilter::GetCreator ( );
__declspec(implementation_key(11842)) IDispatchPtr AutoFilter::GetParent ( );
__declspec(implementation_key(11843)) RangePtr AutoFilter::GetRange ( );
__declspec(implementation_key(11844)) FiltersPtr AutoFilter::GetFilters ( );
__declspec(implementation_key(11845)) _ApplicationPtr Filters::GetApplication ( );
__declspec(implementation_key(11846)) enum XlCreator Filters::GetCreator ( );
__declspec(implementation_key(11847)) IDispatchPtr Filters::GetParent ( );
__declspec(implementation_key(11848)) long Filters::GetCount ( );
__declspec(implementation_key(11849)) FilterPtr Filters::Get_Default ( long Index );
__declspec(implementation_key(11850)) FilterPtr Filters::GetItem ( long Index );
__declspec(implementation_key(11851)) IUnknownPtr Filters::Get_NewEnum ( );
__declspec(implementation_key(11852)) _ApplicationPtr Filter::GetApplication ( );
__declspec(implementation_key(11853)) enum XlCreator Filter::GetCreator ( );
__declspec(implementation_key(11854)) IDispatchPtr Filter::GetParent ( );
__declspec(implementation_key(11855)) VARIANT_BOOL Filter::GetOn ( );
__declspec(implementation_key(11856)) _variant_t Filter::GetCriteria1 ( );
__declspec(implementation_key(11857)) enum XlAutoFilterOperator Filter::GetOperator ( );
__declspec(implementation_key(11858)) _variant_t Filter::GetCriteria2 ( );
__declspec(implementation_key(11859)) _ApplicationPtr AutoCorrect::GetApplication ( );
__declspec(implementation_key(11860)) enum XlCreator AutoCorrect::GetCreator ( );
__declspec(implementation_key(11861)) IDispatchPtr AutoCorrect::GetParent ( );
__declspec(implementation_key(11862)) _variant_t AutoCorrect::AddReplacement ( _bstr_t What, _bstr_t Replacement );
__declspec(implementation_key(11863)) VARIANT_BOOL AutoCorrect::GetCapitalizeNamesOfDays ( );
__declspec(implementation_key(11864)) void AutoCorrect::PutCapitalizeNamesOfDays ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11865)) _variant_t AutoCorrect::DeleteReplacement ( _bstr_t What );
__declspec(implementation_key(11866)) _variant_t AutoCorrect::GetReplacementList ( const _variant_t & Index );
__declspec(implementation_key(11867)) void AutoCorrect::PutReplacementList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(11868)) VARIANT_BOOL AutoCorrect::GetJOEReplaceText ( );
__declspec(implementation_key(11869)) void AutoCorrect::PutJOEReplaceText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11870)) VARIANT_BOOL AutoCorrect::GetTwoInitialCapitals ( );
__declspec(implementation_key(11871)) void AutoCorrect::PutTwoInitialCapitals ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11872)) VARIANT_BOOL AutoCorrect::GetCorrectSentenceCap ( );
__declspec(implementation_key(11873)) void AutoCorrect::PutCorrectSentenceCap ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11874)) VARIANT_BOOL AutoCorrect::GetCorrectCapsLock ( );
__declspec(implementation_key(11875)) void AutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11876)) VARIANT_BOOL AutoCorrect::GetDisplayAutoCorrectOptions ( );
__declspec(implementation_key(11877)) void AutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11878)) _ApplicationPtr Border::GetApplication ( );
__declspec(implementation_key(11879)) enum XlCreator Border::GetCreator ( );
__declspec(implementation_key(11880)) IDispatchPtr Border::GetParent ( );
__declspec(implementation_key(11881)) _variant_t Border::GetColor ( );
__declspec(implementation_key(11882)) void Border::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(11883)) _variant_t Border::GetColorIndex ( );
__declspec(implementation_key(11884)) void Border::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(11885)) _variant_t Border::GetLineStyle ( );
__declspec(implementation_key(11886)) void Border::PutLineStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(11887)) _variant_t Border::GetWeight ( );
__declspec(implementation_key(11888)) void Border::PutWeight ( const _variant_t & _arg1 );
__declspec(implementation_key(11889)) _ApplicationPtr Interior::GetApplication ( );
__declspec(implementation_key(11890)) enum XlCreator Interior::GetCreator ( );
__declspec(implementation_key(11891)) IDispatchPtr Interior::GetParent ( );
__declspec(implementation_key(11892)) _variant_t Interior::GetColor ( );
__declspec(implementation_key(11893)) void Interior::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(11894)) _variant_t Interior::GetColorIndex ( );
__declspec(implementation_key(11895)) void Interior::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(11896)) _variant_t Interior::GetInvertIfNegative ( );
__declspec(implementation_key(11897)) void Interior::PutInvertIfNegative ( const _variant_t & _arg1 );
__declspec(implementation_key(11898)) _variant_t Interior::GetPattern ( );
__declspec(implementation_key(11899)) void Interior::PutPattern ( const _variant_t & _arg1 );
__declspec(implementation_key(11900)) _variant_t Interior::GetPatternColor ( );
__declspec(implementation_key(11901)) void Interior::PutPatternColor ( const _variant_t & _arg1 );
__declspec(implementation_key(11902)) _variant_t Interior::GetPatternColorIndex ( );
__declspec(implementation_key(11903)) void Interior::PutPatternColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(11904)) _ApplicationPtr ChartFillFormat::GetApplication ( );
__declspec(implementation_key(11905)) enum XlCreator ChartFillFormat::GetCreator ( );
__declspec(implementation_key(11906)) IDispatchPtr ChartFillFormat::GetParent ( );
__declspec(implementation_key(11907)) HRESULT ChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree );
__declspec(implementation_key(11908)) HRESULT ChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant );
__declspec(implementation_key(11909)) HRESULT ChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(11910)) HRESULT ChartFillFormat::Solid ( );
__declspec(implementation_key(11911)) HRESULT ChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(11912)) HRESULT ChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement );
__declspec(implementation_key(11913)) HRESULT ChartFillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(11914)) HRESULT ChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(11915)) ChartColorFormatPtr ChartFillFormat::GetBackColor ( );
__declspec(implementation_key(11916)) ChartColorFormatPtr ChartFillFormat::GetForeColor ( );
__declspec(implementation_key(11917)) enum Office::MsoGradientColorType ChartFillFormat::GetGradientColorType ( );
__declspec(implementation_key(11918)) float ChartFillFormat::GetGradientDegree ( );
__declspec(implementation_key(11919)) enum Office::MsoGradientStyle ChartFillFormat::GetGradientStyle ( );
__declspec(implementation_key(11920)) long ChartFillFormat::GetGradientVariant ( );
__declspec(implementation_key(11921)) enum Office::MsoPatternType ChartFillFormat::GetPattern ( );
__declspec(implementation_key(11922)) enum Office::MsoPresetGradientType ChartFillFormat::GetPresetGradientType ( );
__declspec(implementation_key(11923)) enum Office::MsoPresetTexture ChartFillFormat::GetPresetTexture ( );
__declspec(implementation_key(11924)) _bstr_t ChartFillFormat::GetTextureName ( );
__declspec(implementation_key(11925)) enum Office::MsoTextureType ChartFillFormat::GetTextureType ( );
__declspec(implementation_key(11926)) enum Office::MsoFillType ChartFillFormat::GetType ( );
__declspec(implementation_key(11927)) enum Office::MsoTriState ChartFillFormat::GetVisible ( );
__declspec(implementation_key(11928)) void ChartFillFormat::PutVisible ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(11929)) _ApplicationPtr ChartColorFormat::GetApplication ( );
__declspec(implementation_key(11930)) enum XlCreator ChartColorFormat::GetCreator ( );
__declspec(implementation_key(11931)) IDispatchPtr ChartColorFormat::GetParent ( );
__declspec(implementation_key(11932)) long ChartColorFormat::GetSchemeColor ( );
__declspec(implementation_key(11933)) void ChartColorFormat::PutSchemeColor ( long _arg1 );
__declspec(implementation_key(11934)) long ChartColorFormat::Getignorethis ( );
__declspec(implementation_key(11935)) long ChartColorFormat::Get_Default ( );
__declspec(implementation_key(11936)) long ChartColorFormat::GetType ( );
__declspec(implementation_key(11937)) _ApplicationPtr Axis::GetApplication ( );
__declspec(implementation_key(11938)) enum XlCreator Axis::GetCreator ( );
__declspec(implementation_key(11939)) IDispatchPtr Axis::GetParent ( );
__declspec(implementation_key(11940)) VARIANT_BOOL Axis::GetAxisBetweenCategories ( );
__declspec(implementation_key(11941)) void Axis::PutAxisBetweenCategories ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11942)) enum XlAxisGroup Axis::GetAxisGroup ( );
__declspec(implementation_key(11943)) AxisTitlePtr Axis::GetAxisTitle ( );
__declspec(implementation_key(11944)) BorderPtr Axis::GetBorder ( );
__declspec(implementation_key(11945)) _variant_t Axis::GetCategoryNames ( );
__declspec(implementation_key(11946)) void Axis::PutCategoryNames ( const _variant_t & _arg1 );
__declspec(implementation_key(11947)) enum XlAxisCrosses Axis::GetCrosses ( );
__declspec(implementation_key(11948)) void Axis::PutCrosses ( enum XlAxisCrosses _arg1 );
__declspec(implementation_key(11949)) double Axis::GetCrossesAt ( );
__declspec(implementation_key(11950)) void Axis::PutCrossesAt ( double _arg1 );
__declspec(implementation_key(11951)) _variant_t Axis::Delete ( );
__declspec(implementation_key(11952)) VARIANT_BOOL Axis::GetHasMajorGridlines ( );
__declspec(implementation_key(11953)) void Axis::PutHasMajorGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11954)) VARIANT_BOOL Axis::GetHasMinorGridlines ( );
__declspec(implementation_key(11955)) void Axis::PutHasMinorGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11956)) VARIANT_BOOL Axis::GetHasTitle ( );
__declspec(implementation_key(11957)) void Axis::PutHasTitle ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11958)) GridlinesPtr Axis::GetMajorGridlines ( );
__declspec(implementation_key(11959)) enum XlTickMark Axis::GetMajorTickMark ( );
__declspec(implementation_key(11960)) void Axis::PutMajorTickMark ( enum XlTickMark _arg1 );
__declspec(implementation_key(11961)) double Axis::GetMajorUnit ( );
__declspec(implementation_key(11962)) void Axis::PutMajorUnit ( double _arg1 );
__declspec(implementation_key(11963)) VARIANT_BOOL Axis::GetMajorUnitIsAuto ( );
__declspec(implementation_key(11964)) void Axis::PutMajorUnitIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11965)) double Axis::GetMaximumScale ( );
__declspec(implementation_key(11966)) void Axis::PutMaximumScale ( double _arg1 );
__declspec(implementation_key(11967)) VARIANT_BOOL Axis::GetMaximumScaleIsAuto ( );
__declspec(implementation_key(11968)) void Axis::PutMaximumScaleIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11969)) double Axis::GetMinimumScale ( );
__declspec(implementation_key(11970)) void Axis::PutMinimumScale ( double _arg1 );
__declspec(implementation_key(11971)) VARIANT_BOOL Axis::GetMinimumScaleIsAuto ( );
__declspec(implementation_key(11972)) void Axis::PutMinimumScaleIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11973)) GridlinesPtr Axis::GetMinorGridlines ( );
__declspec(implementation_key(11974)) enum XlTickMark Axis::GetMinorTickMark ( );
__declspec(implementation_key(11975)) void Axis::PutMinorTickMark ( enum XlTickMark _arg1 );
__declspec(implementation_key(11976)) double Axis::GetMinorUnit ( );
__declspec(implementation_key(11977)) void Axis::PutMinorUnit ( double _arg1 );
__declspec(implementation_key(11978)) VARIANT_BOOL Axis::GetMinorUnitIsAuto ( );
__declspec(implementation_key(11979)) void Axis::PutMinorUnitIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11980)) VARIANT_BOOL Axis::GetReversePlotOrder ( );
__declspec(implementation_key(11981)) void Axis::PutReversePlotOrder ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11982)) enum XlScaleType Axis::GetScaleType ( );
__declspec(implementation_key(11983)) void Axis::PutScaleType ( enum XlScaleType _arg1 );
__declspec(implementation_key(11984)) _variant_t Axis::Select ( );
__declspec(implementation_key(11985)) enum XlTickLabelPosition Axis::GetTickLabelPosition ( );
__declspec(implementation_key(11986)) void Axis::PutTickLabelPosition ( enum XlTickLabelPosition _arg1 );
__declspec(implementation_key(11987)) TickLabelsPtr Axis::GetTickLabels ( );
__declspec(implementation_key(11988)) long Axis::GetTickLabelSpacing ( );
__declspec(implementation_key(11989)) void Axis::PutTickLabelSpacing ( long _arg1 );
__declspec(implementation_key(11990)) long Axis::GetTickMarkSpacing ( );
__declspec(implementation_key(11991)) void Axis::PutTickMarkSpacing ( long _arg1 );
__declspec(implementation_key(11992)) enum XlAxisType Axis::GetType ( );
__declspec(implementation_key(11993)) void Axis::PutType ( enum XlAxisType _arg1 );
__declspec(implementation_key(11994)) enum XlTimeUnit Axis::GetBaseUnit ( );
__declspec(implementation_key(11995)) void Axis::PutBaseUnit ( enum XlTimeUnit _arg1 );
__declspec(implementation_key(11996)) VARIANT_BOOL Axis::GetBaseUnitIsAuto ( );
__declspec(implementation_key(11997)) void Axis::PutBaseUnitIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(11998)) enum XlTimeUnit Axis::GetMajorUnitScale ( );
__declspec(implementation_key(11999)) void Axis::PutMajorUnitScale ( enum XlTimeUnit _arg1 );
__declspec(implementation_key(12000)) enum XlTimeUnit Axis::GetMinorUnitScale ( );
__declspec(implementation_key(12001)) void Axis::PutMinorUnitScale ( enum XlTimeUnit _arg1 );
__declspec(implementation_key(12002)) enum XlCategoryType Axis::GetCategoryType ( );
__declspec(implementation_key(12003)) void Axis::PutCategoryType ( enum XlCategoryType _arg1 );
__declspec(implementation_key(12004)) double Axis::GetLeft ( );
__declspec(implementation_key(12005)) double Axis::GetTop ( );
__declspec(implementation_key(12006)) double Axis::GetWidth ( );
__declspec(implementation_key(12007)) double Axis::GetHeight ( );
__declspec(implementation_key(12008)) enum XlDisplayUnit Axis::GetDisplayUnit ( );
__declspec(implementation_key(12009)) void Axis::PutDisplayUnit ( enum XlDisplayUnit _arg1 );
__declspec(implementation_key(12010)) double Axis::GetDisplayUnitCustom ( );
__declspec(implementation_key(12011)) void Axis::PutDisplayUnitCustom ( double _arg1 );
__declspec(implementation_key(12012)) VARIANT_BOOL Axis::GetHasDisplayUnitLabel ( );
__declspec(implementation_key(12013)) void Axis::PutHasDisplayUnitLabel ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12014)) DisplayUnitLabelPtr Axis::GetDisplayUnitLabel ( );
__declspec(implementation_key(12015)) _ApplicationPtr ChartTitle::GetApplication ( );
__declspec(implementation_key(12016)) enum XlCreator ChartTitle::GetCreator ( );
__declspec(implementation_key(12017)) IDispatchPtr ChartTitle::GetParent ( );
__declspec(implementation_key(12018)) _bstr_t ChartTitle::GetName ( );
__declspec(implementation_key(12019)) _variant_t ChartTitle::Select ( );
__declspec(implementation_key(12020)) BorderPtr ChartTitle::GetBorder ( );
__declspec(implementation_key(12021)) _variant_t ChartTitle::Delete ( );
__declspec(implementation_key(12022)) InteriorPtr ChartTitle::GetInterior ( );
__declspec(implementation_key(12023)) ChartFillFormatPtr ChartTitle::GetFill ( );
__declspec(implementation_key(12024)) _bstr_t ChartTitle::GetCaption ( );
__declspec(implementation_key(12025)) void ChartTitle::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(12026)) CharactersPtr ChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(12027)) FontPtr ChartTitle::GetFont ( );
__declspec(implementation_key(12028)) _variant_t ChartTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(12029)) void ChartTitle::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(12030)) double ChartTitle::GetLeft ( );
__declspec(implementation_key(12031)) void ChartTitle::PutLeft ( double _arg1 );
__declspec(implementation_key(12032)) _variant_t ChartTitle::GetOrientation ( );
__declspec(implementation_key(12033)) void ChartTitle::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(12034)) VARIANT_BOOL ChartTitle::GetShadow ( );
__declspec(implementation_key(12035)) void ChartTitle::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12036)) _bstr_t ChartTitle::GetText ( );
__declspec(implementation_key(12037)) void ChartTitle::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(12038)) double ChartTitle::GetTop ( );
__declspec(implementation_key(12039)) void ChartTitle::PutTop ( double _arg1 );
__declspec(implementation_key(12040)) _variant_t ChartTitle::GetVerticalAlignment ( );
__declspec(implementation_key(12041)) void ChartTitle::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(12042)) long ChartTitle::GetReadingOrder ( );
__declspec(implementation_key(12043)) void ChartTitle::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(12044)) _variant_t ChartTitle::GetAutoScaleFont ( );
__declspec(implementation_key(12045)) void ChartTitle::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(12046)) _ApplicationPtr AxisTitle::GetApplication ( );
__declspec(implementation_key(12047)) enum XlCreator AxisTitle::GetCreator ( );
__declspec(implementation_key(12048)) IDispatchPtr AxisTitle::GetParent ( );
__declspec(implementation_key(12049)) _bstr_t AxisTitle::GetName ( );
__declspec(implementation_key(12050)) _variant_t AxisTitle::Select ( );
__declspec(implementation_key(12051)) BorderPtr AxisTitle::GetBorder ( );
__declspec(implementation_key(12052)) _variant_t AxisTitle::Delete ( );
__declspec(implementation_key(12053)) InteriorPtr AxisTitle::GetInterior ( );
__declspec(implementation_key(12054)) ChartFillFormatPtr AxisTitle::GetFill ( );
__declspec(implementation_key(12055)) _bstr_t AxisTitle::GetCaption ( );
__declspec(implementation_key(12056)) void AxisTitle::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(12057)) CharactersPtr AxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(12058)) FontPtr AxisTitle::GetFont ( );
__declspec(implementation_key(12059)) _variant_t AxisTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(12060)) void AxisTitle::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(12061)) double AxisTitle::GetLeft ( );
__declspec(implementation_key(12062)) void AxisTitle::PutLeft ( double _arg1 );
__declspec(implementation_key(12063)) _variant_t AxisTitle::GetOrientation ( );
__declspec(implementation_key(12064)) void AxisTitle::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(12065)) VARIANT_BOOL AxisTitle::GetShadow ( );
__declspec(implementation_key(12066)) void AxisTitle::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12067)) _bstr_t AxisTitle::GetText ( );
__declspec(implementation_key(12068)) void AxisTitle::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(12069)) double AxisTitle::GetTop ( );
__declspec(implementation_key(12070)) void AxisTitle::PutTop ( double _arg1 );
__declspec(implementation_key(12071)) _variant_t AxisTitle::GetVerticalAlignment ( );
__declspec(implementation_key(12072)) void AxisTitle::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(12073)) long AxisTitle::GetReadingOrder ( );
__declspec(implementation_key(12074)) void AxisTitle::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(12075)) _variant_t AxisTitle::GetAutoScaleFont ( );
__declspec(implementation_key(12076)) void AxisTitle::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(12077)) _ApplicationPtr ChartGroup::GetApplication ( );
__declspec(implementation_key(12078)) enum XlCreator ChartGroup::GetCreator ( );
__declspec(implementation_key(12079)) IDispatchPtr ChartGroup::GetParent ( );
__declspec(implementation_key(12080)) enum XlAxisGroup ChartGroup::GetAxisGroup ( );
__declspec(implementation_key(12081)) void ChartGroup::PutAxisGroup ( enum XlAxisGroup _arg1 );
__declspec(implementation_key(12082)) long ChartGroup::GetDoughnutHoleSize ( );
__declspec(implementation_key(12083)) void ChartGroup::PutDoughnutHoleSize ( long _arg1 );
__declspec(implementation_key(12084)) DownBarsPtr ChartGroup::GetDownBars ( );
__declspec(implementation_key(12085)) DropLinesPtr ChartGroup::GetDropLines ( );
__declspec(implementation_key(12086)) long ChartGroup::GetFirstSliceAngle ( );
__declspec(implementation_key(12087)) void ChartGroup::PutFirstSliceAngle ( long _arg1 );
__declspec(implementation_key(12088)) long ChartGroup::GetGapWidth ( );
__declspec(implementation_key(12089)) void ChartGroup::PutGapWidth ( long _arg1 );
__declspec(implementation_key(12090)) VARIANT_BOOL ChartGroup::GetHasDropLines ( );
__declspec(implementation_key(12091)) void ChartGroup::PutHasDropLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12092)) VARIANT_BOOL ChartGroup::GetHasHiLoLines ( );
__declspec(implementation_key(12093)) void ChartGroup::PutHasHiLoLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12094)) VARIANT_BOOL ChartGroup::GetHasRadarAxisLabels ( );
__declspec(implementation_key(12095)) void ChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12096)) VARIANT_BOOL ChartGroup::GetHasSeriesLines ( );
__declspec(implementation_key(12097)) void ChartGroup::PutHasSeriesLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12098)) VARIANT_BOOL ChartGroup::GetHasUpDownBars ( );
__declspec(implementation_key(12099)) void ChartGroup::PutHasUpDownBars ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12100)) HiLoLinesPtr ChartGroup::GetHiLoLines ( );
__declspec(implementation_key(12101)) long ChartGroup::GetIndex ( );
__declspec(implementation_key(12102)) long ChartGroup::GetOverlap ( );
__declspec(implementation_key(12103)) void ChartGroup::PutOverlap ( long _arg1 );
__declspec(implementation_key(12104)) TickLabelsPtr ChartGroup::GetRadarAxisLabels ( );
__declspec(implementation_key(12105)) IDispatchPtr ChartGroup::SeriesCollection ( const _variant_t & Index );
__declspec(implementation_key(12106)) SeriesLinesPtr ChartGroup::GetSeriesLines ( );
__declspec(implementation_key(12107)) long ChartGroup::GetSubType ( );
__declspec(implementation_key(12108)) void ChartGroup::PutSubType ( long _arg1 );
__declspec(implementation_key(12109)) long ChartGroup::GetType ( );
__declspec(implementation_key(12110)) void ChartGroup::PutType ( long _arg1 );
__declspec(implementation_key(12111)) UpBarsPtr ChartGroup::GetUpBars ( );
__declspec(implementation_key(12112)) VARIANT_BOOL ChartGroup::GetVaryByCategories ( );
__declspec(implementation_key(12113)) void ChartGroup::PutVaryByCategories ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12114)) enum XlSizeRepresents ChartGroup::GetSizeRepresents ( );
__declspec(implementation_key(12115)) void ChartGroup::PutSizeRepresents ( enum XlSizeRepresents _arg1 );
__declspec(implementation_key(12116)) long ChartGroup::GetBubbleScale ( );
__declspec(implementation_key(12117)) void ChartGroup::PutBubbleScale ( long _arg1 );
__declspec(implementation_key(12118)) VARIANT_BOOL ChartGroup::GetShowNegativeBubbles ( );
__declspec(implementation_key(12119)) void ChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12120)) enum XlChartSplitType ChartGroup::GetSplitType ( );
__declspec(implementation_key(12121)) void ChartGroup::PutSplitType ( enum XlChartSplitType _arg1 );
__declspec(implementation_key(12122)) _variant_t ChartGroup::GetSplitValue ( );
__declspec(implementation_key(12123)) void ChartGroup::PutSplitValue ( const _variant_t & _arg1 );
__declspec(implementation_key(12124)) long ChartGroup::GetSecondPlotSize ( );
__declspec(implementation_key(12125)) void ChartGroup::PutSecondPlotSize ( long _arg1 );
__declspec(implementation_key(12126)) VARIANT_BOOL ChartGroup::GetHas3DShading ( );
__declspec(implementation_key(12127)) void ChartGroup::PutHas3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12128)) _ApplicationPtr ChartGroups::GetApplication ( );
__declspec(implementation_key(12129)) enum XlCreator ChartGroups::GetCreator ( );
__declspec(implementation_key(12130)) IDispatchPtr ChartGroups::GetParent ( );
__declspec(implementation_key(12131)) long ChartGroups::GetCount ( );
__declspec(implementation_key(12132)) ChartGroupPtr ChartGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(12133)) IUnknownPtr ChartGroups::_NewEnum ( );
__declspec(implementation_key(12134)) _ApplicationPtr Axes::GetApplication ( );
__declspec(implementation_key(12135)) enum XlCreator Axes::GetCreator ( );
__declspec(implementation_key(12136)) IDispatchPtr Axes::GetParent ( );
__declspec(implementation_key(12137)) long Axes::GetCount ( );
__declspec(implementation_key(12138)) AxisPtr Axes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup );
__declspec(implementation_key(12139)) IUnknownPtr Axes::_NewEnum ( );
__declspec(implementation_key(12140)) _ApplicationPtr Points::GetApplication ( );
__declspec(implementation_key(12141)) enum XlCreator Points::GetCreator ( );
__declspec(implementation_key(12142)) IDispatchPtr Points::GetParent ( );
__declspec(implementation_key(12143)) long Points::GetCount ( );
__declspec(implementation_key(12144)) PointPtr Points::Item ( long Index );
__declspec(implementation_key(12145)) IUnknownPtr Points::_NewEnum ( );
__declspec(implementation_key(12146)) _ApplicationPtr Point::GetApplication ( );
__declspec(implementation_key(12147)) enum XlCreator Point::GetCreator ( );
__declspec(implementation_key(12148)) IDispatchPtr Point::GetParent ( );
__declspec(implementation_key(12149)) _variant_t Point::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(12150)) BorderPtr Point::GetBorder ( );
__declspec(implementation_key(12151)) _variant_t Point::ClearFormats ( );
__declspec(implementation_key(12152)) _variant_t Point::Copy ( );
__declspec(implementation_key(12153)) DataLabelPtr Point::GetDataLabel ( );
__declspec(implementation_key(12154)) _variant_t Point::Delete ( );
__declspec(implementation_key(12155)) long Point::GetExplosion ( );
__declspec(implementation_key(12156)) void Point::PutExplosion ( long _arg1 );
__declspec(implementation_key(12157)) VARIANT_BOOL Point::GetHasDataLabel ( );
__declspec(implementation_key(12158)) void Point::PutHasDataLabel ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12159)) InteriorPtr Point::GetInterior ( );
__declspec(implementation_key(12160)) VARIANT_BOOL Point::GetInvertIfNegative ( );
__declspec(implementation_key(12161)) void Point::PutInvertIfNegative ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12162)) long Point::GetMarkerBackgroundColor ( );
__declspec(implementation_key(12163)) void Point::PutMarkerBackgroundColor ( long _arg1 );
__declspec(implementation_key(12164)) enum XlColorIndex Point::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(12165)) void Point::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(12166)) long Point::GetMarkerForegroundColor ( );
__declspec(implementation_key(12167)) void Point::PutMarkerForegroundColor ( long _arg1 );
__declspec(implementation_key(12168)) enum XlColorIndex Point::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(12169)) void Point::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(12170)) long Point::GetMarkerSize ( );
__declspec(implementation_key(12171)) void Point::PutMarkerSize ( long _arg1 );
__declspec(implementation_key(12172)) enum XlMarkerStyle Point::GetMarkerStyle ( );
__declspec(implementation_key(12173)) void Point::PutMarkerStyle ( enum XlMarkerStyle _arg1 );
__declspec(implementation_key(12174)) _variant_t Point::Paste ( );
__declspec(implementation_key(12175)) enum XlChartPictureType Point::GetPictureType ( );
__declspec(implementation_key(12176)) void Point::PutPictureType ( enum XlChartPictureType _arg1 );
__declspec(implementation_key(12177)) long Point::GetPictureUnit ( );
__declspec(implementation_key(12178)) void Point::PutPictureUnit ( long _arg1 );
__declspec(implementation_key(12179)) _variant_t Point::Select ( );
__declspec(implementation_key(12180)) VARIANT_BOOL Point::GetApplyPictToSides ( );
__declspec(implementation_key(12181)) void Point::PutApplyPictToSides ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12182)) VARIANT_BOOL Point::GetApplyPictToFront ( );
__declspec(implementation_key(12183)) void Point::PutApplyPictToFront ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12184)) VARIANT_BOOL Point::GetApplyPictToEnd ( );
__declspec(implementation_key(12185)) void Point::PutApplyPictToEnd ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12186)) VARIANT_BOOL Point::GetShadow ( );
__declspec(implementation_key(12187)) void Point::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12188)) VARIANT_BOOL Point::GetSecondaryPlot ( );
__declspec(implementation_key(12189)) void Point::PutSecondaryPlot ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12190)) ChartFillFormatPtr Point::GetFill ( );
__declspec(implementation_key(12191)) _variant_t Point::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(12192)) _ApplicationPtr Series::GetApplication ( );
__declspec(implementation_key(12193)) enum XlCreator Series::GetCreator ( );
__declspec(implementation_key(12194)) IDispatchPtr Series::GetParent ( );
__declspec(implementation_key(12195)) _variant_t Series::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(12196)) enum XlAxisGroup Series::GetAxisGroup ( );
__declspec(implementation_key(12197)) void Series::PutAxisGroup ( enum XlAxisGroup _arg1 );
__declspec(implementation_key(12198)) BorderPtr Series::GetBorder ( );
__declspec(implementation_key(12199)) _variant_t Series::ClearFormats ( );
__declspec(implementation_key(12200)) _variant_t Series::Copy ( );
__declspec(implementation_key(12201)) IDispatchPtr Series::DataLabels ( const _variant_t & Index );
__declspec(implementation_key(12202)) _variant_t Series::Delete ( );
__declspec(implementation_key(12203)) _variant_t Series::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues );
__declspec(implementation_key(12204)) ErrorBarsPtr Series::GetErrorBars ( );
__declspec(implementation_key(12205)) long Series::GetExplosion ( );
__declspec(implementation_key(12206)) void Series::PutExplosion ( long _arg1 );
__declspec(implementation_key(12207)) _bstr_t Series::GetFormula ( );
__declspec(implementation_key(12208)) void Series::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(12209)) _bstr_t Series::GetFormulaLocal ( );
__declspec(implementation_key(12210)) void Series::PutFormulaLocal ( _bstr_t _arg1 );
__declspec(implementation_key(12211)) _bstr_t Series::GetFormulaR1C1 ( );
__declspec(implementation_key(12212)) void Series::PutFormulaR1C1 ( _bstr_t _arg1 );
__declspec(implementation_key(12213)) _bstr_t Series::GetFormulaR1C1Local ( );
__declspec(implementation_key(12214)) void Series::PutFormulaR1C1Local ( _bstr_t _arg1 );
__declspec(implementation_key(12215)) VARIANT_BOOL Series::GetHasDataLabels ( );
__declspec(implementation_key(12216)) void Series::PutHasDataLabels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12217)) VARIANT_BOOL Series::GetHasErrorBars ( );
__declspec(implementation_key(12218)) void Series::PutHasErrorBars ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12219)) InteriorPtr Series::GetInterior ( );
__declspec(implementation_key(12220)) ChartFillFormatPtr Series::GetFill ( );
__declspec(implementation_key(12221)) VARIANT_BOOL Series::GetInvertIfNegative ( );
__declspec(implementation_key(12222)) void Series::PutInvertIfNegative ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12223)) long Series::GetMarkerBackgroundColor ( );
__declspec(implementation_key(12224)) void Series::PutMarkerBackgroundColor ( long _arg1 );
__declspec(implementation_key(12225)) enum XlColorIndex Series::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(12226)) void Series::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(12227)) long Series::GetMarkerForegroundColor ( );
__declspec(implementation_key(12228)) void Series::PutMarkerForegroundColor ( long _arg1 );
__declspec(implementation_key(12229)) enum XlColorIndex Series::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(12230)) void Series::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(12231)) long Series::GetMarkerSize ( );
__declspec(implementation_key(12232)) void Series::PutMarkerSize ( long _arg1 );
__declspec(implementation_key(12233)) enum XlMarkerStyle Series::GetMarkerStyle ( );
__declspec(implementation_key(12234)) void Series::PutMarkerStyle ( enum XlMarkerStyle _arg1 );
__declspec(implementation_key(12235)) _bstr_t Series::GetName ( );
__declspec(implementation_key(12236)) void Series::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(12237)) _variant_t Series::Paste ( );
__declspec(implementation_key(12238)) enum XlChartPictureType Series::GetPictureType ( );
__declspec(implementation_key(12239)) void Series::PutPictureType ( enum XlChartPictureType _arg1 );
__declspec(implementation_key(12240)) long Series::GetPictureUnit ( );
__declspec(implementation_key(12241)) void Series::PutPictureUnit ( long _arg1 );
__declspec(implementation_key(12242)) long Series::GetPlotOrder ( );
__declspec(implementation_key(12243)) void Series::PutPlotOrder ( long _arg1 );
__declspec(implementation_key(12244)) IDispatchPtr Series::Points ( const _variant_t & Index );
__declspec(implementation_key(12245)) _variant_t Series::Select ( );
__declspec(implementation_key(12246)) VARIANT_BOOL Series::GetSmooth ( );
__declspec(implementation_key(12247)) void Series::PutSmooth ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12248)) IDispatchPtr Series::Trendlines ( const _variant_t & Index );
__declspec(implementation_key(12249)) long Series::GetType ( );
__declspec(implementation_key(12250)) void Series::PutType ( long _arg1 );
__declspec(implementation_key(12251)) enum XlChartType Series::GetChartType ( );
__declspec(implementation_key(12252)) void Series::PutChartType ( enum XlChartType _arg1 );
__declspec(implementation_key(12253)) HRESULT Series::ApplyCustomType ( enum XlChartType ChartType );
__declspec(implementation_key(12254)) _variant_t Series::GetValues ( );
__declspec(implementation_key(12255)) void Series::PutValues ( const _variant_t & _arg1 );
__declspec(implementation_key(12256)) _variant_t Series::GetXValues ( );
__declspec(implementation_key(12257)) void Series::PutXValues ( const _variant_t & _arg1 );
__declspec(implementation_key(12258)) _variant_t Series::GetBubbleSizes ( );
__declspec(implementation_key(12259)) void Series::PutBubbleSizes ( const _variant_t & _arg1 );
__declspec(implementation_key(12260)) enum XlBarShape Series::GetBarShape ( );
__declspec(implementation_key(12261)) void Series::PutBarShape ( enum XlBarShape _arg1 );
__declspec(implementation_key(12262)) VARIANT_BOOL Series::GetApplyPictToSides ( );
__declspec(implementation_key(12263)) void Series::PutApplyPictToSides ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12264)) VARIANT_BOOL Series::GetApplyPictToFront ( );
__declspec(implementation_key(12265)) void Series::PutApplyPictToFront ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12266)) VARIANT_BOOL Series::GetApplyPictToEnd ( );
__declspec(implementation_key(12267)) void Series::PutApplyPictToEnd ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12268)) VARIANT_BOOL Series::GetHas3DEffect ( );
__declspec(implementation_key(12269)) void Series::PutHas3DEffect ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12270)) VARIANT_BOOL Series::GetShadow ( );
__declspec(implementation_key(12271)) void Series::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12272)) VARIANT_BOOL Series::GetHasLeaderLines ( );
__declspec(implementation_key(12273)) void Series::PutHasLeaderLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12274)) LeaderLinesPtr Series::GetLeaderLines ( );
__declspec(implementation_key(12275)) _variant_t Series::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(12276)) _ApplicationPtr SeriesCollection::GetApplication ( );
__declspec(implementation_key(12277)) enum XlCreator SeriesCollection::GetCreator ( );
__declspec(implementation_key(12278)) IDispatchPtr SeriesCollection::GetParent ( );
__declspec(implementation_key(12279)) SeriesPtr SeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace );
__declspec(implementation_key(12280)) long SeriesCollection::GetCount ( );
__declspec(implementation_key(12281)) _variant_t SeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels );
__declspec(implementation_key(12282)) SeriesPtr SeriesCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(12283)) IUnknownPtr SeriesCollection::_NewEnum ( );
__declspec(implementation_key(12284)) _variant_t SeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries );
__declspec(implementation_key(12285)) SeriesPtr SeriesCollection::NewSeries ( );
__declspec(implementation_key(12286)) _ApplicationPtr DataLabel::GetApplication ( );
__declspec(implementation_key(12287)) enum XlCreator DataLabel::GetCreator ( );
__declspec(implementation_key(12288)) IDispatchPtr DataLabel::GetParent ( );
__declspec(implementation_key(12289)) _bstr_t DataLabel::GetName ( );
__declspec(implementation_key(12290)) _variant_t DataLabel::Select ( );
__declspec(implementation_key(12291)) BorderPtr DataLabel::GetBorder ( );
__declspec(implementation_key(12292)) _variant_t DataLabel::Delete ( );
__declspec(implementation_key(12293)) InteriorPtr DataLabel::GetInterior ( );
__declspec(implementation_key(12294)) ChartFillFormatPtr DataLabel::GetFill ( );
__declspec(implementation_key(12295)) _bstr_t DataLabel::GetCaption ( );
__declspec(implementation_key(12296)) void DataLabel::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(12297)) CharactersPtr DataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(12298)) FontPtr DataLabel::GetFont ( );
__declspec(implementation_key(12299)) _variant_t DataLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(12300)) void DataLabel::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(12301)) double DataLabel::GetLeft ( );
__declspec(implementation_key(12302)) void DataLabel::PutLeft ( double _arg1 );
__declspec(implementation_key(12303)) _variant_t DataLabel::GetOrientation ( );
__declspec(implementation_key(12304)) void DataLabel::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(12305)) VARIANT_BOOL DataLabel::GetShadow ( );
__declspec(implementation_key(12306)) void DataLabel::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12307)) _bstr_t DataLabel::GetText ( );
__declspec(implementation_key(12308)) void DataLabel::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(12309)) double DataLabel::GetTop ( );
__declspec(implementation_key(12310)) void DataLabel::PutTop ( double _arg1 );
__declspec(implementation_key(12311)) _variant_t DataLabel::GetVerticalAlignment ( );
__declspec(implementation_key(12312)) void DataLabel::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(12313)) long DataLabel::GetReadingOrder ( );
__declspec(implementation_key(12314)) void DataLabel::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(12315)) _variant_t DataLabel::GetAutoScaleFont ( );
__declspec(implementation_key(12316)) void DataLabel::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(12317)) VARIANT_BOOL DataLabel::GetAutoText ( );
__declspec(implementation_key(12318)) void DataLabel::PutAutoText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12319)) _bstr_t DataLabel::GetNumberFormat ( );
__declspec(implementation_key(12320)) void DataLabel::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(12321)) VARIANT_BOOL DataLabel::GetNumberFormatLinked ( );
__declspec(implementation_key(12322)) void DataLabel::PutNumberFormatLinked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12323)) _variant_t DataLabel::GetNumberFormatLocal ( );
__declspec(implementation_key(12324)) void DataLabel::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(12325)) VARIANT_BOOL DataLabel::GetShowLegendKey ( );
__declspec(implementation_key(12326)) void DataLabel::PutShowLegendKey ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12327)) _variant_t DataLabel::GetType ( );
__declspec(implementation_key(12328)) void DataLabel::PutType ( const _variant_t & _arg1 );
__declspec(implementation_key(12329)) enum XlDataLabelPosition DataLabel::GetPosition ( );
__declspec(implementation_key(12330)) void DataLabel::PutPosition ( enum XlDataLabelPosition _arg1 );
__declspec(implementation_key(12331)) VARIANT_BOOL DataLabel::GetShowSeriesName ( );
__declspec(implementation_key(12332)) void DataLabel::PutShowSeriesName ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12333)) VARIANT_BOOL DataLabel::GetShowCategoryName ( );
__declspec(implementation_key(12334)) void DataLabel::PutShowCategoryName ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12335)) VARIANT_BOOL DataLabel::GetShowValue ( );
__declspec(implementation_key(12336)) void DataLabel::PutShowValue ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12337)) VARIANT_BOOL DataLabel::GetShowPercentage ( );
__declspec(implementation_key(12338)) void DataLabel::PutShowPercentage ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12339)) VARIANT_BOOL DataLabel::GetShowBubbleSize ( );
__declspec(implementation_key(12340)) void DataLabel::PutShowBubbleSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12341)) _variant_t DataLabel::GetSeparator ( );
__declspec(implementation_key(12342)) void DataLabel::PutSeparator ( const _variant_t & _arg1 );
__declspec(implementation_key(12343)) _ApplicationPtr DataLabels::GetApplication ( );
__declspec(implementation_key(12344)) enum XlCreator DataLabels::GetCreator ( );
__declspec(implementation_key(12345)) IDispatchPtr DataLabels::GetParent ( );
__declspec(implementation_key(12346)) _bstr_t DataLabels::GetName ( );
__declspec(implementation_key(12347)) _variant_t DataLabels::Select ( );
__declspec(implementation_key(12348)) BorderPtr DataLabels::GetBorder ( );
__declspec(implementation_key(12349)) _variant_t DataLabels::Delete ( );
__declspec(implementation_key(12350)) InteriorPtr DataLabels::GetInterior ( );
__declspec(implementation_key(12351)) ChartFillFormatPtr DataLabels::GetFill ( );
__declspec(implementation_key(12352)) FontPtr DataLabels::GetFont ( );
__declspec(implementation_key(12353)) _variant_t DataLabels::GetHorizontalAlignment ( );
__declspec(implementation_key(12354)) void DataLabels::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(12355)) _variant_t DataLabels::GetOrientation ( );
__declspec(implementation_key(12356)) void DataLabels::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(12357)) VARIANT_BOOL DataLabels::GetShadow ( );
__declspec(implementation_key(12358)) void DataLabels::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12359)) _variant_t DataLabels::GetVerticalAlignment ( );
__declspec(implementation_key(12360)) void DataLabels::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(12361)) long DataLabels::GetReadingOrder ( );
__declspec(implementation_key(12362)) void DataLabels::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(12363)) _variant_t DataLabels::GetAutoScaleFont ( );
__declspec(implementation_key(12364)) void DataLabels::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(12365)) VARIANT_BOOL DataLabels::GetAutoText ( );
__declspec(implementation_key(12366)) void DataLabels::PutAutoText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12367)) _bstr_t DataLabels::GetNumberFormat ( );
__declspec(implementation_key(12368)) void DataLabels::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(12369)) VARIANT_BOOL DataLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(12370)) void DataLabels::PutNumberFormatLinked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12371)) _variant_t DataLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(12372)) void DataLabels::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(12373)) VARIANT_BOOL DataLabels::GetShowLegendKey ( );
__declspec(implementation_key(12374)) void DataLabels::PutShowLegendKey ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12375)) _variant_t DataLabels::GetType ( );
__declspec(implementation_key(12376)) void DataLabels::PutType ( const _variant_t & _arg1 );
__declspec(implementation_key(12377)) enum XlDataLabelPosition DataLabels::GetPosition ( );
__declspec(implementation_key(12378)) void DataLabels::PutPosition ( enum XlDataLabelPosition _arg1 );
__declspec(implementation_key(12379)) VARIANT_BOOL DataLabels::GetShowSeriesName ( );
__declspec(implementation_key(12380)) void DataLabels::PutShowSeriesName ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12381)) VARIANT_BOOL DataLabels::GetShowCategoryName ( );
__declspec(implementation_key(12382)) void DataLabels::PutShowCategoryName ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12383)) VARIANT_BOOL DataLabels::GetShowValue ( );
__declspec(implementation_key(12384)) void DataLabels::PutShowValue ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12385)) VARIANT_BOOL DataLabels::GetShowPercentage ( );
__declspec(implementation_key(12386)) void DataLabels::PutShowPercentage ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12387)) VARIANT_BOOL DataLabels::GetShowBubbleSize ( );
__declspec(implementation_key(12388)) void DataLabels::PutShowBubbleSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12389)) _variant_t DataLabels::GetSeparator ( );
__declspec(implementation_key(12390)) void DataLabels::PutSeparator ( const _variant_t & _arg1 );
__declspec(implementation_key(12391)) long DataLabels::GetCount ( );
__declspec(implementation_key(12392)) DataLabelPtr DataLabels::Item ( const _variant_t & Index );
__declspec(implementation_key(12393)) IUnknownPtr DataLabels::_NewEnum ( );
__declspec(implementation_key(12394)) _ApplicationPtr LegendEntry::GetApplication ( );
__declspec(implementation_key(12395)) enum XlCreator LegendEntry::GetCreator ( );
__declspec(implementation_key(12396)) IDispatchPtr LegendEntry::GetParent ( );
__declspec(implementation_key(12397)) _variant_t LegendEntry::Delete ( );
__declspec(implementation_key(12398)) FontPtr LegendEntry::GetFont ( );
__declspec(implementation_key(12399)) long LegendEntry::GetIndex ( );
__declspec(implementation_key(12400)) LegendKeyPtr LegendEntry::GetLegendKey ( );
__declspec(implementation_key(12401)) _variant_t LegendEntry::Select ( );
__declspec(implementation_key(12402)) _variant_t LegendEntry::GetAutoScaleFont ( );
__declspec(implementation_key(12403)) void LegendEntry::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(12404)) double LegendEntry::GetLeft ( );
__declspec(implementation_key(12405)) double LegendEntry::GetTop ( );
__declspec(implementation_key(12406)) double LegendEntry::GetWidth ( );
__declspec(implementation_key(12407)) double LegendEntry::GetHeight ( );
__declspec(implementation_key(12408)) _ApplicationPtr LegendEntries::GetApplication ( );
__declspec(implementation_key(12409)) enum XlCreator LegendEntries::GetCreator ( );
__declspec(implementation_key(12410)) IDispatchPtr LegendEntries::GetParent ( );
__declspec(implementation_key(12411)) long LegendEntries::GetCount ( );
__declspec(implementation_key(12412)) LegendEntryPtr LegendEntries::Item ( const _variant_t & Index );
__declspec(implementation_key(12413)) IUnknownPtr LegendEntries::_NewEnum ( );
__declspec(implementation_key(12414)) _ApplicationPtr LegendKey::GetApplication ( );
__declspec(implementation_key(12415)) enum XlCreator LegendKey::GetCreator ( );
__declspec(implementation_key(12416)) IDispatchPtr LegendKey::GetParent ( );
__declspec(implementation_key(12417)) BorderPtr LegendKey::GetBorder ( );
__declspec(implementation_key(12418)) _variant_t LegendKey::ClearFormats ( );
__declspec(implementation_key(12419)) _variant_t LegendKey::Delete ( );
__declspec(implementation_key(12420)) InteriorPtr LegendKey::GetInterior ( );
__declspec(implementation_key(12421)) ChartFillFormatPtr LegendKey::GetFill ( );
__declspec(implementation_key(12422)) VARIANT_BOOL LegendKey::GetInvertIfNegative ( );
__declspec(implementation_key(12423)) void LegendKey::PutInvertIfNegative ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12424)) long LegendKey::GetMarkerBackgroundColor ( );
__declspec(implementation_key(12425)) void LegendKey::PutMarkerBackgroundColor ( long _arg1 );
__declspec(implementation_key(12426)) enum XlColorIndex LegendKey::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(12427)) void LegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(12428)) long LegendKey::GetMarkerForegroundColor ( );
__declspec(implementation_key(12429)) void LegendKey::PutMarkerForegroundColor ( long _arg1 );
__declspec(implementation_key(12430)) enum XlColorIndex LegendKey::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(12431)) void LegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(12432)) long LegendKey::GetMarkerSize ( );
__declspec(implementation_key(12433)) void LegendKey::PutMarkerSize ( long _arg1 );
__declspec(implementation_key(12434)) enum XlMarkerStyle LegendKey::GetMarkerStyle ( );
__declspec(implementation_key(12435)) void LegendKey::PutMarkerStyle ( enum XlMarkerStyle _arg1 );
__declspec(implementation_key(12436)) long LegendKey::GetPictureType ( );
__declspec(implementation_key(12437)) void LegendKey::PutPictureType ( long _arg1 );
__declspec(implementation_key(12438)) long LegendKey::GetPictureUnit ( );
__declspec(implementation_key(12439)) void LegendKey::PutPictureUnit ( long _arg1 );
__declspec(implementation_key(12440)) _variant_t LegendKey::Select ( );
__declspec(implementation_key(12441)) VARIANT_BOOL LegendKey::GetSmooth ( );
__declspec(implementation_key(12442)) void LegendKey::PutSmooth ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12443)) double LegendKey::GetLeft ( );
__declspec(implementation_key(12444)) double LegendKey::GetTop ( );
__declspec(implementation_key(12445)) double LegendKey::GetWidth ( );
__declspec(implementation_key(12446)) double LegendKey::GetHeight ( );
__declspec(implementation_key(12447)) VARIANT_BOOL LegendKey::GetShadow ( );
__declspec(implementation_key(12448)) void LegendKey::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12449)) _ApplicationPtr Trendlines::GetApplication ( );
__declspec(implementation_key(12450)) enum XlCreator Trendlines::GetCreator ( );
__declspec(implementation_key(12451)) IDispatchPtr Trendlines::GetParent ( );
__declspec(implementation_key(12452)) TrendlinePtr Trendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name );
__declspec(implementation_key(12453)) long Trendlines::GetCount ( );
__declspec(implementation_key(12454)) TrendlinePtr Trendlines::Item ( const _variant_t & Index );
__declspec(implementation_key(12455)) IUnknownPtr Trendlines::_NewEnum ( );
__declspec(implementation_key(12456)) _ApplicationPtr Trendline::GetApplication ( );
__declspec(implementation_key(12457)) enum XlCreator Trendline::GetCreator ( );
__declspec(implementation_key(12458)) IDispatchPtr Trendline::GetParent ( );
__declspec(implementation_key(12459)) long Trendline::GetBackward ( );
__declspec(implementation_key(12460)) void Trendline::PutBackward ( long _arg1 );
__declspec(implementation_key(12461)) BorderPtr Trendline::GetBorder ( );
__declspec(implementation_key(12462)) _variant_t Trendline::ClearFormats ( );
__declspec(implementation_key(12463)) DataLabelPtr Trendline::GetDataLabel ( );
__declspec(implementation_key(12464)) _variant_t Trendline::Delete ( );
__declspec(implementation_key(12465)) VARIANT_BOOL Trendline::GetDisplayEquation ( );
__declspec(implementation_key(12466)) void Trendline::PutDisplayEquation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12467)) VARIANT_BOOL Trendline::GetDisplayRSquared ( );
__declspec(implementation_key(12468)) void Trendline::PutDisplayRSquared ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12469)) long Trendline::GetForward ( );
__declspec(implementation_key(12470)) void Trendline::PutForward ( long _arg1 );
__declspec(implementation_key(12471)) long Trendline::GetIndex ( );
__declspec(implementation_key(12472)) double Trendline::GetIntercept ( );
__declspec(implementation_key(12473)) void Trendline::PutIntercept ( double _arg1 );
__declspec(implementation_key(12474)) VARIANT_BOOL Trendline::GetInterceptIsAuto ( );
__declspec(implementation_key(12475)) void Trendline::PutInterceptIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12476)) _bstr_t Trendline::GetName ( );
__declspec(implementation_key(12477)) void Trendline::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(12478)) VARIANT_BOOL Trendline::GetNameIsAuto ( );
__declspec(implementation_key(12479)) void Trendline::PutNameIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12480)) long Trendline::GetOrder ( );
__declspec(implementation_key(12481)) void Trendline::PutOrder ( long _arg1 );
__declspec(implementation_key(12482)) long Trendline::GetPeriod ( );
__declspec(implementation_key(12483)) void Trendline::PutPeriod ( long _arg1 );
__declspec(implementation_key(12484)) _variant_t Trendline::Select ( );
__declspec(implementation_key(12485)) enum XlTrendlineType Trendline::GetType ( );
__declspec(implementation_key(12486)) void Trendline::PutType ( enum XlTrendlineType _arg1 );
__declspec(implementation_key(12487)) _ApplicationPtr Corners::GetApplication ( );
__declspec(implementation_key(12488)) enum XlCreator Corners::GetCreator ( );
__declspec(implementation_key(12489)) IDispatchPtr Corners::GetParent ( );
__declspec(implementation_key(12490)) _bstr_t Corners::GetName ( );
__declspec(implementation_key(12491)) _variant_t Corners::Select ( );
__declspec(implementation_key(12492)) _ApplicationPtr SeriesLines::GetApplication ( );
__declspec(implementation_key(12493)) enum XlCreator SeriesLines::GetCreator ( );
__declspec(implementation_key(12494)) IDispatchPtr SeriesLines::GetParent ( );
__declspec(implementation_key(12495)) _bstr_t SeriesLines::GetName ( );
__declspec(implementation_key(12496)) _variant_t SeriesLines::Select ( );
__declspec(implementation_key(12497)) BorderPtr SeriesLines::GetBorder ( );
__declspec(implementation_key(12498)) _variant_t SeriesLines::Delete ( );
__declspec(implementation_key(12499)) _ApplicationPtr HiLoLines::GetApplication ( );
__declspec(implementation_key(12500)) enum XlCreator HiLoLines::GetCreator ( );
__declspec(implementation_key(12501)) IDispatchPtr HiLoLines::GetParent ( );
__declspec(implementation_key(12502)) _bstr_t HiLoLines::GetName ( );
__declspec(implementation_key(12503)) _variant_t HiLoLines::Select ( );
__declspec(implementation_key(12504)) BorderPtr HiLoLines::GetBorder ( );
__declspec(implementation_key(12505)) _variant_t HiLoLines::Delete ( );
__declspec(implementation_key(12506)) _ApplicationPtr Gridlines::GetApplication ( );
__declspec(implementation_key(12507)) enum XlCreator Gridlines::GetCreator ( );
__declspec(implementation_key(12508)) IDispatchPtr Gridlines::GetParent ( );
__declspec(implementation_key(12509)) _bstr_t Gridlines::GetName ( );
__declspec(implementation_key(12510)) _variant_t Gridlines::Select ( );
__declspec(implementation_key(12511)) BorderPtr Gridlines::GetBorder ( );
__declspec(implementation_key(12512)) _variant_t Gridlines::Delete ( );
__declspec(implementation_key(12513)) _ApplicationPtr DropLines::GetApplication ( );
__declspec(implementation_key(12514)) enum XlCreator DropLines::GetCreator ( );
__declspec(implementation_key(12515)) IDispatchPtr DropLines::GetParent ( );
__declspec(implementation_key(12516)) _bstr_t DropLines::GetName ( );
__declspec(implementation_key(12517)) _variant_t DropLines::Select ( );
__declspec(implementation_key(12518)) BorderPtr DropLines::GetBorder ( );
__declspec(implementation_key(12519)) _variant_t DropLines::Delete ( );
__declspec(implementation_key(12520)) _ApplicationPtr LeaderLines::GetApplication ( );
__declspec(implementation_key(12521)) enum XlCreator LeaderLines::GetCreator ( );
__declspec(implementation_key(12522)) IDispatchPtr LeaderLines::GetParent ( );
__declspec(implementation_key(12523)) BorderPtr LeaderLines::GetBorder ( );
__declspec(implementation_key(12524)) HRESULT LeaderLines::Delete ( );
__declspec(implementation_key(12525)) HRESULT LeaderLines::Select ( );
__declspec(implementation_key(12526)) _ApplicationPtr UpBars::GetApplication ( );
__declspec(implementation_key(12527)) enum XlCreator UpBars::GetCreator ( );
__declspec(implementation_key(12528)) IDispatchPtr UpBars::GetParent ( );
__declspec(implementation_key(12529)) _bstr_t UpBars::GetName ( );
__declspec(implementation_key(12530)) _variant_t UpBars::Select ( );
__declspec(implementation_key(12531)) BorderPtr UpBars::GetBorder ( );
__declspec(implementation_key(12532)) _variant_t UpBars::Delete ( );
__declspec(implementation_key(12533)) InteriorPtr UpBars::GetInterior ( );
__declspec(implementation_key(12534)) ChartFillFormatPtr UpBars::GetFill ( );
__declspec(implementation_key(12535)) _ApplicationPtr DownBars::GetApplication ( );
__declspec(implementation_key(12536)) enum XlCreator DownBars::GetCreator ( );
__declspec(implementation_key(12537)) IDispatchPtr DownBars::GetParent ( );
__declspec(implementation_key(12538)) _bstr_t DownBars::GetName ( );
__declspec(implementation_key(12539)) _variant_t DownBars::Select ( );
__declspec(implementation_key(12540)) BorderPtr DownBars::GetBorder ( );
__declspec(implementation_key(12541)) _variant_t DownBars::Delete ( );
__declspec(implementation_key(12542)) InteriorPtr DownBars::GetInterior ( );
__declspec(implementation_key(12543)) ChartFillFormatPtr DownBars::GetFill ( );
__declspec(implementation_key(12544)) _ApplicationPtr Floor::GetApplication ( );
__declspec(implementation_key(12545)) enum XlCreator Floor::GetCreator ( );
__declspec(implementation_key(12546)) IDispatchPtr Floor::GetParent ( );
__declspec(implementation_key(12547)) _bstr_t Floor::GetName ( );
__declspec(implementation_key(12548)) _variant_t Floor::Select ( );
__declspec(implementation_key(12549)) BorderPtr Floor::GetBorder ( );
__declspec(implementation_key(12550)) _variant_t Floor::ClearFormats ( );
__declspec(implementation_key(12551)) InteriorPtr Floor::GetInterior ( );
__declspec(implementation_key(12552)) ChartFillFormatPtr Floor::GetFill ( );
__declspec(implementation_key(12553)) _variant_t Floor::GetPictureType ( );
__declspec(implementation_key(12554)) void Floor::PutPictureType ( const _variant_t & _arg1 );
__declspec(implementation_key(12555)) HRESULT Floor::Paste ( );
__declspec(implementation_key(12556)) _ApplicationPtr Walls::GetApplication ( );
__declspec(implementation_key(12557)) enum XlCreator Walls::GetCreator ( );
__declspec(implementation_key(12558)) IDispatchPtr Walls::GetParent ( );
__declspec(implementation_key(12559)) _bstr_t Walls::GetName ( );
__declspec(implementation_key(12560)) _variant_t Walls::Select ( );
__declspec(implementation_key(12561)) BorderPtr Walls::GetBorder ( );
__declspec(implementation_key(12562)) _variant_t Walls::ClearFormats ( );
__declspec(implementation_key(12563)) InteriorPtr Walls::GetInterior ( );
__declspec(implementation_key(12564)) ChartFillFormatPtr Walls::GetFill ( );
__declspec(implementation_key(12565)) _variant_t Walls::GetPictureType ( );
__declspec(implementation_key(12566)) void Walls::PutPictureType ( const _variant_t & _arg1 );
__declspec(implementation_key(12567)) HRESULT Walls::Paste ( );
__declspec(implementation_key(12568)) _variant_t Walls::GetPictureUnit ( );
__declspec(implementation_key(12569)) void Walls::PutPictureUnit ( const _variant_t & _arg1 );
__declspec(implementation_key(12570)) _ApplicationPtr TickLabels::GetApplication ( );
__declspec(implementation_key(12571)) enum XlCreator TickLabels::GetCreator ( );
__declspec(implementation_key(12572)) IDispatchPtr TickLabels::GetParent ( );
__declspec(implementation_key(12573)) _variant_t TickLabels::Delete ( );
__declspec(implementation_key(12574)) FontPtr TickLabels::GetFont ( );
__declspec(implementation_key(12575)) _bstr_t TickLabels::GetName ( );
__declspec(implementation_key(12576)) _bstr_t TickLabels::GetNumberFormat ( );
__declspec(implementation_key(12577)) void TickLabels::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(12578)) VARIANT_BOOL TickLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(12579)) void TickLabels::PutNumberFormatLinked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12580)) _variant_t TickLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(12581)) void TickLabels::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(12582)) enum XlTickLabelOrientation TickLabels::GetOrientation ( );
__declspec(implementation_key(12583)) void TickLabels::PutOrientation ( enum XlTickLabelOrientation _arg1 );
__declspec(implementation_key(12584)) _variant_t TickLabels::Select ( );
__declspec(implementation_key(12585)) long TickLabels::GetReadingOrder ( );
__declspec(implementation_key(12586)) void TickLabels::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(12587)) _variant_t TickLabels::GetAutoScaleFont ( );
__declspec(implementation_key(12588)) void TickLabels::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(12589)) long TickLabels::GetDepth ( );
__declspec(implementation_key(12590)) long TickLabels::GetOffset ( );
__declspec(implementation_key(12591)) void TickLabels::PutOffset ( long _arg1 );
__declspec(implementation_key(12592)) long TickLabels::GetAlignment ( );
__declspec(implementation_key(12593)) void TickLabels::PutAlignment ( long _arg1 );
__declspec(implementation_key(12594)) _ApplicationPtr PlotArea::GetApplication ( );
__declspec(implementation_key(12595)) enum XlCreator PlotArea::GetCreator ( );
__declspec(implementation_key(12596)) IDispatchPtr PlotArea::GetParent ( );
__declspec(implementation_key(12597)) _bstr_t PlotArea::GetName ( );
__declspec(implementation_key(12598)) _variant_t PlotArea::Select ( );
__declspec(implementation_key(12599)) BorderPtr PlotArea::GetBorder ( );
__declspec(implementation_key(12600)) _variant_t PlotArea::ClearFormats ( );
__declspec(implementation_key(12601)) double PlotArea::GetHeight ( );
__declspec(implementation_key(12602)) void PlotArea::PutHeight ( double _arg1 );
__declspec(implementation_key(12603)) InteriorPtr PlotArea::GetInterior ( );
__declspec(implementation_key(12604)) ChartFillFormatPtr PlotArea::GetFill ( );
__declspec(implementation_key(12605)) double PlotArea::GetLeft ( );
__declspec(implementation_key(12606)) void PlotArea::PutLeft ( double _arg1 );
__declspec(implementation_key(12607)) double PlotArea::GetTop ( );
__declspec(implementation_key(12608)) void PlotArea::PutTop ( double _arg1 );
__declspec(implementation_key(12609)) double PlotArea::GetWidth ( );
__declspec(implementation_key(12610)) void PlotArea::PutWidth ( double _arg1 );
__declspec(implementation_key(12611)) double PlotArea::GetInsideLeft ( );
__declspec(implementation_key(12612)) double PlotArea::GetInsideTop ( );
__declspec(implementation_key(12613)) double PlotArea::GetInsideWidth ( );
__declspec(implementation_key(12614)) double PlotArea::GetInsideHeight ( );
__declspec(implementation_key(12615)) _ApplicationPtr ChartArea::GetApplication ( );
__declspec(implementation_key(12616)) enum XlCreator ChartArea::GetCreator ( );
__declspec(implementation_key(12617)) IDispatchPtr ChartArea::GetParent ( );
__declspec(implementation_key(12618)) _bstr_t ChartArea::GetName ( );
__declspec(implementation_key(12619)) _variant_t ChartArea::Select ( );
__declspec(implementation_key(12620)) BorderPtr ChartArea::GetBorder ( );
__declspec(implementation_key(12621)) _variant_t ChartArea::Clear ( );
__declspec(implementation_key(12622)) _variant_t ChartArea::ClearContents ( );
__declspec(implementation_key(12623)) _variant_t ChartArea::Copy ( );
__declspec(implementation_key(12624)) FontPtr ChartArea::GetFont ( );
__declspec(implementation_key(12625)) VARIANT_BOOL ChartArea::GetShadow ( );
__declspec(implementation_key(12626)) void ChartArea::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12627)) _variant_t ChartArea::ClearFormats ( );
__declspec(implementation_key(12628)) double ChartArea::GetHeight ( );
__declspec(implementation_key(12629)) void ChartArea::PutHeight ( double _arg1 );
__declspec(implementation_key(12630)) InteriorPtr ChartArea::GetInterior ( );
__declspec(implementation_key(12631)) ChartFillFormatPtr ChartArea::GetFill ( );
__declspec(implementation_key(12632)) double ChartArea::GetLeft ( );
__declspec(implementation_key(12633)) void ChartArea::PutLeft ( double _arg1 );
__declspec(implementation_key(12634)) double ChartArea::GetTop ( );
__declspec(implementation_key(12635)) void ChartArea::PutTop ( double _arg1 );
__declspec(implementation_key(12636)) double ChartArea::GetWidth ( );
__declspec(implementation_key(12637)) void ChartArea::PutWidth ( double _arg1 );
__declspec(implementation_key(12638)) _variant_t ChartArea::GetAutoScaleFont ( );
__declspec(implementation_key(12639)) void ChartArea::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(12640)) _ApplicationPtr Legend::GetApplication ( );
__declspec(implementation_key(12641)) enum XlCreator Legend::GetCreator ( );
__declspec(implementation_key(12642)) IDispatchPtr Legend::GetParent ( );
__declspec(implementation_key(12643)) _bstr_t Legend::GetName ( );
__declspec(implementation_key(12644)) _variant_t Legend::Select ( );
__declspec(implementation_key(12645)) BorderPtr Legend::GetBorder ( );
__declspec(implementation_key(12646)) _variant_t Legend::Delete ( );
__declspec(implementation_key(12647)) FontPtr Legend::GetFont ( );
__declspec(implementation_key(12648)) IDispatchPtr Legend::LegendEntries ( const _variant_t & Index );
__declspec(implementation_key(12649)) enum XlLegendPosition Legend::GetPosition ( );
__declspec(implementation_key(12650)) void Legend::PutPosition ( enum XlLegendPosition _arg1 );
__declspec(implementation_key(12651)) VARIANT_BOOL Legend::GetShadow ( );
__declspec(implementation_key(12652)) void Legend::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12653)) _variant_t Legend::Clear ( );
__declspec(implementation_key(12654)) double Legend::GetHeight ( );
__declspec(implementation_key(12655)) void Legend::PutHeight ( double _arg1 );
__declspec(implementation_key(12656)) InteriorPtr Legend::GetInterior ( );
__declspec(implementation_key(12657)) ChartFillFormatPtr Legend::GetFill ( );
__declspec(implementation_key(12658)) double Legend::GetLeft ( );
__declspec(implementation_key(12659)) void Legend::PutLeft ( double _arg1 );
__declspec(implementation_key(12660)) double Legend::GetTop ( );
__declspec(implementation_key(12661)) void Legend::PutTop ( double _arg1 );
__declspec(implementation_key(12662)) double Legend::GetWidth ( );
__declspec(implementation_key(12663)) void Legend::PutWidth ( double _arg1 );
__declspec(implementation_key(12664)) _variant_t Legend::GetAutoScaleFont ( );
__declspec(implementation_key(12665)) void Legend::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(12666)) _ApplicationPtr ErrorBars::GetApplication ( );
__declspec(implementation_key(12667)) enum XlCreator ErrorBars::GetCreator ( );
__declspec(implementation_key(12668)) IDispatchPtr ErrorBars::GetParent ( );
__declspec(implementation_key(12669)) _bstr_t ErrorBars::GetName ( );
__declspec(implementation_key(12670)) _variant_t ErrorBars::Select ( );
__declspec(implementation_key(12671)) BorderPtr ErrorBars::GetBorder ( );
__declspec(implementation_key(12672)) _variant_t ErrorBars::Delete ( );
__declspec(implementation_key(12673)) _variant_t ErrorBars::ClearFormats ( );
__declspec(implementation_key(12674)) enum XlEndStyleCap ErrorBars::GetEndStyle ( );
__declspec(implementation_key(12675)) void ErrorBars::PutEndStyle ( enum XlEndStyleCap _arg1 );
__declspec(implementation_key(12676)) _ApplicationPtr DataTable::GetApplication ( );
__declspec(implementation_key(12677)) enum XlCreator DataTable::GetCreator ( );
__declspec(implementation_key(12678)) IDispatchPtr DataTable::GetParent ( );
__declspec(implementation_key(12679)) VARIANT_BOOL DataTable::GetShowLegendKey ( );
__declspec(implementation_key(12680)) void DataTable::PutShowLegendKey ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12681)) VARIANT_BOOL DataTable::GetHasBorderHorizontal ( );
__declspec(implementation_key(12682)) void DataTable::PutHasBorderHorizontal ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12683)) VARIANT_BOOL DataTable::GetHasBorderVertical ( );
__declspec(implementation_key(12684)) void DataTable::PutHasBorderVertical ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12685)) VARIANT_BOOL DataTable::GetHasBorderOutline ( );
__declspec(implementation_key(12686)) void DataTable::PutHasBorderOutline ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12687)) BorderPtr DataTable::GetBorder ( );
__declspec(implementation_key(12688)) FontPtr DataTable::GetFont ( );
__declspec(implementation_key(12689)) HRESULT DataTable::Select ( );
__declspec(implementation_key(12690)) HRESULT DataTable::Delete ( );
__declspec(implementation_key(12691)) _variant_t DataTable::GetAutoScaleFont ( );
__declspec(implementation_key(12692)) void DataTable::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(12693)) _ApplicationPtr Phonetic::GetApplication ( );
__declspec(implementation_key(12694)) enum XlCreator Phonetic::GetCreator ( );
__declspec(implementation_key(12695)) IDispatchPtr Phonetic::GetParent ( );
__declspec(implementation_key(12696)) VARIANT_BOOL Phonetic::GetVisible ( );
__declspec(implementation_key(12697)) void Phonetic::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12698)) long Phonetic::GetCharacterType ( );
__declspec(implementation_key(12699)) void Phonetic::PutCharacterType ( long _arg1 );
__declspec(implementation_key(12700)) long Phonetic::GetAlignment ( );
__declspec(implementation_key(12701)) void Phonetic::PutAlignment ( long _arg1 );
__declspec(implementation_key(12702)) FontPtr Phonetic::GetFont ( );
__declspec(implementation_key(12703)) _bstr_t Phonetic::GetText ( );
__declspec(implementation_key(12704)) void Phonetic::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(12705)) _ApplicationPtr Shape::GetApplication ( );
__declspec(implementation_key(12706)) enum XlCreator Shape::GetCreator ( );
__declspec(implementation_key(12707)) IDispatchPtr Shape::GetParent ( );
__declspec(implementation_key(12708)) HRESULT Shape::Apply ( );
__declspec(implementation_key(12709)) HRESULT Shape::Delete ( );
__declspec(implementation_key(12710)) ShapePtr Shape::Duplicate ( );
__declspec(implementation_key(12711)) HRESULT Shape::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(12712)) HRESULT Shape::IncrementLeft ( float Increment );
__declspec(implementation_key(12713)) HRESULT Shape::IncrementRotation ( float Increment );
__declspec(implementation_key(12714)) HRESULT Shape::IncrementTop ( float Increment );
__declspec(implementation_key(12715)) HRESULT Shape::PickUp ( );
__declspec(implementation_key(12716)) HRESULT Shape::RerouteConnections ( );
__declspec(implementation_key(12717)) HRESULT Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(12718)) HRESULT Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(12719)) HRESULT Shape::Select ( const _variant_t & Replace );
__declspec(implementation_key(12720)) HRESULT Shape::SetShapesDefaultProperties ( );
__declspec(implementation_key(12721)) ShapeRangePtr Shape::Ungroup ( );
__declspec(implementation_key(12722)) HRESULT Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(12723)) AdjustmentsPtr Shape::GetAdjustments ( );
__declspec(implementation_key(12724)) TextFramePtr Shape::GetTextFrame ( );
__declspec(implementation_key(12725)) enum Office::MsoAutoShapeType Shape::GetAutoShapeType ( );
__declspec(implementation_key(12726)) void Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType _arg1 );
__declspec(implementation_key(12727)) CalloutFormatPtr Shape::GetCallout ( );
__declspec(implementation_key(12728)) long Shape::GetConnectionSiteCount ( );
__declspec(implementation_key(12729)) enum Office::MsoTriState Shape::GetConnector ( );
__declspec(implementation_key(12730)) ConnectorFormatPtr Shape::GetConnectorFormat ( );
__declspec(implementation_key(12731)) FillFormatPtr Shape::GetFill ( );
__declspec(implementation_key(12732)) GroupShapesPtr Shape::GetGroupItems ( );
__declspec(implementation_key(12733)) float Shape::GetHeight ( );
__declspec(implementation_key(12734)) void Shape::PutHeight ( float _arg1 );
__declspec(implementation_key(12735)) enum Office::MsoTriState Shape::GetHorizontalFlip ( );
__declspec(implementation_key(12736)) float Shape::GetLeft ( );
__declspec(implementation_key(12737)) void Shape::PutLeft ( float _arg1 );
__declspec(implementation_key(12738)) LineFormatPtr Shape::GetLine ( );
__declspec(implementation_key(12739)) enum Office::MsoTriState Shape::GetLockAspectRatio ( );
__declspec(implementation_key(12740)) void Shape::PutLockAspectRatio ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(12741)) _bstr_t Shape::GetName ( );
__declspec(implementation_key(12742)) void Shape::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(12743)) ShapeNodesPtr Shape::GetNodes ( );
__declspec(implementation_key(12744)) float Shape::GetRotation ( );
__declspec(implementation_key(12745)) void Shape::PutRotation ( float _arg1 );
__declspec(implementation_key(12746)) PictureFormatPtr Shape::GetPictureFormat ( );
__declspec(implementation_key(12747)) ShadowFormatPtr Shape::GetShadow ( );
__declspec(implementation_key(12748)) TextEffectFormatPtr Shape::GetTextEffect ( );
__declspec(implementation_key(12749)) ThreeDFormatPtr Shape::GetThreeD ( );
__declspec(implementation_key(12750)) float Shape::GetTop ( );
__declspec(implementation_key(12751)) void Shape::PutTop ( float _arg1 );
__declspec(implementation_key(12752)) enum Office::MsoShapeType Shape::GetType ( );
__declspec(implementation_key(12753)) enum Office::MsoTriState Shape::GetVerticalFlip ( );
__declspec(implementation_key(12754)) _variant_t Shape::GetVertices ( );
__declspec(implementation_key(12755)) enum Office::MsoTriState Shape::GetVisible ( );
__declspec(implementation_key(12756)) void Shape::PutVisible ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(12757)) float Shape::GetWidth ( );
__declspec(implementation_key(12758)) void Shape::PutWidth ( float _arg1 );
__declspec(implementation_key(12759)) long Shape::GetZOrderPosition ( );
__declspec(implementation_key(12760)) HyperlinkPtr Shape::GetHyperlink ( );
__declspec(implementation_key(12761)) enum Office::MsoBlackWhiteMode Shape::GetBlackWhiteMode ( );
__declspec(implementation_key(12762)) void Shape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode _arg1 );
__declspec(implementation_key(12763)) IDispatchPtr Shape::GetDrawingObject ( );
__declspec(implementation_key(12764)) _bstr_t Shape::GetOnAction ( );
__declspec(implementation_key(12765)) void Shape::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(12766)) VARIANT_BOOL Shape::GetLocked ( );
__declspec(implementation_key(12767)) void Shape::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12768)) RangePtr Shape::GetTopLeftCell ( );
__declspec(implementation_key(12769)) RangePtr Shape::GetBottomRightCell ( );
__declspec(implementation_key(12770)) enum XlPlacement Shape::GetPlacement ( );
__declspec(implementation_key(12771)) void Shape::PutPlacement ( enum XlPlacement _arg1 );
__declspec(implementation_key(12772)) HRESULT Shape::Copy ( );
__declspec(implementation_key(12773)) HRESULT Shape::Cut ( );
__declspec(implementation_key(12774)) HRESULT Shape::CopyPicture ( const _variant_t & Appearance, const _variant_t & Format );
__declspec(implementation_key(12775)) ControlFormatPtr Shape::GetControlFormat ( );
__declspec(implementation_key(12776)) LinkFormatPtr Shape::GetLinkFormat ( );
__declspec(implementation_key(12777)) OLEFormatPtr Shape::GetOLEFormat ( );
__declspec(implementation_key(12778)) enum XlFormControl Shape::GetFormControlType ( );
__declspec(implementation_key(12779)) _bstr_t Shape::GetAlternativeText ( );
__declspec(implementation_key(12780)) void Shape::PutAlternativeText ( _bstr_t _arg1 );
__declspec(implementation_key(12781)) Office::ScriptPtr Shape::GetScript ( );
__declspec(implementation_key(12782)) DiagramNodePtr Shape::GetDiagramNode ( );
__declspec(implementation_key(12783)) enum Office::MsoTriState Shape::GetHasDiagramNode ( );
__declspec(implementation_key(12784)) DiagramPtr Shape::GetDiagram ( );
__declspec(implementation_key(12785)) enum Office::MsoTriState Shape::GetHasDiagram ( );
__declspec(implementation_key(12786)) enum Office::MsoTriState Shape::GetChild ( );
__declspec(implementation_key(12787)) ShapePtr Shape::GetParentGroup ( );
__declspec(implementation_key(12788)) Office::CanvasShapesPtr Shape::GetCanvasItems ( );
__declspec(implementation_key(12789)) long Shape::GetID ( );
__declspec(implementation_key(12790)) HRESULT Shape::CanvasCropLeft ( float Increment );
__declspec(implementation_key(12791)) HRESULT Shape::CanvasCropTop ( float Increment );
__declspec(implementation_key(12792)) HRESULT Shape::CanvasCropRight ( float Increment );
__declspec(implementation_key(12793)) HRESULT Shape::CanvasCropBottom ( float Increment );
__declspec(implementation_key(12794)) _ApplicationPtr Shapes::GetApplication ( );
__declspec(implementation_key(12795)) enum XlCreator Shapes::GetCreator ( );
__declspec(implementation_key(12796)) IDispatchPtr Shapes::GetParent ( );
__declspec(implementation_key(12797)) long Shapes::GetCount ( );
__declspec(implementation_key(12798)) ShapePtr Shapes::Item ( const _variant_t & Index );
__declspec(implementation_key(12799)) ShapePtr Shapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(12800)) IUnknownPtr Shapes::Get_NewEnum ( );
__declspec(implementation_key(12801)) ShapePtr Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(12802)) ShapePtr Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(12803)) ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(12804)) ShapePtr Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(12805)) ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(12806)) ShapePtr Shapes::AddPicture ( _bstr_t Filename, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(12807)) ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(12808)) ShapePtr Shapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(12809)) ShapePtr Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top );
__declspec(implementation_key(12810)) ShapePtr Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(12811)) FreeformBuilderPtr Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(12812)) ShapeRangePtr Shapes::GetRange ( const _variant_t & Index );
__declspec(implementation_key(12813)) HRESULT Shapes::SelectAll ( );
__declspec(implementation_key(12814)) ShapePtr Shapes::AddFormControl ( enum XlFormControl Type, long Left, long Top, long Width, long Height );
__declspec(implementation_key(12815)) ShapePtr Shapes::AddOLEObject ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(12816)) ShapePtr Shapes::AddDiagram ( enum Office::MsoDiagramType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(12817)) ShapePtr Shapes::AddCanvas ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(12818)) _ApplicationPtr ShapeRange::GetApplication ( );
__declspec(implementation_key(12819)) enum XlCreator ShapeRange::GetCreator ( );
__declspec(implementation_key(12820)) IDispatchPtr ShapeRange::GetParent ( );
__declspec(implementation_key(12821)) long ShapeRange::GetCount ( );
__declspec(implementation_key(12822)) ShapePtr ShapeRange::Item ( const _variant_t & Index );
__declspec(implementation_key(12823)) ShapePtr ShapeRange::_Default ( const _variant_t & Index );
__declspec(implementation_key(12824)) IUnknownPtr ShapeRange::Get_NewEnum ( );
__declspec(implementation_key(12825)) HRESULT ShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(12826)) HRESULT ShapeRange::Apply ( );
__declspec(implementation_key(12827)) HRESULT ShapeRange::Delete ( );
__declspec(implementation_key(12828)) HRESULT ShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(12829)) ShapeRangePtr ShapeRange::Duplicate ( );
__declspec(implementation_key(12830)) HRESULT ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(12831)) HRESULT ShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(12832)) HRESULT ShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(12833)) HRESULT ShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(12834)) ShapePtr ShapeRange::Group ( );
__declspec(implementation_key(12835)) HRESULT ShapeRange::PickUp ( );
__declspec(implementation_key(12836)) HRESULT ShapeRange::RerouteConnections ( );
__declspec(implementation_key(12837)) ShapePtr ShapeRange::Regroup ( );
__declspec(implementation_key(12838)) HRESULT ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(12839)) HRESULT ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(12840)) HRESULT ShapeRange::Select ( const _variant_t & Replace );
__declspec(implementation_key(12841)) HRESULT ShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(12842)) ShapeRangePtr ShapeRange::Ungroup ( );
__declspec(implementation_key(12843)) HRESULT ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(12844)) AdjustmentsPtr ShapeRange::GetAdjustments ( );
__declspec(implementation_key(12845)) TextFramePtr ShapeRange::GetTextFrame ( );
__declspec(implementation_key(12846)) enum Office::MsoAutoShapeType ShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(12847)) void ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType _arg1 );
__declspec(implementation_key(12848)) CalloutFormatPtr ShapeRange::GetCallout ( );
__declspec(implementation_key(12849)) long ShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(12850)) enum Office::MsoTriState ShapeRange::GetConnector ( );
__declspec(implementation_key(12851)) ConnectorFormatPtr ShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(12852)) FillFormatPtr ShapeRange::GetFill ( );
__declspec(implementation_key(12853)) GroupShapesPtr ShapeRange::GetGroupItems ( );
__declspec(implementation_key(12854)) float ShapeRange::GetHeight ( );
__declspec(implementation_key(12855)) void ShapeRange::PutHeight ( float _arg1 );
__declspec(implementation_key(12856)) enum Office::MsoTriState ShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(12857)) float ShapeRange::GetLeft ( );
__declspec(implementation_key(12858)) void ShapeRange::PutLeft ( float _arg1 );
__declspec(implementation_key(12859)) LineFormatPtr ShapeRange::GetLine ( );
__declspec(implementation_key(12860)) enum Office::MsoTriState ShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(12861)) void ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(12862)) _bstr_t ShapeRange::GetName ( );
__declspec(implementation_key(12863)) void ShapeRange::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(12864)) ShapeNodesPtr ShapeRange::GetNodes ( );
__declspec(implementation_key(12865)) float ShapeRange::GetRotation ( );
__declspec(implementation_key(12866)) void ShapeRange::PutRotation ( float _arg1 );
__declspec(implementation_key(12867)) PictureFormatPtr ShapeRange::GetPictureFormat ( );
__declspec(implementation_key(12868)) ShadowFormatPtr ShapeRange::GetShadow ( );
__declspec(implementation_key(12869)) TextEffectFormatPtr ShapeRange::GetTextEffect ( );
__declspec(implementation_key(12870)) ThreeDFormatPtr ShapeRange::GetThreeD ( );
__declspec(implementation_key(12871)) float ShapeRange::GetTop ( );
__declspec(implementation_key(12872)) void ShapeRange::PutTop ( float _arg1 );
__declspec(implementation_key(12873)) enum Office::MsoShapeType ShapeRange::GetType ( );
__declspec(implementation_key(12874)) enum Office::MsoTriState ShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(12875)) _variant_t ShapeRange::GetVertices ( );
__declspec(implementation_key(12876)) enum Office::MsoTriState ShapeRange::GetVisible ( );
__declspec(implementation_key(12877)) void ShapeRange::PutVisible ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(12878)) float ShapeRange::GetWidth ( );
__declspec(implementation_key(12879)) void ShapeRange::PutWidth ( float _arg1 );
__declspec(implementation_key(12880)) long ShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(12881)) enum Office::MsoBlackWhiteMode ShapeRange::GetBlackWhiteMode ( );
__declspec(implementation_key(12882)) void ShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode _arg1 );
__declspec(implementation_key(12883)) _bstr_t ShapeRange::GetAlternativeText ( );
__declspec(implementation_key(12884)) void ShapeRange::PutAlternativeText ( _bstr_t _arg1 );
__declspec(implementation_key(12885)) DiagramNodePtr ShapeRange::GetDiagramNode ( );
__declspec(implementation_key(12886)) enum Office::MsoTriState ShapeRange::GetHasDiagramNode ( );
__declspec(implementation_key(12887)) DiagramPtr ShapeRange::GetDiagram ( );
__declspec(implementation_key(12888)) enum Office::MsoTriState ShapeRange::GetHasDiagram ( );
__declspec(implementation_key(12889)) enum Office::MsoTriState ShapeRange::GetChild ( );
__declspec(implementation_key(12890)) ShapePtr ShapeRange::GetParentGroup ( );
__declspec(implementation_key(12891)) Office::CanvasShapesPtr ShapeRange::GetCanvasItems ( );
__declspec(implementation_key(12892)) long ShapeRange::GetID ( );
__declspec(implementation_key(12893)) HRESULT ShapeRange::CanvasCropLeft ( float Increment );
__declspec(implementation_key(12894)) HRESULT ShapeRange::CanvasCropTop ( float Increment );
__declspec(implementation_key(12895)) HRESULT ShapeRange::CanvasCropRight ( float Increment );
__declspec(implementation_key(12896)) HRESULT ShapeRange::CanvasCropBottom ( float Increment );
__declspec(implementation_key(12897)) _ApplicationPtr GroupShapes::GetApplication ( );
__declspec(implementation_key(12898)) enum XlCreator GroupShapes::GetCreator ( );
__declspec(implementation_key(12899)) IDispatchPtr GroupShapes::GetParent ( );
__declspec(implementation_key(12900)) long GroupShapes::GetCount ( );
__declspec(implementation_key(12901)) ShapePtr GroupShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(12902)) ShapePtr GroupShapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(12903)) IUnknownPtr GroupShapes::Get_NewEnum ( );
__declspec(implementation_key(12904)) ShapeRangePtr GroupShapes::GetRange ( const _variant_t & Index );
__declspec(implementation_key(12905)) _ApplicationPtr TextFrame::GetApplication ( );
__declspec(implementation_key(12906)) enum XlCreator TextFrame::GetCreator ( );
__declspec(implementation_key(12907)) IDispatchPtr TextFrame::GetParent ( );
__declspec(implementation_key(12908)) float TextFrame::GetMarginBottom ( );
__declspec(implementation_key(12909)) void TextFrame::PutMarginBottom ( float _arg1 );
__declspec(implementation_key(12910)) float TextFrame::GetMarginLeft ( );
__declspec(implementation_key(12911)) void TextFrame::PutMarginLeft ( float _arg1 );
__declspec(implementation_key(12912)) float TextFrame::GetMarginRight ( );
__declspec(implementation_key(12913)) void TextFrame::PutMarginRight ( float _arg1 );
__declspec(implementation_key(12914)) float TextFrame::GetMarginTop ( );
__declspec(implementation_key(12915)) void TextFrame::PutMarginTop ( float _arg1 );
__declspec(implementation_key(12916)) enum Office::MsoTextOrientation TextFrame::GetOrientation ( );
__declspec(implementation_key(12917)) void TextFrame::PutOrientation ( enum Office::MsoTextOrientation _arg1 );
__declspec(implementation_key(12918)) CharactersPtr TextFrame::Characters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(12919)) enum XlHAlign TextFrame::GetHorizontalAlignment ( );
__declspec(implementation_key(12920)) void TextFrame::PutHorizontalAlignment ( enum XlHAlign _arg1 );
__declspec(implementation_key(12921)) enum XlVAlign TextFrame::GetVerticalAlignment ( );
__declspec(implementation_key(12922)) void TextFrame::PutVerticalAlignment ( enum XlVAlign _arg1 );
__declspec(implementation_key(12923)) VARIANT_BOOL TextFrame::GetAutoSize ( );
__declspec(implementation_key(12924)) void TextFrame::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12925)) long TextFrame::GetReadingOrder ( );
__declspec(implementation_key(12926)) void TextFrame::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(12927)) VARIANT_BOOL TextFrame::GetAutoMargins ( );
__declspec(implementation_key(12928)) void TextFrame::PutAutoMargins ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12929)) _ApplicationPtr ConnectorFormat::GetApplication ( );
__declspec(implementation_key(12930)) enum XlCreator ConnectorFormat::GetCreator ( );
__declspec(implementation_key(12931)) IDispatchPtr ConnectorFormat::GetParent ( );
__declspec(implementation_key(12932)) HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(12933)) HRESULT ConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(12934)) HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(12935)) HRESULT ConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(12936)) enum Office::MsoTriState ConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(12937)) ShapePtr ConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(12938)) long ConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(12939)) enum Office::MsoTriState ConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(12940)) ShapePtr ConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(12941)) long ConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(12942)) enum Office::MsoConnectorType ConnectorFormat::GetType ( );
__declspec(implementation_key(12943)) void ConnectorFormat::PutType ( enum Office::MsoConnectorType _arg1 );
__declspec(implementation_key(12944)) _ApplicationPtr FreeformBuilder::GetApplication ( );
__declspec(implementation_key(12945)) enum XlCreator FreeformBuilder::GetCreator ( );
__declspec(implementation_key(12946)) IDispatchPtr FreeformBuilder::GetParent ( );
__declspec(implementation_key(12947)) HRESULT FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, const _variant_t & X2, const _variant_t & Y2, const _variant_t & X3, const _variant_t & Y3 );
__declspec(implementation_key(12948)) ShapePtr FreeformBuilder::ConvertToShape ( );
__declspec(implementation_key(12949)) _ApplicationPtr ControlFormat::GetApplication ( );
__declspec(implementation_key(12950)) enum XlCreator ControlFormat::GetCreator ( );
__declspec(implementation_key(12951)) IDispatchPtr ControlFormat::GetParent ( );
__declspec(implementation_key(12952)) HRESULT ControlFormat::AddItem ( _bstr_t Text, const _variant_t & Index );
__declspec(implementation_key(12953)) HRESULT ControlFormat::RemoveAllItems ( );
__declspec(implementation_key(12954)) HRESULT ControlFormat::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(12955)) long ControlFormat::GetDropDownLines ( );
__declspec(implementation_key(12956)) void ControlFormat::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(12957)) VARIANT_BOOL ControlFormat::GetEnabled ( );
__declspec(implementation_key(12958)) void ControlFormat::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12959)) long ControlFormat::GetLargeChange ( );
__declspec(implementation_key(12960)) void ControlFormat::PutLargeChange ( long _arg1 );
__declspec(implementation_key(12961)) _bstr_t ControlFormat::GetLinkedCell ( );
__declspec(implementation_key(12962)) void ControlFormat::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(12963)) _variant_t ControlFormat::List ( const _variant_t & Index );
__declspec(implementation_key(12964)) long ControlFormat::GetListCount ( );
__declspec(implementation_key(12965)) void ControlFormat::PutListCount ( long _arg1 );
__declspec(implementation_key(12966)) _bstr_t ControlFormat::GetListFillRange ( );
__declspec(implementation_key(12967)) void ControlFormat::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(12968)) long ControlFormat::GetListIndex ( );
__declspec(implementation_key(12969)) void ControlFormat::PutListIndex ( long _arg1 );
__declspec(implementation_key(12970)) VARIANT_BOOL ControlFormat::GetLockedText ( );
__declspec(implementation_key(12971)) void ControlFormat::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12972)) long ControlFormat::GetMax ( );
__declspec(implementation_key(12973)) void ControlFormat::PutMax ( long _arg1 );
__declspec(implementation_key(12974)) long ControlFormat::GetMin ( );
__declspec(implementation_key(12975)) void ControlFormat::PutMin ( long _arg1 );
__declspec(implementation_key(12976)) long ControlFormat::GetMultiSelect ( );
__declspec(implementation_key(12977)) void ControlFormat::PutMultiSelect ( long _arg1 );
__declspec(implementation_key(12978)) VARIANT_BOOL ControlFormat::GetPrintObject ( );
__declspec(implementation_key(12979)) void ControlFormat::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12980)) long ControlFormat::GetSmallChange ( );
__declspec(implementation_key(12981)) void ControlFormat::PutSmallChange ( long _arg1 );
__declspec(implementation_key(12982)) long ControlFormat::Get_Default ( );
__declspec(implementation_key(12983)) void ControlFormat::Put_Default ( long _arg1 );
__declspec(implementation_key(12984)) long ControlFormat::GetValue ( );
__declspec(implementation_key(12985)) void ControlFormat::PutValue ( long _arg1 );
__declspec(implementation_key(12986)) _ApplicationPtr OLEFormat::GetApplication ( );
__declspec(implementation_key(12987)) enum XlCreator OLEFormat::GetCreator ( );
__declspec(implementation_key(12988)) IDispatchPtr OLEFormat::GetParent ( );
__declspec(implementation_key(12989)) HRESULT OLEFormat::Activate ( );
__declspec(implementation_key(12990)) IDispatchPtr OLEFormat::GetObject ( );
__declspec(implementation_key(12991)) _bstr_t OLEFormat::GetprogID ( );
__declspec(implementation_key(12992)) HRESULT OLEFormat::Verb ( const _variant_t & Verb );
__declspec(implementation_key(12993)) _ApplicationPtr LinkFormat::GetApplication ( );
__declspec(implementation_key(12994)) enum XlCreator LinkFormat::GetCreator ( );
__declspec(implementation_key(12995)) IDispatchPtr LinkFormat::GetParent ( );
__declspec(implementation_key(12996)) VARIANT_BOOL LinkFormat::GetAutoUpdate ( );
__declspec(implementation_key(12997)) void LinkFormat::PutAutoUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(12998)) VARIANT_BOOL LinkFormat::GetLocked ( );
__declspec(implementation_key(12999)) void LinkFormat::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13000)) HRESULT LinkFormat::Update ( );
__declspec(implementation_key(13001)) _ApplicationPtr PublishObjects::GetApplication ( );
__declspec(implementation_key(13002)) enum XlCreator PublishObjects::GetCreator ( );
__declspec(implementation_key(13003)) IDispatchPtr PublishObjects::GetParent ( );
__declspec(implementation_key(13004)) PublishObjectPtr PublishObjects::Add ( enum XlSourceType SourceType, _bstr_t Filename, const _variant_t & Sheet, const _variant_t & Source, const _variant_t & HtmlType, const _variant_t & DivID, const _variant_t & Title );
__declspec(implementation_key(13005)) long PublishObjects::GetCount ( );
__declspec(implementation_key(13006)) PublishObjectPtr PublishObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13007)) PublishObjectPtr PublishObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13008)) IUnknownPtr PublishObjects::Get_NewEnum ( );
__declspec(implementation_key(13009)) HRESULT PublishObjects::Delete ( );
__declspec(implementation_key(13010)) HRESULT PublishObjects::Publish ( );
__declspec(implementation_key(13011)) _ApplicationPtr OLEDBError::GetApplication ( );
__declspec(implementation_key(13012)) enum XlCreator OLEDBError::GetCreator ( );
__declspec(implementation_key(13013)) IDispatchPtr OLEDBError::GetParent ( );
__declspec(implementation_key(13014)) _bstr_t OLEDBError::GetSqlState ( );
__declspec(implementation_key(13015)) _bstr_t OLEDBError::GetErrorString ( );
__declspec(implementation_key(13016)) long OLEDBError::GetNative ( );
__declspec(implementation_key(13017)) long OLEDBError::GetNumber ( );
__declspec(implementation_key(13018)) long OLEDBError::GetStage ( );
__declspec(implementation_key(13019)) _ApplicationPtr OLEDBErrors::GetApplication ( );
__declspec(implementation_key(13020)) enum XlCreator OLEDBErrors::GetCreator ( );
__declspec(implementation_key(13021)) IDispatchPtr OLEDBErrors::GetParent ( );
__declspec(implementation_key(13022)) long OLEDBErrors::GetCount ( );
__declspec(implementation_key(13023)) OLEDBErrorPtr OLEDBErrors::Item ( long Index );
__declspec(implementation_key(13024)) OLEDBErrorPtr OLEDBErrors::Get_Default ( long Index );
__declspec(implementation_key(13025)) IUnknownPtr OLEDBErrors::_NewEnum ( );
__declspec(implementation_key(13026)) _ApplicationPtr Phonetics::GetApplication ( );
__declspec(implementation_key(13027)) enum XlCreator Phonetics::GetCreator ( );
__declspec(implementation_key(13028)) IDispatchPtr Phonetics::GetParent ( );
__declspec(implementation_key(13029)) long Phonetics::GetCount ( );
__declspec(implementation_key(13030)) long Phonetics::GetStart ( );
__declspec(implementation_key(13031)) long Phonetics::GetLength ( );
__declspec(implementation_key(13032)) VARIANT_BOOL Phonetics::GetVisible ( );
__declspec(implementation_key(13033)) void Phonetics::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13034)) long Phonetics::GetCharacterType ( );
__declspec(implementation_key(13035)) void Phonetics::PutCharacterType ( long _arg1 );
__declspec(implementation_key(13036)) long Phonetics::GetAlignment ( );
__declspec(implementation_key(13037)) void Phonetics::PutAlignment ( long _arg1 );
__declspec(implementation_key(13038)) FontPtr Phonetics::GetFont ( );
__declspec(implementation_key(13039)) IDispatchPtr Phonetics::GetItem ( long Index );
__declspec(implementation_key(13040)) HRESULT Phonetics::Delete ( );
__declspec(implementation_key(13041)) HRESULT Phonetics::Add ( long Start, long Length, _bstr_t Text );
__declspec(implementation_key(13042)) _bstr_t Phonetics::GetText ( );
__declspec(implementation_key(13043)) void Phonetics::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(13044)) IDispatchPtr Phonetics::Get_Default ( long Index );
__declspec(implementation_key(13045)) IUnknownPtr Phonetics::Get_NewEnum ( );
__declspec(implementation_key(13046)) _ApplicationPtr PivotLayout::GetApplication ( );
__declspec(implementation_key(13047)) enum XlCreator PivotLayout::GetCreator ( );
__declspec(implementation_key(13048)) IDispatchPtr PivotLayout::GetParent ( );
__declspec(implementation_key(13049)) IDispatchPtr PivotLayout::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(13050)) IDispatchPtr PivotLayout::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(13051)) IDispatchPtr PivotLayout::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(13052)) IDispatchPtr PivotLayout::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(13053)) IDispatchPtr PivotLayout::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(13054)) IDispatchPtr PivotLayout::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(13055)) IDispatchPtr PivotLayout::GetPivotFields ( const _variant_t & Index );
__declspec(implementation_key(13056)) CubeFieldsPtr PivotLayout::GetCubeFields ( );
__declspec(implementation_key(13057)) PivotCachePtr PivotLayout::GetPivotCache ( );
__declspec(implementation_key(13058)) PivotTablePtr PivotLayout::GetPivotTable ( );
__declspec(implementation_key(13059)) _bstr_t PivotLayout::GetInnerDetail ( );
__declspec(implementation_key(13060)) void PivotLayout::PutInnerDetail ( _bstr_t _arg1 );
__declspec(implementation_key(13061)) HRESULT PivotLayout::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AppendField );
__declspec(implementation_key(13062)) _ApplicationPtr DisplayUnitLabel::GetApplication ( );
__declspec(implementation_key(13063)) enum XlCreator DisplayUnitLabel::GetCreator ( );
__declspec(implementation_key(13064)) IDispatchPtr DisplayUnitLabel::GetParent ( );
__declspec(implementation_key(13065)) _bstr_t DisplayUnitLabel::GetName ( );
__declspec(implementation_key(13066)) _variant_t DisplayUnitLabel::Select ( );
__declspec(implementation_key(13067)) BorderPtr DisplayUnitLabel::GetBorder ( );
__declspec(implementation_key(13068)) _variant_t DisplayUnitLabel::Delete ( );
__declspec(implementation_key(13069)) InteriorPtr DisplayUnitLabel::GetInterior ( );
__declspec(implementation_key(13070)) ChartFillFormatPtr DisplayUnitLabel::GetFill ( );
__declspec(implementation_key(13071)) _bstr_t DisplayUnitLabel::GetCaption ( );
__declspec(implementation_key(13072)) void DisplayUnitLabel::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(13073)) CharactersPtr DisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(13074)) FontPtr DisplayUnitLabel::GetFont ( );
__declspec(implementation_key(13075)) _variant_t DisplayUnitLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(13076)) void DisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(13077)) double DisplayUnitLabel::GetLeft ( );
__declspec(implementation_key(13078)) void DisplayUnitLabel::PutLeft ( double _arg1 );
__declspec(implementation_key(13079)) _variant_t DisplayUnitLabel::GetOrientation ( );
__declspec(implementation_key(13080)) void DisplayUnitLabel::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(13081)) VARIANT_BOOL DisplayUnitLabel::GetShadow ( );
__declspec(implementation_key(13082)) void DisplayUnitLabel::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13083)) _bstr_t DisplayUnitLabel::GetText ( );
__declspec(implementation_key(13084)) void DisplayUnitLabel::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(13085)) double DisplayUnitLabel::GetTop ( );
__declspec(implementation_key(13086)) void DisplayUnitLabel::PutTop ( double _arg1 );
__declspec(implementation_key(13087)) _variant_t DisplayUnitLabel::GetVerticalAlignment ( );
__declspec(implementation_key(13088)) void DisplayUnitLabel::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(13089)) long DisplayUnitLabel::GetReadingOrder ( );
__declspec(implementation_key(13090)) void DisplayUnitLabel::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(13091)) _variant_t DisplayUnitLabel::GetAutoScaleFont ( );
__declspec(implementation_key(13092)) void DisplayUnitLabel::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(13093)) _ApplicationPtr CellFormat::GetApplication ( );
__declspec(implementation_key(13094)) enum XlCreator CellFormat::GetCreator ( );
__declspec(implementation_key(13095)) IDispatchPtr CellFormat::GetParent ( );
__declspec(implementation_key(13096)) BordersPtr CellFormat::GetBorders ( );
__declspec(implementation_key(13097)) void CellFormat::PutRefBorders ( struct Borders * _arg1 );
__declspec(implementation_key(13098)) FontPtr CellFormat::GetFont ( );
__declspec(implementation_key(13099)) void CellFormat::PutRefFont ( struct Font * _arg1 );
__declspec(implementation_key(13100)) InteriorPtr CellFormat::GetInterior ( );
__declspec(implementation_key(13101)) void CellFormat::PutRefInterior ( struct Interior * _arg1 );
__declspec(implementation_key(13102)) _variant_t CellFormat::GetNumberFormat ( );
__declspec(implementation_key(13103)) void CellFormat::PutNumberFormat ( const _variant_t & _arg1 );
__declspec(implementation_key(13104)) _variant_t CellFormat::GetNumberFormatLocal ( );
__declspec(implementation_key(13105)) void CellFormat::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(13106)) _variant_t CellFormat::GetAddIndent ( );
__declspec(implementation_key(13107)) void CellFormat::PutAddIndent ( const _variant_t & _arg1 );
__declspec(implementation_key(13108)) _variant_t CellFormat::GetIndentLevel ( );
__declspec(implementation_key(13109)) void CellFormat::PutIndentLevel ( const _variant_t & _arg1 );
__declspec(implementation_key(13110)) _variant_t CellFormat::GetHorizontalAlignment ( );
__declspec(implementation_key(13111)) void CellFormat::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(13112)) _variant_t CellFormat::GetVerticalAlignment ( );
__declspec(implementation_key(13113)) void CellFormat::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(13114)) _variant_t CellFormat::GetOrientation ( );
__declspec(implementation_key(13115)) void CellFormat::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(13116)) _variant_t CellFormat::GetShrinkToFit ( );
__declspec(implementation_key(13117)) void CellFormat::PutShrinkToFit ( const _variant_t & _arg1 );
__declspec(implementation_key(13118)) _variant_t CellFormat::GetWrapText ( );
__declspec(implementation_key(13119)) void CellFormat::PutWrapText ( const _variant_t & _arg1 );
__declspec(implementation_key(13120)) _variant_t CellFormat::GetLocked ( );
__declspec(implementation_key(13121)) void CellFormat::PutLocked ( const _variant_t & _arg1 );
__declspec(implementation_key(13122)) _variant_t CellFormat::GetFormulaHidden ( );
__declspec(implementation_key(13123)) void CellFormat::PutFormulaHidden ( const _variant_t & _arg1 );
__declspec(implementation_key(13124)) _variant_t CellFormat::GetMergeCells ( );
__declspec(implementation_key(13125)) void CellFormat::PutMergeCells ( const _variant_t & _arg1 );
__declspec(implementation_key(13126)) HRESULT CellFormat::Clear ( );
__declspec(implementation_key(13127)) _ApplicationPtr UsedObjects::GetApplication ( );
__declspec(implementation_key(13128)) enum XlCreator UsedObjects::GetCreator ( );
__declspec(implementation_key(13129)) IDispatchPtr UsedObjects::GetParent ( );
__declspec(implementation_key(13130)) long UsedObjects::GetCount ( );
__declspec(implementation_key(13131)) IUnknownPtr UsedObjects::Get_NewEnum ( );
__declspec(implementation_key(13132)) IDispatchPtr UsedObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13133)) IDispatchPtr UsedObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13134)) _ApplicationPtr CustomProperties::GetApplication ( );
__declspec(implementation_key(13135)) enum XlCreator CustomProperties::GetCreator ( );
__declspec(implementation_key(13136)) IDispatchPtr CustomProperties::GetParent ( );
__declspec(implementation_key(13137)) CustomPropertyPtr CustomProperties::Add ( _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(13138)) long CustomProperties::GetCount ( );
__declspec(implementation_key(13139)) CustomPropertyPtr CustomProperties::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13140)) CustomPropertyPtr CustomProperties::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13141)) IUnknownPtr CustomProperties::Get_NewEnum ( );
__declspec(implementation_key(13142)) _ApplicationPtr CustomProperty::GetApplication ( );
__declspec(implementation_key(13143)) enum XlCreator CustomProperty::GetCreator ( );
__declspec(implementation_key(13144)) IDispatchPtr CustomProperty::GetParent ( );
__declspec(implementation_key(13145)) _bstr_t CustomProperty::GetName ( );
__declspec(implementation_key(13146)) void CustomProperty::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(13147)) _variant_t CustomProperty::GetValue ( );
__declspec(implementation_key(13148)) void CustomProperty::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(13149)) _variant_t CustomProperty::Get_Default ( );
__declspec(implementation_key(13150)) HRESULT CustomProperty::Delete ( );
__declspec(implementation_key(13151)) _ApplicationPtr CalculatedMembers::GetApplication ( );
__declspec(implementation_key(13152)) enum XlCreator CalculatedMembers::GetCreator ( );
__declspec(implementation_key(13153)) IDispatchPtr CalculatedMembers::GetParent ( );
__declspec(implementation_key(13154)) long CalculatedMembers::GetCount ( );
__declspec(implementation_key(13155)) CalculatedMemberPtr CalculatedMembers::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13156)) CalculatedMemberPtr CalculatedMembers::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13157)) IUnknownPtr CalculatedMembers::Get_NewEnum ( );
__declspec(implementation_key(13158)) CalculatedMemberPtr CalculatedMembers::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & SolveOrder, const _variant_t & Type );
__declspec(implementation_key(13159)) _ApplicationPtr CalculatedMember::GetApplication ( );
__declspec(implementation_key(13160)) enum XlCreator CalculatedMember::GetCreator ( );
__declspec(implementation_key(13161)) IDispatchPtr CalculatedMember::GetParent ( );
__declspec(implementation_key(13162)) _bstr_t CalculatedMember::GetName ( );
__declspec(implementation_key(13163)) _bstr_t CalculatedMember::GetFormula ( );
__declspec(implementation_key(13164)) _bstr_t CalculatedMember::GetSourceName ( );
__declspec(implementation_key(13165)) long CalculatedMember::GetSolveOrder ( );
__declspec(implementation_key(13166)) VARIANT_BOOL CalculatedMember::GetIsValid ( );
__declspec(implementation_key(13167)) _bstr_t CalculatedMember::Get_Default ( );
__declspec(implementation_key(13168)) HRESULT CalculatedMember::Delete ( );
__declspec(implementation_key(13169)) enum XlCalculatedMemberType CalculatedMember::GetType ( );
__declspec(implementation_key(13170)) _ApplicationPtr Watches::GetApplication ( );
__declspec(implementation_key(13171)) enum XlCreator Watches::GetCreator ( );
__declspec(implementation_key(13172)) IDispatchPtr Watches::GetParent ( );
__declspec(implementation_key(13173)) WatchPtr Watches::Add ( const _variant_t & Source );
__declspec(implementation_key(13174)) long Watches::GetCount ( );
__declspec(implementation_key(13175)) WatchPtr Watches::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13176)) WatchPtr Watches::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13177)) IUnknownPtr Watches::Get_NewEnum ( );
__declspec(implementation_key(13178)) HRESULT Watches::Delete ( );
__declspec(implementation_key(13179)) _ApplicationPtr Watch::GetApplication ( );
__declspec(implementation_key(13180)) enum XlCreator Watch::GetCreator ( );
__declspec(implementation_key(13181)) IDispatchPtr Watch::GetParent ( );
__declspec(implementation_key(13182)) HRESULT Watch::Delete ( );
__declspec(implementation_key(13183)) _variant_t Watch::GetSource ( );
__declspec(implementation_key(13184)) _ApplicationPtr PivotCell::GetApplication ( );
__declspec(implementation_key(13185)) enum XlCreator PivotCell::GetCreator ( );
__declspec(implementation_key(13186)) IDispatchPtr PivotCell::GetParent ( );
__declspec(implementation_key(13187)) enum XlPivotCellType PivotCell::GetPivotCellType ( );
__declspec(implementation_key(13188)) PivotTablePtr PivotCell::GetPivotTable ( );
__declspec(implementation_key(13189)) PivotFieldPtr PivotCell::GetDataField ( );
__declspec(implementation_key(13190)) PivotFieldPtr PivotCell::GetPivotField ( );
__declspec(implementation_key(13191)) PivotItemPtr PivotCell::GetPivotItem ( );
__declspec(implementation_key(13192)) PivotItemListPtr PivotCell::GetRowItems ( );
__declspec(implementation_key(13193)) PivotItemListPtr PivotCell::GetColumnItems ( );
__declspec(implementation_key(13194)) RangePtr PivotCell::GetRange ( );
__declspec(implementation_key(13195)) _bstr_t PivotCell::GetDummy18 ( );
__declspec(implementation_key(13196)) enum XlConsolidationFunction PivotCell::GetCustomSubtotalFunction ( );
__declspec(implementation_key(13197)) _ApplicationPtr Graphic::GetApplication ( );
__declspec(implementation_key(13198)) enum XlCreator Graphic::GetCreator ( );
__declspec(implementation_key(13199)) IDispatchPtr Graphic::GetParent ( );
__declspec(implementation_key(13200)) float Graphic::GetBrightness ( );
__declspec(implementation_key(13201)) void Graphic::PutBrightness ( float _arg1 );
__declspec(implementation_key(13202)) enum Office::MsoPictureColorType Graphic::GetColorType ( );
__declspec(implementation_key(13203)) void Graphic::PutColorType ( enum Office::MsoPictureColorType _arg1 );
__declspec(implementation_key(13204)) float Graphic::GetContrast ( );
__declspec(implementation_key(13205)) void Graphic::PutContrast ( float _arg1 );
__declspec(implementation_key(13206)) float Graphic::GetCropBottom ( );
__declspec(implementation_key(13207)) void Graphic::PutCropBottom ( float _arg1 );
__declspec(implementation_key(13208)) float Graphic::GetCropLeft ( );
__declspec(implementation_key(13209)) void Graphic::PutCropLeft ( float _arg1 );
__declspec(implementation_key(13210)) float Graphic::GetCropRight ( );
__declspec(implementation_key(13211)) void Graphic::PutCropRight ( float _arg1 );
__declspec(implementation_key(13212)) float Graphic::GetCropTop ( );
__declspec(implementation_key(13213)) void Graphic::PutCropTop ( float _arg1 );
__declspec(implementation_key(13214)) _bstr_t Graphic::GetFilename ( );
__declspec(implementation_key(13215)) void Graphic::PutFilename ( _bstr_t _arg1 );
__declspec(implementation_key(13216)) float Graphic::GetHeight ( );
__declspec(implementation_key(13217)) void Graphic::PutHeight ( float _arg1 );
__declspec(implementation_key(13218)) enum Office::MsoTriState Graphic::GetLockAspectRatio ( );
__declspec(implementation_key(13219)) void Graphic::PutLockAspectRatio ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(13220)) float Graphic::GetWidth ( );
__declspec(implementation_key(13221)) void Graphic::PutWidth ( float _arg1 );
__declspec(implementation_key(13222)) _ApplicationPtr AutoRecover::GetApplication ( );
__declspec(implementation_key(13223)) enum XlCreator AutoRecover::GetCreator ( );
__declspec(implementation_key(13224)) IDispatchPtr AutoRecover::GetParent ( );
__declspec(implementation_key(13225)) VARIANT_BOOL AutoRecover::GetEnabled ( );
__declspec(implementation_key(13226)) void AutoRecover::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13227)) long AutoRecover::GetTime ( );
__declspec(implementation_key(13228)) void AutoRecover::PutTime ( long _arg1 );
__declspec(implementation_key(13229)) _bstr_t AutoRecover::GetPath ( );
__declspec(implementation_key(13230)) void AutoRecover::PutPath ( _bstr_t _arg1 );
__declspec(implementation_key(13231)) _ApplicationPtr ErrorCheckingOptions::GetApplication ( );
__declspec(implementation_key(13232)) enum XlCreator ErrorCheckingOptions::GetCreator ( );
__declspec(implementation_key(13233)) IDispatchPtr ErrorCheckingOptions::GetParent ( );
__declspec(implementation_key(13234)) VARIANT_BOOL ErrorCheckingOptions::GetBackgroundChecking ( );
__declspec(implementation_key(13235)) void ErrorCheckingOptions::PutBackgroundChecking ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13236)) enum XlColorIndex ErrorCheckingOptions::GetIndicatorColorIndex ( );
__declspec(implementation_key(13237)) void ErrorCheckingOptions::PutIndicatorColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(13238)) VARIANT_BOOL ErrorCheckingOptions::GetEvaluateToError ( );
__declspec(implementation_key(13239)) void ErrorCheckingOptions::PutEvaluateToError ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13240)) VARIANT_BOOL ErrorCheckingOptions::GetTextDate ( );
__declspec(implementation_key(13241)) void ErrorCheckingOptions::PutTextDate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13242)) VARIANT_BOOL ErrorCheckingOptions::GetNumberAsText ( );
__declspec(implementation_key(13243)) void ErrorCheckingOptions::PutNumberAsText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13244)) VARIANT_BOOL ErrorCheckingOptions::GetInconsistentFormula ( );
__declspec(implementation_key(13245)) void ErrorCheckingOptions::PutInconsistentFormula ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13246)) VARIANT_BOOL ErrorCheckingOptions::GetOmittedCells ( );
__declspec(implementation_key(13247)) void ErrorCheckingOptions::PutOmittedCells ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13248)) VARIANT_BOOL ErrorCheckingOptions::GetUnlockedFormulaCells ( );
__declspec(implementation_key(13249)) void ErrorCheckingOptions::PutUnlockedFormulaCells ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13250)) VARIANT_BOOL ErrorCheckingOptions::GetEmptyCellReferences ( );
__declspec(implementation_key(13251)) void ErrorCheckingOptions::PutEmptyCellReferences ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13252)) _ApplicationPtr Errors::GetApplication ( );
__declspec(implementation_key(13253)) enum XlCreator Errors::GetCreator ( );
__declspec(implementation_key(13254)) IDispatchPtr Errors::GetParent ( );
__declspec(implementation_key(13255)) ErrorPtr Errors::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13256)) ErrorPtr Errors::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13257)) _ApplicationPtr Error::GetApplication ( );
__declspec(implementation_key(13258)) enum XlCreator Error::GetCreator ( );
__declspec(implementation_key(13259)) IDispatchPtr Error::GetParent ( );
__declspec(implementation_key(13260)) VARIANT_BOOL Error::GetValue ( );
__declspec(implementation_key(13261)) VARIANT_BOOL Error::GetIgnore ( );
__declspec(implementation_key(13262)) void Error::PutIgnore ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13263)) _ApplicationPtr SmartTagAction::GetApplication ( );
__declspec(implementation_key(13264)) enum XlCreator SmartTagAction::GetCreator ( );
__declspec(implementation_key(13265)) IDispatchPtr SmartTagAction::GetParent ( );
__declspec(implementation_key(13266)) _bstr_t SmartTagAction::GetName ( );
__declspec(implementation_key(13267)) HRESULT SmartTagAction::Execute ( );
__declspec(implementation_key(13268)) _bstr_t SmartTagAction::Get_Default ( );
__declspec(implementation_key(13269)) _ApplicationPtr SmartTagActions::GetApplication ( );
__declspec(implementation_key(13270)) enum XlCreator SmartTagActions::GetCreator ( );
__declspec(implementation_key(13271)) IDispatchPtr SmartTagActions::GetParent ( );
__declspec(implementation_key(13272)) long SmartTagActions::GetCount ( );
__declspec(implementation_key(13273)) SmartTagActionPtr SmartTagActions::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13274)) SmartTagActionPtr SmartTagActions::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13275)) IUnknownPtr SmartTagActions::Get_NewEnum ( );
__declspec(implementation_key(13276)) _ApplicationPtr SmartTag::GetApplication ( );
__declspec(implementation_key(13277)) enum XlCreator SmartTag::GetCreator ( );
__declspec(implementation_key(13278)) IDispatchPtr SmartTag::GetParent ( );
__declspec(implementation_key(13279)) _bstr_t SmartTag::GetDownloadURL ( );
__declspec(implementation_key(13280)) _bstr_t SmartTag::GetName ( );
__declspec(implementation_key(13281)) _bstr_t SmartTag::Get_Default ( );
__declspec(implementation_key(13282)) _bstr_t SmartTag::GetXML ( );
__declspec(implementation_key(13283)) RangePtr SmartTag::GetRange ( );
__declspec(implementation_key(13284)) HRESULT SmartTag::Delete ( );
__declspec(implementation_key(13285)) SmartTagActionsPtr SmartTag::GetSmartTagActions ( );
__declspec(implementation_key(13286)) CustomPropertiesPtr SmartTag::GetProperties ( );
__declspec(implementation_key(13287)) _ApplicationPtr SmartTags::GetApplication ( );
__declspec(implementation_key(13288)) enum XlCreator SmartTags::GetCreator ( );
__declspec(implementation_key(13289)) IDispatchPtr SmartTags::GetParent ( );
__declspec(implementation_key(13290)) SmartTagPtr SmartTags::Add ( _bstr_t SmartTagType );
__declspec(implementation_key(13291)) long SmartTags::GetCount ( );
__declspec(implementation_key(13292)) SmartTagPtr SmartTags::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13293)) IUnknownPtr SmartTags::Get_NewEnum ( );
__declspec(implementation_key(13294)) _ApplicationPtr SmartTagRecognizer::GetApplication ( );
__declspec(implementation_key(13295)) enum XlCreator SmartTagRecognizer::GetCreator ( );
__declspec(implementation_key(13296)) IDispatchPtr SmartTagRecognizer::GetParent ( );
__declspec(implementation_key(13297)) VARIANT_BOOL SmartTagRecognizer::GetEnabled ( );
__declspec(implementation_key(13298)) void SmartTagRecognizer::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13299)) _bstr_t SmartTagRecognizer::GetprogID ( );
__declspec(implementation_key(13300)) _bstr_t SmartTagRecognizer::Get_Default ( );
__declspec(implementation_key(13301)) _bstr_t SmartTagRecognizer::GetFullName ( );
__declspec(implementation_key(13302)) _ApplicationPtr SmartTagRecognizers::GetApplication ( );
__declspec(implementation_key(13303)) enum XlCreator SmartTagRecognizers::GetCreator ( );
__declspec(implementation_key(13304)) IDispatchPtr SmartTagRecognizers::GetParent ( );
__declspec(implementation_key(13305)) long SmartTagRecognizers::GetCount ( );
__declspec(implementation_key(13306)) SmartTagRecognizerPtr SmartTagRecognizers::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13307)) SmartTagRecognizerPtr SmartTagRecognizers::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13308)) IUnknownPtr SmartTagRecognizers::Get_NewEnum ( );
__declspec(implementation_key(13309)) VARIANT_BOOL SmartTagRecognizers::GetRecognize ( );
__declspec(implementation_key(13310)) void SmartTagRecognizers::PutRecognize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13311)) _ApplicationPtr SmartTagOptions::GetApplication ( );
__declspec(implementation_key(13312)) enum XlCreator SmartTagOptions::GetCreator ( );
__declspec(implementation_key(13313)) IDispatchPtr SmartTagOptions::GetParent ( );
__declspec(implementation_key(13314)) enum XlSmartTagDisplayMode SmartTagOptions::GetDisplaySmartTags ( );
__declspec(implementation_key(13315)) void SmartTagOptions::PutDisplaySmartTags ( enum XlSmartTagDisplayMode _arg1 );
__declspec(implementation_key(13316)) VARIANT_BOOL SmartTagOptions::GetEmbedSmartTags ( );
__declspec(implementation_key(13317)) void SmartTagOptions::PutEmbedSmartTags ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13318)) long SpellingOptions::GetDictLang ( );
__declspec(implementation_key(13319)) void SpellingOptions::PutDictLang ( long _arg1 );
__declspec(implementation_key(13320)) _bstr_t SpellingOptions::GetUserDict ( );
__declspec(implementation_key(13321)) void SpellingOptions::PutUserDict ( _bstr_t _arg1 );
__declspec(implementation_key(13322)) VARIANT_BOOL SpellingOptions::GetIgnoreCaps ( );
__declspec(implementation_key(13323)) void SpellingOptions::PutIgnoreCaps ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13324)) VARIANT_BOOL SpellingOptions::GetSuggestMainOnly ( );
__declspec(implementation_key(13325)) void SpellingOptions::PutSuggestMainOnly ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13326)) VARIANT_BOOL SpellingOptions::GetIgnoreMixedDigits ( );
__declspec(implementation_key(13327)) void SpellingOptions::PutIgnoreMixedDigits ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13328)) VARIANT_BOOL SpellingOptions::GetIgnoreFileNames ( );
__declspec(implementation_key(13329)) void SpellingOptions::PutIgnoreFileNames ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13330)) VARIANT_BOOL SpellingOptions::GetGermanPostReform ( );
__declspec(implementation_key(13331)) void SpellingOptions::PutGermanPostReform ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13332)) VARIANT_BOOL SpellingOptions::GetKoreanCombineAux ( );
__declspec(implementation_key(13333)) void SpellingOptions::PutKoreanCombineAux ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13334)) VARIANT_BOOL SpellingOptions::GetKoreanUseAutoChangeList ( );
__declspec(implementation_key(13335)) void SpellingOptions::PutKoreanUseAutoChangeList ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13336)) VARIANT_BOOL SpellingOptions::GetKoreanProcessCompound ( );
__declspec(implementation_key(13337)) void SpellingOptions::PutKoreanProcessCompound ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13338)) enum XlHebrewModes SpellingOptions::GetHebrewModes ( );
__declspec(implementation_key(13339)) void SpellingOptions::PutHebrewModes ( enum XlHebrewModes _arg1 );
__declspec(implementation_key(13340)) enum XlArabicModes SpellingOptions::GetArabicModes ( );
__declspec(implementation_key(13341)) void SpellingOptions::PutArabicModes ( enum XlArabicModes _arg1 );
__declspec(implementation_key(13342)) HRESULT Speech::Speak ( _bstr_t Text, const _variant_t & SpeakAsync, const _variant_t & SpeakXML, const _variant_t & Purge );
__declspec(implementation_key(13343)) enum XlSpeakDirection Speech::GetDirection ( );
__declspec(implementation_key(13344)) void Speech::PutDirection ( enum XlSpeakDirection _arg1 );
__declspec(implementation_key(13345)) VARIANT_BOOL Speech::GetSpeakCellOnEnter ( );
__declspec(implementation_key(13346)) void Speech::PutSpeakCellOnEnter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13347)) VARIANT_BOOL Protection::GetAllowFormattingCells ( );
__declspec(implementation_key(13348)) VARIANT_BOOL Protection::GetAllowFormattingColumns ( );
__declspec(implementation_key(13349)) VARIANT_BOOL Protection::GetAllowFormattingRows ( );
__declspec(implementation_key(13350)) VARIANT_BOOL Protection::GetAllowInsertingColumns ( );
__declspec(implementation_key(13351)) VARIANT_BOOL Protection::GetAllowInsertingRows ( );
__declspec(implementation_key(13352)) VARIANT_BOOL Protection::GetAllowInsertingHyperlinks ( );
__declspec(implementation_key(13353)) VARIANT_BOOL Protection::GetAllowDeletingColumns ( );
__declspec(implementation_key(13354)) VARIANT_BOOL Protection::GetAllowDeletingRows ( );
__declspec(implementation_key(13355)) VARIANT_BOOL Protection::GetAllowSorting ( );
__declspec(implementation_key(13356)) VARIANT_BOOL Protection::GetAllowFiltering ( );
__declspec(implementation_key(13357)) VARIANT_BOOL Protection::GetAllowUsingPivotTables ( );
__declspec(implementation_key(13358)) AllowEditRangesPtr Protection::GetAllowEditRanges ( );
__declspec(implementation_key(13359)) _ApplicationPtr PivotItemList::GetApplication ( );
__declspec(implementation_key(13360)) enum XlCreator PivotItemList::GetCreator ( );
__declspec(implementation_key(13361)) IDispatchPtr PivotItemList::GetParent ( );
__declspec(implementation_key(13362)) long PivotItemList::GetCount ( );
__declspec(implementation_key(13363)) PivotItemPtr PivotItemList::Item ( const _variant_t & Index );
__declspec(implementation_key(13364)) PivotItemPtr PivotItemList::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(13365)) IUnknownPtr PivotItemList::_NewEnum ( );
__declspec(implementation_key(13366)) _ApplicationPtr Tab::GetApplication ( );
__declspec(implementation_key(13367)) enum XlCreator Tab::GetCreator ( );
__declspec(implementation_key(13368)) IDispatchPtr Tab::GetParent ( );
__declspec(implementation_key(13369)) _variant_t Tab::GetColor ( );
__declspec(implementation_key(13370)) void Tab::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(13371)) enum XlColorIndex Tab::GetColorIndex ( );
__declspec(implementation_key(13372)) void Tab::PutColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(13373)) long AllowEditRanges::GetCount ( );
__declspec(implementation_key(13374)) AllowEditRangePtr AllowEditRanges::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13375)) AllowEditRangePtr AllowEditRanges::Add ( _bstr_t Title, struct Range * Range, const _variant_t & Password );
__declspec(implementation_key(13376)) AllowEditRangePtr AllowEditRanges::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13377)) IUnknownPtr AllowEditRanges::Get_NewEnum ( );
__declspec(implementation_key(13378)) _bstr_t AllowEditRange::GetTitle ( );
__declspec(implementation_key(13379)) void AllowEditRange::PutTitle ( _bstr_t _arg1 );
__declspec(implementation_key(13380)) RangePtr AllowEditRange::GetRange ( );
__declspec(implementation_key(13381)) void AllowEditRange::PutRefRange ( struct Range * _arg1 );
__declspec(implementation_key(13382)) HRESULT AllowEditRange::ChangePassword ( _bstr_t Password );
__declspec(implementation_key(13383)) HRESULT AllowEditRange::Delete ( );
__declspec(implementation_key(13384)) HRESULT AllowEditRange::Unprotect ( const _variant_t & Password );
__declspec(implementation_key(13385)) UserAccessListPtr AllowEditRange::GetUsers ( );
__declspec(implementation_key(13386)) long UserAccessList::GetCount ( );
__declspec(implementation_key(13387)) UserAccessPtr UserAccessList::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13388)) UserAccessPtr UserAccessList::Add ( _bstr_t Name, VARIANT_BOOL AllowEdit );
__declspec(implementation_key(13389)) HRESULT UserAccessList::DeleteAll ( );
__declspec(implementation_key(13390)) UserAccessPtr UserAccessList::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13391)) IUnknownPtr UserAccessList::Get_NewEnum ( );
__declspec(implementation_key(13392)) _bstr_t UserAccess::GetName ( );
__declspec(implementation_key(13393)) VARIANT_BOOL UserAccess::GetAllowEdit ( );
__declspec(implementation_key(13394)) void UserAccess::PutAllowEdit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(13395)) HRESULT UserAccess::Delete ( );
__declspec(implementation_key(13396)) long RTD::GetThrottleInterval ( );
__declspec(implementation_key(13397)) void RTD::PutThrottleInterval ( long _arg1 );
__declspec(implementation_key(13398)) HRESULT RTD::RefreshData ( );
__declspec(implementation_key(13399)) HRESULT RTD::RestartServers ( );
__declspec(implementation_key(13400)) _ApplicationPtr Diagram::GetApplication ( );
__declspec(implementation_key(13401)) enum XlCreator Diagram::GetCreator ( );
__declspec(implementation_key(13402)) IDispatchPtr Diagram::GetParent ( );
__declspec(implementation_key(13403)) DiagramNodesPtr Diagram::GetNodes ( );
__declspec(implementation_key(13404)) enum Office::MsoDiagramType Diagram::GetType ( );
__declspec(implementation_key(13405)) enum Office::MsoTriState Diagram::GetAutoLayout ( );
__declspec(implementation_key(13406)) void Diagram::PutAutoLayout ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(13407)) enum Office::MsoTriState Diagram::GetReverse ( );
__declspec(implementation_key(13408)) void Diagram::PutReverse ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(13409)) enum Office::MsoTriState Diagram::GetAutoFormat ( );
__declspec(implementation_key(13410)) void Diagram::PutAutoFormat ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(13411)) HRESULT Diagram::Convert ( enum Office::MsoDiagramType Type );
__declspec(implementation_key(13412)) HRESULT IDummy::_ActiveSheetOrChart ( );
__declspec(implementation_key(13413)) HRESULT IDummy::ignorethis ( );
__declspec(implementation_key(13414)) HRESULT IDummy::ChDir ( );
__declspec(implementation_key(13415)) HRESULT IDummy::DoScript ( );
__declspec(implementation_key(13416)) HRESULT IDummy::DirectObject ( );
__declspec(implementation_key(13417)) HRESULT IDummy::RefreshDocument ( );
#pragma stop_map_region

} // namespace Excel

#pragma pack(pop)
