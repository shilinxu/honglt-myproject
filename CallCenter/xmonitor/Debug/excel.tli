// Created by Microsoft (R) C/C++ Compiler Version 12.00.9782.0 (93432b12).
//
// e:\vcÖªÊ¶¿â\callcenter\xmonitor\debug\excel.tli
//
// Wrapper implementations for Win32 type library C:\Program Files\Microsoft Office\OFFICE10\excel.exe
// compiler-generated file created 03/20/08 at 16:17:26 - DO NOT EDIT!


//
// interface Adjustments wrapper method implementations
//

#pragma implementation_key(1)
inline IDispatchPtr Excel::Adjustments::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2)
inline int Excel::Adjustments::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3)
inline float Excel::Adjustments::GetItem ( int Index ) {
    float _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4)
inline void Excel::Adjustments::PutItem ( int Index, float Val ) {
    HRESULT _hr = put_Item(Index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

#pragma implementation_key(5)
inline IDispatchPtr Excel::CalloutFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6)
inline HRESULT Excel::CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7)
inline HRESULT Excel::CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(8)
inline HRESULT Excel::CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(9)
inline HRESULT Excel::CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(10)
inline enum Office::MsoTriState Excel::CalloutFormat::GetAccent ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(11)
inline void Excel::CalloutFormat::PutAccent ( enum Office::MsoTriState Accent ) {
    HRESULT _hr = put_Accent(Accent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(12)
inline enum Office::MsoCalloutAngleType Excel::CalloutFormat::GetAngle ( ) {
    enum Office::MsoCalloutAngleType _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(13)
inline void Excel::CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(14)
inline enum Office::MsoTriState Excel::CalloutFormat::GetAutoAttach ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(15)
inline void Excel::CalloutFormat::PutAutoAttach ( enum Office::MsoTriState AutoAttach ) {
    HRESULT _hr = put_AutoAttach(AutoAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(16)
inline enum Office::MsoTriState Excel::CalloutFormat::GetAutoLength ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(17)
inline enum Office::MsoTriState Excel::CalloutFormat::GetBorder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(18)
inline void Excel::CalloutFormat::PutBorder ( enum Office::MsoTriState Border ) {
    HRESULT _hr = put_Border(Border);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(19)
inline float Excel::CalloutFormat::GetDrop ( ) {
    float _result;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(20)
inline enum Office::MsoCalloutDropType Excel::CalloutFormat::GetDropType ( ) {
    enum Office::MsoCalloutDropType _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(21)
inline float Excel::CalloutFormat::GetGap ( ) {
    float _result;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(22)
inline void Excel::CalloutFormat::PutGap ( float Gap ) {
    HRESULT _hr = put_Gap(Gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(23)
inline float Excel::CalloutFormat::GetLength ( ) {
    float _result;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(24)
inline enum Office::MsoCalloutType Excel::CalloutFormat::GetType ( ) {
    enum Office::MsoCalloutType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(25)
inline void Excel::CalloutFormat::PutType ( enum Office::MsoCalloutType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorFormat wrapper method implementations
//

#pragma implementation_key(26)
inline IDispatchPtr Excel::ColorFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(27)
inline Office::MsoRGBType Excel::ColorFormat::Getignorethis ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_ignorethis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(28)
inline void Excel::ColorFormat::Putignorethis ( Office::MsoRGBType ignorethis ) {
    HRESULT _hr = put_ignorethis(ignorethis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(29)
inline int Excel::ColorFormat::GetSchemeColor ( ) {
    int _result;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline void Excel::ColorFormat::PutSchemeColor ( int SchemeColor ) {
    HRESULT _hr = put_SchemeColor(SchemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(31)
inline enum Office::MsoColorType Excel::ColorFormat::GetType ( ) {
    enum Office::MsoColorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(32)
inline float Excel::ColorFormat::GetTintAndShade ( ) {
    float _result;
    HRESULT _hr = get_TintAndShade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(33)
inline void Excel::ColorFormat::PutTintAndShade ( float pValue ) {
    HRESULT _hr = put_TintAndShade(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LineFormat wrapper method implementations
//

#pragma implementation_key(34)
inline IDispatchPtr Excel::LineFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(35)
inline Excel::ColorFormatPtr Excel::LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(36)
inline void Excel::LineFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(37)
inline enum Office::MsoArrowheadLength Excel::LineFormat::GetBeginArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(38)
inline void Excel::LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength BeginArrowheadLength ) {
    HRESULT _hr = put_BeginArrowheadLength(BeginArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(39)
inline enum Office::MsoArrowheadStyle Excel::LineFormat::GetBeginArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(40)
inline void Excel::LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle BeginArrowheadStyle ) {
    HRESULT _hr = put_BeginArrowheadStyle(BeginArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(41)
inline enum Office::MsoArrowheadWidth Excel::LineFormat::GetBeginArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline void Excel::LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth BeginArrowheadWidth ) {
    HRESULT _hr = put_BeginArrowheadWidth(BeginArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(43)
inline enum Office::MsoLineDashStyle Excel::LineFormat::GetDashStyle ( ) {
    enum Office::MsoLineDashStyle _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline void Excel::LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle DashStyle ) {
    HRESULT _hr = put_DashStyle(DashStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(45)
inline enum Office::MsoArrowheadLength Excel::LineFormat::GetEndArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline void Excel::LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength EndArrowheadLength ) {
    HRESULT _hr = put_EndArrowheadLength(EndArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline enum Office::MsoArrowheadStyle Excel::LineFormat::GetEndArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(48)
inline void Excel::LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle EndArrowheadStyle ) {
    HRESULT _hr = put_EndArrowheadStyle(EndArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(49)
inline enum Office::MsoArrowheadWidth Excel::LineFormat::GetEndArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(50)
inline void Excel::LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth EndArrowheadWidth ) {
    HRESULT _hr = put_EndArrowheadWidth(EndArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(51)
inline Excel::ColorFormatPtr Excel::LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(52)
inline void Excel::LineFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(53)
inline enum Office::MsoPatternType Excel::LineFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(54)
inline void Excel::LineFormat::PutPattern ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = put_Pattern(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(55)
inline enum Office::MsoLineStyle Excel::LineFormat::GetStyle ( ) {
    enum Office::MsoLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(56)
inline void Excel::LineFormat::PutStyle ( enum Office::MsoLineStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(57)
inline float Excel::LineFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(58)
inline void Excel::LineFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(59)
inline enum Office::MsoTriState Excel::LineFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(60)
inline void Excel::LineFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(61)
inline float Excel::LineFormat::GetWeight ( ) {
    float _result;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(62)
inline void Excel::LineFormat::PutWeight ( float Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeNode wrapper method implementations
//

#pragma implementation_key(63)
inline IDispatchPtr Excel::ShapeNode::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(64)
inline enum Office::MsoEditingType Excel::ShapeNode::GetEditingType ( ) {
    enum Office::MsoEditingType _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(65)
inline _variant_t Excel::ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(66)
inline enum Office::MsoSegmentType Excel::ShapeNode::GetSegmentType ( ) {
    enum Office::MsoSegmentType _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

#pragma implementation_key(67)
inline IDispatchPtr Excel::ShapeNodes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(68)
inline int Excel::ShapeNodes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(69)
inline Excel::ShapeNodePtr Excel::ShapeNodes::Item ( const _variant_t & Index ) {
    struct ShapeNode * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

#pragma implementation_key(70)
inline IUnknownPtr Excel::ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(71)
inline HRESULT Excel::ShapeNodes::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(72)
inline HRESULT Excel::ShapeNodes::Insert ( int Index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(73)
inline HRESULT Excel::ShapeNodes::SetEditingType ( int Index, enum Office::MsoEditingType EditingType ) {
    HRESULT _hr = raw_SetEditingType(Index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(74)
inline HRESULT Excel::ShapeNodes::SetPosition ( int Index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(Index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(75)
inline HRESULT Excel::ShapeNodes::SetSegmentType ( int Index, enum Office::MsoSegmentType SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(Index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PictureFormat wrapper method implementations
//

#pragma implementation_key(76)
inline IDispatchPtr Excel::PictureFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(77)
inline HRESULT Excel::PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(78)
inline HRESULT Excel::PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(79)
inline float Excel::PictureFormat::GetBrightness ( ) {
    float _result;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(80)
inline void Excel::PictureFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(81)
inline enum Office::MsoPictureColorType Excel::PictureFormat::GetColorType ( ) {
    enum Office::MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(82)
inline void Excel::PictureFormat::PutColorType ( enum Office::MsoPictureColorType ColorType ) {
    HRESULT _hr = put_ColorType(ColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(83)
inline float Excel::PictureFormat::GetContrast ( ) {
    float _result;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(84)
inline void Excel::PictureFormat::PutContrast ( float Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(85)
inline float Excel::PictureFormat::GetCropBottom ( ) {
    float _result;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(86)
inline void Excel::PictureFormat::PutCropBottom ( float CropBottom ) {
    HRESULT _hr = put_CropBottom(CropBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(87)
inline float Excel::PictureFormat::GetCropLeft ( ) {
    float _result;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(88)
inline void Excel::PictureFormat::PutCropLeft ( float CropLeft ) {
    HRESULT _hr = put_CropLeft(CropLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(89)
inline float Excel::PictureFormat::GetCropRight ( ) {
    float _result;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(90)
inline void Excel::PictureFormat::PutCropRight ( float CropRight ) {
    HRESULT _hr = put_CropRight(CropRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(91)
inline float Excel::PictureFormat::GetCropTop ( ) {
    float _result;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(92)
inline void Excel::PictureFormat::PutCropTop ( float CropTop ) {
    HRESULT _hr = put_CropTop(CropTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(93)
inline Office::MsoRGBType Excel::PictureFormat::GetTransparencyColor ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline void Excel::PictureFormat::PutTransparencyColor ( Office::MsoRGBType TransparencyColor ) {
    HRESULT _hr = put_TransparencyColor(TransparencyColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(95)
inline enum Office::MsoTriState Excel::PictureFormat::GetTransparentBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(96)
inline void Excel::PictureFormat::PutTransparentBackground ( enum Office::MsoTriState TransparentBackground ) {
    HRESULT _hr = put_TransparentBackground(TransparentBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShadowFormat wrapper method implementations
//

#pragma implementation_key(97)
inline IDispatchPtr Excel::ShadowFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(98)
inline HRESULT Excel::ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(99)
inline HRESULT Excel::ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(100)
inline Excel::ColorFormatPtr Excel::ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(101)
inline void Excel::ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline enum Office::MsoTriState Excel::ShadowFormat::GetObscured ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void Excel::ShadowFormat::PutObscured ( enum Office::MsoTriState Obscured ) {
    HRESULT _hr = put_Obscured(Obscured);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(104)
inline float Excel::ShadowFormat::GetOffsetX ( ) {
    float _result;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(105)
inline void Excel::ShadowFormat::PutOffsetX ( float OffsetX ) {
    HRESULT _hr = put_OffsetX(OffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline float Excel::ShadowFormat::GetOffsetY ( ) {
    float _result;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(107)
inline void Excel::ShadowFormat::PutOffsetY ( float OffsetY ) {
    HRESULT _hr = put_OffsetY(OffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline float Excel::ShadowFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(109)
inline void Excel::ShadowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(110)
inline enum Office::MsoShadowType Excel::ShadowFormat::GetType ( ) {
    enum Office::MsoShadowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(111)
inline void Excel::ShadowFormat::PutType ( enum Office::MsoShadowType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(112)
inline enum Office::MsoTriState Excel::ShadowFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(113)
inline void Excel::ShadowFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextEffectFormat wrapper method implementations
//

#pragma implementation_key(114)
inline IDispatchPtr Excel::TextEffectFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(115)
inline HRESULT Excel::TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(116)
inline enum Office::MsoTextEffectAlignment Excel::TextEffectFormat::GetAlignment ( ) {
    enum Office::MsoTextEffectAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(117)
inline void Excel::TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(118)
inline enum Office::MsoTriState Excel::TextEffectFormat::GetFontBold ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(119)
inline void Excel::TextEffectFormat::PutFontBold ( enum Office::MsoTriState FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(120)
inline enum Office::MsoTriState Excel::TextEffectFormat::GetFontItalic ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(121)
inline void Excel::TextEffectFormat::PutFontItalic ( enum Office::MsoTriState FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(122)
inline _bstr_t Excel::TextEffectFormat::GetFontName ( ) {
    BSTR _result;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(123)
inline void Excel::TextEffectFormat::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(124)
inline float Excel::TextEffectFormat::GetFontSize ( ) {
    float _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(125)
inline void Excel::TextEffectFormat::PutFontSize ( float FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(126)
inline enum Office::MsoTriState Excel::TextEffectFormat::GetKernedPairs ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline void Excel::TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState KernedPairs ) {
    HRESULT _hr = put_KernedPairs(KernedPairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(128)
inline enum Office::MsoTriState Excel::TextEffectFormat::GetNormalizedHeight ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline void Excel::TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState NormalizedHeight ) {
    HRESULT _hr = put_NormalizedHeight(NormalizedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(130)
inline enum Office::MsoPresetTextEffectShape Excel::TextEffectFormat::GetPresetShape ( ) {
    enum Office::MsoPresetTextEffectShape _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline void Excel::TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape PresetShape ) {
    HRESULT _hr = put_PresetShape(PresetShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(132)
inline enum Office::MsoPresetTextEffect Excel::TextEffectFormat::GetPresetTextEffect ( ) {
    enum Office::MsoPresetTextEffect _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline void Excel::TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect Preset ) {
    HRESULT _hr = put_PresetTextEffect(Preset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(134)
inline enum Office::MsoTriState Excel::TextEffectFormat::GetRotatedChars ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline void Excel::TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState RotatedChars ) {
    HRESULT _hr = put_RotatedChars(RotatedChars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(136)
inline _bstr_t Excel::TextEffectFormat::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(137)
inline void Excel::TextEffectFormat::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(138)
inline float Excel::TextEffectFormat::GetTracking ( ) {
    float _result;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(139)
inline void Excel::TextEffectFormat::PutTracking ( float Tracking ) {
    HRESULT _hr = put_Tracking(Tracking);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThreeDFormat wrapper method implementations
//

#pragma implementation_key(140)
inline IDispatchPtr Excel::ThreeDFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(141)
inline HRESULT Excel::ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(142)
inline HRESULT Excel::ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(143)
inline HRESULT Excel::ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(144)
inline HRESULT Excel::ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(145)
inline HRESULT Excel::ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(146)
inline float Excel::ThreeDFormat::GetDepth ( ) {
    float _result;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(147)
inline void Excel::ThreeDFormat::PutDepth ( float Depth ) {
    HRESULT _hr = put_Depth(Depth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(148)
inline Excel::ColorFormatPtr Excel::ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(149)
inline enum Office::MsoExtrusionColorType Excel::ThreeDFormat::GetExtrusionColorType ( ) {
    enum Office::MsoExtrusionColorType _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(150)
inline void Excel::ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType ExtrusionColorType ) {
    HRESULT _hr = put_ExtrusionColorType(ExtrusionColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(151)
inline enum Office::MsoTriState Excel::ThreeDFormat::GetPerspective ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(152)
inline void Excel::ThreeDFormat::PutPerspective ( enum Office::MsoTriState Perspective ) {
    HRESULT _hr = put_Perspective(Perspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(153)
inline enum Office::MsoPresetExtrusionDirection Excel::ThreeDFormat::GetPresetExtrusionDirection ( ) {
    enum Office::MsoPresetExtrusionDirection _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(154)
inline enum Office::MsoPresetLightingDirection Excel::ThreeDFormat::GetPresetLightingDirection ( ) {
    enum Office::MsoPresetLightingDirection _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline void Excel::ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection PresetLightingDirection ) {
    HRESULT _hr = put_PresetLightingDirection(PresetLightingDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(156)
inline enum Office::MsoPresetLightingSoftness Excel::ThreeDFormat::GetPresetLightingSoftness ( ) {
    enum Office::MsoPresetLightingSoftness _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(157)
inline void Excel::ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) {
    HRESULT _hr = put_PresetLightingSoftness(PresetLightingSoftness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline enum Office::MsoPresetMaterial Excel::ThreeDFormat::GetPresetMaterial ( ) {
    enum Office::MsoPresetMaterial _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline void Excel::ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial PresetMaterial ) {
    HRESULT _hr = put_PresetMaterial(PresetMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline enum Office::MsoPresetThreeDFormat Excel::ThreeDFormat::GetPresetThreeDFormat ( ) {
    enum Office::MsoPresetThreeDFormat _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(161)
inline float Excel::ThreeDFormat::GetRotationX ( ) {
    float _result;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(162)
inline void Excel::ThreeDFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(163)
inline float Excel::ThreeDFormat::GetRotationY ( ) {
    float _result;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(164)
inline void Excel::ThreeDFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(165)
inline enum Office::MsoTriState Excel::ThreeDFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(166)
inline void Excel::ThreeDFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FillFormat wrapper method implementations
//

#pragma implementation_key(167)
inline IDispatchPtr Excel::FillFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(168)
inline HRESULT Excel::FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(169)
inline HRESULT Excel::FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(170)
inline HRESULT Excel::FillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(171)
inline HRESULT Excel::FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, int Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(172)
inline HRESULT Excel::FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(173)
inline HRESULT Excel::FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(174)
inline HRESULT Excel::FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(175)
inline HRESULT Excel::FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(176)
inline HRESULT Excel::FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(177)
inline Excel::ColorFormatPtr Excel::FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(178)
inline void Excel::FillFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(179)
inline Excel::ColorFormatPtr Excel::FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(180)
inline void Excel::FillFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(181)
inline enum Office::MsoGradientColorType Excel::FillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(182)
inline float Excel::FillFormat::GetGradientDegree ( ) {
    float _result;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(183)
inline enum Office::MsoGradientStyle Excel::FillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(184)
inline int Excel::FillFormat::GetGradientVariant ( ) {
    int _result;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(185)
inline enum Office::MsoPatternType Excel::FillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(186)
inline enum Office::MsoPresetGradientType Excel::FillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(187)
inline enum Office::MsoPresetTexture Excel::FillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(188)
inline _bstr_t Excel::FillFormat::GetTextureName ( ) {
    BSTR _result;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(189)
inline enum Office::MsoTextureType Excel::FillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(190)
inline float Excel::FillFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(191)
inline void Excel::FillFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(192)
inline enum Office::MsoFillType Excel::FillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(193)
inline enum Office::MsoTriState Excel::FillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(194)
inline void Excel::FillFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface DiagramNodes wrapper method implementations
//

#pragma implementation_key(195)
inline IUnknownPtr Excel::DiagramNodes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(196)
inline Excel::DiagramNodePtr Excel::DiagramNodes::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(197)
inline HRESULT Excel::DiagramNodes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(198)
inline IDispatchPtr Excel::DiagramNodes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(199)
inline int Excel::DiagramNodes::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DiagramNodeChildren wrapper method implementations
//

#pragma implementation_key(200)
inline IUnknownPtr Excel::DiagramNodeChildren::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(201)
inline Excel::DiagramNodePtr Excel::DiagramNodeChildren::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(202)
inline Excel::DiagramNodePtr Excel::DiagramNodeChildren::AddNode ( const _variant_t & Index, enum Office::MsoDiagramNodeType nodeType ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_AddNode(Index, nodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(203)
inline HRESULT Excel::DiagramNodeChildren::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(204)
inline IDispatchPtr Excel::DiagramNodeChildren::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(205)
inline int Excel::DiagramNodeChildren::GetCount ( ) {
    int _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline Excel::DiagramNodePtr Excel::DiagramNodeChildren::GetFirstChild ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_FirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(207)
inline Excel::DiagramNodePtr Excel::DiagramNodeChildren::GetLastChild ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_LastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

//
// interface DiagramNode wrapper method implementations
//

#pragma implementation_key(208)
inline Excel::DiagramNodePtr Excel::DiagramNode::AddNode ( enum Office::MsoRelativeNodePosition pos, enum Office::MsoDiagramNodeType nodeType ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_AddNode(pos, nodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(209)
inline HRESULT Excel::DiagramNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(210)
inline HRESULT Excel::DiagramNode::MoveNode ( struct DiagramNode * pTargetNode, enum Office::MsoRelativeNodePosition pos ) {
    HRESULT _hr = raw_MoveNode(pTargetNode, pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(211)
inline HRESULT Excel::DiagramNode::ReplaceNode ( struct DiagramNode * pTargetNode ) {
    HRESULT _hr = raw_ReplaceNode(pTargetNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(212)
inline HRESULT Excel::DiagramNode::SwapNode ( struct DiagramNode * pTargetNode, VARIANT_BOOL swapChildren ) {
    HRESULT _hr = raw_SwapNode(pTargetNode, swapChildren);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(213)
inline Excel::DiagramNodePtr Excel::DiagramNode::CloneNode ( VARIANT_BOOL copyChildren, struct DiagramNode * pTargetNode, enum Office::MsoRelativeNodePosition pos ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_CloneNode(copyChildren, pTargetNode, pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(214)
inline HRESULT Excel::DiagramNode::TransferChildren ( struct DiagramNode * pReceivingNode ) {
    HRESULT _hr = raw_TransferChildren(pReceivingNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(215)
inline Excel::DiagramNodePtr Excel::DiagramNode::NextNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_NextNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(216)
inline Excel::DiagramNodePtr Excel::DiagramNode::PrevNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_PrevNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(217)
inline IDispatchPtr Excel::DiagramNode::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(218)
inline Excel::DiagramNodeChildrenPtr Excel::DiagramNode::GetChildren ( ) {
    struct DiagramNodeChildren * _result;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodeChildrenPtr(_result, false);
}

#pragma implementation_key(219)
inline Excel::ShapePtr Excel::DiagramNode::GetShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(220)
inline Excel::DiagramNodePtr Excel::DiagramNode::GetRoot ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(221)
inline Office::IMsoDiagramPtr Excel::DiagramNode::GetDiagram ( ) {
    struct Office::IMsoDiagram * _result;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IMsoDiagramPtr(_result, false);
}

#pragma implementation_key(222)
inline enum Office::MsoOrgChartLayoutType Excel::DiagramNode::GetLayout ( ) {
    enum Office::MsoOrgChartLayoutType _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(223)
inline void Excel::DiagramNode::PutLayout ( enum Office::MsoOrgChartLayoutType pdgmType ) {
    HRESULT _hr = put_Layout(pdgmType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(224)
inline Excel::ShapePtr Excel::DiagramNode::GetTextShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_TextShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface IRTDUpdateEvent wrapper method implementations
//

#pragma implementation_key(225)
inline HRESULT Excel::IRTDUpdateEvent::UpdateNotify ( ) {
    HRESULT _hr = raw_UpdateNotify();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(226)
inline long Excel::IRTDUpdateEvent::GetHeartbeatInterval ( ) {
    long _result;
    HRESULT _hr = get_HeartbeatInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(227)
inline void Excel::IRTDUpdateEvent::PutHeartbeatInterval ( long plRetVal ) {
    HRESULT _hr = put_HeartbeatInterval(plRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(228)
inline HRESULT Excel::IRTDUpdateEvent::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRtdServer wrapper method implementations
//

#pragma implementation_key(229)
inline long Excel::IRtdServer::ServerStart ( struct IRTDUpdateEvent * CallbackObject ) {
    long _result;
    HRESULT _hr = raw_ServerStart(CallbackObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(230)
inline _variant_t Excel::IRtdServer::ConnectData ( long TopicID, SAFEARRAY * * Strings, VARIANT_BOOL * GetNewValues ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ConnectData(TopicID, Strings, GetNewValues, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(231)
inline SAFEARRAY * Excel::IRtdServer::RefreshData ( long * TopicCount ) {
    SAFEARRAY * _result;
    HRESULT _hr = raw_RefreshData(TopicCount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(232)
inline HRESULT Excel::IRtdServer::DisconnectData ( long TopicID ) {
    HRESULT _hr = raw_DisconnectData(TopicID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(233)
inline long Excel::IRtdServer::Heartbeat ( ) {
    long _result;
    HRESULT _hr = raw_Heartbeat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(234)
inline HRESULT Excel::IRtdServer::ServerTerminate ( ) {
    HRESULT _hr = raw_ServerTerminate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWindow wrapper method implementations
//

#pragma implementation_key(235)
inline Excel::_ApplicationPtr Excel::IWindow::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(236)
inline enum XlCreator Excel::IWindow::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(237)
inline IDispatchPtr Excel::IWindow::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(238)
inline _variant_t Excel::IWindow::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Activate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(239)
inline _variant_t Excel::IWindow::ActivateNext ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ActivateNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(240)
inline _variant_t Excel::IWindow::ActivatePrevious ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ActivatePrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(241)
inline Excel::RangePtr Excel::IWindow::GetActiveCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_ActiveCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(242)
inline Excel::_ChartPtr Excel::IWindow::GetActiveChart ( ) {
    struct _Chart * _result;
    HRESULT _hr = get_ActiveChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

#pragma implementation_key(243)
inline Excel::PanePtr Excel::IWindow::GetActivePane ( ) {
    struct Pane * _result;
    HRESULT _hr = get_ActivePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(244)
inline IDispatchPtr Excel::IWindow::GetActiveSheet ( ) {
    IDispatch * _result;
    HRESULT _hr = get_ActiveSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(245)
inline _variant_t Excel::IWindow::GetCaption ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(246)
inline void Excel::IWindow::PutCaption ( const _variant_t & RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(247)
inline VARIANT_BOOL Excel::IWindow::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Close(SaveChanges, Filename, RouteWorkbook, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(248)
inline VARIANT_BOOL Excel::IWindow::GetDisplayFormulas ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayFormulas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline void Excel::IWindow::PutDisplayFormulas ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayFormulas(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(250)
inline VARIANT_BOOL Excel::IWindow::GetDisplayGridlines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline void Excel::IWindow::PutDisplayGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(252)
inline VARIANT_BOOL Excel::IWindow::GetDisplayHeadings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayHeadings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline void Excel::IWindow::PutDisplayHeadings ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayHeadings(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline VARIANT_BOOL Excel::IWindow::GetDisplayHorizontalScrollBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayHorizontalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline void Excel::IWindow::PutDisplayHorizontalScrollBar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayHorizontalScrollBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline VARIANT_BOOL Excel::IWindow::GetDisplayOutline ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void Excel::IWindow::PutDisplayOutline ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayOutline(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(258)
inline VARIANT_BOOL Excel::IWindow::Get_DisplayRightToLeft ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get__DisplayRightToLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(259)
inline void Excel::IWindow::Put_DisplayRightToLeft ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put__DisplayRightToLeft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(260)
inline VARIANT_BOOL Excel::IWindow::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayVerticalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline void Excel::IWindow::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayVerticalScrollBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(262)
inline VARIANT_BOOL Excel::IWindow::GetDisplayWorkbookTabs ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayWorkbookTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(263)
inline void Excel::IWindow::PutDisplayWorkbookTabs ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayWorkbookTabs(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(264)
inline VARIANT_BOOL Excel::IWindow::GetDisplayZeros ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayZeros(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(265)
inline void Excel::IWindow::PutDisplayZeros ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayZeros(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(266)
inline VARIANT_BOOL Excel::IWindow::GetEnableResize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableResize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(267)
inline void Excel::IWindow::PutEnableResize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableResize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(268)
inline VARIANT_BOOL Excel::IWindow::GetFreezePanes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FreezePanes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(269)
inline void Excel::IWindow::PutFreezePanes ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_FreezePanes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(270)
inline long Excel::IWindow::GetGridlineColor ( ) {
    long _result;
    HRESULT _hr = get_GridlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(271)
inline void Excel::IWindow::PutGridlineColor ( long RHS ) {
    HRESULT _hr = put_GridlineColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(272)
inline enum XlColorIndex Excel::IWindow::GetGridlineColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_GridlineColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(273)
inline void Excel::IWindow::PutGridlineColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_GridlineColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(274)
inline double Excel::IWindow::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline void Excel::IWindow::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(276)
inline long Excel::IWindow::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(277)
inline _variant_t Excel::IWindow::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LargeScroll(Down, Up, ToRight, ToLeft, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(278)
inline double Excel::IWindow::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline void Excel::IWindow::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline Excel::WindowPtr Excel::IWindow::NewWindow ( ) {
    struct Window * _result;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(281)
inline _bstr_t Excel::IWindow::GetOnWindow ( ) {
    BSTR _result;
    HRESULT _hr = get_OnWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(282)
inline void Excel::IWindow::PutOnWindow ( _bstr_t RHS ) {
    HRESULT _hr = put_OnWindow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(283)
inline Excel::PanesPtr Excel::IWindow::GetPanes ( ) {
    struct Panes * _result;
    HRESULT _hr = get_Panes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanesPtr(_result, false);
}

#pragma implementation_key(284)
inline _variant_t Excel::IWindow::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(285)
inline _variant_t Excel::IWindow::PrintPreview ( const _variant_t & EnableChanges ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PrintPreview(EnableChanges, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(286)
inline Excel::RangePtr Excel::IWindow::GetRangeSelection ( ) {
    struct Range * _result;
    HRESULT _hr = get_RangeSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(287)
inline long Excel::IWindow::GetScrollColumn ( ) {
    long _result;
    HRESULT _hr = get_ScrollColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline void Excel::IWindow::PutScrollColumn ( long RHS ) {
    HRESULT _hr = put_ScrollColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(289)
inline long Excel::IWindow::GetScrollRow ( ) {
    long _result;
    HRESULT _hr = get_ScrollRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline void Excel::IWindow::PutScrollRow ( long RHS ) {
    HRESULT _hr = put_ScrollRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(291)
inline _variant_t Excel::IWindow::ScrollWorkbookTabs ( const _variant_t & Sheets, const _variant_t & Position ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ScrollWorkbookTabs(Sheets, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(292)
inline Excel::SheetsPtr Excel::IWindow::GetSelectedSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_SelectedSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(293)
inline IDispatchPtr Excel::IWindow::GetSelection ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(294)
inline _variant_t Excel::IWindow::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SmallScroll(Down, Up, ToRight, ToLeft, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(295)
inline VARIANT_BOOL Excel::IWindow::GetSplit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Split(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(296)
inline void Excel::IWindow::PutSplit ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Split(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(297)
inline long Excel::IWindow::GetSplitColumn ( ) {
    long _result;
    HRESULT _hr = get_SplitColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline void Excel::IWindow::PutSplitColumn ( long RHS ) {
    HRESULT _hr = put_SplitColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(299)
inline double Excel::IWindow::GetSplitHorizontal ( ) {
    double _result;
    HRESULT _hr = get_SplitHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(300)
inline void Excel::IWindow::PutSplitHorizontal ( double RHS ) {
    HRESULT _hr = put_SplitHorizontal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(301)
inline long Excel::IWindow::GetSplitRow ( ) {
    long _result;
    HRESULT _hr = get_SplitRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(302)
inline void Excel::IWindow::PutSplitRow ( long RHS ) {
    HRESULT _hr = put_SplitRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(303)
inline double Excel::IWindow::GetSplitVertical ( ) {
    double _result;
    HRESULT _hr = get_SplitVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline void Excel::IWindow::PutSplitVertical ( double RHS ) {
    HRESULT _hr = put_SplitVertical(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(305)
inline double Excel::IWindow::GetTabRatio ( ) {
    double _result;
    HRESULT _hr = get_TabRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline void Excel::IWindow::PutTabRatio ( double RHS ) {
    HRESULT _hr = put_TabRatio(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(307)
inline double Excel::IWindow::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline void Excel::IWindow::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(309)
inline enum XlWindowType Excel::IWindow::GetType ( ) {
    enum XlWindowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline double Excel::IWindow::GetUsableHeight ( ) {
    double _result;
    HRESULT _hr = get_UsableHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline double Excel::IWindow::GetUsableWidth ( ) {
    double _result;
    HRESULT _hr = get_UsableWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline VARIANT_BOOL Excel::IWindow::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(313)
inline void Excel::IWindow::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(314)
inline Excel::RangePtr Excel::IWindow::GetVisibleRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_VisibleRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(315)
inline double Excel::IWindow::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(316)
inline void Excel::IWindow::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(317)
inline long Excel::IWindow::GetWindowNumber ( ) {
    long _result;
    HRESULT _hr = get_WindowNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(318)
inline enum XlWindowState Excel::IWindow::GetWindowState ( ) {
    enum XlWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(319)
inline void Excel::IWindow::PutWindowState ( enum XlWindowState RHS ) {
    HRESULT _hr = put_WindowState(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(320)
inline _variant_t Excel::IWindow::GetZoom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(321)
inline void Excel::IWindow::PutZoom ( const _variant_t & RHS ) {
    HRESULT _hr = put_Zoom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(322)
inline enum XlWindowView Excel::IWindow::GetView ( ) {
    enum XlWindowView _result;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline void Excel::IWindow::PutView ( enum XlWindowView RHS ) {
    HRESULT _hr = put_View(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(324)
inline VARIANT_BOOL Excel::IWindow::GetDisplayRightToLeft ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayRightToLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(325)
inline void Excel::IWindow::PutDisplayRightToLeft ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRightToLeft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(326)
inline long Excel::IWindow::PointsToScreenPixelsX ( long Points ) {
    long _result;
    HRESULT _hr = raw_PointsToScreenPixelsX(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(327)
inline long Excel::IWindow::PointsToScreenPixelsY ( long Points ) {
    long _result;
    HRESULT _hr = raw_PointsToScreenPixelsY(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline IDispatchPtr Excel::IWindow::RangeFromPoint ( long x, long y ) {
    IDispatch * _result;
    HRESULT _hr = raw_RangeFromPoint(x, y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(329)
inline HRESULT Excel::IWindow::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start ) {
    HRESULT _hr = raw_ScrollIntoView(Left, Top, Width, Height, Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWindows wrapper method implementations
//

#pragma implementation_key(330)
inline Excel::_ApplicationPtr Excel::IWindows::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(331)
inline enum XlCreator Excel::IWindows::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(332)
inline IDispatchPtr Excel::IWindows::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(333)
inline _variant_t Excel::IWindows::Arrange ( enum XlArrangeStyle ArrangeStyle, const _variant_t & ActiveWorkbook, const _variant_t & SyncHorizontal, const _variant_t & SyncVertical ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Arrange(ArrangeStyle, ActiveWorkbook, SyncHorizontal, SyncVertical, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(334)
inline long Excel::IWindows::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline Excel::WindowPtr Excel::IWindows::GetItem ( const _variant_t & Index ) {
    struct Window * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(336)
inline IUnknownPtr Excel::IWindows::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(337)
inline Excel::WindowPtr Excel::IWindows::Get_Default ( const _variant_t & Index ) {
    struct Window * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

//
// interface IAppEvents wrapper method implementations
//

#pragma implementation_key(338)
inline HRESULT Excel::IAppEvents::NewWorkbook ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_NewWorkbook(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(339)
inline HRESULT Excel::IAppEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target ) {
    HRESULT _hr = raw_SheetSelectionChange(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(340)
inline HRESULT Excel::IAppEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_SheetBeforeDoubleClick(Sh, Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(341)
inline HRESULT Excel::IAppEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_SheetBeforeRightClick(Sh, Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(342)
inline HRESULT Excel::IAppEvents::SheetActivate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetActivate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(343)
inline HRESULT Excel::IAppEvents::SheetDeactivate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetDeactivate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(344)
inline HRESULT Excel::IAppEvents::SheetCalculate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetCalculate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(345)
inline HRESULT Excel::IAppEvents::SheetChange ( IDispatch * Sh, struct Range * Target ) {
    HRESULT _hr = raw_SheetChange(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(346)
inline HRESULT Excel::IAppEvents::WorkbookOpen ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_WorkbookOpen(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(347)
inline HRESULT Excel::IAppEvents::WorkbookActivate ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_WorkbookActivate(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(348)
inline HRESULT Excel::IAppEvents::WorkbookDeactivate ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_WorkbookDeactivate(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(349)
inline HRESULT Excel::IAppEvents::WorkbookBeforeClose ( struct _Workbook * Wb, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WorkbookBeforeClose(Wb, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(350)
inline HRESULT Excel::IAppEvents::WorkbookBeforeSave ( struct _Workbook * Wb, VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WorkbookBeforeSave(Wb, SaveAsUI, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(351)
inline HRESULT Excel::IAppEvents::WorkbookBeforePrint ( struct _Workbook * Wb, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WorkbookBeforePrint(Wb, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(352)
inline HRESULT Excel::IAppEvents::WorkbookNewSheet ( struct _Workbook * Wb, IDispatch * Sh ) {
    HRESULT _hr = raw_WorkbookNewSheet(Wb, Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(353)
inline HRESULT Excel::IAppEvents::WorkbookAddinInstall ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_WorkbookAddinInstall(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(354)
inline HRESULT Excel::IAppEvents::WorkbookAddinUninstall ( struct _Workbook * Wb ) {
    HRESULT _hr = raw_WorkbookAddinUninstall(Wb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(355)
inline HRESULT Excel::IAppEvents::WindowResize ( struct _Workbook * Wb, struct Window * Wn ) {
    HRESULT _hr = raw_WindowResize(Wb, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(356)
inline HRESULT Excel::IAppEvents::WindowActivate ( struct _Workbook * Wb, struct Window * Wn ) {
    HRESULT _hr = raw_WindowActivate(Wb, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(357)
inline HRESULT Excel::IAppEvents::WindowDeactivate ( struct _Workbook * Wb, struct Window * Wn ) {
    HRESULT _hr = raw_WindowDeactivate(Wb, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(358)
inline HRESULT Excel::IAppEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target ) {
    HRESULT _hr = raw_SheetFollowHyperlink(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(359)
inline HRESULT Excel::IAppEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target ) {
    HRESULT _hr = raw_SheetPivotTableUpdate(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(360)
inline HRESULT Excel::IAppEvents::WorkbookPivotTableCloseConnection ( struct _Workbook * Wb, struct PivotTable * Target ) {
    HRESULT _hr = raw_WorkbookPivotTableCloseConnection(Wb, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(361)
inline HRESULT Excel::IAppEvents::WorkbookPivotTableOpenConnection ( struct _Workbook * Wb, struct PivotTable * Target ) {
    HRESULT _hr = raw_WorkbookPivotTableOpenConnection(Wb, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Application wrapper method implementations
//

#pragma implementation_key(362)
inline Excel::_ApplicationPtr Excel::_Application::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(363)
inline enum XlCreator Excel::_Application::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(364)
inline Excel::_ApplicationPtr Excel::_Application::GetParent ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(365)
inline Excel::RangePtr Excel::_Application::GetActiveCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_ActiveCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(366)
inline Excel::_ChartPtr Excel::_Application::GetActiveChart ( ) {
    struct _Chart * _result;
    HRESULT _hr = get_ActiveChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

#pragma implementation_key(367)
inline Excel::DialogSheetPtr Excel::_Application::GetActiveDialog ( ) {
    struct DialogSheet * _result;
    HRESULT _hr = get_ActiveDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogSheetPtr(_result, false);
}

#pragma implementation_key(368)
inline Excel::MenuBarPtr Excel::_Application::GetActiveMenuBar ( ) {
    struct MenuBar * _result;
    HRESULT _hr = get_ActiveMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarPtr(_result, false);
}

#pragma implementation_key(369)
inline _bstr_t Excel::_Application::GetActivePrinter ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_ActivePrinter(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(370)
inline void Excel::_Application::PutActivePrinter ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_ActivePrinter(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(371)
inline IDispatchPtr Excel::_Application::GetActiveSheet ( ) {
    IDispatch * _result;
    HRESULT _hr = get_ActiveSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(372)
inline Excel::WindowPtr Excel::_Application::GetActiveWindow ( ) {
    struct Window * _result;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(373)
inline Excel::_WorkbookPtr Excel::_Application::GetActiveWorkbook ( ) {
    struct _Workbook * _result;
    HRESULT _hr = get_ActiveWorkbook(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(374)
inline Excel::AddInsPtr Excel::_Application::GetAddIns ( ) {
    struct AddIns * _result;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

#pragma implementation_key(375)
inline Office::AssistantPtr Excel::_Application::GetAssistant ( ) {
    struct Office::Assistant * _result;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

#pragma implementation_key(376)
inline HRESULT Excel::_Application::Calculate ( long lcid ) {
    HRESULT _hr = raw_Calculate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(377)
inline Excel::RangePtr Excel::_Application::GetCells ( ) {
    struct Range * _result;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(378)
inline Excel::SheetsPtr Excel::_Application::GetCharts ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Charts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(379)
inline Excel::RangePtr Excel::_Application::GetColumns ( ) {
    struct Range * _result;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(380)
inline Office::_CommandBarsPtr Excel::_Application::GetCommandBars ( ) {
    struct Office::_CommandBars * _result;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(381)
inline long Excel::_Application::GetDDEAppReturnCode ( long lcid ) {
    long _result;
    HRESULT _hr = get_DDEAppReturnCode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline HRESULT Excel::_Application::DDEExecute ( long Channel, _bstr_t String, long lcid ) {
    HRESULT _hr = raw_DDEExecute(Channel, String, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(383)
inline long Excel::_Application::DDEInitiate ( _bstr_t App, _bstr_t Topic, long lcid ) {
    long _result;
    HRESULT _hr = raw_DDEInitiate(App, Topic, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline HRESULT Excel::_Application::DDEPoke ( long Channel, const _variant_t & Item, const _variant_t & Data, long lcid ) {
    HRESULT _hr = raw_DDEPoke(Channel, Item, Data, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(385)
inline _variant_t Excel::_Application::DDERequest ( long Channel, _bstr_t Item, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DDERequest(Channel, Item, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(386)
inline HRESULT Excel::_Application::DDETerminate ( long Channel, long lcid ) {
    HRESULT _hr = raw_DDETerminate(Channel, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(387)
inline Excel::SheetsPtr Excel::_Application::GetDialogSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_DialogSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(388)
inline _variant_t Excel::_Application::Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(389)
inline _variant_t Excel::_Application::_Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(390)
inline _variant_t Excel::_Application::ExecuteExcel4Macro ( _bstr_t String, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ExecuteExcel4Macro(String, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(391)
inline Excel::RangePtr Excel::_Application::Intersect ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    struct Range * _result;
    HRESULT _hr = raw_Intersect(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(392)
inline Excel::MenuBarsPtr Excel::_Application::GetMenuBars ( ) {
    struct MenuBars * _result;
    HRESULT _hr = get_MenuBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarsPtr(_result, false);
}

#pragma implementation_key(393)
inline Excel::ModulesPtr Excel::_Application::GetModules ( ) {
    struct Modules * _result;
    HRESULT _hr = get_Modules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ModulesPtr(_result, false);
}

#pragma implementation_key(394)
inline Excel::NamesPtr Excel::_Application::GetNames ( ) {
    struct Names * _result;
    HRESULT _hr = get_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamesPtr(_result, false);
}

#pragma implementation_key(395)
inline Excel::RangePtr Excel::_Application::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 ) {
    struct Range * _result;
    HRESULT _hr = get_Range(Cell1, Cell2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(396)
inline Excel::RangePtr Excel::_Application::GetRows ( ) {
    struct Range * _result;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(397)
inline _variant_t Excel::_Application::Run ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(398)
inline _variant_t Excel::_Application::_Run2 ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Run2(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(399)
inline IDispatchPtr Excel::_Application::GetSelection ( long lcid ) {
    IDispatch * _result;
    HRESULT _hr = get_Selection(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(400)
inline HRESULT Excel::_Application::SendKeys ( const _variant_t & Keys, const _variant_t & Wait, long lcid ) {
    HRESULT _hr = raw_SendKeys(Keys, Wait, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(401)
inline Excel::SheetsPtr Excel::_Application::GetSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Sheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(402)
inline Excel::MenuPtr Excel::_Application::GetShortcutMenus ( long Index ) {
    struct Menu * _result;
    HRESULT _hr = get_ShortcutMenus(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

#pragma implementation_key(403)
inline Excel::_WorkbookPtr Excel::_Application::GetThisWorkbook ( long lcid ) {
    struct _Workbook * _result;
    HRESULT _hr = get_ThisWorkbook(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(404)
inline Excel::ToolbarsPtr Excel::_Application::GetToolbars ( ) {
    struct Toolbars * _result;
    HRESULT _hr = get_Toolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarsPtr(_result, false);
}

#pragma implementation_key(405)
inline Excel::RangePtr Excel::_Application::Union ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    struct Range * _result;
    HRESULT _hr = raw_Union(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(406)
inline Excel::WindowsPtr Excel::_Application::GetWindows ( ) {
    struct Windows * _result;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowsPtr(_result, false);
}

#pragma implementation_key(407)
inline Excel::WorkbooksPtr Excel::_Application::GetWorkbooks ( ) {
    struct Workbooks * _result;
    HRESULT _hr = get_Workbooks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorkbooksPtr(_result, false);
}

#pragma implementation_key(408)
inline Excel::WorksheetFunctionPtr Excel::_Application::GetWorksheetFunction ( ) {
    struct WorksheetFunction * _result;
    HRESULT _hr = get_WorksheetFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorksheetFunctionPtr(_result, false);
}

#pragma implementation_key(409)
inline Excel::SheetsPtr Excel::_Application::GetWorksheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Worksheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(410)
inline Excel::SheetsPtr Excel::_Application::GetExcel4IntlMacroSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Excel4IntlMacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(411)
inline Excel::SheetsPtr Excel::_Application::GetExcel4MacroSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Excel4MacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(412)
inline HRESULT Excel::_Application::ActivateMicrosoftApp ( enum XlMSApplication Index, long lcid ) {
    HRESULT _hr = raw_ActivateMicrosoftApp(Index, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(413)
inline HRESULT Excel::_Application::AddChartAutoFormat ( const _variant_t & Chart, _bstr_t Name, const _variant_t & Description, long lcid ) {
    HRESULT _hr = raw_AddChartAutoFormat(Chart, Name, Description, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(414)
inline HRESULT Excel::_Application::AddCustomList ( const _variant_t & ListArray, const _variant_t & ByRow, long lcid ) {
    HRESULT _hr = raw_AddCustomList(ListArray, ByRow, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(415)
inline VARIANT_BOOL Excel::_Application::GetAlertBeforeOverwriting ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AlertBeforeOverwriting(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(416)
inline void Excel::_Application::PutAlertBeforeOverwriting ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AlertBeforeOverwriting(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(417)
inline _bstr_t Excel::_Application::GetAltStartupPath ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_AltStartupPath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(418)
inline void Excel::_Application::PutAltStartupPath ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_AltStartupPath(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(419)
inline VARIANT_BOOL Excel::_Application::GetAskToUpdateLinks ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AskToUpdateLinks(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(420)
inline void Excel::_Application::PutAskToUpdateLinks ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AskToUpdateLinks(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(421)
inline VARIANT_BOOL Excel::_Application::GetEnableAnimations ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableAnimations(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(422)
inline void Excel::_Application::PutEnableAnimations ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableAnimations(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(423)
inline Excel::AutoCorrectPtr Excel::_Application::GetAutoCorrect ( ) {
    struct AutoCorrect * _result;
    HRESULT _hr = get_AutoCorrect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectPtr(_result, false);
}

#pragma implementation_key(424)
inline long Excel::_Application::GetBuild ( long lcid ) {
    long _result;
    HRESULT _hr = get_Build(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(425)
inline VARIANT_BOOL Excel::_Application::GetCalculateBeforeSave ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CalculateBeforeSave(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(426)
inline void Excel::_Application::PutCalculateBeforeSave ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CalculateBeforeSave(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(427)
inline enum XlCalculation Excel::_Application::GetCalculation ( long lcid ) {
    enum XlCalculation _result;
    HRESULT _hr = get_Calculation(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(428)
inline void Excel::_Application::PutCalculation ( long lcid, enum XlCalculation RHS ) {
    HRESULT _hr = put_Calculation(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(429)
inline _variant_t Excel::_Application::GetCaller ( const _variant_t & Index, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Caller(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(430)
inline VARIANT_BOOL Excel::_Application::GetCanPlaySounds ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CanPlaySounds(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline VARIANT_BOOL Excel::_Application::GetCanRecordSounds ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CanRecordSounds(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(432)
inline _bstr_t Excel::_Application::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(433)
inline void Excel::_Application::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(434)
inline VARIANT_BOOL Excel::_Application::GetCellDragAndDrop ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CellDragAndDrop(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(435)
inline void Excel::_Application::PutCellDragAndDrop ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CellDragAndDrop(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(436)
inline double Excel::_Application::CentimetersToPoints ( double Centimeters, long lcid ) {
    double _result;
    HRESULT _hr = raw_CentimetersToPoints(Centimeters, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(437)
inline VARIANT_BOOL Excel::_Application::CheckSpelling ( _bstr_t Word, const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_CheckSpelling(Word, CustomDictionary, IgnoreUppercase, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline _variant_t Excel::_Application::GetClipboardFormats ( const _variant_t & Index, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ClipboardFormats(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(439)
inline VARIANT_BOOL Excel::_Application::GetDisplayClipboardWindow ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayClipboardWindow(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(440)
inline void Excel::_Application::PutDisplayClipboardWindow ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayClipboardWindow(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(441)
inline VARIANT_BOOL Excel::_Application::GetColorButtons ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ColorButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(442)
inline void Excel::_Application::PutColorButtons ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ColorButtons(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(443)
inline enum XlCommandUnderlines Excel::_Application::GetCommandUnderlines ( long lcid ) {
    enum XlCommandUnderlines _result;
    HRESULT _hr = get_CommandUnderlines(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(444)
inline void Excel::_Application::PutCommandUnderlines ( long lcid, enum XlCommandUnderlines RHS ) {
    HRESULT _hr = put_CommandUnderlines(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(445)
inline VARIANT_BOOL Excel::_Application::GetConstrainNumeric ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ConstrainNumeric(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(446)
inline void Excel::_Application::PutConstrainNumeric ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ConstrainNumeric(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(447)
inline _variant_t Excel::_Application::ConvertFormula ( const _variant_t & Formula, enum XlReferenceStyle FromReferenceStyle, const _variant_t & ToReferenceStyle, const _variant_t & ToAbsolute, const _variant_t & RelativeTo, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ConvertFormula(Formula, FromReferenceStyle, ToReferenceStyle, ToAbsolute, RelativeTo, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(448)
inline VARIANT_BOOL Excel::_Application::GetCopyObjectsWithCells ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CopyObjectsWithCells(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(449)
inline void Excel::_Application::PutCopyObjectsWithCells ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CopyObjectsWithCells(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(450)
inline enum XlMousePointer Excel::_Application::GetCursor ( long lcid ) {
    enum XlMousePointer _result;
    HRESULT _hr = get_Cursor(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline void Excel::_Application::PutCursor ( long lcid, enum XlMousePointer RHS ) {
    HRESULT _hr = put_Cursor(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(452)
inline long Excel::_Application::GetCustomListCount ( long lcid ) {
    long _result;
    HRESULT _hr = get_CustomListCount(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline enum XlCutCopyMode Excel::_Application::GetCutCopyMode ( long lcid ) {
    enum XlCutCopyMode _result;
    HRESULT _hr = get_CutCopyMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(454)
inline void Excel::_Application::PutCutCopyMode ( long lcid, enum XlCutCopyMode RHS ) {
    HRESULT _hr = put_CutCopyMode(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(455)
inline long Excel::_Application::GetDataEntryMode ( long lcid ) {
    long _result;
    HRESULT _hr = get_DataEntryMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(456)
inline void Excel::_Application::PutDataEntryMode ( long lcid, long RHS ) {
    HRESULT _hr = put_DataEntryMode(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(457)
inline _variant_t Excel::_Application::Dummy1 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy1(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(458)
inline _variant_t Excel::_Application::Dummy2 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy2(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(459)
inline _variant_t Excel::_Application::Dummy3 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(460)
inline _variant_t Excel::_Application::Dummy4 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy4(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(461)
inline _variant_t Excel::_Application::Dummy5 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy5(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(462)
inline _variant_t Excel::_Application::Dummy6 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(463)
inline _variant_t Excel::_Application::Dummy7 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(464)
inline _variant_t Excel::_Application::Dummy8 ( const _variant_t & Arg1 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy8(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(465)
inline _variant_t Excel::_Application::Dummy9 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy9(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(466)
inline VARIANT_BOOL Excel::_Application::Dummy10 ( const _variant_t & arg ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Dummy10(arg, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(467)
inline HRESULT Excel::_Application::Dummy11 ( ) {
    HRESULT _hr = raw_Dummy11();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(468)
inline _bstr_t Excel::_Application::Get_Default ( ) {
    BSTR _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(469)
inline _bstr_t Excel::_Application::GetDefaultFilePath ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_DefaultFilePath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(470)
inline void Excel::_Application::PutDefaultFilePath ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_DefaultFilePath(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(471)
inline HRESULT Excel::_Application::DeleteChartAutoFormat ( _bstr_t Name, long lcid ) {
    HRESULT _hr = raw_DeleteChartAutoFormat(Name, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(472)
inline HRESULT Excel::_Application::DeleteCustomList ( long ListNum, long lcid ) {
    HRESULT _hr = raw_DeleteCustomList(ListNum, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(473)
inline Excel::DialogsPtr Excel::_Application::GetDialogs ( ) {
    struct Dialogs * _result;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogsPtr(_result, false);
}

#pragma implementation_key(474)
inline VARIANT_BOOL Excel::_Application::GetDisplayAlerts ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayAlerts(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(475)
inline void Excel::_Application::PutDisplayAlerts ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayAlerts(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(476)
inline VARIANT_BOOL Excel::_Application::GetDisplayFormulaBar ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayFormulaBar(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(477)
inline void Excel::_Application::PutDisplayFormulaBar ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayFormulaBar(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(478)
inline VARIANT_BOOL Excel::_Application::GetDisplayFullScreen ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayFullScreen(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(479)
inline void Excel::_Application::PutDisplayFullScreen ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayFullScreen(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(480)
inline VARIANT_BOOL Excel::_Application::GetDisplayNoteIndicator ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayNoteIndicator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(481)
inline void Excel::_Application::PutDisplayNoteIndicator ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayNoteIndicator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(482)
inline enum XlCommentDisplayMode Excel::_Application::GetDisplayCommentIndicator ( ) {
    enum XlCommentDisplayMode _result;
    HRESULT _hr = get_DisplayCommentIndicator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(483)
inline void Excel::_Application::PutDisplayCommentIndicator ( enum XlCommentDisplayMode RHS ) {
    HRESULT _hr = put_DisplayCommentIndicator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(484)
inline VARIANT_BOOL Excel::_Application::GetDisplayExcel4Menus ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayExcel4Menus(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(485)
inline void Excel::_Application::PutDisplayExcel4Menus ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayExcel4Menus(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(486)
inline VARIANT_BOOL Excel::_Application::GetDisplayRecentFiles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayRecentFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(487)
inline void Excel::_Application::PutDisplayRecentFiles ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRecentFiles(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(488)
inline VARIANT_BOOL Excel::_Application::GetDisplayScrollBars ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayScrollBars(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(489)
inline void Excel::_Application::PutDisplayScrollBars ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayScrollBars(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(490)
inline VARIANT_BOOL Excel::_Application::GetDisplayStatusBar ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayStatusBar(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(491)
inline void Excel::_Application::PutDisplayStatusBar ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayStatusBar(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(492)
inline HRESULT Excel::_Application::DoubleClick ( long lcid ) {
    HRESULT _hr = raw_DoubleClick(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(493)
inline VARIANT_BOOL Excel::_Application::GetEditDirectlyInCell ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EditDirectlyInCell(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(494)
inline void Excel::_Application::PutEditDirectlyInCell ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EditDirectlyInCell(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(495)
inline VARIANT_BOOL Excel::_Application::GetEnableAutoComplete ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableAutoComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(496)
inline void Excel::_Application::PutEnableAutoComplete ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableAutoComplete(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(497)
inline enum XlEnableCancelKey Excel::_Application::GetEnableCancelKey ( long lcid ) {
    enum XlEnableCancelKey _result;
    HRESULT _hr = get_EnableCancelKey(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(498)
inline void Excel::_Application::PutEnableCancelKey ( long lcid, enum XlEnableCancelKey RHS ) {
    HRESULT _hr = put_EnableCancelKey(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(499)
inline VARIANT_BOOL Excel::_Application::GetEnableSound ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(500)
inline void Excel::_Application::PutEnableSound ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableSound(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(501)
inline VARIANT_BOOL Excel::_Application::GetEnableTipWizard ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableTipWizard(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(502)
inline void Excel::_Application::PutEnableTipWizard ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableTipWizard(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(503)
inline _variant_t Excel::_Application::GetFileConverters ( const _variant_t & Index1, const _variant_t & Index2, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FileConverters(Index1, Index2, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(504)
inline Office::FileSearchPtr Excel::_Application::GetFileSearch ( ) {
    struct Office::FileSearch * _result;
    HRESULT _hr = get_FileSearch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::FileSearchPtr(_result, false);
}

#pragma implementation_key(505)
inline Office::IFindPtr Excel::_Application::GetFileFind ( ) {
    struct Office::IFind * _result;
    HRESULT _hr = get_FileFind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IFindPtr(_result, false);
}

#pragma implementation_key(506)
inline HRESULT Excel::_Application::_FindFile ( long lcid ) {
    HRESULT _hr = raw__FindFile(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(507)
inline VARIANT_BOOL Excel::_Application::GetFixedDecimal ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FixedDecimal(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(508)
inline void Excel::_Application::PutFixedDecimal ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_FixedDecimal(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(509)
inline long Excel::_Application::GetFixedDecimalPlaces ( long lcid ) {
    long _result;
    HRESULT _hr = get_FixedDecimalPlaces(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(510)
inline void Excel::_Application::PutFixedDecimalPlaces ( long lcid, long RHS ) {
    HRESULT _hr = put_FixedDecimalPlaces(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(511)
inline _variant_t Excel::_Application::GetCustomListContents ( long ListNum, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCustomListContents(ListNum, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(512)
inline long Excel::_Application::GetCustomListNum ( const _variant_t & ListArray, long lcid ) {
    long _result;
    HRESULT _hr = raw_GetCustomListNum(ListArray, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(513)
inline _variant_t Excel::_Application::GetOpenFilename ( const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & ButtonText, const _variant_t & MultiSelect, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetOpenFilename(FileFilter, FilterIndex, Title, ButtonText, MultiSelect, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(514)
inline _variant_t Excel::_Application::GetSaveAsFilename ( const _variant_t & InitialFilename, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & ButtonText, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSaveAsFilename(InitialFilename, FileFilter, FilterIndex, Title, ButtonText, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(515)
inline HRESULT Excel::_Application::Goto ( const _variant_t & Reference, const _variant_t & Scroll, long lcid ) {
    HRESULT _hr = raw_Goto(Reference, Scroll, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(516)
inline double Excel::_Application::GetHeight ( long lcid ) {
    double _result;
    HRESULT _hr = get_Height(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(517)
inline void Excel::_Application::PutHeight ( long lcid, double RHS ) {
    HRESULT _hr = put_Height(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(518)
inline HRESULT Excel::_Application::Help ( const _variant_t & HelpFile, const _variant_t & HelpContextID, long lcid ) {
    HRESULT _hr = raw_Help(HelpFile, HelpContextID, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(519)
inline VARIANT_BOOL Excel::_Application::GetIgnoreRemoteRequests ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IgnoreRemoteRequests(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(520)
inline void Excel::_Application::PutIgnoreRemoteRequests ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IgnoreRemoteRequests(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(521)
inline double Excel::_Application::InchesToPoints ( double Inches, long lcid ) {
    double _result;
    HRESULT _hr = raw_InchesToPoints(Inches, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(522)
inline _variant_t Excel::_Application::InputBox ( _bstr_t Prompt, const _variant_t & Title, const _variant_t & Default, const _variant_t & Left, const _variant_t & Top, const _variant_t & HelpFile, const _variant_t & HelpContextID, const _variant_t & Type, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_InputBox(Prompt, Title, Default, Left, Top, HelpFile, HelpContextID, Type, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(523)
inline VARIANT_BOOL Excel::_Application::GetInteractive ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Interactive(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(524)
inline void Excel::_Application::PutInteractive ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Interactive(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(525)
inline _variant_t Excel::_Application::GetInternational ( const _variant_t & Index, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_International(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(526)
inline VARIANT_BOOL Excel::_Application::GetIteration ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Iteration(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(527)
inline void Excel::_Application::PutIteration ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Iteration(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(528)
inline VARIANT_BOOL Excel::_Application::GetLargeButtons ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LargeButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(529)
inline void Excel::_Application::PutLargeButtons ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LargeButtons(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(530)
inline double Excel::_Application::GetLeft ( long lcid ) {
    double _result;
    HRESULT _hr = get_Left(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(531)
inline void Excel::_Application::PutLeft ( long lcid, double RHS ) {
    HRESULT _hr = put_Left(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(532)
inline _bstr_t Excel::_Application::GetLibraryPath ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_LibraryPath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(533)
inline HRESULT Excel::_Application::MacroOptions ( const _variant_t & Macro, const _variant_t & Description, const _variant_t & HasMenu, const _variant_t & MenuText, const _variant_t & HasShortcutKey, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & StatusBar, const _variant_t & HelpContextID, const _variant_t & HelpFile, long lcid ) {
    HRESULT _hr = raw_MacroOptions(Macro, Description, HasMenu, MenuText, HasShortcutKey, ShortcutKey, Category, StatusBar, HelpContextID, HelpFile, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(534)
inline HRESULT Excel::_Application::MailLogoff ( long lcid ) {
    HRESULT _hr = raw_MailLogoff(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(535)
inline HRESULT Excel::_Application::MailLogon ( const _variant_t & Name, const _variant_t & Password, const _variant_t & DownloadNewMail, long lcid ) {
    HRESULT _hr = raw_MailLogon(Name, Password, DownloadNewMail, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(536)
inline _variant_t Excel::_Application::GetMailSession ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MailSession(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(537)
inline enum XlMailSystem Excel::_Application::GetMailSystem ( long lcid ) {
    enum XlMailSystem _result;
    HRESULT _hr = get_MailSystem(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline VARIANT_BOOL Excel::_Application::GetMathCoprocessorAvailable ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MathCoprocessorAvailable(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(539)
inline double Excel::_Application::GetMaxChange ( long lcid ) {
    double _result;
    HRESULT _hr = get_MaxChange(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(540)
inline void Excel::_Application::PutMaxChange ( long lcid, double RHS ) {
    HRESULT _hr = put_MaxChange(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(541)
inline long Excel::_Application::GetMaxIterations ( long lcid ) {
    long _result;
    HRESULT _hr = get_MaxIterations(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(542)
inline void Excel::_Application::PutMaxIterations ( long lcid, long RHS ) {
    HRESULT _hr = put_MaxIterations(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(543)
inline long Excel::_Application::GetMemoryFree ( long lcid ) {
    long _result;
    HRESULT _hr = get_MemoryFree(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(544)
inline long Excel::_Application::GetMemoryTotal ( long lcid ) {
    long _result;
    HRESULT _hr = get_MemoryTotal(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(545)
inline long Excel::_Application::GetMemoryUsed ( long lcid ) {
    long _result;
    HRESULT _hr = get_MemoryUsed(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(546)
inline VARIANT_BOOL Excel::_Application::GetMouseAvailable ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MouseAvailable(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(547)
inline VARIANT_BOOL Excel::_Application::GetMoveAfterReturn ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MoveAfterReturn(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(548)
inline void Excel::_Application::PutMoveAfterReturn ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MoveAfterReturn(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(549)
inline enum XlDirection Excel::_Application::GetMoveAfterReturnDirection ( long lcid ) {
    enum XlDirection _result;
    HRESULT _hr = get_MoveAfterReturnDirection(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(550)
inline void Excel::_Application::PutMoveAfterReturnDirection ( long lcid, enum XlDirection RHS ) {
    HRESULT _hr = put_MoveAfterReturnDirection(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(551)
inline Excel::RecentFilesPtr Excel::_Application::GetRecentFiles ( ) {
    struct RecentFiles * _result;
    HRESULT _hr = get_RecentFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilesPtr(_result, false);
}

#pragma implementation_key(552)
inline _bstr_t Excel::_Application::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(553)
inline Excel::_WorkbookPtr Excel::_Application::NextLetter ( long lcid ) {
    struct _Workbook * _result;
    HRESULT _hr = raw_NextLetter(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(554)
inline _bstr_t Excel::_Application::GetNetworkTemplatesPath ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_NetworkTemplatesPath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(555)
inline Excel::ODBCErrorsPtr Excel::_Application::GetODBCErrors ( ) {
    struct ODBCErrors * _result;
    HRESULT _hr = get_ODBCErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ODBCErrorsPtr(_result, false);
}

#pragma implementation_key(556)
inline long Excel::_Application::GetODBCTimeout ( ) {
    long _result;
    HRESULT _hr = get_ODBCTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(557)
inline void Excel::_Application::PutODBCTimeout ( long RHS ) {
    HRESULT _hr = put_ODBCTimeout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(558)
inline _bstr_t Excel::_Application::GetOnCalculate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnCalculate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(559)
inline void Excel::_Application::PutOnCalculate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnCalculate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(560)
inline _bstr_t Excel::_Application::GetOnData ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnData(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(561)
inline void Excel::_Application::PutOnData ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnData(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(562)
inline _bstr_t Excel::_Application::GetOnDoubleClick ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnDoubleClick(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(563)
inline void Excel::_Application::PutOnDoubleClick ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnDoubleClick(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(564)
inline _bstr_t Excel::_Application::GetOnEntry ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnEntry(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(565)
inline void Excel::_Application::PutOnEntry ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnEntry(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(566)
inline HRESULT Excel::_Application::OnKey ( _bstr_t Key, const _variant_t & Procedure, long lcid ) {
    HRESULT _hr = raw_OnKey(Key, Procedure, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(567)
inline HRESULT Excel::_Application::OnRepeat ( _bstr_t Text, _bstr_t Procedure, long lcid ) {
    HRESULT _hr = raw_OnRepeat(Text, Procedure, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(568)
inline _bstr_t Excel::_Application::GetOnSheetActivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(569)
inline void Excel::_Application::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(570)
inline _bstr_t Excel::_Application::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(571)
inline void Excel::_Application::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline HRESULT Excel::_Application::OnTime ( const _variant_t & EarliestTime, _bstr_t Procedure, const _variant_t & LatestTime, const _variant_t & Schedule, long lcid ) {
    HRESULT _hr = raw_OnTime(EarliestTime, Procedure, LatestTime, Schedule, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(573)
inline HRESULT Excel::_Application::OnUndo ( _bstr_t Text, _bstr_t Procedure, long lcid ) {
    HRESULT _hr = raw_OnUndo(Text, Procedure, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(574)
inline _bstr_t Excel::_Application::GetOnWindow ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnWindow(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(575)
inline void Excel::_Application::PutOnWindow ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnWindow(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline _bstr_t Excel::_Application::GetOperatingSystem ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OperatingSystem(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(577)
inline _bstr_t Excel::_Application::GetOrganizationName ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OrganizationName(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(578)
inline _bstr_t Excel::_Application::GetPath ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Path(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(579)
inline _bstr_t Excel::_Application::GetPathSeparator ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_PathSeparator(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(580)
inline _variant_t Excel::_Application::GetPreviousSelections ( const _variant_t & Index, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousSelections(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(581)
inline VARIANT_BOOL Excel::_Application::GetPivotTableSelection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PivotTableSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(582)
inline void Excel::_Application::PutPivotTableSelection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PivotTableSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(583)
inline VARIANT_BOOL Excel::_Application::GetPromptForSummaryInfo ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PromptForSummaryInfo(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(584)
inline void Excel::_Application::PutPromptForSummaryInfo ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PromptForSummaryInfo(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(585)
inline HRESULT Excel::_Application::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(586)
inline HRESULT Excel::_Application::RecordMacro ( const _variant_t & BasicCode, const _variant_t & XlmCode, long lcid ) {
    HRESULT _hr = raw_RecordMacro(BasicCode, XlmCode, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(587)
inline VARIANT_BOOL Excel::_Application::GetRecordRelative ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RecordRelative(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(588)
inline enum XlReferenceStyle Excel::_Application::GetReferenceStyle ( long lcid ) {
    enum XlReferenceStyle _result;
    HRESULT _hr = get_ReferenceStyle(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(589)
inline void Excel::_Application::PutReferenceStyle ( long lcid, enum XlReferenceStyle RHS ) {
    HRESULT _hr = put_ReferenceStyle(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(590)
inline _variant_t Excel::_Application::GetRegisteredFunctions ( const _variant_t & Index1, const _variant_t & Index2, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RegisteredFunctions(Index1, Index2, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(591)
inline VARIANT_BOOL Excel::_Application::RegisterXLL ( _bstr_t Filename, long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_RegisterXLL(Filename, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(592)
inline HRESULT Excel::_Application::Repeat ( long lcid ) {
    HRESULT _hr = raw_Repeat(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(593)
inline HRESULT Excel::_Application::ResetTipWizard ( long lcid ) {
    HRESULT _hr = raw_ResetTipWizard(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(594)
inline VARIANT_BOOL Excel::_Application::GetRollZoom ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RollZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(595)
inline void Excel::_Application::PutRollZoom ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RollZoom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(596)
inline HRESULT Excel::_Application::Save ( const _variant_t & Filename, long lcid ) {
    HRESULT _hr = raw_Save(Filename, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(597)
inline HRESULT Excel::_Application::SaveWorkspace ( const _variant_t & Filename, long lcid ) {
    HRESULT _hr = raw_SaveWorkspace(Filename, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(598)
inline VARIANT_BOOL Excel::_Application::GetScreenUpdating ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ScreenUpdating(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(599)
inline void Excel::_Application::PutScreenUpdating ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ScreenUpdating(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(600)
inline HRESULT Excel::_Application::SetDefaultChart ( const _variant_t & FormatName, const _variant_t & Gallery ) {
    HRESULT _hr = raw_SetDefaultChart(FormatName, Gallery);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(601)
inline long Excel::_Application::GetSheetsInNewWorkbook ( long lcid ) {
    long _result;
    HRESULT _hr = get_SheetsInNewWorkbook(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(602)
inline void Excel::_Application::PutSheetsInNewWorkbook ( long lcid, long RHS ) {
    HRESULT _hr = put_SheetsInNewWorkbook(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(603)
inline VARIANT_BOOL Excel::_Application::GetShowChartTipNames ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowChartTipNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(604)
inline void Excel::_Application::PutShowChartTipNames ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowChartTipNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(605)
inline VARIANT_BOOL Excel::_Application::GetShowChartTipValues ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowChartTipValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(606)
inline void Excel::_Application::PutShowChartTipValues ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowChartTipValues(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(607)
inline _bstr_t Excel::_Application::GetStandardFont ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_StandardFont(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(608)
inline void Excel::_Application::PutStandardFont ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_StandardFont(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(609)
inline double Excel::_Application::GetStandardFontSize ( long lcid ) {
    double _result;
    HRESULT _hr = get_StandardFontSize(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(610)
inline void Excel::_Application::PutStandardFontSize ( long lcid, double RHS ) {
    HRESULT _hr = put_StandardFontSize(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(611)
inline _bstr_t Excel::_Application::GetStartupPath ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_StartupPath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(612)
inline _variant_t Excel::_Application::GetStatusBar ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StatusBar(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(613)
inline void Excel::_Application::PutStatusBar ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_StatusBar(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(614)
inline _bstr_t Excel::_Application::GetTemplatesPath ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_TemplatesPath(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(615)
inline VARIANT_BOOL Excel::_Application::GetShowToolTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowToolTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(616)
inline void Excel::_Application::PutShowToolTips ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowToolTips(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(617)
inline double Excel::_Application::GetTop ( long lcid ) {
    double _result;
    HRESULT _hr = get_Top(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(618)
inline void Excel::_Application::PutTop ( long lcid, double RHS ) {
    HRESULT _hr = put_Top(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(619)
inline enum XlFileFormat Excel::_Application::GetDefaultSaveFormat ( ) {
    enum XlFileFormat _result;
    HRESULT _hr = get_DefaultSaveFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(620)
inline void Excel::_Application::PutDefaultSaveFormat ( enum XlFileFormat RHS ) {
    HRESULT _hr = put_DefaultSaveFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(621)
inline _bstr_t Excel::_Application::GetTransitionMenuKey ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_TransitionMenuKey(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(622)
inline void Excel::_Application::PutTransitionMenuKey ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_TransitionMenuKey(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(623)
inline long Excel::_Application::GetTransitionMenuKeyAction ( long lcid ) {
    long _result;
    HRESULT _hr = get_TransitionMenuKeyAction(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(624)
inline void Excel::_Application::PutTransitionMenuKeyAction ( long lcid, long RHS ) {
    HRESULT _hr = put_TransitionMenuKeyAction(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(625)
inline VARIANT_BOOL Excel::_Application::GetTransitionNavigKeys ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TransitionNavigKeys(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(626)
inline void Excel::_Application::PutTransitionNavigKeys ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TransitionNavigKeys(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(627)
inline HRESULT Excel::_Application::Undo ( long lcid ) {
    HRESULT _hr = raw_Undo(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(628)
inline double Excel::_Application::GetUsableHeight ( long lcid ) {
    double _result;
    HRESULT _hr = get_UsableHeight(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(629)
inline double Excel::_Application::GetUsableWidth ( long lcid ) {
    double _result;
    HRESULT _hr = get_UsableWidth(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(630)
inline VARIANT_BOOL Excel::_Application::GetUserControl ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UserControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline void Excel::_Application::PutUserControl ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UserControl(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(632)
inline _bstr_t Excel::_Application::GetUserName ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_UserName(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(633)
inline void Excel::_Application::PutUserName ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_UserName(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(634)
inline _bstr_t Excel::_Application::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(635)
inline VBIDE::JOEVBEPtr Excel::_Application::GetJOEVBE ( ) {
    struct VBIDE::JOEVBE * _result;
    HRESULT _hr = get_JOEVBE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::JOEVBEPtr(_result, false);
}

#pragma implementation_key(636)
inline _bstr_t Excel::_Application::GetVersion ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Version(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(637)
inline VARIANT_BOOL Excel::_Application::GetVisible ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(638)
inline void Excel::_Application::PutVisible ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(639)
inline HRESULT Excel::_Application::Volatile ( const _variant_t & Volatile, long lcid ) {
    HRESULT _hr = raw_Volatile(Volatile, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(640)
inline HRESULT Excel::_Application::_Wait ( const _variant_t & Time, long lcid ) {
    HRESULT _hr = raw__Wait(Time, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(641)
inline double Excel::_Application::GetWidth ( long lcid ) {
    double _result;
    HRESULT _hr = get_Width(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(642)
inline void Excel::_Application::PutWidth ( long lcid, double RHS ) {
    HRESULT _hr = put_Width(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(643)
inline VARIANT_BOOL Excel::_Application::GetWindowsForPens ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WindowsForPens(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(644)
inline enum XlWindowState Excel::_Application::GetWindowState ( long lcid ) {
    enum XlWindowState _result;
    HRESULT _hr = get_WindowState(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(645)
inline void Excel::_Application::PutWindowState ( long lcid, enum XlWindowState RHS ) {
    HRESULT _hr = put_WindowState(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(646)
inline long Excel::_Application::GetUILanguage ( long lcid ) {
    long _result;
    HRESULT _hr = get_UILanguage(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline void Excel::_Application::PutUILanguage ( long lcid, long RHS ) {
    HRESULT _hr = put_UILanguage(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(648)
inline long Excel::_Application::GetDefaultSheetDirection ( long lcid ) {
    long _result;
    HRESULT _hr = get_DefaultSheetDirection(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(649)
inline void Excel::_Application::PutDefaultSheetDirection ( long lcid, long RHS ) {
    HRESULT _hr = put_DefaultSheetDirection(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(650)
inline long Excel::_Application::GetCursorMovement ( long lcid ) {
    long _result;
    HRESULT _hr = get_CursorMovement(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(651)
inline void Excel::_Application::PutCursorMovement ( long lcid, long RHS ) {
    HRESULT _hr = put_CursorMovement(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(652)
inline VARIANT_BOOL Excel::_Application::GetControlCharacters ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ControlCharacters(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(653)
inline void Excel::_Application::PutControlCharacters ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ControlCharacters(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(654)
inline _variant_t Excel::_Application::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__WSFunction(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(655)
inline VARIANT_BOOL Excel::_Application::GetEnableEvents ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(656)
inline void Excel::_Application::PutEnableEvents ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableEvents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(657)
inline VARIANT_BOOL Excel::_Application::GetDisplayInfoWindow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayInfoWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline void Excel::_Application::PutDisplayInfoWindow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayInfoWindow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(659)
inline VARIANT_BOOL Excel::_Application::Wait ( const _variant_t & Time, long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Wait(Time, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(660)
inline VARIANT_BOOL Excel::_Application::GetExtendList ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExtendList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline void Excel::_Application::PutExtendList ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ExtendList(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(662)
inline Excel::OLEDBErrorsPtr Excel::_Application::GetOLEDBErrors ( ) {
    struct OLEDBErrors * _result;
    HRESULT _hr = get_OLEDBErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEDBErrorsPtr(_result, false);
}

#pragma implementation_key(663)
inline _bstr_t Excel::_Application::GetPhonetic ( const _variant_t & Text ) {
    BSTR _result;
    HRESULT _hr = raw_GetPhonetic(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(664)
inline Office::COMAddInsPtr Excel::_Application::GetCOMAddIns ( ) {
    struct Office::COMAddIns * _result;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::COMAddInsPtr(_result, false);
}

#pragma implementation_key(665)
inline Excel::DefaultWebOptionsPtr Excel::_Application::GetDefaultWebOptions ( ) {
    struct DefaultWebOptions * _result;
    HRESULT _hr = get_DefaultWebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DefaultWebOptionsPtr(_result, false);
}

#pragma implementation_key(666)
inline _bstr_t Excel::_Application::GetProductCode ( ) {
    BSTR _result;
    HRESULT _hr = get_ProductCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(667)
inline _bstr_t Excel::_Application::GetUserLibraryPath ( ) {
    BSTR _result;
    HRESULT _hr = get_UserLibraryPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(668)
inline VARIANT_BOOL Excel::_Application::GetAutoPercentEntry ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoPercentEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(669)
inline void Excel::_Application::PutAutoPercentEntry ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoPercentEntry(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(670)
inline Office::LanguageSettingsPtr Excel::_Application::GetLanguageSettings ( ) {
    struct Office::LanguageSettings * _result;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::LanguageSettingsPtr(_result, false);
}

#pragma implementation_key(671)
inline IDispatchPtr Excel::_Application::GetDummy101 ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Dummy101(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(672)
inline HRESULT Excel::_Application::Dummy12 ( struct PivotTable * p1, struct PivotTable * p2 ) {
    HRESULT _hr = raw_Dummy12(p1, p2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(673)
inline Office::AnswerWizardPtr Excel::_Application::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

#pragma implementation_key(674)
inline HRESULT Excel::_Application::CalculateFull ( ) {
    HRESULT _hr = raw_CalculateFull();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(675)
inline VARIANT_BOOL Excel::_Application::FindFile ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_FindFile(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(676)
inline long Excel::_Application::GetCalculationVersion ( ) {
    long _result;
    HRESULT _hr = get_CalculationVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline VARIANT_BOOL Excel::_Application::GetShowWindowsInTaskbar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowWindowsInTaskbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(678)
inline void Excel::_Application::PutShowWindowsInTaskbar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowWindowsInTaskbar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(679)
inline enum Office::MsoFeatureInstall Excel::_Application::GetFeatureInstall ( ) {
    enum Office::MsoFeatureInstall _result;
    HRESULT _hr = get_FeatureInstall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(680)
inline void Excel::_Application::PutFeatureInstall ( enum Office::MsoFeatureInstall RHS ) {
    HRESULT _hr = put_FeatureInstall(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(681)
inline VARIANT_BOOL Excel::_Application::GetReady ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Ready(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(682)
inline _variant_t Excel::_Application::Dummy13 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy13(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(683)
inline Excel::CellFormatPtr Excel::_Application::GetFindFormat ( ) {
    struct CellFormat * _result;
    HRESULT _hr = get_FindFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellFormatPtr(_result, false);
}

#pragma implementation_key(684)
inline void Excel::_Application::PutRefFindFormat ( struct CellFormat * RHS ) {
    HRESULT _hr = putref_FindFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(685)
inline Excel::CellFormatPtr Excel::_Application::GetReplaceFormat ( ) {
    struct CellFormat * _result;
    HRESULT _hr = get_ReplaceFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellFormatPtr(_result, false);
}

#pragma implementation_key(686)
inline void Excel::_Application::PutRefReplaceFormat ( struct CellFormat * RHS ) {
    HRESULT _hr = putref_ReplaceFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(687)
inline Excel::UsedObjectsPtr Excel::_Application::GetUsedObjects ( ) {
    struct UsedObjects * _result;
    HRESULT _hr = get_UsedObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UsedObjectsPtr(_result, false);
}

#pragma implementation_key(688)
inline enum XlCalculationState Excel::_Application::GetCalculationState ( ) {
    enum XlCalculationState _result;
    HRESULT _hr = get_CalculationState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline enum XlCalculationInterruptKey Excel::_Application::GetCalculationInterruptKey ( ) {
    enum XlCalculationInterruptKey _result;
    HRESULT _hr = get_CalculationInterruptKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(690)
inline void Excel::_Application::PutCalculationInterruptKey ( enum XlCalculationInterruptKey RHS ) {
    HRESULT _hr = put_CalculationInterruptKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(691)
inline Excel::WatchesPtr Excel::_Application::GetWatches ( ) {
    struct Watches * _result;
    HRESULT _hr = get_Watches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WatchesPtr(_result, false);
}

#pragma implementation_key(692)
inline VARIANT_BOOL Excel::_Application::GetDisplayFunctionToolTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayFunctionToolTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline void Excel::_Application::PutDisplayFunctionToolTips ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayFunctionToolTips(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(694)
inline enum Office::MsoAutomationSecurity Excel::_Application::GetAutomationSecurity ( ) {
    enum Office::MsoAutomationSecurity _result;
    HRESULT _hr = get_AutomationSecurity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline void Excel::_Application::PutAutomationSecurity ( enum Office::MsoAutomationSecurity RHS ) {
    HRESULT _hr = put_AutomationSecurity(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(696)
inline Office::FileDialogPtr Excel::_Application::GetFileDialog ( enum Office::MsoFileDialogType fileDialogType ) {
    struct Office::FileDialog * _result;
    HRESULT _hr = get_FileDialog(fileDialogType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::FileDialogPtr(_result, false);
}

#pragma implementation_key(697)
inline HRESULT Excel::_Application::Dummy14 ( ) {
    HRESULT _hr = raw_Dummy14();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(698)
inline HRESULT Excel::_Application::CalculateFullRebuild ( ) {
    HRESULT _hr = raw_CalculateFullRebuild();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(699)
inline VARIANT_BOOL Excel::_Application::GetDisplayPasteOptions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayPasteOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(700)
inline void Excel::_Application::PutDisplayPasteOptions ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayPasteOptions(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(701)
inline VARIANT_BOOL Excel::_Application::GetDisplayInsertOptions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayInsertOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline void Excel::_Application::PutDisplayInsertOptions ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayInsertOptions(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(703)
inline VARIANT_BOOL Excel::_Application::GetGenerateGetPivotData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_GenerateGetPivotData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(704)
inline void Excel::_Application::PutGenerateGetPivotData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_GenerateGetPivotData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(705)
inline Excel::AutoRecoverPtr Excel::_Application::GetAutoRecover ( ) {
    struct AutoRecover * _result;
    HRESULT _hr = get_AutoRecover(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoRecoverPtr(_result, false);
}

#pragma implementation_key(706)
inline long Excel::_Application::GetHwnd ( ) {
    long _result;
    HRESULT _hr = get_Hwnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(707)
inline long Excel::_Application::GetHinstance ( ) {
    long _result;
    HRESULT _hr = get_Hinstance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(708)
inline HRESULT Excel::_Application::CheckAbort ( const _variant_t & KeepAbort ) {
    HRESULT _hr = raw_CheckAbort(KeepAbort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(709)
inline Excel::ErrorCheckingOptionsPtr Excel::_Application::GetErrorCheckingOptions ( ) {
    struct ErrorCheckingOptions * _result;
    HRESULT _hr = get_ErrorCheckingOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ErrorCheckingOptionsPtr(_result, false);
}

#pragma implementation_key(710)
inline VARIANT_BOOL Excel::_Application::GetAutoFormatAsYouTypeReplaceHyperlinks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceHyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(711)
inline void Excel::_Application::PutAutoFormatAsYouTypeReplaceHyperlinks ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceHyperlinks(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(712)
inline Excel::SmartTagRecognizersPtr Excel::_Application::GetSmartTagRecognizers ( ) {
    struct SmartTagRecognizers * _result;
    HRESULT _hr = get_SmartTagRecognizers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagRecognizersPtr(_result, false);
}

#pragma implementation_key(713)
inline Office::NewFilePtr Excel::_Application::GetNewWorkbook ( ) {
    struct Office::NewFile * _result;
    HRESULT _hr = get_NewWorkbook(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::NewFilePtr(_result, false);
}

#pragma implementation_key(714)
inline Excel::SpellingOptionsPtr Excel::_Application::GetSpellingOptions ( ) {
    struct SpellingOptions * _result;
    HRESULT _hr = get_SpellingOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SpellingOptionsPtr(_result, false);
}

#pragma implementation_key(715)
inline Excel::SpeechPtr Excel::_Application::GetSpeech ( ) {
    struct Speech * _result;
    HRESULT _hr = get_Speech(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SpeechPtr(_result, false);
}

#pragma implementation_key(716)
inline VARIANT_BOOL Excel::_Application::GetMapPaperSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MapPaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(717)
inline void Excel::_Application::PutMapPaperSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MapPaperSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(718)
inline VARIANT_BOOL Excel::_Application::GetShowStartupDialog ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowStartupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(719)
inline void Excel::_Application::PutShowStartupDialog ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowStartupDialog(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(720)
inline _bstr_t Excel::_Application::GetDecimalSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_DecimalSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(721)
inline void Excel::_Application::PutDecimalSeparator ( _bstr_t RHS ) {
    HRESULT _hr = put_DecimalSeparator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(722)
inline _bstr_t Excel::_Application::GetThousandsSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_ThousandsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(723)
inline void Excel::_Application::PutThousandsSeparator ( _bstr_t RHS ) {
    HRESULT _hr = put_ThousandsSeparator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(724)
inline VARIANT_BOOL Excel::_Application::GetUseSystemSeparators ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseSystemSeparators(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(725)
inline void Excel::_Application::PutUseSystemSeparators ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UseSystemSeparators(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(726)
inline Excel::RangePtr Excel::_Application::GetThisCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_ThisCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(727)
inline Excel::RTDPtr Excel::_Application::GetRTD ( ) {
    struct RTD * _result;
    HRESULT _hr = get_RTD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RTDPtr(_result, false);
}

//
// interface IWorksheetFunction wrapper method implementations
//

#pragma implementation_key(728)
inline Excel::_ApplicationPtr Excel::IWorksheetFunction::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(729)
inline enum XlCreator Excel::IWorksheetFunction::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline IDispatchPtr Excel::IWorksheetFunction::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(731)
inline _variant_t Excel::IWorksheetFunction::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__WSFunction(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(732)
inline double Excel::IWorksheetFunction::Count ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Count(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(733)
inline VARIANT_BOOL Excel::IWorksheetFunction::IsNA ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsNA(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(734)
inline VARIANT_BOOL Excel::IWorksheetFunction::IsError ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsError(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(735)
inline double Excel::IWorksheetFunction::Sum ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Sum(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(736)
inline double Excel::IWorksheetFunction::Average ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Average(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(737)
inline double Excel::IWorksheetFunction::Min ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Min(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(738)
inline double Excel::IWorksheetFunction::Max ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Max(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(739)
inline double Excel::IWorksheetFunction::Npv ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Npv(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(740)
inline double Excel::IWorksheetFunction::StDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_StDev(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(741)
inline _bstr_t Excel::IWorksheetFunction::Dollar ( double Arg1, const _variant_t & Arg2 ) {
    BSTR _result;
    HRESULT _hr = raw_Dollar(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(742)
inline _bstr_t Excel::IWorksheetFunction::Fixed ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    BSTR _result;
    HRESULT _hr = raw_Fixed(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(743)
inline double Excel::IWorksheetFunction::Pi ( ) {
    double _result;
    HRESULT _hr = raw_Pi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(744)
inline double Excel::IWorksheetFunction::Ln ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Ln(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(745)
inline double Excel::IWorksheetFunction::Log10 ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Log10(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(746)
inline double Excel::IWorksheetFunction::Round ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Round(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(747)
inline _variant_t Excel::IWorksheetFunction::Lookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Lookup(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(748)
inline _variant_t Excel::IWorksheetFunction::Index ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Index(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(749)
inline _bstr_t Excel::IWorksheetFunction::Rept ( _bstr_t Arg1, double Arg2 ) {
    BSTR _result;
    HRESULT _hr = raw_Rept(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(750)
inline VARIANT_BOOL Excel::IWorksheetFunction::And ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_And(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(751)
inline VARIANT_BOOL Excel::IWorksheetFunction::Or ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Or(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(752)
inline double Excel::IWorksheetFunction::DCount ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DCount(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(753)
inline double Excel::IWorksheetFunction::DSum ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DSum(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(754)
inline double Excel::IWorksheetFunction::DAverage ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DAverage(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(755)
inline double Excel::IWorksheetFunction::DMin ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DMin(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(756)
inline double Excel::IWorksheetFunction::DMax ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DMax(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline double Excel::IWorksheetFunction::DStDev ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DStDev(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(758)
inline double Excel::IWorksheetFunction::Var ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Var(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(759)
inline double Excel::IWorksheetFunction::DVar ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DVar(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(760)
inline _bstr_t Excel::IWorksheetFunction::Text ( const _variant_t & Arg1, _bstr_t Arg2 ) {
    BSTR _result;
    HRESULT _hr = raw_Text(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(761)
inline _variant_t Excel::IWorksheetFunction::LinEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LinEst(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(762)
inline _variant_t Excel::IWorksheetFunction::Trend ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Trend(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(763)
inline _variant_t Excel::IWorksheetFunction::LogEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LogEst(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(764)
inline _variant_t Excel::IWorksheetFunction::Growth ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Growth(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(765)
inline double Excel::IWorksheetFunction::Pv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    HRESULT _hr = raw_Pv(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(766)
inline double Excel::IWorksheetFunction::Fv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    HRESULT _hr = raw_Fv(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline double Excel::IWorksheetFunction::NPer ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    HRESULT _hr = raw_NPer(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(768)
inline double Excel::IWorksheetFunction::Pmt ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    HRESULT _hr = raw_Pmt(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline double Excel::IWorksheetFunction::Rate ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result;
    HRESULT _hr = raw_Rate(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(770)
inline double Excel::IWorksheetFunction::MIrr ( const _variant_t & Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_MIrr(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(771)
inline double Excel::IWorksheetFunction::Irr ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_Irr(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(772)
inline double Excel::IWorksheetFunction::Match ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_Match(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(773)
inline double Excel::IWorksheetFunction::Weekday ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_Weekday(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(774)
inline double Excel::IWorksheetFunction::Search ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_Search(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(775)
inline _variant_t Excel::IWorksheetFunction::Transpose ( const _variant_t & Arg1 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Transpose(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(776)
inline double Excel::IWorksheetFunction::Atan2 ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Atan2(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(777)
inline double Excel::IWorksheetFunction::Asin ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Asin(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(778)
inline double Excel::IWorksheetFunction::Acos ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Acos(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(779)
inline _variant_t Excel::IWorksheetFunction::Choose ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Choose(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(780)
inline _variant_t Excel::IWorksheetFunction::HLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_HLookup(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(781)
inline _variant_t Excel::IWorksheetFunction::VLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_VLookup(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(782)
inline double Excel::IWorksheetFunction::Log ( double Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_Log(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(783)
inline _bstr_t Excel::IWorksheetFunction::Proper ( _bstr_t Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_Proper(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(784)
inline _bstr_t Excel::IWorksheetFunction::Trim ( _bstr_t Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_Trim(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(785)
inline _bstr_t Excel::IWorksheetFunction::Replace ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 ) {
    BSTR _result;
    HRESULT _hr = raw_Replace(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(786)
inline _bstr_t Excel::IWorksheetFunction::Substitute ( _bstr_t Arg1, _bstr_t Arg2, _bstr_t Arg3, const _variant_t & Arg4 ) {
    BSTR _result;
    HRESULT _hr = raw_Substitute(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(787)
inline double Excel::IWorksheetFunction::Find ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_Find(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline VARIANT_BOOL Excel::IWorksheetFunction::IsErr ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsErr(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(789)
inline VARIANT_BOOL Excel::IWorksheetFunction::IsText ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsText(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline VARIANT_BOOL Excel::IWorksheetFunction::IsNumber ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsNumber(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(791)
inline double Excel::IWorksheetFunction::Sln ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_Sln(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(792)
inline double Excel::IWorksheetFunction::Syd ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result;
    HRESULT _hr = raw_Syd(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline double Excel::IWorksheetFunction::Ddb ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 ) {
    double _result;
    HRESULT _hr = raw_Ddb(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline _bstr_t Excel::IWorksheetFunction::Clean ( _bstr_t Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_Clean(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(795)
inline double Excel::IWorksheetFunction::MDeterm ( const _variant_t & Arg1 ) {
    double _result;
    HRESULT _hr = raw_MDeterm(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(796)
inline _variant_t Excel::IWorksheetFunction::MInverse ( const _variant_t & Arg1 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_MInverse(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(797)
inline _variant_t Excel::IWorksheetFunction::MMult ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_MMult(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(798)
inline double Excel::IWorksheetFunction::Ipmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result;
    HRESULT _hr = raw_Ipmt(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(799)
inline double Excel::IWorksheetFunction::Ppmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result;
    HRESULT _hr = raw_Ppmt(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(800)
inline double Excel::IWorksheetFunction::CountA ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_CountA(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(801)
inline double Excel::IWorksheetFunction::Product ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Product(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(802)
inline double Excel::IWorksheetFunction::Fact ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Fact(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(803)
inline double Excel::IWorksheetFunction::DProduct ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DProduct(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(804)
inline VARIANT_BOOL Excel::IWorksheetFunction::IsNonText ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsNonText(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline double Excel::IWorksheetFunction::StDevP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_StDevP(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline double Excel::IWorksheetFunction::VarP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_VarP(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline double Excel::IWorksheetFunction::DStDevP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DStDevP(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline double Excel::IWorksheetFunction::DVarP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DVarP(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(809)
inline VARIANT_BOOL Excel::IWorksheetFunction::IsLogical ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsLogical(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(810)
inline double Excel::IWorksheetFunction::DCountA ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_DCountA(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(811)
inline _bstr_t Excel::IWorksheetFunction::USDollar ( double Arg1, double Arg2 ) {
    BSTR _result;
    HRESULT _hr = raw_USDollar(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(812)
inline double Excel::IWorksheetFunction::FindB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_FindB(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(813)
inline double Excel::IWorksheetFunction::SearchB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_SearchB(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(814)
inline _bstr_t Excel::IWorksheetFunction::ReplaceB ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 ) {
    BSTR _result;
    HRESULT _hr = raw_ReplaceB(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(815)
inline double Excel::IWorksheetFunction::RoundUp ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_RoundUp(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(816)
inline double Excel::IWorksheetFunction::RoundDown ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_RoundDown(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(817)
inline double Excel::IWorksheetFunction::Rank ( double Arg1, struct Range * Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_Rank(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(818)
inline double Excel::IWorksheetFunction::Days360 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_Days360(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(819)
inline double Excel::IWorksheetFunction::Vdb ( double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, const _variant_t & Arg6, const _variant_t & Arg7 ) {
    double _result;
    HRESULT _hr = raw_Vdb(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(820)
inline double Excel::IWorksheetFunction::Median ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Median(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(821)
inline double Excel::IWorksheetFunction::SumProduct ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_SumProduct(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(822)
inline double Excel::IWorksheetFunction::Sinh ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Sinh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(823)
inline double Excel::IWorksheetFunction::Cosh ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Cosh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(824)
inline double Excel::IWorksheetFunction::Tanh ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Tanh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline double Excel::IWorksheetFunction::Asinh ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Asinh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(826)
inline double Excel::IWorksheetFunction::Acosh ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Acosh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline double Excel::IWorksheetFunction::Atanh ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Atanh(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(828)
inline _variant_t Excel::IWorksheetFunction::DGet ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DGet(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(829)
inline double Excel::IWorksheetFunction::Db ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 ) {
    double _result;
    HRESULT _hr = raw_Db(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(830)
inline _variant_t Excel::IWorksheetFunction::Frequency ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Frequency(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(831)
inline double Excel::IWorksheetFunction::AveDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_AveDev(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(832)
inline double Excel::IWorksheetFunction::BetaDist ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    HRESULT _hr = raw_BetaDist(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(833)
inline double Excel::IWorksheetFunction::GammaLn ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_GammaLn(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(834)
inline double Excel::IWorksheetFunction::BetaInv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    HRESULT _hr = raw_BetaInv(Arg1, Arg2, Arg3, Arg4, Arg5, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(835)
inline double Excel::IWorksheetFunction::BinomDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result;
    HRESULT _hr = raw_BinomDist(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(836)
inline double Excel::IWorksheetFunction::ChiDist ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_ChiDist(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(837)
inline double Excel::IWorksheetFunction::ChiInv ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_ChiInv(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(838)
inline double Excel::IWorksheetFunction::Combin ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Combin(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(839)
inline double Excel::IWorksheetFunction::Confidence ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_Confidence(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(840)
inline double Excel::IWorksheetFunction::CritBinom ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_CritBinom(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(841)
inline double Excel::IWorksheetFunction::Even ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Even(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(842)
inline double Excel::IWorksheetFunction::ExponDist ( double Arg1, double Arg2, VARIANT_BOOL Arg3 ) {
    double _result;
    HRESULT _hr = raw_ExponDist(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(843)
inline double Excel::IWorksheetFunction::FDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_FDist(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(844)
inline double Excel::IWorksheetFunction::FInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_FInv(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(845)
inline double Excel::IWorksheetFunction::Fisher ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Fisher(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(846)
inline double Excel::IWorksheetFunction::FisherInv ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_FisherInv(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(847)
inline double Excel::IWorksheetFunction::Floor ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Floor(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(848)
inline double Excel::IWorksheetFunction::GammaDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result;
    HRESULT _hr = raw_GammaDist(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(849)
inline double Excel::IWorksheetFunction::GammaInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_GammaInv(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(850)
inline double Excel::IWorksheetFunction::Ceiling ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Ceiling(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(851)
inline double Excel::IWorksheetFunction::HypGeomDist ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result;
    HRESULT _hr = raw_HypGeomDist(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(852)
inline double Excel::IWorksheetFunction::LogNormDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_LogNormDist(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(853)
inline double Excel::IWorksheetFunction::LogInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_LogInv(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline double Excel::IWorksheetFunction::NegBinomDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_NegBinomDist(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(855)
inline double Excel::IWorksheetFunction::NormDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result;
    HRESULT _hr = raw_NormDist(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline double Excel::IWorksheetFunction::NormSDist ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_NormSDist(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(857)
inline double Excel::IWorksheetFunction::NormInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_NormInv(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(858)
inline double Excel::IWorksheetFunction::NormSInv ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_NormSInv(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(859)
inline double Excel::IWorksheetFunction::Standardize ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_Standardize(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline double Excel::IWorksheetFunction::Odd ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Odd(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(861)
inline double Excel::IWorksheetFunction::Permut ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Permut(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(862)
inline double Excel::IWorksheetFunction::Poisson ( double Arg1, double Arg2, VARIANT_BOOL Arg3 ) {
    double _result;
    HRESULT _hr = raw_Poisson(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(863)
inline double Excel::IWorksheetFunction::TDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    HRESULT _hr = raw_TDist(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(864)
inline double Excel::IWorksheetFunction::Weibull ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result;
    HRESULT _hr = raw_Weibull(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(865)
inline double Excel::IWorksheetFunction::SumXMY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_SumXMY2(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(866)
inline double Excel::IWorksheetFunction::SumX2MY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_SumX2MY2(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(867)
inline double Excel::IWorksheetFunction::SumX2PY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_SumX2PY2(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(868)
inline double Excel::IWorksheetFunction::ChiTest ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_ChiTest(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(869)
inline double Excel::IWorksheetFunction::Correl ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_Correl(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline double Excel::IWorksheetFunction::Covar ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_Covar(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(871)
inline double Excel::IWorksheetFunction::Forecast ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_Forecast(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(872)
inline double Excel::IWorksheetFunction::FTest ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_FTest(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(873)
inline double Excel::IWorksheetFunction::Intercept ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_Intercept(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(874)
inline double Excel::IWorksheetFunction::Pearson ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_Pearson(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(875)
inline double Excel::IWorksheetFunction::RSq ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_RSq(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(876)
inline double Excel::IWorksheetFunction::StEyx ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_StEyx(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(877)
inline double Excel::IWorksheetFunction::Slope ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_Slope(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(878)
inline double Excel::IWorksheetFunction::TTest ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, double Arg4 ) {
    double _result;
    HRESULT _hr = raw_TTest(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(879)
inline double Excel::IWorksheetFunction::Prob ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, const _variant_t & Arg4 ) {
    double _result;
    HRESULT _hr = raw_Prob(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline double Excel::IWorksheetFunction::DevSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_DevSq(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(881)
inline double Excel::IWorksheetFunction::GeoMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_GeoMean(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline double Excel::IWorksheetFunction::HarMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_HarMean(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(883)
inline double Excel::IWorksheetFunction::SumSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_SumSq(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(884)
inline double Excel::IWorksheetFunction::Kurt ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Kurt(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(885)
inline double Excel::IWorksheetFunction::Skew ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Skew(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(886)
inline double Excel::IWorksheetFunction::ZTest ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_ZTest(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(887)
inline double Excel::IWorksheetFunction::Large ( const _variant_t & Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Large(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(888)
inline double Excel::IWorksheetFunction::Small ( const _variant_t & Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Small(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(889)
inline double Excel::IWorksheetFunction::Quartile ( const _variant_t & Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Quartile(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(890)
inline double Excel::IWorksheetFunction::Percentile ( const _variant_t & Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Percentile(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(891)
inline double Excel::IWorksheetFunction::PercentRank ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_PercentRank(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(892)
inline double Excel::IWorksheetFunction::Mode ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Mode(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(893)
inline double Excel::IWorksheetFunction::TrimMean ( const _variant_t & Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_TrimMean(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(894)
inline double Excel::IWorksheetFunction::TInv ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_TInv(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline double Excel::IWorksheetFunction::Power ( double Arg1, double Arg2 ) {
    double _result;
    HRESULT _hr = raw_Power(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(896)
inline double Excel::IWorksheetFunction::Radians ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Radians(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline double Excel::IWorksheetFunction::Degrees ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_Degrees(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(898)
inline double Excel::IWorksheetFunction::Subtotal ( double Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    HRESULT _hr = raw_Subtotal(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(899)
inline double Excel::IWorksheetFunction::SumIf ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    HRESULT _hr = raw_SumIf(Arg1, Arg2, Arg3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(900)
inline double Excel::IWorksheetFunction::CountIf ( struct Range * Arg1, const _variant_t & Arg2 ) {
    double _result;
    HRESULT _hr = raw_CountIf(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(901)
inline double Excel::IWorksheetFunction::CountBlank ( struct Range * Arg1 ) {
    double _result;
    HRESULT _hr = raw_CountBlank(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(902)
inline double Excel::IWorksheetFunction::Ispmt ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result;
    HRESULT _hr = raw_Ispmt(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(903)
inline _bstr_t Excel::IWorksheetFunction::Roman ( double Arg1, const _variant_t & Arg2 ) {
    BSTR _result;
    HRESULT _hr = raw_Roman(Arg1, Arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(904)
inline _bstr_t Excel::IWorksheetFunction::Asc ( _bstr_t Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_Asc(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(905)
inline _bstr_t Excel::IWorksheetFunction::Dbcs ( _bstr_t Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_Dbcs(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(906)
inline _bstr_t Excel::IWorksheetFunction::Phonetic ( struct Range * Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_Phonetic(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(907)
inline _bstr_t Excel::IWorksheetFunction::BahtText ( double Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_BahtText(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(908)
inline _bstr_t Excel::IWorksheetFunction::ThaiDayOfWeek ( double Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_ThaiDayOfWeek(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(909)
inline _bstr_t Excel::IWorksheetFunction::ThaiDigit ( _bstr_t Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_ThaiDigit(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(910)
inline _bstr_t Excel::IWorksheetFunction::ThaiMonthOfYear ( double Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_ThaiMonthOfYear(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(911)
inline _bstr_t Excel::IWorksheetFunction::ThaiNumSound ( double Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_ThaiNumSound(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(912)
inline _bstr_t Excel::IWorksheetFunction::ThaiNumString ( double Arg1 ) {
    BSTR _result;
    HRESULT _hr = raw_ThaiNumString(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(913)
inline double Excel::IWorksheetFunction::ThaiStringLength ( _bstr_t Arg1 ) {
    double _result;
    HRESULT _hr = raw_ThaiStringLength(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline VARIANT_BOOL Excel::IWorksheetFunction::IsThaiDigit ( _bstr_t Arg1 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsThaiDigit(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(915)
inline double Excel::IWorksheetFunction::RoundBahtDown ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_RoundBahtDown(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline double Excel::IWorksheetFunction::RoundBahtUp ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_RoundBahtUp(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(917)
inline double Excel::IWorksheetFunction::ThaiYear ( double Arg1 ) {
    double _result;
    HRESULT _hr = raw_ThaiYear(Arg1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(918)
inline _variant_t Excel::IWorksheetFunction::RTD ( const _variant_t & progID, const _variant_t & server, const _variant_t & topic1, const _variant_t & topic2, const _variant_t & topic3, const _variant_t & topic4, const _variant_t & topic5, const _variant_t & topic6, const _variant_t & topic7, const _variant_t & topic8, const _variant_t & topic9, const _variant_t & topic10, const _variant_t & topic11, const _variant_t & topic12, const _variant_t & topic13, const _variant_t & topic14, const _variant_t & topic15, const _variant_t & topic16, const _variant_t & topic17, const _variant_t & topic18, const _variant_t & topic19, const _variant_t & topic20, const _variant_t & topic21, const _variant_t & topic22, const _variant_t & topic23, const _variant_t & topic24, const _variant_t & topic25, const _variant_t & topic26, const _variant_t & topic27, const _variant_t & topic28 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RTD(progID, server, topic1, topic2, topic3, topic4, topic5, topic6, topic7, topic8, topic9, topic10, topic11, topic12, topic13, topic14, topic15, topic16, topic17, topic18, topic19, topic20, topic21, topic22, topic23, topic24, topic25, topic26, topic27, topic28, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IRange wrapper method implementations
//

#pragma implementation_key(919)
inline Excel::_ApplicationPtr Excel::IRange::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(920)
inline enum XlCreator Excel::IRange::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(921)
inline IDispatchPtr Excel::IRange::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(922)
inline _variant_t Excel::IRange::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Activate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(923)
inline _variant_t Excel::IRange::GetAddIndent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(924)
inline void Excel::IRange::PutAddIndent ( const _variant_t & RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(925)
inline _bstr_t Excel::IRange::GetAddress ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo, long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Address(RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(926)
inline _bstr_t Excel::IRange::GetAddressLocal ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo ) {
    BSTR _result;
    HRESULT _hr = get_AddressLocal(RowAbsolute, ColumnAbsolute, ReferenceStyle, External, RelativeTo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(927)
inline _variant_t Excel::IRange::AdvancedFilter ( enum XlFilterAction Action, const _variant_t & CriteriaRange, const _variant_t & CopyToRange, const _variant_t & Unique ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AdvancedFilter(Action, CriteriaRange, CopyToRange, Unique, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(928)
inline _variant_t Excel::IRange::ApplyNames ( const _variant_t & Names, const _variant_t & IgnoreRelativeAbsolute, const _variant_t & UseRowColumnNames, const _variant_t & OmitColumn, const _variant_t & OmitRow, enum XlApplyNamesOrder Order, const _variant_t & AppendLast ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyNames(Names, IgnoreRelativeAbsolute, UseRowColumnNames, OmitColumn, OmitRow, Order, AppendLast, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(929)
inline _variant_t Excel::IRange::ApplyOutlineStyles ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyOutlineStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(930)
inline Excel::AreasPtr Excel::IRange::GetAreas ( ) {
    struct Areas * _result;
    HRESULT _hr = get_Areas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AreasPtr(_result, false);
}

#pragma implementation_key(931)
inline _bstr_t Excel::IRange::AutoComplete ( _bstr_t String ) {
    BSTR _result;
    HRESULT _hr = raw_AutoComplete(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(932)
inline _variant_t Excel::IRange::AutoFill ( struct Range * Destination, enum XlAutoFillType Type ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AutoFill(Destination, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(933)
inline _variant_t Excel::IRange::AutoFilter ( const _variant_t & Field, const _variant_t & Criteria1, enum XlAutoFilterOperator Operator, const _variant_t & Criteria2, const _variant_t & VisibleDropDown ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AutoFilter(Field, Criteria1, Operator, Criteria2, VisibleDropDown, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(934)
inline _variant_t Excel::IRange::AutoFit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AutoFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(935)
inline _variant_t Excel::IRange::AutoFormat ( enum XlRangeAutoFormat Format, const _variant_t & Number, const _variant_t & Font, const _variant_t & Alignment, const _variant_t & Border, const _variant_t & Pattern, const _variant_t & Width ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AutoFormat(Format, Number, Font, Alignment, Border, Pattern, Width, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(936)
inline _variant_t Excel::IRange::AutoOutline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AutoOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(937)
inline _variant_t Excel::IRange::BorderAround ( const _variant_t & LineStyle, enum XlBorderWeight Weight, enum XlColorIndex ColorIndex, const _variant_t & Color ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BorderAround(LineStyle, Weight, ColorIndex, Color, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(938)
inline Excel::BordersPtr Excel::IRange::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(939)
inline _variant_t Excel::IRange::Calculate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Calculate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(940)
inline Excel::RangePtr Excel::IRange::GetCells ( ) {
    struct Range * _result;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(941)
inline Excel::CharactersPtr Excel::IRange::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(942)
inline _variant_t Excel::IRange::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(943)
inline _variant_t Excel::IRange::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(944)
inline _variant_t Excel::IRange::ClearContents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(945)
inline _variant_t Excel::IRange::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(946)
inline _variant_t Excel::IRange::ClearNotes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(947)
inline _variant_t Excel::IRange::ClearOutline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(948)
inline long Excel::IRange::GetColumn ( ) {
    long _result;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(949)
inline Excel::RangePtr Excel::IRange::ColumnDifferences ( const _variant_t & Comparison ) {
    struct Range * _result;
    HRESULT _hr = raw_ColumnDifferences(Comparison, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(950)
inline Excel::RangePtr Excel::IRange::GetColumns ( ) {
    struct Range * _result;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(951)
inline _variant_t Excel::IRange::GetColumnWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColumnWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(952)
inline void Excel::IRange::PutColumnWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColumnWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(953)
inline _variant_t Excel::IRange::Consolidate ( const _variant_t & Sources, const _variant_t & Function, const _variant_t & TopRow, const _variant_t & LeftColumn, const _variant_t & CreateLinks ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Consolidate(Sources, Function, TopRow, LeftColumn, CreateLinks, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(954)
inline _variant_t Excel::IRange::Copy ( const _variant_t & Destination ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(Destination, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(955)
inline long Excel::IRange::CopyFromRecordset ( IUnknown * Data, const _variant_t & MaxRows, const _variant_t & MaxColumns ) {
    long _result;
    HRESULT _hr = raw_CopyFromRecordset(Data, MaxRows, MaxColumns, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(956)
inline _variant_t Excel::IRange::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(957)
inline long Excel::IRange::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(958)
inline _variant_t Excel::IRange::CreateNames ( const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CreateNames(Top, Left, Bottom, Right, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(959)
inline _variant_t Excel::IRange::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CreatePublisher(Edition, Appearance, ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(960)
inline Excel::RangePtr Excel::IRange::GetCurrentArray ( ) {
    struct Range * _result;
    HRESULT _hr = get_CurrentArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(961)
inline Excel::RangePtr Excel::IRange::GetCurrentRegion ( ) {
    struct Range * _result;
    HRESULT _hr = get_CurrentRegion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(962)
inline _variant_t Excel::IRange::Cut ( const _variant_t & Destination ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(Destination, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(963)
inline _variant_t Excel::IRange::DataSeries ( const _variant_t & Rowcol, enum XlDataSeriesType Type, enum XlDataSeriesDate Date, const _variant_t & Step, const _variant_t & Stop, const _variant_t & Trend ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DataSeries(Rowcol, Type, Date, Step, Stop, Trend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(964)
inline _variant_t Excel::IRange::Get_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get__Default(RowIndex, ColumnIndex, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(965)
inline void Excel::IRange::Put_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put__Default(RowIndex, ColumnIndex, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(966)
inline _variant_t Excel::IRange::Delete ( const _variant_t & Shift ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(Shift, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(967)
inline Excel::RangePtr Excel::IRange::GetDependents ( ) {
    struct Range * _result;
    HRESULT _hr = get_Dependents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(968)
inline _variant_t Excel::IRange::ignorethis ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ignorethis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(969)
inline Excel::RangePtr Excel::IRange::GetDirectDependents ( ) {
    struct Range * _result;
    HRESULT _hr = get_DirectDependents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(970)
inline Excel::RangePtr Excel::IRange::GetDirectPrecedents ( ) {
    struct Range * _result;
    HRESULT _hr = get_DirectPrecedents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(971)
inline _variant_t Excel::IRange::EditionOptions ( enum XlEditionType Type, enum XlEditionOptionsOption Option, const _variant_t & Name, const _variant_t & Reference, enum XlPictureAppearance Appearance, enum XlPictureAppearance ChartSize, const _variant_t & Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_EditionOptions(Type, Option, Name, Reference, Appearance, ChartSize, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(972)
inline Excel::RangePtr Excel::IRange::GetEnd ( enum XlDirection Direction ) {
    struct Range * _result;
    HRESULT _hr = get_End(Direction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(973)
inline Excel::RangePtr Excel::IRange::GetEntireColumn ( ) {
    struct Range * _result;
    HRESULT _hr = get_EntireColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(974)
inline Excel::RangePtr Excel::IRange::GetEntireRow ( ) {
    struct Range * _result;
    HRESULT _hr = get_EntireRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(975)
inline _variant_t Excel::IRange::FillDown ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FillDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(976)
inline _variant_t Excel::IRange::FillLeft ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FillLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(977)
inline _variant_t Excel::IRange::FillRight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FillRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(978)
inline _variant_t Excel::IRange::FillUp ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FillUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(979)
inline Excel::RangePtr Excel::IRange::Find ( const _variant_t & What, const _variant_t & After, const _variant_t & LookIn, const _variant_t & LookAt, const _variant_t & SearchOrder, enum XlSearchDirection SearchDirection, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat ) {
    struct Range * _result;
    HRESULT _hr = raw_Find(What, After, LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, MatchByte, SearchFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(980)
inline Excel::RangePtr Excel::IRange::FindNext ( const _variant_t & After ) {
    struct Range * _result;
    HRESULT _hr = raw_FindNext(After, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(981)
inline Excel::RangePtr Excel::IRange::FindPrevious ( const _variant_t & After ) {
    struct Range * _result;
    HRESULT _hr = raw_FindPrevious(After, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(982)
inline Excel::FontPtr Excel::IRange::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(983)
inline _variant_t Excel::IRange::GetFormula ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Formula(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(984)
inline void Excel::IRange::PutFormula ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Formula(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(985)
inline _variant_t Excel::IRange::GetFormulaArray ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(986)
inline void Excel::IRange::PutFormulaArray ( const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaArray(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(987)
inline enum XlFormulaLabel Excel::IRange::GetFormulaLabel ( ) {
    enum XlFormulaLabel _result;
    HRESULT _hr = get_FormulaLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(988)
inline void Excel::IRange::PutFormulaLabel ( enum XlFormulaLabel RHS ) {
    HRESULT _hr = put_FormulaLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(989)
inline _variant_t Excel::IRange::GetFormulaHidden ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(990)
inline void Excel::IRange::PutFormulaHidden ( const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaHidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(991)
inline _variant_t Excel::IRange::GetFormulaLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(992)
inline void Excel::IRange::PutFormulaLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(993)
inline _variant_t Excel::IRange::GetFormulaR1C1 ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaR1C1(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(994)
inline void Excel::IRange::PutFormulaR1C1 ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaR1C1(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(995)
inline _variant_t Excel::IRange::GetFormulaR1C1Local ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(996)
inline void Excel::IRange::PutFormulaR1C1Local ( const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaR1C1Local(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(997)
inline _variant_t Excel::IRange::FunctionWizard ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_FunctionWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(998)
inline VARIANT_BOOL Excel::IRange::GoalSeek ( const _variant_t & Goal, struct Range * ChangingCell ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_GoalSeek(Goal, ChangingCell, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(999)
inline _variant_t Excel::IRange::Group ( const _variant_t & Start, const _variant_t & End, const _variant_t & By, const _variant_t & Periods ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Group(Start, End, By, Periods, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1000)
inline _variant_t Excel::IRange::GetHasArray ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HasArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1001)
inline _variant_t Excel::IRange::GetHasFormula ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HasFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1002)
inline _variant_t Excel::IRange::GetHeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1003)
inline _variant_t Excel::IRange::GetHidden ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1004)
inline void Excel::IRange::PutHidden ( const _variant_t & RHS ) {
    HRESULT _hr = put_Hidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1005)
inline _variant_t Excel::IRange::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1006)
inline void Excel::IRange::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1007)
inline _variant_t Excel::IRange::GetIndentLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1008)
inline void Excel::IRange::PutIndentLevel ( const _variant_t & RHS ) {
    HRESULT _hr = put_IndentLevel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1009)
inline HRESULT Excel::IRange::InsertIndent ( long InsertAmount ) {
    HRESULT _hr = raw_InsertIndent(InsertAmount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1010)
inline _variant_t Excel::IRange::Insert ( const _variant_t & Shift, const _variant_t & CopyOrigin ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Insert(Shift, CopyOrigin, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1011)
inline Excel::InteriorPtr Excel::IRange::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1012)
inline _variant_t Excel::IRange::GetItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(RowIndex, ColumnIndex, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1013)
inline void Excel::IRange::PutItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Item(RowIndex, ColumnIndex, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1014)
inline _variant_t Excel::IRange::Justify ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Justify(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1015)
inline _variant_t Excel::IRange::GetLeft ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1016)
inline long Excel::IRange::GetListHeaderRows ( ) {
    long _result;
    HRESULT _hr = get_ListHeaderRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1017)
inline _variant_t Excel::IRange::ListNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ListNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1018)
inline enum XlLocationInTable Excel::IRange::GetLocationInTable ( ) {
    enum XlLocationInTable _result;
    HRESULT _hr = get_LocationInTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1019)
inline _variant_t Excel::IRange::GetLocked ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1020)
inline void Excel::IRange::PutLocked ( const _variant_t & RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1021)
inline HRESULT Excel::IRange::Merge ( const _variant_t & Across ) {
    HRESULT _hr = raw_Merge(Across);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1022)
inline HRESULT Excel::IRange::UnMerge ( ) {
    HRESULT _hr = raw_UnMerge();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1023)
inline Excel::RangePtr Excel::IRange::GetMergeArea ( ) {
    struct Range * _result;
    HRESULT _hr = get_MergeArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1024)
inline _variant_t Excel::IRange::GetMergeCells ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MergeCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1025)
inline void Excel::IRange::PutMergeCells ( const _variant_t & RHS ) {
    HRESULT _hr = put_MergeCells(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1026)
inline _variant_t Excel::IRange::GetName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1027)
inline void Excel::IRange::PutName ( const _variant_t & RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1028)
inline _variant_t Excel::IRange::NavigateArrow ( const _variant_t & TowardPrecedent, const _variant_t & ArrowNumber, const _variant_t & LinkNumber ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_NavigateArrow(TowardPrecedent, ArrowNumber, LinkNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1029)
inline IUnknownPtr Excel::IRange::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1030)
inline Excel::RangePtr Excel::IRange::GetNext ( ) {
    struct Range * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1031)
inline _bstr_t Excel::IRange::NoteText ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Length ) {
    BSTR _result;
    HRESULT _hr = raw_NoteText(Text, Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1032)
inline _variant_t Excel::IRange::GetNumberFormat ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1033)
inline void Excel::IRange::PutNumberFormat ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1034)
inline _variant_t Excel::IRange::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1035)
inline void Excel::IRange::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1036)
inline Excel::RangePtr Excel::IRange::GetOffset ( const _variant_t & RowOffset, const _variant_t & ColumnOffset ) {
    struct Range * _result;
    HRESULT _hr = get_Offset(RowOffset, ColumnOffset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1037)
inline _variant_t Excel::IRange::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1038)
inline void Excel::IRange::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1039)
inline _variant_t Excel::IRange::GetOutlineLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OutlineLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1040)
inline void Excel::IRange::PutOutlineLevel ( const _variant_t & RHS ) {
    HRESULT _hr = put_OutlineLevel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1041)
inline long Excel::IRange::GetPageBreak ( ) {
    long _result;
    HRESULT _hr = get_PageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline void Excel::IRange::PutPageBreak ( long RHS ) {
    HRESULT _hr = put_PageBreak(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1043)
inline _variant_t Excel::IRange::Parse ( const _variant_t & ParseLine, const _variant_t & Destination ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Parse(ParseLine, Destination, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1044)
inline _variant_t Excel::IRange::_PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__PasteSpecial(Paste, Operation, SkipBlanks, Transpose, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1045)
inline Excel::PivotFieldPtr Excel::IRange::GetPivotField ( ) {
    struct PivotField * _result;
    HRESULT _hr = get_PivotField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(1046)
inline Excel::PivotItemPtr Excel::IRange::GetPivotItem ( ) {
    struct PivotItem * _result;
    HRESULT _hr = get_PivotItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(1047)
inline Excel::PivotTablePtr Excel::IRange::GetPivotTable ( ) {
    struct PivotTable * _result;
    HRESULT _hr = get_PivotTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(1048)
inline Excel::RangePtr Excel::IRange::GetPrecedents ( ) {
    struct Range * _result;
    HRESULT _hr = get_Precedents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1049)
inline _variant_t Excel::IRange::GetPrefixCharacter ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PrefixCharacter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1050)
inline Excel::RangePtr Excel::IRange::GetPrevious ( ) {
    struct Range * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1051)
inline _variant_t Excel::IRange::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1052)
inline _variant_t Excel::IRange::PrintPreview ( const _variant_t & EnableChanges ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PrintPreview(EnableChanges, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1053)
inline Excel::_QueryTablePtr Excel::IRange::GetQueryTable ( ) {
    struct _QueryTable * _result;
    HRESULT _hr = get_QueryTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _QueryTablePtr(_result, false);
}

#pragma implementation_key(1054)
inline Excel::RangePtr Excel::IRange::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 ) {
    struct Range * _result;
    HRESULT _hr = get_Range(Cell1, Cell2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1055)
inline _variant_t Excel::IRange::RemoveSubtotal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveSubtotal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1056)
inline VARIANT_BOOL Excel::IRange::Replace ( const _variant_t & What, const _variant_t & Replacement, const _variant_t & LookAt, const _variant_t & SearchOrder, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat, const _variant_t & ReplaceFormat ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Replace(What, Replacement, LookAt, SearchOrder, MatchCase, MatchByte, SearchFormat, ReplaceFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1057)
inline Excel::RangePtr Excel::IRange::GetResize ( const _variant_t & RowSize, const _variant_t & ColumnSize ) {
    struct Range * _result;
    HRESULT _hr = get_Resize(RowSize, ColumnSize, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1058)
inline long Excel::IRange::GetRow ( ) {
    long _result;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1059)
inline Excel::RangePtr Excel::IRange::RowDifferences ( const _variant_t & Comparison ) {
    struct Range * _result;
    HRESULT _hr = raw_RowDifferences(Comparison, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1060)
inline _variant_t Excel::IRange::GetRowHeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1061)
inline void Excel::IRange::PutRowHeight ( const _variant_t & RHS ) {
    HRESULT _hr = put_RowHeight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1062)
inline Excel::RangePtr Excel::IRange::GetRows ( ) {
    struct Range * _result;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1063)
inline _variant_t Excel::IRange::Run ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1064)
inline _variant_t Excel::IRange::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1065)
inline _variant_t Excel::IRange::Show ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1066)
inline _variant_t Excel::IRange::ShowDependents ( const _variant_t & Remove ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ShowDependents(Remove, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1067)
inline _variant_t Excel::IRange::GetShowDetail ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ShowDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1068)
inline void Excel::IRange::PutShowDetail ( const _variant_t & RHS ) {
    HRESULT _hr = put_ShowDetail(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1069)
inline _variant_t Excel::IRange::ShowErrors ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ShowErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1070)
inline _variant_t Excel::IRange::ShowPrecedents ( const _variant_t & Remove ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ShowPrecedents(Remove, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1071)
inline _variant_t Excel::IRange::GetShrinkToFit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ShrinkToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1072)
inline void Excel::IRange::PutShrinkToFit ( const _variant_t & RHS ) {
    HRESULT _hr = put_ShrinkToFit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1073)
inline _variant_t Excel::IRange::Sort ( const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Key2, const _variant_t & Type, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortMethod SortMethod, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Sort(Key1, Order1, Key2, Type, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, SortMethod, DataOption1, DataOption2, DataOption3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1074)
inline _variant_t Excel::IRange::SortSpecial ( enum XlSortMethod SortMethod, const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Type, const _variant_t & Key2, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SortSpecial(SortMethod, Key1, Order1, Type, Key2, Order2, Key3, Order3, Header, OrderCustom, MatchCase, Orientation, DataOption1, DataOption2, DataOption3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1075)
inline Excel::SoundNotePtr Excel::IRange::GetSoundNote ( ) {
    struct SoundNote * _result;
    HRESULT _hr = get_SoundNote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundNotePtr(_result, false);
}

#pragma implementation_key(1076)
inline Excel::RangePtr Excel::IRange::SpecialCells ( enum XlCellType Type, const _variant_t & Value ) {
    struct Range * _result;
    HRESULT _hr = raw_SpecialCells(Type, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1077)
inline _variant_t Excel::IRange::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1078)
inline void Excel::IRange::PutStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_Style(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1079)
inline _variant_t Excel::IRange::SubscribeTo ( _bstr_t Edition, enum XlSubscribeToFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SubscribeTo(Edition, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1080)
inline _variant_t Excel::IRange::Subtotal ( long GroupBy, enum XlConsolidationFunction Function, const _variant_t & TotalList, const _variant_t & Replace, const _variant_t & PageBreaks, enum XlSummaryRow SummaryBelowData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Subtotal(GroupBy, Function, TotalList, Replace, PageBreaks, SummaryBelowData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1081)
inline _variant_t Excel::IRange::GetSummary ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Summary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1082)
inline _variant_t Excel::IRange::Table ( const _variant_t & RowInput, const _variant_t & ColumnInput ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Table(RowInput, ColumnInput, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1083)
inline _variant_t Excel::IRange::GetText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1084)
inline _variant_t Excel::IRange::TextToColumns ( const _variant_t & Destination, enum XlTextParsingType DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, const _variant_t & TrailingMinusNumbers ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_TextToColumns(Destination, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, DecimalSeparator, ThousandsSeparator, TrailingMinusNumbers, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1085)
inline _variant_t Excel::IRange::GetTop ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1086)
inline _variant_t Excel::IRange::Ungroup ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1087)
inline _variant_t Excel::IRange::GetUseStandardHeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UseStandardHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1088)
inline void Excel::IRange::PutUseStandardHeight ( const _variant_t & RHS ) {
    HRESULT _hr = put_UseStandardHeight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1089)
inline _variant_t Excel::IRange::GetUseStandardWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UseStandardWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1090)
inline void Excel::IRange::PutUseStandardWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_UseStandardWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1091)
inline Excel::ValidationPtr Excel::IRange::GetValidation ( ) {
    struct Validation * _result;
    HRESULT _hr = get_Validation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ValidationPtr(_result, false);
}

#pragma implementation_key(1092)
inline _variant_t Excel::IRange::GetValue ( const _variant_t & RangeValueDataType, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(RangeValueDataType, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1093)
inline void Excel::IRange::PutValue ( const _variant_t & RangeValueDataType, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RangeValueDataType, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1094)
inline _variant_t Excel::IRange::GetValue2 ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value2(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1095)
inline void Excel::IRange::PutValue2 ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Value2(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1096)
inline _variant_t Excel::IRange::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1097)
inline void Excel::IRange::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1098)
inline _variant_t Excel::IRange::GetWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1099)
inline Excel::_WorksheetPtr Excel::IRange::GetWorksheet ( ) {
    struct _Worksheet * _result;
    HRESULT _hr = get_Worksheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorksheetPtr(_result, false);
}

#pragma implementation_key(1100)
inline _variant_t Excel::IRange::GetWrapText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_WrapText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1101)
inline void Excel::IRange::PutWrapText ( const _variant_t & RHS ) {
    HRESULT _hr = put_WrapText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1102)
inline Excel::CommentPtr Excel::IRange::AddComment ( const _variant_t & Text ) {
    struct Comment * _result;
    HRESULT _hr = raw_AddComment(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(1103)
inline Excel::CommentPtr Excel::IRange::GetComment ( ) {
    struct Comment * _result;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(1104)
inline HRESULT Excel::IRange::ClearComments ( ) {
    HRESULT _hr = raw_ClearComments();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1105)
inline Excel::PhoneticPtr Excel::IRange::GetPhonetic ( ) {
    struct Phonetic * _result;
    HRESULT _hr = get_Phonetic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PhoneticPtr(_result, false);
}

#pragma implementation_key(1106)
inline Excel::FormatConditionsPtr Excel::IRange::GetFormatConditions ( ) {
    struct FormatConditions * _result;
    HRESULT _hr = get_FormatConditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormatConditionsPtr(_result, false);
}

#pragma implementation_key(1107)
inline long Excel::IRange::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1108)
inline void Excel::IRange::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1109)
inline Excel::HyperlinksPtr Excel::IRange::GetHyperlinks ( ) {
    struct Hyperlinks * _result;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(1110)
inline Excel::PhoneticsPtr Excel::IRange::GetPhonetics ( ) {
    struct Phonetics * _result;
    HRESULT _hr = get_Phonetics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PhoneticsPtr(_result, false);
}

#pragma implementation_key(1111)
inline HRESULT Excel::IRange::SetPhonetic ( ) {
    HRESULT _hr = raw_SetPhonetic();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1112)
inline _bstr_t Excel::IRange::GetID ( ) {
    BSTR _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1113)
inline void Excel::IRange::PutID ( _bstr_t RHS ) {
    HRESULT _hr = put_ID(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1114)
inline _variant_t Excel::IRange::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1115)
inline Excel::PivotCellPtr Excel::IRange::GetPivotCell ( ) {
    struct PivotCell * _result;
    HRESULT _hr = get_PivotCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCellPtr(_result, false);
}

#pragma implementation_key(1116)
inline HRESULT Excel::IRange::Dirty ( ) {
    HRESULT _hr = raw_Dirty();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1117)
inline Excel::ErrorsPtr Excel::IRange::GetErrors ( ) {
    struct Errors * _result;
    HRESULT _hr = get_Errors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ErrorsPtr(_result, false);
}

#pragma implementation_key(1118)
inline Excel::SmartTagsPtr Excel::IRange::GetSmartTags ( ) {
    struct SmartTags * _result;
    HRESULT _hr = get_SmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagsPtr(_result, false);
}

#pragma implementation_key(1119)
inline HRESULT Excel::IRange::Speak ( const _variant_t & SpeakDirection, const _variant_t & SpeakFormulas ) {
    HRESULT _hr = raw_Speak(SpeakDirection, SpeakFormulas);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1120)
inline _variant_t Excel::IRange::PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PasteSpecial(Paste, Operation, SkipBlanks, Transpose, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1121)
inline VARIANT_BOOL Excel::IRange::GetAllowEdit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IChartEvents wrapper method implementations
//

#pragma implementation_key(1122)
inline HRESULT Excel::IChartEvents::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1123)
inline HRESULT Excel::IChartEvents::Deactivate ( ) {
    HRESULT _hr = raw_Deactivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1124)
inline HRESULT Excel::IChartEvents::Resize ( ) {
    HRESULT _hr = raw_Resize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1125)
inline HRESULT Excel::IChartEvents::MouseDown ( long Button, long Shift, long x, long y ) {
    HRESULT _hr = raw_MouseDown(Button, Shift, x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1126)
inline HRESULT Excel::IChartEvents::MouseUp ( long Button, long Shift, long x, long y ) {
    HRESULT _hr = raw_MouseUp(Button, Shift, x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1127)
inline HRESULT Excel::IChartEvents::MouseMove ( long Button, long Shift, long x, long y ) {
    HRESULT _hr = raw_MouseMove(Button, Shift, x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1128)
inline HRESULT Excel::IChartEvents::BeforeRightClick ( VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeRightClick(Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1129)
inline HRESULT Excel::IChartEvents::DragPlot ( ) {
    HRESULT _hr = raw_DragPlot();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1130)
inline HRESULT Excel::IChartEvents::DragOver ( ) {
    HRESULT _hr = raw_DragOver();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1131)
inline HRESULT Excel::IChartEvents::BeforeDoubleClick ( long ElementID, long Arg1, long Arg2, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeDoubleClick(ElementID, Arg1, Arg2, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1132)
inline HRESULT Excel::IChartEvents::Select ( long ElementID, long Arg1, long Arg2 ) {
    HRESULT _hr = raw_Select(ElementID, Arg1, Arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1133)
inline HRESULT Excel::IChartEvents::SeriesChange ( long SeriesIndex, long PointIndex ) {
    HRESULT _hr = raw_SeriesChange(SeriesIndex, PointIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1134)
inline HRESULT Excel::IChartEvents::Calculate ( ) {
    HRESULT _hr = raw_Calculate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Chart wrapper method implementations
//

#pragma implementation_key(1135)
inline Excel::_ApplicationPtr Excel::_Chart::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1136)
inline enum XlCreator Excel::_Chart::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1137)
inline IDispatchPtr Excel::_Chart::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1138)
inline HRESULT Excel::_Chart::Activate ( long lcid ) {
    HRESULT _hr = raw_Activate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1139)
inline HRESULT Excel::_Chart::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1140)
inline HRESULT Excel::_Chart::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1141)
inline _bstr_t Excel::_Chart::GetCodeName ( ) {
    BSTR _result;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1142)
inline _bstr_t Excel::_Chart::Get_CodeName ( ) {
    BSTR _result;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1143)
inline void Excel::_Chart::Put_CodeName ( _bstr_t RHS ) {
    HRESULT _hr = put__CodeName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1144)
inline long Excel::_Chart::GetIndex ( long lcid ) {
    long _result;
    HRESULT _hr = get_Index(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1145)
inline HRESULT Excel::_Chart::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1146)
inline _bstr_t Excel::_Chart::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1147)
inline void Excel::_Chart::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1148)
inline IDispatchPtr Excel::_Chart::GetNext ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1149)
inline _bstr_t Excel::_Chart::GetOnDoubleClick ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnDoubleClick(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1150)
inline void Excel::_Chart::PutOnDoubleClick ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnDoubleClick(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1151)
inline _bstr_t Excel::_Chart::GetOnSheetActivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1152)
inline void Excel::_Chart::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1153)
inline _bstr_t Excel::_Chart::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1154)
inline void Excel::_Chart::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1155)
inline Excel::PageSetupPtr Excel::_Chart::GetPageSetup ( ) {
    struct PageSetup * _result;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(1156)
inline IDispatchPtr Excel::_Chart::GetPrevious ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1157)
inline HRESULT Excel::_Chart::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1158)
inline HRESULT Excel::_Chart::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1159)
inline HRESULT Excel::_Chart::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid ) {
    HRESULT _hr = raw__Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1160)
inline VARIANT_BOOL Excel::_Chart::GetProtectContents ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectContents(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline VARIANT_BOOL Excel::_Chart::GetProtectDrawingObjects ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectDrawingObjects(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1162)
inline VARIANT_BOOL Excel::_Chart::GetProtectionMode ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectionMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1163)
inline HRESULT Excel::_Chart::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw__SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1164)
inline HRESULT Excel::_Chart::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1165)
inline HRESULT Excel::_Chart::Unprotect ( const _variant_t & Password, long lcid ) {
    HRESULT _hr = raw_Unprotect(Password, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1166)
inline enum XlSheetVisibility Excel::_Chart::GetVisible ( long lcid ) {
    enum XlSheetVisibility _result;
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1167)
inline void Excel::_Chart::PutVisible ( long lcid, enum XlSheetVisibility RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1168)
inline Excel::ShapesPtr Excel::_Chart::GetShapes ( ) {
    struct Shapes * _result;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(1169)
inline HRESULT Excel::_Chart::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, long lcid ) {
    HRESULT _hr = raw__ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1170)
inline IDispatchPtr Excel::_Chart::Arcs ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Arcs(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1171)
inline Excel::ChartGroupPtr Excel::_Chart::GetArea3DGroup ( long lcid ) {
    struct ChartGroup * _result;
    HRESULT _hr = get_Area3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(1172)
inline IDispatchPtr Excel::_Chart::AreaGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_AreaGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1173)
inline HRESULT Excel::_Chart::AutoFormat ( long Gallery, const _variant_t & Format ) {
    HRESULT _hr = raw_AutoFormat(Gallery, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1174)
inline VARIANT_BOOL Excel::_Chart::GetAutoScaling ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoScaling(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1175)
inline void Excel::_Chart::PutAutoScaling ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoScaling(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1176)
inline IDispatchPtr Excel::_Chart::Axes ( const _variant_t & Type, enum XlAxisGroup AxisGroup, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Axes(Type, AxisGroup, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1177)
inline HRESULT Excel::_Chart::SetBackgroundPicture ( _bstr_t Filename ) {
    HRESULT _hr = raw_SetBackgroundPicture(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1178)
inline Excel::ChartGroupPtr Excel::_Chart::GetBar3DGroup ( long lcid ) {
    struct ChartGroup * _result;
    HRESULT _hr = get_Bar3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(1179)
inline IDispatchPtr Excel::_Chart::BarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_BarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1180)
inline IDispatchPtr Excel::_Chart::Buttons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Buttons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1181)
inline Excel::ChartAreaPtr Excel::_Chart::GetChartArea ( long lcid ) {
    struct ChartArea * _result;
    HRESULT _hr = get_ChartArea(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartAreaPtr(_result, false);
}

#pragma implementation_key(1182)
inline IDispatchPtr Excel::_Chart::ChartGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ChartGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1183)
inline IDispatchPtr Excel::_Chart::ChartObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ChartObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1184)
inline Excel::ChartTitlePtr Excel::_Chart::GetChartTitle ( long lcid ) {
    struct ChartTitle * _result;
    HRESULT _hr = get_ChartTitle(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartTitlePtr(_result, false);
}

#pragma implementation_key(1185)
inline HRESULT Excel::_Chart::ChartWizard ( const _variant_t & Source, const _variant_t & Gallery, const _variant_t & Format, const _variant_t & PlotBy, const _variant_t & CategoryLabels, const _variant_t & SeriesLabels, const _variant_t & HasLegend, const _variant_t & Title, const _variant_t & CategoryTitle, const _variant_t & ValueTitle, const _variant_t & ExtraTitle, long lcid ) {
    HRESULT _hr = raw_ChartWizard(Source, Gallery, Format, PlotBy, CategoryLabels, SeriesLabels, HasLegend, Title, CategoryTitle, ValueTitle, ExtraTitle, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1186)
inline IDispatchPtr Excel::_Chart::CheckBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_CheckBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1187)
inline HRESULT Excel::_Chart::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid ) {
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1188)
inline Excel::ChartGroupPtr Excel::_Chart::GetColumn3DGroup ( long lcid ) {
    struct ChartGroup * _result;
    HRESULT _hr = get_Column3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(1189)
inline IDispatchPtr Excel::_Chart::ColumnGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ColumnGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1190)
inline HRESULT Excel::_Chart::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format, enum XlPictureAppearance Size, long lcid ) {
    HRESULT _hr = raw_CopyPicture(Appearance, Format, Size, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1191)
inline Excel::CornersPtr Excel::_Chart::GetCorners ( long lcid ) {
    struct Corners * _result;
    HRESULT _hr = get_Corners(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CornersPtr(_result, false);
}

#pragma implementation_key(1192)
inline HRESULT Excel::_Chart::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, enum XlPictureAppearance Size, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU, long lcid ) {
    HRESULT _hr = raw_CreatePublisher(Edition, Appearance, Size, ContainsPICT, ContainsBIFF, ContainsRTF, ContainsVALU, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1193)
inline Excel::DataTablePtr Excel::_Chart::GetDataTable ( ) {
    struct DataTable * _result;
    HRESULT _hr = get_DataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataTablePtr(_result, false);
}

#pragma implementation_key(1194)
inline long Excel::_Chart::GetDepthPercent ( long lcid ) {
    long _result;
    HRESULT _hr = get_DepthPercent(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1195)
inline void Excel::_Chart::PutDepthPercent ( long lcid, long RHS ) {
    HRESULT _hr = put_DepthPercent(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1196)
inline HRESULT Excel::_Chart::Deselect ( long lcid ) {
    HRESULT _hr = raw_Deselect(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1197)
inline enum XlDisplayBlanksAs Excel::_Chart::GetDisplayBlanksAs ( long lcid ) {
    enum XlDisplayBlanksAs _result;
    HRESULT _hr = get_DisplayBlanksAs(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline void Excel::_Chart::PutDisplayBlanksAs ( long lcid, enum XlDisplayBlanksAs RHS ) {
    HRESULT _hr = put_DisplayBlanksAs(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1199)
inline IDispatchPtr Excel::_Chart::DoughnutGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_DoughnutGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1200)
inline IDispatchPtr Excel::_Chart::Drawings ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Drawings(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1201)
inline IDispatchPtr Excel::_Chart::DrawingObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_DrawingObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1202)
inline IDispatchPtr Excel::_Chart::DropDowns ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_DropDowns(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1203)
inline long Excel::_Chart::GetElevation ( long lcid ) {
    long _result;
    HRESULT _hr = get_Elevation(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1204)
inline void Excel::_Chart::PutElevation ( long lcid, long RHS ) {
    HRESULT _hr = put_Elevation(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1205)
inline _variant_t Excel::_Chart::Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1206)
inline _variant_t Excel::_Chart::_Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1207)
inline Excel::FloorPtr Excel::_Chart::GetFloor ( long lcid ) {
    struct Floor * _result;
    HRESULT _hr = get_Floor(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FloorPtr(_result, false);
}

#pragma implementation_key(1208)
inline long Excel::_Chart::GetGapDepth ( long lcid ) {
    long _result;
    HRESULT _hr = get_GapDepth(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1209)
inline void Excel::_Chart::PutGapDepth ( long lcid, long RHS ) {
    HRESULT _hr = put_GapDepth(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1210)
inline IDispatchPtr Excel::_Chart::GroupBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_GroupBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1211)
inline IDispatchPtr Excel::_Chart::GroupObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_GroupObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1212)
inline _variant_t Excel::_Chart::GetHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HasAxis(Index1, Index2, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1213)
inline void Excel::_Chart::PutHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_HasAxis(Index1, Index2, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1214)
inline VARIANT_BOOL Excel::_Chart::GetHasDataTable ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1215)
inline void Excel::_Chart::PutHasDataTable ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataTable(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1216)
inline VARIANT_BOOL Excel::_Chart::GetHasLegend ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasLegend(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1217)
inline void Excel::_Chart::PutHasLegend ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLegend(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1218)
inline VARIANT_BOOL Excel::_Chart::GetHasTitle ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasTitle(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1219)
inline void Excel::_Chart::PutHasTitle ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasTitle(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1220)
inline long Excel::_Chart::GetHeightPercent ( long lcid ) {
    long _result;
    HRESULT _hr = get_HeightPercent(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1221)
inline void Excel::_Chart::PutHeightPercent ( long lcid, long RHS ) {
    HRESULT _hr = put_HeightPercent(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1222)
inline Excel::HyperlinksPtr Excel::_Chart::GetHyperlinks ( ) {
    struct Hyperlinks * _result;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(1223)
inline IDispatchPtr Excel::_Chart::Labels ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Labels(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1224)
inline Excel::LegendPtr Excel::_Chart::GetLegend ( long lcid ) {
    struct Legend * _result;
    HRESULT _hr = get_Legend(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendPtr(_result, false);
}

#pragma implementation_key(1225)
inline Excel::ChartGroupPtr Excel::_Chart::GetLine3DGroup ( long lcid ) {
    struct ChartGroup * _result;
    HRESULT _hr = get_Line3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(1226)
inline IDispatchPtr Excel::_Chart::LineGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_LineGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1227)
inline IDispatchPtr Excel::_Chart::Lines ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Lines(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1228)
inline IDispatchPtr Excel::_Chart::ListBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ListBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1229)
inline Excel::_ChartPtr Excel::_Chart::Location ( enum XlChartLocation Where, const _variant_t & Name ) {
    struct _Chart * _result;
    HRESULT _hr = raw_Location(Where, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

#pragma implementation_key(1230)
inline IDispatchPtr Excel::_Chart::OLEObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_OLEObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1231)
inline IDispatchPtr Excel::_Chart::OptionButtons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_OptionButtons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1232)
inline IDispatchPtr Excel::_Chart::Ovals ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Ovals(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1233)
inline HRESULT Excel::_Chart::Paste ( const _variant_t & Type, long lcid ) {
    HRESULT _hr = raw_Paste(Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1234)
inline long Excel::_Chart::GetPerspective ( long lcid ) {
    long _result;
    HRESULT _hr = get_Perspective(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1235)
inline void Excel::_Chart::PutPerspective ( long lcid, long RHS ) {
    HRESULT _hr = put_Perspective(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1236)
inline IDispatchPtr Excel::_Chart::Pictures ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Pictures(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1237)
inline Excel::ChartGroupPtr Excel::_Chart::GetPie3DGroup ( long lcid ) {
    struct ChartGroup * _result;
    HRESULT _hr = get_Pie3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(1238)
inline IDispatchPtr Excel::_Chart::PieGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_PieGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1239)
inline Excel::PlotAreaPtr Excel::_Chart::GetPlotArea ( long lcid ) {
    struct PlotArea * _result;
    HRESULT _hr = get_PlotArea(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlotAreaPtr(_result, false);
}

#pragma implementation_key(1240)
inline VARIANT_BOOL Excel::_Chart::GetPlotVisibleOnly ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PlotVisibleOnly(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1241)
inline void Excel::_Chart::PutPlotVisibleOnly ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PlotVisibleOnly(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1242)
inline IDispatchPtr Excel::_Chart::RadarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_RadarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1243)
inline IDispatchPtr Excel::_Chart::Rectangles ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Rectangles(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1244)
inline _variant_t Excel::_Chart::GetRightAngleAxes ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RightAngleAxes(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1245)
inline void Excel::_Chart::PutRightAngleAxes ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_RightAngleAxes(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1246)
inline _variant_t Excel::_Chart::GetRotation ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Rotation(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1247)
inline void Excel::_Chart::PutRotation ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Rotation(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1248)
inline IDispatchPtr Excel::_Chart::ScrollBars ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ScrollBars(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1249)
inline IDispatchPtr Excel::_Chart::SeriesCollection ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_SeriesCollection(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1250)
inline VARIANT_BOOL Excel::_Chart::GetSizeWithWindow ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SizeWithWindow(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1251)
inline void Excel::_Chart::PutSizeWithWindow ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SizeWithWindow(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1252)
inline VARIANT_BOOL Excel::_Chart::GetShowWindow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1253)
inline void Excel::_Chart::PutShowWindow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowWindow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1254)
inline IDispatchPtr Excel::_Chart::Spinners ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Spinners(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1255)
inline long Excel::_Chart::GetSubType ( long lcid ) {
    long _result;
    HRESULT _hr = get_SubType(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1256)
inline void Excel::_Chart::PutSubType ( long lcid, long RHS ) {
    HRESULT _hr = put_SubType(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1257)
inline Excel::ChartGroupPtr Excel::_Chart::GetSurfaceGroup ( long lcid ) {
    struct ChartGroup * _result;
    HRESULT _hr = get_SurfaceGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(1258)
inline IDispatchPtr Excel::_Chart::TextBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_TextBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1259)
inline long Excel::_Chart::GetType ( long lcid ) {
    long _result;
    HRESULT _hr = get_Type(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1260)
inline void Excel::_Chart::PutType ( long lcid, long RHS ) {
    HRESULT _hr = put_Type(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1261)
inline enum XlChartType Excel::_Chart::GetChartType ( ) {
    enum XlChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1262)
inline void Excel::_Chart::PutChartType ( enum XlChartType RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1263)
inline HRESULT Excel::_Chart::ApplyCustomType ( enum XlChartType ChartType, const _variant_t & TypeName ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType, TypeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1264)
inline Excel::WallsPtr Excel::_Chart::GetWalls ( long lcid ) {
    struct Walls * _result;
    HRESULT _hr = get_Walls(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WallsPtr(_result, false);
}

#pragma implementation_key(1265)
inline VARIANT_BOOL Excel::_Chart::GetWallsAndGridlines2D ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WallsAndGridlines2D(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1266)
inline void Excel::_Chart::PutWallsAndGridlines2D ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WallsAndGridlines2D(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1267)
inline IDispatchPtr Excel::_Chart::XYGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_XYGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1268)
inline enum XlBarShape Excel::_Chart::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1269)
inline void Excel::_Chart::PutBarShape ( enum XlBarShape RHS ) {
    HRESULT _hr = put_BarShape(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1270)
inline enum XlRowCol Excel::_Chart::GetPlotBy ( ) {
    enum XlRowCol _result;
    HRESULT _hr = get_PlotBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1271)
inline void Excel::_Chart::PutPlotBy ( enum XlRowCol RHS ) {
    HRESULT _hr = put_PlotBy(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1272)
inline HRESULT Excel::_Chart::CopyChartBuild ( ) {
    HRESULT _hr = raw_CopyChartBuild();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1273)
inline VARIANT_BOOL Excel::_Chart::GetProtectFormatting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1274)
inline void Excel::_Chart::PutProtectFormatting ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ProtectFormatting(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1275)
inline VARIANT_BOOL Excel::_Chart::GetProtectData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1276)
inline void Excel::_Chart::PutProtectData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ProtectData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1277)
inline VARIANT_BOOL Excel::_Chart::GetProtectGoalSeek ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectGoalSeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1278)
inline void Excel::_Chart::PutProtectGoalSeek ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ProtectGoalSeek(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1279)
inline VARIANT_BOOL Excel::_Chart::GetProtectSelection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1280)
inline void Excel::_Chart::PutProtectSelection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ProtectSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1281)
inline HRESULT Excel::_Chart::GetChartElement ( long x, long y, long * ElementID, long * Arg1, long * Arg2 ) {
    HRESULT _hr = raw_GetChartElement(x, y, ElementID, Arg1, Arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1282)
inline HRESULT Excel::_Chart::SetSourceData ( struct Range * Source, const _variant_t & PlotBy ) {
    HRESULT _hr = raw_SetSourceData(Source, PlotBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1283)
inline VARIANT_BOOL Excel::_Chart::Export ( _bstr_t Filename, const _variant_t & FilterName, const _variant_t & Interactive ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Export(Filename, FilterName, Interactive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1284)
inline HRESULT Excel::_Chart::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1285)
inline Excel::PivotLayoutPtr Excel::_Chart::GetPivotLayout ( ) {
    struct PivotLayout * _result;
    HRESULT _hr = get_PivotLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotLayoutPtr(_result, false);
}

#pragma implementation_key(1286)
inline VARIANT_BOOL Excel::_Chart::GetHasPivotFields ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasPivotFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1287)
inline void Excel::_Chart::PutHasPivotFields ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasPivotFields(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1288)
inline Office::ScriptsPtr Excel::_Chart::GetScripts ( ) {
    struct Office::Scripts * _result;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

#pragma implementation_key(1289)
inline HRESULT Excel::_Chart::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1290)
inline Excel::TabPtr Excel::_Chart::GetTab ( ) {
    struct Tab * _result;
    HRESULT _hr = get_Tab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabPtr(_result, false);
}

#pragma implementation_key(1291)
inline Office::IMsoEnvelopeVBPtr Excel::_Chart::GetMailEnvelope ( ) {
    struct Office::IMsoEnvelopeVB * _result;
    HRESULT _hr = get_MailEnvelope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IMsoEnvelopeVBPtr(_result, false);
}

#pragma implementation_key(1292)
inline HRESULT Excel::_Chart::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator, long lcid ) {
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1293)
inline HRESULT Excel::_Chart::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local ) {
    HRESULT _hr = raw_SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1294)
inline HRESULT Excel::_Chart::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly ) {
    HRESULT _hr = raw_Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Sheets wrapper method implementations
//

#pragma implementation_key(1295)
inline Excel::_ApplicationPtr Excel::Sheets::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1296)
inline enum XlCreator Excel::Sheets::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1297)
inline IDispatchPtr Excel::Sheets::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1298)
inline IDispatchPtr Excel::Sheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Add(Before, After, Count, Type, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1299)
inline HRESULT Excel::Sheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1300)
inline long Excel::Sheets::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1301)
inline HRESULT Excel::Sheets::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1302)
inline HRESULT Excel::Sheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type, long lcid ) {
    HRESULT _hr = raw_FillAcrossSheets(Range, Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1303)
inline IDispatchPtr Excel::Sheets::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1304)
inline HRESULT Excel::Sheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1305)
inline IUnknownPtr Excel::Sheets::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1306)
inline HRESULT Excel::Sheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1307)
inline HRESULT Excel::Sheets::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1308)
inline HRESULT Excel::Sheets::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1309)
inline Excel::HPageBreaksPtr Excel::Sheets::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(1310)
inline Excel::VPageBreaksPtr Excel::Sheets::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(1311)
inline _variant_t Excel::Sheets::GetVisible ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1312)
inline void Excel::Sheets::PutVisible ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1313)
inline IDispatchPtr Excel::Sheets::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1314)
inline HRESULT Excel::Sheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVPageBreak wrapper method implementations
//

#pragma implementation_key(1315)
inline Excel::_ApplicationPtr Excel::IVPageBreak::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1316)
inline enum XlCreator Excel::IVPageBreak::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1317)
inline Excel::_WorksheetPtr Excel::IVPageBreak::GetParent ( ) {
    struct _Worksheet * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorksheetPtr(_result, false);
}

#pragma implementation_key(1318)
inline HRESULT Excel::IVPageBreak::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1319)
inline HRESULT Excel::IVPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex ) {
    HRESULT _hr = raw_DragOff(Direction, RegionIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1320)
inline enum XlPageBreak Excel::IVPageBreak::GetType ( ) {
    enum XlPageBreak _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1321)
inline void Excel::IVPageBreak::PutType ( enum XlPageBreak RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1322)
inline enum XlPageBreakExtent Excel::IVPageBreak::GetExtent ( ) {
    enum XlPageBreakExtent _result;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1323)
inline Excel::RangePtr Excel::IVPageBreak::GetLocation ( ) {
    struct Range * _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1324)
inline void Excel::IVPageBreak::PutRefLocation ( struct Range * RHS ) {
    HRESULT _hr = putref_Location(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHPageBreak wrapper method implementations
//

#pragma implementation_key(1325)
inline Excel::_ApplicationPtr Excel::IHPageBreak::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1326)
inline enum XlCreator Excel::IHPageBreak::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1327)
inline Excel::_WorksheetPtr Excel::IHPageBreak::GetParent ( ) {
    struct _Worksheet * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorksheetPtr(_result, false);
}

#pragma implementation_key(1328)
inline HRESULT Excel::IHPageBreak::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1329)
inline HRESULT Excel::IHPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex ) {
    HRESULT _hr = raw_DragOff(Direction, RegionIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1330)
inline enum XlPageBreak Excel::IHPageBreak::GetType ( ) {
    enum XlPageBreak _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1331)
inline void Excel::IHPageBreak::PutType ( enum XlPageBreak RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1332)
inline enum XlPageBreakExtent Excel::IHPageBreak::GetExtent ( ) {
    enum XlPageBreakExtent _result;
    HRESULT _hr = get_Extent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1333)
inline Excel::RangePtr Excel::IHPageBreak::GetLocation ( ) {
    struct Range * _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1334)
inline void Excel::IHPageBreak::PutRefLocation ( struct Range * RHS ) {
    HRESULT _hr = putref_Location(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHPageBreaks wrapper method implementations
//

#pragma implementation_key(1335)
inline Excel::_ApplicationPtr Excel::IHPageBreaks::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1336)
inline enum XlCreator Excel::IHPageBreaks::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1337)
inline IDispatchPtr Excel::IHPageBreaks::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1338)
inline long Excel::IHPageBreaks::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1339)
inline Excel::HPageBreakPtr Excel::IHPageBreaks::GetItem ( long Index ) {
    struct HPageBreak * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreakPtr(_result, false);
}

#pragma implementation_key(1340)
inline Excel::HPageBreakPtr Excel::IHPageBreaks::Get_Default ( long Index ) {
    struct HPageBreak * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreakPtr(_result, false);
}

#pragma implementation_key(1341)
inline IUnknownPtr Excel::IHPageBreaks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1342)
inline Excel::HPageBreakPtr Excel::IHPageBreaks::Add ( IDispatch * Before ) {
    struct HPageBreak * _result;
    HRESULT _hr = raw_Add(Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreakPtr(_result, false);
}

//
// interface IVPageBreaks wrapper method implementations
//

#pragma implementation_key(1343)
inline Excel::_ApplicationPtr Excel::IVPageBreaks::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1344)
inline enum XlCreator Excel::IVPageBreaks::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1345)
inline IDispatchPtr Excel::IVPageBreaks::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1346)
inline long Excel::IVPageBreaks::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1347)
inline Excel::VPageBreakPtr Excel::IVPageBreaks::GetItem ( long Index ) {
    struct VPageBreak * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreakPtr(_result, false);
}

#pragma implementation_key(1348)
inline Excel::VPageBreakPtr Excel::IVPageBreaks::Get_Default ( long Index ) {
    struct VPageBreak * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreakPtr(_result, false);
}

#pragma implementation_key(1349)
inline IUnknownPtr Excel::IVPageBreaks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1350)
inline Excel::VPageBreakPtr Excel::IVPageBreaks::Add ( IDispatch * Before ) {
    struct VPageBreak * _result;
    HRESULT _hr = raw_Add(Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreakPtr(_result, false);
}

//
// interface IRecentFile wrapper method implementations
//

#pragma implementation_key(1351)
inline Excel::_ApplicationPtr Excel::IRecentFile::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1352)
inline enum XlCreator Excel::IRecentFile::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1353)
inline IDispatchPtr Excel::IRecentFile::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1354)
inline _bstr_t Excel::IRecentFile::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1355)
inline _bstr_t Excel::IRecentFile::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1356)
inline long Excel::IRecentFile::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1357)
inline Excel::_WorkbookPtr Excel::IRecentFile::Open ( ) {
    struct _Workbook * _result;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(1358)
inline HRESULT Excel::IRecentFile::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRecentFiles wrapper method implementations
//

#pragma implementation_key(1359)
inline Excel::_ApplicationPtr Excel::IRecentFiles::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1360)
inline enum XlCreator Excel::IRecentFiles::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1361)
inline IDispatchPtr Excel::IRecentFiles::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1362)
inline long Excel::IRecentFiles::GetMaximum ( ) {
    long _result;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1363)
inline void Excel::IRecentFiles::PutMaximum ( long RHS ) {
    HRESULT _hr = put_Maximum(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1364)
inline long Excel::IRecentFiles::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1365)
inline Excel::RecentFilePtr Excel::IRecentFiles::GetItem ( long Index ) {
    struct RecentFile * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilePtr(_result, false);
}

#pragma implementation_key(1366)
inline Excel::RecentFilePtr Excel::IRecentFiles::Get_Default ( long Index ) {
    struct RecentFile * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilePtr(_result, false);
}

#pragma implementation_key(1367)
inline Excel::RecentFilePtr Excel::IRecentFiles::Add ( _bstr_t Name ) {
    struct RecentFile * _result;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilePtr(_result, false);
}

#pragma implementation_key(1368)
inline IUnknownPtr Excel::IRecentFiles::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDocEvents wrapper method implementations
//

#pragma implementation_key(1369)
inline HRESULT Excel::IDocEvents::SelectionChange ( struct Range * Target ) {
    HRESULT _hr = raw_SelectionChange(Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1370)
inline HRESULT Excel::IDocEvents::BeforeDoubleClick ( struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeDoubleClick(Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1371)
inline HRESULT Excel::IDocEvents::BeforeRightClick ( struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeRightClick(Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1372)
inline HRESULT Excel::IDocEvents::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1373)
inline HRESULT Excel::IDocEvents::Deactivate ( ) {
    HRESULT _hr = raw_Deactivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1374)
inline HRESULT Excel::IDocEvents::Calculate ( ) {
    HRESULT _hr = raw_Calculate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1375)
inline HRESULT Excel::IDocEvents::Change ( struct Range * Target ) {
    HRESULT _hr = raw_Change(Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1376)
inline HRESULT Excel::IDocEvents::FollowHyperlink ( struct Hyperlink * Target ) {
    HRESULT _hr = raw_FollowHyperlink(Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1377)
inline HRESULT Excel::IDocEvents::PivotTableUpdate ( struct PivotTable * Target ) {
    HRESULT _hr = raw_PivotTableUpdate(Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Worksheet wrapper method implementations
//

#pragma implementation_key(1378)
inline Excel::_ApplicationPtr Excel::_Worksheet::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1379)
inline enum XlCreator Excel::_Worksheet::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1380)
inline IDispatchPtr Excel::_Worksheet::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1381)
inline HRESULT Excel::_Worksheet::Activate ( long lcid ) {
    HRESULT _hr = raw_Activate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1382)
inline HRESULT Excel::_Worksheet::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1383)
inline HRESULT Excel::_Worksheet::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1384)
inline _bstr_t Excel::_Worksheet::GetCodeName ( ) {
    BSTR _result;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1385)
inline _bstr_t Excel::_Worksheet::Get_CodeName ( ) {
    BSTR _result;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1386)
inline void Excel::_Worksheet::Put_CodeName ( _bstr_t RHS ) {
    HRESULT _hr = put__CodeName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1387)
inline long Excel::_Worksheet::GetIndex ( long lcid ) {
    long _result;
    HRESULT _hr = get_Index(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1388)
inline HRESULT Excel::_Worksheet::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1389)
inline _bstr_t Excel::_Worksheet::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1390)
inline void Excel::_Worksheet::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1391)
inline IDispatchPtr Excel::_Worksheet::GetNext ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1392)
inline _bstr_t Excel::_Worksheet::GetOnDoubleClick ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnDoubleClick(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1393)
inline void Excel::_Worksheet::PutOnDoubleClick ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnDoubleClick(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1394)
inline _bstr_t Excel::_Worksheet::GetOnSheetActivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1395)
inline void Excel::_Worksheet::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1396)
inline _bstr_t Excel::_Worksheet::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1397)
inline void Excel::_Worksheet::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1398)
inline Excel::PageSetupPtr Excel::_Worksheet::GetPageSetup ( ) {
    struct PageSetup * _result;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(1399)
inline IDispatchPtr Excel::_Worksheet::GetPrevious ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1400)
inline HRESULT Excel::_Worksheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1401)
inline HRESULT Excel::_Worksheet::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1402)
inline HRESULT Excel::_Worksheet::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid ) {
    HRESULT _hr = raw__Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1403)
inline VARIANT_BOOL Excel::_Worksheet::GetProtectContents ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectContents(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1404)
inline VARIANT_BOOL Excel::_Worksheet::GetProtectDrawingObjects ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectDrawingObjects(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1405)
inline VARIANT_BOOL Excel::_Worksheet::GetProtectionMode ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectionMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1406)
inline VARIANT_BOOL Excel::_Worksheet::GetProtectScenarios ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectScenarios(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1407)
inline HRESULT Excel::_Worksheet::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw__SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1408)
inline HRESULT Excel::_Worksheet::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1409)
inline HRESULT Excel::_Worksheet::Unprotect ( const _variant_t & Password, long lcid ) {
    HRESULT _hr = raw_Unprotect(Password, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1410)
inline enum XlSheetVisibility Excel::_Worksheet::GetVisible ( long lcid ) {
    enum XlSheetVisibility _result;
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1411)
inline void Excel::_Worksheet::PutVisible ( long lcid, enum XlSheetVisibility RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1412)
inline Excel::ShapesPtr Excel::_Worksheet::GetShapes ( ) {
    struct Shapes * _result;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(1413)
inline VARIANT_BOOL Excel::_Worksheet::GetTransitionExpEval ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TransitionExpEval(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1414)
inline void Excel::_Worksheet::PutTransitionExpEval ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TransitionExpEval(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1415)
inline IDispatchPtr Excel::_Worksheet::Arcs ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Arcs(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1416)
inline VARIANT_BOOL Excel::_Worksheet::GetAutoFilterMode ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFilterMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1417)
inline void Excel::_Worksheet::PutAutoFilterMode ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoFilterMode(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1418)
inline HRESULT Excel::_Worksheet::SetBackgroundPicture ( _bstr_t Filename ) {
    HRESULT _hr = raw_SetBackgroundPicture(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1419)
inline IDispatchPtr Excel::_Worksheet::Buttons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Buttons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1420)
inline HRESULT Excel::_Worksheet::Calculate ( long lcid ) {
    HRESULT _hr = raw_Calculate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1421)
inline VARIANT_BOOL Excel::_Worksheet::GetEnableCalculation ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableCalculation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1422)
inline void Excel::_Worksheet::PutEnableCalculation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableCalculation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1423)
inline Excel::RangePtr Excel::_Worksheet::GetCells ( ) {
    struct Range * _result;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1424)
inline IDispatchPtr Excel::_Worksheet::ChartObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ChartObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1425)
inline IDispatchPtr Excel::_Worksheet::CheckBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_CheckBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1426)
inline HRESULT Excel::_Worksheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid ) {
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1427)
inline Excel::RangePtr Excel::_Worksheet::GetCircularReference ( long lcid ) {
    struct Range * _result;
    HRESULT _hr = get_CircularReference(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1428)
inline HRESULT Excel::_Worksheet::ClearArrows ( long lcid ) {
    HRESULT _hr = raw_ClearArrows(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1429)
inline Excel::RangePtr Excel::_Worksheet::GetColumns ( ) {
    struct Range * _result;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1430)
inline enum XlConsolidationFunction Excel::_Worksheet::GetConsolidationFunction ( long lcid ) {
    enum XlConsolidationFunction _result;
    HRESULT _hr = get_ConsolidationFunction(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1431)
inline _variant_t Excel::_Worksheet::GetConsolidationOptions ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ConsolidationOptions(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1432)
inline _variant_t Excel::_Worksheet::GetConsolidationSources ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ConsolidationSources(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1433)
inline VARIANT_BOOL Excel::_Worksheet::GetDisplayAutomaticPageBreaks ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayAutomaticPageBreaks(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1434)
inline void Excel::_Worksheet::PutDisplayAutomaticPageBreaks ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayAutomaticPageBreaks(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1435)
inline IDispatchPtr Excel::_Worksheet::Drawings ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Drawings(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1436)
inline IDispatchPtr Excel::_Worksheet::DrawingObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_DrawingObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1437)
inline IDispatchPtr Excel::_Worksheet::DropDowns ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_DropDowns(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1438)
inline VARIANT_BOOL Excel::_Worksheet::GetEnableAutoFilter ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableAutoFilter(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1439)
inline void Excel::_Worksheet::PutEnableAutoFilter ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableAutoFilter(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1440)
inline enum XlEnableSelection Excel::_Worksheet::GetEnableSelection ( ) {
    enum XlEnableSelection _result;
    HRESULT _hr = get_EnableSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1441)
inline void Excel::_Worksheet::PutEnableSelection ( enum XlEnableSelection RHS ) {
    HRESULT _hr = put_EnableSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1442)
inline VARIANT_BOOL Excel::_Worksheet::GetEnableOutlining ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableOutlining(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1443)
inline void Excel::_Worksheet::PutEnableOutlining ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableOutlining(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1444)
inline VARIANT_BOOL Excel::_Worksheet::GetEnablePivotTable ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnablePivotTable(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1445)
inline void Excel::_Worksheet::PutEnablePivotTable ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnablePivotTable(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1446)
inline _variant_t Excel::_Worksheet::Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1447)
inline _variant_t Excel::_Worksheet::_Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1448)
inline VARIANT_BOOL Excel::_Worksheet::GetFilterMode ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FilterMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1449)
inline HRESULT Excel::_Worksheet::ResetAllPageBreaks ( ) {
    HRESULT _hr = raw_ResetAllPageBreaks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1450)
inline IDispatchPtr Excel::_Worksheet::GroupBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_GroupBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1451)
inline IDispatchPtr Excel::_Worksheet::GroupObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_GroupObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1452)
inline IDispatchPtr Excel::_Worksheet::Labels ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Labels(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1453)
inline IDispatchPtr Excel::_Worksheet::Lines ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Lines(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1454)
inline IDispatchPtr Excel::_Worksheet::ListBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ListBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1455)
inline Excel::NamesPtr Excel::_Worksheet::GetNames ( ) {
    struct Names * _result;
    HRESULT _hr = get_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamesPtr(_result, false);
}

#pragma implementation_key(1456)
inline IDispatchPtr Excel::_Worksheet::OLEObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_OLEObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1457)
inline _bstr_t Excel::_Worksheet::GetOnCalculate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnCalculate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1458)
inline void Excel::_Worksheet::PutOnCalculate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnCalculate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1459)
inline _bstr_t Excel::_Worksheet::GetOnData ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnData(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1460)
inline void Excel::_Worksheet::PutOnData ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnData(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1461)
inline _bstr_t Excel::_Worksheet::GetOnEntry ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnEntry(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1462)
inline void Excel::_Worksheet::PutOnEntry ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnEntry(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1463)
inline IDispatchPtr Excel::_Worksheet::OptionButtons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_OptionButtons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1464)
inline Excel::OutlinePtr Excel::_Worksheet::GetOutline ( ) {
    struct Outline * _result;
    HRESULT _hr = get_Outline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlinePtr(_result, false);
}

#pragma implementation_key(1465)
inline IDispatchPtr Excel::_Worksheet::Ovals ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Ovals(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1466)
inline HRESULT Excel::_Worksheet::Paste ( const _variant_t & Destination, const _variant_t & Link, long lcid ) {
    HRESULT _hr = raw_Paste(Destination, Link, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1467)
inline HRESULT Excel::_Worksheet::_PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, long lcid ) {
    HRESULT _hr = raw__PasteSpecial(Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1468)
inline IDispatchPtr Excel::_Worksheet::Pictures ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Pictures(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1469)
inline IDispatchPtr Excel::_Worksheet::PivotTables ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_PivotTables(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1470)
inline Excel::PivotTablePtr Excel::_Worksheet::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection, long lcid ) {
    struct PivotTable * _result;
    HRESULT _hr = raw_PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(1471)
inline Excel::RangePtr Excel::_Worksheet::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 ) {
    struct Range * _result;
    HRESULT _hr = get_Range(Cell1, Cell2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1472)
inline IDispatchPtr Excel::_Worksheet::Rectangles ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Rectangles(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1473)
inline Excel::RangePtr Excel::_Worksheet::GetRows ( ) {
    struct Range * _result;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1474)
inline IDispatchPtr Excel::_Worksheet::Scenarios ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Scenarios(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1475)
inline _bstr_t Excel::_Worksheet::GetScrollArea ( ) {
    BSTR _result;
    HRESULT _hr = get_ScrollArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1476)
inline void Excel::_Worksheet::PutScrollArea ( _bstr_t RHS ) {
    HRESULT _hr = put_ScrollArea(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1477)
inline IDispatchPtr Excel::_Worksheet::ScrollBars ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ScrollBars(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1478)
inline HRESULT Excel::_Worksheet::ShowAllData ( long lcid ) {
    HRESULT _hr = raw_ShowAllData(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1479)
inline HRESULT Excel::_Worksheet::ShowDataForm ( long lcid ) {
    HRESULT _hr = raw_ShowDataForm(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1480)
inline IDispatchPtr Excel::_Worksheet::Spinners ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Spinners(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1481)
inline double Excel::_Worksheet::GetStandardHeight ( long lcid ) {
    double _result;
    HRESULT _hr = get_StandardHeight(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1482)
inline double Excel::_Worksheet::GetStandardWidth ( long lcid ) {
    double _result;
    HRESULT _hr = get_StandardWidth(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1483)
inline void Excel::_Worksheet::PutStandardWidth ( long lcid, double RHS ) {
    HRESULT _hr = put_StandardWidth(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1484)
inline IDispatchPtr Excel::_Worksheet::TextBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_TextBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1485)
inline VARIANT_BOOL Excel::_Worksheet::GetTransitionFormEntry ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TransitionFormEntry(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1486)
inline void Excel::_Worksheet::PutTransitionFormEntry ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TransitionFormEntry(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1487)
inline enum XlSheetType Excel::_Worksheet::GetType ( long lcid ) {
    enum XlSheetType _result;
    HRESULT _hr = get_Type(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1488)
inline Excel::RangePtr Excel::_Worksheet::GetUsedRange ( long lcid ) {
    struct Range * _result;
    HRESULT _hr = get_UsedRange(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1489)
inline Excel::HPageBreaksPtr Excel::_Worksheet::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(1490)
inline Excel::VPageBreaksPtr Excel::_Worksheet::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(1491)
inline Excel::QueryTablesPtr Excel::_Worksheet::GetQueryTables ( ) {
    struct QueryTables * _result;
    HRESULT _hr = get_QueryTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return QueryTablesPtr(_result, false);
}

#pragma implementation_key(1492)
inline VARIANT_BOOL Excel::_Worksheet::GetDisplayPageBreaks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1493)
inline void Excel::_Worksheet::PutDisplayPageBreaks ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayPageBreaks(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1494)
inline Excel::CommentsPtr Excel::_Worksheet::GetComments ( ) {
    struct Comments * _result;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(1495)
inline Excel::HyperlinksPtr Excel::_Worksheet::GetHyperlinks ( ) {
    struct Hyperlinks * _result;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(1496)
inline HRESULT Excel::_Worksheet::ClearCircles ( ) {
    HRESULT _hr = raw_ClearCircles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1497)
inline HRESULT Excel::_Worksheet::CircleInvalid ( ) {
    HRESULT _hr = raw_CircleInvalid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1498)
inline long Excel::_Worksheet::Get_DisplayRightToLeft ( long lcid ) {
    long _result;
    HRESULT _hr = get__DisplayRightToLeft(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1499)
inline void Excel::_Worksheet::Put_DisplayRightToLeft ( long lcid, long RHS ) {
    HRESULT _hr = put__DisplayRightToLeft(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1500)
inline Excel::AutoFilterPtr Excel::_Worksheet::GetAutoFilter ( ) {
    struct AutoFilter * _result;
    HRESULT _hr = get_AutoFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoFilterPtr(_result, false);
}

#pragma implementation_key(1501)
inline VARIANT_BOOL Excel::_Worksheet::GetDisplayRightToLeft ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayRightToLeft(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1502)
inline void Excel::_Worksheet::PutDisplayRightToLeft ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRightToLeft(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1503)
inline Office::ScriptsPtr Excel::_Worksheet::GetScripts ( ) {
    struct Office::Scripts * _result;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

#pragma implementation_key(1504)
inline HRESULT Excel::_Worksheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1505)
inline HRESULT Excel::_Worksheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript, long lcid ) {
    HRESULT _hr = raw__CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, IgnoreFinalYaa, SpellScript, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1506)
inline Excel::TabPtr Excel::_Worksheet::GetTab ( ) {
    struct Tab * _result;
    HRESULT _hr = get_Tab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabPtr(_result, false);
}

#pragma implementation_key(1507)
inline Office::IMsoEnvelopeVBPtr Excel::_Worksheet::GetMailEnvelope ( ) {
    struct Office::IMsoEnvelopeVB * _result;
    HRESULT _hr = get_MailEnvelope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IMsoEnvelopeVBPtr(_result, false);
}

#pragma implementation_key(1508)
inline HRESULT Excel::_Worksheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local ) {
    HRESULT _hr = raw_SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1509)
inline Excel::CustomPropertiesPtr Excel::_Worksheet::GetCustomProperties ( ) {
    struct CustomProperties * _result;
    HRESULT _hr = get_CustomProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomPropertiesPtr(_result, false);
}

#pragma implementation_key(1510)
inline Excel::SmartTagsPtr Excel::_Worksheet::GetSmartTags ( ) {
    struct SmartTags * _result;
    HRESULT _hr = get_SmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagsPtr(_result, false);
}

#pragma implementation_key(1511)
inline Excel::ProtectionPtr Excel::_Worksheet::GetProtection ( ) {
    struct Protection * _result;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectionPtr(_result, false);
}

#pragma implementation_key(1512)
inline HRESULT Excel::_Worksheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & NoHTMLFormatting, long lcid ) {
    HRESULT _hr = raw_PasteSpecial(Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, NoHTMLFormatting, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1513)
inline HRESULT Excel::_Worksheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, const _variant_t & AllowFormattingCells, const _variant_t & AllowFormattingColumns, const _variant_t & AllowFormattingRows, const _variant_t & AllowInsertingColumns, const _variant_t & AllowInsertingRows, const _variant_t & AllowInsertingHyperlinks, const _variant_t & AllowDeletingColumns, const _variant_t & AllowDeletingRows, const _variant_t & AllowSorting, const _variant_t & AllowFiltering, const _variant_t & AllowUsingPivotTables ) {
    HRESULT _hr = raw_Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, AllowFormattingCells, AllowFormattingColumns, AllowFormattingRows, AllowInsertingColumns, AllowInsertingRows, AllowInsertingHyperlinks, AllowDeletingColumns, AllowDeletingRows, AllowSorting, AllowFiltering, AllowUsingPivotTables);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IStyle wrapper method implementations
//

#pragma implementation_key(1514)
inline Excel::_ApplicationPtr Excel::IStyle::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1515)
inline enum XlCreator Excel::IStyle::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1516)
inline IDispatchPtr Excel::IStyle::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1517)
inline VARIANT_BOOL Excel::IStyle::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1518)
inline void Excel::IStyle::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1519)
inline VARIANT_BOOL Excel::IStyle::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1520)
inline Excel::BordersPtr Excel::IStyle::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1521)
inline _variant_t Excel::IStyle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1522)
inline Excel::FontPtr Excel::IStyle::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(1523)
inline VARIANT_BOOL Excel::IStyle::GetFormulaHidden ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FormulaHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1524)
inline void Excel::IStyle::PutFormulaHidden ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_FormulaHidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1525)
inline enum XlHAlign Excel::IStyle::GetHorizontalAlignment ( ) {
    enum XlHAlign _result;
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1526)
inline void Excel::IStyle::PutHorizontalAlignment ( enum XlHAlign RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1527)
inline VARIANT_BOOL Excel::IStyle::GetIncludeAlignment ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1528)
inline void Excel::IStyle::PutIncludeAlignment ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1529)
inline VARIANT_BOOL Excel::IStyle::GetIncludeBorder ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1530)
inline void Excel::IStyle::PutIncludeBorder ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeBorder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1531)
inline VARIANT_BOOL Excel::IStyle::GetIncludeFont ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1532)
inline void Excel::IStyle::PutIncludeFont ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1533)
inline VARIANT_BOOL Excel::IStyle::GetIncludeNumber ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1534)
inline void Excel::IStyle::PutIncludeNumber ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeNumber(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1535)
inline VARIANT_BOOL Excel::IStyle::GetIncludePatterns ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludePatterns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1536)
inline void Excel::IStyle::PutIncludePatterns ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludePatterns(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1537)
inline VARIANT_BOOL Excel::IStyle::GetIncludeProtection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeProtection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1538)
inline void Excel::IStyle::PutIncludeProtection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeProtection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1539)
inline long Excel::IStyle::GetIndentLevel ( ) {
    long _result;
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1540)
inline void Excel::IStyle::PutIndentLevel ( long RHS ) {
    HRESULT _hr = put_IndentLevel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1541)
inline Excel::InteriorPtr Excel::IStyle::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(1542)
inline VARIANT_BOOL Excel::IStyle::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1543)
inline void Excel::IStyle::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1544)
inline _variant_t Excel::IStyle::GetMergeCells ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MergeCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1545)
inline void Excel::IStyle::PutMergeCells ( const _variant_t & RHS ) {
    HRESULT _hr = put_MergeCells(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1546)
inline _bstr_t Excel::IStyle::GetName ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Name(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1547)
inline _bstr_t Excel::IStyle::GetNameLocal ( ) {
    BSTR _result;
    HRESULT _hr = get_NameLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1548)
inline _bstr_t Excel::IStyle::GetNumberFormat ( ) {
    BSTR _result;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1549)
inline void Excel::IStyle::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1550)
inline _bstr_t Excel::IStyle::GetNumberFormatLocal ( ) {
    BSTR _result;
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1551)
inline void Excel::IStyle::PutNumberFormatLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1552)
inline enum XlOrientation Excel::IStyle::GetOrientation ( ) {
    enum XlOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1553)
inline void Excel::IStyle::PutOrientation ( enum XlOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1554)
inline VARIANT_BOOL Excel::IStyle::GetShrinkToFit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShrinkToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1555)
inline void Excel::IStyle::PutShrinkToFit ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShrinkToFit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1556)
inline _bstr_t Excel::IStyle::GetValue ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Value(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1557)
inline enum XlVAlign Excel::IStyle::GetVerticalAlignment ( ) {
    enum XlVAlign _result;
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1558)
inline void Excel::IStyle::PutVerticalAlignment ( enum XlVAlign RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1559)
inline VARIANT_BOOL Excel::IStyle::GetWrapText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WrapText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1560)
inline void Excel::IStyle::PutWrapText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WrapText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1561)
inline _bstr_t Excel::IStyle::Get_Default ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get__Default(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1562)
inline long Excel::IStyle::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1563)
inline void Excel::IStyle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IStyles wrapper method implementations
//

#pragma implementation_key(1564)
inline Excel::_ApplicationPtr Excel::IStyles::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1565)
inline enum XlCreator Excel::IStyles::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1566)
inline IDispatchPtr Excel::IStyles::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1567)
inline Excel::StylePtr Excel::IStyles::Add ( _bstr_t Name, const _variant_t & BasedOn ) {
    struct Style * _result;
    HRESULT _hr = raw_Add(Name, BasedOn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

#pragma implementation_key(1568)
inline long Excel::IStyles::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1569)
inline Excel::StylePtr Excel::IStyles::GetItem ( const _variant_t & Index, long lcid ) {
    struct Style * _result;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

#pragma implementation_key(1570)
inline _variant_t Excel::IStyles::Merge ( const _variant_t & Workbook ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Merge(Workbook, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1571)
inline IUnknownPtr Excel::IStyles::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1572)
inline Excel::StylePtr Excel::IStyles::Get_Default ( const _variant_t & Index, long lcid ) {
    struct Style * _result;
    HRESULT _hr = get__Default(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

//
// interface IBorders wrapper method implementations
//

#pragma implementation_key(1573)
inline Excel::_ApplicationPtr Excel::IBorders::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1574)
inline enum XlCreator Excel::IBorders::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1575)
inline IDispatchPtr Excel::IBorders::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1576)
inline _variant_t Excel::IBorders::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1577)
inline void Excel::IBorders::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1578)
inline _variant_t Excel::IBorders::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1579)
inline void Excel::IBorders::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1580)
inline long Excel::IBorders::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1581)
inline Excel::BorderPtr Excel::IBorders::GetItem ( enum XlBordersIndex Index ) {
    struct Border * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(1582)
inline _variant_t Excel::IBorders::GetLineStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1583)
inline void Excel::IBorders::PutLineStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_LineStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1584)
inline IUnknownPtr Excel::IBorders::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1585)
inline _variant_t Excel::IBorders::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1586)
inline void Excel::IBorders::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1587)
inline _variant_t Excel::IBorders::GetWeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1588)
inline void Excel::IBorders::PutWeight ( const _variant_t & RHS ) {
    HRESULT _hr = put_Weight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1589)
inline Excel::BorderPtr Excel::IBorders::Get_Default ( enum XlBordersIndex Index ) {
    struct Border * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

//
// interface _Global wrapper method implementations
//

#pragma implementation_key(1590)
inline Excel::_ApplicationPtr Excel::_Global::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1591)
inline enum XlCreator Excel::_Global::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1592)
inline Excel::_ApplicationPtr Excel::_Global::GetParent ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1593)
inline Excel::RangePtr Excel::_Global::GetActiveCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_ActiveCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1594)
inline Excel::_ChartPtr Excel::_Global::GetActiveChart ( ) {
    struct _Chart * _result;
    HRESULT _hr = get_ActiveChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

#pragma implementation_key(1595)
inline Excel::DialogSheetPtr Excel::_Global::GetActiveDialog ( ) {
    struct DialogSheet * _result;
    HRESULT _hr = get_ActiveDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogSheetPtr(_result, false);
}

#pragma implementation_key(1596)
inline Excel::MenuBarPtr Excel::_Global::GetActiveMenuBar ( ) {
    struct MenuBar * _result;
    HRESULT _hr = get_ActiveMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarPtr(_result, false);
}

#pragma implementation_key(1597)
inline _bstr_t Excel::_Global::GetActivePrinter ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_ActivePrinter(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1598)
inline void Excel::_Global::PutActivePrinter ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_ActivePrinter(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1599)
inline IDispatchPtr Excel::_Global::GetActiveSheet ( ) {
    IDispatch * _result;
    HRESULT _hr = get_ActiveSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1600)
inline Excel::WindowPtr Excel::_Global::GetActiveWindow ( ) {
    struct Window * _result;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(1601)
inline Excel::_WorkbookPtr Excel::_Global::GetActiveWorkbook ( ) {
    struct _Workbook * _result;
    HRESULT _hr = get_ActiveWorkbook(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(1602)
inline Excel::AddInsPtr Excel::_Global::GetAddIns ( ) {
    struct AddIns * _result;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

#pragma implementation_key(1603)
inline Office::AssistantPtr Excel::_Global::GetAssistant ( ) {
    struct Office::Assistant * _result;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

#pragma implementation_key(1604)
inline HRESULT Excel::_Global::Calculate ( long lcid ) {
    HRESULT _hr = raw_Calculate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1605)
inline Excel::RangePtr Excel::_Global::GetCells ( ) {
    struct Range * _result;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1606)
inline Excel::SheetsPtr Excel::_Global::GetCharts ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Charts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1607)
inline Excel::RangePtr Excel::_Global::GetColumns ( ) {
    struct Range * _result;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1608)
inline Office::_CommandBarsPtr Excel::_Global::GetCommandBars ( ) {
    struct Office::_CommandBars * _result;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(1609)
inline long Excel::_Global::GetDDEAppReturnCode ( long lcid ) {
    long _result;
    HRESULT _hr = get_DDEAppReturnCode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1610)
inline HRESULT Excel::_Global::DDEExecute ( long Channel, _bstr_t String, long lcid ) {
    HRESULT _hr = raw_DDEExecute(Channel, String, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1611)
inline long Excel::_Global::DDEInitiate ( _bstr_t App, _bstr_t Topic, long lcid ) {
    long _result;
    HRESULT _hr = raw_DDEInitiate(App, Topic, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1612)
inline HRESULT Excel::_Global::DDEPoke ( long Channel, const _variant_t & Item, const _variant_t & Data, long lcid ) {
    HRESULT _hr = raw_DDEPoke(Channel, Item, Data, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1613)
inline _variant_t Excel::_Global::DDERequest ( long Channel, _bstr_t Item, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DDERequest(Channel, Item, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1614)
inline HRESULT Excel::_Global::DDETerminate ( long Channel, long lcid ) {
    HRESULT _hr = raw_DDETerminate(Channel, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1615)
inline Excel::SheetsPtr Excel::_Global::GetDialogSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_DialogSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1616)
inline _variant_t Excel::_Global::Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1617)
inline _variant_t Excel::_Global::_Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1618)
inline _variant_t Excel::_Global::ExecuteExcel4Macro ( _bstr_t String, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ExecuteExcel4Macro(String, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1619)
inline Excel::RangePtr Excel::_Global::Intersect ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    struct Range * _result;
    HRESULT _hr = raw_Intersect(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1620)
inline Excel::MenuBarsPtr Excel::_Global::GetMenuBars ( ) {
    struct MenuBars * _result;
    HRESULT _hr = get_MenuBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarsPtr(_result, false);
}

#pragma implementation_key(1621)
inline Excel::ModulesPtr Excel::_Global::GetModules ( ) {
    struct Modules * _result;
    HRESULT _hr = get_Modules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ModulesPtr(_result, false);
}

#pragma implementation_key(1622)
inline Excel::NamesPtr Excel::_Global::GetNames ( ) {
    struct Names * _result;
    HRESULT _hr = get_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamesPtr(_result, false);
}

#pragma implementation_key(1623)
inline Excel::RangePtr Excel::_Global::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 ) {
    struct Range * _result;
    HRESULT _hr = get_Range(Cell1, Cell2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1624)
inline Excel::RangePtr Excel::_Global::GetRows ( ) {
    struct Range * _result;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1625)
inline _variant_t Excel::_Global::Run ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1626)
inline _variant_t Excel::_Global::_Run2 ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Run2(Macro, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1627)
inline IDispatchPtr Excel::_Global::GetSelection ( long lcid ) {
    IDispatch * _result;
    HRESULT _hr = get_Selection(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1628)
inline HRESULT Excel::_Global::SendKeys ( const _variant_t & Keys, const _variant_t & Wait, long lcid ) {
    HRESULT _hr = raw_SendKeys(Keys, Wait, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1629)
inline Excel::SheetsPtr Excel::_Global::GetSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Sheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1630)
inline Excel::MenuPtr Excel::_Global::GetShortcutMenus ( long Index ) {
    struct Menu * _result;
    HRESULT _hr = get_ShortcutMenus(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

#pragma implementation_key(1631)
inline Excel::_WorkbookPtr Excel::_Global::GetThisWorkbook ( long lcid ) {
    struct _Workbook * _result;
    HRESULT _hr = get_ThisWorkbook(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(1632)
inline Excel::ToolbarsPtr Excel::_Global::GetToolbars ( ) {
    struct Toolbars * _result;
    HRESULT _hr = get_Toolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarsPtr(_result, false);
}

#pragma implementation_key(1633)
inline Excel::RangePtr Excel::_Global::Union ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid ) {
    struct Range * _result;
    HRESULT _hr = raw_Union(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1634)
inline Excel::WindowsPtr Excel::_Global::GetWindows ( ) {
    struct Windows * _result;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowsPtr(_result, false);
}

#pragma implementation_key(1635)
inline Excel::WorkbooksPtr Excel::_Global::GetWorkbooks ( ) {
    struct Workbooks * _result;
    HRESULT _hr = get_Workbooks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorkbooksPtr(_result, false);
}

#pragma implementation_key(1636)
inline Excel::WorksheetFunctionPtr Excel::_Global::GetWorksheetFunction ( ) {
    struct WorksheetFunction * _result;
    HRESULT _hr = get_WorksheetFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorksheetFunctionPtr(_result, false);
}

#pragma implementation_key(1637)
inline Excel::SheetsPtr Excel::_Global::GetWorksheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Worksheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1638)
inline Excel::SheetsPtr Excel::_Global::GetExcel4IntlMacroSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Excel4IntlMacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1639)
inline Excel::SheetsPtr Excel::_Global::GetExcel4MacroSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Excel4MacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

//
// interface IAddIn wrapper method implementations
//

#pragma implementation_key(1640)
inline Excel::_ApplicationPtr Excel::IAddIn::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1641)
inline enum XlCreator Excel::IAddIn::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1642)
inline IDispatchPtr Excel::IAddIn::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1643)
inline _bstr_t Excel::IAddIn::GetAuthor ( ) {
    BSTR _result;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1644)
inline _bstr_t Excel::IAddIn::GetComments ( ) {
    BSTR _result;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1645)
inline _bstr_t Excel::IAddIn::GetFullName ( ) {
    BSTR _result;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1646)
inline VARIANT_BOOL Excel::IAddIn::GetInstalled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Installed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1647)
inline void Excel::IAddIn::PutInstalled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Installed(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1648)
inline _bstr_t Excel::IAddIn::GetKeywords ( ) {
    BSTR _result;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1649)
inline _bstr_t Excel::IAddIn::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1650)
inline _bstr_t Excel::IAddIn::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1651)
inline _bstr_t Excel::IAddIn::GetSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1652)
inline _bstr_t Excel::IAddIn::GetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1653)
inline _bstr_t Excel::IAddIn::GetprogID ( ) {
    BSTR _result;
    HRESULT _hr = get_progID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1654)
inline _bstr_t Excel::IAddIn::GetCLSID ( ) {
    BSTR _result;
    HRESULT _hr = get_CLSID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAddIns wrapper method implementations
//

#pragma implementation_key(1655)
inline Excel::_ApplicationPtr Excel::IAddIns::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1656)
inline enum XlCreator Excel::IAddIns::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1657)
inline IDispatchPtr Excel::IAddIns::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1658)
inline Excel::AddInPtr Excel::IAddIns::Add ( _bstr_t Filename, const _variant_t & JOECopyFile ) {
    struct AddIn * _result;
    HRESULT _hr = raw_Add(Filename, JOECopyFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(1659)
inline long Excel::IAddIns::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1660)
inline Excel::AddInPtr Excel::IAddIns::GetItem ( const _variant_t & Index ) {
    struct AddIn * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(1661)
inline IUnknownPtr Excel::IAddIns::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1662)
inline Excel::AddInPtr Excel::IAddIns::Get_Default ( const _variant_t & Index ) {
    struct AddIn * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

//
// interface IToolbar wrapper method implementations
//

#pragma implementation_key(1663)
inline Excel::_ApplicationPtr Excel::IToolbar::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1664)
inline enum XlCreator Excel::IToolbar::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1665)
inline IDispatchPtr Excel::IToolbar::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1666)
inline VARIANT_BOOL Excel::IToolbar::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1667)
inline HRESULT Excel::IToolbar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1668)
inline long Excel::IToolbar::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1669)
inline void Excel::IToolbar::PutHeight ( long RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1670)
inline long Excel::IToolbar::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1671)
inline void Excel::IToolbar::PutLeft ( long RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1672)
inline _bstr_t Excel::IToolbar::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1673)
inline long Excel::IToolbar::GetPosition ( ) {
    long _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1674)
inline void Excel::IToolbar::PutPosition ( long RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1675)
inline enum XlToolbarProtection Excel::IToolbar::GetProtection ( ) {
    enum XlToolbarProtection _result;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1676)
inline void Excel::IToolbar::PutProtection ( enum XlToolbarProtection RHS ) {
    HRESULT _hr = put_Protection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline HRESULT Excel::IToolbar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1678)
inline Excel::ToolbarButtonsPtr Excel::IToolbar::GetToolbarButtons ( ) {
    struct ToolbarButtons * _result;
    HRESULT _hr = get_ToolbarButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarButtonsPtr(_result, false);
}

#pragma implementation_key(1679)
inline long Excel::IToolbar::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1680)
inline void Excel::IToolbar::PutTop ( long RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1681)
inline VARIANT_BOOL Excel::IToolbar::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1682)
inline void Excel::IToolbar::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1683)
inline long Excel::IToolbar::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1684)
inline void Excel::IToolbar::PutWidth ( long RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IToolbars wrapper method implementations
//

#pragma implementation_key(1685)
inline Excel::_ApplicationPtr Excel::IToolbars::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1686)
inline enum XlCreator Excel::IToolbars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1687)
inline IDispatchPtr Excel::IToolbars::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1688)
inline Excel::ToolbarPtr Excel::IToolbars::Add ( const _variant_t & Name ) {
    struct Toolbar * _result;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarPtr(_result, false);
}

#pragma implementation_key(1689)
inline long Excel::IToolbars::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1690)
inline Excel::ToolbarPtr Excel::IToolbars::Get_Default ( const _variant_t & Index ) {
    struct Toolbar * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarPtr(_result, false);
}

#pragma implementation_key(1691)
inline Excel::ToolbarPtr Excel::IToolbars::GetItem ( const _variant_t & Index ) {
    struct Toolbar * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarPtr(_result, false);
}

#pragma implementation_key(1692)
inline IUnknownPtr Excel::IToolbars::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IToolbarButton wrapper method implementations
//

#pragma implementation_key(1693)
inline Excel::_ApplicationPtr Excel::IToolbarButton::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1694)
inline enum XlCreator Excel::IToolbarButton::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1695)
inline IDispatchPtr Excel::IToolbarButton::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1696)
inline VARIANT_BOOL Excel::IToolbarButton::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1697)
inline VARIANT_BOOL Excel::IToolbarButton::GetBuiltInFace ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltInFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1698)
inline void Excel::IToolbarButton::PutBuiltInFace ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BuiltInFace(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1699)
inline HRESULT Excel::IToolbarButton::Copy ( struct Toolbar * Toolbar, long Before ) {
    HRESULT _hr = raw_Copy(Toolbar, Before);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1700)
inline HRESULT Excel::IToolbarButton::CopyFace ( ) {
    HRESULT _hr = raw_CopyFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1701)
inline HRESULT Excel::IToolbarButton::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1702)
inline HRESULT Excel::IToolbarButton::Edit ( ) {
    HRESULT _hr = raw_Edit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1703)
inline VARIANT_BOOL Excel::IToolbarButton::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1704)
inline void Excel::IToolbarButton::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1705)
inline long Excel::IToolbarButton::GetHelpContextID ( ) {
    long _result;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1706)
inline void Excel::IToolbarButton::PutHelpContextID ( long RHS ) {
    HRESULT _hr = put_HelpContextID(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1707)
inline _bstr_t Excel::IToolbarButton::GetHelpFile ( ) {
    BSTR _result;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1708)
inline void Excel::IToolbarButton::PutHelpFile ( _bstr_t RHS ) {
    HRESULT _hr = put_HelpFile(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1709)
inline long Excel::IToolbarButton::GetID ( ) {
    long _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1710)
inline VARIANT_BOOL Excel::IToolbarButton::GetIsGap ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1711)
inline HRESULT Excel::IToolbarButton::Move ( struct Toolbar * Toolbar, long Before ) {
    HRESULT _hr = raw_Move(Toolbar, Before);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1712)
inline _bstr_t Excel::IToolbarButton::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1713)
inline void Excel::IToolbarButton::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1714)
inline _bstr_t Excel::IToolbarButton::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1715)
inline void Excel::IToolbarButton::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1716)
inline HRESULT Excel::IToolbarButton::PasteFace ( ) {
    HRESULT _hr = raw_PasteFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1717)
inline VARIANT_BOOL Excel::IToolbarButton::GetPushed ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Pushed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1718)
inline void Excel::IToolbarButton::PutPushed ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Pushed(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1719)
inline HRESULT Excel::IToolbarButton::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1720)
inline _bstr_t Excel::IToolbarButton::GetStatusBar ( ) {
    BSTR _result;
    HRESULT _hr = get_StatusBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1721)
inline void Excel::IToolbarButton::PutStatusBar ( _bstr_t RHS ) {
    HRESULT _hr = put_StatusBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1722)
inline long Excel::IToolbarButton::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1723)
inline void Excel::IToolbarButton::PutWidth ( long RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IToolbarButtons wrapper method implementations
//

#pragma implementation_key(1724)
inline Excel::_ApplicationPtr Excel::IToolbarButtons::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1725)
inline enum XlCreator Excel::IToolbarButtons::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1726)
inline IDispatchPtr Excel::IToolbarButtons::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1727)
inline Excel::ToolbarButtonPtr Excel::IToolbarButtons::Add ( const _variant_t & Button, const _variant_t & Before, const _variant_t & OnAction, const _variant_t & Pushed, const _variant_t & Enabled, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID ) {
    struct ToolbarButton * _result;
    HRESULT _hr = raw_Add(Button, Before, OnAction, Pushed, Enabled, StatusBar, HelpFile, HelpContextID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarButtonPtr(_result, false);
}

#pragma implementation_key(1728)
inline long Excel::IToolbarButtons::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1729)
inline Excel::ToolbarButtonPtr Excel::IToolbarButtons::GetItem ( long Index ) {
    struct ToolbarButton * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarButtonPtr(_result, false);
}

#pragma implementation_key(1730)
inline IUnknownPtr Excel::IToolbarButtons::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1731)
inline Excel::ToolbarButtonPtr Excel::IToolbarButtons::Get_Default ( long Index ) {
    struct ToolbarButton * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ToolbarButtonPtr(_result, false);
}

//
// interface IAreas wrapper method implementations
//

#pragma implementation_key(1732)
inline Excel::_ApplicationPtr Excel::IAreas::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1733)
inline enum XlCreator Excel::IAreas::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1734)
inline IDispatchPtr Excel::IAreas::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1735)
inline long Excel::IAreas::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1736)
inline Excel::RangePtr Excel::IAreas::GetItem ( long Index ) {
    struct Range * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1737)
inline IUnknownPtr Excel::IAreas::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1738)
inline Excel::RangePtr Excel::IAreas::Get_Default ( long Index ) {
    struct Range * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

//
// interface IWorkbookEvents wrapper method implementations
//

#pragma implementation_key(1739)
inline HRESULT Excel::IWorkbookEvents::Open ( ) {
    HRESULT _hr = raw_Open();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1740)
inline HRESULT Excel::IWorkbookEvents::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1741)
inline HRESULT Excel::IWorkbookEvents::Deactivate ( ) {
    HRESULT _hr = raw_Deactivate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1742)
inline HRESULT Excel::IWorkbookEvents::BeforeClose ( VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeClose(Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1743)
inline HRESULT Excel::IWorkbookEvents::BeforeSave ( VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeSave(SaveAsUI, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1744)
inline HRESULT Excel::IWorkbookEvents::BeforePrint ( VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforePrint(Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1745)
inline HRESULT Excel::IWorkbookEvents::NewSheet ( IDispatch * Sh ) {
    HRESULT _hr = raw_NewSheet(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1746)
inline HRESULT Excel::IWorkbookEvents::AddinInstall ( ) {
    HRESULT _hr = raw_AddinInstall();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1747)
inline HRESULT Excel::IWorkbookEvents::AddinUninstall ( ) {
    HRESULT _hr = raw_AddinUninstall();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1748)
inline HRESULT Excel::IWorkbookEvents::WindowResize ( struct Window * Wn ) {
    HRESULT _hr = raw_WindowResize(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1749)
inline HRESULT Excel::IWorkbookEvents::WindowActivate ( struct Window * Wn ) {
    HRESULT _hr = raw_WindowActivate(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1750)
inline HRESULT Excel::IWorkbookEvents::WindowDeactivate ( struct Window * Wn ) {
    HRESULT _hr = raw_WindowDeactivate(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1751)
inline HRESULT Excel::IWorkbookEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target ) {
    HRESULT _hr = raw_SheetSelectionChange(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1752)
inline HRESULT Excel::IWorkbookEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_SheetBeforeDoubleClick(Sh, Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1753)
inline HRESULT Excel::IWorkbookEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_SheetBeforeRightClick(Sh, Target, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1754)
inline HRESULT Excel::IWorkbookEvents::SheetActivate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetActivate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1755)
inline HRESULT Excel::IWorkbookEvents::SheetDeactivate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetDeactivate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1756)
inline HRESULT Excel::IWorkbookEvents::SheetCalculate ( IDispatch * Sh ) {
    HRESULT _hr = raw_SheetCalculate(Sh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1757)
inline HRESULT Excel::IWorkbookEvents::SheetChange ( IDispatch * Sh, struct Range * Target ) {
    HRESULT _hr = raw_SheetChange(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1758)
inline HRESULT Excel::IWorkbookEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target ) {
    HRESULT _hr = raw_SheetFollowHyperlink(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1759)
inline HRESULT Excel::IWorkbookEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target ) {
    HRESULT _hr = raw_SheetPivotTableUpdate(Sh, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1760)
inline HRESULT Excel::IWorkbookEvents::PivotTableCloseConnection ( struct PivotTable * Target ) {
    HRESULT _hr = raw_PivotTableCloseConnection(Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1761)
inline HRESULT Excel::IWorkbookEvents::PivotTableOpenConnection ( struct PivotTable * Target ) {
    HRESULT _hr = raw_PivotTableOpenConnection(Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Workbook wrapper method implementations
//

#pragma implementation_key(1762)
inline Excel::_ApplicationPtr Excel::_Workbook::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1763)
inline enum XlCreator Excel::_Workbook::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1764)
inline IDispatchPtr Excel::_Workbook::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1765)
inline VARIANT_BOOL Excel::_Workbook::GetAcceptLabelsInFormulas ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AcceptLabelsInFormulas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1766)
inline void Excel::_Workbook::PutAcceptLabelsInFormulas ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AcceptLabelsInFormulas(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1767)
inline HRESULT Excel::_Workbook::Activate ( long lcid ) {
    HRESULT _hr = raw_Activate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1768)
inline Excel::_ChartPtr Excel::_Workbook::GetActiveChart ( ) {
    struct _Chart * _result;
    HRESULT _hr = get_ActiveChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

#pragma implementation_key(1769)
inline IDispatchPtr Excel::_Workbook::GetActiveSheet ( ) {
    IDispatch * _result;
    HRESULT _hr = get_ActiveSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1770)
inline _bstr_t Excel::_Workbook::GetAuthor ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Author(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1771)
inline void Excel::_Workbook::PutAuthor ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_Author(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1772)
inline long Excel::_Workbook::GetAutoUpdateFrequency ( ) {
    long _result;
    HRESULT _hr = get_AutoUpdateFrequency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1773)
inline void Excel::_Workbook::PutAutoUpdateFrequency ( long RHS ) {
    HRESULT _hr = put_AutoUpdateFrequency(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1774)
inline VARIANT_BOOL Excel::_Workbook::GetAutoUpdateSaveChanges ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoUpdateSaveChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1775)
inline void Excel::_Workbook::PutAutoUpdateSaveChanges ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoUpdateSaveChanges(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1776)
inline long Excel::_Workbook::GetChangeHistoryDuration ( ) {
    long _result;
    HRESULT _hr = get_ChangeHistoryDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1777)
inline void Excel::_Workbook::PutChangeHistoryDuration ( long RHS ) {
    HRESULT _hr = put_ChangeHistoryDuration(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1778)
inline IDispatchPtr Excel::_Workbook::GetBuiltinDocumentProperties ( ) {
    IDispatch * _result;
    HRESULT _hr = get_BuiltinDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1779)
inline HRESULT Excel::_Workbook::ChangeFileAccess ( enum XlFileAccess Mode, const _variant_t & WritePassword, const _variant_t & Notify, long lcid ) {
    HRESULT _hr = raw_ChangeFileAccess(Mode, WritePassword, Notify, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1780)
inline HRESULT Excel::_Workbook::ChangeLink ( _bstr_t Name, _bstr_t NewName, enum XlLinkType Type, long lcid ) {
    HRESULT _hr = raw_ChangeLink(Name, NewName, Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1781)
inline Excel::SheetsPtr Excel::_Workbook::GetCharts ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Charts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1782)
inline HRESULT Excel::_Workbook::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook, long lcid ) {
    HRESULT _hr = raw_Close(SaveChanges, Filename, RouteWorkbook, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1783)
inline _bstr_t Excel::_Workbook::GetCodeName ( ) {
    BSTR _result;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1784)
inline _bstr_t Excel::_Workbook::Get_CodeName ( ) {
    BSTR _result;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1785)
inline void Excel::_Workbook::Put_CodeName ( _bstr_t RHS ) {
    HRESULT _hr = put__CodeName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1786)
inline _variant_t Excel::_Workbook::GetColors ( const _variant_t & Index, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Colors(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1787)
inline void Excel::_Workbook::PutColors ( const _variant_t & Index, long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Colors(Index, lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1788)
inline Office::_CommandBarsPtr Excel::_Workbook::GetCommandBars ( ) {
    struct Office::_CommandBars * _result;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(1789)
inline _bstr_t Excel::_Workbook::GetComments ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Comments(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1790)
inline void Excel::_Workbook::PutComments ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_Comments(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1791)
inline enum XlSaveConflictResolution Excel::_Workbook::GetConflictResolution ( ) {
    enum XlSaveConflictResolution _result;
    HRESULT _hr = get_ConflictResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1792)
inline void Excel::_Workbook::PutConflictResolution ( enum XlSaveConflictResolution RHS ) {
    HRESULT _hr = put_ConflictResolution(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1793)
inline IDispatchPtr Excel::_Workbook::GetContainer ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Container(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1794)
inline VARIANT_BOOL Excel::_Workbook::GetCreateBackup ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CreateBackup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1795)
inline IDispatchPtr Excel::_Workbook::GetCustomDocumentProperties ( ) {
    IDispatch * _result;
    HRESULT _hr = get_CustomDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1796)
inline VARIANT_BOOL Excel::_Workbook::GetDate1904 ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Date1904(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1797)
inline void Excel::_Workbook::PutDate1904 ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Date1904(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1798)
inline HRESULT Excel::_Workbook::DeleteNumberFormat ( _bstr_t NumberFormat, long lcid ) {
    HRESULT _hr = raw_DeleteNumberFormat(NumberFormat, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1799)
inline Excel::SheetsPtr Excel::_Workbook::GetDialogSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_DialogSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1800)
inline enum XlDisplayDrawingObjects Excel::_Workbook::GetDisplayDrawingObjects ( long lcid ) {
    enum XlDisplayDrawingObjects _result;
    HRESULT _hr = get_DisplayDrawingObjects(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1801)
inline void Excel::_Workbook::PutDisplayDrawingObjects ( long lcid, enum XlDisplayDrawingObjects RHS ) {
    HRESULT _hr = put_DisplayDrawingObjects(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1802)
inline VARIANT_BOOL Excel::_Workbook::ExclusiveAccess ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_ExclusiveAccess(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1803)
inline enum XlFileFormat Excel::_Workbook::GetFileFormat ( long lcid ) {
    enum XlFileFormat _result;
    HRESULT _hr = get_FileFormat(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1804)
inline HRESULT Excel::_Workbook::ForwardMailer ( long lcid ) {
    HRESULT _hr = raw_ForwardMailer(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1805)
inline _bstr_t Excel::_Workbook::GetFullName ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_FullName(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1806)
inline VARIANT_BOOL Excel::_Workbook::GetHasMailer ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasMailer(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1807)
inline void Excel::_Workbook::PutHasMailer ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasMailer(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1808)
inline VARIANT_BOOL Excel::_Workbook::GetHasPassword ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasPassword(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1809)
inline VARIANT_BOOL Excel::_Workbook::GetHasRoutingSlip ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasRoutingSlip(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1810)
inline void Excel::_Workbook::PutHasRoutingSlip ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasRoutingSlip(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1811)
inline VARIANT_BOOL Excel::_Workbook::GetIsAddin ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsAddin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1812)
inline void Excel::_Workbook::PutIsAddin ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IsAddin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1813)
inline _bstr_t Excel::_Workbook::GetKeywords ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Keywords(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1814)
inline void Excel::_Workbook::PutKeywords ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_Keywords(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1815)
inline _variant_t Excel::_Workbook::LinkInfo ( _bstr_t Name, enum XlLinkInfo LinkInfo, const _variant_t & Type, const _variant_t & EditionRef, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LinkInfo(Name, LinkInfo, Type, EditionRef, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1816)
inline _variant_t Excel::_Workbook::LinkSources ( const _variant_t & Type, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LinkSources(Type, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1817)
inline Excel::MailerPtr Excel::_Workbook::GetMailer ( ) {
    struct Mailer * _result;
    HRESULT _hr = get_Mailer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailerPtr(_result, false);
}

#pragma implementation_key(1818)
inline HRESULT Excel::_Workbook::MergeWorkbook ( const _variant_t & Filename ) {
    HRESULT _hr = raw_MergeWorkbook(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1819)
inline Excel::SheetsPtr Excel::_Workbook::GetModules ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Modules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1820)
inline VARIANT_BOOL Excel::_Workbook::GetMultiUserEditing ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MultiUserEditing(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1821)
inline _bstr_t Excel::_Workbook::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1822)
inline Excel::NamesPtr Excel::_Workbook::GetNames ( ) {
    struct Names * _result;
    HRESULT _hr = get_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamesPtr(_result, false);
}

#pragma implementation_key(1823)
inline Excel::WindowPtr Excel::_Workbook::NewWindow ( long lcid ) {
    struct Window * _result;
    HRESULT _hr = raw_NewWindow(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(1824)
inline _bstr_t Excel::_Workbook::GetOnSave ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSave(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1825)
inline void Excel::_Workbook::PutOnSave ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSave(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1826)
inline _bstr_t Excel::_Workbook::GetOnSheetActivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1827)
inline void Excel::_Workbook::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1828)
inline _bstr_t Excel::_Workbook::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1829)
inline void Excel::_Workbook::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1830)
inline HRESULT Excel::_Workbook::OpenLinks ( _bstr_t Name, const _variant_t & ReadOnly, const _variant_t & Type, long lcid ) {
    HRESULT _hr = raw_OpenLinks(Name, ReadOnly, Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1831)
inline _bstr_t Excel::_Workbook::GetPath ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Path(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1832)
inline VARIANT_BOOL Excel::_Workbook::GetPersonalViewListSettings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PersonalViewListSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1833)
inline void Excel::_Workbook::PutPersonalViewListSettings ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PersonalViewListSettings(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1834)
inline VARIANT_BOOL Excel::_Workbook::GetPersonalViewPrintSettings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PersonalViewPrintSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1835)
inline void Excel::_Workbook::PutPersonalViewPrintSettings ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PersonalViewPrintSettings(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1836)
inline Excel::PivotCachesPtr Excel::_Workbook::PivotCaches ( ) {
    struct PivotCaches * _result;
    HRESULT _hr = raw_PivotCaches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachesPtr(_result, false);
}

#pragma implementation_key(1837)
inline HRESULT Excel::_Workbook::Post ( const _variant_t & DestName, long lcid ) {
    HRESULT _hr = raw_Post(DestName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1838)
inline VARIANT_BOOL Excel::_Workbook::GetPrecisionAsDisplayed ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrecisionAsDisplayed(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1839)
inline void Excel::_Workbook::PutPrecisionAsDisplayed ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrecisionAsDisplayed(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1840)
inline HRESULT Excel::_Workbook::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1841)
inline HRESULT Excel::_Workbook::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1842)
inline HRESULT Excel::_Workbook::_Protect ( const _variant_t & Password, const _variant_t & Structure, const _variant_t & Windows ) {
    HRESULT _hr = raw__Protect(Password, Structure, Windows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1843)
inline HRESULT Excel::_Workbook::ProtectSharing ( const _variant_t & Filename, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & SharingPassword ) {
    HRESULT _hr = raw_ProtectSharing(Filename, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, SharingPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1844)
inline VARIANT_BOOL Excel::_Workbook::GetProtectStructure ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectStructure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1845)
inline VARIANT_BOOL Excel::_Workbook::GetProtectWindows ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1846)
inline VARIANT_BOOL Excel::_Workbook::GetReadOnly ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReadOnly(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1847)
inline VARIANT_BOOL Excel::_Workbook::Get_ReadOnlyRecommended ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get__ReadOnlyRecommended(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1848)
inline HRESULT Excel::_Workbook::RefreshAll ( ) {
    HRESULT _hr = raw_RefreshAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1849)
inline HRESULT Excel::_Workbook::Reply ( long lcid ) {
    HRESULT _hr = raw_Reply(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1850)
inline HRESULT Excel::_Workbook::ReplyAll ( long lcid ) {
    HRESULT _hr = raw_ReplyAll(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1851)
inline HRESULT Excel::_Workbook::RemoveUser ( long Index ) {
    HRESULT _hr = raw_RemoveUser(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1852)
inline long Excel::_Workbook::GetRevisionNumber ( long lcid ) {
    long _result;
    HRESULT _hr = get_RevisionNumber(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1853)
inline HRESULT Excel::_Workbook::Route ( long lcid ) {
    HRESULT _hr = raw_Route(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1854)
inline VARIANT_BOOL Excel::_Workbook::GetRouted ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Routed(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1855)
inline Excel::RoutingSlipPtr Excel::_Workbook::GetRoutingSlip ( ) {
    struct RoutingSlip * _result;
    HRESULT _hr = get_RoutingSlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RoutingSlipPtr(_result, false);
}

#pragma implementation_key(1856)
inline HRESULT Excel::_Workbook::RunAutoMacros ( enum XlRunAutoMacro Which, long lcid ) {
    HRESULT _hr = raw_RunAutoMacros(Which, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1857)
inline HRESULT Excel::_Workbook::Save ( long lcid ) {
    HRESULT _hr = raw_Save(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1858)
inline HRESULT Excel::_Workbook::_SaveAs ( const _variant_t & Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, enum XlSaveAsAccessMode AccessMode, const _variant_t & ConflictResolution, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw__SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1859)
inline HRESULT Excel::_Workbook::SaveCopyAs ( const _variant_t & Filename, long lcid ) {
    HRESULT _hr = raw_SaveCopyAs(Filename, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1860)
inline VARIANT_BOOL Excel::_Workbook::GetSaved ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Saved(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1861)
inline void Excel::_Workbook::PutSaved ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Saved(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1862)
inline VARIANT_BOOL Excel::_Workbook::GetSaveLinkValues ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SaveLinkValues(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1863)
inline void Excel::_Workbook::PutSaveLinkValues ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SaveLinkValues(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1864)
inline HRESULT Excel::_Workbook::SendMail ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ReturnReceipt, long lcid ) {
    HRESULT _hr = raw_SendMail(Recipients, Subject, ReturnReceipt, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1865)
inline HRESULT Excel::_Workbook::SendMailer ( const _variant_t & FileFormat, enum XlPriority Priority, long lcid ) {
    HRESULT _hr = raw_SendMailer(FileFormat, Priority, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1866)
inline HRESULT Excel::_Workbook::SetLinkOnData ( _bstr_t Name, const _variant_t & Procedure, long lcid ) {
    HRESULT _hr = raw_SetLinkOnData(Name, Procedure, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1867)
inline Excel::SheetsPtr Excel::_Workbook::GetSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Sheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1868)
inline VARIANT_BOOL Excel::_Workbook::GetShowConflictHistory ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowConflictHistory(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1869)
inline void Excel::_Workbook::PutShowConflictHistory ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowConflictHistory(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1870)
inline Excel::StylesPtr Excel::_Workbook::GetStyles ( ) {
    struct Styles * _result;
    HRESULT _hr = get_Styles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylesPtr(_result, false);
}

#pragma implementation_key(1871)
inline _bstr_t Excel::_Workbook::GetSubject ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Subject(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1872)
inline void Excel::_Workbook::PutSubject ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_Subject(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1873)
inline _bstr_t Excel::_Workbook::GetTitle ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_Title(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1874)
inline void Excel::_Workbook::PutTitle ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_Title(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1875)
inline HRESULT Excel::_Workbook::Unprotect ( const _variant_t & Password, long lcid ) {
    HRESULT _hr = raw_Unprotect(Password, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1876)
inline HRESULT Excel::_Workbook::UnprotectSharing ( const _variant_t & SharingPassword ) {
    HRESULT _hr = raw_UnprotectSharing(SharingPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1877)
inline HRESULT Excel::_Workbook::UpdateFromFile ( long lcid ) {
    HRESULT _hr = raw_UpdateFromFile(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1878)
inline HRESULT Excel::_Workbook::UpdateLink ( const _variant_t & Name, const _variant_t & Type, long lcid ) {
    HRESULT _hr = raw_UpdateLink(Name, Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1879)
inline VARIANT_BOOL Excel::_Workbook::GetUpdateRemoteReferences ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UpdateRemoteReferences(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1880)
inline void Excel::_Workbook::PutUpdateRemoteReferences ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UpdateRemoteReferences(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1881)
inline VARIANT_BOOL Excel::_Workbook::GetUserControl ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UserControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1882)
inline void Excel::_Workbook::PutUserControl ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UserControl(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1883)
inline _variant_t Excel::_Workbook::GetUserStatus ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_UserStatus(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1884)
inline Excel::CustomViewsPtr Excel::_Workbook::GetCustomViews ( ) {
    struct CustomViews * _result;
    HRESULT _hr = get_CustomViews(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomViewsPtr(_result, false);
}

#pragma implementation_key(1885)
inline Excel::WindowsPtr Excel::_Workbook::GetWindows ( ) {
    struct Windows * _result;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowsPtr(_result, false);
}

#pragma implementation_key(1886)
inline Excel::SheetsPtr Excel::_Workbook::GetWorksheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Worksheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1887)
inline VARIANT_BOOL Excel::_Workbook::GetWriteReserved ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WriteReserved(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1888)
inline _bstr_t Excel::_Workbook::GetWriteReservedBy ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_WriteReservedBy(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1889)
inline Excel::SheetsPtr Excel::_Workbook::GetExcel4IntlMacroSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Excel4IntlMacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1890)
inline Excel::SheetsPtr Excel::_Workbook::GetExcel4MacroSheets ( ) {
    struct Sheets * _result;
    HRESULT _hr = get_Excel4MacroSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SheetsPtr(_result, false);
}

#pragma implementation_key(1891)
inline VARIANT_BOOL Excel::_Workbook::GetTemplateRemoveExtData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TemplateRemoveExtData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1892)
inline void Excel::_Workbook::PutTemplateRemoveExtData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TemplateRemoveExtData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1893)
inline HRESULT Excel::_Workbook::HighlightChangesOptions ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where ) {
    HRESULT _hr = raw_HighlightChangesOptions(When, Who, Where);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1894)
inline VARIANT_BOOL Excel::_Workbook::GetHighlightChangesOnScreen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HighlightChangesOnScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1895)
inline void Excel::_Workbook::PutHighlightChangesOnScreen ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HighlightChangesOnScreen(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1896)
inline VARIANT_BOOL Excel::_Workbook::GetKeepChangeHistory ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepChangeHistory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1897)
inline void Excel::_Workbook::PutKeepChangeHistory ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_KeepChangeHistory(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1898)
inline VARIANT_BOOL Excel::_Workbook::GetListChangesOnNewSheet ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ListChangesOnNewSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1899)
inline void Excel::_Workbook::PutListChangesOnNewSheet ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ListChangesOnNewSheet(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1900)
inline HRESULT Excel::_Workbook::PurgeChangeHistoryNow ( long Days, const _variant_t & SharingPassword ) {
    HRESULT _hr = raw_PurgeChangeHistoryNow(Days, SharingPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1901)
inline HRESULT Excel::_Workbook::AcceptAllChanges ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where ) {
    HRESULT _hr = raw_AcceptAllChanges(When, Who, Where);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1902)
inline HRESULT Excel::_Workbook::RejectAllChanges ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where ) {
    HRESULT _hr = raw_RejectAllChanges(When, Who, Where);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1903)
inline HRESULT Excel::_Workbook::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection, long lcid ) {
    HRESULT _hr = raw_PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1904)
inline HRESULT Excel::_Workbook::ResetColors ( ) {
    HRESULT _hr = raw_ResetColors();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1905)
inline VBIDE::_VBProjectPtr Excel::_Workbook::GetVBProject ( ) {
    struct VBIDE::_VBProject * _result;
    HRESULT _hr = get_VBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::_VBProjectPtr(_result, false);
}

#pragma implementation_key(1906)
inline HRESULT Excel::_Workbook::FollowHyperlink ( _bstr_t Address, const _variant_t & SubAddress, const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo ) {
    HRESULT _hr = raw_FollowHyperlink(Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1907)
inline HRESULT Excel::_Workbook::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1908)
inline VARIANT_BOOL Excel::_Workbook::GetIsInplace ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsInplace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1909)
inline HRESULT Excel::_Workbook::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1910)
inline HRESULT Excel::_Workbook::WebPagePreview ( ) {
    HRESULT _hr = raw_WebPagePreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1911)
inline Excel::PublishObjectsPtr Excel::_Workbook::GetPublishObjects ( ) {
    struct PublishObjects * _result;
    HRESULT _hr = get_PublishObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectsPtr(_result, false);
}

#pragma implementation_key(1912)
inline Excel::WebOptionsPtr Excel::_Workbook::GetWebOptions ( ) {
    struct WebOptions * _result;
    HRESULT _hr = get_WebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebOptionsPtr(_result, false);
}

#pragma implementation_key(1913)
inline HRESULT Excel::_Workbook::ReloadAs ( enum Office::MsoEncoding Encoding ) {
    HRESULT _hr = raw_ReloadAs(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1914)
inline Office::HTMLProjectPtr Excel::_Workbook::GetHTMLProject ( ) {
    struct Office::HTMLProject * _result;
    HRESULT _hr = get_HTMLProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::HTMLProjectPtr(_result, false);
}

#pragma implementation_key(1915)
inline VARIANT_BOOL Excel::_Workbook::GetEnvelopeVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnvelopeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1916)
inline void Excel::_Workbook::PutEnvelopeVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnvelopeVisible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1917)
inline long Excel::_Workbook::GetCalculationVersion ( ) {
    long _result;
    HRESULT _hr = get_CalculationVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1918)
inline HRESULT Excel::_Workbook::Dummy17 ( long calcid ) {
    HRESULT _hr = raw_Dummy17(calcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1919)
inline HRESULT Excel::_Workbook::sblt ( _bstr_t s ) {
    HRESULT _hr = raw_sblt(s);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1920)
inline VARIANT_BOOL Excel::_Workbook::GetVBASigned ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_VBASigned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1921)
inline VARIANT_BOOL Excel::_Workbook::GetShowPivotTableFieldList ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowPivotTableFieldList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1922)
inline void Excel::_Workbook::PutShowPivotTableFieldList ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPivotTableFieldList(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1923)
inline enum XlUpdateLinks Excel::_Workbook::GetUpdateLinks ( ) {
    enum XlUpdateLinks _result;
    HRESULT _hr = get_UpdateLinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1924)
inline void Excel::_Workbook::PutUpdateLinks ( enum XlUpdateLinks RHS ) {
    HRESULT _hr = put_UpdateLinks(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1925)
inline HRESULT Excel::_Workbook::BreakLink ( _bstr_t Name, enum XlLinkType Type ) {
    HRESULT _hr = raw_BreakLink(Name, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1926)
inline HRESULT Excel::_Workbook::Dummy16 ( ) {
    HRESULT _hr = raw_Dummy16();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1927)
inline HRESULT Excel::_Workbook::SaveAs ( const _variant_t & Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, enum XlSaveAsAccessMode AccessMode, const _variant_t & ConflictResolution, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local, long lcid ) {
    HRESULT _hr = raw_SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AccessMode, ConflictResolution, AddToMru, TextCodepage, TextVisualLayout, Local, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1928)
inline VARIANT_BOOL Excel::_Workbook::GetEnableAutoRecover ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableAutoRecover(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1929)
inline void Excel::_Workbook::PutEnableAutoRecover ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableAutoRecover(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1930)
inline VARIANT_BOOL Excel::_Workbook::GetRemovePersonalInformation ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RemovePersonalInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1931)
inline void Excel::_Workbook::PutRemovePersonalInformation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RemovePersonalInformation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1932)
inline _bstr_t Excel::_Workbook::GetFullNameURLEncoded ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_FullNameURLEncoded(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1933)
inline HRESULT Excel::_Workbook::CheckIn ( const _variant_t & SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic ) {
    HRESULT _hr = raw_CheckIn(SaveChanges, Comments, MakePublic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1934)
inline VARIANT_BOOL Excel::_Workbook::CanCheckIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_CanCheckIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1935)
inline HRESULT Excel::_Workbook::SendForReview ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ShowMessage, const _variant_t & IncludeAttachment ) {
    HRESULT _hr = raw_SendForReview(Recipients, Subject, ShowMessage, IncludeAttachment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1936)
inline HRESULT Excel::_Workbook::ReplyWithChanges ( const _variant_t & ShowMessage ) {
    HRESULT _hr = raw_ReplyWithChanges(ShowMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1937)
inline HRESULT Excel::_Workbook::EndReview ( ) {
    HRESULT _hr = raw_EndReview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1938)
inline _bstr_t Excel::_Workbook::GetPassword ( ) {
    BSTR _result;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1939)
inline void Excel::_Workbook::PutPassword ( _bstr_t RHS ) {
    HRESULT _hr = put_Password(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1940)
inline _bstr_t Excel::_Workbook::GetWritePassword ( ) {
    BSTR _result;
    HRESULT _hr = get_WritePassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1941)
inline void Excel::_Workbook::PutWritePassword ( _bstr_t RHS ) {
    HRESULT _hr = put_WritePassword(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1942)
inline _bstr_t Excel::_Workbook::GetPasswordEncryptionProvider ( ) {
    BSTR _result;
    HRESULT _hr = get_PasswordEncryptionProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1943)
inline _bstr_t Excel::_Workbook::GetPasswordEncryptionAlgorithm ( ) {
    BSTR _result;
    HRESULT _hr = get_PasswordEncryptionAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1944)
inline long Excel::_Workbook::GetPasswordEncryptionKeyLength ( ) {
    long _result;
    HRESULT _hr = get_PasswordEncryptionKeyLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1945)
inline HRESULT Excel::_Workbook::SetPasswordEncryptionOptions ( const _variant_t & PasswordEncryptionProvider, const _variant_t & PasswordEncryptionAlgorithm, const _variant_t & PasswordEncryptionKeyLength, const _variant_t & PasswordEncryptionFileProperties ) {
    HRESULT _hr = raw_SetPasswordEncryptionOptions(PasswordEncryptionProvider, PasswordEncryptionAlgorithm, PasswordEncryptionKeyLength, PasswordEncryptionFileProperties);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1946)
inline VARIANT_BOOL Excel::_Workbook::GetPasswordEncryptionFileProperties ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasswordEncryptionFileProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1947)
inline VARIANT_BOOL Excel::_Workbook::GetReadOnlyRecommended ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReadOnlyRecommended(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1948)
inline void Excel::_Workbook::PutReadOnlyRecommended ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ReadOnlyRecommended(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1949)
inline HRESULT Excel::_Workbook::Protect ( const _variant_t & Password, const _variant_t & Structure, const _variant_t & Windows ) {
    HRESULT _hr = raw_Protect(Password, Structure, Windows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1950)
inline Excel::SmartTagOptionsPtr Excel::_Workbook::GetSmartTagOptions ( ) {
    struct SmartTagOptions * _result;
    HRESULT _hr = get_SmartTagOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagOptionsPtr(_result, false);
}

#pragma implementation_key(1951)
inline HRESULT Excel::_Workbook::RecheckSmartTags ( ) {
    HRESULT _hr = raw_RecheckSmartTags();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Workbooks wrapper method implementations
//

#pragma implementation_key(1952)
inline Excel::_ApplicationPtr Excel::Workbooks::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1953)
inline enum XlCreator Excel::Workbooks::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1954)
inline IDispatchPtr Excel::Workbooks::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1955)
inline Excel::_WorkbookPtr Excel::Workbooks::Add ( const _variant_t & Template, long lcid ) {
    struct _Workbook * _result;
    HRESULT _hr = raw_Add(Template, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(1956)
inline HRESULT Excel::Workbooks::Close ( long lcid ) {
    HRESULT _hr = raw_Close(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1957)
inline long Excel::Workbooks::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1958)
inline Excel::_WorkbookPtr Excel::Workbooks::GetItem ( const _variant_t & Index ) {
    struct _Workbook * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(1959)
inline IUnknownPtr Excel::Workbooks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1960)
inline Excel::_WorkbookPtr Excel::Workbooks::_Open ( _bstr_t Filename, const _variant_t & UpdateLinks, const _variant_t & ReadOnly, const _variant_t & Format, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & IgnoreReadOnlyRecommended, const _variant_t & Origin, const _variant_t & Delimiter, const _variant_t & Editable, const _variant_t & Notify, const _variant_t & Converter, const _variant_t & AddToMru, long lcid ) {
    struct _Workbook * _result;
    HRESULT _hr = raw__Open(Filename, UpdateLinks, ReadOnly, Format, Password, WriteResPassword, IgnoreReadOnlyRecommended, Origin, Delimiter, Editable, Notify, Converter, AddToMru, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(1961)
inline HRESULT Excel::Workbooks::__OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw___OpenText(Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1962)
inline Excel::_WorkbookPtr Excel::Workbooks::Get_Default ( const _variant_t & Index ) {
    struct _Workbook * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(1963)
inline HRESULT Excel::Workbooks::_OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, long lcid ) {
    HRESULT _hr = raw__OpenText(Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout, DecimalSeparator, ThousandsSeparator, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1964)
inline Excel::_WorkbookPtr Excel::Workbooks::Open ( _bstr_t Filename, const _variant_t & UpdateLinks, const _variant_t & ReadOnly, const _variant_t & Format, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & IgnoreReadOnlyRecommended, const _variant_t & Origin, const _variant_t & Delimiter, const _variant_t & Editable, const _variant_t & Notify, const _variant_t & Converter, const _variant_t & AddToMru, const _variant_t & Local, const _variant_t & CorruptLoad, long lcid ) {
    struct _Workbook * _result;
    HRESULT _hr = raw_Open(Filename, UpdateLinks, ReadOnly, Format, Password, WriteResPassword, IgnoreReadOnlyRecommended, Origin, Delimiter, Editable, Notify, Converter, AddToMru, Local, CorruptLoad, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(1965)
inline HRESULT Excel::Workbooks::OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, const _variant_t & TrailingMinusNumbers, const _variant_t & Local, long lcid ) {
    HRESULT _hr = raw_OpenText(Filename, Origin, StartRow, DataType, TextQualifier, ConsecutiveDelimiter, Tab, Semicolon, Comma, Space, Other, OtherChar, FieldInfo, TextVisualLayout, DecimalSeparator, ThousandsSeparator, TrailingMinusNumbers, Local, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1966)
inline Excel::_WorkbookPtr Excel::Workbooks::OpenDatabase ( _bstr_t Filename, const _variant_t & CommandText, const _variant_t & CommandType, const _variant_t & BackgroundQuery, const _variant_t & ImportDataAs ) {
    struct _Workbook * _result;
    HRESULT _hr = raw_OpenDatabase(Filename, CommandText, CommandType, BackgroundQuery, ImportDataAs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(1967)
inline HRESULT Excel::Workbooks::CheckOut ( _bstr_t Filename ) {
    HRESULT _hr = raw_CheckOut(Filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1968)
inline VARIANT_BOOL Excel::Workbooks::CanCheckOut ( _bstr_t Filename ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_CanCheckOut(Filename, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1969)
inline Excel::_WorkbookPtr Excel::Workbooks::OpenXML ( _bstr_t Filename, const _variant_t & Stylesheets ) {
    struct _Workbook * _result;
    HRESULT _hr = raw_OpenXML(Filename, Stylesheets, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _WorkbookPtr(_result, false);
}

//
// interface IMenuBars wrapper method implementations
//

#pragma implementation_key(1970)
inline Excel::_ApplicationPtr Excel::IMenuBars::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1971)
inline enum XlCreator Excel::IMenuBars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1972)
inline IDispatchPtr Excel::IMenuBars::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1973)
inline Excel::MenuBarPtr Excel::IMenuBars::Add ( const _variant_t & Name ) {
    struct MenuBar * _result;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarPtr(_result, false);
}

#pragma implementation_key(1974)
inline long Excel::IMenuBars::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1975)
inline Excel::MenuBarPtr Excel::IMenuBars::Get_Default ( const _variant_t & Index ) {
    struct MenuBar * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarPtr(_result, false);
}

#pragma implementation_key(1976)
inline Excel::MenuBarPtr Excel::IMenuBars::GetItem ( const _variant_t & Index ) {
    struct MenuBar * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuBarPtr(_result, false);
}

#pragma implementation_key(1977)
inline IUnknownPtr Excel::IMenuBars::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMenuBar wrapper method implementations
//

#pragma implementation_key(1978)
inline Excel::_ApplicationPtr Excel::IMenuBar::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1979)
inline enum XlCreator Excel::IMenuBar::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1980)
inline IDispatchPtr Excel::IMenuBar::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1981)
inline HRESULT Excel::IMenuBar::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1982)
inline VARIANT_BOOL Excel::IMenuBar::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1983)
inline _bstr_t Excel::IMenuBar::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1984)
inline void Excel::IMenuBar::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1985)
inline HRESULT Excel::IMenuBar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1986)
inline long Excel::IMenuBar::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1987)
inline Excel::MenusPtr Excel::IMenuBar::GetMenus ( ) {
    struct Menus * _result;
    HRESULT _hr = get_Menus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenusPtr(_result, false);
}

#pragma implementation_key(1988)
inline HRESULT Excel::IMenuBar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMenus wrapper method implementations
//

#pragma implementation_key(1989)
inline Excel::_ApplicationPtr Excel::IMenus::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1990)
inline enum XlCreator Excel::IMenus::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1991)
inline IDispatchPtr Excel::IMenus::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1992)
inline Excel::MenuPtr Excel::IMenus::Add ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore ) {
    struct Menu * _result;
    HRESULT _hr = raw_Add(Caption, Before, Restore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

#pragma implementation_key(1993)
inline long Excel::IMenus::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1994)
inline Excel::MenuPtr Excel::IMenus::Get_Default ( const _variant_t & Index ) {
    struct Menu * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

#pragma implementation_key(1995)
inline Excel::MenuPtr Excel::IMenus::GetItem ( const _variant_t & Index ) {
    struct Menu * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

#pragma implementation_key(1996)
inline IUnknownPtr Excel::IMenus::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMenu wrapper method implementations
//

#pragma implementation_key(1997)
inline Excel::_ApplicationPtr Excel::IMenu::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1998)
inline enum XlCreator Excel::IMenu::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1999)
inline IDispatchPtr Excel::IMenu::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2000)
inline _bstr_t Excel::IMenu::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2001)
inline void Excel::IMenu::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2002)
inline HRESULT Excel::IMenu::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2003)
inline VARIANT_BOOL Excel::IMenu::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2004)
inline void Excel::IMenu::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2005)
inline long Excel::IMenu::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2006)
inline Excel::MenuItemsPtr Excel::IMenu::GetMenuItems ( ) {
    struct MenuItems * _result;
    HRESULT _hr = get_MenuItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuItemsPtr(_result, false);
}

//
// interface IMenuItems wrapper method implementations
//

#pragma implementation_key(2007)
inline Excel::_ApplicationPtr Excel::IMenuItems::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2008)
inline enum XlCreator Excel::IMenuItems::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2009)
inline IDispatchPtr Excel::IMenuItems::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2010)
inline Excel::MenuItemPtr Excel::IMenuItems::Add ( _bstr_t Caption, const _variant_t & OnAction, const _variant_t & ShortcutKey, const _variant_t & Before, const _variant_t & Restore, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID ) {
    struct MenuItem * _result;
    HRESULT _hr = raw_Add(Caption, OnAction, ShortcutKey, Before, Restore, StatusBar, HelpFile, HelpContextID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuItemPtr(_result, false);
}

#pragma implementation_key(2011)
inline Excel::MenuPtr Excel::IMenuItems::AddMenu ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore ) {
    struct Menu * _result;
    HRESULT _hr = raw_AddMenu(Caption, Before, Restore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MenuPtr(_result, false);
}

#pragma implementation_key(2012)
inline long Excel::IMenuItems::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2013)
inline IDispatchPtr Excel::IMenuItems::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2014)
inline IDispatchPtr Excel::IMenuItems::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2015)
inline IUnknownPtr Excel::IMenuItems::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMenuItem wrapper method implementations
//

#pragma implementation_key(2016)
inline Excel::_ApplicationPtr Excel::IMenuItem::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2017)
inline enum XlCreator Excel::IMenuItem::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2018)
inline IDispatchPtr Excel::IMenuItem::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2019)
inline _bstr_t Excel::IMenuItem::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2020)
inline void Excel::IMenuItem::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2021)
inline VARIANT_BOOL Excel::IMenuItem::GetChecked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Checked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2022)
inline void Excel::IMenuItem::PutChecked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Checked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2023)
inline HRESULT Excel::IMenuItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2024)
inline VARIANT_BOOL Excel::IMenuItem::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2025)
inline void Excel::IMenuItem::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2026)
inline long Excel::IMenuItem::GetHelpContextID ( ) {
    long _result;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2027)
inline void Excel::IMenuItem::PutHelpContextID ( long RHS ) {
    HRESULT _hr = put_HelpContextID(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2028)
inline _bstr_t Excel::IMenuItem::GetHelpFile ( ) {
    BSTR _result;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2029)
inline void Excel::IMenuItem::PutHelpFile ( _bstr_t RHS ) {
    HRESULT _hr = put_HelpFile(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2030)
inline long Excel::IMenuItem::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2031)
inline _bstr_t Excel::IMenuItem::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2032)
inline void Excel::IMenuItem::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2033)
inline _bstr_t Excel::IMenuItem::GetStatusBar ( ) {
    BSTR _result;
    HRESULT _hr = get_StatusBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2034)
inline void Excel::IMenuItem::PutStatusBar ( _bstr_t RHS ) {
    HRESULT _hr = put_StatusBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICharts wrapper method implementations
//

#pragma implementation_key(2035)
inline Excel::_ApplicationPtr Excel::ICharts::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2036)
inline enum XlCreator Excel::ICharts::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2037)
inline IDispatchPtr Excel::ICharts::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2038)
inline Excel::_ChartPtr Excel::ICharts::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct _Chart * _result;
    HRESULT _hr = raw_Add(Before, After, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

#pragma implementation_key(2039)
inline HRESULT Excel::ICharts::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2040)
inline long Excel::ICharts::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2041)
inline HRESULT Excel::ICharts::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2042)
inline IDispatchPtr Excel::ICharts::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2043)
inline HRESULT Excel::ICharts::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2044)
inline IUnknownPtr Excel::ICharts::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2045)
inline HRESULT Excel::ICharts::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2046)
inline HRESULT Excel::ICharts::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2047)
inline HRESULT Excel::ICharts::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2048)
inline Excel::HPageBreaksPtr Excel::ICharts::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(2049)
inline Excel::VPageBreaksPtr Excel::ICharts::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(2050)
inline _variant_t Excel::ICharts::GetVisible ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2051)
inline void Excel::ICharts::PutVisible ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2052)
inline IDispatchPtr Excel::ICharts::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2053)
inline HRESULT Excel::ICharts::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDrawingObjects wrapper method implementations
//

#pragma implementation_key(2054)
inline Excel::_ApplicationPtr Excel::IDrawingObjects::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2055)
inline enum XlCreator Excel::IDrawingObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2056)
inline IDispatchPtr Excel::IDrawingObjects::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2057)
inline _variant_t Excel::IDrawingObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2058)
inline _variant_t Excel::IDrawingObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2059)
inline _variant_t Excel::IDrawingObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2060)
inline _variant_t Excel::IDrawingObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2061)
inline _variant_t Excel::IDrawingObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2062)
inline IDispatchPtr Excel::IDrawingObjects::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2063)
inline VARIANT_BOOL Excel::IDrawingObjects::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2064)
inline void Excel::IDrawingObjects::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2065)
inline double Excel::IDrawingObjects::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2066)
inline void Excel::IDrawingObjects::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2067)
inline double Excel::IDrawingObjects::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2068)
inline void Excel::IDrawingObjects::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2069)
inline VARIANT_BOOL Excel::IDrawingObjects::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2070)
inline void Excel::IDrawingObjects::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2071)
inline _bstr_t Excel::IDrawingObjects::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2072)
inline void Excel::IDrawingObjects::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2073)
inline _variant_t Excel::IDrawingObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2074)
inline void Excel::IDrawingObjects::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2075)
inline VARIANT_BOOL Excel::IDrawingObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2076)
inline void Excel::IDrawingObjects::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2077)
inline _variant_t Excel::IDrawingObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2078)
inline _variant_t Excel::IDrawingObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2079)
inline double Excel::IDrawingObjects::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2080)
inline void Excel::IDrawingObjects::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2081)
inline VARIANT_BOOL Excel::IDrawingObjects::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2082)
inline void Excel::IDrawingObjects::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2083)
inline double Excel::IDrawingObjects::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2084)
inline void Excel::IDrawingObjects::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2085)
inline long Excel::IDrawingObjects::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2086)
inline Excel::ShapeRangePtr Excel::IDrawingObjects::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2087)
inline _variant_t Excel::IDrawingObjects::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2088)
inline void Excel::IDrawingObjects::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2089)
inline VARIANT_BOOL Excel::IDrawingObjects::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2090)
inline void Excel::IDrawingObjects::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2091)
inline _variant_t Excel::IDrawingObjects::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddItem(Text, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2092)
inline _variant_t Excel::IDrawingObjects::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2093)
inline void Excel::IDrawingObjects::PutArrowHeadLength ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadLength(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2094)
inline _variant_t Excel::IDrawingObjects::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2095)
inline void Excel::IDrawingObjects::PutArrowHeadStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2096)
inline _variant_t Excel::IDrawingObjects::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2097)
inline void Excel::IDrawingObjects::PutArrowHeadWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2098)
inline VARIANT_BOOL Excel::IDrawingObjects::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2099)
inline void Excel::IDrawingObjects::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2100)
inline Excel::BorderPtr Excel::IDrawingObjects::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(2101)
inline VARIANT_BOOL Excel::IDrawingObjects::GetCancelButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CancelButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2102)
inline void Excel::IDrawingObjects::PutCancelButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CancelButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2103)
inline _bstr_t Excel::IDrawingObjects::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2104)
inline void Excel::IDrawingObjects::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2105)
inline Excel::CharactersPtr Excel::IDrawingObjects::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(2106)
inline _variant_t Excel::IDrawingObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2107)
inline long Excel::IDrawingObjects::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2108)
inline void Excel::IDrawingObjects::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2109)
inline VARIANT_BOOL Excel::IDrawingObjects::GetDefaultButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DefaultButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2110)
inline void Excel::IDrawingObjects::PutDefaultButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DefaultButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2111)
inline VARIANT_BOOL Excel::IDrawingObjects::GetDismissButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DismissButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2112)
inline void Excel::IDrawingObjects::PutDismissButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DismissButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2113)
inline VARIANT_BOOL Excel::IDrawingObjects::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2114)
inline void Excel::IDrawingObjects::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2115)
inline VARIANT_BOOL Excel::IDrawingObjects::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayVerticalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2116)
inline void Excel::IDrawingObjects::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayVerticalScrollBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2117)
inline long Excel::IDrawingObjects::GetDropDownLines ( ) {
    long _result;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2118)
inline void Excel::IDrawingObjects::PutDropDownLines ( long RHS ) {
    HRESULT _hr = put_DropDownLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2119)
inline Excel::FontPtr Excel::IDrawingObjects::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(2120)
inline VARIANT_BOOL Excel::IDrawingObjects::GetHelpButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HelpButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2121)
inline void Excel::IDrawingObjects::PutHelpButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HelpButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2122)
inline _variant_t Excel::IDrawingObjects::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2123)
inline void Excel::IDrawingObjects::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2124)
inline long Excel::IDrawingObjects::GetInputType ( ) {
    long _result;
    HRESULT _hr = get_InputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2125)
inline void Excel::IDrawingObjects::PutInputType ( long RHS ) {
    HRESULT _hr = put_InputType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2126)
inline Excel::InteriorPtr Excel::IDrawingObjects::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(2127)
inline long Excel::IDrawingObjects::GetLargeChange ( ) {
    long _result;
    HRESULT _hr = get_LargeChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2128)
inline void Excel::IDrawingObjects::PutLargeChange ( long RHS ) {
    HRESULT _hr = put_LargeChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2129)
inline _bstr_t Excel::IDrawingObjects::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2130)
inline void Excel::IDrawingObjects::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2131)
inline _variant_t Excel::IDrawingObjects::List ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2132)
inline _bstr_t Excel::IDrawingObjects::GetListFillRange ( ) {
    BSTR _result;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2133)
inline void Excel::IDrawingObjects::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2134)
inline long Excel::IDrawingObjects::GetListIndex ( ) {
    long _result;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2135)
inline void Excel::IDrawingObjects::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2136)
inline VARIANT_BOOL Excel::IDrawingObjects::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2137)
inline void Excel::IDrawingObjects::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2138)
inline long Excel::IDrawingObjects::GetMax ( ) {
    long _result;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2139)
inline void Excel::IDrawingObjects::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2140)
inline long Excel::IDrawingObjects::GetMin ( ) {
    long _result;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2141)
inline void Excel::IDrawingObjects::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2142)
inline VARIANT_BOOL Excel::IDrawingObjects::GetMultiLine ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MultiLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2143)
inline void Excel::IDrawingObjects::PutMultiLine ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MultiLine(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2144)
inline VARIANT_BOOL Excel::IDrawingObjects::GetMultiSelect ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2145)
inline void Excel::IDrawingObjects::PutMultiSelect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MultiSelect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2146)
inline _variant_t Excel::IDrawingObjects::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2147)
inline void Excel::IDrawingObjects::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2148)
inline _variant_t Excel::IDrawingObjects::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2149)
inline void Excel::IDrawingObjects::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2150)
inline _variant_t Excel::IDrawingObjects::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2151)
inline _variant_t Excel::IDrawingObjects::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveItem(Index, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2152)
inline _variant_t Excel::IDrawingObjects::Reshape ( long Vertex, const _variant_t & Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Reshape(Vertex, Insert, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2153)
inline VARIANT_BOOL Excel::IDrawingObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2154)
inline void Excel::IDrawingObjects::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2155)
inline _variant_t Excel::IDrawingObjects::Selected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Selected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2156)
inline VARIANT_BOOL Excel::IDrawingObjects::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2157)
inline void Excel::IDrawingObjects::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2158)
inline long Excel::IDrawingObjects::GetSmallChange ( ) {
    long _result;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2159)
inline void Excel::IDrawingObjects::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2160)
inline _bstr_t Excel::IDrawingObjects::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2161)
inline void Excel::IDrawingObjects::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2162)
inline IDispatchPtr Excel::IDrawingObjects::Ungroup ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2163)
inline long Excel::IDrawingObjects::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2164)
inline void Excel::IDrawingObjects::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2165)
inline _variant_t Excel::IDrawingObjects::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2166)
inline void Excel::IDrawingObjects::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2167)
inline _variant_t Excel::IDrawingObjects::Vertices ( const _variant_t & Index1, const _variant_t & Index2 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Vertices(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2168)
inline long Excel::IDrawingObjects::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2169)
inline void Excel::IDrawingObjects::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2170)
inline long Excel::IDrawingObjects::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2171)
inline IDispatchPtr Excel::IDrawingObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2172)
inline Excel::GroupObjectPtr Excel::IDrawingObjects::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(2173)
inline _variant_t Excel::IDrawingObjects::LinkCombo ( const _variant_t & Link ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LinkCombo(Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2174)
inline IUnknownPtr Excel::IDrawingObjects::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPivotCache wrapper method implementations
//

#pragma implementation_key(2175)
inline Excel::_ApplicationPtr Excel::IPivotCache::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2176)
inline enum XlCreator Excel::IPivotCache::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2177)
inline IDispatchPtr Excel::IPivotCache::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2178)
inline VARIANT_BOOL Excel::IPivotCache::GetBackgroundQuery ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BackgroundQuery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2179)
inline void Excel::IPivotCache::PutBackgroundQuery ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BackgroundQuery(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2180)
inline _variant_t Excel::IPivotCache::GetConnection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Connection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2181)
inline void Excel::IPivotCache::PutConnection ( const _variant_t & RHS ) {
    HRESULT _hr = put_Connection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2182)
inline VARIANT_BOOL Excel::IPivotCache::GetEnableRefresh ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableRefresh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2183)
inline void Excel::IPivotCache::PutEnableRefresh ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableRefresh(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2184)
inline long Excel::IPivotCache::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2185)
inline long Excel::IPivotCache::GetMemoryUsed ( ) {
    long _result;
    HRESULT _hr = get_MemoryUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2186)
inline VARIANT_BOOL Excel::IPivotCache::GetOptimizeCache ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OptimizeCache(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2187)
inline void Excel::IPivotCache::PutOptimizeCache ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_OptimizeCache(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2188)
inline long Excel::IPivotCache::GetRecordCount ( ) {
    long _result;
    HRESULT _hr = get_RecordCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2189)
inline HRESULT Excel::IPivotCache::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2190)
inline DATE Excel::IPivotCache::GetRefreshDate ( ) {
    DATE _result;
    HRESULT _hr = get_RefreshDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2191)
inline _bstr_t Excel::IPivotCache::GetRefreshName ( ) {
    BSTR _result;
    HRESULT _hr = get_RefreshName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2192)
inline VARIANT_BOOL Excel::IPivotCache::GetRefreshOnFileOpen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RefreshOnFileOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2193)
inline void Excel::IPivotCache::PutRefreshOnFileOpen ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RefreshOnFileOpen(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2194)
inline _variant_t Excel::IPivotCache::GetSql ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Sql(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2195)
inline void Excel::IPivotCache::PutSql ( const _variant_t & RHS ) {
    HRESULT _hr = put_Sql(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2196)
inline VARIANT_BOOL Excel::IPivotCache::GetSavePassword ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SavePassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2197)
inline void Excel::IPivotCache::PutSavePassword ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SavePassword(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2198)
inline _variant_t Excel::IPivotCache::GetSourceData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SourceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2199)
inline void Excel::IPivotCache::PutSourceData ( const _variant_t & RHS ) {
    HRESULT _hr = put_SourceData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2200)
inline _variant_t Excel::IPivotCache::GetCommandText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CommandText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2201)
inline void Excel::IPivotCache::PutCommandText ( const _variant_t & RHS ) {
    HRESULT _hr = put_CommandText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2202)
inline enum XlCmdType Excel::IPivotCache::GetCommandType ( ) {
    enum XlCmdType _result;
    HRESULT _hr = get_CommandType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2203)
inline void Excel::IPivotCache::PutCommandType ( enum XlCmdType RHS ) {
    HRESULT _hr = put_CommandType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2204)
inline enum XlQueryType Excel::IPivotCache::GetQueryType ( ) {
    enum XlQueryType _result;
    HRESULT _hr = get_QueryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2205)
inline VARIANT_BOOL Excel::IPivotCache::GetMaintainConnection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MaintainConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2206)
inline void Excel::IPivotCache::PutMaintainConnection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MaintainConnection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2207)
inline long Excel::IPivotCache::GetRefreshPeriod ( ) {
    long _result;
    HRESULT _hr = get_RefreshPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2208)
inline void Excel::IPivotCache::PutRefreshPeriod ( long RHS ) {
    HRESULT _hr = put_RefreshPeriod(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2209)
inline IDispatchPtr Excel::IPivotCache::GetRecordset ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Recordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2210)
inline void Excel::IPivotCache::PutRefRecordset ( IDispatch * RHS ) {
    HRESULT _hr = putref_Recordset(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2211)
inline HRESULT Excel::IPivotCache::ResetTimer ( ) {
    HRESULT _hr = raw_ResetTimer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2212)
inline _variant_t Excel::IPivotCache::GetLocalConnection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LocalConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2213)
inline void Excel::IPivotCache::PutLocalConnection ( const _variant_t & RHS ) {
    HRESULT _hr = put_LocalConnection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2214)
inline Excel::PivotTablePtr Excel::IPivotCache::CreatePivotTable ( const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion ) {
    struct PivotTable * _result;
    HRESULT _hr = raw_CreatePivotTable(TableDestination, TableName, ReadData, DefaultVersion, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(2215)
inline VARIANT_BOOL Excel::IPivotCache::GetUseLocalConnection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseLocalConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2216)
inline void Excel::IPivotCache::PutUseLocalConnection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UseLocalConnection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2217)
inline IDispatchPtr Excel::IPivotCache::GetADOConnection ( ) {
    IDispatch * _result;
    HRESULT _hr = get_ADOConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2218)
inline VARIANT_BOOL Excel::IPivotCache::GetIsConnected ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2219)
inline HRESULT Excel::IPivotCache::MakeConnection ( ) {
    HRESULT _hr = raw_MakeConnection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2220)
inline VARIANT_BOOL Excel::IPivotCache::GetOLAP ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OLAP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2221)
inline enum XlPivotTableSourceType Excel::IPivotCache::GetSourceType ( ) {
    enum XlPivotTableSourceType _result;
    HRESULT _hr = get_SourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2222)
inline enum XlPivotTableMissingItems Excel::IPivotCache::GetMissingItemsLimit ( ) {
    enum XlPivotTableMissingItems _result;
    HRESULT _hr = get_MissingItemsLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2223)
inline void Excel::IPivotCache::PutMissingItemsLimit ( enum XlPivotTableMissingItems RHS ) {
    HRESULT _hr = put_MissingItemsLimit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2224)
inline _bstr_t Excel::IPivotCache::GetSourceConnectionFile ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceConnectionFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2225)
inline void Excel::IPivotCache::PutSourceConnectionFile ( _bstr_t RHS ) {
    HRESULT _hr = put_SourceConnectionFile(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2226)
inline _bstr_t Excel::IPivotCache::GetSourceDataFile ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceDataFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2227)
inline enum XlRobustConnect Excel::IPivotCache::GetRobustConnect ( ) {
    enum XlRobustConnect _result;
    HRESULT _hr = get_RobustConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2228)
inline void Excel::IPivotCache::PutRobustConnect ( enum XlRobustConnect RHS ) {
    HRESULT _hr = put_RobustConnect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2229)
inline HRESULT Excel::IPivotCache::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords ) {
    HRESULT _hr = raw_SaveAsODC(ODCFileName, Description, Keywords);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPivotCaches wrapper method implementations
//

#pragma implementation_key(2230)
inline Excel::_ApplicationPtr Excel::IPivotCaches::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2231)
inline enum XlCreator Excel::IPivotCaches::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2232)
inline IDispatchPtr Excel::IPivotCaches::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2233)
inline long Excel::IPivotCaches::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2234)
inline Excel::PivotCachePtr Excel::IPivotCaches::Item ( const _variant_t & Index ) {
    struct PivotCache * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachePtr(_result, false);
}

#pragma implementation_key(2235)
inline Excel::PivotCachePtr Excel::IPivotCaches::Get_Default ( const _variant_t & Index ) {
    struct PivotCache * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachePtr(_result, false);
}

#pragma implementation_key(2236)
inline IUnknownPtr Excel::IPivotCaches::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2237)
inline Excel::PivotCachePtr Excel::IPivotCaches::Add ( enum XlPivotTableSourceType SourceType, const _variant_t & SourceData ) {
    struct PivotCache * _result;
    HRESULT _hr = raw_Add(SourceType, SourceData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachePtr(_result, false);
}

//
// interface IPivotFormula wrapper method implementations
//

#pragma implementation_key(2238)
inline Excel::_ApplicationPtr Excel::IPivotFormula::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2239)
inline enum XlCreator Excel::IPivotFormula::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2240)
inline IDispatchPtr Excel::IPivotFormula::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2241)
inline HRESULT Excel::IPivotFormula::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2242)
inline _bstr_t Excel::IPivotFormula::Get_Default ( ) {
    BSTR _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2243)
inline void Excel::IPivotFormula::Put_Default ( _bstr_t RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2244)
inline _bstr_t Excel::IPivotFormula::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2245)
inline void Excel::IPivotFormula::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2246)
inline _bstr_t Excel::IPivotFormula::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2247)
inline void Excel::IPivotFormula::PutValue ( _bstr_t RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2248)
inline long Excel::IPivotFormula::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2249)
inline void Excel::IPivotFormula::PutIndex ( long RHS ) {
    HRESULT _hr = put_Index(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2250)
inline _bstr_t Excel::IPivotFormula::GetStandardFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_StandardFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2251)
inline void Excel::IPivotFormula::PutStandardFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_StandardFormula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPivotFormulas wrapper method implementations
//

#pragma implementation_key(2252)
inline Excel::_ApplicationPtr Excel::IPivotFormulas::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2253)
inline enum XlCreator Excel::IPivotFormulas::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2254)
inline IDispatchPtr Excel::IPivotFormulas::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2255)
inline long Excel::IPivotFormulas::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2256)
inline Excel::PivotFormulaPtr Excel::IPivotFormulas::_Add ( _bstr_t Formula ) {
    struct PivotFormula * _result;
    HRESULT _hr = raw__Add(Formula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFormulaPtr(_result, false);
}

#pragma implementation_key(2257)
inline Excel::PivotFormulaPtr Excel::IPivotFormulas::Item ( const _variant_t & Index ) {
    struct PivotFormula * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFormulaPtr(_result, false);
}

#pragma implementation_key(2258)
inline Excel::PivotFormulaPtr Excel::IPivotFormulas::Get_Default ( const _variant_t & Index ) {
    struct PivotFormula * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFormulaPtr(_result, false);
}

#pragma implementation_key(2259)
inline IUnknownPtr Excel::IPivotFormulas::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2260)
inline Excel::PivotFormulaPtr Excel::IPivotFormulas::Add ( _bstr_t Formula, const _variant_t & UseStandardFormula ) {
    struct PivotFormula * _result;
    HRESULT _hr = raw_Add(Formula, UseStandardFormula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFormulaPtr(_result, false);
}

//
// interface IPivotTable wrapper method implementations
//

#pragma implementation_key(2261)
inline Excel::_ApplicationPtr Excel::IPivotTable::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2262)
inline enum XlCreator Excel::IPivotTable::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2263)
inline IDispatchPtr Excel::IPivotTable::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2264)
inline _variant_t Excel::IPivotTable::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AddToTable ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddFields(RowFields, ColumnFields, PageFields, AddToTable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2265)
inline IDispatchPtr Excel::IPivotTable::GetColumnFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_ColumnFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2266)
inline VARIANT_BOOL Excel::IPivotTable::GetColumnGrand ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ColumnGrand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2267)
inline void Excel::IPivotTable::PutColumnGrand ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ColumnGrand(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2268)
inline Excel::RangePtr Excel::IPivotTable::GetColumnRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_ColumnRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2269)
inline _variant_t Excel::IPivotTable::ShowPages ( const _variant_t & PageField ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ShowPages(PageField, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2270)
inline Excel::RangePtr Excel::IPivotTable::GetDataBodyRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_DataBodyRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2271)
inline IDispatchPtr Excel::IPivotTable::GetDataFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_DataFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2272)
inline Excel::RangePtr Excel::IPivotTable::GetDataLabelRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_DataLabelRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2273)
inline _bstr_t Excel::IPivotTable::Get_Default ( ) {
    BSTR _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2274)
inline void Excel::IPivotTable::Put_Default ( _bstr_t RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2275)
inline VARIANT_BOOL Excel::IPivotTable::GetHasAutoFormat ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasAutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2276)
inline void Excel::IPivotTable::PutHasAutoFormat ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasAutoFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2277)
inline IDispatchPtr Excel::IPivotTable::GetHiddenFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_HiddenFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2278)
inline _bstr_t Excel::IPivotTable::GetInnerDetail ( ) {
    BSTR _result;
    HRESULT _hr = get_InnerDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2279)
inline void Excel::IPivotTable::PutInnerDetail ( _bstr_t RHS ) {
    HRESULT _hr = put_InnerDetail(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2280)
inline _bstr_t Excel::IPivotTable::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2281)
inline void Excel::IPivotTable::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2282)
inline IDispatchPtr Excel::IPivotTable::GetPageFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_PageFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2283)
inline Excel::RangePtr Excel::IPivotTable::GetPageRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_PageRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2284)
inline Excel::RangePtr Excel::IPivotTable::GetPageRangeCells ( ) {
    struct Range * _result;
    HRESULT _hr = get_PageRangeCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2285)
inline IDispatchPtr Excel::IPivotTable::PivotFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_PivotFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2286)
inline DATE Excel::IPivotTable::GetRefreshDate ( ) {
    DATE _result;
    HRESULT _hr = get_RefreshDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2287)
inline _bstr_t Excel::IPivotTable::GetRefreshName ( ) {
    BSTR _result;
    HRESULT _hr = get_RefreshName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2288)
inline VARIANT_BOOL Excel::IPivotTable::RefreshTable ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_RefreshTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2289)
inline IDispatchPtr Excel::IPivotTable::GetRowFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_RowFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2290)
inline VARIANT_BOOL Excel::IPivotTable::GetRowGrand ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RowGrand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2291)
inline void Excel::IPivotTable::PutRowGrand ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RowGrand(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2292)
inline Excel::RangePtr Excel::IPivotTable::GetRowRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_RowRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2293)
inline VARIANT_BOOL Excel::IPivotTable::GetSaveData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SaveData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2294)
inline void Excel::IPivotTable::PutSaveData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SaveData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2295)
inline _variant_t Excel::IPivotTable::GetSourceData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SourceData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2296)
inline void Excel::IPivotTable::PutSourceData ( const _variant_t & RHS ) {
    HRESULT _hr = put_SourceData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2297)
inline Excel::RangePtr Excel::IPivotTable::GetTableRange1 ( ) {
    struct Range * _result;
    HRESULT _hr = get_TableRange1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2298)
inline Excel::RangePtr Excel::IPivotTable::GetTableRange2 ( ) {
    struct Range * _result;
    HRESULT _hr = get_TableRange2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2299)
inline _bstr_t Excel::IPivotTable::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2300)
inline void Excel::IPivotTable::PutValue ( _bstr_t RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2301)
inline IDispatchPtr Excel::IPivotTable::GetVisibleFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_VisibleFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2302)
inline long Excel::IPivotTable::GetCacheIndex ( ) {
    long _result;
    HRESULT _hr = get_CacheIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2303)
inline void Excel::IPivotTable::PutCacheIndex ( long RHS ) {
    HRESULT _hr = put_CacheIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2304)
inline Excel::CalculatedFieldsPtr Excel::IPivotTable::CalculatedFields ( ) {
    struct CalculatedFields * _result;
    HRESULT _hr = raw_CalculatedFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalculatedFieldsPtr(_result, false);
}

#pragma implementation_key(2305)
inline VARIANT_BOOL Excel::IPivotTable::GetDisplayErrorString ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayErrorString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2306)
inline void Excel::IPivotTable::PutDisplayErrorString ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayErrorString(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2307)
inline VARIANT_BOOL Excel::IPivotTable::GetDisplayNullString ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayNullString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2308)
inline void Excel::IPivotTable::PutDisplayNullString ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayNullString(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2309)
inline VARIANT_BOOL Excel::IPivotTable::GetEnableDrilldown ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableDrilldown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2310)
inline void Excel::IPivotTable::PutEnableDrilldown ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableDrilldown(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2311)
inline VARIANT_BOOL Excel::IPivotTable::GetEnableFieldDialog ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableFieldDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2312)
inline void Excel::IPivotTable::PutEnableFieldDialog ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableFieldDialog(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2313)
inline VARIANT_BOOL Excel::IPivotTable::GetEnableWizard ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2314)
inline void Excel::IPivotTable::PutEnableWizard ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableWizard(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2315)
inline _bstr_t Excel::IPivotTable::GetErrorString ( ) {
    BSTR _result;
    HRESULT _hr = get_ErrorString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2316)
inline void Excel::IPivotTable::PutErrorString ( _bstr_t RHS ) {
    HRESULT _hr = put_ErrorString(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2317)
inline double Excel::IPivotTable::GetData ( _bstr_t Name ) {
    double _result;
    HRESULT _hr = raw_GetData(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2318)
inline HRESULT Excel::IPivotTable::ListFormulas ( ) {
    HRESULT _hr = raw_ListFormulas();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2319)
inline VARIANT_BOOL Excel::IPivotTable::GetManualUpdate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ManualUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2320)
inline void Excel::IPivotTable::PutManualUpdate ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ManualUpdate(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2321)
inline VARIANT_BOOL Excel::IPivotTable::GetMergeLabels ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MergeLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2322)
inline void Excel::IPivotTable::PutMergeLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MergeLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2323)
inline _bstr_t Excel::IPivotTable::GetNullString ( ) {
    BSTR _result;
    HRESULT _hr = get_NullString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2324)
inline void Excel::IPivotTable::PutNullString ( _bstr_t RHS ) {
    HRESULT _hr = put_NullString(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2325)
inline Excel::PivotCachePtr Excel::IPivotTable::PivotCache ( ) {
    struct PivotCache * _result;
    HRESULT _hr = raw_PivotCache(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachePtr(_result, false);
}

#pragma implementation_key(2326)
inline Excel::PivotFormulasPtr Excel::IPivotTable::GetPivotFormulas ( ) {
    struct PivotFormulas * _result;
    HRESULT _hr = get_PivotFormulas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFormulasPtr(_result, false);
}

#pragma implementation_key(2327)
inline HRESULT Excel::IPivotTable::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection ) {
    HRESULT _hr = raw_PivotTableWizard(SourceType, SourceData, TableDestination, TableName, RowGrand, ColumnGrand, SaveData, HasAutoFormat, AutoPage, Reserved, BackgroundQuery, OptimizeCache, PageFieldOrder, PageFieldWrapCount, ReadData, Connection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2328)
inline VARIANT_BOOL Excel::IPivotTable::GetSubtotalHiddenPageItems ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SubtotalHiddenPageItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2329)
inline void Excel::IPivotTable::PutSubtotalHiddenPageItems ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SubtotalHiddenPageItems(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2330)
inline long Excel::IPivotTable::GetPageFieldOrder ( ) {
    long _result;
    HRESULT _hr = get_PageFieldOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2331)
inline void Excel::IPivotTable::PutPageFieldOrder ( long RHS ) {
    HRESULT _hr = put_PageFieldOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2332)
inline _bstr_t Excel::IPivotTable::GetPageFieldStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_PageFieldStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2333)
inline void Excel::IPivotTable::PutPageFieldStyle ( _bstr_t RHS ) {
    HRESULT _hr = put_PageFieldStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2334)
inline long Excel::IPivotTable::GetPageFieldWrapCount ( ) {
    long _result;
    HRESULT _hr = get_PageFieldWrapCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2335)
inline void Excel::IPivotTable::PutPageFieldWrapCount ( long RHS ) {
    HRESULT _hr = put_PageFieldWrapCount(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2336)
inline VARIANT_BOOL Excel::IPivotTable::GetPreserveFormatting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PreserveFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2337)
inline void Excel::IPivotTable::PutPreserveFormatting ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PreserveFormatting(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2338)
inline HRESULT Excel::IPivotTable::_PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode ) {
    HRESULT _hr = raw__PivotSelect(Name, Mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2339)
inline _bstr_t Excel::IPivotTable::GetPivotSelection ( ) {
    BSTR _result;
    HRESULT _hr = get_PivotSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2340)
inline void Excel::IPivotTable::PutPivotSelection ( _bstr_t RHS ) {
    HRESULT _hr = put_PivotSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2341)
inline enum XlPTSelectionMode Excel::IPivotTable::GetSelectionMode ( ) {
    enum XlPTSelectionMode _result;
    HRESULT _hr = get_SelectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2342)
inline void Excel::IPivotTable::PutSelectionMode ( enum XlPTSelectionMode RHS ) {
    HRESULT _hr = put_SelectionMode(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2343)
inline _bstr_t Excel::IPivotTable::GetTableStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_TableStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2344)
inline void Excel::IPivotTable::PutTableStyle ( _bstr_t RHS ) {
    HRESULT _hr = put_TableStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2345)
inline _bstr_t Excel::IPivotTable::GetTag ( ) {
    BSTR _result;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2346)
inline void Excel::IPivotTable::PutTag ( _bstr_t RHS ) {
    HRESULT _hr = put_Tag(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2347)
inline HRESULT Excel::IPivotTable::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2348)
inline _bstr_t Excel::IPivotTable::GetVacatedStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_VacatedStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2349)
inline void Excel::IPivotTable::PutVacatedStyle ( _bstr_t RHS ) {
    HRESULT _hr = put_VacatedStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2350)
inline HRESULT Excel::IPivotTable::Format ( enum XlPivotFormatType Format ) {
    HRESULT _hr = raw_Format(Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2351)
inline VARIANT_BOOL Excel::IPivotTable::GetPrintTitles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintTitles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2352)
inline void Excel::IPivotTable::PutPrintTitles ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintTitles(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2353)
inline Excel::CubeFieldsPtr Excel::IPivotTable::GetCubeFields ( ) {
    struct CubeFields * _result;
    HRESULT _hr = get_CubeFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldsPtr(_result, false);
}

#pragma implementation_key(2354)
inline _bstr_t Excel::IPivotTable::GetGrandTotalName ( ) {
    BSTR _result;
    HRESULT _hr = get_GrandTotalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2355)
inline void Excel::IPivotTable::PutGrandTotalName ( _bstr_t RHS ) {
    HRESULT _hr = put_GrandTotalName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2356)
inline VARIANT_BOOL Excel::IPivotTable::GetSmallGrid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SmallGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2357)
inline void Excel::IPivotTable::PutSmallGrid ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SmallGrid(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2358)
inline VARIANT_BOOL Excel::IPivotTable::GetRepeatItemsOnEachPrintedPage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RepeatItemsOnEachPrintedPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2359)
inline void Excel::IPivotTable::PutRepeatItemsOnEachPrintedPage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RepeatItemsOnEachPrintedPage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2360)
inline VARIANT_BOOL Excel::IPivotTable::GetTotalsAnnotation ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TotalsAnnotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2361)
inline void Excel::IPivotTable::PutTotalsAnnotation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TotalsAnnotation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2362)
inline HRESULT Excel::IPivotTable::PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode, const _variant_t & UseStandardName ) {
    HRESULT _hr = raw_PivotSelect(Name, Mode, UseStandardName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2363)
inline _bstr_t Excel::IPivotTable::GetPivotSelectionStandard ( ) {
    BSTR _result;
    HRESULT _hr = get_PivotSelectionStandard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2364)
inline void Excel::IPivotTable::PutPivotSelectionStandard ( _bstr_t RHS ) {
    HRESULT _hr = put_PivotSelectionStandard(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2365)
inline Excel::RangePtr Excel::IPivotTable::GetPivotData ( const _variant_t & DataField, const _variant_t & Field1, const _variant_t & Item1, const _variant_t & Field2, const _variant_t & Item2, const _variant_t & Field3, const _variant_t & Item3, const _variant_t & Field4, const _variant_t & Item4, const _variant_t & Field5, const _variant_t & Item5, const _variant_t & Field6, const _variant_t & Item6, const _variant_t & Field7, const _variant_t & Item7, const _variant_t & Field8, const _variant_t & Item8, const _variant_t & Field9, const _variant_t & Item9, const _variant_t & Field10, const _variant_t & Item10, const _variant_t & Field11, const _variant_t & Item11, const _variant_t & Field12, const _variant_t & Item12, const _variant_t & Field13, const _variant_t & Item13, const _variant_t & Field14, const _variant_t & Item14 ) {
    struct Range * _result;
    HRESULT _hr = raw_GetPivotData(DataField, Field1, Item1, Field2, Item2, Field3, Item3, Field4, Item4, Field5, Item5, Field6, Item6, Field7, Item7, Field8, Item8, Field9, Item9, Field10, Item10, Field11, Item11, Field12, Item12, Field13, Item13, Field14, Item14, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2366)
inline Excel::PivotFieldPtr Excel::IPivotTable::GetDataPivotField ( ) {
    struct PivotField * _result;
    HRESULT _hr = get_DataPivotField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(2367)
inline VARIANT_BOOL Excel::IPivotTable::GetEnableDataValueEditing ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableDataValueEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2368)
inline void Excel::IPivotTable::PutEnableDataValueEditing ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableDataValueEditing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2369)
inline Excel::PivotFieldPtr Excel::IPivotTable::AddDataField ( IDispatch * Field, const _variant_t & Caption, const _variant_t & Function ) {
    struct PivotField * _result;
    HRESULT _hr = raw_AddDataField(Field, Caption, Function, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(2370)
inline _bstr_t Excel::IPivotTable::GetMDX ( ) {
    BSTR _result;
    HRESULT _hr = get_MDX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2371)
inline VARIANT_BOOL Excel::IPivotTable::GetViewCalculatedMembers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ViewCalculatedMembers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2372)
inline void Excel::IPivotTable::PutViewCalculatedMembers ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ViewCalculatedMembers(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2373)
inline Excel::CalculatedMembersPtr Excel::IPivotTable::GetCalculatedMembers ( ) {
    struct CalculatedMembers * _result;
    HRESULT _hr = get_CalculatedMembers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalculatedMembersPtr(_result, false);
}

#pragma implementation_key(2374)
inline VARIANT_BOOL Excel::IPivotTable::GetDisplayImmediateItems ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayImmediateItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2375)
inline void Excel::IPivotTable::PutDisplayImmediateItems ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayImmediateItems(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2376)
inline _variant_t Excel::IPivotTable::Dummy15 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Dummy15(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2377)
inline VARIANT_BOOL Excel::IPivotTable::GetEnableFieldList ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableFieldList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2378)
inline void Excel::IPivotTable::PutEnableFieldList ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableFieldList(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2379)
inline VARIANT_BOOL Excel::IPivotTable::GetVisualTotals ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_VisualTotals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2380)
inline void Excel::IPivotTable::PutVisualTotals ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_VisualTotals(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2381)
inline VARIANT_BOOL Excel::IPivotTable::GetShowPageMultipleItemLabel ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowPageMultipleItemLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2382)
inline void Excel::IPivotTable::PutShowPageMultipleItemLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPageMultipleItemLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2383)
inline enum XlPivotTableVersionList Excel::IPivotTable::GetVersion ( ) {
    enum XlPivotTableVersionList _result;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2384)
inline _bstr_t Excel::IPivotTable::CreateCubeFile ( _bstr_t File, const _variant_t & Measures, const _variant_t & Levels, const _variant_t & Members, const _variant_t & Properties ) {
    BSTR _result;
    HRESULT _hr = raw_CreateCubeFile(File, Measures, Levels, Members, Properties, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2385)
inline VARIANT_BOOL Excel::IPivotTable::GetDisplayEmptyRow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayEmptyRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2386)
inline void Excel::IPivotTable::PutDisplayEmptyRow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayEmptyRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2387)
inline VARIANT_BOOL Excel::IPivotTable::GetDisplayEmptyColumn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayEmptyColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2388)
inline void Excel::IPivotTable::PutDisplayEmptyColumn ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayEmptyColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2389)
inline VARIANT_BOOL Excel::IPivotTable::GetShowCellBackgroundFromOLAP ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowCellBackgroundFromOLAP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2390)
inline void Excel::IPivotTable::PutShowCellBackgroundFromOLAP ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCellBackgroundFromOLAP(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPivotTables wrapper method implementations
//

#pragma implementation_key(2391)
inline Excel::_ApplicationPtr Excel::IPivotTables::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2392)
inline enum XlCreator Excel::IPivotTables::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2393)
inline IDispatchPtr Excel::IPivotTables::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2394)
inline long Excel::IPivotTables::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2395)
inline Excel::PivotTablePtr Excel::IPivotTables::Item ( const _variant_t & Index ) {
    struct PivotTable * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(2396)
inline IUnknownPtr Excel::IPivotTables::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2397)
inline Excel::PivotTablePtr Excel::IPivotTables::Add ( struct PivotCache * PivotCache, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion ) {
    struct PivotTable * _result;
    HRESULT _hr = raw_Add(PivotCache, TableDestination, TableName, ReadData, DefaultVersion, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

//
// interface IPivotField wrapper method implementations
//

#pragma implementation_key(2398)
inline Excel::_ApplicationPtr Excel::IPivotField::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2399)
inline enum XlCreator Excel::IPivotField::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2400)
inline IDispatchPtr Excel::IPivotField::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2401)
inline enum XlPivotFieldCalculation Excel::IPivotField::GetCalculation ( ) {
    enum XlPivotFieldCalculation _result;
    HRESULT _hr = get_Calculation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2402)
inline void Excel::IPivotField::PutCalculation ( enum XlPivotFieldCalculation RHS ) {
    HRESULT _hr = put_Calculation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2403)
inline Excel::PivotFieldPtr Excel::IPivotField::GetChildField ( ) {
    struct PivotField * _result;
    HRESULT _hr = get_ChildField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(2404)
inline _variant_t Excel::IPivotField::GetChildItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChildItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2405)
inline _variant_t Excel::IPivotField::GetCurrentPage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2406)
inline void Excel::IPivotField::PutCurrentPage ( const _variant_t & RHS ) {
    HRESULT _hr = put_CurrentPage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2407)
inline Excel::RangePtr Excel::IPivotField::GetDataRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_DataRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2408)
inline enum XlPivotFieldDataType Excel::IPivotField::GetDataType ( ) {
    enum XlPivotFieldDataType _result;
    HRESULT _hr = get_DataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2409)
inline _bstr_t Excel::IPivotField::Get_Default ( ) {
    BSTR _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2410)
inline void Excel::IPivotField::Put_Default ( _bstr_t RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2411)
inline enum XlConsolidationFunction Excel::IPivotField::GetFunction ( ) {
    enum XlConsolidationFunction _result;
    HRESULT _hr = get_Function(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2412)
inline void Excel::IPivotField::PutFunction ( enum XlConsolidationFunction RHS ) {
    HRESULT _hr = put_Function(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2413)
inline _variant_t Excel::IPivotField::GetGroupLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_GroupLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2414)
inline _variant_t Excel::IPivotField::GetHiddenItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HiddenItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2415)
inline Excel::RangePtr Excel::IPivotField::GetLabelRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_LabelRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2416)
inline _bstr_t Excel::IPivotField::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2417)
inline void Excel::IPivotField::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2418)
inline _bstr_t Excel::IPivotField::GetNumberFormat ( ) {
    BSTR _result;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2419)
inline void Excel::IPivotField::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2420)
inline enum XlPivotFieldOrientation Excel::IPivotField::GetOrientation ( ) {
    enum XlPivotFieldOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2421)
inline void Excel::IPivotField::PutOrientation ( enum XlPivotFieldOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2422)
inline VARIANT_BOOL Excel::IPivotField::GetShowAllItems ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2423)
inline void Excel::IPivotField::PutShowAllItems ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowAllItems(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2424)
inline Excel::PivotFieldPtr Excel::IPivotField::GetParentField ( ) {
    struct PivotField * _result;
    HRESULT _hr = get_ParentField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(2425)
inline _variant_t Excel::IPivotField::GetParentItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ParentItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2426)
inline _variant_t Excel::IPivotField::PivotItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_PivotItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2427)
inline _variant_t Excel::IPivotField::GetPosition ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2428)
inline void Excel::IPivotField::PutPosition ( const _variant_t & RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2429)
inline _bstr_t Excel::IPivotField::GetSourceName ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2430)
inline _variant_t Excel::IPivotField::GetSubtotals ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Subtotals(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2431)
inline void Excel::IPivotField::PutSubtotals ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Subtotals(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2432)
inline _variant_t Excel::IPivotField::GetBaseField ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2433)
inline void Excel::IPivotField::PutBaseField ( const _variant_t & RHS ) {
    HRESULT _hr = put_BaseField(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2434)
inline _variant_t Excel::IPivotField::GetBaseItem ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2435)
inline void Excel::IPivotField::PutBaseItem ( const _variant_t & RHS ) {
    HRESULT _hr = put_BaseItem(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2436)
inline _variant_t Excel::IPivotField::GetTotalLevels ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TotalLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2437)
inline _bstr_t Excel::IPivotField::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2438)
inline void Excel::IPivotField::PutValue ( _bstr_t RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2439)
inline _variant_t Excel::IPivotField::GetVisibleItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VisibleItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2440)
inline Excel::CalculatedItemsPtr Excel::IPivotField::CalculatedItems ( ) {
    struct CalculatedItems * _result;
    HRESULT _hr = raw_CalculatedItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalculatedItemsPtr(_result, false);
}

#pragma implementation_key(2441)
inline HRESULT Excel::IPivotField::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2442)
inline VARIANT_BOOL Excel::IPivotField::GetDragToColumn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DragToColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2443)
inline void Excel::IPivotField::PutDragToColumn ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2444)
inline VARIANT_BOOL Excel::IPivotField::GetDragToHide ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DragToHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2445)
inline void Excel::IPivotField::PutDragToHide ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToHide(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2446)
inline VARIANT_BOOL Excel::IPivotField::GetDragToPage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DragToPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2447)
inline void Excel::IPivotField::PutDragToPage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToPage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2448)
inline VARIANT_BOOL Excel::IPivotField::GetDragToRow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DragToRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2449)
inline void Excel::IPivotField::PutDragToRow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2450)
inline VARIANT_BOOL Excel::IPivotField::GetDragToData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DragToData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2451)
inline void Excel::IPivotField::PutDragToData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2452)
inline _bstr_t Excel::IPivotField::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2453)
inline void Excel::IPivotField::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2454)
inline VARIANT_BOOL Excel::IPivotField::GetIsCalculated ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsCalculated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2455)
inline long Excel::IPivotField::GetMemoryUsed ( ) {
    long _result;
    HRESULT _hr = get_MemoryUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2456)
inline VARIANT_BOOL Excel::IPivotField::GetServerBased ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ServerBased(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2457)
inline void Excel::IPivotField::PutServerBased ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ServerBased(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2458)
inline HRESULT Excel::IPivotField::AutoSort ( long Order, _bstr_t Field ) {
    HRESULT _hr = raw_AutoSort(Order, Field);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2459)
inline HRESULT Excel::IPivotField::AutoShow ( long Type, long Range, long Count, _bstr_t Field ) {
    HRESULT _hr = raw_AutoShow(Type, Range, Count, Field);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2460)
inline long Excel::IPivotField::GetAutoSortOrder ( ) {
    long _result;
    HRESULT _hr = get_AutoSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2461)
inline _bstr_t Excel::IPivotField::GetAutoSortField ( ) {
    BSTR _result;
    HRESULT _hr = get_AutoSortField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2462)
inline long Excel::IPivotField::GetAutoShowType ( ) {
    long _result;
    HRESULT _hr = get_AutoShowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2463)
inline long Excel::IPivotField::GetAutoShowRange ( ) {
    long _result;
    HRESULT _hr = get_AutoShowRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2464)
inline long Excel::IPivotField::GetAutoShowCount ( ) {
    long _result;
    HRESULT _hr = get_AutoShowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2465)
inline _bstr_t Excel::IPivotField::GetAutoShowField ( ) {
    BSTR _result;
    HRESULT _hr = get_AutoShowField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2466)
inline VARIANT_BOOL Excel::IPivotField::GetLayoutBlankLine ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LayoutBlankLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2467)
inline void Excel::IPivotField::PutLayoutBlankLine ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LayoutBlankLine(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2468)
inline enum XlSubtototalLocationType Excel::IPivotField::GetLayoutSubtotalLocation ( ) {
    enum XlSubtototalLocationType _result;
    HRESULT _hr = get_LayoutSubtotalLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2469)
inline void Excel::IPivotField::PutLayoutSubtotalLocation ( enum XlSubtototalLocationType RHS ) {
    HRESULT _hr = put_LayoutSubtotalLocation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2470)
inline VARIANT_BOOL Excel::IPivotField::GetLayoutPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LayoutPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2471)
inline void Excel::IPivotField::PutLayoutPageBreak ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LayoutPageBreak(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2472)
inline enum XlLayoutFormType Excel::IPivotField::GetLayoutForm ( ) {
    enum XlLayoutFormType _result;
    HRESULT _hr = get_LayoutForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2473)
inline void Excel::IPivotField::PutLayoutForm ( enum XlLayoutFormType RHS ) {
    HRESULT _hr = put_LayoutForm(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2474)
inline _bstr_t Excel::IPivotField::GetSubtotalName ( ) {
    BSTR _result;
    HRESULT _hr = get_SubtotalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2475)
inline void Excel::IPivotField::PutSubtotalName ( _bstr_t RHS ) {
    HRESULT _hr = put_SubtotalName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2476)
inline _bstr_t Excel::IPivotField::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2477)
inline void Excel::IPivotField::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2478)
inline VARIANT_BOOL Excel::IPivotField::GetDrilledDown ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DrilledDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2479)
inline void Excel::IPivotField::PutDrilledDown ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DrilledDown(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2480)
inline Excel::CubeFieldPtr Excel::IPivotField::GetCubeField ( ) {
    struct CubeField * _result;
    HRESULT _hr = get_CubeField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldPtr(_result, false);
}

#pragma implementation_key(2481)
inline _bstr_t Excel::IPivotField::GetCurrentPageName ( ) {
    BSTR _result;
    HRESULT _hr = get_CurrentPageName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2482)
inline void Excel::IPivotField::PutCurrentPageName ( _bstr_t RHS ) {
    HRESULT _hr = put_CurrentPageName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2483)
inline _bstr_t Excel::IPivotField::GetStandardFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_StandardFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2484)
inline void Excel::IPivotField::PutStandardFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_StandardFormula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2485)
inline _variant_t Excel::IPivotField::GetHiddenItemsList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HiddenItemsList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2486)
inline void Excel::IPivotField::PutHiddenItemsList ( const _variant_t & RHS ) {
    HRESULT _hr = put_HiddenItemsList(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2487)
inline VARIANT_BOOL Excel::IPivotField::GetDatabaseSort ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DatabaseSort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2488)
inline void Excel::IPivotField::PutDatabaseSort ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DatabaseSort(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2489)
inline VARIANT_BOOL Excel::IPivotField::GetIsMemberProperty ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsMemberProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2490)
inline Excel::PivotFieldPtr Excel::IPivotField::GetPropertyParentField ( ) {
    struct PivotField * _result;
    HRESULT _hr = get_PropertyParentField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(2491)
inline long Excel::IPivotField::GetPropertyOrder ( ) {
    long _result;
    HRESULT _hr = get_PropertyOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2492)
inline void Excel::IPivotField::PutPropertyOrder ( long RHS ) {
    HRESULT _hr = put_PropertyOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2493)
inline VARIANT_BOOL Excel::IPivotField::GetEnableItemSelection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableItemSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2494)
inline void Excel::IPivotField::PutEnableItemSelection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableItemSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2495)
inline _variant_t Excel::IPivotField::GetCurrentPageList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentPageList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2496)
inline void Excel::IPivotField::PutCurrentPageList ( const _variant_t & RHS ) {
    HRESULT _hr = put_CurrentPageList(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2497)
inline HRESULT Excel::IPivotField::AddPageItem ( _bstr_t Item, const _variant_t & ClearList ) {
    HRESULT _hr = raw_AddPageItem(Item, ClearList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPivotFields wrapper method implementations
//

#pragma implementation_key(2498)
inline Excel::_ApplicationPtr Excel::IPivotFields::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2499)
inline enum XlCreator Excel::IPivotFields::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2500)
inline Excel::PivotTablePtr Excel::IPivotFields::GetParent ( ) {
    struct PivotTable * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(2501)
inline long Excel::IPivotFields::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2502)
inline IDispatchPtr Excel::IPivotFields::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2503)
inline IUnknownPtr Excel::IPivotFields::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICalculatedFields wrapper method implementations
//

#pragma implementation_key(2504)
inline Excel::_ApplicationPtr Excel::ICalculatedFields::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2505)
inline enum XlCreator Excel::ICalculatedFields::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2506)
inline IDispatchPtr Excel::ICalculatedFields::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2507)
inline long Excel::ICalculatedFields::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2508)
inline Excel::PivotFieldPtr Excel::ICalculatedFields::_Add ( _bstr_t Name, _bstr_t Formula ) {
    struct PivotField * _result;
    HRESULT _hr = raw__Add(Name, Formula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(2509)
inline Excel::PivotFieldPtr Excel::ICalculatedFields::Item ( const _variant_t & Index ) {
    struct PivotField * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(2510)
inline Excel::PivotFieldPtr Excel::ICalculatedFields::Get_Default ( const _variant_t & Field ) {
    struct PivotField * _result;
    HRESULT _hr = get__Default(Field, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(2511)
inline IUnknownPtr Excel::ICalculatedFields::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2512)
inline Excel::PivotFieldPtr Excel::ICalculatedFields::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula ) {
    struct PivotField * _result;
    HRESULT _hr = raw_Add(Name, Formula, UseStandardFormula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

//
// interface IPivotItem wrapper method implementations
//

#pragma implementation_key(2513)
inline Excel::_ApplicationPtr Excel::IPivotItem::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2514)
inline enum XlCreator Excel::IPivotItem::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2515)
inline Excel::PivotFieldPtr Excel::IPivotItem::GetParent ( ) {
    struct PivotField * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(2516)
inline _variant_t Excel::IPivotItem::GetChildItems ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChildItems(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2517)
inline Excel::RangePtr Excel::IPivotItem::GetDataRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_DataRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2518)
inline _bstr_t Excel::IPivotItem::Get_Default ( ) {
    BSTR _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2519)
inline void Excel::IPivotItem::Put_Default ( _bstr_t RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2520)
inline Excel::RangePtr Excel::IPivotItem::GetLabelRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_LabelRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2521)
inline _bstr_t Excel::IPivotItem::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2522)
inline void Excel::IPivotItem::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2523)
inline Excel::PivotItemPtr Excel::IPivotItem::GetParentItem ( ) {
    struct PivotItem * _result;
    HRESULT _hr = get_ParentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(2524)
inline VARIANT_BOOL Excel::IPivotItem::GetParentShowDetail ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ParentShowDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2525)
inline long Excel::IPivotItem::GetPosition ( ) {
    long _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2526)
inline void Excel::IPivotItem::PutPosition ( long RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2527)
inline VARIANT_BOOL Excel::IPivotItem::GetShowDetail ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2528)
inline void Excel::IPivotItem::PutShowDetail ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowDetail(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2529)
inline _variant_t Excel::IPivotItem::GetSourceName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2530)
inline _bstr_t Excel::IPivotItem::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2531)
inline void Excel::IPivotItem::PutValue ( _bstr_t RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2532)
inline VARIANT_BOOL Excel::IPivotItem::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2533)
inline void Excel::IPivotItem::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2534)
inline HRESULT Excel::IPivotItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2535)
inline VARIANT_BOOL Excel::IPivotItem::GetIsCalculated ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsCalculated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2536)
inline long Excel::IPivotItem::GetRecordCount ( ) {
    long _result;
    HRESULT _hr = get_RecordCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2537)
inline _bstr_t Excel::IPivotItem::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2538)
inline void Excel::IPivotItem::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2539)
inline _bstr_t Excel::IPivotItem::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2540)
inline void Excel::IPivotItem::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2541)
inline VARIANT_BOOL Excel::IPivotItem::GetDrilledDown ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DrilledDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2542)
inline void Excel::IPivotItem::PutDrilledDown ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DrilledDown(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2543)
inline _bstr_t Excel::IPivotItem::GetStandardFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_StandardFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2544)
inline void Excel::IPivotItem::PutStandardFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_StandardFormula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2545)
inline _bstr_t Excel::IPivotItem::GetSourceNameStandard ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceNameStandard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IPivotItems wrapper method implementations
//

#pragma implementation_key(2546)
inline Excel::_ApplicationPtr Excel::IPivotItems::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2547)
inline enum XlCreator Excel::IPivotItems::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2548)
inline Excel::PivotFieldPtr Excel::IPivotItems::GetParent ( ) {
    struct PivotField * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(2549)
inline HRESULT Excel::IPivotItems::Add ( _bstr_t Name ) {
    HRESULT _hr = raw_Add(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2550)
inline long Excel::IPivotItems::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2551)
inline IDispatchPtr Excel::IPivotItems::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2552)
inline IUnknownPtr Excel::IPivotItems::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICalculatedItems wrapper method implementations
//

#pragma implementation_key(2553)
inline Excel::_ApplicationPtr Excel::ICalculatedItems::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2554)
inline enum XlCreator Excel::ICalculatedItems::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2555)
inline IDispatchPtr Excel::ICalculatedItems::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2556)
inline long Excel::ICalculatedItems::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2557)
inline Excel::PivotItemPtr Excel::ICalculatedItems::_Add ( _bstr_t Name, _bstr_t Formula ) {
    struct PivotItem * _result;
    HRESULT _hr = raw__Add(Name, Formula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(2558)
inline Excel::PivotItemPtr Excel::ICalculatedItems::Item ( const _variant_t & Index ) {
    struct PivotItem * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(2559)
inline Excel::PivotItemPtr Excel::ICalculatedItems::Get_Default ( const _variant_t & Field ) {
    struct PivotItem * _result;
    HRESULT _hr = get__Default(Field, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(2560)
inline IUnknownPtr Excel::ICalculatedItems::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2561)
inline Excel::PivotItemPtr Excel::ICalculatedItems::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula ) {
    struct PivotItem * _result;
    HRESULT _hr = raw_Add(Name, Formula, UseStandardFormula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

//
// interface ICharacters wrapper method implementations
//

#pragma implementation_key(2562)
inline Excel::_ApplicationPtr Excel::ICharacters::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2563)
inline enum XlCreator Excel::ICharacters::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2564)
inline IDispatchPtr Excel::ICharacters::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2565)
inline _bstr_t Excel::ICharacters::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2566)
inline void Excel::ICharacters::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2567)
inline long Excel::ICharacters::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2568)
inline _variant_t Excel::ICharacters::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2569)
inline Excel::FontPtr Excel::ICharacters::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(2570)
inline _variant_t Excel::ICharacters::Insert ( _bstr_t String ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Insert(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2571)
inline _bstr_t Excel::ICharacters::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2572)
inline void Excel::ICharacters::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2573)
inline _bstr_t Excel::ICharacters::GetPhoneticCharacters ( ) {
    BSTR _result;
    HRESULT _hr = get_PhoneticCharacters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2574)
inline void Excel::ICharacters::PutPhoneticCharacters ( _bstr_t RHS ) {
    HRESULT _hr = put_PhoneticCharacters(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDialogs wrapper method implementations
//

#pragma implementation_key(2575)
inline Excel::_ApplicationPtr Excel::IDialogs::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2576)
inline enum XlCreator Excel::IDialogs::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2577)
inline IDispatchPtr Excel::IDialogs::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2578)
inline long Excel::IDialogs::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2579)
inline Excel::DialogPtr Excel::IDialogs::GetItem ( enum XlBuiltInDialog Index ) {
    struct Dialog * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogPtr(_result, false);
}

#pragma implementation_key(2580)
inline Excel::DialogPtr Excel::IDialogs::Get_Default ( enum XlBuiltInDialog Index ) {
    struct Dialog * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogPtr(_result, false);
}

#pragma implementation_key(2581)
inline IUnknownPtr Excel::IDialogs::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDialog wrapper method implementations
//

#pragma implementation_key(2582)
inline Excel::_ApplicationPtr Excel::IDialog::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2583)
inline enum XlCreator Excel::IDialog::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2584)
inline IDispatchPtr Excel::IDialog::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2585)
inline VARIANT_BOOL Excel::IDialog::Show ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Show(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISoundNote wrapper method implementations
//

#pragma implementation_key(2586)
inline Excel::_ApplicationPtr Excel::ISoundNote::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2587)
inline enum XlCreator Excel::ISoundNote::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2588)
inline IDispatchPtr Excel::ISoundNote::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2589)
inline _variant_t Excel::ISoundNote::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2590)
inline _variant_t Excel::ISoundNote::Import ( _bstr_t Filename ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Import(Filename, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2591)
inline _variant_t Excel::ISoundNote::Play ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Play(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2592)
inline _variant_t Excel::ISoundNote::Record ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Record(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IButton wrapper method implementations
//

#pragma implementation_key(2593)
inline Excel::_ApplicationPtr Excel::IButton::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2594)
inline enum XlCreator Excel::IButton::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2595)
inline IDispatchPtr Excel::IButton::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2596)
inline Excel::RangePtr Excel::IButton::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2597)
inline _variant_t Excel::IButton::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2598)
inline _variant_t Excel::IButton::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2599)
inline _variant_t Excel::IButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2600)
inline _variant_t Excel::IButton::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2601)
inline _variant_t Excel::IButton::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2602)
inline IDispatchPtr Excel::IButton::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2603)
inline VARIANT_BOOL Excel::IButton::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2604)
inline void Excel::IButton::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2605)
inline double Excel::IButton::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2606)
inline void Excel::IButton::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2607)
inline long Excel::IButton::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2608)
inline double Excel::IButton::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2609)
inline void Excel::IButton::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2610)
inline VARIANT_BOOL Excel::IButton::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2611)
inline void Excel::IButton::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2612)
inline _bstr_t Excel::IButton::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2613)
inline void Excel::IButton::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2614)
inline _bstr_t Excel::IButton::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2615)
inline void Excel::IButton::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2616)
inline _variant_t Excel::IButton::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2617)
inline void Excel::IButton::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2618)
inline VARIANT_BOOL Excel::IButton::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2619)
inline void Excel::IButton::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2620)
inline _variant_t Excel::IButton::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2621)
inline _variant_t Excel::IButton::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2622)
inline double Excel::IButton::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2623)
inline void Excel::IButton::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2624)
inline Excel::RangePtr Excel::IButton::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2625)
inline VARIANT_BOOL Excel::IButton::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2626)
inline void Excel::IButton::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2627)
inline double Excel::IButton::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2628)
inline void Excel::IButton::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2629)
inline long Excel::IButton::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2630)
inline Excel::ShapeRangePtr Excel::IButton::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2631)
inline VARIANT_BOOL Excel::IButton::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2632)
inline void Excel::IButton::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2633)
inline _variant_t Excel::IButton::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2634)
inline void Excel::IButton::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2635)
inline VARIANT_BOOL Excel::IButton::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2636)
inline void Excel::IButton::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2637)
inline _bstr_t Excel::IButton::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2638)
inline void Excel::IButton::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2639)
inline Excel::CharactersPtr Excel::IButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(2640)
inline _variant_t Excel::IButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2641)
inline Excel::FontPtr Excel::IButton::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(2642)
inline _bstr_t Excel::IButton::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2643)
inline void Excel::IButton::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2644)
inline _variant_t Excel::IButton::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2645)
inline void Excel::IButton::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2646)
inline VARIANT_BOOL Excel::IButton::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2647)
inline void Excel::IButton::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2648)
inline _variant_t Excel::IButton::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2649)
inline void Excel::IButton::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2650)
inline _bstr_t Excel::IButton::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2651)
inline void Excel::IButton::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2652)
inline _variant_t Excel::IButton::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2653)
inline void Excel::IButton::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2654)
inline long Excel::IButton::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2655)
inline void Excel::IButton::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2656)
inline _variant_t Excel::IButton::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2657)
inline void Excel::IButton::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2658)
inline VARIANT_BOOL Excel::IButton::GetCancelButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CancelButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2659)
inline void Excel::IButton::PutCancelButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CancelButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2660)
inline VARIANT_BOOL Excel::IButton::GetDefaultButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DefaultButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2661)
inline void Excel::IButton::PutDefaultButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DefaultButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2662)
inline VARIANT_BOOL Excel::IButton::GetDismissButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DismissButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2663)
inline void Excel::IButton::PutDismissButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DismissButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2664)
inline VARIANT_BOOL Excel::IButton::GetHelpButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HelpButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2665)
inline void Excel::IButton::PutHelpButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HelpButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2666)
inline _variant_t Excel::IButton::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2667)
inline void Excel::IButton::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IButtons wrapper method implementations
//

#pragma implementation_key(2668)
inline Excel::_ApplicationPtr Excel::IButtons::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2669)
inline enum XlCreator Excel::IButtons::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2670)
inline IDispatchPtr Excel::IButtons::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2671)
inline _variant_t Excel::IButtons::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2672)
inline _variant_t Excel::IButtons::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2673)
inline _variant_t Excel::IButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2674)
inline _variant_t Excel::IButtons::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2675)
inline _variant_t Excel::IButtons::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2676)
inline IDispatchPtr Excel::IButtons::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2677)
inline VARIANT_BOOL Excel::IButtons::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2678)
inline void Excel::IButtons::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2679)
inline double Excel::IButtons::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2680)
inline void Excel::IButtons::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2681)
inline double Excel::IButtons::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2682)
inline void Excel::IButtons::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2683)
inline VARIANT_BOOL Excel::IButtons::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2684)
inline void Excel::IButtons::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2685)
inline _bstr_t Excel::IButtons::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2686)
inline void Excel::IButtons::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2687)
inline _variant_t Excel::IButtons::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2688)
inline void Excel::IButtons::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2689)
inline VARIANT_BOOL Excel::IButtons::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2690)
inline void Excel::IButtons::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2691)
inline _variant_t Excel::IButtons::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2692)
inline _variant_t Excel::IButtons::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2693)
inline double Excel::IButtons::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2694)
inline void Excel::IButtons::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2695)
inline VARIANT_BOOL Excel::IButtons::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2696)
inline void Excel::IButtons::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2697)
inline double Excel::IButtons::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2698)
inline void Excel::IButtons::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2699)
inline long Excel::IButtons::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2700)
inline Excel::ShapeRangePtr Excel::IButtons::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2701)
inline VARIANT_BOOL Excel::IButtons::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2702)
inline void Excel::IButtons::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2703)
inline _variant_t Excel::IButtons::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2704)
inline void Excel::IButtons::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2705)
inline VARIANT_BOOL Excel::IButtons::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2706)
inline void Excel::IButtons::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2707)
inline _bstr_t Excel::IButtons::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2708)
inline void Excel::IButtons::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2709)
inline Excel::CharactersPtr Excel::IButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(2710)
inline _variant_t Excel::IButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2711)
inline Excel::FontPtr Excel::IButtons::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(2712)
inline _bstr_t Excel::IButtons::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2713)
inline void Excel::IButtons::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2714)
inline _variant_t Excel::IButtons::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2715)
inline void Excel::IButtons::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2716)
inline VARIANT_BOOL Excel::IButtons::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2717)
inline void Excel::IButtons::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2718)
inline _variant_t Excel::IButtons::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2719)
inline void Excel::IButtons::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2720)
inline _bstr_t Excel::IButtons::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2721)
inline void Excel::IButtons::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2722)
inline _variant_t Excel::IButtons::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2723)
inline void Excel::IButtons::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2724)
inline long Excel::IButtons::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2725)
inline void Excel::IButtons::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2726)
inline _variant_t Excel::IButtons::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2727)
inline void Excel::IButtons::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2728)
inline VARIANT_BOOL Excel::IButtons::GetCancelButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CancelButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2729)
inline void Excel::IButtons::PutCancelButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CancelButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2730)
inline VARIANT_BOOL Excel::IButtons::GetDefaultButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DefaultButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2731)
inline void Excel::IButtons::PutDefaultButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DefaultButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2732)
inline VARIANT_BOOL Excel::IButtons::GetDismissButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DismissButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2733)
inline void Excel::IButtons::PutDismissButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DismissButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2734)
inline VARIANT_BOOL Excel::IButtons::GetHelpButton ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HelpButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2735)
inline void Excel::IButtons::PutHelpButton ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HelpButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2736)
inline _variant_t Excel::IButtons::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2737)
inline void Excel::IButtons::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2738)
inline Excel::ButtonPtr Excel::IButtons::Add ( double Left, double Top, double Width, double Height ) {
    struct Button * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ButtonPtr(_result, false);
}

#pragma implementation_key(2739)
inline long Excel::IButtons::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2740)
inline Excel::GroupObjectPtr Excel::IButtons::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(2741)
inline IDispatchPtr Excel::IButtons::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2742)
inline IUnknownPtr Excel::IButtons::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICheckBox wrapper method implementations
//

#pragma implementation_key(2743)
inline Excel::_ApplicationPtr Excel::ICheckBox::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2744)
inline enum XlCreator Excel::ICheckBox::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2745)
inline IDispatchPtr Excel::ICheckBox::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2746)
inline Excel::RangePtr Excel::ICheckBox::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2747)
inline _variant_t Excel::ICheckBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2748)
inline _variant_t Excel::ICheckBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2749)
inline _variant_t Excel::ICheckBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2750)
inline _variant_t Excel::ICheckBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2751)
inline _variant_t Excel::ICheckBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2752)
inline IDispatchPtr Excel::ICheckBox::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2753)
inline VARIANT_BOOL Excel::ICheckBox::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2754)
inline void Excel::ICheckBox::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2755)
inline double Excel::ICheckBox::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2756)
inline void Excel::ICheckBox::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2757)
inline long Excel::ICheckBox::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2758)
inline double Excel::ICheckBox::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2759)
inline void Excel::ICheckBox::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2760)
inline VARIANT_BOOL Excel::ICheckBox::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2761)
inline void Excel::ICheckBox::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2762)
inline _bstr_t Excel::ICheckBox::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2763)
inline void Excel::ICheckBox::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2764)
inline _bstr_t Excel::ICheckBox::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2765)
inline void Excel::ICheckBox::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2766)
inline _variant_t Excel::ICheckBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2767)
inline void Excel::ICheckBox::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2768)
inline VARIANT_BOOL Excel::ICheckBox::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2769)
inline void Excel::ICheckBox::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2770)
inline _variant_t Excel::ICheckBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2771)
inline _variant_t Excel::ICheckBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2772)
inline double Excel::ICheckBox::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2773)
inline void Excel::ICheckBox::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2774)
inline Excel::RangePtr Excel::ICheckBox::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2775)
inline VARIANT_BOOL Excel::ICheckBox::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2776)
inline void Excel::ICheckBox::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2777)
inline double Excel::ICheckBox::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2778)
inline void Excel::ICheckBox::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2779)
inline long Excel::ICheckBox::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2780)
inline Excel::ShapeRangePtr Excel::ICheckBox::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2781)
inline _bstr_t Excel::ICheckBox::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2782)
inline void Excel::ICheckBox::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2783)
inline Excel::CharactersPtr Excel::ICheckBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(2784)
inline _variant_t Excel::ICheckBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2785)
inline VARIANT_BOOL Excel::ICheckBox::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2786)
inline void Excel::ICheckBox::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2787)
inline _bstr_t Excel::ICheckBox::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2788)
inline void Excel::ICheckBox::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2789)
inline _variant_t Excel::ICheckBox::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2790)
inline void Excel::ICheckBox::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2791)
inline Excel::BorderPtr Excel::ICheckBox::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(2792)
inline long Excel::ICheckBox::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2793)
inline void Excel::ICheckBox::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2794)
inline VARIANT_BOOL Excel::ICheckBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2795)
inline void Excel::ICheckBox::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2796)
inline Excel::InteriorPtr Excel::ICheckBox::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(2797)
inline _bstr_t Excel::ICheckBox::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2798)
inline void Excel::ICheckBox::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2799)
inline _variant_t Excel::ICheckBox::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2800)
inline void Excel::ICheckBox::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2801)
inline _variant_t Excel::ICheckBox::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2802)
inline void Excel::ICheckBox::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICheckBoxes wrapper method implementations
//

#pragma implementation_key(2803)
inline Excel::_ApplicationPtr Excel::ICheckBoxes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2804)
inline enum XlCreator Excel::ICheckBoxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2805)
inline IDispatchPtr Excel::ICheckBoxes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2806)
inline _variant_t Excel::ICheckBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2807)
inline _variant_t Excel::ICheckBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2808)
inline _variant_t Excel::ICheckBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2809)
inline _variant_t Excel::ICheckBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2810)
inline _variant_t Excel::ICheckBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2811)
inline IDispatchPtr Excel::ICheckBoxes::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2812)
inline VARIANT_BOOL Excel::ICheckBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2813)
inline void Excel::ICheckBoxes::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2814)
inline double Excel::ICheckBoxes::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2815)
inline void Excel::ICheckBoxes::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2816)
inline double Excel::ICheckBoxes::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2817)
inline void Excel::ICheckBoxes::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2818)
inline VARIANT_BOOL Excel::ICheckBoxes::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2819)
inline void Excel::ICheckBoxes::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2820)
inline _bstr_t Excel::ICheckBoxes::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2821)
inline void Excel::ICheckBoxes::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2822)
inline _variant_t Excel::ICheckBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2823)
inline void Excel::ICheckBoxes::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2824)
inline VARIANT_BOOL Excel::ICheckBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2825)
inline void Excel::ICheckBoxes::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2826)
inline _variant_t Excel::ICheckBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2827)
inline _variant_t Excel::ICheckBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2828)
inline double Excel::ICheckBoxes::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2829)
inline void Excel::ICheckBoxes::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2830)
inline VARIANT_BOOL Excel::ICheckBoxes::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2831)
inline void Excel::ICheckBoxes::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2832)
inline double Excel::ICheckBoxes::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2833)
inline void Excel::ICheckBoxes::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2834)
inline long Excel::ICheckBoxes::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2835)
inline Excel::ShapeRangePtr Excel::ICheckBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2836)
inline _bstr_t Excel::ICheckBoxes::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2837)
inline void Excel::ICheckBoxes::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2838)
inline Excel::CharactersPtr Excel::ICheckBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(2839)
inline _variant_t Excel::ICheckBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2840)
inline VARIANT_BOOL Excel::ICheckBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2841)
inline void Excel::ICheckBoxes::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2842)
inline _bstr_t Excel::ICheckBoxes::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2843)
inline void Excel::ICheckBoxes::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2844)
inline _variant_t Excel::ICheckBoxes::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2845)
inline void Excel::ICheckBoxes::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2846)
inline Excel::BorderPtr Excel::ICheckBoxes::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(2847)
inline long Excel::ICheckBoxes::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2848)
inline void Excel::ICheckBoxes::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2849)
inline VARIANT_BOOL Excel::ICheckBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2850)
inline void Excel::ICheckBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2851)
inline Excel::InteriorPtr Excel::ICheckBoxes::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(2852)
inline _bstr_t Excel::ICheckBoxes::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2853)
inline void Excel::ICheckBoxes::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2854)
inline _variant_t Excel::ICheckBoxes::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2855)
inline void Excel::ICheckBoxes::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2856)
inline _variant_t Excel::ICheckBoxes::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2857)
inline void Excel::ICheckBoxes::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2858)
inline Excel::CheckBoxPtr Excel::ICheckBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct CheckBox * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CheckBoxPtr(_result, false);
}

#pragma implementation_key(2859)
inline long Excel::ICheckBoxes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2860)
inline Excel::GroupObjectPtr Excel::ICheckBoxes::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(2861)
inline IDispatchPtr Excel::ICheckBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2862)
inline IUnknownPtr Excel::ICheckBoxes::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IOptionButton wrapper method implementations
//

#pragma implementation_key(2863)
inline Excel::_ApplicationPtr Excel::IOptionButton::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2864)
inline enum XlCreator Excel::IOptionButton::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2865)
inline IDispatchPtr Excel::IOptionButton::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2866)
inline Excel::RangePtr Excel::IOptionButton::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2867)
inline _variant_t Excel::IOptionButton::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2868)
inline _variant_t Excel::IOptionButton::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2869)
inline _variant_t Excel::IOptionButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2870)
inline _variant_t Excel::IOptionButton::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2871)
inline _variant_t Excel::IOptionButton::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2872)
inline IDispatchPtr Excel::IOptionButton::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2873)
inline VARIANT_BOOL Excel::IOptionButton::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2874)
inline void Excel::IOptionButton::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2875)
inline double Excel::IOptionButton::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2876)
inline void Excel::IOptionButton::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2877)
inline long Excel::IOptionButton::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2878)
inline double Excel::IOptionButton::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2879)
inline void Excel::IOptionButton::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2880)
inline VARIANT_BOOL Excel::IOptionButton::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2881)
inline void Excel::IOptionButton::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2882)
inline _bstr_t Excel::IOptionButton::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2883)
inline void Excel::IOptionButton::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2884)
inline _bstr_t Excel::IOptionButton::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2885)
inline void Excel::IOptionButton::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2886)
inline _variant_t Excel::IOptionButton::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2887)
inline void Excel::IOptionButton::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2888)
inline VARIANT_BOOL Excel::IOptionButton::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2889)
inline void Excel::IOptionButton::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2890)
inline _variant_t Excel::IOptionButton::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2891)
inline _variant_t Excel::IOptionButton::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2892)
inline double Excel::IOptionButton::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2893)
inline void Excel::IOptionButton::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2894)
inline Excel::RangePtr Excel::IOptionButton::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2895)
inline VARIANT_BOOL Excel::IOptionButton::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2896)
inline void Excel::IOptionButton::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2897)
inline double Excel::IOptionButton::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2898)
inline void Excel::IOptionButton::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2899)
inline long Excel::IOptionButton::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2900)
inline Excel::ShapeRangePtr Excel::IOptionButton::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2901)
inline _bstr_t Excel::IOptionButton::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2902)
inline void Excel::IOptionButton::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2903)
inline Excel::CharactersPtr Excel::IOptionButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(2904)
inline _variant_t Excel::IOptionButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2905)
inline VARIANT_BOOL Excel::IOptionButton::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2906)
inline void Excel::IOptionButton::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2907)
inline _bstr_t Excel::IOptionButton::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2908)
inline void Excel::IOptionButton::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2909)
inline _variant_t Excel::IOptionButton::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2910)
inline void Excel::IOptionButton::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2911)
inline Excel::BorderPtr Excel::IOptionButton::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(2912)
inline long Excel::IOptionButton::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2913)
inline void Excel::IOptionButton::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2914)
inline VARIANT_BOOL Excel::IOptionButton::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2915)
inline void Excel::IOptionButton::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2916)
inline Excel::InteriorPtr Excel::IOptionButton::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(2917)
inline _bstr_t Excel::IOptionButton::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2918)
inline void Excel::IOptionButton::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2919)
inline _variant_t Excel::IOptionButton::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2920)
inline void Excel::IOptionButton::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2921)
inline _variant_t Excel::IOptionButton::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2922)
inline void Excel::IOptionButton::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2923)
inline Excel::GroupBoxPtr Excel::IOptionButton::GetGroupBox ( ) {
    struct GroupBox * _result;
    HRESULT _hr = get_GroupBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupBoxPtr(_result, false);
}

//
// interface IOptionButtons wrapper method implementations
//

#pragma implementation_key(2924)
inline Excel::_ApplicationPtr Excel::IOptionButtons::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2925)
inline enum XlCreator Excel::IOptionButtons::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2926)
inline IDispatchPtr Excel::IOptionButtons::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2927)
inline _variant_t Excel::IOptionButtons::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2928)
inline _variant_t Excel::IOptionButtons::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2929)
inline _variant_t Excel::IOptionButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2930)
inline _variant_t Excel::IOptionButtons::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2931)
inline _variant_t Excel::IOptionButtons::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2932)
inline IDispatchPtr Excel::IOptionButtons::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2933)
inline VARIANT_BOOL Excel::IOptionButtons::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2934)
inline void Excel::IOptionButtons::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2935)
inline double Excel::IOptionButtons::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2936)
inline void Excel::IOptionButtons::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2937)
inline double Excel::IOptionButtons::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2938)
inline void Excel::IOptionButtons::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2939)
inline VARIANT_BOOL Excel::IOptionButtons::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2940)
inline void Excel::IOptionButtons::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2941)
inline _bstr_t Excel::IOptionButtons::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2942)
inline void Excel::IOptionButtons::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2943)
inline _variant_t Excel::IOptionButtons::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2944)
inline void Excel::IOptionButtons::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2945)
inline VARIANT_BOOL Excel::IOptionButtons::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2946)
inline void Excel::IOptionButtons::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2947)
inline _variant_t Excel::IOptionButtons::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2948)
inline _variant_t Excel::IOptionButtons::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2949)
inline double Excel::IOptionButtons::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2950)
inline void Excel::IOptionButtons::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2951)
inline VARIANT_BOOL Excel::IOptionButtons::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2952)
inline void Excel::IOptionButtons::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2953)
inline double Excel::IOptionButtons::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2954)
inline void Excel::IOptionButtons::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2955)
inline long Excel::IOptionButtons::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2956)
inline Excel::ShapeRangePtr Excel::IOptionButtons::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2957)
inline _bstr_t Excel::IOptionButtons::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2958)
inline void Excel::IOptionButtons::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2959)
inline Excel::CharactersPtr Excel::IOptionButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(2960)
inline _variant_t Excel::IOptionButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2961)
inline VARIANT_BOOL Excel::IOptionButtons::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2962)
inline void Excel::IOptionButtons::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2963)
inline _bstr_t Excel::IOptionButtons::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2964)
inline void Excel::IOptionButtons::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2965)
inline _variant_t Excel::IOptionButtons::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2966)
inline void Excel::IOptionButtons::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2967)
inline Excel::BorderPtr Excel::IOptionButtons::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(2968)
inline long Excel::IOptionButtons::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2969)
inline void Excel::IOptionButtons::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2970)
inline VARIANT_BOOL Excel::IOptionButtons::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2971)
inline void Excel::IOptionButtons::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2972)
inline Excel::InteriorPtr Excel::IOptionButtons::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(2973)
inline _bstr_t Excel::IOptionButtons::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2974)
inline void Excel::IOptionButtons::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2975)
inline _variant_t Excel::IOptionButtons::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2976)
inline void Excel::IOptionButtons::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2977)
inline _variant_t Excel::IOptionButtons::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2978)
inline void Excel::IOptionButtons::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2979)
inline Excel::GroupBoxPtr Excel::IOptionButtons::GetGroupBox ( ) {
    struct GroupBox * _result;
    HRESULT _hr = get_GroupBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupBoxPtr(_result, false);
}

#pragma implementation_key(2980)
inline Excel::OptionButtonPtr Excel::IOptionButtons::Add ( double Left, double Top, double Width, double Height ) {
    struct OptionButton * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OptionButtonPtr(_result, false);
}

#pragma implementation_key(2981)
inline long Excel::IOptionButtons::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2982)
inline Excel::GroupObjectPtr Excel::IOptionButtons::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(2983)
inline IDispatchPtr Excel::IOptionButtons::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2984)
inline IUnknownPtr Excel::IOptionButtons::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IEditBox wrapper method implementations
//

#pragma implementation_key(2985)
inline Excel::_ApplicationPtr Excel::IEditBox::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2986)
inline enum XlCreator Excel::IEditBox::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2987)
inline IDispatchPtr Excel::IEditBox::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2988)
inline Excel::RangePtr Excel::IEditBox::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2989)
inline _variant_t Excel::IEditBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2990)
inline _variant_t Excel::IEditBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2991)
inline _variant_t Excel::IEditBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2992)
inline _variant_t Excel::IEditBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2993)
inline _variant_t Excel::IEditBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2994)
inline IDispatchPtr Excel::IEditBox::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2995)
inline VARIANT_BOOL Excel::IEditBox::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2996)
inline void Excel::IEditBox::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2997)
inline double Excel::IEditBox::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2998)
inline void Excel::IEditBox::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2999)
inline long Excel::IEditBox::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3000)
inline double Excel::IEditBox::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3001)
inline void Excel::IEditBox::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3002)
inline VARIANT_BOOL Excel::IEditBox::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3003)
inline void Excel::IEditBox::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3004)
inline _bstr_t Excel::IEditBox::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3005)
inline void Excel::IEditBox::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3006)
inline _bstr_t Excel::IEditBox::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3007)
inline void Excel::IEditBox::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3008)
inline _variant_t Excel::IEditBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3009)
inline void Excel::IEditBox::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3010)
inline VARIANT_BOOL Excel::IEditBox::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3011)
inline void Excel::IEditBox::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3012)
inline _variant_t Excel::IEditBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3013)
inline _variant_t Excel::IEditBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3014)
inline double Excel::IEditBox::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3015)
inline void Excel::IEditBox::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3016)
inline Excel::RangePtr Excel::IEditBox::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3017)
inline VARIANT_BOOL Excel::IEditBox::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3018)
inline void Excel::IEditBox::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3019)
inline double Excel::IEditBox::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3020)
inline void Excel::IEditBox::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3021)
inline long Excel::IEditBox::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3022)
inline Excel::ShapeRangePtr Excel::IEditBox::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3023)
inline _bstr_t Excel::IEditBox::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3024)
inline void Excel::IEditBox::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3025)
inline Excel::CharactersPtr Excel::IEditBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(3026)
inline _variant_t Excel::IEditBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3027)
inline VARIANT_BOOL Excel::IEditBox::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3028)
inline void Excel::IEditBox::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3029)
inline _bstr_t Excel::IEditBox::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3030)
inline void Excel::IEditBox::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3031)
inline VARIANT_BOOL Excel::IEditBox::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayVerticalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3032)
inline void Excel::IEditBox::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayVerticalScrollBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3033)
inline long Excel::IEditBox::GetInputType ( ) {
    long _result;
    HRESULT _hr = get_InputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3034)
inline void Excel::IEditBox::PutInputType ( long RHS ) {
    HRESULT _hr = put_InputType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3035)
inline _bstr_t Excel::IEditBox::GetLinkedObject ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3036)
inline VARIANT_BOOL Excel::IEditBox::GetMultiLine ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MultiLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3037)
inline void Excel::IEditBox::PutMultiLine ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MultiLine(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3038)
inline VARIANT_BOOL Excel::IEditBox::GetPasswordEdit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasswordEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3039)
inline void Excel::IEditBox::PutPasswordEdit ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PasswordEdit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IEditBoxes wrapper method implementations
//

#pragma implementation_key(3040)
inline Excel::_ApplicationPtr Excel::IEditBoxes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3041)
inline enum XlCreator Excel::IEditBoxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3042)
inline IDispatchPtr Excel::IEditBoxes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3043)
inline _variant_t Excel::IEditBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3044)
inline _variant_t Excel::IEditBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3045)
inline _variant_t Excel::IEditBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3046)
inline _variant_t Excel::IEditBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3047)
inline _variant_t Excel::IEditBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3048)
inline IDispatchPtr Excel::IEditBoxes::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3049)
inline VARIANT_BOOL Excel::IEditBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3050)
inline void Excel::IEditBoxes::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3051)
inline double Excel::IEditBoxes::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3052)
inline void Excel::IEditBoxes::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3053)
inline double Excel::IEditBoxes::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3054)
inline void Excel::IEditBoxes::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3055)
inline VARIANT_BOOL Excel::IEditBoxes::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3056)
inline void Excel::IEditBoxes::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3057)
inline _bstr_t Excel::IEditBoxes::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3058)
inline void Excel::IEditBoxes::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3059)
inline _variant_t Excel::IEditBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3060)
inline void Excel::IEditBoxes::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3061)
inline VARIANT_BOOL Excel::IEditBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3062)
inline void Excel::IEditBoxes::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3063)
inline _variant_t Excel::IEditBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3064)
inline _variant_t Excel::IEditBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3065)
inline double Excel::IEditBoxes::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3066)
inline void Excel::IEditBoxes::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3067)
inline VARIANT_BOOL Excel::IEditBoxes::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3068)
inline void Excel::IEditBoxes::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3069)
inline double Excel::IEditBoxes::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3070)
inline void Excel::IEditBoxes::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3071)
inline long Excel::IEditBoxes::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3072)
inline Excel::ShapeRangePtr Excel::IEditBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3073)
inline _bstr_t Excel::IEditBoxes::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3074)
inline void Excel::IEditBoxes::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3075)
inline Excel::CharactersPtr Excel::IEditBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(3076)
inline _variant_t Excel::IEditBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3077)
inline VARIANT_BOOL Excel::IEditBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3078)
inline void Excel::IEditBoxes::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3079)
inline _bstr_t Excel::IEditBoxes::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3080)
inline void Excel::IEditBoxes::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3081)
inline VARIANT_BOOL Excel::IEditBoxes::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayVerticalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3082)
inline void Excel::IEditBoxes::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayVerticalScrollBar(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3083)
inline long Excel::IEditBoxes::GetInputType ( ) {
    long _result;
    HRESULT _hr = get_InputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3084)
inline void Excel::IEditBoxes::PutInputType ( long RHS ) {
    HRESULT _hr = put_InputType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3085)
inline VARIANT_BOOL Excel::IEditBoxes::GetMultiLine ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MultiLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3086)
inline void Excel::IEditBoxes::PutMultiLine ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MultiLine(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3087)
inline VARIANT_BOOL Excel::IEditBoxes::GetPasswordEdit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasswordEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3088)
inline void Excel::IEditBoxes::PutPasswordEdit ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PasswordEdit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3089)
inline Excel::EditBoxPtr Excel::IEditBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct EditBox * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EditBoxPtr(_result, false);
}

#pragma implementation_key(3090)
inline long Excel::IEditBoxes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3091)
inline Excel::GroupObjectPtr Excel::IEditBoxes::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(3092)
inline _variant_t Excel::IEditBoxes::Item ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3093)
inline IUnknownPtr Excel::IEditBoxes::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IScrollBar wrapper method implementations
//

#pragma implementation_key(3094)
inline Excel::_ApplicationPtr Excel::IScrollBar::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3095)
inline enum XlCreator Excel::IScrollBar::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3096)
inline IDispatchPtr Excel::IScrollBar::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3097)
inline Excel::RangePtr Excel::IScrollBar::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3098)
inline _variant_t Excel::IScrollBar::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3099)
inline _variant_t Excel::IScrollBar::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3100)
inline _variant_t Excel::IScrollBar::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3101)
inline _variant_t Excel::IScrollBar::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3102)
inline _variant_t Excel::IScrollBar::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3103)
inline IDispatchPtr Excel::IScrollBar::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3104)
inline VARIANT_BOOL Excel::IScrollBar::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3105)
inline void Excel::IScrollBar::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3106)
inline double Excel::IScrollBar::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3107)
inline void Excel::IScrollBar::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3108)
inline long Excel::IScrollBar::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3109)
inline double Excel::IScrollBar::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3110)
inline void Excel::IScrollBar::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3111)
inline VARIANT_BOOL Excel::IScrollBar::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3112)
inline void Excel::IScrollBar::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3113)
inline _bstr_t Excel::IScrollBar::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3114)
inline void Excel::IScrollBar::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3115)
inline _bstr_t Excel::IScrollBar::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3116)
inline void Excel::IScrollBar::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3117)
inline _variant_t Excel::IScrollBar::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3118)
inline void Excel::IScrollBar::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3119)
inline VARIANT_BOOL Excel::IScrollBar::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3120)
inline void Excel::IScrollBar::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3121)
inline _variant_t Excel::IScrollBar::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3122)
inline _variant_t Excel::IScrollBar::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3123)
inline double Excel::IScrollBar::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3124)
inline void Excel::IScrollBar::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3125)
inline Excel::RangePtr Excel::IScrollBar::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3126)
inline VARIANT_BOOL Excel::IScrollBar::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3127)
inline void Excel::IScrollBar::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3128)
inline double Excel::IScrollBar::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3129)
inline void Excel::IScrollBar::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3130)
inline long Excel::IScrollBar::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3131)
inline Excel::ShapeRangePtr Excel::IScrollBar::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3132)
inline long Excel::IScrollBar::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3133)
inline void Excel::IScrollBar::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3134)
inline VARIANT_BOOL Excel::IScrollBar::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3135)
inline void Excel::IScrollBar::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3136)
inline _bstr_t Excel::IScrollBar::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3137)
inline void Excel::IScrollBar::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3138)
inline long Excel::IScrollBar::GetMax ( ) {
    long _result;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3139)
inline void Excel::IScrollBar::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3140)
inline long Excel::IScrollBar::GetMin ( ) {
    long _result;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3141)
inline void Excel::IScrollBar::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3142)
inline long Excel::IScrollBar::GetSmallChange ( ) {
    long _result;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3143)
inline void Excel::IScrollBar::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3144)
inline long Excel::IScrollBar::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3145)
inline void Excel::IScrollBar::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3146)
inline long Excel::IScrollBar::GetLargeChange ( ) {
    long _result;
    HRESULT _hr = get_LargeChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3147)
inline void Excel::IScrollBar::PutLargeChange ( long RHS ) {
    HRESULT _hr = put_LargeChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IScrollBars wrapper method implementations
//

#pragma implementation_key(3148)
inline Excel::_ApplicationPtr Excel::IScrollBars::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3149)
inline enum XlCreator Excel::IScrollBars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3150)
inline IDispatchPtr Excel::IScrollBars::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3151)
inline _variant_t Excel::IScrollBars::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3152)
inline _variant_t Excel::IScrollBars::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3153)
inline _variant_t Excel::IScrollBars::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3154)
inline _variant_t Excel::IScrollBars::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3155)
inline _variant_t Excel::IScrollBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3156)
inline IDispatchPtr Excel::IScrollBars::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3157)
inline VARIANT_BOOL Excel::IScrollBars::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3158)
inline void Excel::IScrollBars::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3159)
inline double Excel::IScrollBars::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3160)
inline void Excel::IScrollBars::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3161)
inline double Excel::IScrollBars::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3162)
inline void Excel::IScrollBars::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3163)
inline VARIANT_BOOL Excel::IScrollBars::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3164)
inline void Excel::IScrollBars::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3165)
inline _bstr_t Excel::IScrollBars::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3166)
inline void Excel::IScrollBars::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3167)
inline _variant_t Excel::IScrollBars::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3168)
inline void Excel::IScrollBars::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3169)
inline VARIANT_BOOL Excel::IScrollBars::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3170)
inline void Excel::IScrollBars::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3171)
inline _variant_t Excel::IScrollBars::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3172)
inline _variant_t Excel::IScrollBars::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3173)
inline double Excel::IScrollBars::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3174)
inline void Excel::IScrollBars::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3175)
inline VARIANT_BOOL Excel::IScrollBars::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3176)
inline void Excel::IScrollBars::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3177)
inline double Excel::IScrollBars::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3178)
inline void Excel::IScrollBars::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3179)
inline long Excel::IScrollBars::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3180)
inline Excel::ShapeRangePtr Excel::IScrollBars::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3181)
inline long Excel::IScrollBars::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3182)
inline void Excel::IScrollBars::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3183)
inline VARIANT_BOOL Excel::IScrollBars::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3184)
inline void Excel::IScrollBars::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3185)
inline _bstr_t Excel::IScrollBars::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3186)
inline void Excel::IScrollBars::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3187)
inline long Excel::IScrollBars::GetMax ( ) {
    long _result;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3188)
inline void Excel::IScrollBars::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3189)
inline long Excel::IScrollBars::GetMin ( ) {
    long _result;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3190)
inline void Excel::IScrollBars::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3191)
inline long Excel::IScrollBars::GetSmallChange ( ) {
    long _result;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3192)
inline void Excel::IScrollBars::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3193)
inline long Excel::IScrollBars::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3194)
inline void Excel::IScrollBars::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3195)
inline long Excel::IScrollBars::GetLargeChange ( ) {
    long _result;
    HRESULT _hr = get_LargeChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3196)
inline void Excel::IScrollBars::PutLargeChange ( long RHS ) {
    HRESULT _hr = put_LargeChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3197)
inline Excel::ScrollBarPtr Excel::IScrollBars::Add ( double Left, double Top, double Width, double Height ) {
    struct ScrollBar * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScrollBarPtr(_result, false);
}

#pragma implementation_key(3198)
inline long Excel::IScrollBars::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3199)
inline Excel::GroupObjectPtr Excel::IScrollBars::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(3200)
inline IDispatchPtr Excel::IScrollBars::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3201)
inline IUnknownPtr Excel::IScrollBars::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IListBox wrapper method implementations
//

#pragma implementation_key(3202)
inline Excel::_ApplicationPtr Excel::IListBox::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3203)
inline enum XlCreator Excel::IListBox::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3204)
inline IDispatchPtr Excel::IListBox::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3205)
inline Excel::RangePtr Excel::IListBox::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3206)
inline _variant_t Excel::IListBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3207)
inline _variant_t Excel::IListBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3208)
inline _variant_t Excel::IListBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3209)
inline _variant_t Excel::IListBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3210)
inline _variant_t Excel::IListBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3211)
inline IDispatchPtr Excel::IListBox::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3212)
inline VARIANT_BOOL Excel::IListBox::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3213)
inline void Excel::IListBox::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3214)
inline double Excel::IListBox::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3215)
inline void Excel::IListBox::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3216)
inline long Excel::IListBox::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3217)
inline double Excel::IListBox::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3218)
inline void Excel::IListBox::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3219)
inline VARIANT_BOOL Excel::IListBox::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3220)
inline void Excel::IListBox::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3221)
inline _bstr_t Excel::IListBox::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3222)
inline void Excel::IListBox::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3223)
inline _bstr_t Excel::IListBox::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3224)
inline void Excel::IListBox::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3225)
inline _variant_t Excel::IListBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3226)
inline void Excel::IListBox::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3227)
inline VARIANT_BOOL Excel::IListBox::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3228)
inline void Excel::IListBox::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3229)
inline _variant_t Excel::IListBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3230)
inline _variant_t Excel::IListBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3231)
inline double Excel::IListBox::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3232)
inline void Excel::IListBox::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3233)
inline Excel::RangePtr Excel::IListBox::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3234)
inline VARIANT_BOOL Excel::IListBox::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3235)
inline void Excel::IListBox::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3236)
inline double Excel::IListBox::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3237)
inline void Excel::IListBox::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3238)
inline long Excel::IListBox::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3239)
inline Excel::ShapeRangePtr Excel::IListBox::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3240)
inline _variant_t Excel::IListBox::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddItem(Text, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3241)
inline VARIANT_BOOL Excel::IListBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3242)
inline void Excel::IListBox::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3243)
inline long Excel::IListBox::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3244)
inline void Excel::IListBox::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3245)
inline _bstr_t Excel::IListBox::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3246)
inline void Excel::IListBox::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3247)
inline _variant_t Excel::IListBox::GetLinkedObject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LinkedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3248)
inline _variant_t Excel::IListBox::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3249)
inline void Excel::IListBox::PutList ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_List(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3250)
inline long Excel::IListBox::GetListCount ( ) {
    long _result;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3251)
inline _bstr_t Excel::IListBox::GetListFillRange ( ) {
    BSTR _result;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3252)
inline void Excel::IListBox::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3253)
inline long Excel::IListBox::GetListIndex ( ) {
    long _result;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3254)
inline void Excel::IListBox::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3255)
inline long Excel::IListBox::GetMultiSelect ( ) {
    long _result;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3256)
inline void Excel::IListBox::PutMultiSelect ( long RHS ) {
    HRESULT _hr = put_MultiSelect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3257)
inline _variant_t Excel::IListBox::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3258)
inline _variant_t Excel::IListBox::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveItem(Index, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3259)
inline _variant_t Excel::IListBox::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Selected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3260)
inline void Excel::IListBox::PutSelected ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Selected(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3261)
inline long Excel::IListBox::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3262)
inline void Excel::IListBox::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IListBoxes wrapper method implementations
//

#pragma implementation_key(3263)
inline Excel::_ApplicationPtr Excel::IListBoxes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3264)
inline enum XlCreator Excel::IListBoxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3265)
inline IDispatchPtr Excel::IListBoxes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3266)
inline _variant_t Excel::IListBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3267)
inline _variant_t Excel::IListBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3268)
inline _variant_t Excel::IListBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3269)
inline _variant_t Excel::IListBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3270)
inline _variant_t Excel::IListBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3271)
inline IDispatchPtr Excel::IListBoxes::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3272)
inline VARIANT_BOOL Excel::IListBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3273)
inline void Excel::IListBoxes::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3274)
inline double Excel::IListBoxes::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3275)
inline void Excel::IListBoxes::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3276)
inline double Excel::IListBoxes::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3277)
inline void Excel::IListBoxes::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3278)
inline VARIANT_BOOL Excel::IListBoxes::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3279)
inline void Excel::IListBoxes::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3280)
inline _bstr_t Excel::IListBoxes::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3281)
inline void Excel::IListBoxes::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3282)
inline _variant_t Excel::IListBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3283)
inline void Excel::IListBoxes::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3284)
inline VARIANT_BOOL Excel::IListBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3285)
inline void Excel::IListBoxes::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3286)
inline _variant_t Excel::IListBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3287)
inline _variant_t Excel::IListBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3288)
inline double Excel::IListBoxes::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3289)
inline void Excel::IListBoxes::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3290)
inline VARIANT_BOOL Excel::IListBoxes::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3291)
inline void Excel::IListBoxes::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3292)
inline double Excel::IListBoxes::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3293)
inline void Excel::IListBoxes::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3294)
inline long Excel::IListBoxes::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3295)
inline Excel::ShapeRangePtr Excel::IListBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3296)
inline _variant_t Excel::IListBoxes::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddItem(Text, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3297)
inline VARIANT_BOOL Excel::IListBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3298)
inline void Excel::IListBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3299)
inline long Excel::IListBoxes::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3300)
inline void Excel::IListBoxes::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3301)
inline _bstr_t Excel::IListBoxes::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3302)
inline void Excel::IListBoxes::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3303)
inline _variant_t Excel::IListBoxes::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3304)
inline void Excel::IListBoxes::PutList ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_List(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3305)
inline _bstr_t Excel::IListBoxes::GetListFillRange ( ) {
    BSTR _result;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3306)
inline void Excel::IListBoxes::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3307)
inline long Excel::IListBoxes::GetListIndex ( ) {
    long _result;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3308)
inline void Excel::IListBoxes::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3309)
inline long Excel::IListBoxes::GetMultiSelect ( ) {
    long _result;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3310)
inline void Excel::IListBoxes::PutMultiSelect ( long RHS ) {
    HRESULT _hr = put_MultiSelect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3311)
inline _variant_t Excel::IListBoxes::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3312)
inline _variant_t Excel::IListBoxes::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveItem(Index, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3313)
inline _variant_t Excel::IListBoxes::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Selected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3314)
inline void Excel::IListBoxes::PutSelected ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Selected(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3315)
inline long Excel::IListBoxes::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3316)
inline void Excel::IListBoxes::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3317)
inline Excel::ListBoxPtr Excel::IListBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct ListBox * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListBoxPtr(_result, false);
}

#pragma implementation_key(3318)
inline long Excel::IListBoxes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3319)
inline Excel::GroupObjectPtr Excel::IListBoxes::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(3320)
inline IDispatchPtr Excel::IListBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3321)
inline IUnknownPtr Excel::IListBoxes::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IGroupBox wrapper method implementations
//

#pragma implementation_key(3322)
inline Excel::_ApplicationPtr Excel::IGroupBox::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3323)
inline enum XlCreator Excel::IGroupBox::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3324)
inline IDispatchPtr Excel::IGroupBox::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3325)
inline Excel::RangePtr Excel::IGroupBox::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3326)
inline _variant_t Excel::IGroupBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3327)
inline _variant_t Excel::IGroupBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3328)
inline _variant_t Excel::IGroupBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3329)
inline _variant_t Excel::IGroupBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3330)
inline _variant_t Excel::IGroupBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3331)
inline IDispatchPtr Excel::IGroupBox::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3332)
inline VARIANT_BOOL Excel::IGroupBox::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3333)
inline void Excel::IGroupBox::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3334)
inline double Excel::IGroupBox::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3335)
inline void Excel::IGroupBox::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3336)
inline long Excel::IGroupBox::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3337)
inline double Excel::IGroupBox::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3338)
inline void Excel::IGroupBox::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3339)
inline VARIANT_BOOL Excel::IGroupBox::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3340)
inline void Excel::IGroupBox::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3341)
inline _bstr_t Excel::IGroupBox::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3342)
inline void Excel::IGroupBox::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3343)
inline _bstr_t Excel::IGroupBox::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3344)
inline void Excel::IGroupBox::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3345)
inline _variant_t Excel::IGroupBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3346)
inline void Excel::IGroupBox::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3347)
inline VARIANT_BOOL Excel::IGroupBox::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3348)
inline void Excel::IGroupBox::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3349)
inline _variant_t Excel::IGroupBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3350)
inline _variant_t Excel::IGroupBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3351)
inline double Excel::IGroupBox::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3352)
inline void Excel::IGroupBox::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3353)
inline Excel::RangePtr Excel::IGroupBox::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3354)
inline VARIANT_BOOL Excel::IGroupBox::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3355)
inline void Excel::IGroupBox::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3356)
inline double Excel::IGroupBox::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3357)
inline void Excel::IGroupBox::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3358)
inline long Excel::IGroupBox::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3359)
inline Excel::ShapeRangePtr Excel::IGroupBox::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3360)
inline _bstr_t Excel::IGroupBox::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3361)
inline void Excel::IGroupBox::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3362)
inline Excel::CharactersPtr Excel::IGroupBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(3363)
inline _variant_t Excel::IGroupBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3364)
inline VARIANT_BOOL Excel::IGroupBox::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3365)
inline void Excel::IGroupBox::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3366)
inline _bstr_t Excel::IGroupBox::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3367)
inline void Excel::IGroupBox::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3368)
inline _variant_t Excel::IGroupBox::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3369)
inline void Excel::IGroupBox::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3370)
inline VARIANT_BOOL Excel::IGroupBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3371)
inline void Excel::IGroupBox::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3372)
inline _variant_t Excel::IGroupBox::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3373)
inline void Excel::IGroupBox::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGroupBoxes wrapper method implementations
//

#pragma implementation_key(3374)
inline Excel::_ApplicationPtr Excel::IGroupBoxes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3375)
inline enum XlCreator Excel::IGroupBoxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3376)
inline IDispatchPtr Excel::IGroupBoxes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3377)
inline _variant_t Excel::IGroupBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3378)
inline _variant_t Excel::IGroupBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3379)
inline _variant_t Excel::IGroupBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3380)
inline _variant_t Excel::IGroupBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3381)
inline _variant_t Excel::IGroupBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3382)
inline IDispatchPtr Excel::IGroupBoxes::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3383)
inline VARIANT_BOOL Excel::IGroupBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3384)
inline void Excel::IGroupBoxes::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3385)
inline double Excel::IGroupBoxes::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3386)
inline void Excel::IGroupBoxes::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3387)
inline double Excel::IGroupBoxes::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3388)
inline void Excel::IGroupBoxes::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3389)
inline VARIANT_BOOL Excel::IGroupBoxes::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3390)
inline void Excel::IGroupBoxes::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3391)
inline _bstr_t Excel::IGroupBoxes::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3392)
inline void Excel::IGroupBoxes::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3393)
inline _variant_t Excel::IGroupBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3394)
inline void Excel::IGroupBoxes::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3395)
inline VARIANT_BOOL Excel::IGroupBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3396)
inline void Excel::IGroupBoxes::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3397)
inline _variant_t Excel::IGroupBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3398)
inline _variant_t Excel::IGroupBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3399)
inline double Excel::IGroupBoxes::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3400)
inline void Excel::IGroupBoxes::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3401)
inline VARIANT_BOOL Excel::IGroupBoxes::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3402)
inline void Excel::IGroupBoxes::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3403)
inline double Excel::IGroupBoxes::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3404)
inline void Excel::IGroupBoxes::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3405)
inline long Excel::IGroupBoxes::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3406)
inline Excel::ShapeRangePtr Excel::IGroupBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3407)
inline _bstr_t Excel::IGroupBoxes::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3408)
inline void Excel::IGroupBoxes::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3409)
inline Excel::CharactersPtr Excel::IGroupBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(3410)
inline _variant_t Excel::IGroupBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3411)
inline VARIANT_BOOL Excel::IGroupBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3412)
inline void Excel::IGroupBoxes::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3413)
inline _bstr_t Excel::IGroupBoxes::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3414)
inline void Excel::IGroupBoxes::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3415)
inline _variant_t Excel::IGroupBoxes::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3416)
inline void Excel::IGroupBoxes::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3417)
inline VARIANT_BOOL Excel::IGroupBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3418)
inline void Excel::IGroupBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3419)
inline _variant_t Excel::IGroupBoxes::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3420)
inline void Excel::IGroupBoxes::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3421)
inline Excel::GroupBoxPtr Excel::IGroupBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct GroupBox * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupBoxPtr(_result, false);
}

#pragma implementation_key(3422)
inline long Excel::IGroupBoxes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3423)
inline Excel::GroupObjectPtr Excel::IGroupBoxes::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(3424)
inline IDispatchPtr Excel::IGroupBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3425)
inline IUnknownPtr Excel::IGroupBoxes::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDropDown wrapper method implementations
//

#pragma implementation_key(3426)
inline Excel::_ApplicationPtr Excel::IDropDown::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3427)
inline enum XlCreator Excel::IDropDown::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3428)
inline IDispatchPtr Excel::IDropDown::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3429)
inline Excel::RangePtr Excel::IDropDown::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3430)
inline _variant_t Excel::IDropDown::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3431)
inline _variant_t Excel::IDropDown::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3432)
inline _variant_t Excel::IDropDown::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3433)
inline _variant_t Excel::IDropDown::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3434)
inline _variant_t Excel::IDropDown::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3435)
inline IDispatchPtr Excel::IDropDown::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3436)
inline VARIANT_BOOL Excel::IDropDown::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3437)
inline void Excel::IDropDown::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3438)
inline double Excel::IDropDown::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3439)
inline void Excel::IDropDown::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3440)
inline long Excel::IDropDown::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3441)
inline double Excel::IDropDown::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3442)
inline void Excel::IDropDown::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3443)
inline VARIANT_BOOL Excel::IDropDown::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3444)
inline void Excel::IDropDown::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3445)
inline _bstr_t Excel::IDropDown::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3446)
inline void Excel::IDropDown::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3447)
inline _bstr_t Excel::IDropDown::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3448)
inline void Excel::IDropDown::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3449)
inline _variant_t Excel::IDropDown::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3450)
inline void Excel::IDropDown::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3451)
inline VARIANT_BOOL Excel::IDropDown::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3452)
inline void Excel::IDropDown::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3453)
inline _variant_t Excel::IDropDown::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3454)
inline _variant_t Excel::IDropDown::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3455)
inline double Excel::IDropDown::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3456)
inline void Excel::IDropDown::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3457)
inline Excel::RangePtr Excel::IDropDown::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3458)
inline VARIANT_BOOL Excel::IDropDown::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3459)
inline void Excel::IDropDown::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3460)
inline double Excel::IDropDown::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3461)
inline void Excel::IDropDown::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3462)
inline long Excel::IDropDown::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3463)
inline Excel::ShapeRangePtr Excel::IDropDown::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3464)
inline _variant_t Excel::IDropDown::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddItem(Text, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3465)
inline VARIANT_BOOL Excel::IDropDown::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3466)
inline void Excel::IDropDown::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3467)
inline long Excel::IDropDown::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3468)
inline void Excel::IDropDown::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3469)
inline _bstr_t Excel::IDropDown::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3470)
inline void Excel::IDropDown::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3471)
inline _variant_t Excel::IDropDown::GetLinkedObject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LinkedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3472)
inline _variant_t Excel::IDropDown::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3473)
inline void Excel::IDropDown::PutList ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_List(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3474)
inline long Excel::IDropDown::GetListCount ( ) {
    long _result;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3475)
inline _bstr_t Excel::IDropDown::GetListFillRange ( ) {
    BSTR _result;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3476)
inline void Excel::IDropDown::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3477)
inline long Excel::IDropDown::GetListIndex ( ) {
    long _result;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3478)
inline void Excel::IDropDown::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3479)
inline _variant_t Excel::IDropDown::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3480)
inline _variant_t Excel::IDropDown::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveItem(Index, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3481)
inline _variant_t Excel::IDropDown::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Selected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3482)
inline void Excel::IDropDown::PutSelected ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Selected(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3483)
inline long Excel::IDropDown::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3484)
inline void Excel::IDropDown::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3485)
inline _bstr_t Excel::IDropDown::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3486)
inline void Excel::IDropDown::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3487)
inline Excel::CharactersPtr Excel::IDropDown::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(3488)
inline long Excel::IDropDown::GetDropDownLines ( ) {
    long _result;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3489)
inline void Excel::IDropDown::PutDropDownLines ( long RHS ) {
    HRESULT _hr = put_DropDownLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3490)
inline _bstr_t Excel::IDropDown::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3491)
inline void Excel::IDropDown::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDropDowns wrapper method implementations
//

#pragma implementation_key(3492)
inline Excel::_ApplicationPtr Excel::IDropDowns::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3493)
inline enum XlCreator Excel::IDropDowns::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3494)
inline IDispatchPtr Excel::IDropDowns::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3495)
inline _variant_t Excel::IDropDowns::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3496)
inline _variant_t Excel::IDropDowns::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3497)
inline _variant_t Excel::IDropDowns::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3498)
inline _variant_t Excel::IDropDowns::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3499)
inline _variant_t Excel::IDropDowns::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3500)
inline IDispatchPtr Excel::IDropDowns::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3501)
inline VARIANT_BOOL Excel::IDropDowns::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3502)
inline void Excel::IDropDowns::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3503)
inline double Excel::IDropDowns::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3504)
inline void Excel::IDropDowns::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3505)
inline double Excel::IDropDowns::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3506)
inline void Excel::IDropDowns::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3507)
inline VARIANT_BOOL Excel::IDropDowns::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3508)
inline void Excel::IDropDowns::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3509)
inline _bstr_t Excel::IDropDowns::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3510)
inline void Excel::IDropDowns::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3511)
inline _variant_t Excel::IDropDowns::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3512)
inline void Excel::IDropDowns::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3513)
inline VARIANT_BOOL Excel::IDropDowns::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3514)
inline void Excel::IDropDowns::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3515)
inline _variant_t Excel::IDropDowns::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3516)
inline _variant_t Excel::IDropDowns::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3517)
inline double Excel::IDropDowns::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3518)
inline void Excel::IDropDowns::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3519)
inline VARIANT_BOOL Excel::IDropDowns::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3520)
inline void Excel::IDropDowns::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3521)
inline double Excel::IDropDowns::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3522)
inline void Excel::IDropDowns::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3523)
inline long Excel::IDropDowns::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3524)
inline Excel::ShapeRangePtr Excel::IDropDowns::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3525)
inline _variant_t Excel::IDropDowns::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddItem(Text, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3526)
inline VARIANT_BOOL Excel::IDropDowns::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3527)
inline void Excel::IDropDowns::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3528)
inline long Excel::IDropDowns::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3529)
inline void Excel::IDropDowns::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3530)
inline _bstr_t Excel::IDropDowns::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3531)
inline void Excel::IDropDowns::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3532)
inline _variant_t Excel::IDropDowns::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3533)
inline void Excel::IDropDowns::PutList ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_List(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3534)
inline _bstr_t Excel::IDropDowns::GetListFillRange ( ) {
    BSTR _result;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3535)
inline void Excel::IDropDowns::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3536)
inline long Excel::IDropDowns::GetListIndex ( ) {
    long _result;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3537)
inline void Excel::IDropDowns::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3538)
inline _variant_t Excel::IDropDowns::RemoveAllItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveAllItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3539)
inline _variant_t Excel::IDropDowns::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RemoveItem(Index, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3540)
inline _variant_t Excel::IDropDowns::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Selected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3541)
inline void Excel::IDropDowns::PutSelected ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Selected(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3542)
inline long Excel::IDropDowns::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3543)
inline void Excel::IDropDowns::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3544)
inline _bstr_t Excel::IDropDowns::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3545)
inline void Excel::IDropDowns::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3546)
inline Excel::CharactersPtr Excel::IDropDowns::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(3547)
inline long Excel::IDropDowns::GetDropDownLines ( ) {
    long _result;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3548)
inline void Excel::IDropDowns::PutDropDownLines ( long RHS ) {
    HRESULT _hr = put_DropDownLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3549)
inline _bstr_t Excel::IDropDowns::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3550)
inline void Excel::IDropDowns::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3551)
inline Excel::DropDownPtr Excel::IDropDowns::Add ( double Left, double Top, double Width, double Height, const _variant_t & Editable ) {
    struct DropDown * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, Editable, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DropDownPtr(_result, false);
}

#pragma implementation_key(3552)
inline long Excel::IDropDowns::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3553)
inline Excel::GroupObjectPtr Excel::IDropDowns::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(3554)
inline IDispatchPtr Excel::IDropDowns::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3555)
inline IUnknownPtr Excel::IDropDowns::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISpinner wrapper method implementations
//

#pragma implementation_key(3556)
inline Excel::_ApplicationPtr Excel::ISpinner::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3557)
inline enum XlCreator Excel::ISpinner::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3558)
inline IDispatchPtr Excel::ISpinner::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3559)
inline Excel::RangePtr Excel::ISpinner::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3560)
inline _variant_t Excel::ISpinner::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3561)
inline _variant_t Excel::ISpinner::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3562)
inline _variant_t Excel::ISpinner::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3563)
inline _variant_t Excel::ISpinner::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3564)
inline _variant_t Excel::ISpinner::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3565)
inline IDispatchPtr Excel::ISpinner::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3566)
inline VARIANT_BOOL Excel::ISpinner::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3567)
inline void Excel::ISpinner::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3568)
inline double Excel::ISpinner::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3569)
inline void Excel::ISpinner::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3570)
inline long Excel::ISpinner::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3571)
inline double Excel::ISpinner::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3572)
inline void Excel::ISpinner::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3573)
inline VARIANT_BOOL Excel::ISpinner::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3574)
inline void Excel::ISpinner::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3575)
inline _bstr_t Excel::ISpinner::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3576)
inline void Excel::ISpinner::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3577)
inline _bstr_t Excel::ISpinner::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3578)
inline void Excel::ISpinner::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3579)
inline _variant_t Excel::ISpinner::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3580)
inline void Excel::ISpinner::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3581)
inline VARIANT_BOOL Excel::ISpinner::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3582)
inline void Excel::ISpinner::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3583)
inline _variant_t Excel::ISpinner::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3584)
inline _variant_t Excel::ISpinner::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3585)
inline double Excel::ISpinner::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3586)
inline void Excel::ISpinner::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3587)
inline Excel::RangePtr Excel::ISpinner::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3588)
inline VARIANT_BOOL Excel::ISpinner::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3589)
inline void Excel::ISpinner::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3590)
inline double Excel::ISpinner::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3591)
inline void Excel::ISpinner::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3592)
inline long Excel::ISpinner::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3593)
inline Excel::ShapeRangePtr Excel::ISpinner::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3594)
inline long Excel::ISpinner::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3595)
inline void Excel::ISpinner::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3596)
inline VARIANT_BOOL Excel::ISpinner::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3597)
inline void Excel::ISpinner::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3598)
inline _bstr_t Excel::ISpinner::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3599)
inline void Excel::ISpinner::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3600)
inline long Excel::ISpinner::GetMax ( ) {
    long _result;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3601)
inline void Excel::ISpinner::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3602)
inline long Excel::ISpinner::GetMin ( ) {
    long _result;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3603)
inline void Excel::ISpinner::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3604)
inline long Excel::ISpinner::GetSmallChange ( ) {
    long _result;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3605)
inline void Excel::ISpinner::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3606)
inline long Excel::ISpinner::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3607)
inline void Excel::ISpinner::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpinners wrapper method implementations
//

#pragma implementation_key(3608)
inline Excel::_ApplicationPtr Excel::ISpinners::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3609)
inline enum XlCreator Excel::ISpinners::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3610)
inline IDispatchPtr Excel::ISpinners::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3611)
inline _variant_t Excel::ISpinners::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3612)
inline _variant_t Excel::ISpinners::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3613)
inline _variant_t Excel::ISpinners::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3614)
inline _variant_t Excel::ISpinners::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3615)
inline _variant_t Excel::ISpinners::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3616)
inline IDispatchPtr Excel::ISpinners::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3617)
inline VARIANT_BOOL Excel::ISpinners::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3618)
inline void Excel::ISpinners::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3619)
inline double Excel::ISpinners::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3620)
inline void Excel::ISpinners::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3621)
inline double Excel::ISpinners::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3622)
inline void Excel::ISpinners::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3623)
inline VARIANT_BOOL Excel::ISpinners::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3624)
inline void Excel::ISpinners::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3625)
inline _bstr_t Excel::ISpinners::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3626)
inline void Excel::ISpinners::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3627)
inline _variant_t Excel::ISpinners::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3628)
inline void Excel::ISpinners::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3629)
inline VARIANT_BOOL Excel::ISpinners::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3630)
inline void Excel::ISpinners::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3631)
inline _variant_t Excel::ISpinners::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3632)
inline _variant_t Excel::ISpinners::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3633)
inline double Excel::ISpinners::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3634)
inline void Excel::ISpinners::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3635)
inline VARIANT_BOOL Excel::ISpinners::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3636)
inline void Excel::ISpinners::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3637)
inline double Excel::ISpinners::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3638)
inline void Excel::ISpinners::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3639)
inline long Excel::ISpinners::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3640)
inline Excel::ShapeRangePtr Excel::ISpinners::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3641)
inline long Excel::ISpinners::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3642)
inline void Excel::ISpinners::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3643)
inline VARIANT_BOOL Excel::ISpinners::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Display3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3644)
inline void Excel::ISpinners::PutDisplay3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Display3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3645)
inline _bstr_t Excel::ISpinners::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3646)
inline void Excel::ISpinners::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3647)
inline long Excel::ISpinners::GetMax ( ) {
    long _result;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3648)
inline void Excel::ISpinners::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3649)
inline long Excel::ISpinners::GetMin ( ) {
    long _result;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3650)
inline void Excel::ISpinners::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3651)
inline long Excel::ISpinners::GetSmallChange ( ) {
    long _result;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3652)
inline void Excel::ISpinners::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3653)
inline long Excel::ISpinners::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3654)
inline void Excel::ISpinners::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3655)
inline Excel::SpinnerPtr Excel::ISpinners::Add ( double Left, double Top, double Width, double Height ) {
    struct Spinner * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SpinnerPtr(_result, false);
}

#pragma implementation_key(3656)
inline long Excel::ISpinners::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3657)
inline Excel::GroupObjectPtr Excel::ISpinners::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(3658)
inline IDispatchPtr Excel::ISpinners::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3659)
inline IUnknownPtr Excel::ISpinners::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDialogFrame wrapper method implementations
//

#pragma implementation_key(3660)
inline Excel::_ApplicationPtr Excel::IDialogFrame::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3661)
inline enum XlCreator Excel::IDialogFrame::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3662)
inline IDispatchPtr Excel::IDialogFrame::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3663)
inline _variant_t Excel::IDialogFrame::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3664)
inline double Excel::IDialogFrame::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3665)
inline void Excel::IDialogFrame::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3666)
inline double Excel::IDialogFrame::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3667)
inline void Excel::IDialogFrame::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3668)
inline VARIANT_BOOL Excel::IDialogFrame::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3669)
inline void Excel::IDialogFrame::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3670)
inline _bstr_t Excel::IDialogFrame::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3671)
inline void Excel::IDialogFrame::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3672)
inline _bstr_t Excel::IDialogFrame::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3673)
inline void Excel::IDialogFrame::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3674)
inline _variant_t Excel::IDialogFrame::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3675)
inline double Excel::IDialogFrame::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3676)
inline void Excel::IDialogFrame::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3677)
inline double Excel::IDialogFrame::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3678)
inline void Excel::IDialogFrame::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3679)
inline Excel::ShapeRangePtr Excel::IDialogFrame::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3680)
inline _bstr_t Excel::IDialogFrame::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3681)
inline void Excel::IDialogFrame::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3682)
inline Excel::CharactersPtr Excel::IDialogFrame::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(3683)
inline _variant_t Excel::IDialogFrame::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3684)
inline VARIANT_BOOL Excel::IDialogFrame::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3685)
inline void Excel::IDialogFrame::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3686)
inline _bstr_t Excel::IDialogFrame::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3687)
inline void Excel::IDialogFrame::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILabel wrapper method implementations
//

#pragma implementation_key(3688)
inline Excel::_ApplicationPtr Excel::ILabel::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3689)
inline enum XlCreator Excel::ILabel::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3690)
inline IDispatchPtr Excel::ILabel::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3691)
inline Excel::RangePtr Excel::ILabel::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3692)
inline _variant_t Excel::ILabel::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3693)
inline _variant_t Excel::ILabel::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3694)
inline _variant_t Excel::ILabel::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3695)
inline _variant_t Excel::ILabel::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3696)
inline _variant_t Excel::ILabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3697)
inline IDispatchPtr Excel::ILabel::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3698)
inline VARIANT_BOOL Excel::ILabel::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3699)
inline void Excel::ILabel::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3700)
inline double Excel::ILabel::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3701)
inline void Excel::ILabel::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3702)
inline long Excel::ILabel::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3703)
inline double Excel::ILabel::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3704)
inline void Excel::ILabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3705)
inline VARIANT_BOOL Excel::ILabel::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3706)
inline void Excel::ILabel::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3707)
inline _bstr_t Excel::ILabel::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3708)
inline void Excel::ILabel::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3709)
inline _bstr_t Excel::ILabel::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3710)
inline void Excel::ILabel::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3711)
inline _variant_t Excel::ILabel::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3712)
inline void Excel::ILabel::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3713)
inline VARIANT_BOOL Excel::ILabel::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3714)
inline void Excel::ILabel::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3715)
inline _variant_t Excel::ILabel::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3716)
inline _variant_t Excel::ILabel::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3717)
inline double Excel::ILabel::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3718)
inline void Excel::ILabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3719)
inline Excel::RangePtr Excel::ILabel::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3720)
inline VARIANT_BOOL Excel::ILabel::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3721)
inline void Excel::ILabel::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3722)
inline double Excel::ILabel::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3723)
inline void Excel::ILabel::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3724)
inline long Excel::ILabel::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3725)
inline Excel::ShapeRangePtr Excel::ILabel::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3726)
inline _bstr_t Excel::ILabel::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3727)
inline void Excel::ILabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3728)
inline Excel::CharactersPtr Excel::ILabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(3729)
inline _variant_t Excel::ILabel::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3730)
inline VARIANT_BOOL Excel::ILabel::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3731)
inline void Excel::ILabel::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3732)
inline _bstr_t Excel::ILabel::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3733)
inline void Excel::ILabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3734)
inline _variant_t Excel::ILabel::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3735)
inline void Excel::ILabel::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3736)
inline _variant_t Excel::ILabel::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3737)
inline void Excel::ILabel::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILabels wrapper method implementations
//

#pragma implementation_key(3738)
inline Excel::_ApplicationPtr Excel::ILabels::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3739)
inline enum XlCreator Excel::ILabels::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3740)
inline IDispatchPtr Excel::ILabels::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3741)
inline _variant_t Excel::ILabels::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3742)
inline _variant_t Excel::ILabels::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3743)
inline _variant_t Excel::ILabels::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3744)
inline _variant_t Excel::ILabels::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3745)
inline _variant_t Excel::ILabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3746)
inline IDispatchPtr Excel::ILabels::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3747)
inline VARIANT_BOOL Excel::ILabels::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3748)
inline void Excel::ILabels::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3749)
inline double Excel::ILabels::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3750)
inline void Excel::ILabels::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3751)
inline double Excel::ILabels::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3752)
inline void Excel::ILabels::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3753)
inline VARIANT_BOOL Excel::ILabels::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3754)
inline void Excel::ILabels::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3755)
inline _bstr_t Excel::ILabels::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3756)
inline void Excel::ILabels::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3757)
inline _variant_t Excel::ILabels::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3758)
inline void Excel::ILabels::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3759)
inline VARIANT_BOOL Excel::ILabels::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3760)
inline void Excel::ILabels::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3761)
inline _variant_t Excel::ILabels::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3762)
inline _variant_t Excel::ILabels::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3763)
inline double Excel::ILabels::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3764)
inline void Excel::ILabels::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3765)
inline VARIANT_BOOL Excel::ILabels::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3766)
inline void Excel::ILabels::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3767)
inline double Excel::ILabels::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3768)
inline void Excel::ILabels::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3769)
inline long Excel::ILabels::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3770)
inline Excel::ShapeRangePtr Excel::ILabels::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3771)
inline _bstr_t Excel::ILabels::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3772)
inline void Excel::ILabels::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3773)
inline Excel::CharactersPtr Excel::ILabels::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(3774)
inline _variant_t Excel::ILabels::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3775)
inline VARIANT_BOOL Excel::ILabels::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3776)
inline void Excel::ILabels::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3777)
inline _bstr_t Excel::ILabels::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3778)
inline void Excel::ILabels::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3779)
inline _variant_t Excel::ILabels::GetAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3780)
inline void Excel::ILabels::PutAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Accelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3781)
inline _variant_t Excel::ILabels::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PhoneticAccelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3782)
inline void Excel::ILabels::PutPhoneticAccelerator ( const _variant_t & RHS ) {
    HRESULT _hr = put_PhoneticAccelerator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3783)
inline Excel::LabelPtr Excel::ILabels::Add ( double Left, double Top, double Width, double Height ) {
    struct Label * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LabelPtr(_result, false);
}

#pragma implementation_key(3784)
inline long Excel::ILabels::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3785)
inline Excel::GroupObjectPtr Excel::ILabels::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(3786)
inline IDispatchPtr Excel::ILabels::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3787)
inline IUnknownPtr Excel::ILabels::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPanes wrapper method implementations
//

#pragma implementation_key(3788)
inline Excel::_ApplicationPtr Excel::IPanes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3789)
inline enum XlCreator Excel::IPanes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3790)
inline IDispatchPtr Excel::IPanes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3791)
inline long Excel::IPanes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3792)
inline Excel::PanePtr Excel::IPanes::GetItem ( long Index ) {
    struct Pane * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(3793)
inline Excel::PanePtr Excel::IPanes::Get_Default ( long Index ) {
    struct Pane * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

//
// interface IPane wrapper method implementations
//

#pragma implementation_key(3794)
inline Excel::_ApplicationPtr Excel::IPane::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3795)
inline enum XlCreator Excel::IPane::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3796)
inline IDispatchPtr Excel::IPane::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3797)
inline VARIANT_BOOL Excel::IPane::Activate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Activate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3798)
inline long Excel::IPane::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3799)
inline _variant_t Excel::IPane::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_LargeScroll(Down, Up, ToRight, ToLeft, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3800)
inline long Excel::IPane::GetScrollColumn ( ) {
    long _result;
    HRESULT _hr = get_ScrollColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3801)
inline void Excel::IPane::PutScrollColumn ( long RHS ) {
    HRESULT _hr = put_ScrollColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3802)
inline long Excel::IPane::GetScrollRow ( ) {
    long _result;
    HRESULT _hr = get_ScrollRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3803)
inline void Excel::IPane::PutScrollRow ( long RHS ) {
    HRESULT _hr = put_ScrollRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3804)
inline _variant_t Excel::IPane::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SmallScroll(Down, Up, ToRight, ToLeft, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3805)
inline Excel::RangePtr Excel::IPane::GetVisibleRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_VisibleRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3806)
inline HRESULT Excel::IPane::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start ) {
    HRESULT _hr = raw_ScrollIntoView(Left, Top, Width, Height, Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IScenarios wrapper method implementations
//

#pragma implementation_key(3807)
inline Excel::_ApplicationPtr Excel::IScenarios::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3808)
inline enum XlCreator Excel::IScenarios::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3809)
inline IDispatchPtr Excel::IScenarios::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3810)
inline Excel::ScenarioPtr Excel::IScenarios::Add ( _bstr_t Name, const _variant_t & ChangingCells, const _variant_t & Values, const _variant_t & Comment, const _variant_t & Locked, const _variant_t & Hidden ) {
    struct Scenario * _result;
    HRESULT _hr = raw_Add(Name, ChangingCells, Values, Comment, Locked, Hidden, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScenarioPtr(_result, false);
}

#pragma implementation_key(3811)
inline long Excel::IScenarios::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3812)
inline _variant_t Excel::IScenarios::CreateSummary ( enum XlSummaryReportType ReportType, const _variant_t & ResultCells ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CreateSummary(ReportType, ResultCells, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3813)
inline Excel::ScenarioPtr Excel::IScenarios::Item ( const _variant_t & Index ) {
    struct Scenario * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScenarioPtr(_result, false);
}

#pragma implementation_key(3814)
inline _variant_t Excel::IScenarios::Merge ( const _variant_t & Source ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Merge(Source, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3815)
inline IUnknownPtr Excel::IScenarios::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IScenario wrapper method implementations
//

#pragma implementation_key(3816)
inline Excel::_ApplicationPtr Excel::IScenario::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3817)
inline enum XlCreator Excel::IScenario::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3818)
inline IDispatchPtr Excel::IScenario::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3819)
inline _variant_t Excel::IScenario::ChangeScenario ( const _variant_t & ChangingCells, const _variant_t & Values ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ChangeScenario(ChangingCells, Values, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3820)
inline Excel::RangePtr Excel::IScenario::GetChangingCells ( ) {
    struct Range * _result;
    HRESULT _hr = get_ChangingCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3821)
inline _bstr_t Excel::IScenario::GetComment ( ) {
    BSTR _result;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3822)
inline void Excel::IScenario::PutComment ( _bstr_t RHS ) {
    HRESULT _hr = put_Comment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3823)
inline _variant_t Excel::IScenario::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3824)
inline VARIANT_BOOL Excel::IScenario::GetHidden ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3825)
inline void Excel::IScenario::PutHidden ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Hidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3826)
inline long Excel::IScenario::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3827)
inline VARIANT_BOOL Excel::IScenario::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3828)
inline void Excel::IScenario::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3829)
inline _bstr_t Excel::IScenario::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3830)
inline void Excel::IScenario::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3831)
inline _variant_t Excel::IScenario::Show ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3832)
inline _variant_t Excel::IScenario::GetValues ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Values(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IGroupObject wrapper method implementations
//

#pragma implementation_key(3833)
inline Excel::_ApplicationPtr Excel::IGroupObject::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3834)
inline enum XlCreator Excel::IGroupObject::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3835)
inline IDispatchPtr Excel::IGroupObject::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3836)
inline Excel::RangePtr Excel::IGroupObject::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3837)
inline _variant_t Excel::IGroupObject::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3838)
inline _variant_t Excel::IGroupObject::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3839)
inline _variant_t Excel::IGroupObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3840)
inline _variant_t Excel::IGroupObject::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3841)
inline _variant_t Excel::IGroupObject::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3842)
inline IDispatchPtr Excel::IGroupObject::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3843)
inline VARIANT_BOOL Excel::IGroupObject::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3844)
inline void Excel::IGroupObject::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3845)
inline double Excel::IGroupObject::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3846)
inline void Excel::IGroupObject::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3847)
inline long Excel::IGroupObject::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3848)
inline double Excel::IGroupObject::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3849)
inline void Excel::IGroupObject::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3850)
inline VARIANT_BOOL Excel::IGroupObject::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3851)
inline void Excel::IGroupObject::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3852)
inline _bstr_t Excel::IGroupObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3853)
inline void Excel::IGroupObject::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3854)
inline _bstr_t Excel::IGroupObject::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3855)
inline void Excel::IGroupObject::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3856)
inline _variant_t Excel::IGroupObject::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3857)
inline void Excel::IGroupObject::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3858)
inline VARIANT_BOOL Excel::IGroupObject::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3859)
inline void Excel::IGroupObject::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3860)
inline _variant_t Excel::IGroupObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3861)
inline _variant_t Excel::IGroupObject::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3862)
inline double Excel::IGroupObject::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3863)
inline void Excel::IGroupObject::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3864)
inline Excel::RangePtr Excel::IGroupObject::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3865)
inline VARIANT_BOOL Excel::IGroupObject::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3866)
inline void Excel::IGroupObject::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3867)
inline double Excel::IGroupObject::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3868)
inline void Excel::IGroupObject::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3869)
inline long Excel::IGroupObject::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3870)
inline Excel::ShapeRangePtr Excel::IGroupObject::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3871)
inline VARIANT_BOOL Excel::IGroupObject::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3872)
inline void Excel::IGroupObject::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3873)
inline _variant_t Excel::IGroupObject::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3874)
inline void Excel::IGroupObject::PutArrowHeadLength ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadLength(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3875)
inline _variant_t Excel::IGroupObject::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3876)
inline void Excel::IGroupObject::PutArrowHeadStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3877)
inline _variant_t Excel::IGroupObject::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3878)
inline void Excel::IGroupObject::PutArrowHeadWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3879)
inline VARIANT_BOOL Excel::IGroupObject::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3880)
inline void Excel::IGroupObject::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3881)
inline Excel::BorderPtr Excel::IGroupObject::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(3882)
inline _variant_t Excel::IGroupObject::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3883)
inline long Excel::IGroupObject::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3884)
inline void Excel::IGroupObject::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3885)
inline Excel::FontPtr Excel::IGroupObject::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(3886)
inline _variant_t Excel::IGroupObject::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3887)
inline void Excel::IGroupObject::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3888)
inline Excel::InteriorPtr Excel::IGroupObject::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(3889)
inline _variant_t Excel::IGroupObject::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3890)
inline void Excel::IGroupObject::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3891)
inline VARIANT_BOOL Excel::IGroupObject::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3892)
inline void Excel::IGroupObject::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3893)
inline VARIANT_BOOL Excel::IGroupObject::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3894)
inline void Excel::IGroupObject::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3895)
inline IDispatchPtr Excel::IGroupObject::Ungroup ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3896)
inline _variant_t Excel::IGroupObject::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3897)
inline void Excel::IGroupObject::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3898)
inline long Excel::IGroupObject::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3899)
inline void Excel::IGroupObject::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGroupObjects wrapper method implementations
//

#pragma implementation_key(3900)
inline Excel::_ApplicationPtr Excel::IGroupObjects::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3901)
inline enum XlCreator Excel::IGroupObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3902)
inline IDispatchPtr Excel::IGroupObjects::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3903)
inline _variant_t Excel::IGroupObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3904)
inline _variant_t Excel::IGroupObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3905)
inline _variant_t Excel::IGroupObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3906)
inline _variant_t Excel::IGroupObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3907)
inline _variant_t Excel::IGroupObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3908)
inline IDispatchPtr Excel::IGroupObjects::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3909)
inline VARIANT_BOOL Excel::IGroupObjects::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3910)
inline void Excel::IGroupObjects::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3911)
inline double Excel::IGroupObjects::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3912)
inline void Excel::IGroupObjects::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3913)
inline double Excel::IGroupObjects::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3914)
inline void Excel::IGroupObjects::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3915)
inline VARIANT_BOOL Excel::IGroupObjects::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3916)
inline void Excel::IGroupObjects::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3917)
inline _bstr_t Excel::IGroupObjects::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3918)
inline void Excel::IGroupObjects::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3919)
inline _variant_t Excel::IGroupObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3920)
inline void Excel::IGroupObjects::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3921)
inline VARIANT_BOOL Excel::IGroupObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3922)
inline void Excel::IGroupObjects::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3923)
inline _variant_t Excel::IGroupObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3924)
inline _variant_t Excel::IGroupObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3925)
inline double Excel::IGroupObjects::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3926)
inline void Excel::IGroupObjects::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3927)
inline VARIANT_BOOL Excel::IGroupObjects::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3928)
inline void Excel::IGroupObjects::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3929)
inline double Excel::IGroupObjects::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3930)
inline void Excel::IGroupObjects::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3931)
inline long Excel::IGroupObjects::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3932)
inline Excel::ShapeRangePtr Excel::IGroupObjects::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3933)
inline VARIANT_BOOL Excel::IGroupObjects::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3934)
inline void Excel::IGroupObjects::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3935)
inline _variant_t Excel::IGroupObjects::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3936)
inline void Excel::IGroupObjects::PutArrowHeadLength ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadLength(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3937)
inline _variant_t Excel::IGroupObjects::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3938)
inline void Excel::IGroupObjects::PutArrowHeadStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3939)
inline _variant_t Excel::IGroupObjects::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3940)
inline void Excel::IGroupObjects::PutArrowHeadWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3941)
inline VARIANT_BOOL Excel::IGroupObjects::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3942)
inline void Excel::IGroupObjects::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3943)
inline Excel::BorderPtr Excel::IGroupObjects::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(3944)
inline _variant_t Excel::IGroupObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3945)
inline long Excel::IGroupObjects::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3946)
inline void Excel::IGroupObjects::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3947)
inline Excel::FontPtr Excel::IGroupObjects::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(3948)
inline _variant_t Excel::IGroupObjects::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3949)
inline void Excel::IGroupObjects::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3950)
inline Excel::InteriorPtr Excel::IGroupObjects::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(3951)
inline _variant_t Excel::IGroupObjects::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3952)
inline void Excel::IGroupObjects::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3953)
inline VARIANT_BOOL Excel::IGroupObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3954)
inline void Excel::IGroupObjects::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3955)
inline VARIANT_BOOL Excel::IGroupObjects::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3956)
inline void Excel::IGroupObjects::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3957)
inline IDispatchPtr Excel::IGroupObjects::Ungroup ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3958)
inline _variant_t Excel::IGroupObjects::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3959)
inline void Excel::IGroupObjects::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3960)
inline long Excel::IGroupObjects::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3961)
inline void Excel::IGroupObjects::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3962)
inline long Excel::IGroupObjects::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3963)
inline Excel::GroupObjectPtr Excel::IGroupObjects::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(3964)
inline IDispatchPtr Excel::IGroupObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3965)
inline IUnknownPtr Excel::IGroupObjects::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ILine wrapper method implementations
//

#pragma implementation_key(3966)
inline Excel::_ApplicationPtr Excel::ILine::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3967)
inline enum XlCreator Excel::ILine::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3968)
inline IDispatchPtr Excel::ILine::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3969)
inline Excel::RangePtr Excel::ILine::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3970)
inline _variant_t Excel::ILine::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3971)
inline _variant_t Excel::ILine::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3972)
inline _variant_t Excel::ILine::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3973)
inline _variant_t Excel::ILine::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3974)
inline _variant_t Excel::ILine::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3975)
inline IDispatchPtr Excel::ILine::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3976)
inline VARIANT_BOOL Excel::ILine::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3977)
inline void Excel::ILine::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3978)
inline double Excel::ILine::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3979)
inline void Excel::ILine::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3980)
inline long Excel::ILine::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3981)
inline double Excel::ILine::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3982)
inline void Excel::ILine::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3983)
inline VARIANT_BOOL Excel::ILine::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3984)
inline void Excel::ILine::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3985)
inline _bstr_t Excel::ILine::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3986)
inline void Excel::ILine::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3987)
inline _bstr_t Excel::ILine::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3988)
inline void Excel::ILine::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3989)
inline _variant_t Excel::ILine::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3990)
inline void Excel::ILine::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3991)
inline VARIANT_BOOL Excel::ILine::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3992)
inline void Excel::ILine::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3993)
inline _variant_t Excel::ILine::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3994)
inline _variant_t Excel::ILine::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3995)
inline double Excel::ILine::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3996)
inline void Excel::ILine::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3997)
inline Excel::RangePtr Excel::ILine::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3998)
inline VARIANT_BOOL Excel::ILine::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3999)
inline void Excel::ILine::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4000)
inline double Excel::ILine::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4001)
inline void Excel::ILine::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4002)
inline long Excel::ILine::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4003)
inline Excel::ShapeRangePtr Excel::ILine::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4004)
inline _variant_t Excel::ILine::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4005)
inline void Excel::ILine::PutArrowHeadLength ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadLength(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4006)
inline _variant_t Excel::ILine::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4007)
inline void Excel::ILine::PutArrowHeadStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4008)
inline _variant_t Excel::ILine::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4009)
inline void Excel::ILine::PutArrowHeadWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4010)
inline Excel::BorderPtr Excel::ILine::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

//
// interface ILines wrapper method implementations
//

#pragma implementation_key(4011)
inline Excel::_ApplicationPtr Excel::ILines::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4012)
inline enum XlCreator Excel::ILines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4013)
inline IDispatchPtr Excel::ILines::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4014)
inline _variant_t Excel::ILines::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4015)
inline _variant_t Excel::ILines::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4016)
inline _variant_t Excel::ILines::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4017)
inline _variant_t Excel::ILines::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4018)
inline _variant_t Excel::ILines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4019)
inline IDispatchPtr Excel::ILines::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4020)
inline VARIANT_BOOL Excel::ILines::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4021)
inline void Excel::ILines::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4022)
inline double Excel::ILines::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4023)
inline void Excel::ILines::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4024)
inline double Excel::ILines::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4025)
inline void Excel::ILines::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4026)
inline VARIANT_BOOL Excel::ILines::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4027)
inline void Excel::ILines::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4028)
inline _bstr_t Excel::ILines::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4029)
inline void Excel::ILines::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4030)
inline _variant_t Excel::ILines::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4031)
inline void Excel::ILines::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4032)
inline VARIANT_BOOL Excel::ILines::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4033)
inline void Excel::ILines::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4034)
inline _variant_t Excel::ILines::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4035)
inline _variant_t Excel::ILines::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4036)
inline double Excel::ILines::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4037)
inline void Excel::ILines::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4038)
inline VARIANT_BOOL Excel::ILines::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4039)
inline void Excel::ILines::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4040)
inline double Excel::ILines::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4041)
inline void Excel::ILines::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4042)
inline long Excel::ILines::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4043)
inline Excel::ShapeRangePtr Excel::ILines::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4044)
inline _variant_t Excel::ILines::GetArrowHeadLength ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4045)
inline void Excel::ILines::PutArrowHeadLength ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadLength(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4046)
inline _variant_t Excel::ILines::GetArrowHeadStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4047)
inline void Excel::ILines::PutArrowHeadStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4048)
inline _variant_t Excel::ILines::GetArrowHeadWidth ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ArrowHeadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4049)
inline void Excel::ILines::PutArrowHeadWidth ( const _variant_t & RHS ) {
    HRESULT _hr = put_ArrowHeadWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4050)
inline Excel::BorderPtr Excel::ILines::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4051)
inline Excel::LinePtr Excel::ILines::Add ( double X1, double Y1, double X2, double Y2 ) {
    struct Line * _result;
    HRESULT _hr = raw_Add(X1, Y1, X2, Y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinePtr(_result, false);
}

#pragma implementation_key(4052)
inline long Excel::ILines::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4053)
inline Excel::GroupObjectPtr Excel::ILines::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(4054)
inline IDispatchPtr Excel::ILines::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4055)
inline IUnknownPtr Excel::ILines::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IRectangle wrapper method implementations
//

#pragma implementation_key(4056)
inline Excel::_ApplicationPtr Excel::IRectangle::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4057)
inline enum XlCreator Excel::IRectangle::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4058)
inline IDispatchPtr Excel::IRectangle::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4059)
inline Excel::RangePtr Excel::IRectangle::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4060)
inline _variant_t Excel::IRectangle::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4061)
inline _variant_t Excel::IRectangle::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4062)
inline _variant_t Excel::IRectangle::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4063)
inline _variant_t Excel::IRectangle::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4064)
inline _variant_t Excel::IRectangle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4065)
inline IDispatchPtr Excel::IRectangle::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4066)
inline VARIANT_BOOL Excel::IRectangle::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4067)
inline void Excel::IRectangle::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4068)
inline double Excel::IRectangle::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4069)
inline void Excel::IRectangle::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4070)
inline long Excel::IRectangle::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4071)
inline double Excel::IRectangle::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4072)
inline void Excel::IRectangle::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4073)
inline VARIANT_BOOL Excel::IRectangle::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4074)
inline void Excel::IRectangle::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4075)
inline _bstr_t Excel::IRectangle::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4076)
inline void Excel::IRectangle::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4077)
inline _bstr_t Excel::IRectangle::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4078)
inline void Excel::IRectangle::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4079)
inline _variant_t Excel::IRectangle::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4080)
inline void Excel::IRectangle::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4081)
inline VARIANT_BOOL Excel::IRectangle::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4082)
inline void Excel::IRectangle::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4083)
inline _variant_t Excel::IRectangle::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4084)
inline _variant_t Excel::IRectangle::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4085)
inline double Excel::IRectangle::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4086)
inline void Excel::IRectangle::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4087)
inline Excel::RangePtr Excel::IRectangle::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4088)
inline VARIANT_BOOL Excel::IRectangle::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4089)
inline void Excel::IRectangle::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4090)
inline double Excel::IRectangle::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4091)
inline void Excel::IRectangle::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4092)
inline long Excel::IRectangle::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4093)
inline Excel::ShapeRangePtr Excel::IRectangle::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4094)
inline VARIANT_BOOL Excel::IRectangle::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4095)
inline void Excel::IRectangle::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4096)
inline _variant_t Excel::IRectangle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4097)
inline void Excel::IRectangle::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4098)
inline VARIANT_BOOL Excel::IRectangle::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4099)
inline void Excel::IRectangle::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4100)
inline _bstr_t Excel::IRectangle::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4101)
inline void Excel::IRectangle::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4102)
inline Excel::CharactersPtr Excel::IRectangle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(4103)
inline _variant_t Excel::IRectangle::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4104)
inline Excel::FontPtr Excel::IRectangle::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(4105)
inline _bstr_t Excel::IRectangle::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4106)
inline void Excel::IRectangle::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4107)
inline _variant_t Excel::IRectangle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4108)
inline void Excel::IRectangle::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4109)
inline VARIANT_BOOL Excel::IRectangle::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4110)
inline void Excel::IRectangle::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4111)
inline _variant_t Excel::IRectangle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4112)
inline void Excel::IRectangle::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4113)
inline _bstr_t Excel::IRectangle::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4114)
inline void Excel::IRectangle::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4115)
inline _variant_t Excel::IRectangle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4116)
inline void Excel::IRectangle::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4117)
inline long Excel::IRectangle::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4118)
inline void Excel::IRectangle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4119)
inline Excel::BorderPtr Excel::IRectangle::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4120)
inline Excel::InteriorPtr Excel::IRectangle::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4121)
inline VARIANT_BOOL Excel::IRectangle::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4122)
inline void Excel::IRectangle::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4123)
inline VARIANT_BOOL Excel::IRectangle::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4124)
inline void Excel::IRectangle::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IRectangles wrapper method implementations
//

#pragma implementation_key(4125)
inline Excel::_ApplicationPtr Excel::IRectangles::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4126)
inline enum XlCreator Excel::IRectangles::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4127)
inline IDispatchPtr Excel::IRectangles::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4128)
inline _variant_t Excel::IRectangles::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4129)
inline _variant_t Excel::IRectangles::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4130)
inline _variant_t Excel::IRectangles::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4131)
inline _variant_t Excel::IRectangles::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4132)
inline _variant_t Excel::IRectangles::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4133)
inline IDispatchPtr Excel::IRectangles::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4134)
inline VARIANT_BOOL Excel::IRectangles::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4135)
inline void Excel::IRectangles::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4136)
inline double Excel::IRectangles::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4137)
inline void Excel::IRectangles::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4138)
inline double Excel::IRectangles::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4139)
inline void Excel::IRectangles::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4140)
inline VARIANT_BOOL Excel::IRectangles::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4141)
inline void Excel::IRectangles::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4142)
inline _bstr_t Excel::IRectangles::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4143)
inline void Excel::IRectangles::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4144)
inline _variant_t Excel::IRectangles::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4145)
inline void Excel::IRectangles::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4146)
inline VARIANT_BOOL Excel::IRectangles::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4147)
inline void Excel::IRectangles::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4148)
inline _variant_t Excel::IRectangles::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4149)
inline _variant_t Excel::IRectangles::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4150)
inline double Excel::IRectangles::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4151)
inline void Excel::IRectangles::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4152)
inline VARIANT_BOOL Excel::IRectangles::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4153)
inline void Excel::IRectangles::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4154)
inline double Excel::IRectangles::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4155)
inline void Excel::IRectangles::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4156)
inline long Excel::IRectangles::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4157)
inline Excel::ShapeRangePtr Excel::IRectangles::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4158)
inline VARIANT_BOOL Excel::IRectangles::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4159)
inline void Excel::IRectangles::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4160)
inline _variant_t Excel::IRectangles::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4161)
inline void Excel::IRectangles::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4162)
inline VARIANT_BOOL Excel::IRectangles::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4163)
inline void Excel::IRectangles::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4164)
inline _bstr_t Excel::IRectangles::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4165)
inline void Excel::IRectangles::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4166)
inline Excel::CharactersPtr Excel::IRectangles::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(4167)
inline _variant_t Excel::IRectangles::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4168)
inline Excel::FontPtr Excel::IRectangles::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(4169)
inline _bstr_t Excel::IRectangles::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4170)
inline void Excel::IRectangles::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4171)
inline _variant_t Excel::IRectangles::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4172)
inline void Excel::IRectangles::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4173)
inline VARIANT_BOOL Excel::IRectangles::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4174)
inline void Excel::IRectangles::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4175)
inline _variant_t Excel::IRectangles::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4176)
inline void Excel::IRectangles::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4177)
inline _bstr_t Excel::IRectangles::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4178)
inline void Excel::IRectangles::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4179)
inline _variant_t Excel::IRectangles::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4180)
inline void Excel::IRectangles::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4181)
inline long Excel::IRectangles::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4182)
inline void Excel::IRectangles::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4183)
inline Excel::BorderPtr Excel::IRectangles::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4184)
inline Excel::InteriorPtr Excel::IRectangles::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4185)
inline VARIANT_BOOL Excel::IRectangles::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4186)
inline void Excel::IRectangles::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4187)
inline VARIANT_BOOL Excel::IRectangles::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4188)
inline void Excel::IRectangles::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4189)
inline Excel::RectanglePtr Excel::IRectangles::Add ( double Left, double Top, double Width, double Height ) {
    struct Rectangle * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RectanglePtr(_result, false);
}

#pragma implementation_key(4190)
inline long Excel::IRectangles::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4191)
inline Excel::GroupObjectPtr Excel::IRectangles::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(4192)
inline IDispatchPtr Excel::IRectangles::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4193)
inline IUnknownPtr Excel::IRectangles::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IOval wrapper method implementations
//

#pragma implementation_key(4194)
inline Excel::_ApplicationPtr Excel::IOval::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4195)
inline enum XlCreator Excel::IOval::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4196)
inline IDispatchPtr Excel::IOval::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4197)
inline Excel::RangePtr Excel::IOval::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4198)
inline _variant_t Excel::IOval::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4199)
inline _variant_t Excel::IOval::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4200)
inline _variant_t Excel::IOval::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4201)
inline _variant_t Excel::IOval::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4202)
inline _variant_t Excel::IOval::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4203)
inline IDispatchPtr Excel::IOval::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4204)
inline VARIANT_BOOL Excel::IOval::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4205)
inline void Excel::IOval::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4206)
inline double Excel::IOval::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4207)
inline void Excel::IOval::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4208)
inline long Excel::IOval::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4209)
inline double Excel::IOval::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4210)
inline void Excel::IOval::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4211)
inline VARIANT_BOOL Excel::IOval::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4212)
inline void Excel::IOval::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4213)
inline _bstr_t Excel::IOval::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4214)
inline void Excel::IOval::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4215)
inline _bstr_t Excel::IOval::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4216)
inline void Excel::IOval::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4217)
inline _variant_t Excel::IOval::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4218)
inline void Excel::IOval::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4219)
inline VARIANT_BOOL Excel::IOval::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4220)
inline void Excel::IOval::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4221)
inline _variant_t Excel::IOval::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4222)
inline _variant_t Excel::IOval::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4223)
inline double Excel::IOval::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4224)
inline void Excel::IOval::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4225)
inline Excel::RangePtr Excel::IOval::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4226)
inline VARIANT_BOOL Excel::IOval::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4227)
inline void Excel::IOval::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4228)
inline double Excel::IOval::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4229)
inline void Excel::IOval::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4230)
inline long Excel::IOval::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4231)
inline Excel::ShapeRangePtr Excel::IOval::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4232)
inline VARIANT_BOOL Excel::IOval::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4233)
inline void Excel::IOval::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4234)
inline _variant_t Excel::IOval::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4235)
inline void Excel::IOval::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4236)
inline VARIANT_BOOL Excel::IOval::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4237)
inline void Excel::IOval::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4238)
inline _bstr_t Excel::IOval::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4239)
inline void Excel::IOval::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4240)
inline Excel::CharactersPtr Excel::IOval::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(4241)
inline _variant_t Excel::IOval::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4242)
inline Excel::FontPtr Excel::IOval::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(4243)
inline _bstr_t Excel::IOval::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4244)
inline void Excel::IOval::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4245)
inline _variant_t Excel::IOval::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4246)
inline void Excel::IOval::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4247)
inline VARIANT_BOOL Excel::IOval::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4248)
inline void Excel::IOval::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4249)
inline _variant_t Excel::IOval::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4250)
inline void Excel::IOval::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4251)
inline _bstr_t Excel::IOval::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4252)
inline void Excel::IOval::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4253)
inline _variant_t Excel::IOval::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4254)
inline void Excel::IOval::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4255)
inline long Excel::IOval::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4256)
inline void Excel::IOval::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4257)
inline Excel::BorderPtr Excel::IOval::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4258)
inline Excel::InteriorPtr Excel::IOval::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4259)
inline VARIANT_BOOL Excel::IOval::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4260)
inline void Excel::IOval::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOvals wrapper method implementations
//

#pragma implementation_key(4261)
inline Excel::_ApplicationPtr Excel::IOvals::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4262)
inline enum XlCreator Excel::IOvals::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4263)
inline IDispatchPtr Excel::IOvals::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4264)
inline _variant_t Excel::IOvals::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4265)
inline _variant_t Excel::IOvals::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4266)
inline _variant_t Excel::IOvals::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4267)
inline _variant_t Excel::IOvals::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4268)
inline _variant_t Excel::IOvals::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4269)
inline IDispatchPtr Excel::IOvals::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4270)
inline VARIANT_BOOL Excel::IOvals::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4271)
inline void Excel::IOvals::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4272)
inline double Excel::IOvals::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4273)
inline void Excel::IOvals::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4274)
inline double Excel::IOvals::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4275)
inline void Excel::IOvals::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4276)
inline VARIANT_BOOL Excel::IOvals::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4277)
inline void Excel::IOvals::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4278)
inline _bstr_t Excel::IOvals::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4279)
inline void Excel::IOvals::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4280)
inline _variant_t Excel::IOvals::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4281)
inline void Excel::IOvals::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4282)
inline VARIANT_BOOL Excel::IOvals::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4283)
inline void Excel::IOvals::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4284)
inline _variant_t Excel::IOvals::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4285)
inline _variant_t Excel::IOvals::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4286)
inline double Excel::IOvals::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4287)
inline void Excel::IOvals::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4288)
inline VARIANT_BOOL Excel::IOvals::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4289)
inline void Excel::IOvals::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4290)
inline double Excel::IOvals::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4291)
inline void Excel::IOvals::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4292)
inline long Excel::IOvals::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4293)
inline Excel::ShapeRangePtr Excel::IOvals::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4294)
inline VARIANT_BOOL Excel::IOvals::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4295)
inline void Excel::IOvals::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4296)
inline _variant_t Excel::IOvals::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4297)
inline void Excel::IOvals::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4298)
inline VARIANT_BOOL Excel::IOvals::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4299)
inline void Excel::IOvals::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4300)
inline _bstr_t Excel::IOvals::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4301)
inline void Excel::IOvals::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4302)
inline Excel::CharactersPtr Excel::IOvals::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(4303)
inline _variant_t Excel::IOvals::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4304)
inline Excel::FontPtr Excel::IOvals::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(4305)
inline _bstr_t Excel::IOvals::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4306)
inline void Excel::IOvals::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4307)
inline _variant_t Excel::IOvals::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4308)
inline void Excel::IOvals::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4309)
inline VARIANT_BOOL Excel::IOvals::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4310)
inline void Excel::IOvals::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4311)
inline _variant_t Excel::IOvals::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4312)
inline void Excel::IOvals::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4313)
inline _bstr_t Excel::IOvals::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4314)
inline void Excel::IOvals::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4315)
inline _variant_t Excel::IOvals::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4316)
inline void Excel::IOvals::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4317)
inline long Excel::IOvals::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4318)
inline void Excel::IOvals::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4319)
inline Excel::BorderPtr Excel::IOvals::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4320)
inline Excel::InteriorPtr Excel::IOvals::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4321)
inline VARIANT_BOOL Excel::IOvals::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4322)
inline void Excel::IOvals::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4323)
inline Excel::OvalPtr Excel::IOvals::Add ( double Left, double Top, double Width, double Height ) {
    struct Oval * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OvalPtr(_result, false);
}

#pragma implementation_key(4324)
inline long Excel::IOvals::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4325)
inline Excel::GroupObjectPtr Excel::IOvals::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(4326)
inline IDispatchPtr Excel::IOvals::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4327)
inline IUnknownPtr Excel::IOvals::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IArc wrapper method implementations
//

#pragma implementation_key(4328)
inline Excel::_ApplicationPtr Excel::IArc::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4329)
inline enum XlCreator Excel::IArc::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4330)
inline IDispatchPtr Excel::IArc::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4331)
inline Excel::RangePtr Excel::IArc::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4332)
inline _variant_t Excel::IArc::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4333)
inline _variant_t Excel::IArc::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4334)
inline _variant_t Excel::IArc::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4335)
inline _variant_t Excel::IArc::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4336)
inline _variant_t Excel::IArc::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4337)
inline IDispatchPtr Excel::IArc::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4338)
inline VARIANT_BOOL Excel::IArc::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4339)
inline void Excel::IArc::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4340)
inline double Excel::IArc::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4341)
inline void Excel::IArc::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4342)
inline long Excel::IArc::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4343)
inline double Excel::IArc::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4344)
inline void Excel::IArc::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4345)
inline VARIANT_BOOL Excel::IArc::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4346)
inline void Excel::IArc::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4347)
inline _bstr_t Excel::IArc::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4348)
inline void Excel::IArc::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4349)
inline _bstr_t Excel::IArc::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4350)
inline void Excel::IArc::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4351)
inline _variant_t Excel::IArc::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4352)
inline void Excel::IArc::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4353)
inline VARIANT_BOOL Excel::IArc::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4354)
inline void Excel::IArc::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4355)
inline _variant_t Excel::IArc::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4356)
inline _variant_t Excel::IArc::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4357)
inline double Excel::IArc::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4358)
inline void Excel::IArc::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4359)
inline Excel::RangePtr Excel::IArc::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4360)
inline VARIANT_BOOL Excel::IArc::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4361)
inline void Excel::IArc::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4362)
inline double Excel::IArc::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4363)
inline void Excel::IArc::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4364)
inline long Excel::IArc::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4365)
inline Excel::ShapeRangePtr Excel::IArc::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4366)
inline VARIANT_BOOL Excel::IArc::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4367)
inline void Excel::IArc::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4368)
inline _variant_t Excel::IArc::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4369)
inline void Excel::IArc::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4370)
inline VARIANT_BOOL Excel::IArc::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4371)
inline void Excel::IArc::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4372)
inline _bstr_t Excel::IArc::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4373)
inline void Excel::IArc::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4374)
inline Excel::CharactersPtr Excel::IArc::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(4375)
inline _variant_t Excel::IArc::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4376)
inline Excel::FontPtr Excel::IArc::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(4377)
inline _bstr_t Excel::IArc::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4378)
inline void Excel::IArc::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4379)
inline _variant_t Excel::IArc::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4380)
inline void Excel::IArc::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4381)
inline VARIANT_BOOL Excel::IArc::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4382)
inline void Excel::IArc::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4383)
inline _variant_t Excel::IArc::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4384)
inline void Excel::IArc::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4385)
inline _bstr_t Excel::IArc::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4386)
inline void Excel::IArc::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4387)
inline _variant_t Excel::IArc::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4388)
inline void Excel::IArc::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4389)
inline long Excel::IArc::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4390)
inline void Excel::IArc::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4391)
inline Excel::BorderPtr Excel::IArc::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4392)
inline Excel::InteriorPtr Excel::IArc::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

//
// interface IArcs wrapper method implementations
//

#pragma implementation_key(4393)
inline Excel::_ApplicationPtr Excel::IArcs::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4394)
inline enum XlCreator Excel::IArcs::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4395)
inline IDispatchPtr Excel::IArcs::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4396)
inline _variant_t Excel::IArcs::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4397)
inline _variant_t Excel::IArcs::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4398)
inline _variant_t Excel::IArcs::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4399)
inline _variant_t Excel::IArcs::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4400)
inline _variant_t Excel::IArcs::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4401)
inline IDispatchPtr Excel::IArcs::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4402)
inline VARIANT_BOOL Excel::IArcs::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4403)
inline void Excel::IArcs::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4404)
inline double Excel::IArcs::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4405)
inline void Excel::IArcs::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4406)
inline double Excel::IArcs::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4407)
inline void Excel::IArcs::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4408)
inline VARIANT_BOOL Excel::IArcs::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4409)
inline void Excel::IArcs::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4410)
inline _bstr_t Excel::IArcs::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4411)
inline void Excel::IArcs::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4412)
inline _variant_t Excel::IArcs::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4413)
inline void Excel::IArcs::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4414)
inline VARIANT_BOOL Excel::IArcs::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4415)
inline void Excel::IArcs::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4416)
inline _variant_t Excel::IArcs::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4417)
inline _variant_t Excel::IArcs::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4418)
inline double Excel::IArcs::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4419)
inline void Excel::IArcs::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4420)
inline VARIANT_BOOL Excel::IArcs::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4421)
inline void Excel::IArcs::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4422)
inline double Excel::IArcs::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4423)
inline void Excel::IArcs::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4424)
inline long Excel::IArcs::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4425)
inline Excel::ShapeRangePtr Excel::IArcs::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4426)
inline VARIANT_BOOL Excel::IArcs::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4427)
inline void Excel::IArcs::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4428)
inline _variant_t Excel::IArcs::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4429)
inline void Excel::IArcs::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4430)
inline VARIANT_BOOL Excel::IArcs::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4431)
inline void Excel::IArcs::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4432)
inline _bstr_t Excel::IArcs::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4433)
inline void Excel::IArcs::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4434)
inline Excel::CharactersPtr Excel::IArcs::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(4435)
inline _variant_t Excel::IArcs::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4436)
inline Excel::FontPtr Excel::IArcs::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(4437)
inline _bstr_t Excel::IArcs::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4438)
inline void Excel::IArcs::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4439)
inline _variant_t Excel::IArcs::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4440)
inline void Excel::IArcs::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4441)
inline VARIANT_BOOL Excel::IArcs::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4442)
inline void Excel::IArcs::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4443)
inline _variant_t Excel::IArcs::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4444)
inline void Excel::IArcs::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4445)
inline _bstr_t Excel::IArcs::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4446)
inline void Excel::IArcs::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4447)
inline _variant_t Excel::IArcs::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4448)
inline void Excel::IArcs::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4449)
inline long Excel::IArcs::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4450)
inline void Excel::IArcs::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4451)
inline Excel::BorderPtr Excel::IArcs::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4452)
inline Excel::InteriorPtr Excel::IArcs::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4453)
inline Excel::ArcPtr Excel::IArcs::Add ( double X1, double Y1, double X2, double Y2 ) {
    struct Arc * _result;
    HRESULT _hr = raw_Add(X1, Y1, X2, Y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ArcPtr(_result, false);
}

#pragma implementation_key(4454)
inline long Excel::IArcs::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4455)
inline Excel::GroupObjectPtr Excel::IArcs::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(4456)
inline IDispatchPtr Excel::IArcs::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4457)
inline IUnknownPtr Excel::IArcs::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IOLEObjectEvents wrapper method implementations
//

#pragma implementation_key(4458)
inline HRESULT Excel::IOLEObjectEvents::GotFocus ( ) {
    HRESULT _hr = raw_GotFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4459)
inline HRESULT Excel::IOLEObjectEvents::LostFocus ( ) {
    HRESULT _hr = raw_LostFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IOLEObject wrapper method implementations
//

#pragma implementation_key(4460)
inline Excel::_ApplicationPtr Excel::_IOLEObject::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4461)
inline enum XlCreator Excel::_IOLEObject::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4462)
inline IDispatchPtr Excel::_IOLEObject::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4463)
inline Excel::RangePtr Excel::_IOLEObject::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4464)
inline _variant_t Excel::_IOLEObject::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4465)
inline _variant_t Excel::_IOLEObject::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4466)
inline _variant_t Excel::_IOLEObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4467)
inline _variant_t Excel::_IOLEObject::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4468)
inline _variant_t Excel::_IOLEObject::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4469)
inline IDispatchPtr Excel::_IOLEObject::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4470)
inline VARIANT_BOOL Excel::_IOLEObject::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4471)
inline void Excel::_IOLEObject::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4472)
inline double Excel::_IOLEObject::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4473)
inline void Excel::_IOLEObject::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4474)
inline long Excel::_IOLEObject::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4475)
inline double Excel::_IOLEObject::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4476)
inline void Excel::_IOLEObject::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4477)
inline VARIANT_BOOL Excel::_IOLEObject::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4478)
inline void Excel::_IOLEObject::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4479)
inline _bstr_t Excel::_IOLEObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4480)
inline void Excel::_IOLEObject::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4481)
inline _bstr_t Excel::_IOLEObject::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4482)
inline void Excel::_IOLEObject::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4483)
inline _variant_t Excel::_IOLEObject::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4484)
inline void Excel::_IOLEObject::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4485)
inline VARIANT_BOOL Excel::_IOLEObject::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4486)
inline void Excel::_IOLEObject::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4487)
inline _variant_t Excel::_IOLEObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4488)
inline _variant_t Excel::_IOLEObject::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4489)
inline double Excel::_IOLEObject::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4490)
inline void Excel::_IOLEObject::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4491)
inline Excel::RangePtr Excel::_IOLEObject::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4492)
inline VARIANT_BOOL Excel::_IOLEObject::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4493)
inline void Excel::_IOLEObject::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4494)
inline double Excel::_IOLEObject::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4495)
inline void Excel::_IOLEObject::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4496)
inline long Excel::_IOLEObject::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4497)
inline Excel::ShapeRangePtr Excel::_IOLEObject::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4498)
inline Excel::BorderPtr Excel::_IOLEObject::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4499)
inline Excel::InteriorPtr Excel::_IOLEObject::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4500)
inline VARIANT_BOOL Excel::_IOLEObject::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4501)
inline void Excel::_IOLEObject::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4502)
inline _variant_t Excel::_IOLEObject::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Activate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4503)
inline VARIANT_BOOL Excel::_IOLEObject::GetAutoLoad ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoLoad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4504)
inline void Excel::_IOLEObject::PutAutoLoad ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoLoad(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4505)
inline VARIANT_BOOL Excel::_IOLEObject::GetAutoUpdate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4506)
inline void Excel::_IOLEObject::PutAutoUpdate ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoUpdate(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4507)
inline IDispatchPtr Excel::_IOLEObject::GetObject ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4508)
inline _variant_t Excel::_IOLEObject::GetOLEType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OLEType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4509)
inline _bstr_t Excel::_IOLEObject::GetSourceName ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4510)
inline void Excel::_IOLEObject::PutSourceName ( _bstr_t RHS ) {
    HRESULT _hr = put_SourceName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4511)
inline _variant_t Excel::_IOLEObject::Update ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4512)
inline _variant_t Excel::_IOLEObject::Verb ( enum XlOLEVerb Verb ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Verb(Verb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4513)
inline _bstr_t Excel::_IOLEObject::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4514)
inline void Excel::_IOLEObject::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4515)
inline _bstr_t Excel::_IOLEObject::GetListFillRange ( ) {
    BSTR _result;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4516)
inline void Excel::_IOLEObject::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4517)
inline _bstr_t Excel::_IOLEObject::GetprogID ( ) {
    BSTR _result;
    HRESULT _hr = get_progID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4518)
inline _bstr_t Excel::_IOLEObject::GetAltHTML ( ) {
    BSTR _result;
    HRESULT _hr = get_AltHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4519)
inline void Excel::_IOLEObject::PutAltHTML ( _bstr_t RHS ) {
    HRESULT _hr = put_AltHTML(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOLEObjects wrapper method implementations
//

#pragma implementation_key(4520)
inline Excel::_ApplicationPtr Excel::IOLEObjects::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4521)
inline enum XlCreator Excel::IOLEObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4522)
inline IDispatchPtr Excel::IOLEObjects::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4523)
inline _variant_t Excel::IOLEObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4524)
inline _variant_t Excel::IOLEObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4525)
inline _variant_t Excel::IOLEObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4526)
inline _variant_t Excel::IOLEObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4527)
inline _variant_t Excel::IOLEObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4528)
inline IDispatchPtr Excel::IOLEObjects::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4529)
inline VARIANT_BOOL Excel::IOLEObjects::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4530)
inline void Excel::IOLEObjects::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4531)
inline double Excel::IOLEObjects::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4532)
inline void Excel::IOLEObjects::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4533)
inline double Excel::IOLEObjects::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4534)
inline void Excel::IOLEObjects::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4535)
inline VARIANT_BOOL Excel::IOLEObjects::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4536)
inline void Excel::IOLEObjects::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4537)
inline _bstr_t Excel::IOLEObjects::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4538)
inline void Excel::IOLEObjects::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4539)
inline _variant_t Excel::IOLEObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4540)
inline void Excel::IOLEObjects::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4541)
inline VARIANT_BOOL Excel::IOLEObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4542)
inline void Excel::IOLEObjects::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4543)
inline _variant_t Excel::IOLEObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4544)
inline _variant_t Excel::IOLEObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4545)
inline double Excel::IOLEObjects::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4546)
inline void Excel::IOLEObjects::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4547)
inline VARIANT_BOOL Excel::IOLEObjects::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4548)
inline void Excel::IOLEObjects::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4549)
inline double Excel::IOLEObjects::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4550)
inline void Excel::IOLEObjects::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4551)
inline long Excel::IOLEObjects::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4552)
inline Excel::ShapeRangePtr Excel::IOLEObjects::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4553)
inline Excel::BorderPtr Excel::IOLEObjects::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4554)
inline Excel::InteriorPtr Excel::IOLEObjects::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4555)
inline VARIANT_BOOL Excel::IOLEObjects::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4556)
inline void Excel::IOLEObjects::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4557)
inline VARIANT_BOOL Excel::IOLEObjects::GetAutoLoad ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoLoad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4558)
inline void Excel::IOLEObjects::PutAutoLoad ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoLoad(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4559)
inline _bstr_t Excel::IOLEObjects::GetSourceName ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4560)
inline void Excel::IOLEObjects::PutSourceName ( _bstr_t RHS ) {
    HRESULT _hr = put_SourceName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4561)
inline Excel::_OLEObjectPtr Excel::IOLEObjects::Add ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height ) {
    struct _OLEObject * _result;
    HRESULT _hr = raw_Add(ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OLEObjectPtr(_result, false);
}

#pragma implementation_key(4562)
inline long Excel::IOLEObjects::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4563)
inline Excel::GroupObjectPtr Excel::IOLEObjects::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(4564)
inline IDispatchPtr Excel::IOLEObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4565)
inline IUnknownPtr Excel::IOLEObjects::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ITextBox wrapper method implementations
//

#pragma implementation_key(4566)
inline Excel::_ApplicationPtr Excel::ITextBox::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4567)
inline enum XlCreator Excel::ITextBox::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4568)
inline IDispatchPtr Excel::ITextBox::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4569)
inline Excel::RangePtr Excel::ITextBox::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4570)
inline _variant_t Excel::ITextBox::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4571)
inline _variant_t Excel::ITextBox::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4572)
inline _variant_t Excel::ITextBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4573)
inline _variant_t Excel::ITextBox::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4574)
inline _variant_t Excel::ITextBox::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4575)
inline IDispatchPtr Excel::ITextBox::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4576)
inline VARIANT_BOOL Excel::ITextBox::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4577)
inline void Excel::ITextBox::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4578)
inline double Excel::ITextBox::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4579)
inline void Excel::ITextBox::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4580)
inline long Excel::ITextBox::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4581)
inline double Excel::ITextBox::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4582)
inline void Excel::ITextBox::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4583)
inline VARIANT_BOOL Excel::ITextBox::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4584)
inline void Excel::ITextBox::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4585)
inline _bstr_t Excel::ITextBox::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4586)
inline void Excel::ITextBox::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4587)
inline _bstr_t Excel::ITextBox::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4588)
inline void Excel::ITextBox::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4589)
inline _variant_t Excel::ITextBox::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4590)
inline void Excel::ITextBox::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4591)
inline VARIANT_BOOL Excel::ITextBox::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4592)
inline void Excel::ITextBox::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4593)
inline _variant_t Excel::ITextBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4594)
inline _variant_t Excel::ITextBox::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4595)
inline double Excel::ITextBox::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4596)
inline void Excel::ITextBox::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4597)
inline Excel::RangePtr Excel::ITextBox::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4598)
inline VARIANT_BOOL Excel::ITextBox::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4599)
inline void Excel::ITextBox::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4600)
inline double Excel::ITextBox::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4601)
inline void Excel::ITextBox::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4602)
inline long Excel::ITextBox::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4603)
inline Excel::ShapeRangePtr Excel::ITextBox::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4604)
inline VARIANT_BOOL Excel::ITextBox::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4605)
inline void Excel::ITextBox::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4606)
inline _variant_t Excel::ITextBox::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4607)
inline void Excel::ITextBox::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4608)
inline VARIANT_BOOL Excel::ITextBox::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4609)
inline void Excel::ITextBox::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4610)
inline _bstr_t Excel::ITextBox::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4611)
inline void Excel::ITextBox::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4612)
inline Excel::CharactersPtr Excel::ITextBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(4613)
inline _variant_t Excel::ITextBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4614)
inline Excel::FontPtr Excel::ITextBox::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(4615)
inline _bstr_t Excel::ITextBox::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4616)
inline void Excel::ITextBox::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4617)
inline _variant_t Excel::ITextBox::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4618)
inline void Excel::ITextBox::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4619)
inline VARIANT_BOOL Excel::ITextBox::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4620)
inline void Excel::ITextBox::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4621)
inline _variant_t Excel::ITextBox::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4622)
inline void Excel::ITextBox::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4623)
inline _bstr_t Excel::ITextBox::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4624)
inline void Excel::ITextBox::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4625)
inline _variant_t Excel::ITextBox::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4626)
inline void Excel::ITextBox::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4627)
inline long Excel::ITextBox::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4628)
inline void Excel::ITextBox::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4629)
inline Excel::BorderPtr Excel::ITextBox::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4630)
inline Excel::InteriorPtr Excel::ITextBox::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4631)
inline VARIANT_BOOL Excel::ITextBox::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4632)
inline void Excel::ITextBox::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4633)
inline VARIANT_BOOL Excel::ITextBox::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4634)
inline void Excel::ITextBox::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITextBoxes wrapper method implementations
//

#pragma implementation_key(4635)
inline Excel::_ApplicationPtr Excel::ITextBoxes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4636)
inline enum XlCreator Excel::ITextBoxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4637)
inline IDispatchPtr Excel::ITextBoxes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4638)
inline _variant_t Excel::ITextBoxes::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4639)
inline _variant_t Excel::ITextBoxes::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4640)
inline _variant_t Excel::ITextBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4641)
inline _variant_t Excel::ITextBoxes::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4642)
inline _variant_t Excel::ITextBoxes::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4643)
inline IDispatchPtr Excel::ITextBoxes::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4644)
inline VARIANT_BOOL Excel::ITextBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4645)
inline void Excel::ITextBoxes::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4646)
inline double Excel::ITextBoxes::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4647)
inline void Excel::ITextBoxes::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4648)
inline double Excel::ITextBoxes::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4649)
inline void Excel::ITextBoxes::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4650)
inline VARIANT_BOOL Excel::ITextBoxes::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4651)
inline void Excel::ITextBoxes::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4652)
inline _bstr_t Excel::ITextBoxes::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4653)
inline void Excel::ITextBoxes::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4654)
inline _variant_t Excel::ITextBoxes::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4655)
inline void Excel::ITextBoxes::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4656)
inline VARIANT_BOOL Excel::ITextBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4657)
inline void Excel::ITextBoxes::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4658)
inline _variant_t Excel::ITextBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4659)
inline _variant_t Excel::ITextBoxes::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4660)
inline double Excel::ITextBoxes::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4661)
inline void Excel::ITextBoxes::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4662)
inline VARIANT_BOOL Excel::ITextBoxes::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4663)
inline void Excel::ITextBoxes::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4664)
inline double Excel::ITextBoxes::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4665)
inline void Excel::ITextBoxes::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4666)
inline long Excel::ITextBoxes::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4667)
inline Excel::ShapeRangePtr Excel::ITextBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4668)
inline VARIANT_BOOL Excel::ITextBoxes::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4669)
inline void Excel::ITextBoxes::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4670)
inline _variant_t Excel::ITextBoxes::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4671)
inline void Excel::ITextBoxes::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4672)
inline VARIANT_BOOL Excel::ITextBoxes::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4673)
inline void Excel::ITextBoxes::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4674)
inline _bstr_t Excel::ITextBoxes::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4675)
inline void Excel::ITextBoxes::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4676)
inline Excel::CharactersPtr Excel::ITextBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(4677)
inline _variant_t Excel::ITextBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4678)
inline Excel::FontPtr Excel::ITextBoxes::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(4679)
inline _bstr_t Excel::ITextBoxes::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4680)
inline void Excel::ITextBoxes::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4681)
inline _variant_t Excel::ITextBoxes::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4682)
inline void Excel::ITextBoxes::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4683)
inline VARIANT_BOOL Excel::ITextBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4684)
inline void Excel::ITextBoxes::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4685)
inline _variant_t Excel::ITextBoxes::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4686)
inline void Excel::ITextBoxes::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4687)
inline _bstr_t Excel::ITextBoxes::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4688)
inline void Excel::ITextBoxes::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4689)
inline _variant_t Excel::ITextBoxes::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4690)
inline void Excel::ITextBoxes::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4691)
inline long Excel::ITextBoxes::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4692)
inline void Excel::ITextBoxes::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4693)
inline Excel::BorderPtr Excel::ITextBoxes::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4694)
inline Excel::InteriorPtr Excel::ITextBoxes::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4695)
inline VARIANT_BOOL Excel::ITextBoxes::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4696)
inline void Excel::ITextBoxes::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4697)
inline VARIANT_BOOL Excel::ITextBoxes::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4698)
inline void Excel::ITextBoxes::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4699)
inline Excel::TextBoxPtr Excel::ITextBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct TextBox * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextBoxPtr(_result, false);
}

#pragma implementation_key(4700)
inline long Excel::ITextBoxes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4701)
inline Excel::GroupObjectPtr Excel::ITextBoxes::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(4702)
inline IDispatchPtr Excel::ITextBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4703)
inline IUnknownPtr Excel::ITextBoxes::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPictures wrapper method implementations
//

#pragma implementation_key(4704)
inline Excel::_ApplicationPtr Excel::IPictures::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4705)
inline enum XlCreator Excel::IPictures::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4706)
inline IDispatchPtr Excel::IPictures::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4707)
inline _variant_t Excel::IPictures::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4708)
inline _variant_t Excel::IPictures::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4709)
inline _variant_t Excel::IPictures::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4710)
inline _variant_t Excel::IPictures::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4711)
inline _variant_t Excel::IPictures::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4712)
inline IDispatchPtr Excel::IPictures::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4713)
inline VARIANT_BOOL Excel::IPictures::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4714)
inline void Excel::IPictures::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4715)
inline double Excel::IPictures::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4716)
inline void Excel::IPictures::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4717)
inline double Excel::IPictures::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4718)
inline void Excel::IPictures::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4719)
inline VARIANT_BOOL Excel::IPictures::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4720)
inline void Excel::IPictures::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4721)
inline _bstr_t Excel::IPictures::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4722)
inline void Excel::IPictures::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4723)
inline _variant_t Excel::IPictures::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4724)
inline void Excel::IPictures::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4725)
inline VARIANT_BOOL Excel::IPictures::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4726)
inline void Excel::IPictures::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4727)
inline _variant_t Excel::IPictures::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4728)
inline _variant_t Excel::IPictures::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4729)
inline double Excel::IPictures::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4730)
inline void Excel::IPictures::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4731)
inline VARIANT_BOOL Excel::IPictures::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4732)
inline void Excel::IPictures::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4733)
inline double Excel::IPictures::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4734)
inline void Excel::IPictures::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4735)
inline long Excel::IPictures::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4736)
inline Excel::ShapeRangePtr Excel::IPictures::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4737)
inline Excel::BorderPtr Excel::IPictures::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4738)
inline Excel::InteriorPtr Excel::IPictures::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4739)
inline VARIANT_BOOL Excel::IPictures::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4740)
inline void Excel::IPictures::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4741)
inline _bstr_t Excel::IPictures::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4742)
inline void Excel::IPictures::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4743)
inline Excel::PicturePtr Excel::IPictures::Add ( double Left, double Top, double Width, double Height ) {
    struct Picture * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(4744)
inline long Excel::IPictures::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4745)
inline Excel::GroupObjectPtr Excel::IPictures::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(4746)
inline Excel::PicturePtr Excel::IPictures::Insert ( _bstr_t Filename, const _variant_t & Converter ) {
    struct Picture * _result;
    HRESULT _hr = raw_Insert(Filename, Converter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(4747)
inline IDispatchPtr Excel::IPictures::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4748)
inline IUnknownPtr Excel::IPictures::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4749)
inline Excel::PicturePtr Excel::IPictures::Paste ( const _variant_t & Link ) {
    struct Picture * _result;
    HRESULT _hr = raw_Paste(Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

//
// interface IDrawing wrapper method implementations
//

#pragma implementation_key(4750)
inline Excel::_ApplicationPtr Excel::IDrawing::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4751)
inline enum XlCreator Excel::IDrawing::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4752)
inline IDispatchPtr Excel::IDrawing::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4753)
inline Excel::RangePtr Excel::IDrawing::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4754)
inline _variant_t Excel::IDrawing::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4755)
inline _variant_t Excel::IDrawing::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4756)
inline _variant_t Excel::IDrawing::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4757)
inline _variant_t Excel::IDrawing::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4758)
inline _variant_t Excel::IDrawing::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4759)
inline IDispatchPtr Excel::IDrawing::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4760)
inline VARIANT_BOOL Excel::IDrawing::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4761)
inline void Excel::IDrawing::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4762)
inline double Excel::IDrawing::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4763)
inline void Excel::IDrawing::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4764)
inline long Excel::IDrawing::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4765)
inline double Excel::IDrawing::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4766)
inline void Excel::IDrawing::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4767)
inline VARIANT_BOOL Excel::IDrawing::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4768)
inline void Excel::IDrawing::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4769)
inline _bstr_t Excel::IDrawing::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4770)
inline void Excel::IDrawing::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4771)
inline _bstr_t Excel::IDrawing::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4772)
inline void Excel::IDrawing::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4773)
inline _variant_t Excel::IDrawing::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4774)
inline void Excel::IDrawing::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4775)
inline VARIANT_BOOL Excel::IDrawing::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4776)
inline void Excel::IDrawing::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4777)
inline _variant_t Excel::IDrawing::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4778)
inline _variant_t Excel::IDrawing::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4779)
inline double Excel::IDrawing::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4780)
inline void Excel::IDrawing::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4781)
inline Excel::RangePtr Excel::IDrawing::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4782)
inline VARIANT_BOOL Excel::IDrawing::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4783)
inline void Excel::IDrawing::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4784)
inline double Excel::IDrawing::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4785)
inline void Excel::IDrawing::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4786)
inline long Excel::IDrawing::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4787)
inline Excel::ShapeRangePtr Excel::IDrawing::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4788)
inline VARIANT_BOOL Excel::IDrawing::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4789)
inline void Excel::IDrawing::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4790)
inline _variant_t Excel::IDrawing::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4791)
inline void Excel::IDrawing::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4792)
inline VARIANT_BOOL Excel::IDrawing::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4793)
inline void Excel::IDrawing::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4794)
inline _bstr_t Excel::IDrawing::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4795)
inline void Excel::IDrawing::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4796)
inline Excel::CharactersPtr Excel::IDrawing::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(4797)
inline _variant_t Excel::IDrawing::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4798)
inline Excel::FontPtr Excel::IDrawing::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(4799)
inline _bstr_t Excel::IDrawing::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4800)
inline void Excel::IDrawing::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4801)
inline _variant_t Excel::IDrawing::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4802)
inline void Excel::IDrawing::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4803)
inline VARIANT_BOOL Excel::IDrawing::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4804)
inline void Excel::IDrawing::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4805)
inline _variant_t Excel::IDrawing::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4806)
inline void Excel::IDrawing::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4807)
inline _bstr_t Excel::IDrawing::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4808)
inline void Excel::IDrawing::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4809)
inline _variant_t Excel::IDrawing::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4810)
inline void Excel::IDrawing::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4811)
inline long Excel::IDrawing::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4812)
inline void Excel::IDrawing::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4813)
inline Excel::BorderPtr Excel::IDrawing::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4814)
inline Excel::InteriorPtr Excel::IDrawing::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4815)
inline VARIANT_BOOL Excel::IDrawing::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4816)
inline void Excel::IDrawing::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4817)
inline _variant_t Excel::IDrawing::AddVertex ( double Left, double Top ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddVertex(Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4818)
inline _variant_t Excel::IDrawing::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Reshape(Vertex, Insert, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4819)
inline _variant_t Excel::IDrawing::GetVertices ( const _variant_t & Index1, const _variant_t & Index2 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(Index1, Index2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IDrawings wrapper method implementations
//

#pragma implementation_key(4820)
inline Excel::_ApplicationPtr Excel::IDrawings::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4821)
inline enum XlCreator Excel::IDrawings::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4822)
inline IDispatchPtr Excel::IDrawings::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4823)
inline _variant_t Excel::IDrawings::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4824)
inline _variant_t Excel::IDrawings::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4825)
inline _variant_t Excel::IDrawings::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4826)
inline _variant_t Excel::IDrawings::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4827)
inline _variant_t Excel::IDrawings::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4828)
inline IDispatchPtr Excel::IDrawings::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4829)
inline VARIANT_BOOL Excel::IDrawings::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4830)
inline void Excel::IDrawings::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4831)
inline double Excel::IDrawings::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4832)
inline void Excel::IDrawings::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4833)
inline double Excel::IDrawings::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4834)
inline void Excel::IDrawings::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4835)
inline VARIANT_BOOL Excel::IDrawings::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4836)
inline void Excel::IDrawings::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4837)
inline _bstr_t Excel::IDrawings::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4838)
inline void Excel::IDrawings::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4839)
inline _variant_t Excel::IDrawings::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4840)
inline void Excel::IDrawings::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4841)
inline VARIANT_BOOL Excel::IDrawings::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4842)
inline void Excel::IDrawings::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4843)
inline _variant_t Excel::IDrawings::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4844)
inline _variant_t Excel::IDrawings::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4845)
inline double Excel::IDrawings::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4846)
inline void Excel::IDrawings::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4847)
inline VARIANT_BOOL Excel::IDrawings::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4848)
inline void Excel::IDrawings::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4849)
inline double Excel::IDrawings::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4850)
inline void Excel::IDrawings::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4851)
inline long Excel::IDrawings::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4852)
inline Excel::ShapeRangePtr Excel::IDrawings::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(4853)
inline VARIANT_BOOL Excel::IDrawings::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4854)
inline void Excel::IDrawings::PutAddIndent ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4855)
inline _variant_t Excel::IDrawings::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4856)
inline void Excel::IDrawings::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4857)
inline VARIANT_BOOL Excel::IDrawings::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4858)
inline void Excel::IDrawings::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4859)
inline _bstr_t Excel::IDrawings::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4860)
inline void Excel::IDrawings::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4861)
inline Excel::CharactersPtr Excel::IDrawings::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(4862)
inline _variant_t Excel::IDrawings::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4863)
inline Excel::FontPtr Excel::IDrawings::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(4864)
inline _bstr_t Excel::IDrawings::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4865)
inline void Excel::IDrawings::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4866)
inline _variant_t Excel::IDrawings::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4867)
inline void Excel::IDrawings::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4868)
inline VARIANT_BOOL Excel::IDrawings::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4869)
inline void Excel::IDrawings::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4870)
inline _variant_t Excel::IDrawings::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4871)
inline void Excel::IDrawings::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4872)
inline _bstr_t Excel::IDrawings::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4873)
inline void Excel::IDrawings::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4874)
inline _variant_t Excel::IDrawings::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4875)
inline void Excel::IDrawings::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4876)
inline long Excel::IDrawings::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4877)
inline void Excel::IDrawings::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4878)
inline Excel::BorderPtr Excel::IDrawings::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(4879)
inline Excel::InteriorPtr Excel::IDrawings::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(4880)
inline VARIANT_BOOL Excel::IDrawings::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4881)
inline void Excel::IDrawings::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4882)
inline _variant_t Excel::IDrawings::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Reshape(Vertex, Insert, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4883)
inline Excel::DrawingPtr Excel::IDrawings::Add ( double X1, double Y1, double X2, double Y2, VARIANT_BOOL Closed ) {
    struct Drawing * _result;
    HRESULT _hr = raw_Add(X1, Y1, X2, Y2, Closed, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DrawingPtr(_result, false);
}

#pragma implementation_key(4884)
inline long Excel::IDrawings::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4885)
inline Excel::GroupObjectPtr Excel::IDrawings::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(4886)
inline IDispatchPtr Excel::IDrawings::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4887)
inline IUnknownPtr Excel::IDrawings::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IRoutingSlip wrapper method implementations
//

#pragma implementation_key(4888)
inline Excel::_ApplicationPtr Excel::IRoutingSlip::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4889)
inline enum XlCreator Excel::IRoutingSlip::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4890)
inline IDispatchPtr Excel::IRoutingSlip::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4891)
inline enum XlRoutingSlipDelivery Excel::IRoutingSlip::GetDelivery ( ) {
    enum XlRoutingSlipDelivery _result;
    HRESULT _hr = get_Delivery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4892)
inline void Excel::IRoutingSlip::PutDelivery ( enum XlRoutingSlipDelivery RHS ) {
    HRESULT _hr = put_Delivery(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4893)
inline _variant_t Excel::IRoutingSlip::GetMessage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4894)
inline void Excel::IRoutingSlip::PutMessage ( const _variant_t & RHS ) {
    HRESULT _hr = put_Message(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4895)
inline _variant_t Excel::IRoutingSlip::GetRecipients ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Recipients(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4896)
inline void Excel::IRoutingSlip::PutRecipients ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_Recipients(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4897)
inline _variant_t Excel::IRoutingSlip::Reset ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Reset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4898)
inline VARIANT_BOOL Excel::IRoutingSlip::GetReturnWhenDone ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReturnWhenDone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4899)
inline void Excel::IRoutingSlip::PutReturnWhenDone ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ReturnWhenDone(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4900)
inline enum XlRoutingSlipStatus Excel::IRoutingSlip::GetStatus ( ) {
    enum XlRoutingSlipStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4901)
inline _variant_t Excel::IRoutingSlip::GetSubject ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4902)
inline void Excel::IRoutingSlip::PutSubject ( const _variant_t & RHS ) {
    HRESULT _hr = put_Subject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4903)
inline VARIANT_BOOL Excel::IRoutingSlip::GetTrackStatus ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TrackStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4904)
inline void Excel::IRoutingSlip::PutTrackStatus ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TrackStatus(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOutline wrapper method implementations
//

#pragma implementation_key(4905)
inline Excel::_ApplicationPtr Excel::IOutline::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4906)
inline enum XlCreator Excel::IOutline::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4907)
inline IDispatchPtr Excel::IOutline::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4908)
inline VARIANT_BOOL Excel::IOutline::GetAutomaticStyles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutomaticStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4909)
inline void Excel::IOutline::PutAutomaticStyles ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutomaticStyles(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4910)
inline _variant_t Excel::IOutline::ShowLevels ( const _variant_t & RowLevels, const _variant_t & ColumnLevels ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ShowLevels(RowLevels, ColumnLevels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4911)
inline enum XlSummaryColumn Excel::IOutline::GetSummaryColumn ( ) {
    enum XlSummaryColumn _result;
    HRESULT _hr = get_SummaryColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4912)
inline void Excel::IOutline::PutSummaryColumn ( enum XlSummaryColumn RHS ) {
    HRESULT _hr = put_SummaryColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4913)
inline enum XlSummaryRow Excel::IOutline::GetSummaryRow ( ) {
    enum XlSummaryRow _result;
    HRESULT _hr = get_SummaryRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4914)
inline void Excel::IOutline::PutSummaryRow ( enum XlSummaryRow RHS ) {
    HRESULT _hr = put_SummaryRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IModule wrapper method implementations
//

#pragma implementation_key(4915)
inline Excel::_ApplicationPtr Excel::IModule::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4916)
inline enum XlCreator Excel::IModule::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4917)
inline IDispatchPtr Excel::IModule::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4918)
inline HRESULT Excel::IModule::Activate ( long lcid ) {
    HRESULT _hr = raw_Activate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4919)
inline HRESULT Excel::IModule::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4920)
inline HRESULT Excel::IModule::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4921)
inline _bstr_t Excel::IModule::GetCodeName ( ) {
    BSTR _result;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4922)
inline _bstr_t Excel::IModule::Get_CodeName ( ) {
    BSTR _result;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4923)
inline void Excel::IModule::Put_CodeName ( _bstr_t RHS ) {
    HRESULT _hr = put__CodeName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4924)
inline long Excel::IModule::GetIndex ( long lcid ) {
    long _result;
    HRESULT _hr = get_Index(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4925)
inline HRESULT Excel::IModule::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4926)
inline _bstr_t Excel::IModule::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4927)
inline void Excel::IModule::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4928)
inline IDispatchPtr Excel::IModule::GetNext ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4929)
inline _bstr_t Excel::IModule::GetOnDoubleClick ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnDoubleClick(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4930)
inline void Excel::IModule::PutOnDoubleClick ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnDoubleClick(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4931)
inline _bstr_t Excel::IModule::GetOnSheetActivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4932)
inline void Excel::IModule::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4933)
inline _bstr_t Excel::IModule::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4934)
inline void Excel::IModule::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4935)
inline Excel::PageSetupPtr Excel::IModule::GetPageSetup ( ) {
    struct PageSetup * _result;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(4936)
inline IDispatchPtr Excel::IModule::GetPrevious ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4937)
inline HRESULT Excel::IModule::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4938)
inline HRESULT Excel::IModule::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid ) {
    HRESULT _hr = raw__Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4939)
inline VARIANT_BOOL Excel::IModule::GetProtectContents ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectContents(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4940)
inline VARIANT_BOOL Excel::IModule::GetProtectionMode ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectionMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4941)
inline HRESULT Excel::IModule::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw__SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4942)
inline HRESULT Excel::IModule::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4943)
inline HRESULT Excel::IModule::Unprotect ( const _variant_t & Password, long lcid ) {
    HRESULT _hr = raw_Unprotect(Password, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4944)
inline enum XlSheetVisibility Excel::IModule::GetVisible ( long lcid ) {
    enum XlSheetVisibility _result;
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4945)
inline void Excel::IModule::PutVisible ( long lcid, enum XlSheetVisibility RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4946)
inline Excel::ShapesPtr Excel::IModule::GetShapes ( ) {
    struct Shapes * _result;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(4947)
inline _variant_t Excel::IModule::InsertFile ( const _variant_t & Filename, const _variant_t & Merge ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_InsertFile(Filename, Merge, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4948)
inline HRESULT Excel::IModule::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout ) {
    HRESULT _hr = raw_SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4949)
inline HRESULT Excel::IModule::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly ) {
    HRESULT _hr = raw_Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IModules wrapper method implementations
//

#pragma implementation_key(4950)
inline Excel::_ApplicationPtr Excel::IModules::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4951)
inline enum XlCreator Excel::IModules::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4952)
inline IDispatchPtr Excel::IModules::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4953)
inline Excel::ModulePtr Excel::IModules::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct Module * _result;
    HRESULT _hr = raw_Add(Before, After, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ModulePtr(_result, false);
}

#pragma implementation_key(4954)
inline HRESULT Excel::IModules::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4955)
inline long Excel::IModules::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4956)
inline HRESULT Excel::IModules::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4957)
inline IDispatchPtr Excel::IModules::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4958)
inline HRESULT Excel::IModules::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4959)
inline IUnknownPtr Excel::IModules::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4960)
inline HRESULT Excel::IModules::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4961)
inline HRESULT Excel::IModules::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4962)
inline Excel::HPageBreaksPtr Excel::IModules::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(4963)
inline Excel::VPageBreaksPtr Excel::IModules::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(4964)
inline _variant_t Excel::IModules::GetVisible ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4965)
inline void Excel::IModules::PutVisible ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4966)
inline IDispatchPtr Excel::IModules::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4967)
inline HRESULT Excel::IModules::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDialogSheet wrapper method implementations
//

#pragma implementation_key(4968)
inline Excel::_ApplicationPtr Excel::IDialogSheet::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4969)
inline enum XlCreator Excel::IDialogSheet::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4970)
inline IDispatchPtr Excel::IDialogSheet::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4971)
inline HRESULT Excel::IDialogSheet::Activate ( long lcid ) {
    HRESULT _hr = raw_Activate(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4972)
inline HRESULT Excel::IDialogSheet::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4973)
inline HRESULT Excel::IDialogSheet::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4974)
inline _bstr_t Excel::IDialogSheet::GetCodeName ( ) {
    BSTR _result;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4975)
inline _bstr_t Excel::IDialogSheet::Get_CodeName ( ) {
    BSTR _result;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4976)
inline void Excel::IDialogSheet::Put_CodeName ( _bstr_t RHS ) {
    HRESULT _hr = put__CodeName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4977)
inline long Excel::IDialogSheet::GetIndex ( long lcid ) {
    long _result;
    HRESULT _hr = get_Index(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4978)
inline HRESULT Excel::IDialogSheet::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4979)
inline _bstr_t Excel::IDialogSheet::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4980)
inline void Excel::IDialogSheet::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4981)
inline IDispatchPtr Excel::IDialogSheet::GetNext ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4982)
inline _bstr_t Excel::IDialogSheet::GetOnDoubleClick ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnDoubleClick(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4983)
inline void Excel::IDialogSheet::PutOnDoubleClick ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnDoubleClick(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4984)
inline _bstr_t Excel::IDialogSheet::GetOnSheetActivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetActivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4985)
inline void Excel::IDialogSheet::PutOnSheetActivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetActivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4986)
inline _bstr_t Excel::IDialogSheet::GetOnSheetDeactivate ( long lcid ) {
    BSTR _result;
    HRESULT _hr = get_OnSheetDeactivate(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4987)
inline void Excel::IDialogSheet::PutOnSheetDeactivate ( long lcid, _bstr_t RHS ) {
    HRESULT _hr = put_OnSheetDeactivate(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4988)
inline Excel::PageSetupPtr Excel::IDialogSheet::GetPageSetup ( ) {
    struct PageSetup * _result;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(4989)
inline IDispatchPtr Excel::IDialogSheet::GetPrevious ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4990)
inline HRESULT Excel::IDialogSheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4991)
inline HRESULT Excel::IDialogSheet::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4992)
inline HRESULT Excel::IDialogSheet::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid ) {
    HRESULT _hr = raw__Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4993)
inline VARIANT_BOOL Excel::IDialogSheet::GetProtectContents ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectContents(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4994)
inline VARIANT_BOOL Excel::IDialogSheet::GetProtectDrawingObjects ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectDrawingObjects(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4995)
inline VARIANT_BOOL Excel::IDialogSheet::GetProtectionMode ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectionMode(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4996)
inline VARIANT_BOOL Excel::IDialogSheet::GetProtectScenarios ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectScenarios(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4997)
inline HRESULT Excel::IDialogSheet::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid ) {
    HRESULT _hr = raw__SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4998)
inline HRESULT Excel::IDialogSheet::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4999)
inline HRESULT Excel::IDialogSheet::Unprotect ( const _variant_t & Password, long lcid ) {
    HRESULT _hr = raw_Unprotect(Password, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5000)
inline enum XlSheetVisibility Excel::IDialogSheet::GetVisible ( long lcid ) {
    enum XlSheetVisibility _result;
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5001)
inline void Excel::IDialogSheet::PutVisible ( long lcid, enum XlSheetVisibility RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5002)
inline Excel::ShapesPtr Excel::IDialogSheet::GetShapes ( ) {
    struct Shapes * _result;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(5003)
inline IDispatchPtr Excel::IDialogSheet::Arcs ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Arcs(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5004)
inline IDispatchPtr Excel::IDialogSheet::Buttons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Buttons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5005)
inline VARIANT_BOOL Excel::IDialogSheet::GetEnableCalculation ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableCalculation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5006)
inline void Excel::IDialogSheet::PutEnableCalculation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableCalculation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5007)
inline IDispatchPtr Excel::IDialogSheet::ChartObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ChartObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5008)
inline IDispatchPtr Excel::IDialogSheet::CheckBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_CheckBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5009)
inline HRESULT Excel::IDialogSheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid ) {
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5010)
inline VARIANT_BOOL Excel::IDialogSheet::GetDisplayAutomaticPageBreaks ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayAutomaticPageBreaks(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5011)
inline void Excel::IDialogSheet::PutDisplayAutomaticPageBreaks ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayAutomaticPageBreaks(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5012)
inline IDispatchPtr Excel::IDialogSheet::Drawings ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Drawings(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5013)
inline IDispatchPtr Excel::IDialogSheet::DrawingObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_DrawingObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5014)
inline IDispatchPtr Excel::IDialogSheet::DropDowns ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_DropDowns(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5015)
inline VARIANT_BOOL Excel::IDialogSheet::GetEnableAutoFilter ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableAutoFilter(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5016)
inline void Excel::IDialogSheet::PutEnableAutoFilter ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableAutoFilter(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5017)
inline enum XlEnableSelection Excel::IDialogSheet::GetEnableSelection ( ) {
    enum XlEnableSelection _result;
    HRESULT _hr = get_EnableSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5018)
inline void Excel::IDialogSheet::PutEnableSelection ( enum XlEnableSelection RHS ) {
    HRESULT _hr = put_EnableSelection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5019)
inline VARIANT_BOOL Excel::IDialogSheet::GetEnableOutlining ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableOutlining(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5020)
inline void Excel::IDialogSheet::PutEnableOutlining ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableOutlining(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5021)
inline VARIANT_BOOL Excel::IDialogSheet::GetEnablePivotTable ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnablePivotTable(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5022)
inline void Excel::IDialogSheet::PutEnablePivotTable ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnablePivotTable(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5023)
inline _variant_t Excel::IDialogSheet::Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5024)
inline _variant_t Excel::IDialogSheet::_Evaluate ( const _variant_t & Name, long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(Name, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5025)
inline HRESULT Excel::IDialogSheet::ResetAllPageBreaks ( ) {
    HRESULT _hr = raw_ResetAllPageBreaks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5026)
inline IDispatchPtr Excel::IDialogSheet::GroupBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_GroupBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5027)
inline IDispatchPtr Excel::IDialogSheet::GroupObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_GroupObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5028)
inline IDispatchPtr Excel::IDialogSheet::Labels ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Labels(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5029)
inline IDispatchPtr Excel::IDialogSheet::Lines ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Lines(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5030)
inline IDispatchPtr Excel::IDialogSheet::ListBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ListBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5031)
inline Excel::NamesPtr Excel::IDialogSheet::GetNames ( ) {
    struct Names * _result;
    HRESULT _hr = get_Names(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamesPtr(_result, false);
}

#pragma implementation_key(5032)
inline IDispatchPtr Excel::IDialogSheet::OLEObjects ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_OLEObjects(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5033)
inline IDispatchPtr Excel::IDialogSheet::OptionButtons ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_OptionButtons(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5034)
inline IDispatchPtr Excel::IDialogSheet::Ovals ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Ovals(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5035)
inline HRESULT Excel::IDialogSheet::Paste ( const _variant_t & Destination, const _variant_t & Link, long lcid ) {
    HRESULT _hr = raw_Paste(Destination, Link, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5036)
inline HRESULT Excel::IDialogSheet::_PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, long lcid ) {
    HRESULT _hr = raw__PasteSpecial(Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5037)
inline IDispatchPtr Excel::IDialogSheet::Pictures ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Pictures(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5038)
inline IDispatchPtr Excel::IDialogSheet::Rectangles ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Rectangles(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5039)
inline _bstr_t Excel::IDialogSheet::GetScrollArea ( ) {
    BSTR _result;
    HRESULT _hr = get_ScrollArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5040)
inline void Excel::IDialogSheet::PutScrollArea ( _bstr_t RHS ) {
    HRESULT _hr = put_ScrollArea(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5041)
inline IDispatchPtr Excel::IDialogSheet::ScrollBars ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_ScrollBars(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5042)
inline IDispatchPtr Excel::IDialogSheet::Spinners ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Spinners(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5043)
inline IDispatchPtr Excel::IDialogSheet::TextBoxes ( const _variant_t & Index, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_TextBoxes(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5044)
inline Excel::HPageBreaksPtr Excel::IDialogSheet::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(5045)
inline Excel::VPageBreaksPtr Excel::IDialogSheet::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(5046)
inline Excel::QueryTablesPtr Excel::IDialogSheet::GetQueryTables ( ) {
    struct QueryTables * _result;
    HRESULT _hr = get_QueryTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return QueryTablesPtr(_result, false);
}

#pragma implementation_key(5047)
inline VARIANT_BOOL Excel::IDialogSheet::GetDisplayPageBreaks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5048)
inline void Excel::IDialogSheet::PutDisplayPageBreaks ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayPageBreaks(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5049)
inline Excel::CommentsPtr Excel::IDialogSheet::GetComments ( ) {
    struct Comments * _result;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(5050)
inline Excel::HyperlinksPtr Excel::IDialogSheet::GetHyperlinks ( ) {
    struct Hyperlinks * _result;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(5051)
inline HRESULT Excel::IDialogSheet::ClearCircles ( ) {
    HRESULT _hr = raw_ClearCircles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5052)
inline HRESULT Excel::IDialogSheet::CircleInvalid ( ) {
    HRESULT _hr = raw_CircleInvalid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5053)
inline long Excel::IDialogSheet::Get_DisplayRightToLeft ( long lcid ) {
    long _result;
    HRESULT _hr = get__DisplayRightToLeft(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5054)
inline void Excel::IDialogSheet::Put_DisplayRightToLeft ( long lcid, long RHS ) {
    HRESULT _hr = put__DisplayRightToLeft(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5055)
inline Excel::AutoFilterPtr Excel::IDialogSheet::GetAutoFilter ( ) {
    struct AutoFilter * _result;
    HRESULT _hr = get_AutoFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoFilterPtr(_result, false);
}

#pragma implementation_key(5056)
inline VARIANT_BOOL Excel::IDialogSheet::GetDisplayRightToLeft ( long lcid ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayRightToLeft(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5057)
inline void Excel::IDialogSheet::PutDisplayRightToLeft ( long lcid, VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRightToLeft(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5058)
inline Office::ScriptsPtr Excel::IDialogSheet::GetScripts ( ) {
    struct Office::Scripts * _result;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

#pragma implementation_key(5059)
inline HRESULT Excel::IDialogSheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5060)
inline HRESULT Excel::IDialogSheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript, long lcid ) {
    HRESULT _hr = raw__CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, SpellLang, IgnoreFinalYaa, SpellScript, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5061)
inline Excel::TabPtr Excel::IDialogSheet::GetTab ( ) {
    struct Tab * _result;
    HRESULT _hr = get_Tab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabPtr(_result, false);
}

#pragma implementation_key(5062)
inline Office::IMsoEnvelopeVBPtr Excel::IDialogSheet::GetMailEnvelope ( ) {
    struct Office::IMsoEnvelopeVB * _result;
    HRESULT _hr = get_MailEnvelope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IMsoEnvelopeVBPtr(_result, false);
}

#pragma implementation_key(5063)
inline HRESULT Excel::IDialogSheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local ) {
    HRESULT _hr = raw_SaveAs(Filename, FileFormat, Password, WriteResPassword, ReadOnlyRecommended, CreateBackup, AddToMru, TextCodepage, TextVisualLayout, Local);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5064)
inline Excel::CustomPropertiesPtr Excel::IDialogSheet::GetCustomProperties ( ) {
    struct CustomProperties * _result;
    HRESULT _hr = get_CustomProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomPropertiesPtr(_result, false);
}

#pragma implementation_key(5065)
inline Excel::SmartTagsPtr Excel::IDialogSheet::GetSmartTags ( ) {
    struct SmartTags * _result;
    HRESULT _hr = get_SmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagsPtr(_result, false);
}

#pragma implementation_key(5066)
inline Excel::ProtectionPtr Excel::IDialogSheet::GetProtection ( ) {
    struct Protection * _result;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProtectionPtr(_result, false);
}

#pragma implementation_key(5067)
inline HRESULT Excel::IDialogSheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & NoHTMLFormatting, long lcid ) {
    HRESULT _hr = raw_PasteSpecial(Format, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, NoHTMLFormatting, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5068)
inline HRESULT Excel::IDialogSheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, const _variant_t & AllowFormattingCells, const _variant_t & AllowFormattingColumns, const _variant_t & AllowFormattingRows, const _variant_t & AllowInsertingColumns, const _variant_t & AllowInsertingRows, const _variant_t & AllowInsertingHyperlinks, const _variant_t & AllowDeletingColumns, const _variant_t & AllowDeletingRows, const _variant_t & AllowSorting, const _variant_t & AllowFiltering, const _variant_t & AllowUsingPivotTables ) {
    HRESULT _hr = raw_Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, AllowFormattingCells, AllowFormattingColumns, AllowFormattingRows, AllowInsertingColumns, AllowInsertingRows, AllowInsertingHyperlinks, AllowDeletingColumns, AllowDeletingRows, AllowSorting, AllowFiltering, AllowUsingPivotTables);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5069)
inline _variant_t Excel::IDialogSheet::GetDefaultButton ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5070)
inline void Excel::IDialogSheet::PutDefaultButton ( const _variant_t & RHS ) {
    HRESULT _hr = put_DefaultButton(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5071)
inline Excel::DialogFramePtr Excel::IDialogSheet::GetDialogFrame ( ) {
    struct DialogFrame * _result;
    HRESULT _hr = get_DialogFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogFramePtr(_result, false);
}

#pragma implementation_key(5072)
inline IDispatchPtr Excel::IDialogSheet::EditBoxes ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_EditBoxes(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5073)
inline _variant_t Excel::IDialogSheet::GetFocus ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Focus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5074)
inline void Excel::IDialogSheet::PutFocus ( const _variant_t & RHS ) {
    HRESULT _hr = put_Focus(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5075)
inline VARIANT_BOOL Excel::IDialogSheet::Hide ( const _variant_t & Cancel ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Hide(Cancel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5076)
inline VARIANT_BOOL Excel::IDialogSheet::Show ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDialogSheets wrapper method implementations
//

#pragma implementation_key(5077)
inline Excel::_ApplicationPtr Excel::IDialogSheets::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5078)
inline enum XlCreator Excel::IDialogSheets::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5079)
inline IDispatchPtr Excel::IDialogSheets::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5080)
inline Excel::DialogSheetPtr Excel::IDialogSheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct DialogSheet * _result;
    HRESULT _hr = raw_Add(Before, After, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogSheetPtr(_result, false);
}

#pragma implementation_key(5081)
inline HRESULT Excel::IDialogSheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5082)
inline long Excel::IDialogSheets::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5083)
inline HRESULT Excel::IDialogSheets::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5084)
inline IDispatchPtr Excel::IDialogSheets::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5085)
inline HRESULT Excel::IDialogSheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5086)
inline IUnknownPtr Excel::IDialogSheets::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5087)
inline HRESULT Excel::IDialogSheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5088)
inline HRESULT Excel::IDialogSheets::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5089)
inline HRESULT Excel::IDialogSheets::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5090)
inline Excel::HPageBreaksPtr Excel::IDialogSheets::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(5091)
inline Excel::VPageBreaksPtr Excel::IDialogSheets::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(5092)
inline _variant_t Excel::IDialogSheets::GetVisible ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5093)
inline void Excel::IDialogSheets::PutVisible ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5094)
inline IDispatchPtr Excel::IDialogSheets::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5095)
inline HRESULT Excel::IDialogSheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWorksheets wrapper method implementations
//

#pragma implementation_key(5096)
inline Excel::_ApplicationPtr Excel::IWorksheets::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5097)
inline enum XlCreator Excel::IWorksheets::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5098)
inline IDispatchPtr Excel::IWorksheets::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5099)
inline IDispatchPtr Excel::IWorksheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type, long lcid ) {
    IDispatch * _result;
    HRESULT _hr = raw_Add(Before, After, Count, Type, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5100)
inline HRESULT Excel::IWorksheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Copy(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5101)
inline long Excel::IWorksheets::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5102)
inline HRESULT Excel::IWorksheets::Delete ( long lcid ) {
    HRESULT _hr = raw_Delete(lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5103)
inline HRESULT Excel::IWorksheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type, long lcid ) {
    HRESULT _hr = raw_FillAcrossSheets(Range, Type, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5104)
inline IDispatchPtr Excel::IWorksheets::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5105)
inline HRESULT Excel::IWorksheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid ) {
    HRESULT _hr = raw_Move(Before, After, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5106)
inline IUnknownPtr Excel::IWorksheets::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5107)
inline HRESULT Excel::IWorksheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid ) {
    HRESULT _hr = raw__PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5108)
inline HRESULT Excel::IWorksheets::PrintPreview ( const _variant_t & EnableChanges, long lcid ) {
    HRESULT _hr = raw_PrintPreview(EnableChanges, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5109)
inline HRESULT Excel::IWorksheets::Select ( const _variant_t & Replace, long lcid ) {
    HRESULT _hr = raw_Select(Replace, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5110)
inline Excel::HPageBreaksPtr Excel::IWorksheets::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    HRESULT _hr = get_HPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(5111)
inline Excel::VPageBreaksPtr Excel::IWorksheets::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    HRESULT _hr = get_VPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(5112)
inline _variant_t Excel::IWorksheets::GetVisible ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Visible(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5113)
inline void Excel::IWorksheets::PutVisible ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_Visible(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5114)
inline IDispatchPtr Excel::IWorksheets::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5115)
inline HRESULT Excel::IWorksheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid ) {
    HRESULT _hr = raw_PrintOut(From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, lcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPageSetup wrapper method implementations
//

#pragma implementation_key(5116)
inline Excel::_ApplicationPtr Excel::IPageSetup::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5117)
inline enum XlCreator Excel::IPageSetup::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5118)
inline IDispatchPtr Excel::IPageSetup::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5119)
inline VARIANT_BOOL Excel::IPageSetup::GetBlackAndWhite ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BlackAndWhite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5120)
inline void Excel::IPageSetup::PutBlackAndWhite ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BlackAndWhite(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5121)
inline double Excel::IPageSetup::GetBottomMargin ( ) {
    double _result;
    HRESULT _hr = get_BottomMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5122)
inline void Excel::IPageSetup::PutBottomMargin ( double RHS ) {
    HRESULT _hr = put_BottomMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5123)
inline _bstr_t Excel::IPageSetup::GetCenterFooter ( ) {
    BSTR _result;
    HRESULT _hr = get_CenterFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5124)
inline void Excel::IPageSetup::PutCenterFooter ( _bstr_t RHS ) {
    HRESULT _hr = put_CenterFooter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5125)
inline _bstr_t Excel::IPageSetup::GetCenterHeader ( ) {
    BSTR _result;
    HRESULT _hr = get_CenterHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5126)
inline void Excel::IPageSetup::PutCenterHeader ( _bstr_t RHS ) {
    HRESULT _hr = put_CenterHeader(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5127)
inline VARIANT_BOOL Excel::IPageSetup::GetCenterHorizontally ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CenterHorizontally(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5128)
inline void Excel::IPageSetup::PutCenterHorizontally ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CenterHorizontally(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5129)
inline VARIANT_BOOL Excel::IPageSetup::GetCenterVertically ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CenterVertically(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5130)
inline void Excel::IPageSetup::PutCenterVertically ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CenterVertically(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5131)
inline enum XlObjectSize Excel::IPageSetup::GetChartSize ( ) {
    enum XlObjectSize _result;
    HRESULT _hr = get_ChartSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5132)
inline void Excel::IPageSetup::PutChartSize ( enum XlObjectSize RHS ) {
    HRESULT _hr = put_ChartSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5133)
inline VARIANT_BOOL Excel::IPageSetup::GetDraft ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Draft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5134)
inline void Excel::IPageSetup::PutDraft ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Draft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5135)
inline long Excel::IPageSetup::GetFirstPageNumber ( ) {
    long _result;
    HRESULT _hr = get_FirstPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5136)
inline void Excel::IPageSetup::PutFirstPageNumber ( long RHS ) {
    HRESULT _hr = put_FirstPageNumber(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5137)
inline _variant_t Excel::IPageSetup::GetFitToPagesTall ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FitToPagesTall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5138)
inline void Excel::IPageSetup::PutFitToPagesTall ( const _variant_t & RHS ) {
    HRESULT _hr = put_FitToPagesTall(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5139)
inline _variant_t Excel::IPageSetup::GetFitToPagesWide ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FitToPagesWide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5140)
inline void Excel::IPageSetup::PutFitToPagesWide ( const _variant_t & RHS ) {
    HRESULT _hr = put_FitToPagesWide(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5141)
inline double Excel::IPageSetup::GetFooterMargin ( ) {
    double _result;
    HRESULT _hr = get_FooterMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5142)
inline void Excel::IPageSetup::PutFooterMargin ( double RHS ) {
    HRESULT _hr = put_FooterMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5143)
inline double Excel::IPageSetup::GetHeaderMargin ( ) {
    double _result;
    HRESULT _hr = get_HeaderMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5144)
inline void Excel::IPageSetup::PutHeaderMargin ( double RHS ) {
    HRESULT _hr = put_HeaderMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5145)
inline _bstr_t Excel::IPageSetup::GetLeftFooter ( ) {
    BSTR _result;
    HRESULT _hr = get_LeftFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5146)
inline void Excel::IPageSetup::PutLeftFooter ( _bstr_t RHS ) {
    HRESULT _hr = put_LeftFooter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5147)
inline _bstr_t Excel::IPageSetup::GetLeftHeader ( ) {
    BSTR _result;
    HRESULT _hr = get_LeftHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5148)
inline void Excel::IPageSetup::PutLeftHeader ( _bstr_t RHS ) {
    HRESULT _hr = put_LeftHeader(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5149)
inline double Excel::IPageSetup::GetLeftMargin ( ) {
    double _result;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5150)
inline void Excel::IPageSetup::PutLeftMargin ( double RHS ) {
    HRESULT _hr = put_LeftMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5151)
inline enum XlOrder Excel::IPageSetup::GetOrder ( ) {
    enum XlOrder _result;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5152)
inline void Excel::IPageSetup::PutOrder ( enum XlOrder RHS ) {
    HRESULT _hr = put_Order(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5153)
inline enum XlPageOrientation Excel::IPageSetup::GetOrientation ( ) {
    enum XlPageOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5154)
inline void Excel::IPageSetup::PutOrientation ( enum XlPageOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5155)
inline enum XlPaperSize Excel::IPageSetup::GetPaperSize ( ) {
    enum XlPaperSize _result;
    HRESULT _hr = get_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5156)
inline void Excel::IPageSetup::PutPaperSize ( enum XlPaperSize RHS ) {
    HRESULT _hr = put_PaperSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5157)
inline _bstr_t Excel::IPageSetup::GetPrintArea ( ) {
    BSTR _result;
    HRESULT _hr = get_PrintArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5158)
inline void Excel::IPageSetup::PutPrintArea ( _bstr_t RHS ) {
    HRESULT _hr = put_PrintArea(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5159)
inline VARIANT_BOOL Excel::IPageSetup::GetPrintGridlines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5160)
inline void Excel::IPageSetup::PutPrintGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5161)
inline VARIANT_BOOL Excel::IPageSetup::GetPrintHeadings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintHeadings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5162)
inline void Excel::IPageSetup::PutPrintHeadings ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintHeadings(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5163)
inline VARIANT_BOOL Excel::IPageSetup::GetPrintNotes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5164)
inline void Excel::IPageSetup::PutPrintNotes ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintNotes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5165)
inline _variant_t Excel::IPageSetup::GetPrintQuality ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PrintQuality(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5166)
inline void Excel::IPageSetup::PutPrintQuality ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_PrintQuality(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5167)
inline _bstr_t Excel::IPageSetup::GetPrintTitleColumns ( ) {
    BSTR _result;
    HRESULT _hr = get_PrintTitleColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5168)
inline void Excel::IPageSetup::PutPrintTitleColumns ( _bstr_t RHS ) {
    HRESULT _hr = put_PrintTitleColumns(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5169)
inline _bstr_t Excel::IPageSetup::GetPrintTitleRows ( ) {
    BSTR _result;
    HRESULT _hr = get_PrintTitleRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5170)
inline void Excel::IPageSetup::PutPrintTitleRows ( _bstr_t RHS ) {
    HRESULT _hr = put_PrintTitleRows(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5171)
inline _bstr_t Excel::IPageSetup::GetRightFooter ( ) {
    BSTR _result;
    HRESULT _hr = get_RightFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5172)
inline void Excel::IPageSetup::PutRightFooter ( _bstr_t RHS ) {
    HRESULT _hr = put_RightFooter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5173)
inline _bstr_t Excel::IPageSetup::GetRightHeader ( ) {
    BSTR _result;
    HRESULT _hr = get_RightHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5174)
inline void Excel::IPageSetup::PutRightHeader ( _bstr_t RHS ) {
    HRESULT _hr = put_RightHeader(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5175)
inline double Excel::IPageSetup::GetRightMargin ( ) {
    double _result;
    HRESULT _hr = get_RightMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5176)
inline void Excel::IPageSetup::PutRightMargin ( double RHS ) {
    HRESULT _hr = put_RightMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5177)
inline double Excel::IPageSetup::GetTopMargin ( ) {
    double _result;
    HRESULT _hr = get_TopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5178)
inline void Excel::IPageSetup::PutTopMargin ( double RHS ) {
    HRESULT _hr = put_TopMargin(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5179)
inline _variant_t Excel::IPageSetup::GetZoom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5180)
inline void Excel::IPageSetup::PutZoom ( const _variant_t & RHS ) {
    HRESULT _hr = put_Zoom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5181)
inline enum XlPrintLocation Excel::IPageSetup::GetPrintComments ( ) {
    enum XlPrintLocation _result;
    HRESULT _hr = get_PrintComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5182)
inline void Excel::IPageSetup::PutPrintComments ( enum XlPrintLocation RHS ) {
    HRESULT _hr = put_PrintComments(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5183)
inline enum XlPrintErrors Excel::IPageSetup::GetPrintErrors ( ) {
    enum XlPrintErrors _result;
    HRESULT _hr = get_PrintErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5184)
inline void Excel::IPageSetup::PutPrintErrors ( enum XlPrintErrors RHS ) {
    HRESULT _hr = put_PrintErrors(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5185)
inline Excel::GraphicPtr Excel::IPageSetup::GetCenterHeaderPicture ( ) {
    struct Graphic * _result;
    HRESULT _hr = get_CenterHeaderPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GraphicPtr(_result, false);
}

#pragma implementation_key(5186)
inline Excel::GraphicPtr Excel::IPageSetup::GetCenterFooterPicture ( ) {
    struct Graphic * _result;
    HRESULT _hr = get_CenterFooterPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GraphicPtr(_result, false);
}

#pragma implementation_key(5187)
inline Excel::GraphicPtr Excel::IPageSetup::GetLeftHeaderPicture ( ) {
    struct Graphic * _result;
    HRESULT _hr = get_LeftHeaderPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GraphicPtr(_result, false);
}

#pragma implementation_key(5188)
inline Excel::GraphicPtr Excel::IPageSetup::GetLeftFooterPicture ( ) {
    struct Graphic * _result;
    HRESULT _hr = get_LeftFooterPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GraphicPtr(_result, false);
}

#pragma implementation_key(5189)
inline Excel::GraphicPtr Excel::IPageSetup::GetRightHeaderPicture ( ) {
    struct Graphic * _result;
    HRESULT _hr = get_RightHeaderPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GraphicPtr(_result, false);
}

#pragma implementation_key(5190)
inline Excel::GraphicPtr Excel::IPageSetup::GetRightFooterPicture ( ) {
    struct Graphic * _result;
    HRESULT _hr = get_RightFooterPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GraphicPtr(_result, false);
}

//
// interface INames wrapper method implementations
//

#pragma implementation_key(5191)
inline Excel::_ApplicationPtr Excel::INames::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5192)
inline enum XlCreator Excel::INames::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5193)
inline IDispatchPtr Excel::INames::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5194)
inline Excel::NamePtr Excel::INames::Add ( const _variant_t & Name, const _variant_t & RefersTo, const _variant_t & Visible, const _variant_t & MacroType, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & NameLocal, const _variant_t & RefersToLocal, const _variant_t & CategoryLocal, const _variant_t & RefersToR1C1, const _variant_t & RefersToR1C1Local ) {
    struct Name * _result;
    HRESULT _hr = raw_Add(Name, RefersTo, Visible, MacroType, ShortcutKey, Category, NameLocal, RefersToLocal, CategoryLocal, RefersToR1C1, RefersToR1C1Local, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamePtr(_result, false);
}

#pragma implementation_key(5195)
inline Excel::NamePtr Excel::INames::Item ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo, long lcid ) {
    struct Name * _result;
    HRESULT _hr = raw_Item(Index, IndexLocal, RefersTo, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamePtr(_result, false);
}

#pragma implementation_key(5196)
inline Excel::NamePtr Excel::INames::_Default ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo, long lcid ) {
    struct Name * _result;
    HRESULT _hr = raw__Default(Index, IndexLocal, RefersTo, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamePtr(_result, false);
}

#pragma implementation_key(5197)
inline long Excel::INames::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5198)
inline IUnknownPtr Excel::INames::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IName wrapper method implementations
//

#pragma implementation_key(5199)
inline Excel::_ApplicationPtr Excel::IName::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5200)
inline enum XlCreator Excel::IName::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5201)
inline IDispatchPtr Excel::IName::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5202)
inline _bstr_t Excel::IName::Get_Default ( ) {
    BSTR _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5203)
inline long Excel::IName::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5204)
inline _bstr_t Excel::IName::GetCategory ( long lcidIn ) {
    BSTR _result;
    HRESULT _hr = get_Category(lcidIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5205)
inline void Excel::IName::PutCategory ( long lcidIn, _bstr_t RHS ) {
    HRESULT _hr = put_Category(lcidIn, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5206)
inline _bstr_t Excel::IName::GetCategoryLocal ( ) {
    BSTR _result;
    HRESULT _hr = get_CategoryLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5207)
inline void Excel::IName::PutCategoryLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_CategoryLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5208)
inline HRESULT Excel::IName::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5209)
inline enum XlXLMMacroType Excel::IName::GetMacroType ( ) {
    enum XlXLMMacroType _result;
    HRESULT _hr = get_MacroType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5210)
inline void Excel::IName::PutMacroType ( enum XlXLMMacroType RHS ) {
    HRESULT _hr = put_MacroType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5211)
inline _bstr_t Excel::IName::GetName ( long lcidIn ) {
    BSTR _result;
    HRESULT _hr = get_Name(lcidIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5212)
inline void Excel::IName::PutName ( long lcidIn, _bstr_t RHS ) {
    HRESULT _hr = put_Name(lcidIn, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5213)
inline _variant_t Excel::IName::GetRefersTo ( long lcidIn ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RefersTo(lcidIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5214)
inline void Excel::IName::PutRefersTo ( long lcidIn, const _variant_t & RHS ) {
    HRESULT _hr = put_RefersTo(lcidIn, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5215)
inline _bstr_t Excel::IName::GetShortcutKey ( ) {
    BSTR _result;
    HRESULT _hr = get_ShortcutKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5216)
inline void Excel::IName::PutShortcutKey ( _bstr_t RHS ) {
    HRESULT _hr = put_ShortcutKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5217)
inline _bstr_t Excel::IName::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5218)
inline void Excel::IName::PutValue ( _bstr_t RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5219)
inline VARIANT_BOOL Excel::IName::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5220)
inline void Excel::IName::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5221)
inline _bstr_t Excel::IName::GetNameLocal ( ) {
    BSTR _result;
    HRESULT _hr = get_NameLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5222)
inline void Excel::IName::PutNameLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_NameLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5223)
inline _variant_t Excel::IName::GetRefersToLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RefersToLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5224)
inline void Excel::IName::PutRefersToLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_RefersToLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5225)
inline _variant_t Excel::IName::GetRefersToR1C1 ( long lcidIn ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RefersToR1C1(lcidIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5226)
inline void Excel::IName::PutRefersToR1C1 ( long lcidIn, const _variant_t & RHS ) {
    HRESULT _hr = put_RefersToR1C1(lcidIn, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5227)
inline _variant_t Excel::IName::GetRefersToR1C1Local ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RefersToR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5228)
inline void Excel::IName::PutRefersToR1C1Local ( const _variant_t & RHS ) {
    HRESULT _hr = put_RefersToR1C1Local(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5229)
inline Excel::RangePtr Excel::IName::GetRefersToRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_RefersToRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

//
// interface IChartObject wrapper method implementations
//

#pragma implementation_key(5230)
inline Excel::_ApplicationPtr Excel::IChartObject::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5231)
inline enum XlCreator Excel::IChartObject::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5232)
inline IDispatchPtr Excel::IChartObject::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5233)
inline Excel::RangePtr Excel::IChartObject::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(5234)
inline _variant_t Excel::IChartObject::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5235)
inline _variant_t Excel::IChartObject::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5236)
inline _variant_t Excel::IChartObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5237)
inline _variant_t Excel::IChartObject::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5238)
inline _variant_t Excel::IChartObject::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5239)
inline IDispatchPtr Excel::IChartObject::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5240)
inline VARIANT_BOOL Excel::IChartObject::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5241)
inline void Excel::IChartObject::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5242)
inline double Excel::IChartObject::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5243)
inline void Excel::IChartObject::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5244)
inline long Excel::IChartObject::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5245)
inline double Excel::IChartObject::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5246)
inline void Excel::IChartObject::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5247)
inline VARIANT_BOOL Excel::IChartObject::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5248)
inline void Excel::IChartObject::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5249)
inline _bstr_t Excel::IChartObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5250)
inline void Excel::IChartObject::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5251)
inline _bstr_t Excel::IChartObject::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5252)
inline void Excel::IChartObject::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5253)
inline _variant_t Excel::IChartObject::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5254)
inline void Excel::IChartObject::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5255)
inline VARIANT_BOOL Excel::IChartObject::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5256)
inline void Excel::IChartObject::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5257)
inline _variant_t Excel::IChartObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5258)
inline _variant_t Excel::IChartObject::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5259)
inline double Excel::IChartObject::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5260)
inline void Excel::IChartObject::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5261)
inline Excel::RangePtr Excel::IChartObject::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(5262)
inline VARIANT_BOOL Excel::IChartObject::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5263)
inline void Excel::IChartObject::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5264)
inline double Excel::IChartObject::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5265)
inline void Excel::IChartObject::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5266)
inline long Excel::IChartObject::GetZOrder ( ) {
    long _result;
    HRESULT _hr = get_ZOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5267)
inline Excel::ShapeRangePtr Excel::IChartObject::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(5268)
inline _variant_t Excel::IChartObject::Activate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Activate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5269)
inline Excel::_ChartPtr Excel::IChartObject::GetChart ( ) {
    struct _Chart * _result;
    HRESULT _hr = get_Chart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ChartPtr(_result, false);
}

#pragma implementation_key(5270)
inline VARIANT_BOOL Excel::IChartObject::GetProtectChartObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectChartObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5271)
inline void Excel::IChartObject::PutProtectChartObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ProtectChartObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5272)
inline VARIANT_BOOL Excel::IChartObject::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5273)
inline void Excel::IChartObject::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5274)
inline Excel::BorderPtr Excel::IChartObject::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(5275)
inline Excel::InteriorPtr Excel::IChartObject::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(5276)
inline VARIANT_BOOL Excel::IChartObject::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5277)
inline void Excel::IChartObject::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartObjects wrapper method implementations
//

#pragma implementation_key(5278)
inline Excel::_ApplicationPtr Excel::IChartObjects::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5279)
inline enum XlCreator Excel::IChartObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5280)
inline IDispatchPtr Excel::IChartObjects::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5281)
inline _variant_t Excel::IChartObjects::BringToFront ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_BringToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5282)
inline _variant_t Excel::IChartObjects::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5283)
inline _variant_t Excel::IChartObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CopyPicture(Appearance, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5284)
inline _variant_t Excel::IChartObjects::Cut ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Cut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5285)
inline _variant_t Excel::IChartObjects::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5286)
inline IDispatchPtr Excel::IChartObjects::Duplicate ( ) {
    IDispatch * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5287)
inline VARIANT_BOOL Excel::IChartObjects::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5288)
inline void Excel::IChartObjects::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5289)
inline double Excel::IChartObjects::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5290)
inline void Excel::IChartObjects::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5291)
inline double Excel::IChartObjects::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5292)
inline void Excel::IChartObjects::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5293)
inline VARIANT_BOOL Excel::IChartObjects::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5294)
inline void Excel::IChartObjects::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5295)
inline _bstr_t Excel::IChartObjects::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5296)
inline void Excel::IChartObjects::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5297)
inline _variant_t Excel::IChartObjects::GetPlacement ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5298)
inline void Excel::IChartObjects::PutPlacement ( const _variant_t & RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5299)
inline VARIANT_BOOL Excel::IChartObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5300)
inline void Excel::IChartObjects::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5301)
inline _variant_t Excel::IChartObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5302)
inline _variant_t Excel::IChartObjects::SendToBack ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SendToBack(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5303)
inline double Excel::IChartObjects::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5304)
inline void Excel::IChartObjects::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5305)
inline VARIANT_BOOL Excel::IChartObjects::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5306)
inline void Excel::IChartObjects::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5307)
inline double Excel::IChartObjects::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5308)
inline void Excel::IChartObjects::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5309)
inline Excel::ShapeRangePtr Excel::IChartObjects::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(5310)
inline VARIANT_BOOL Excel::IChartObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5311)
inline void Excel::IChartObjects::PutRoundedCorners ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RoundedCorners(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5312)
inline Excel::BorderPtr Excel::IChartObjects::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(5313)
inline Excel::InteriorPtr Excel::IChartObjects::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(5314)
inline VARIANT_BOOL Excel::IChartObjects::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5315)
inline void Excel::IChartObjects::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5316)
inline Excel::ChartObjectPtr Excel::IChartObjects::Add ( double Left, double Top, double Width, double Height ) {
    struct ChartObject * _result;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartObjectPtr(_result, false);
}

#pragma implementation_key(5317)
inline long Excel::IChartObjects::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5318)
inline Excel::GroupObjectPtr Excel::IChartObjects::Group ( ) {
    struct GroupObject * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(5319)
inline IDispatchPtr Excel::IChartObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5320)
inline IUnknownPtr Excel::IChartObjects::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMailer wrapper method implementations
//

#pragma implementation_key(5321)
inline Excel::_ApplicationPtr Excel::IMailer::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5322)
inline enum XlCreator Excel::IMailer::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5323)
inline IDispatchPtr Excel::IMailer::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5324)
inline _variant_t Excel::IMailer::GetBCCRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BCCRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5325)
inline void Excel::IMailer::PutBCCRecipients ( const _variant_t & RHS ) {
    HRESULT _hr = put_BCCRecipients(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5326)
inline _variant_t Excel::IMailer::GetCCRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CCRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5327)
inline void Excel::IMailer::PutCCRecipients ( const _variant_t & RHS ) {
    HRESULT _hr = put_CCRecipients(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5328)
inline _variant_t Excel::IMailer::GetEnclosures ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Enclosures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5329)
inline void Excel::IMailer::PutEnclosures ( const _variant_t & RHS ) {
    HRESULT _hr = put_Enclosures(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5330)
inline VARIANT_BOOL Excel::IMailer::GetReceived ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Received(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5331)
inline DATE Excel::IMailer::GetSendDateTime ( ) {
    DATE _result;
    HRESULT _hr = get_SendDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5332)
inline _bstr_t Excel::IMailer::GetSender ( ) {
    BSTR _result;
    HRESULT _hr = get_Sender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5333)
inline _bstr_t Excel::IMailer::GetSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5334)
inline void Excel::IMailer::PutSubject ( _bstr_t RHS ) {
    HRESULT _hr = put_Subject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5335)
inline _variant_t Excel::IMailer::GetToRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ToRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5336)
inline void Excel::IMailer::PutToRecipients ( const _variant_t & RHS ) {
    HRESULT _hr = put_ToRecipients(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5337)
inline _variant_t Excel::IMailer::GetWhichAddress ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_WhichAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5338)
inline void Excel::IMailer::PutWhichAddress ( const _variant_t & RHS ) {
    HRESULT _hr = put_WhichAddress(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICustomViews wrapper method implementations
//

#pragma implementation_key(5339)
inline Excel::_ApplicationPtr Excel::ICustomViews::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5340)
inline enum XlCreator Excel::ICustomViews::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5341)
inline IDispatchPtr Excel::ICustomViews::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5342)
inline long Excel::ICustomViews::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5343)
inline Excel::CustomViewPtr Excel::ICustomViews::Item ( const _variant_t & ViewName ) {
    struct CustomView * _result;
    HRESULT _hr = raw_Item(ViewName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomViewPtr(_result, false);
}

#pragma implementation_key(5344)
inline Excel::CustomViewPtr Excel::ICustomViews::Add ( _bstr_t ViewName, const _variant_t & PrintSettings, const _variant_t & RowColSettings ) {
    struct CustomView * _result;
    HRESULT _hr = raw_Add(ViewName, PrintSettings, RowColSettings, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomViewPtr(_result, false);
}

#pragma implementation_key(5345)
inline Excel::CustomViewPtr Excel::ICustomViews::Get_Default ( const _variant_t & ViewName ) {
    struct CustomView * _result;
    HRESULT _hr = get__Default(ViewName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomViewPtr(_result, false);
}

#pragma implementation_key(5346)
inline IUnknownPtr Excel::ICustomViews::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICustomView wrapper method implementations
//

#pragma implementation_key(5347)
inline Excel::_ApplicationPtr Excel::ICustomView::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5348)
inline enum XlCreator Excel::ICustomView::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5349)
inline IDispatchPtr Excel::ICustomView::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5350)
inline _bstr_t Excel::ICustomView::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5351)
inline VARIANT_BOOL Excel::ICustomView::GetPrintSettings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5352)
inline VARIANT_BOOL Excel::ICustomView::GetRowColSettings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RowColSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5353)
inline HRESULT Excel::ICustomView::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5354)
inline HRESULT Excel::ICustomView::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFormatConditions wrapper method implementations
//

#pragma implementation_key(5355)
inline Excel::_ApplicationPtr Excel::IFormatConditions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5356)
inline enum XlCreator Excel::IFormatConditions::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5357)
inline IDispatchPtr Excel::IFormatConditions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5358)
inline long Excel::IFormatConditions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5359)
inline Excel::FormatConditionPtr Excel::IFormatConditions::Item ( const _variant_t & Index ) {
    struct FormatCondition * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormatConditionPtr(_result, false);
}

#pragma implementation_key(5360)
inline Excel::FormatConditionPtr Excel::IFormatConditions::Add ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    struct FormatCondition * _result;
    HRESULT _hr = raw_Add(Type, Operator, Formula1, Formula2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormatConditionPtr(_result, false);
}

#pragma implementation_key(5361)
inline Excel::FormatConditionPtr Excel::IFormatConditions::Get_Default ( const _variant_t & Index ) {
    struct FormatCondition * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormatConditionPtr(_result, false);
}

#pragma implementation_key(5362)
inline IUnknownPtr Excel::IFormatConditions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5363)
inline HRESULT Excel::IFormatConditions::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFormatCondition wrapper method implementations
//

#pragma implementation_key(5364)
inline Excel::_ApplicationPtr Excel::IFormatCondition::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5365)
inline enum XlCreator Excel::IFormatCondition::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5366)
inline IDispatchPtr Excel::IFormatCondition::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5367)
inline HRESULT Excel::IFormatCondition::Modify ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    HRESULT _hr = raw_Modify(Type, Operator, Formula1, Formula2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5368)
inline long Excel::IFormatCondition::GetType ( ) {
    long _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5369)
inline long Excel::IFormatCondition::GetOperator ( ) {
    long _result;
    HRESULT _hr = get_Operator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5370)
inline _bstr_t Excel::IFormatCondition::GetFormula1 ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5371)
inline _bstr_t Excel::IFormatCondition::GetFormula2 ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5372)
inline Excel::InteriorPtr Excel::IFormatCondition::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(5373)
inline Excel::BordersPtr Excel::IFormatCondition::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(5374)
inline Excel::FontPtr Excel::IFormatCondition::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(5375)
inline HRESULT Excel::IFormatCondition::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IComments wrapper method implementations
//

#pragma implementation_key(5376)
inline Excel::_ApplicationPtr Excel::IComments::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5377)
inline enum XlCreator Excel::IComments::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5378)
inline IDispatchPtr Excel::IComments::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5379)
inline long Excel::IComments::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5380)
inline Excel::CommentPtr Excel::IComments::Item ( long Index ) {
    struct Comment * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(5381)
inline Excel::CommentPtr Excel::IComments::Get_Default ( long Index ) {
    struct Comment * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(5382)
inline IUnknownPtr Excel::IComments::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IComment wrapper method implementations
//

#pragma implementation_key(5383)
inline Excel::_ApplicationPtr Excel::IComment::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5384)
inline enum XlCreator Excel::IComment::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5385)
inline IDispatchPtr Excel::IComment::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5386)
inline _bstr_t Excel::IComment::GetAuthor ( ) {
    BSTR _result;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5387)
inline Excel::ShapePtr Excel::IComment::GetShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5388)
inline VARIANT_BOOL Excel::IComment::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5389)
inline void Excel::IComment::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5390)
inline _bstr_t Excel::IComment::Text ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Overwrite ) {
    BSTR _result;
    HRESULT _hr = raw_Text(Text, Start, Overwrite, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5391)
inline HRESULT Excel::IComment::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5392)
inline Excel::CommentPtr Excel::IComment::Next ( ) {
    struct Comment * _result;
    HRESULT _hr = raw_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(5393)
inline Excel::CommentPtr Excel::IComment::Previous ( ) {
    struct Comment * _result;
    HRESULT _hr = raw_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

//
// interface IRefreshEvents wrapper method implementations
//

#pragma implementation_key(5394)
inline HRESULT Excel::IRefreshEvents::BeforeRefresh ( VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_BeforeRefresh(Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5395)
inline HRESULT Excel::IRefreshEvents::AfterRefresh ( VARIANT_BOOL Success ) {
    HRESULT _hr = raw_AfterRefresh(Success);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IQueryTable wrapper method implementations
//

#pragma implementation_key(5396)
inline Excel::_ApplicationPtr Excel::_IQueryTable::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5397)
inline enum XlCreator Excel::_IQueryTable::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5398)
inline IDispatchPtr Excel::_IQueryTable::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5399)
inline _bstr_t Excel::_IQueryTable::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5400)
inline void Excel::_IQueryTable::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5401)
inline VARIANT_BOOL Excel::_IQueryTable::GetFieldNames ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FieldNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5402)
inline void Excel::_IQueryTable::PutFieldNames ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_FieldNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5403)
inline VARIANT_BOOL Excel::_IQueryTable::GetRowNumbers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RowNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5404)
inline void Excel::_IQueryTable::PutRowNumbers ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RowNumbers(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5405)
inline VARIANT_BOOL Excel::_IQueryTable::GetFillAdjacentFormulas ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FillAdjacentFormulas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5406)
inline void Excel::_IQueryTable::PutFillAdjacentFormulas ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_FillAdjacentFormulas(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5407)
inline VARIANT_BOOL Excel::_IQueryTable::GetHasAutoFormat ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasAutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5408)
inline void Excel::_IQueryTable::PutHasAutoFormat ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasAutoFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5409)
inline VARIANT_BOOL Excel::_IQueryTable::GetRefreshOnFileOpen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RefreshOnFileOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5410)
inline void Excel::_IQueryTable::PutRefreshOnFileOpen ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RefreshOnFileOpen(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5411)
inline VARIANT_BOOL Excel::_IQueryTable::GetRefreshing ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Refreshing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5412)
inline VARIANT_BOOL Excel::_IQueryTable::GetFetchedRowOverflow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FetchedRowOverflow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5413)
inline VARIANT_BOOL Excel::_IQueryTable::GetBackgroundQuery ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BackgroundQuery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5414)
inline void Excel::_IQueryTable::PutBackgroundQuery ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BackgroundQuery(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5415)
inline HRESULT Excel::_IQueryTable::CancelRefresh ( ) {
    HRESULT _hr = raw_CancelRefresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5416)
inline enum XlCellInsertionMode Excel::_IQueryTable::GetRefreshStyle ( ) {
    enum XlCellInsertionMode _result;
    HRESULT _hr = get_RefreshStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5417)
inline void Excel::_IQueryTable::PutRefreshStyle ( enum XlCellInsertionMode RHS ) {
    HRESULT _hr = put_RefreshStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5418)
inline VARIANT_BOOL Excel::_IQueryTable::GetEnableRefresh ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableRefresh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5419)
inline void Excel::_IQueryTable::PutEnableRefresh ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableRefresh(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5420)
inline VARIANT_BOOL Excel::_IQueryTable::GetSavePassword ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SavePassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5421)
inline void Excel::_IQueryTable::PutSavePassword ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SavePassword(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5422)
inline Excel::RangePtr Excel::_IQueryTable::GetDestination ( ) {
    struct Range * _result;
    HRESULT _hr = get_Destination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(5423)
inline _variant_t Excel::_IQueryTable::GetConnection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Connection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5424)
inline void Excel::_IQueryTable::PutConnection ( const _variant_t & RHS ) {
    HRESULT _hr = put_Connection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5425)
inline _variant_t Excel::_IQueryTable::GetSql ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Sql(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5426)
inline void Excel::_IQueryTable::PutSql ( const _variant_t & RHS ) {
    HRESULT _hr = put_Sql(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5427)
inline _bstr_t Excel::_IQueryTable::GetPostText ( ) {
    BSTR _result;
    HRESULT _hr = get_PostText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5428)
inline void Excel::_IQueryTable::PutPostText ( _bstr_t RHS ) {
    HRESULT _hr = put_PostText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5429)
inline Excel::RangePtr Excel::_IQueryTable::GetResultRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_ResultRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(5430)
inline HRESULT Excel::_IQueryTable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5431)
inline VARIANT_BOOL Excel::_IQueryTable::Refresh ( const _variant_t & BackgroundQuery ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Refresh(BackgroundQuery, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5432)
inline Excel::ParametersPtr Excel::_IQueryTable::GetParameters ( ) {
    struct Parameters * _result;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParametersPtr(_result, false);
}

#pragma implementation_key(5433)
inline IDispatchPtr Excel::_IQueryTable::GetRecordset ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Recordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5434)
inline void Excel::_IQueryTable::PutRefRecordset ( IDispatch * RHS ) {
    HRESULT _hr = putref_Recordset(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5435)
inline VARIANT_BOOL Excel::_IQueryTable::GetSaveData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SaveData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5436)
inline void Excel::_IQueryTable::PutSaveData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SaveData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5437)
inline VARIANT_BOOL Excel::_IQueryTable::GetTablesOnlyFromHTML ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TablesOnlyFromHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5438)
inline void Excel::_IQueryTable::PutTablesOnlyFromHTML ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TablesOnlyFromHTML(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5439)
inline VARIANT_BOOL Excel::_IQueryTable::GetEnableEditing ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5440)
inline void Excel::_IQueryTable::PutEnableEditing ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableEditing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5441)
inline long Excel::_IQueryTable::GetTextFilePlatform ( ) {
    long _result;
    HRESULT _hr = get_TextFilePlatform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5442)
inline void Excel::_IQueryTable::PutTextFilePlatform ( long RHS ) {
    HRESULT _hr = put_TextFilePlatform(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5443)
inline long Excel::_IQueryTable::GetTextFileStartRow ( ) {
    long _result;
    HRESULT _hr = get_TextFileStartRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5444)
inline void Excel::_IQueryTable::PutTextFileStartRow ( long RHS ) {
    HRESULT _hr = put_TextFileStartRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5445)
inline enum XlTextParsingType Excel::_IQueryTable::GetTextFileParseType ( ) {
    enum XlTextParsingType _result;
    HRESULT _hr = get_TextFileParseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5446)
inline void Excel::_IQueryTable::PutTextFileParseType ( enum XlTextParsingType RHS ) {
    HRESULT _hr = put_TextFileParseType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5447)
inline enum XlTextQualifier Excel::_IQueryTable::GetTextFileTextQualifier ( ) {
    enum XlTextQualifier _result;
    HRESULT _hr = get_TextFileTextQualifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5448)
inline void Excel::_IQueryTable::PutTextFileTextQualifier ( enum XlTextQualifier RHS ) {
    HRESULT _hr = put_TextFileTextQualifier(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5449)
inline VARIANT_BOOL Excel::_IQueryTable::GetTextFileConsecutiveDelimiter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TextFileConsecutiveDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5450)
inline void Excel::_IQueryTable::PutTextFileConsecutiveDelimiter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileConsecutiveDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5451)
inline VARIANT_BOOL Excel::_IQueryTable::GetTextFileTabDelimiter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TextFileTabDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5452)
inline void Excel::_IQueryTable::PutTextFileTabDelimiter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileTabDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5453)
inline VARIANT_BOOL Excel::_IQueryTable::GetTextFileSemicolonDelimiter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TextFileSemicolonDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5454)
inline void Excel::_IQueryTable::PutTextFileSemicolonDelimiter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileSemicolonDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5455)
inline VARIANT_BOOL Excel::_IQueryTable::GetTextFileCommaDelimiter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TextFileCommaDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5456)
inline void Excel::_IQueryTable::PutTextFileCommaDelimiter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileCommaDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5457)
inline VARIANT_BOOL Excel::_IQueryTable::GetTextFileSpaceDelimiter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TextFileSpaceDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5458)
inline void Excel::_IQueryTable::PutTextFileSpaceDelimiter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileSpaceDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5459)
inline _bstr_t Excel::_IQueryTable::GetTextFileOtherDelimiter ( ) {
    BSTR _result;
    HRESULT _hr = get_TextFileOtherDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5460)
inline void Excel::_IQueryTable::PutTextFileOtherDelimiter ( _bstr_t RHS ) {
    HRESULT _hr = put_TextFileOtherDelimiter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5461)
inline _variant_t Excel::_IQueryTable::GetTextFileColumnDataTypes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextFileColumnDataTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5462)
inline void Excel::_IQueryTable::PutTextFileColumnDataTypes ( const _variant_t & RHS ) {
    HRESULT _hr = put_TextFileColumnDataTypes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5463)
inline _variant_t Excel::_IQueryTable::GetTextFileFixedColumnWidths ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TextFileFixedColumnWidths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5464)
inline void Excel::_IQueryTable::PutTextFileFixedColumnWidths ( const _variant_t & RHS ) {
    HRESULT _hr = put_TextFileFixedColumnWidths(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5465)
inline VARIANT_BOOL Excel::_IQueryTable::GetPreserveColumnInfo ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PreserveColumnInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5466)
inline void Excel::_IQueryTable::PutPreserveColumnInfo ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PreserveColumnInfo(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5467)
inline VARIANT_BOOL Excel::_IQueryTable::GetPreserveFormatting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PreserveFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5468)
inline void Excel::_IQueryTable::PutPreserveFormatting ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PreserveFormatting(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5469)
inline VARIANT_BOOL Excel::_IQueryTable::GetAdjustColumnWidth ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AdjustColumnWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5470)
inline void Excel::_IQueryTable::PutAdjustColumnWidth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AdjustColumnWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5471)
inline _variant_t Excel::_IQueryTable::GetCommandText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CommandText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5472)
inline void Excel::_IQueryTable::PutCommandText ( const _variant_t & RHS ) {
    HRESULT _hr = put_CommandText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5473)
inline enum XlCmdType Excel::_IQueryTable::GetCommandType ( ) {
    enum XlCmdType _result;
    HRESULT _hr = get_CommandType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5474)
inline void Excel::_IQueryTable::PutCommandType ( enum XlCmdType RHS ) {
    HRESULT _hr = put_CommandType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5475)
inline VARIANT_BOOL Excel::_IQueryTable::GetTextFilePromptOnRefresh ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TextFilePromptOnRefresh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5476)
inline void Excel::_IQueryTable::PutTextFilePromptOnRefresh ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFilePromptOnRefresh(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5477)
inline enum XlQueryType Excel::_IQueryTable::GetQueryType ( ) {
    enum XlQueryType _result;
    HRESULT _hr = get_QueryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5478)
inline VARIANT_BOOL Excel::_IQueryTable::GetMaintainConnection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MaintainConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5479)
inline void Excel::_IQueryTable::PutMaintainConnection ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MaintainConnection(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5480)
inline _bstr_t Excel::_IQueryTable::GetTextFileDecimalSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_TextFileDecimalSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5481)
inline void Excel::_IQueryTable::PutTextFileDecimalSeparator ( _bstr_t RHS ) {
    HRESULT _hr = put_TextFileDecimalSeparator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5482)
inline _bstr_t Excel::_IQueryTable::GetTextFileThousandsSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_TextFileThousandsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5483)
inline void Excel::_IQueryTable::PutTextFileThousandsSeparator ( _bstr_t RHS ) {
    HRESULT _hr = put_TextFileThousandsSeparator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5484)
inline long Excel::_IQueryTable::GetRefreshPeriod ( ) {
    long _result;
    HRESULT _hr = get_RefreshPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5485)
inline void Excel::_IQueryTable::PutRefreshPeriod ( long RHS ) {
    HRESULT _hr = put_RefreshPeriod(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5486)
inline HRESULT Excel::_IQueryTable::ResetTimer ( ) {
    HRESULT _hr = raw_ResetTimer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5487)
inline enum XlWebSelectionType Excel::_IQueryTable::GetWebSelectionType ( ) {
    enum XlWebSelectionType _result;
    HRESULT _hr = get_WebSelectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5488)
inline void Excel::_IQueryTable::PutWebSelectionType ( enum XlWebSelectionType RHS ) {
    HRESULT _hr = put_WebSelectionType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5489)
inline enum XlWebFormatting Excel::_IQueryTable::GetWebFormatting ( ) {
    enum XlWebFormatting _result;
    HRESULT _hr = get_WebFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5490)
inline void Excel::_IQueryTable::PutWebFormatting ( enum XlWebFormatting RHS ) {
    HRESULT _hr = put_WebFormatting(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5491)
inline _bstr_t Excel::_IQueryTable::GetWebTables ( ) {
    BSTR _result;
    HRESULT _hr = get_WebTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5492)
inline void Excel::_IQueryTable::PutWebTables ( _bstr_t RHS ) {
    HRESULT _hr = put_WebTables(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5493)
inline VARIANT_BOOL Excel::_IQueryTable::GetWebPreFormattedTextToColumns ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WebPreFormattedTextToColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5494)
inline void Excel::_IQueryTable::PutWebPreFormattedTextToColumns ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WebPreFormattedTextToColumns(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5495)
inline VARIANT_BOOL Excel::_IQueryTable::GetWebSingleBlockTextImport ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WebSingleBlockTextImport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5496)
inline void Excel::_IQueryTable::PutWebSingleBlockTextImport ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WebSingleBlockTextImport(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5497)
inline VARIANT_BOOL Excel::_IQueryTable::GetWebDisableDateRecognition ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WebDisableDateRecognition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5498)
inline void Excel::_IQueryTable::PutWebDisableDateRecognition ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WebDisableDateRecognition(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5499)
inline VARIANT_BOOL Excel::_IQueryTable::GetWebConsecutiveDelimitersAsOne ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WebConsecutiveDelimitersAsOne(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5500)
inline void Excel::_IQueryTable::PutWebConsecutiveDelimitersAsOne ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WebConsecutiveDelimitersAsOne(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5501)
inline VARIANT_BOOL Excel::_IQueryTable::GetWebDisableRedirections ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WebDisableRedirections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5502)
inline void Excel::_IQueryTable::PutWebDisableRedirections ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_WebDisableRedirections(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5503)
inline _variant_t Excel::_IQueryTable::GetEditWebPage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EditWebPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5504)
inline void Excel::_IQueryTable::PutEditWebPage ( const _variant_t & RHS ) {
    HRESULT _hr = put_EditWebPage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5505)
inline _bstr_t Excel::_IQueryTable::GetSourceConnectionFile ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceConnectionFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5506)
inline void Excel::_IQueryTable::PutSourceConnectionFile ( _bstr_t RHS ) {
    HRESULT _hr = put_SourceConnectionFile(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5507)
inline _bstr_t Excel::_IQueryTable::GetSourceDataFile ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceDataFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5508)
inline void Excel::_IQueryTable::PutSourceDataFile ( _bstr_t RHS ) {
    HRESULT _hr = put_SourceDataFile(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5509)
inline enum XlRobustConnect Excel::_IQueryTable::GetRobustConnect ( ) {
    enum XlRobustConnect _result;
    HRESULT _hr = get_RobustConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5510)
inline void Excel::_IQueryTable::PutRobustConnect ( enum XlRobustConnect RHS ) {
    HRESULT _hr = put_RobustConnect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5511)
inline VARIANT_BOOL Excel::_IQueryTable::GetTextFileTrailingMinusNumbers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TextFileTrailingMinusNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5512)
inline void Excel::_IQueryTable::PutTextFileTrailingMinusNumbers ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextFileTrailingMinusNumbers(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5513)
inline HRESULT Excel::_IQueryTable::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords ) {
    HRESULT _hr = raw_SaveAsODC(ODCFileName, Description, Keywords);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IQueryTables wrapper method implementations
//

#pragma implementation_key(5514)
inline Excel::_ApplicationPtr Excel::IQueryTables::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5515)
inline enum XlCreator Excel::IQueryTables::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5516)
inline IDispatchPtr Excel::IQueryTables::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5517)
inline long Excel::IQueryTables::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5518)
inline Excel::_QueryTablePtr Excel::IQueryTables::Add ( const _variant_t & Connection, struct Range * Destination, const _variant_t & Sql ) {
    struct _QueryTable * _result;
    HRESULT _hr = raw_Add(Connection, Destination, Sql, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _QueryTablePtr(_result, false);
}

#pragma implementation_key(5519)
inline Excel::_QueryTablePtr Excel::IQueryTables::Item ( const _variant_t & Index ) {
    struct _QueryTable * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _QueryTablePtr(_result, false);
}

#pragma implementation_key(5520)
inline Excel::_QueryTablePtr Excel::IQueryTables::Get_Default ( const _variant_t & Index ) {
    struct _QueryTable * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _QueryTablePtr(_result, false);
}

#pragma implementation_key(5521)
inline IUnknownPtr Excel::IQueryTables::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IParameter wrapper method implementations
//

#pragma implementation_key(5522)
inline Excel::_ApplicationPtr Excel::IParameter::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5523)
inline enum XlCreator Excel::IParameter::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5524)
inline IDispatchPtr Excel::IParameter::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5525)
inline enum XlParameterDataType Excel::IParameter::GetDataType ( ) {
    enum XlParameterDataType _result;
    HRESULT _hr = get_DataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5526)
inline void Excel::IParameter::PutDataType ( enum XlParameterDataType RHS ) {
    HRESULT _hr = put_DataType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5527)
inline enum XlParameterType Excel::IParameter::GetType ( ) {
    enum XlParameterType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5528)
inline _bstr_t Excel::IParameter::GetPromptString ( ) {
    BSTR _result;
    HRESULT _hr = get_PromptString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5529)
inline _variant_t Excel::IParameter::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5530)
inline Excel::RangePtr Excel::IParameter::GetSourceRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_SourceRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(5531)
inline _bstr_t Excel::IParameter::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5532)
inline void Excel::IParameter::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5533)
inline HRESULT Excel::IParameter::SetParam ( enum XlParameterType Type, const _variant_t & Value ) {
    HRESULT _hr = raw_SetParam(Type, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5534)
inline VARIANT_BOOL Excel::IParameter::GetRefreshOnChange ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RefreshOnChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5535)
inline void Excel::IParameter::PutRefreshOnChange ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RefreshOnChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IParameters wrapper method implementations
//

#pragma implementation_key(5536)
inline Excel::_ApplicationPtr Excel::IParameters::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5537)
inline enum XlCreator Excel::IParameters::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5538)
inline IDispatchPtr Excel::IParameters::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5539)
inline Excel::ParameterPtr Excel::IParameters::Add ( _bstr_t Name, const _variant_t & iDataType ) {
    struct Parameter * _result;
    HRESULT _hr = raw_Add(Name, iDataType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParameterPtr(_result, false);
}

#pragma implementation_key(5540)
inline long Excel::IParameters::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5541)
inline Excel::ParameterPtr Excel::IParameters::Item ( const _variant_t & Index ) {
    struct Parameter * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParameterPtr(_result, false);
}

#pragma implementation_key(5542)
inline Excel::ParameterPtr Excel::IParameters::Get_Default ( const _variant_t & Index ) {
    struct Parameter * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParameterPtr(_result, false);
}

#pragma implementation_key(5543)
inline HRESULT Excel::IParameters::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5544)
inline IUnknownPtr Excel::IParameters::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IODBCError wrapper method implementations
//

#pragma implementation_key(5545)
inline Excel::_ApplicationPtr Excel::IODBCError::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5546)
inline enum XlCreator Excel::IODBCError::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5547)
inline IDispatchPtr Excel::IODBCError::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5548)
inline _bstr_t Excel::IODBCError::GetSqlState ( ) {
    BSTR _result;
    HRESULT _hr = get_SqlState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5549)
inline _bstr_t Excel::IODBCError::GetErrorString ( ) {
    BSTR _result;
    HRESULT _hr = get_ErrorString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IODBCErrors wrapper method implementations
//

#pragma implementation_key(5550)
inline Excel::_ApplicationPtr Excel::IODBCErrors::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5551)
inline enum XlCreator Excel::IODBCErrors::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5552)
inline IDispatchPtr Excel::IODBCErrors::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5553)
inline long Excel::IODBCErrors::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5554)
inline Excel::ODBCErrorPtr Excel::IODBCErrors::Item ( long Index ) {
    struct ODBCError * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ODBCErrorPtr(_result, false);
}

#pragma implementation_key(5555)
inline Excel::ODBCErrorPtr Excel::IODBCErrors::Get_Default ( long Index ) {
    struct ODBCError * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ODBCErrorPtr(_result, false);
}

#pragma implementation_key(5556)
inline IUnknownPtr Excel::IODBCErrors::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IValidation wrapper method implementations
//

#pragma implementation_key(5557)
inline Excel::_ApplicationPtr Excel::IValidation::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5558)
inline enum XlCreator Excel::IValidation::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5559)
inline IDispatchPtr Excel::IValidation::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5560)
inline HRESULT Excel::IValidation::Add ( enum XlDVType Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    HRESULT _hr = raw_Add(Type, AlertStyle, Operator, Formula1, Formula2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5561)
inline long Excel::IValidation::GetAlertStyle ( ) {
    long _result;
    HRESULT _hr = get_AlertStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5562)
inline VARIANT_BOOL Excel::IValidation::GetIgnoreBlank ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IgnoreBlank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5563)
inline void Excel::IValidation::PutIgnoreBlank ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IgnoreBlank(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5564)
inline long Excel::IValidation::GetIMEMode ( ) {
    long _result;
    HRESULT _hr = get_IMEMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5565)
inline void Excel::IValidation::PutIMEMode ( long RHS ) {
    HRESULT _hr = put_IMEMode(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5566)
inline VARIANT_BOOL Excel::IValidation::GetInCellDropdown ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_InCellDropdown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5567)
inline void Excel::IValidation::PutInCellDropdown ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InCellDropdown(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5568)
inline HRESULT Excel::IValidation::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5569)
inline _bstr_t Excel::IValidation::GetErrorMessage ( ) {
    BSTR _result;
    HRESULT _hr = get_ErrorMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5570)
inline void Excel::IValidation::PutErrorMessage ( _bstr_t RHS ) {
    HRESULT _hr = put_ErrorMessage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5571)
inline _bstr_t Excel::IValidation::GetErrorTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_ErrorTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5572)
inline void Excel::IValidation::PutErrorTitle ( _bstr_t RHS ) {
    HRESULT _hr = put_ErrorTitle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5573)
inline _bstr_t Excel::IValidation::GetInputMessage ( ) {
    BSTR _result;
    HRESULT _hr = get_InputMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5574)
inline void Excel::IValidation::PutInputMessage ( _bstr_t RHS ) {
    HRESULT _hr = put_InputMessage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5575)
inline _bstr_t Excel::IValidation::GetInputTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_InputTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5576)
inline void Excel::IValidation::PutInputTitle ( _bstr_t RHS ) {
    HRESULT _hr = put_InputTitle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5577)
inline _bstr_t Excel::IValidation::GetFormula1 ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5578)
inline _bstr_t Excel::IValidation::GetFormula2 ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5579)
inline HRESULT Excel::IValidation::Modify ( const _variant_t & Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    HRESULT _hr = raw_Modify(Type, AlertStyle, Operator, Formula1, Formula2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5580)
inline long Excel::IValidation::GetOperator ( ) {
    long _result;
    HRESULT _hr = get_Operator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5581)
inline VARIANT_BOOL Excel::IValidation::GetShowError ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5582)
inline void Excel::IValidation::PutShowError ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowError(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5583)
inline VARIANT_BOOL Excel::IValidation::GetShowInput ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowInput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5584)
inline void Excel::IValidation::PutShowInput ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowInput(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5585)
inline long Excel::IValidation::GetType ( ) {
    long _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5586)
inline VARIANT_BOOL Excel::IValidation::GetValue ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IHyperlinks wrapper method implementations
//

#pragma implementation_key(5587)
inline Excel::_ApplicationPtr Excel::IHyperlinks::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5588)
inline enum XlCreator Excel::IHyperlinks::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5589)
inline IDispatchPtr Excel::IHyperlinks::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5590)
inline IDispatchPtr Excel::IHyperlinks::Add ( IDispatch * Anchor, _bstr_t Address, const _variant_t & SubAddress, const _variant_t & ScreenTip, const _variant_t & TextToDisplay ) {
    IDispatch * _result;
    HRESULT _hr = raw_Add(Anchor, Address, SubAddress, ScreenTip, TextToDisplay, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5591)
inline long Excel::IHyperlinks::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5592)
inline Excel::HyperlinkPtr Excel::IHyperlinks::GetItem ( const _variant_t & Index ) {
    struct Hyperlink * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(5593)
inline Excel::HyperlinkPtr Excel::IHyperlinks::Get_Default ( const _variant_t & Index ) {
    struct Hyperlink * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(5594)
inline IUnknownPtr Excel::IHyperlinks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5595)
inline HRESULT Excel::IHyperlinks::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IHyperlink wrapper method implementations
//

#pragma implementation_key(5596)
inline Excel::_ApplicationPtr Excel::IHyperlink::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5597)
inline enum XlCreator Excel::IHyperlink::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5598)
inline IDispatchPtr Excel::IHyperlink::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5599)
inline _bstr_t Excel::IHyperlink::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5600)
inline Excel::RangePtr Excel::IHyperlink::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(5601)
inline Excel::ShapePtr Excel::IHyperlink::GetShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5602)
inline _bstr_t Excel::IHyperlink::GetSubAddress ( ) {
    BSTR _result;
    HRESULT _hr = get_SubAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5603)
inline void Excel::IHyperlink::PutSubAddress ( _bstr_t RHS ) {
    HRESULT _hr = put_SubAddress(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5604)
inline _bstr_t Excel::IHyperlink::GetAddress ( ) {
    BSTR _result;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5605)
inline void Excel::IHyperlink::PutAddress ( _bstr_t RHS ) {
    HRESULT _hr = put_Address(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5606)
inline long Excel::IHyperlink::GetType ( ) {
    long _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5607)
inline HRESULT Excel::IHyperlink::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5608)
inline HRESULT Excel::IHyperlink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5609)
inline HRESULT Excel::IHyperlink::Follow ( const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo ) {
    HRESULT _hr = raw_Follow(NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5610)
inline _bstr_t Excel::IHyperlink::GetEmailSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_EmailSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5611)
inline void Excel::IHyperlink::PutEmailSubject ( _bstr_t RHS ) {
    HRESULT _hr = put_EmailSubject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5612)
inline _bstr_t Excel::IHyperlink::GetScreenTip ( ) {
    BSTR _result;
    HRESULT _hr = get_ScreenTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5613)
inline void Excel::IHyperlink::PutScreenTip ( _bstr_t RHS ) {
    HRESULT _hr = put_ScreenTip(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5614)
inline _bstr_t Excel::IHyperlink::GetTextToDisplay ( ) {
    BSTR _result;
    HRESULT _hr = get_TextToDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5615)
inline void Excel::IHyperlink::PutTextToDisplay ( _bstr_t RHS ) {
    HRESULT _hr = put_TextToDisplay(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5616)
inline HRESULT Excel::IHyperlink::CreateNewDocument ( _bstr_t Filename, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite ) {
    HRESULT _hr = raw_CreateNewDocument(Filename, EditNow, Overwrite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAutoFilter wrapper method implementations
//

#pragma implementation_key(5617)
inline Excel::_ApplicationPtr Excel::IAutoFilter::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5618)
inline enum XlCreator Excel::IAutoFilter::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5619)
inline IDispatchPtr Excel::IAutoFilter::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5620)
inline Excel::RangePtr Excel::IAutoFilter::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(5621)
inline Excel::FiltersPtr Excel::IAutoFilter::GetFilters ( ) {
    struct Filters * _result;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FiltersPtr(_result, false);
}

//
// interface IFilters wrapper method implementations
//

#pragma implementation_key(5622)
inline Excel::_ApplicationPtr Excel::IFilters::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5623)
inline enum XlCreator Excel::IFilters::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5624)
inline IDispatchPtr Excel::IFilters::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5625)
inline long Excel::IFilters::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5626)
inline Excel::FilterPtr Excel::IFilters::Get_Default ( long Index ) {
    struct Filter * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FilterPtr(_result, false);
}

#pragma implementation_key(5627)
inline Excel::FilterPtr Excel::IFilters::GetItem ( long Index ) {
    struct Filter * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FilterPtr(_result, false);
}

#pragma implementation_key(5628)
inline IUnknownPtr Excel::IFilters::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IFilter wrapper method implementations
//

#pragma implementation_key(5629)
inline Excel::_ApplicationPtr Excel::IFilter::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5630)
inline enum XlCreator Excel::IFilter::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5631)
inline IDispatchPtr Excel::IFilter::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5632)
inline VARIANT_BOOL Excel::IFilter::GetOn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_On(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5633)
inline _variant_t Excel::IFilter::GetCriteria1 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Criteria1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5634)
inline enum XlAutoFilterOperator Excel::IFilter::GetOperator ( ) {
    enum XlAutoFilterOperator _result;
    HRESULT _hr = get_Operator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5635)
inline _variant_t Excel::IFilter::GetCriteria2 ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Criteria2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IAutoCorrect wrapper method implementations
//

#pragma implementation_key(5636)
inline Excel::_ApplicationPtr Excel::IAutoCorrect::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5637)
inline enum XlCreator Excel::IAutoCorrect::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5638)
inline IDispatchPtr Excel::IAutoCorrect::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5639)
inline _variant_t Excel::IAutoCorrect::AddReplacement ( _bstr_t What, _bstr_t Replacement ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_AddReplacement(What, Replacement, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5640)
inline VARIANT_BOOL Excel::IAutoCorrect::GetCapitalizeNamesOfDays ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CapitalizeNamesOfDays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5641)
inline void Excel::IAutoCorrect::PutCapitalizeNamesOfDays ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CapitalizeNamesOfDays(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5642)
inline _variant_t Excel::IAutoCorrect::DeleteReplacement ( _bstr_t What ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DeleteReplacement(What, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5643)
inline _variant_t Excel::IAutoCorrect::GetReplacementList ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ReplacementList(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5644)
inline void Excel::IAutoCorrect::PutReplacementList ( const _variant_t & Index, const _variant_t & RHS ) {
    HRESULT _hr = put_ReplacementList(Index, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5645)
inline VARIANT_BOOL Excel::IAutoCorrect::GetJOEReplaceText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_JOEReplaceText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5646)
inline void Excel::IAutoCorrect::PutJOEReplaceText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_JOEReplaceText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5647)
inline VARIANT_BOOL Excel::IAutoCorrect::GetTwoInitialCapitals ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TwoInitialCapitals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5648)
inline void Excel::IAutoCorrect::PutTwoInitialCapitals ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TwoInitialCapitals(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5649)
inline VARIANT_BOOL Excel::IAutoCorrect::GetCorrectSentenceCap ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CorrectSentenceCap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5650)
inline void Excel::IAutoCorrect::PutCorrectSentenceCap ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CorrectSentenceCap(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5651)
inline VARIANT_BOOL Excel::IAutoCorrect::GetCorrectCapsLock ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CorrectCapsLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5652)
inline void Excel::IAutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CorrectCapsLock(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5653)
inline VARIANT_BOOL Excel::IAutoCorrect::GetDisplayAutoCorrectOptions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayAutoCorrectOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5654)
inline void Excel::IAutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayAutoCorrectOptions(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBorder wrapper method implementations
//

#pragma implementation_key(5655)
inline Excel::_ApplicationPtr Excel::IBorder::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5656)
inline enum XlCreator Excel::IBorder::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5657)
inline IDispatchPtr Excel::IBorder::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5658)
inline _variant_t Excel::IBorder::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5659)
inline void Excel::IBorder::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5660)
inline _variant_t Excel::IBorder::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5661)
inline void Excel::IBorder::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5662)
inline _variant_t Excel::IBorder::GetLineStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5663)
inline void Excel::IBorder::PutLineStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_LineStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5664)
inline _variant_t Excel::IBorder::GetWeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5665)
inline void Excel::IBorder::PutWeight ( const _variant_t & RHS ) {
    HRESULT _hr = put_Weight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IInterior wrapper method implementations
//

#pragma implementation_key(5666)
inline Excel::_ApplicationPtr Excel::IInterior::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5667)
inline enum XlCreator Excel::IInterior::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5668)
inline IDispatchPtr Excel::IInterior::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5669)
inline _variant_t Excel::IInterior::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5670)
inline void Excel::IInterior::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5671)
inline _variant_t Excel::IInterior::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5672)
inline void Excel::IInterior::PutColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5673)
inline _variant_t Excel::IInterior::GetInvertIfNegative ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5674)
inline void Excel::IInterior::PutInvertIfNegative ( const _variant_t & RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5675)
inline _variant_t Excel::IInterior::GetPattern ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5676)
inline void Excel::IInterior::PutPattern ( const _variant_t & RHS ) {
    HRESULT _hr = put_Pattern(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5677)
inline _variant_t Excel::IInterior::GetPatternColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5678)
inline void Excel::IInterior::PutPatternColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_PatternColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5679)
inline _variant_t Excel::IInterior::GetPatternColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5680)
inline void Excel::IInterior::PutPatternColorIndex ( const _variant_t & RHS ) {
    HRESULT _hr = put_PatternColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartFillFormat wrapper method implementations
//

#pragma implementation_key(5681)
inline Excel::_ApplicationPtr Excel::IChartFillFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5682)
inline enum XlCreator Excel::IChartFillFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5683)
inline IDispatchPtr Excel::IChartFillFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5684)
inline HRESULT Excel::IChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5685)
inline HRESULT Excel::IChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5686)
inline HRESULT Excel::IChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5687)
inline HRESULT Excel::IChartFillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5688)
inline HRESULT Excel::IChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5689)
inline HRESULT Excel::IChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement ) {
    HRESULT _hr = raw_UserPicture(PictureFile, PictureFormat, PictureStackUnit, PicturePlacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5690)
inline HRESULT Excel::IChartFillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5691)
inline HRESULT Excel::IChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5692)
inline Excel::ChartColorFormatPtr Excel::IChartFillFormat::GetBackColor ( ) {
    struct ChartColorFormat * _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

#pragma implementation_key(5693)
inline Excel::ChartColorFormatPtr Excel::IChartFillFormat::GetForeColor ( ) {
    struct ChartColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

#pragma implementation_key(5694)
inline enum Office::MsoGradientColorType Excel::IChartFillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5695)
inline float Excel::IChartFillFormat::GetGradientDegree ( ) {
    float _result;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5696)
inline enum Office::MsoGradientStyle Excel::IChartFillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5697)
inline long Excel::IChartFillFormat::GetGradientVariant ( ) {
    long _result;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5698)
inline enum Office::MsoPatternType Excel::IChartFillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5699)
inline enum Office::MsoPresetGradientType Excel::IChartFillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5700)
inline enum Office::MsoPresetTexture Excel::IChartFillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5701)
inline _bstr_t Excel::IChartFillFormat::GetTextureName ( ) {
    BSTR _result;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5702)
inline enum Office::MsoTextureType Excel::IChartFillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5703)
inline enum Office::MsoFillType Excel::IChartFillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5704)
inline enum Office::MsoTriState Excel::IChartFillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5705)
inline void Excel::IChartFillFormat::PutVisible ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartColorFormat wrapper method implementations
//

#pragma implementation_key(5706)
inline Excel::_ApplicationPtr Excel::IChartColorFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5707)
inline enum XlCreator Excel::IChartColorFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5708)
inline IDispatchPtr Excel::IChartColorFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5709)
inline long Excel::IChartColorFormat::GetSchemeColor ( ) {
    long _result;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5710)
inline void Excel::IChartColorFormat::PutSchemeColor ( long RHS ) {
    HRESULT _hr = put_SchemeColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5711)
inline long Excel::IChartColorFormat::Getignorethis ( ) {
    long _result;
    HRESULT _hr = get_ignorethis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5712)
inline long Excel::IChartColorFormat::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5713)
inline long Excel::IChartColorFormat::GetType ( ) {
    long _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAxis wrapper method implementations
//

#pragma implementation_key(5714)
inline Excel::_ApplicationPtr Excel::IAxis::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5715)
inline enum XlCreator Excel::IAxis::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5716)
inline IDispatchPtr Excel::IAxis::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5717)
inline VARIANT_BOOL Excel::IAxis::GetAxisBetweenCategories ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AxisBetweenCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5718)
inline void Excel::IAxis::PutAxisBetweenCategories ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AxisBetweenCategories(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5719)
inline enum XlAxisGroup Excel::IAxis::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5720)
inline Excel::AxisTitlePtr Excel::IAxis::GetAxisTitle ( ) {
    struct AxisTitle * _result;
    HRESULT _hr = get_AxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AxisTitlePtr(_result, false);
}

#pragma implementation_key(5721)
inline Excel::BorderPtr Excel::IAxis::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(5722)
inline _variant_t Excel::IAxis::GetCategoryNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CategoryNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5723)
inline void Excel::IAxis::PutCategoryNames ( const _variant_t & RHS ) {
    HRESULT _hr = put_CategoryNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5724)
inline enum XlAxisCrosses Excel::IAxis::GetCrosses ( ) {
    enum XlAxisCrosses _result;
    HRESULT _hr = get_Crosses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5725)
inline void Excel::IAxis::PutCrosses ( enum XlAxisCrosses RHS ) {
    HRESULT _hr = put_Crosses(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5726)
inline double Excel::IAxis::GetCrossesAt ( ) {
    double _result;
    HRESULT _hr = get_CrossesAt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5727)
inline void Excel::IAxis::PutCrossesAt ( double RHS ) {
    HRESULT _hr = put_CrossesAt(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5728)
inline _variant_t Excel::IAxis::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5729)
inline VARIANT_BOOL Excel::IAxis::GetHasMajorGridlines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasMajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5730)
inline void Excel::IAxis::PutHasMajorGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasMajorGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5731)
inline VARIANT_BOOL Excel::IAxis::GetHasMinorGridlines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasMinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5732)
inline void Excel::IAxis::PutHasMinorGridlines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasMinorGridlines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5733)
inline VARIANT_BOOL Excel::IAxis::GetHasTitle ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5734)
inline void Excel::IAxis::PutHasTitle ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasTitle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5735)
inline Excel::GridlinesPtr Excel::IAxis::GetMajorGridlines ( ) {
    struct Gridlines * _result;
    HRESULT _hr = get_MajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridlinesPtr(_result, false);
}

#pragma implementation_key(5736)
inline enum XlTickMark Excel::IAxis::GetMajorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MajorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5737)
inline void Excel::IAxis::PutMajorTickMark ( enum XlTickMark RHS ) {
    HRESULT _hr = put_MajorTickMark(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5738)
inline double Excel::IAxis::GetMajorUnit ( ) {
    double _result;
    HRESULT _hr = get_MajorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5739)
inline void Excel::IAxis::PutMajorUnit ( double RHS ) {
    HRESULT _hr = put_MajorUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5740)
inline VARIANT_BOOL Excel::IAxis::GetMajorUnitIsAuto ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MajorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5741)
inline void Excel::IAxis::PutMajorUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MajorUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5742)
inline double Excel::IAxis::GetMaximumScale ( ) {
    double _result;
    HRESULT _hr = get_MaximumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5743)
inline void Excel::IAxis::PutMaximumScale ( double RHS ) {
    HRESULT _hr = put_MaximumScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5744)
inline VARIANT_BOOL Excel::IAxis::GetMaximumScaleIsAuto ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MaximumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5745)
inline void Excel::IAxis::PutMaximumScaleIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MaximumScaleIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5746)
inline double Excel::IAxis::GetMinimumScale ( ) {
    double _result;
    HRESULT _hr = get_MinimumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5747)
inline void Excel::IAxis::PutMinimumScale ( double RHS ) {
    HRESULT _hr = put_MinimumScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5748)
inline VARIANT_BOOL Excel::IAxis::GetMinimumScaleIsAuto ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MinimumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5749)
inline void Excel::IAxis::PutMinimumScaleIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MinimumScaleIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5750)
inline Excel::GridlinesPtr Excel::IAxis::GetMinorGridlines ( ) {
    struct Gridlines * _result;
    HRESULT _hr = get_MinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridlinesPtr(_result, false);
}

#pragma implementation_key(5751)
inline enum XlTickMark Excel::IAxis::GetMinorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MinorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5752)
inline void Excel::IAxis::PutMinorTickMark ( enum XlTickMark RHS ) {
    HRESULT _hr = put_MinorTickMark(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5753)
inline double Excel::IAxis::GetMinorUnit ( ) {
    double _result;
    HRESULT _hr = get_MinorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5754)
inline void Excel::IAxis::PutMinorUnit ( double RHS ) {
    HRESULT _hr = put_MinorUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5755)
inline VARIANT_BOOL Excel::IAxis::GetMinorUnitIsAuto ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MinorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5756)
inline void Excel::IAxis::PutMinorUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_MinorUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5757)
inline VARIANT_BOOL Excel::IAxis::GetReversePlotOrder ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReversePlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5758)
inline void Excel::IAxis::PutReversePlotOrder ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ReversePlotOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5759)
inline enum XlScaleType Excel::IAxis::GetScaleType ( ) {
    enum XlScaleType _result;
    HRESULT _hr = get_ScaleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5760)
inline void Excel::IAxis::PutScaleType ( enum XlScaleType RHS ) {
    HRESULT _hr = put_ScaleType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5761)
inline _variant_t Excel::IAxis::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5762)
inline enum XlTickLabelPosition Excel::IAxis::GetTickLabelPosition ( ) {
    enum XlTickLabelPosition _result;
    HRESULT _hr = get_TickLabelPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5763)
inline void Excel::IAxis::PutTickLabelPosition ( enum XlTickLabelPosition RHS ) {
    HRESULT _hr = put_TickLabelPosition(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5764)
inline Excel::TickLabelsPtr Excel::IAxis::GetTickLabels ( ) {
    struct TickLabels * _result;
    HRESULT _hr = get_TickLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TickLabelsPtr(_result, false);
}

#pragma implementation_key(5765)
inline long Excel::IAxis::GetTickLabelSpacing ( ) {
    long _result;
    HRESULT _hr = get_TickLabelSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5766)
inline void Excel::IAxis::PutTickLabelSpacing ( long RHS ) {
    HRESULT _hr = put_TickLabelSpacing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5767)
inline long Excel::IAxis::GetTickMarkSpacing ( ) {
    long _result;
    HRESULT _hr = get_TickMarkSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5768)
inline void Excel::IAxis::PutTickMarkSpacing ( long RHS ) {
    HRESULT _hr = put_TickMarkSpacing(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5769)
inline enum XlAxisType Excel::IAxis::GetType ( ) {
    enum XlAxisType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5770)
inline void Excel::IAxis::PutType ( enum XlAxisType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5771)
inline enum XlTimeUnit Excel::IAxis::GetBaseUnit ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_BaseUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5772)
inline void Excel::IAxis::PutBaseUnit ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_BaseUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5773)
inline VARIANT_BOOL Excel::IAxis::GetBaseUnitIsAuto ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BaseUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5774)
inline void Excel::IAxis::PutBaseUnitIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BaseUnitIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5775)
inline enum XlTimeUnit Excel::IAxis::GetMajorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MajorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5776)
inline void Excel::IAxis::PutMajorUnitScale ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_MajorUnitScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5777)
inline enum XlTimeUnit Excel::IAxis::GetMinorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MinorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5778)
inline void Excel::IAxis::PutMinorUnitScale ( enum XlTimeUnit RHS ) {
    HRESULT _hr = put_MinorUnitScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5779)
inline enum XlCategoryType Excel::IAxis::GetCategoryType ( ) {
    enum XlCategoryType _result;
    HRESULT _hr = get_CategoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5780)
inline void Excel::IAxis::PutCategoryType ( enum XlCategoryType RHS ) {
    HRESULT _hr = put_CategoryType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5781)
inline double Excel::IAxis::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5782)
inline double Excel::IAxis::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5783)
inline double Excel::IAxis::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5784)
inline double Excel::IAxis::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5785)
inline enum XlDisplayUnit Excel::IAxis::GetDisplayUnit ( ) {
    enum XlDisplayUnit _result;
    HRESULT _hr = get_DisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5786)
inline void Excel::IAxis::PutDisplayUnit ( enum XlDisplayUnit RHS ) {
    HRESULT _hr = put_DisplayUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5787)
inline double Excel::IAxis::GetDisplayUnitCustom ( ) {
    double _result;
    HRESULT _hr = get_DisplayUnitCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5788)
inline void Excel::IAxis::PutDisplayUnitCustom ( double RHS ) {
    HRESULT _hr = put_DisplayUnitCustom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5789)
inline VARIANT_BOOL Excel::IAxis::GetHasDisplayUnitLabel ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5790)
inline void Excel::IAxis::PutHasDisplayUnitLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDisplayUnitLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5791)
inline Excel::DisplayUnitLabelPtr Excel::IAxis::GetDisplayUnitLabel ( ) {
    struct DisplayUnitLabel * _result;
    HRESULT _hr = get_DisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DisplayUnitLabelPtr(_result, false);
}

//
// interface IChartTitle wrapper method implementations
//

#pragma implementation_key(5792)
inline Excel::_ApplicationPtr Excel::IChartTitle::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5793)
inline enum XlCreator Excel::IChartTitle::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5794)
inline IDispatchPtr Excel::IChartTitle::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5795)
inline _bstr_t Excel::IChartTitle::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5796)
inline _variant_t Excel::IChartTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5797)
inline Excel::BorderPtr Excel::IChartTitle::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(5798)
inline _variant_t Excel::IChartTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5799)
inline Excel::InteriorPtr Excel::IChartTitle::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(5800)
inline Excel::ChartFillFormatPtr Excel::IChartTitle::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(5801)
inline _bstr_t Excel::IChartTitle::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5802)
inline void Excel::IChartTitle::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5803)
inline Excel::CharactersPtr Excel::IChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(5804)
inline Excel::FontPtr Excel::IChartTitle::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(5805)
inline _variant_t Excel::IChartTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5806)
inline void Excel::IChartTitle::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5807)
inline double Excel::IChartTitle::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5808)
inline void Excel::IChartTitle::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5809)
inline _variant_t Excel::IChartTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5810)
inline void Excel::IChartTitle::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5811)
inline VARIANT_BOOL Excel::IChartTitle::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5812)
inline void Excel::IChartTitle::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5813)
inline _bstr_t Excel::IChartTitle::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5814)
inline void Excel::IChartTitle::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5815)
inline double Excel::IChartTitle::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5816)
inline void Excel::IChartTitle::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5817)
inline _variant_t Excel::IChartTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5818)
inline void Excel::IChartTitle::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5819)
inline long Excel::IChartTitle::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5820)
inline void Excel::IChartTitle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5821)
inline _variant_t Excel::IChartTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5822)
inline void Excel::IChartTitle::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAxisTitle wrapper method implementations
//

#pragma implementation_key(5823)
inline Excel::_ApplicationPtr Excel::IAxisTitle::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5824)
inline enum XlCreator Excel::IAxisTitle::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5825)
inline IDispatchPtr Excel::IAxisTitle::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5826)
inline _bstr_t Excel::IAxisTitle::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5827)
inline _variant_t Excel::IAxisTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5828)
inline Excel::BorderPtr Excel::IAxisTitle::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(5829)
inline _variant_t Excel::IAxisTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5830)
inline Excel::InteriorPtr Excel::IAxisTitle::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(5831)
inline Excel::ChartFillFormatPtr Excel::IAxisTitle::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(5832)
inline _bstr_t Excel::IAxisTitle::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5833)
inline void Excel::IAxisTitle::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5834)
inline Excel::CharactersPtr Excel::IAxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(5835)
inline Excel::FontPtr Excel::IAxisTitle::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(5836)
inline _variant_t Excel::IAxisTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5837)
inline void Excel::IAxisTitle::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5838)
inline double Excel::IAxisTitle::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5839)
inline void Excel::IAxisTitle::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5840)
inline _variant_t Excel::IAxisTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5841)
inline void Excel::IAxisTitle::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5842)
inline VARIANT_BOOL Excel::IAxisTitle::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5843)
inline void Excel::IAxisTitle::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5844)
inline _bstr_t Excel::IAxisTitle::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5845)
inline void Excel::IAxisTitle::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5846)
inline double Excel::IAxisTitle::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5847)
inline void Excel::IAxisTitle::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5848)
inline _variant_t Excel::IAxisTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5849)
inline void Excel::IAxisTitle::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5850)
inline long Excel::IAxisTitle::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5851)
inline void Excel::IAxisTitle::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5852)
inline _variant_t Excel::IAxisTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5853)
inline void Excel::IAxisTitle::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartGroup wrapper method implementations
//

#pragma implementation_key(5854)
inline Excel::_ApplicationPtr Excel::IChartGroup::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5855)
inline enum XlCreator Excel::IChartGroup::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5856)
inline IDispatchPtr Excel::IChartGroup::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5857)
inline enum XlAxisGroup Excel::IChartGroup::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5858)
inline void Excel::IChartGroup::PutAxisGroup ( enum XlAxisGroup RHS ) {
    HRESULT _hr = put_AxisGroup(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5859)
inline long Excel::IChartGroup::GetDoughnutHoleSize ( ) {
    long _result;
    HRESULT _hr = get_DoughnutHoleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5860)
inline void Excel::IChartGroup::PutDoughnutHoleSize ( long RHS ) {
    HRESULT _hr = put_DoughnutHoleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5861)
inline Excel::DownBarsPtr Excel::IChartGroup::GetDownBars ( ) {
    struct DownBars * _result;
    HRESULT _hr = get_DownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DownBarsPtr(_result, false);
}

#pragma implementation_key(5862)
inline Excel::DropLinesPtr Excel::IChartGroup::GetDropLines ( ) {
    struct DropLines * _result;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DropLinesPtr(_result, false);
}

#pragma implementation_key(5863)
inline long Excel::IChartGroup::GetFirstSliceAngle ( ) {
    long _result;
    HRESULT _hr = get_FirstSliceAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5864)
inline void Excel::IChartGroup::PutFirstSliceAngle ( long RHS ) {
    HRESULT _hr = put_FirstSliceAngle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5865)
inline long Excel::IChartGroup::GetGapWidth ( ) {
    long _result;
    HRESULT _hr = get_GapWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5866)
inline void Excel::IChartGroup::PutGapWidth ( long RHS ) {
    HRESULT _hr = put_GapWidth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5867)
inline VARIANT_BOOL Excel::IChartGroup::GetHasDropLines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5868)
inline void Excel::IChartGroup::PutHasDropLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDropLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5869)
inline VARIANT_BOOL Excel::IChartGroup::GetHasHiLoLines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasHiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5870)
inline void Excel::IChartGroup::PutHasHiLoLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasHiLoLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5871)
inline VARIANT_BOOL Excel::IChartGroup::GetHasRadarAxisLabels ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasRadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5872)
inline void Excel::IChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasRadarAxisLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5873)
inline VARIANT_BOOL Excel::IChartGroup::GetHasSeriesLines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasSeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5874)
inline void Excel::IChartGroup::PutHasSeriesLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasSeriesLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5875)
inline VARIANT_BOOL Excel::IChartGroup::GetHasUpDownBars ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasUpDownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5876)
inline void Excel::IChartGroup::PutHasUpDownBars ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasUpDownBars(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5877)
inline Excel::HiLoLinesPtr Excel::IChartGroup::GetHiLoLines ( ) {
    struct HiLoLines * _result;
    HRESULT _hr = get_HiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HiLoLinesPtr(_result, false);
}

#pragma implementation_key(5878)
inline long Excel::IChartGroup::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5879)
inline long Excel::IChartGroup::GetOverlap ( ) {
    long _result;
    HRESULT _hr = get_Overlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5880)
inline void Excel::IChartGroup::PutOverlap ( long RHS ) {
    HRESULT _hr = put_Overlap(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5881)
inline Excel::TickLabelsPtr Excel::IChartGroup::GetRadarAxisLabels ( ) {
    struct TickLabels * _result;
    HRESULT _hr = get_RadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TickLabelsPtr(_result, false);
}

#pragma implementation_key(5882)
inline IDispatchPtr Excel::IChartGroup::SeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_SeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5883)
inline Excel::SeriesLinesPtr Excel::IChartGroup::GetSeriesLines ( ) {
    struct SeriesLines * _result;
    HRESULT _hr = get_SeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesLinesPtr(_result, false);
}

#pragma implementation_key(5884)
inline long Excel::IChartGroup::GetSubType ( ) {
    long _result;
    HRESULT _hr = get_SubType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5885)
inline void Excel::IChartGroup::PutSubType ( long RHS ) {
    HRESULT _hr = put_SubType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5886)
inline long Excel::IChartGroup::GetType ( ) {
    long _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5887)
inline void Excel::IChartGroup::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5888)
inline Excel::UpBarsPtr Excel::IChartGroup::GetUpBars ( ) {
    struct UpBars * _result;
    HRESULT _hr = get_UpBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UpBarsPtr(_result, false);
}

#pragma implementation_key(5889)
inline VARIANT_BOOL Excel::IChartGroup::GetVaryByCategories ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_VaryByCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5890)
inline void Excel::IChartGroup::PutVaryByCategories ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_VaryByCategories(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5891)
inline enum XlSizeRepresents Excel::IChartGroup::GetSizeRepresents ( ) {
    enum XlSizeRepresents _result;
    HRESULT _hr = get_SizeRepresents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5892)
inline void Excel::IChartGroup::PutSizeRepresents ( enum XlSizeRepresents RHS ) {
    HRESULT _hr = put_SizeRepresents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5893)
inline long Excel::IChartGroup::GetBubbleScale ( ) {
    long _result;
    HRESULT _hr = get_BubbleScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5894)
inline void Excel::IChartGroup::PutBubbleScale ( long RHS ) {
    HRESULT _hr = put_BubbleScale(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5895)
inline VARIANT_BOOL Excel::IChartGroup::GetShowNegativeBubbles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowNegativeBubbles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5896)
inline void Excel::IChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowNegativeBubbles(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5897)
inline enum XlChartSplitType Excel::IChartGroup::GetSplitType ( ) {
    enum XlChartSplitType _result;
    HRESULT _hr = get_SplitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5898)
inline void Excel::IChartGroup::PutSplitType ( enum XlChartSplitType RHS ) {
    HRESULT _hr = put_SplitType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5899)
inline _variant_t Excel::IChartGroup::GetSplitValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SplitValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5900)
inline void Excel::IChartGroup::PutSplitValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_SplitValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5901)
inline long Excel::IChartGroup::GetSecondPlotSize ( ) {
    long _result;
    HRESULT _hr = get_SecondPlotSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5902)
inline void Excel::IChartGroup::PutSecondPlotSize ( long RHS ) {
    HRESULT _hr = put_SecondPlotSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5903)
inline VARIANT_BOOL Excel::IChartGroup::GetHas3DShading ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Has3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5904)
inline void Excel::IChartGroup::PutHas3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IChartGroups wrapper method implementations
//

#pragma implementation_key(5905)
inline Excel::_ApplicationPtr Excel::IChartGroups::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5906)
inline enum XlCreator Excel::IChartGroups::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5907)
inline IDispatchPtr Excel::IChartGroups::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5908)
inline long Excel::IChartGroups::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5909)
inline Excel::ChartGroupPtr Excel::IChartGroups::Item ( const _variant_t & Index ) {
    struct ChartGroup * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(5910)
inline IUnknownPtr Excel::IChartGroups::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAxes wrapper method implementations
//

#pragma implementation_key(5911)
inline Excel::_ApplicationPtr Excel::IAxes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5912)
inline enum XlCreator Excel::IAxes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5913)
inline IDispatchPtr Excel::IAxes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5914)
inline long Excel::IAxes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5915)
inline Excel::AxisPtr Excel::IAxes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct Axis * _result;
    HRESULT _hr = raw_Item(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AxisPtr(_result, false);
}

#pragma implementation_key(5916)
inline IUnknownPtr Excel::IAxes::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPoints wrapper method implementations
//

#pragma implementation_key(5917)
inline Excel::_ApplicationPtr Excel::IPoints::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5918)
inline enum XlCreator Excel::IPoints::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5919)
inline IDispatchPtr Excel::IPoints::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5920)
inline long Excel::IPoints::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5921)
inline Excel::PointPtr Excel::IPoints::Item ( long Index ) {
    struct Point * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PointPtr(_result, false);
}

#pragma implementation_key(5922)
inline IUnknownPtr Excel::IPoints::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPoint wrapper method implementations
//

#pragma implementation_key(5923)
inline Excel::_ApplicationPtr Excel::IPoint::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5924)
inline enum XlCreator Excel::IPoint::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5925)
inline IDispatchPtr Excel::IPoint::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5926)
inline _variant_t Excel::IPoint::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5927)
inline Excel::BorderPtr Excel::IPoint::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(5928)
inline _variant_t Excel::IPoint::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5929)
inline _variant_t Excel::IPoint::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5930)
inline Excel::DataLabelPtr Excel::IPoint::GetDataLabel ( ) {
    struct DataLabel * _result;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(5931)
inline _variant_t Excel::IPoint::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5932)
inline long Excel::IPoint::GetExplosion ( ) {
    long _result;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5933)
inline void Excel::IPoint::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5934)
inline VARIANT_BOOL Excel::IPoint::GetHasDataLabel ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5935)
inline void Excel::IPoint::PutHasDataLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5936)
inline Excel::InteriorPtr Excel::IPoint::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(5937)
inline VARIANT_BOOL Excel::IPoint::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5938)
inline void Excel::IPoint::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5939)
inline long Excel::IPoint::GetMarkerBackgroundColor ( ) {
    long _result;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5940)
inline void Excel::IPoint::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5941)
inline enum XlColorIndex Excel::IPoint::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5942)
inline void Excel::IPoint::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5943)
inline long Excel::IPoint::GetMarkerForegroundColor ( ) {
    long _result;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5944)
inline void Excel::IPoint::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5945)
inline enum XlColorIndex Excel::IPoint::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5946)
inline void Excel::IPoint::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5947)
inline long Excel::IPoint::GetMarkerSize ( ) {
    long _result;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5948)
inline void Excel::IPoint::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5949)
inline enum XlMarkerStyle Excel::IPoint::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5950)
inline void Excel::IPoint::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5951)
inline _variant_t Excel::IPoint::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5952)
inline enum XlChartPictureType Excel::IPoint::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5953)
inline void Excel::IPoint::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5954)
inline long Excel::IPoint::GetPictureUnit ( ) {
    long _result;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5955)
inline void Excel::IPoint::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5956)
inline _variant_t Excel::IPoint::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5957)
inline VARIANT_BOOL Excel::IPoint::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5958)
inline void Excel::IPoint::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5959)
inline VARIANT_BOOL Excel::IPoint::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5960)
inline void Excel::IPoint::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5961)
inline VARIANT_BOOL Excel::IPoint::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5962)
inline void Excel::IPoint::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5963)
inline VARIANT_BOOL Excel::IPoint::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5964)
inline void Excel::IPoint::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5965)
inline VARIANT_BOOL Excel::IPoint::GetSecondaryPlot ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SecondaryPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5966)
inline void Excel::IPoint::PutSecondaryPlot ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SecondaryPlot(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5967)
inline Excel::ChartFillFormatPtr Excel::IPoint::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(5968)
inline _variant_t Excel::IPoint::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISeries wrapper method implementations
//

#pragma implementation_key(5969)
inline Excel::_ApplicationPtr Excel::ISeries::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5970)
inline enum XlCreator Excel::ISeries::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5971)
inline IDispatchPtr Excel::ISeries::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5972)
inline _variant_t Excel::ISeries::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5973)
inline enum XlAxisGroup Excel::ISeries::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5974)
inline void Excel::ISeries::PutAxisGroup ( enum XlAxisGroup RHS ) {
    HRESULT _hr = put_AxisGroup(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5975)
inline Excel::BorderPtr Excel::ISeries::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(5976)
inline _variant_t Excel::ISeries::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5977)
inline _variant_t Excel::ISeries::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5978)
inline IDispatchPtr Excel::ISeries::DataLabels ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_DataLabels(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5979)
inline _variant_t Excel::ISeries::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5980)
inline _variant_t Excel::ISeries::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ErrorBar(Direction, Include, Type, Amount, MinusValues, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(5981)
inline Excel::ErrorBarsPtr Excel::ISeries::GetErrorBars ( ) {
    struct ErrorBars * _result;
    HRESULT _hr = get_ErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ErrorBarsPtr(_result, false);
}

#pragma implementation_key(5982)
inline long Excel::ISeries::GetExplosion ( ) {
    long _result;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5983)
inline void Excel::ISeries::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5984)
inline _bstr_t Excel::ISeries::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5985)
inline void Excel::ISeries::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5986)
inline _bstr_t Excel::ISeries::GetFormulaLocal ( ) {
    BSTR _result;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5987)
inline void Excel::ISeries::PutFormulaLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5988)
inline _bstr_t Excel::ISeries::GetFormulaR1C1 ( ) {
    BSTR _result;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5989)
inline void Excel::ISeries::PutFormulaR1C1 ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5990)
inline _bstr_t Excel::ISeries::GetFormulaR1C1Local ( ) {
    BSTR _result;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5991)
inline void Excel::ISeries::PutFormulaR1C1Local ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1Local(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5992)
inline VARIANT_BOOL Excel::ISeries::GetHasDataLabels ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDataLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5993)
inline void Excel::ISeries::PutHasDataLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5994)
inline VARIANT_BOOL Excel::ISeries::GetHasErrorBars ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5995)
inline void Excel::ISeries::PutHasErrorBars ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasErrorBars(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5996)
inline Excel::InteriorPtr Excel::ISeries::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(5997)
inline Excel::ChartFillFormatPtr Excel::ISeries::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(5998)
inline VARIANT_BOOL Excel::ISeries::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5999)
inline void Excel::ISeries::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6000)
inline long Excel::ISeries::GetMarkerBackgroundColor ( ) {
    long _result;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6001)
inline void Excel::ISeries::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6002)
inline enum XlColorIndex Excel::ISeries::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6003)
inline void Excel::ISeries::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6004)
inline long Excel::ISeries::GetMarkerForegroundColor ( ) {
    long _result;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6005)
inline void Excel::ISeries::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6006)
inline enum XlColorIndex Excel::ISeries::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6007)
inline void Excel::ISeries::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6008)
inline long Excel::ISeries::GetMarkerSize ( ) {
    long _result;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6009)
inline void Excel::ISeries::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6010)
inline enum XlMarkerStyle Excel::ISeries::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6011)
inline void Excel::ISeries::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6012)
inline _bstr_t Excel::ISeries::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6013)
inline void Excel::ISeries::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6014)
inline _variant_t Excel::ISeries::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6015)
inline enum XlChartPictureType Excel::ISeries::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6016)
inline void Excel::ISeries::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6017)
inline long Excel::ISeries::GetPictureUnit ( ) {
    long _result;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6018)
inline void Excel::ISeries::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6019)
inline long Excel::ISeries::GetPlotOrder ( ) {
    long _result;
    HRESULT _hr = get_PlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6020)
inline void Excel::ISeries::PutPlotOrder ( long RHS ) {
    HRESULT _hr = put_PlotOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6021)
inline IDispatchPtr Excel::ISeries::Points ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Points(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6022)
inline _variant_t Excel::ISeries::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6023)
inline VARIANT_BOOL Excel::ISeries::GetSmooth ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6024)
inline void Excel::ISeries::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6025)
inline IDispatchPtr Excel::ISeries::Trendlines ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_Trendlines(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6026)
inline long Excel::ISeries::GetType ( ) {
    long _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6027)
inline void Excel::ISeries::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6028)
inline enum XlChartType Excel::ISeries::GetChartType ( ) {
    enum XlChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6029)
inline void Excel::ISeries::PutChartType ( enum XlChartType RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6030)
inline HRESULT Excel::ISeries::ApplyCustomType ( enum XlChartType ChartType ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6031)
inline _variant_t Excel::ISeries::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6032)
inline void Excel::ISeries::PutValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_Values(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6033)
inline _variant_t Excel::ISeries::GetXValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_XValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6034)
inline void Excel::ISeries::PutXValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_XValues(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6035)
inline _variant_t Excel::ISeries::GetBubbleSizes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BubbleSizes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6036)
inline void Excel::ISeries::PutBubbleSizes ( const _variant_t & RHS ) {
    HRESULT _hr = put_BubbleSizes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6037)
inline enum XlBarShape Excel::ISeries::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6038)
inline void Excel::ISeries::PutBarShape ( enum XlBarShape RHS ) {
    HRESULT _hr = put_BarShape(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6039)
inline VARIANT_BOOL Excel::ISeries::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6040)
inline void Excel::ISeries::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6041)
inline VARIANT_BOOL Excel::ISeries::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6042)
inline void Excel::ISeries::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6043)
inline VARIANT_BOOL Excel::ISeries::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6044)
inline void Excel::ISeries::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6045)
inline VARIANT_BOOL Excel::ISeries::GetHas3DEffect ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Has3DEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6046)
inline void Excel::ISeries::PutHas3DEffect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DEffect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6047)
inline VARIANT_BOOL Excel::ISeries::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6048)
inline void Excel::ISeries::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6049)
inline VARIANT_BOOL Excel::ISeries::GetHasLeaderLines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasLeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6050)
inline void Excel::ISeries::PutHasLeaderLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLeaderLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6051)
inline Excel::LeaderLinesPtr Excel::ISeries::GetLeaderLines ( ) {
    struct LeaderLines * _result;
    HRESULT _hr = get_LeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LeaderLinesPtr(_result, false);
}

#pragma implementation_key(6052)
inline _variant_t Excel::ISeries::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, LegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISeriesCollection wrapper method implementations
//

#pragma implementation_key(6053)
inline Excel::_ApplicationPtr Excel::ISeriesCollection::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6054)
inline enum XlCreator Excel::ISeriesCollection::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6055)
inline IDispatchPtr Excel::ISeriesCollection::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6056)
inline Excel::SeriesPtr Excel::ISeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace ) {
    struct Series * _result;
    HRESULT _hr = raw_Add(Source, Rowcol, SeriesLabels, CategoryLabels, Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

#pragma implementation_key(6057)
inline long Excel::ISeriesCollection::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6058)
inline _variant_t Excel::ISeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Extend(Source, Rowcol, CategoryLabels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6059)
inline Excel::SeriesPtr Excel::ISeriesCollection::Item ( const _variant_t & Index ) {
    struct Series * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

#pragma implementation_key(6060)
inline IUnknownPtr Excel::ISeriesCollection::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6061)
inline _variant_t Excel::ISeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(Rowcol, SeriesLabels, CategoryLabels, Replace, NewSeries, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6062)
inline Excel::SeriesPtr Excel::ISeriesCollection::NewSeries ( ) {
    struct Series * _result;
    HRESULT _hr = raw_NewSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SeriesPtr(_result, false);
}

//
// interface IDataLabel wrapper method implementations
//

#pragma implementation_key(6063)
inline Excel::_ApplicationPtr Excel::IDataLabel::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6064)
inline enum XlCreator Excel::IDataLabel::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6065)
inline IDispatchPtr Excel::IDataLabel::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6066)
inline _bstr_t Excel::IDataLabel::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6067)
inline _variant_t Excel::IDataLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6068)
inline Excel::BorderPtr Excel::IDataLabel::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6069)
inline _variant_t Excel::IDataLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6070)
inline Excel::InteriorPtr Excel::IDataLabel::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6071)
inline Excel::ChartFillFormatPtr Excel::IDataLabel::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(6072)
inline _bstr_t Excel::IDataLabel::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6073)
inline void Excel::IDataLabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6074)
inline Excel::CharactersPtr Excel::IDataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(6075)
inline Excel::FontPtr Excel::IDataLabel::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(6076)
inline _variant_t Excel::IDataLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6077)
inline void Excel::IDataLabel::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6078)
inline double Excel::IDataLabel::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6079)
inline void Excel::IDataLabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6080)
inline _variant_t Excel::IDataLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6081)
inline void Excel::IDataLabel::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6082)
inline VARIANT_BOOL Excel::IDataLabel::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6083)
inline void Excel::IDataLabel::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6084)
inline _bstr_t Excel::IDataLabel::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6085)
inline void Excel::IDataLabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6086)
inline double Excel::IDataLabel::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6087)
inline void Excel::IDataLabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6088)
inline _variant_t Excel::IDataLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6089)
inline void Excel::IDataLabel::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6090)
inline long Excel::IDataLabel::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6091)
inline void Excel::IDataLabel::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6092)
inline _variant_t Excel::IDataLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6093)
inline void Excel::IDataLabel::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6094)
inline VARIANT_BOOL Excel::IDataLabel::GetAutoText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6095)
inline void Excel::IDataLabel::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6096)
inline _bstr_t Excel::IDataLabel::GetNumberFormat ( ) {
    BSTR _result;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6097)
inline void Excel::IDataLabel::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6098)
inline VARIANT_BOOL Excel::IDataLabel::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6099)
inline void Excel::IDataLabel::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6100)
inline _variant_t Excel::IDataLabel::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6101)
inline void Excel::IDataLabel::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6102)
inline VARIANT_BOOL Excel::IDataLabel::GetShowLegendKey ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6103)
inline void Excel::IDataLabel::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6104)
inline _variant_t Excel::IDataLabel::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6105)
inline void Excel::IDataLabel::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6106)
inline enum XlDataLabelPosition Excel::IDataLabel::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6107)
inline void Excel::IDataLabel::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6108)
inline VARIANT_BOOL Excel::IDataLabel::GetShowSeriesName ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6109)
inline void Excel::IDataLabel::PutShowSeriesName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowSeriesName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6110)
inline VARIANT_BOOL Excel::IDataLabel::GetShowCategoryName ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6111)
inline void Excel::IDataLabel::PutShowCategoryName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCategoryName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6112)
inline VARIANT_BOOL Excel::IDataLabel::GetShowValue ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6113)
inline void Excel::IDataLabel::PutShowValue ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6114)
inline VARIANT_BOOL Excel::IDataLabel::GetShowPercentage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6115)
inline void Excel::IDataLabel::PutShowPercentage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPercentage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6116)
inline VARIANT_BOOL Excel::IDataLabel::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6117)
inline void Excel::IDataLabel::PutShowBubbleSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowBubbleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6118)
inline _variant_t Excel::IDataLabel::GetSeparator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6119)
inline void Excel::IDataLabel::PutSeparator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Separator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDataLabels wrapper method implementations
//

#pragma implementation_key(6120)
inline Excel::_ApplicationPtr Excel::IDataLabels::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6121)
inline enum XlCreator Excel::IDataLabels::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6122)
inline IDispatchPtr Excel::IDataLabels::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6123)
inline _bstr_t Excel::IDataLabels::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6124)
inline _variant_t Excel::IDataLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6125)
inline Excel::BorderPtr Excel::IDataLabels::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6126)
inline _variant_t Excel::IDataLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6127)
inline Excel::InteriorPtr Excel::IDataLabels::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6128)
inline Excel::ChartFillFormatPtr Excel::IDataLabels::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(6129)
inline Excel::FontPtr Excel::IDataLabels::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(6130)
inline _variant_t Excel::IDataLabels::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6131)
inline void Excel::IDataLabels::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6132)
inline _variant_t Excel::IDataLabels::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6133)
inline void Excel::IDataLabels::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6134)
inline VARIANT_BOOL Excel::IDataLabels::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6135)
inline void Excel::IDataLabels::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6136)
inline _variant_t Excel::IDataLabels::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6137)
inline void Excel::IDataLabels::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6138)
inline long Excel::IDataLabels::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6139)
inline void Excel::IDataLabels::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6140)
inline _variant_t Excel::IDataLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6141)
inline void Excel::IDataLabels::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6142)
inline VARIANT_BOOL Excel::IDataLabels::GetAutoText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6143)
inline void Excel::IDataLabels::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6144)
inline _bstr_t Excel::IDataLabels::GetNumberFormat ( ) {
    BSTR _result;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6145)
inline void Excel::IDataLabels::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6146)
inline VARIANT_BOOL Excel::IDataLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6147)
inline void Excel::IDataLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6148)
inline _variant_t Excel::IDataLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6149)
inline void Excel::IDataLabels::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6150)
inline VARIANT_BOOL Excel::IDataLabels::GetShowLegendKey ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6151)
inline void Excel::IDataLabels::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6152)
inline _variant_t Excel::IDataLabels::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6153)
inline void Excel::IDataLabels::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6154)
inline enum XlDataLabelPosition Excel::IDataLabels::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6155)
inline void Excel::IDataLabels::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6156)
inline VARIANT_BOOL Excel::IDataLabels::GetShowSeriesName ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6157)
inline void Excel::IDataLabels::PutShowSeriesName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowSeriesName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6158)
inline VARIANT_BOOL Excel::IDataLabels::GetShowCategoryName ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6159)
inline void Excel::IDataLabels::PutShowCategoryName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCategoryName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6160)
inline VARIANT_BOOL Excel::IDataLabels::GetShowValue ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6161)
inline void Excel::IDataLabels::PutShowValue ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6162)
inline VARIANT_BOOL Excel::IDataLabels::GetShowPercentage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6163)
inline void Excel::IDataLabels::PutShowPercentage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPercentage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6164)
inline VARIANT_BOOL Excel::IDataLabels::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6165)
inline void Excel::IDataLabels::PutShowBubbleSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowBubbleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6166)
inline _variant_t Excel::IDataLabels::GetSeparator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6167)
inline void Excel::IDataLabels::PutSeparator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Separator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6168)
inline long Excel::IDataLabels::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6169)
inline Excel::DataLabelPtr Excel::IDataLabels::Item ( const _variant_t & Index ) {
    struct DataLabel * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(6170)
inline IUnknownPtr Excel::IDataLabels::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ILegendEntry wrapper method implementations
//

#pragma implementation_key(6171)
inline Excel::_ApplicationPtr Excel::ILegendEntry::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6172)
inline enum XlCreator Excel::ILegendEntry::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6173)
inline IDispatchPtr Excel::ILegendEntry::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6174)
inline _variant_t Excel::ILegendEntry::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6175)
inline Excel::FontPtr Excel::ILegendEntry::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(6176)
inline long Excel::ILegendEntry::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6177)
inline Excel::LegendKeyPtr Excel::ILegendEntry::GetLegendKey ( ) {
    struct LegendKey * _result;
    HRESULT _hr = get_LegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendKeyPtr(_result, false);
}

#pragma implementation_key(6178)
inline _variant_t Excel::ILegendEntry::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6179)
inline _variant_t Excel::ILegendEntry::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6180)
inline void Excel::ILegendEntry::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6181)
inline double Excel::ILegendEntry::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6182)
inline double Excel::ILegendEntry::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6183)
inline double Excel::ILegendEntry::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6184)
inline double Excel::ILegendEntry::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ILegendEntries wrapper method implementations
//

#pragma implementation_key(6185)
inline Excel::_ApplicationPtr Excel::ILegendEntries::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6186)
inline enum XlCreator Excel::ILegendEntries::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6187)
inline IDispatchPtr Excel::ILegendEntries::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6188)
inline long Excel::ILegendEntries::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6189)
inline Excel::LegendEntryPtr Excel::ILegendEntries::Item ( const _variant_t & Index ) {
    struct LegendEntry * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendEntryPtr(_result, false);
}

#pragma implementation_key(6190)
inline IUnknownPtr Excel::ILegendEntries::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ILegendKey wrapper method implementations
//

#pragma implementation_key(6191)
inline Excel::_ApplicationPtr Excel::ILegendKey::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6192)
inline enum XlCreator Excel::ILegendKey::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6193)
inline IDispatchPtr Excel::ILegendKey::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6194)
inline Excel::BorderPtr Excel::ILegendKey::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6195)
inline _variant_t Excel::ILegendKey::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6196)
inline _variant_t Excel::ILegendKey::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6197)
inline Excel::InteriorPtr Excel::ILegendKey::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6198)
inline Excel::ChartFillFormatPtr Excel::ILegendKey::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(6199)
inline VARIANT_BOOL Excel::ILegendKey::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6200)
inline void Excel::ILegendKey::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6201)
inline long Excel::ILegendKey::GetMarkerBackgroundColor ( ) {
    long _result;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6202)
inline void Excel::ILegendKey::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6203)
inline enum XlColorIndex Excel::ILegendKey::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6204)
inline void Excel::ILegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6205)
inline long Excel::ILegendKey::GetMarkerForegroundColor ( ) {
    long _result;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6206)
inline void Excel::ILegendKey::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6207)
inline enum XlColorIndex Excel::ILegendKey::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6208)
inline void Excel::ILegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6209)
inline long Excel::ILegendKey::GetMarkerSize ( ) {
    long _result;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6210)
inline void Excel::ILegendKey::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6211)
inline enum XlMarkerStyle Excel::ILegendKey::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6212)
inline void Excel::ILegendKey::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6213)
inline long Excel::ILegendKey::GetPictureType ( ) {
    long _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6214)
inline void Excel::ILegendKey::PutPictureType ( long RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6215)
inline long Excel::ILegendKey::GetPictureUnit ( ) {
    long _result;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6216)
inline void Excel::ILegendKey::PutPictureUnit ( long RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6217)
inline _variant_t Excel::ILegendKey::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6218)
inline VARIANT_BOOL Excel::ILegendKey::GetSmooth ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6219)
inline void Excel::ILegendKey::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6220)
inline double Excel::ILegendKey::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6221)
inline double Excel::ILegendKey::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6222)
inline double Excel::ILegendKey::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6223)
inline double Excel::ILegendKey::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6224)
inline VARIANT_BOOL Excel::ILegendKey::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6225)
inline void Excel::ILegendKey::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITrendlines wrapper method implementations
//

#pragma implementation_key(6226)
inline Excel::_ApplicationPtr Excel::ITrendlines::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6227)
inline enum XlCreator Excel::ITrendlines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6228)
inline IDispatchPtr Excel::ITrendlines::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6229)
inline Excel::TrendlinePtr Excel::ITrendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name ) {
    struct Trendline * _result;
    HRESULT _hr = raw_Add(Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TrendlinePtr(_result, false);
}

#pragma implementation_key(6230)
inline long Excel::ITrendlines::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6231)
inline Excel::TrendlinePtr Excel::ITrendlines::Item ( const _variant_t & Index ) {
    struct Trendline * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TrendlinePtr(_result, false);
}

#pragma implementation_key(6232)
inline IUnknownPtr Excel::ITrendlines::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ITrendline wrapper method implementations
//

#pragma implementation_key(6233)
inline Excel::_ApplicationPtr Excel::ITrendline::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6234)
inline enum XlCreator Excel::ITrendline::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6235)
inline IDispatchPtr Excel::ITrendline::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6236)
inline long Excel::ITrendline::GetBackward ( ) {
    long _result;
    HRESULT _hr = get_Backward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6237)
inline void Excel::ITrendline::PutBackward ( long RHS ) {
    HRESULT _hr = put_Backward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6238)
inline Excel::BorderPtr Excel::ITrendline::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6239)
inline _variant_t Excel::ITrendline::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6240)
inline Excel::DataLabelPtr Excel::ITrendline::GetDataLabel ( ) {
    struct DataLabel * _result;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(6241)
inline _variant_t Excel::ITrendline::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6242)
inline VARIANT_BOOL Excel::ITrendline::GetDisplayEquation ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6243)
inline void Excel::ITrendline::PutDisplayEquation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayEquation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6244)
inline VARIANT_BOOL Excel::ITrendline::GetDisplayRSquared ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayRSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6245)
inline void Excel::ITrendline::PutDisplayRSquared ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRSquared(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6246)
inline long Excel::ITrendline::GetForward ( ) {
    long _result;
    HRESULT _hr = get_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6247)
inline void Excel::ITrendline::PutForward ( long RHS ) {
    HRESULT _hr = put_Forward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6248)
inline long Excel::ITrendline::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6249)
inline double Excel::ITrendline::GetIntercept ( ) {
    double _result;
    HRESULT _hr = get_Intercept(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6250)
inline void Excel::ITrendline::PutIntercept ( double RHS ) {
    HRESULT _hr = put_Intercept(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6251)
inline VARIANT_BOOL Excel::ITrendline::GetInterceptIsAuto ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_InterceptIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6252)
inline void Excel::ITrendline::PutInterceptIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InterceptIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6253)
inline _bstr_t Excel::ITrendline::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6254)
inline void Excel::ITrendline::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6255)
inline VARIANT_BOOL Excel::ITrendline::GetNameIsAuto ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NameIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6256)
inline void Excel::ITrendline::PutNameIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NameIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6257)
inline long Excel::ITrendline::GetOrder ( ) {
    long _result;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6258)
inline void Excel::ITrendline::PutOrder ( long RHS ) {
    HRESULT _hr = put_Order(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6259)
inline long Excel::ITrendline::GetPeriod ( ) {
    long _result;
    HRESULT _hr = get_Period(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6260)
inline void Excel::ITrendline::PutPeriod ( long RHS ) {
    HRESULT _hr = put_Period(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6261)
inline _variant_t Excel::ITrendline::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6262)
inline enum XlTrendlineType Excel::ITrendline::GetType ( ) {
    enum XlTrendlineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6263)
inline void Excel::ITrendline::PutType ( enum XlTrendlineType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICorners wrapper method implementations
//

#pragma implementation_key(6264)
inline Excel::_ApplicationPtr Excel::ICorners::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6265)
inline enum XlCreator Excel::ICorners::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6266)
inline IDispatchPtr Excel::ICorners::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6267)
inline _bstr_t Excel::ICorners::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6268)
inline _variant_t Excel::ICorners::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ISeriesLines wrapper method implementations
//

#pragma implementation_key(6269)
inline Excel::_ApplicationPtr Excel::ISeriesLines::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6270)
inline enum XlCreator Excel::ISeriesLines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6271)
inline IDispatchPtr Excel::ISeriesLines::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6272)
inline _bstr_t Excel::ISeriesLines::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6273)
inline _variant_t Excel::ISeriesLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6274)
inline Excel::BorderPtr Excel::ISeriesLines::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6275)
inline _variant_t Excel::ISeriesLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IHiLoLines wrapper method implementations
//

#pragma implementation_key(6276)
inline Excel::_ApplicationPtr Excel::IHiLoLines::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6277)
inline enum XlCreator Excel::IHiLoLines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6278)
inline IDispatchPtr Excel::IHiLoLines::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6279)
inline _bstr_t Excel::IHiLoLines::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6280)
inline _variant_t Excel::IHiLoLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6281)
inline Excel::BorderPtr Excel::IHiLoLines::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6282)
inline _variant_t Excel::IHiLoLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IGridlines wrapper method implementations
//

#pragma implementation_key(6283)
inline Excel::_ApplicationPtr Excel::IGridlines::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6284)
inline enum XlCreator Excel::IGridlines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6285)
inline IDispatchPtr Excel::IGridlines::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6286)
inline _bstr_t Excel::IGridlines::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6287)
inline _variant_t Excel::IGridlines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6288)
inline Excel::BorderPtr Excel::IGridlines::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6289)
inline _variant_t Excel::IGridlines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IDropLines wrapper method implementations
//

#pragma implementation_key(6290)
inline Excel::_ApplicationPtr Excel::IDropLines::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6291)
inline enum XlCreator Excel::IDropLines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6292)
inline IDispatchPtr Excel::IDropLines::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6293)
inline _bstr_t Excel::IDropLines::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6294)
inline _variant_t Excel::IDropLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6295)
inline Excel::BorderPtr Excel::IDropLines::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6296)
inline _variant_t Excel::IDropLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ILeaderLines wrapper method implementations
//

#pragma implementation_key(6297)
inline Excel::_ApplicationPtr Excel::ILeaderLines::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6298)
inline enum XlCreator Excel::ILeaderLines::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6299)
inline IDispatchPtr Excel::ILeaderLines::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6300)
inline Excel::BorderPtr Excel::ILeaderLines::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6301)
inline HRESULT Excel::ILeaderLines::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6302)
inline HRESULT Excel::ILeaderLines::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IUpBars wrapper method implementations
//

#pragma implementation_key(6303)
inline Excel::_ApplicationPtr Excel::IUpBars::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6304)
inline enum XlCreator Excel::IUpBars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6305)
inline IDispatchPtr Excel::IUpBars::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6306)
inline _bstr_t Excel::IUpBars::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6307)
inline _variant_t Excel::IUpBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6308)
inline Excel::BorderPtr Excel::IUpBars::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6309)
inline _variant_t Excel::IUpBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6310)
inline Excel::InteriorPtr Excel::IUpBars::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6311)
inline Excel::ChartFillFormatPtr Excel::IUpBars::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

//
// interface IDownBars wrapper method implementations
//

#pragma implementation_key(6312)
inline Excel::_ApplicationPtr Excel::IDownBars::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6313)
inline enum XlCreator Excel::IDownBars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6314)
inline IDispatchPtr Excel::IDownBars::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6315)
inline _bstr_t Excel::IDownBars::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6316)
inline _variant_t Excel::IDownBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6317)
inline Excel::BorderPtr Excel::IDownBars::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6318)
inline _variant_t Excel::IDownBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6319)
inline Excel::InteriorPtr Excel::IDownBars::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6320)
inline Excel::ChartFillFormatPtr Excel::IDownBars::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

//
// interface IFloor wrapper method implementations
//

#pragma implementation_key(6321)
inline Excel::_ApplicationPtr Excel::IFloor::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6322)
inline enum XlCreator Excel::IFloor::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6323)
inline IDispatchPtr Excel::IFloor::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6324)
inline _bstr_t Excel::IFloor::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6325)
inline _variant_t Excel::IFloor::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6326)
inline Excel::BorderPtr Excel::IFloor::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6327)
inline _variant_t Excel::IFloor::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6328)
inline Excel::InteriorPtr Excel::IFloor::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6329)
inline Excel::ChartFillFormatPtr Excel::IFloor::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(6330)
inline _variant_t Excel::IFloor::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6331)
inline void Excel::IFloor::PutPictureType ( const _variant_t & RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6332)
inline HRESULT Excel::IFloor::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWalls wrapper method implementations
//

#pragma implementation_key(6333)
inline Excel::_ApplicationPtr Excel::IWalls::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6334)
inline enum XlCreator Excel::IWalls::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6335)
inline IDispatchPtr Excel::IWalls::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6336)
inline _bstr_t Excel::IWalls::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6337)
inline _variant_t Excel::IWalls::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6338)
inline Excel::BorderPtr Excel::IWalls::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6339)
inline _variant_t Excel::IWalls::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6340)
inline Excel::InteriorPtr Excel::IWalls::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6341)
inline Excel::ChartFillFormatPtr Excel::IWalls::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(6342)
inline _variant_t Excel::IWalls::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6343)
inline void Excel::IWalls::PutPictureType ( const _variant_t & RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6344)
inline HRESULT Excel::IWalls::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6345)
inline _variant_t Excel::IWalls::GetPictureUnit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6346)
inline void Excel::IWalls::PutPictureUnit ( const _variant_t & RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITickLabels wrapper method implementations
//

#pragma implementation_key(6347)
inline Excel::_ApplicationPtr Excel::ITickLabels::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6348)
inline enum XlCreator Excel::ITickLabels::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6349)
inline IDispatchPtr Excel::ITickLabels::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6350)
inline _variant_t Excel::ITickLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6351)
inline Excel::FontPtr Excel::ITickLabels::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(6352)
inline _bstr_t Excel::ITickLabels::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6353)
inline _bstr_t Excel::ITickLabels::GetNumberFormat ( ) {
    BSTR _result;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6354)
inline void Excel::ITickLabels::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6355)
inline VARIANT_BOOL Excel::ITickLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6356)
inline void Excel::ITickLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6357)
inline _variant_t Excel::ITickLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6358)
inline void Excel::ITickLabels::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6359)
inline enum XlTickLabelOrientation Excel::ITickLabels::GetOrientation ( ) {
    enum XlTickLabelOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6360)
inline void Excel::ITickLabels::PutOrientation ( enum XlTickLabelOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6361)
inline _variant_t Excel::ITickLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6362)
inline long Excel::ITickLabels::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6363)
inline void Excel::ITickLabels::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6364)
inline _variant_t Excel::ITickLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6365)
inline void Excel::ITickLabels::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6366)
inline long Excel::ITickLabels::GetDepth ( ) {
    long _result;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6367)
inline long Excel::ITickLabels::GetOffset ( ) {
    long _result;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6368)
inline void Excel::ITickLabels::PutOffset ( long RHS ) {
    HRESULT _hr = put_Offset(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6369)
inline long Excel::ITickLabels::GetAlignment ( ) {
    long _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6370)
inline void Excel::ITickLabels::PutAlignment ( long RHS ) {
    HRESULT _hr = put_Alignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPlotArea wrapper method implementations
//

#pragma implementation_key(6371)
inline Excel::_ApplicationPtr Excel::IPlotArea::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6372)
inline enum XlCreator Excel::IPlotArea::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6373)
inline IDispatchPtr Excel::IPlotArea::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6374)
inline _bstr_t Excel::IPlotArea::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6375)
inline _variant_t Excel::IPlotArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6376)
inline Excel::BorderPtr Excel::IPlotArea::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6377)
inline _variant_t Excel::IPlotArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6378)
inline double Excel::IPlotArea::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6379)
inline void Excel::IPlotArea::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6380)
inline Excel::InteriorPtr Excel::IPlotArea::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6381)
inline Excel::ChartFillFormatPtr Excel::IPlotArea::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(6382)
inline double Excel::IPlotArea::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6383)
inline void Excel::IPlotArea::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6384)
inline double Excel::IPlotArea::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6385)
inline void Excel::IPlotArea::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6386)
inline double Excel::IPlotArea::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6387)
inline void Excel::IPlotArea::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6388)
inline double Excel::IPlotArea::GetInsideLeft ( ) {
    double _result;
    HRESULT _hr = get_InsideLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6389)
inline double Excel::IPlotArea::GetInsideTop ( ) {
    double _result;
    HRESULT _hr = get_InsideTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6390)
inline double Excel::IPlotArea::GetInsideWidth ( ) {
    double _result;
    HRESULT _hr = get_InsideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6391)
inline double Excel::IPlotArea::GetInsideHeight ( ) {
    double _result;
    HRESULT _hr = get_InsideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IChartArea wrapper method implementations
//

#pragma implementation_key(6392)
inline Excel::_ApplicationPtr Excel::IChartArea::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6393)
inline enum XlCreator Excel::IChartArea::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6394)
inline IDispatchPtr Excel::IChartArea::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6395)
inline _bstr_t Excel::IChartArea::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6396)
inline _variant_t Excel::IChartArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6397)
inline Excel::BorderPtr Excel::IChartArea::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6398)
inline _variant_t Excel::IChartArea::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6399)
inline _variant_t Excel::IChartArea::ClearContents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6400)
inline _variant_t Excel::IChartArea::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6401)
inline Excel::FontPtr Excel::IChartArea::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(6402)
inline VARIANT_BOOL Excel::IChartArea::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6403)
inline void Excel::IChartArea::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6404)
inline _variant_t Excel::IChartArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6405)
inline double Excel::IChartArea::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6406)
inline void Excel::IChartArea::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6407)
inline Excel::InteriorPtr Excel::IChartArea::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6408)
inline Excel::ChartFillFormatPtr Excel::IChartArea::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(6409)
inline double Excel::IChartArea::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6410)
inline void Excel::IChartArea::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6411)
inline double Excel::IChartArea::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6412)
inline void Excel::IChartArea::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6413)
inline double Excel::IChartArea::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6414)
inline void Excel::IChartArea::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6415)
inline _variant_t Excel::IChartArea::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6416)
inline void Excel::IChartArea::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILegend wrapper method implementations
//

#pragma implementation_key(6417)
inline Excel::_ApplicationPtr Excel::ILegend::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6418)
inline enum XlCreator Excel::ILegend::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6419)
inline IDispatchPtr Excel::ILegend::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6420)
inline _bstr_t Excel::ILegend::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6421)
inline _variant_t Excel::ILegend::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6422)
inline Excel::BorderPtr Excel::ILegend::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6423)
inline _variant_t Excel::ILegend::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6424)
inline Excel::FontPtr Excel::ILegend::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(6425)
inline IDispatchPtr Excel::ILegend::LegendEntries ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = raw_LegendEntries(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6426)
inline enum XlLegendPosition Excel::ILegend::GetPosition ( ) {
    enum XlLegendPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6427)
inline void Excel::ILegend::PutPosition ( enum XlLegendPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6428)
inline VARIANT_BOOL Excel::ILegend::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6429)
inline void Excel::ILegend::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6430)
inline _variant_t Excel::ILegend::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6431)
inline double Excel::ILegend::GetHeight ( ) {
    double _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6432)
inline void Excel::ILegend::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6433)
inline Excel::InteriorPtr Excel::ILegend::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6434)
inline Excel::ChartFillFormatPtr Excel::ILegend::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(6435)
inline double Excel::ILegend::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6436)
inline void Excel::ILegend::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6437)
inline double Excel::ILegend::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6438)
inline void Excel::ILegend::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6439)
inline double Excel::ILegend::GetWidth ( ) {
    double _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6440)
inline void Excel::ILegend::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6441)
inline _variant_t Excel::ILegend::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6442)
inline void Excel::ILegend::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IErrorBars wrapper method implementations
//

#pragma implementation_key(6443)
inline Excel::_ApplicationPtr Excel::IErrorBars::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6444)
inline enum XlCreator Excel::IErrorBars::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6445)
inline IDispatchPtr Excel::IErrorBars::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6446)
inline _bstr_t Excel::IErrorBars::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6447)
inline _variant_t Excel::IErrorBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6448)
inline Excel::BorderPtr Excel::IErrorBars::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6449)
inline _variant_t Excel::IErrorBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6450)
inline _variant_t Excel::IErrorBars::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6451)
inline enum XlEndStyleCap Excel::IErrorBars::GetEndStyle ( ) {
    enum XlEndStyleCap _result;
    HRESULT _hr = get_EndStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6452)
inline void Excel::IErrorBars::PutEndStyle ( enum XlEndStyleCap RHS ) {
    HRESULT _hr = put_EndStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDataTable wrapper method implementations
//

#pragma implementation_key(6453)
inline Excel::_ApplicationPtr Excel::IDataTable::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6454)
inline enum XlCreator Excel::IDataTable::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6455)
inline IDispatchPtr Excel::IDataTable::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6456)
inline VARIANT_BOOL Excel::IDataTable::GetShowLegendKey ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6457)
inline void Excel::IDataTable::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6458)
inline VARIANT_BOOL Excel::IDataTable::GetHasBorderHorizontal ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasBorderHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6459)
inline void Excel::IDataTable::PutHasBorderHorizontal ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderHorizontal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6460)
inline VARIANT_BOOL Excel::IDataTable::GetHasBorderVertical ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasBorderVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6461)
inline void Excel::IDataTable::PutHasBorderVertical ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderVertical(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6462)
inline VARIANT_BOOL Excel::IDataTable::GetHasBorderOutline ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasBorderOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6463)
inline void Excel::IDataTable::PutHasBorderOutline ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasBorderOutline(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6464)
inline Excel::BorderPtr Excel::IDataTable::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6465)
inline Excel::FontPtr Excel::IDataTable::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(6466)
inline HRESULT Excel::IDataTable::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6467)
inline HRESULT Excel::IDataTable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6468)
inline _variant_t Excel::IDataTable::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6469)
inline void Excel::IDataTable::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPhonetic wrapper method implementations
//

#pragma implementation_key(6470)
inline Excel::_ApplicationPtr Excel::IPhonetic::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6471)
inline enum XlCreator Excel::IPhonetic::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6472)
inline IDispatchPtr Excel::IPhonetic::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6473)
inline VARIANT_BOOL Excel::IPhonetic::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6474)
inline void Excel::IPhonetic::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6475)
inline long Excel::IPhonetic::GetCharacterType ( ) {
    long _result;
    HRESULT _hr = get_CharacterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6476)
inline void Excel::IPhonetic::PutCharacterType ( long RHS ) {
    HRESULT _hr = put_CharacterType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6477)
inline long Excel::IPhonetic::GetAlignment ( ) {
    long _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6478)
inline void Excel::IPhonetic::PutAlignment ( long RHS ) {
    HRESULT _hr = put_Alignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6479)
inline Excel::FontPtr Excel::IPhonetic::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(6480)
inline _bstr_t Excel::IPhonetic::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6481)
inline void Excel::IPhonetic::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IShape wrapper method implementations
//

#pragma implementation_key(6482)
inline Excel::_ApplicationPtr Excel::IShape::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6483)
inline enum XlCreator Excel::IShape::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6484)
inline IDispatchPtr Excel::IShape::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6485)
inline HRESULT Excel::IShape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6486)
inline HRESULT Excel::IShape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6487)
inline Excel::ShapePtr Excel::IShape::Duplicate ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6488)
inline HRESULT Excel::IShape::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6489)
inline HRESULT Excel::IShape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6490)
inline HRESULT Excel::IShape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6491)
inline HRESULT Excel::IShape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6492)
inline HRESULT Excel::IShape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6493)
inline HRESULT Excel::IShape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6494)
inline HRESULT Excel::IShape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6495)
inline HRESULT Excel::IShape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6496)
inline HRESULT Excel::IShape::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6497)
inline HRESULT Excel::IShape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6498)
inline Excel::ShapeRangePtr Excel::IShape::Ungroup ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(6499)
inline HRESULT Excel::IShape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6500)
inline Excel::AdjustmentsPtr Excel::IShape::GetAdjustments ( ) {
    struct Adjustments * _result;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(6501)
inline Excel::TextFramePtr Excel::IShape::GetTextFrame ( ) {
    struct TextFrame * _result;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(6502)
inline enum Office::MsoAutoShapeType Excel::IShape::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6503)
inline void Excel::IShape::PutAutoShapeType ( enum Office::MsoAutoShapeType RHS ) {
    HRESULT _hr = put_AutoShapeType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6504)
inline Excel::CalloutFormatPtr Excel::IShape::GetCallout ( ) {
    struct CalloutFormat * _result;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(6505)
inline long Excel::IShape::GetConnectionSiteCount ( ) {
    long _result;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6506)
inline enum Office::MsoTriState Excel::IShape::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6507)
inline Excel::ConnectorFormatPtr Excel::IShape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(6508)
inline Excel::FillFormatPtr Excel::IShape::GetFill ( ) {
    struct FillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(6509)
inline Excel::GroupShapesPtr Excel::IShape::GetGroupItems ( ) {
    struct GroupShapes * _result;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(6510)
inline float Excel::IShape::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6511)
inline void Excel::IShape::PutHeight ( float RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6512)
inline enum Office::MsoTriState Excel::IShape::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6513)
inline float Excel::IShape::GetLeft ( ) {
    float _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6514)
inline void Excel::IShape::PutLeft ( float RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6515)
inline Excel::LineFormatPtr Excel::IShape::GetLine ( ) {
    struct LineFormat * _result;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(6516)
inline enum Office::MsoTriState Excel::IShape::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6517)
inline void Excel::IShape::PutLockAspectRatio ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_LockAspectRatio(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6518)
inline _bstr_t Excel::IShape::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6519)
inline void Excel::IShape::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6520)
inline Excel::ShapeNodesPtr Excel::IShape::GetNodes ( ) {
    struct ShapeNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(6521)
inline float Excel::IShape::GetRotation ( ) {
    float _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6522)
inline void Excel::IShape::PutRotation ( float RHS ) {
    HRESULT _hr = put_Rotation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6523)
inline Excel::PictureFormatPtr Excel::IShape::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(6524)
inline Excel::ShadowFormatPtr Excel::IShape::GetShadow ( ) {
    struct ShadowFormat * _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(6525)
inline Excel::TextEffectFormatPtr Excel::IShape::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(6526)
inline Excel::ThreeDFormatPtr Excel::IShape::GetThreeD ( ) {
    struct ThreeDFormat * _result;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(6527)
inline float Excel::IShape::GetTop ( ) {
    float _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6528)
inline void Excel::IShape::PutTop ( float RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6529)
inline enum Office::MsoShapeType Excel::IShape::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6530)
inline enum Office::MsoTriState Excel::IShape::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6531)
inline _variant_t Excel::IShape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6532)
inline enum Office::MsoTriState Excel::IShape::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6533)
inline void Excel::IShape::PutVisible ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6534)
inline float Excel::IShape::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6535)
inline void Excel::IShape::PutWidth ( float RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6536)
inline long Excel::IShape::GetZOrderPosition ( ) {
    long _result;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6537)
inline Excel::HyperlinkPtr Excel::IShape::GetHyperlink ( ) {
    struct Hyperlink * _result;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(6538)
inline enum Office::MsoBlackWhiteMode Excel::IShape::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6539)
inline void Excel::IShape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode RHS ) {
    HRESULT _hr = put_BlackWhiteMode(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6540)
inline IDispatchPtr Excel::IShape::GetDrawingObject ( ) {
    IDispatch * _result;
    HRESULT _hr = get_DrawingObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6541)
inline _bstr_t Excel::IShape::GetOnAction ( ) {
    BSTR _result;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6542)
inline void Excel::IShape::PutOnAction ( _bstr_t RHS ) {
    HRESULT _hr = put_OnAction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6543)
inline VARIANT_BOOL Excel::IShape::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6544)
inline void Excel::IShape::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6545)
inline Excel::RangePtr Excel::IShape::GetTopLeftCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_TopLeftCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(6546)
inline Excel::RangePtr Excel::IShape::GetBottomRightCell ( ) {
    struct Range * _result;
    HRESULT _hr = get_BottomRightCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(6547)
inline enum XlPlacement Excel::IShape::GetPlacement ( ) {
    enum XlPlacement _result;
    HRESULT _hr = get_Placement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6548)
inline void Excel::IShape::PutPlacement ( enum XlPlacement RHS ) {
    HRESULT _hr = put_Placement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6549)
inline HRESULT Excel::IShape::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6550)
inline HRESULT Excel::IShape::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6551)
inline HRESULT Excel::IShape::CopyPicture ( const _variant_t & Appearance, const _variant_t & Format ) {
    HRESULT _hr = raw_CopyPicture(Appearance, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6552)
inline Excel::ControlFormatPtr Excel::IShape::GetControlFormat ( ) {
    struct ControlFormat * _result;
    HRESULT _hr = get_ControlFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ControlFormatPtr(_result, false);
}

#pragma implementation_key(6553)
inline Excel::LinkFormatPtr Excel::IShape::GetLinkFormat ( ) {
    struct LinkFormat * _result;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(6554)
inline Excel::OLEFormatPtr Excel::IShape::GetOLEFormat ( ) {
    struct OLEFormat * _result;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(6555)
inline enum XlFormControl Excel::IShape::GetFormControlType ( ) {
    enum XlFormControl _result;
    HRESULT _hr = get_FormControlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6556)
inline _bstr_t Excel::IShape::GetAlternativeText ( ) {
    BSTR _result;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6557)
inline void Excel::IShape::PutAlternativeText ( _bstr_t RHS ) {
    HRESULT _hr = put_AlternativeText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6558)
inline Office::ScriptPtr Excel::IShape::GetScript ( ) {
    struct Office::Script * _result;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptPtr(_result, false);
}

#pragma implementation_key(6559)
inline Excel::DiagramNodePtr Excel::IShape::GetDiagramNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(6560)
inline enum Office::MsoTriState Excel::IShape::GetHasDiagramNode ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6561)
inline Excel::DiagramPtr Excel::IShape::GetDiagram ( ) {
    struct Diagram * _result;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

#pragma implementation_key(6562)
inline enum Office::MsoTriState Excel::IShape::GetHasDiagram ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6563)
inline enum Office::MsoTriState Excel::IShape::GetChild ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6564)
inline Excel::ShapePtr Excel::IShape::GetParentGroup ( ) {
    struct Shape * _result;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6565)
inline Office::CanvasShapesPtr Excel::IShape::GetCanvasItems ( ) {
    struct Office::CanvasShapes * _result;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::CanvasShapesPtr(_result, false);
}

#pragma implementation_key(6566)
inline long Excel::IShape::GetID ( ) {
    long _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6567)
inline HRESULT Excel::IShape::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6568)
inline HRESULT Excel::IShape::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6569)
inline HRESULT Excel::IShape::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6570)
inline HRESULT Excel::IShape::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IShapes wrapper method implementations
//

#pragma implementation_key(6571)
inline Excel::_ApplicationPtr Excel::IShapes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6572)
inline enum XlCreator Excel::IShapes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6573)
inline IDispatchPtr Excel::IShapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6574)
inline long Excel::IShapes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6575)
inline Excel::ShapePtr Excel::IShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6576)
inline Excel::ShapePtr Excel::IShapes::_Default ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6577)
inline IUnknownPtr Excel::IShapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6578)
inline Excel::ShapePtr Excel::IShapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6579)
inline Excel::ShapePtr Excel::IShapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6580)
inline Excel::ShapePtr Excel::IShapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6581)
inline Excel::ShapePtr Excel::IShapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6582)
inline Excel::ShapePtr Excel::IShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6583)
inline Excel::ShapePtr Excel::IShapes::AddPicture ( _bstr_t Filename, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPicture(Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6584)
inline Excel::ShapePtr Excel::IShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6585)
inline Excel::ShapePtr Excel::IShapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6586)
inline Excel::ShapePtr Excel::IShapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6587)
inline Excel::ShapePtr Excel::IShapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6588)
inline Excel::FreeformBuilderPtr Excel::IShapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(6589)
inline Excel::ShapeRangePtr Excel::IShapes::GetRange ( const _variant_t & Index ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(6590)
inline HRESULT Excel::IShapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6591)
inline Excel::ShapePtr Excel::IShapes::AddFormControl ( enum XlFormControl Type, long Left, long Top, long Width, long Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddFormControl(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6592)
inline Excel::ShapePtr Excel::IShapes::AddOLEObject ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddOLEObject(ClassType, Filename, Link, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6593)
inline Excel::ShapePtr Excel::IShapes::AddDiagram ( enum Office::MsoDiagramType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddDiagram(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6594)
inline Excel::ShapePtr Excel::IShapes::AddCanvas ( float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCanvas(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface IShapeRange wrapper method implementations
//

#pragma implementation_key(6595)
inline Excel::_ApplicationPtr Excel::IShapeRange::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6596)
inline enum XlCreator Excel::IShapeRange::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6597)
inline IDispatchPtr Excel::IShapeRange::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6598)
inline long Excel::IShapeRange::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6599)
inline Excel::ShapePtr Excel::IShapeRange::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6600)
inline Excel::ShapePtr Excel::IShapeRange::_Default ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6601)
inline IUnknownPtr Excel::IShapeRange::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6602)
inline HRESULT Excel::IShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Align(AlignCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6603)
inline HRESULT Excel::IShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6604)
inline HRESULT Excel::IShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6605)
inline HRESULT Excel::IShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Distribute(DistributeCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6606)
inline Excel::ShapeRangePtr Excel::IShapeRange::Duplicate ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(6607)
inline HRESULT Excel::IShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6608)
inline HRESULT Excel::IShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6609)
inline HRESULT Excel::IShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6610)
inline HRESULT Excel::IShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6611)
inline Excel::ShapePtr Excel::IShapeRange::Group ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6612)
inline HRESULT Excel::IShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6613)
inline HRESULT Excel::IShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6614)
inline Excel::ShapePtr Excel::IShapeRange::Regroup ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6615)
inline HRESULT Excel::IShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6616)
inline HRESULT Excel::IShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6617)
inline HRESULT Excel::IShapeRange::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6618)
inline HRESULT Excel::IShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6619)
inline Excel::ShapeRangePtr Excel::IShapeRange::Ungroup ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(6620)
inline HRESULT Excel::IShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6621)
inline Excel::AdjustmentsPtr Excel::IShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(6622)
inline Excel::TextFramePtr Excel::IShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(6623)
inline enum Office::MsoAutoShapeType Excel::IShapeRange::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6624)
inline void Excel::IShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType RHS ) {
    HRESULT _hr = put_AutoShapeType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6625)
inline Excel::CalloutFormatPtr Excel::IShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(6626)
inline long Excel::IShapeRange::GetConnectionSiteCount ( ) {
    long _result;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6627)
inline enum Office::MsoTriState Excel::IShapeRange::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6628)
inline Excel::ConnectorFormatPtr Excel::IShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(6629)
inline Excel::FillFormatPtr Excel::IShapeRange::GetFill ( ) {
    struct FillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(6630)
inline Excel::GroupShapesPtr Excel::IShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(6631)
inline float Excel::IShapeRange::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6632)
inline void Excel::IShapeRange::PutHeight ( float RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6633)
inline enum Office::MsoTriState Excel::IShapeRange::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6634)
inline float Excel::IShapeRange::GetLeft ( ) {
    float _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6635)
inline void Excel::IShapeRange::PutLeft ( float RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6636)
inline Excel::LineFormatPtr Excel::IShapeRange::GetLine ( ) {
    struct LineFormat * _result;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(6637)
inline enum Office::MsoTriState Excel::IShapeRange::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6638)
inline void Excel::IShapeRange::PutLockAspectRatio ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_LockAspectRatio(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6639)
inline _bstr_t Excel::IShapeRange::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6640)
inline void Excel::IShapeRange::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6641)
inline Excel::ShapeNodesPtr Excel::IShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(6642)
inline float Excel::IShapeRange::GetRotation ( ) {
    float _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6643)
inline void Excel::IShapeRange::PutRotation ( float RHS ) {
    HRESULT _hr = put_Rotation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6644)
inline Excel::PictureFormatPtr Excel::IShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(6645)
inline Excel::ShadowFormatPtr Excel::IShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(6646)
inline Excel::TextEffectFormatPtr Excel::IShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(6647)
inline Excel::ThreeDFormatPtr Excel::IShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(6648)
inline float Excel::IShapeRange::GetTop ( ) {
    float _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6649)
inline void Excel::IShapeRange::PutTop ( float RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6650)
inline enum Office::MsoShapeType Excel::IShapeRange::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6651)
inline enum Office::MsoTriState Excel::IShapeRange::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6652)
inline _variant_t Excel::IShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6653)
inline enum Office::MsoTriState Excel::IShapeRange::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6654)
inline void Excel::IShapeRange::PutVisible ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6655)
inline float Excel::IShapeRange::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6656)
inline void Excel::IShapeRange::PutWidth ( float RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6657)
inline long Excel::IShapeRange::GetZOrderPosition ( ) {
    long _result;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6658)
inline enum Office::MsoBlackWhiteMode Excel::IShapeRange::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6659)
inline void Excel::IShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode RHS ) {
    HRESULT _hr = put_BlackWhiteMode(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6660)
inline _bstr_t Excel::IShapeRange::GetAlternativeText ( ) {
    BSTR _result;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6661)
inline void Excel::IShapeRange::PutAlternativeText ( _bstr_t RHS ) {
    HRESULT _hr = put_AlternativeText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6662)
inline Excel::DiagramNodePtr Excel::IShapeRange::GetDiagramNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(6663)
inline enum Office::MsoTriState Excel::IShapeRange::GetHasDiagramNode ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6664)
inline Excel::DiagramPtr Excel::IShapeRange::GetDiagram ( ) {
    struct Diagram * _result;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

#pragma implementation_key(6665)
inline enum Office::MsoTriState Excel::IShapeRange::GetHasDiagram ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6666)
inline enum Office::MsoTriState Excel::IShapeRange::GetChild ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6667)
inline Excel::ShapePtr Excel::IShapeRange::GetParentGroup ( ) {
    struct Shape * _result;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6668)
inline Office::CanvasShapesPtr Excel::IShapeRange::GetCanvasItems ( ) {
    struct Office::CanvasShapes * _result;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::CanvasShapesPtr(_result, false);
}

#pragma implementation_key(6669)
inline long Excel::IShapeRange::GetID ( ) {
    long _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6670)
inline HRESULT Excel::IShapeRange::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6671)
inline HRESULT Excel::IShapeRange::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6672)
inline HRESULT Excel::IShapeRange::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6673)
inline HRESULT Excel::IShapeRange::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGroupShapes wrapper method implementations
//

#pragma implementation_key(6674)
inline Excel::_ApplicationPtr Excel::IGroupShapes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6675)
inline enum XlCreator Excel::IGroupShapes::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6676)
inline IDispatchPtr Excel::IGroupShapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6677)
inline long Excel::IGroupShapes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6678)
inline Excel::ShapePtr Excel::IGroupShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6679)
inline Excel::ShapePtr Excel::IGroupShapes::_Default ( const _variant_t & Index ) {
    struct Shape * _result;
    HRESULT _hr = raw__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6680)
inline IUnknownPtr Excel::IGroupShapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6681)
inline Excel::ShapeRangePtr Excel::IGroupShapes::GetRange ( const _variant_t & Index ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

//
// interface ITextFrame wrapper method implementations
//

#pragma implementation_key(6682)
inline Excel::_ApplicationPtr Excel::ITextFrame::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6683)
inline enum XlCreator Excel::ITextFrame::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6684)
inline IDispatchPtr Excel::ITextFrame::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6685)
inline float Excel::ITextFrame::GetMarginBottom ( ) {
    float _result;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6686)
inline void Excel::ITextFrame::PutMarginBottom ( float RHS ) {
    HRESULT _hr = put_MarginBottom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6687)
inline float Excel::ITextFrame::GetMarginLeft ( ) {
    float _result;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6688)
inline void Excel::ITextFrame::PutMarginLeft ( float RHS ) {
    HRESULT _hr = put_MarginLeft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6689)
inline float Excel::ITextFrame::GetMarginRight ( ) {
    float _result;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6690)
inline void Excel::ITextFrame::PutMarginRight ( float RHS ) {
    HRESULT _hr = put_MarginRight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6691)
inline float Excel::ITextFrame::GetMarginTop ( ) {
    float _result;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6692)
inline void Excel::ITextFrame::PutMarginTop ( float RHS ) {
    HRESULT _hr = put_MarginTop(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6693)
inline enum Office::MsoTextOrientation Excel::ITextFrame::GetOrientation ( ) {
    enum Office::MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6694)
inline void Excel::ITextFrame::PutOrientation ( enum Office::MsoTextOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6695)
inline Excel::CharactersPtr Excel::ITextFrame::Characters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = raw_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(6696)
inline enum XlHAlign Excel::ITextFrame::GetHorizontalAlignment ( ) {
    enum XlHAlign _result;
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6697)
inline void Excel::ITextFrame::PutHorizontalAlignment ( enum XlHAlign RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6698)
inline enum XlVAlign Excel::ITextFrame::GetVerticalAlignment ( ) {
    enum XlVAlign _result;
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6699)
inline void Excel::ITextFrame::PutVerticalAlignment ( enum XlVAlign RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6700)
inline VARIANT_BOOL Excel::ITextFrame::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6701)
inline void Excel::ITextFrame::PutAutoSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6702)
inline long Excel::ITextFrame::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6703)
inline void Excel::ITextFrame::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6704)
inline VARIANT_BOOL Excel::ITextFrame::GetAutoMargins ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6705)
inline void Excel::ITextFrame::PutAutoMargins ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoMargins(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IConnectorFormat wrapper method implementations
//

#pragma implementation_key(6706)
inline Excel::_ApplicationPtr Excel::IConnectorFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6707)
inline enum XlCreator Excel::IConnectorFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6708)
inline IDispatchPtr Excel::IConnectorFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6709)
inline HRESULT Excel::IConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, long ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6710)
inline HRESULT Excel::IConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6711)
inline HRESULT Excel::IConnectorFormat::EndConnect ( struct Shape * ConnectedShape, long ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6712)
inline HRESULT Excel::IConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6713)
inline enum Office::MsoTriState Excel::IConnectorFormat::GetBeginConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6714)
inline Excel::ShapePtr Excel::IConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6715)
inline long Excel::IConnectorFormat::GetBeginConnectionSite ( ) {
    long _result;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6716)
inline enum Office::MsoTriState Excel::IConnectorFormat::GetEndConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6717)
inline Excel::ShapePtr Excel::IConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(6718)
inline long Excel::IConnectorFormat::GetEndConnectionSite ( ) {
    long _result;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6719)
inline enum Office::MsoConnectorType Excel::IConnectorFormat::GetType ( ) {
    enum Office::MsoConnectorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6720)
inline void Excel::IConnectorFormat::PutType ( enum Office::MsoConnectorType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFreeformBuilder wrapper method implementations
//

#pragma implementation_key(6721)
inline Excel::_ApplicationPtr Excel::IFreeformBuilder::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6722)
inline enum XlCreator Excel::IFreeformBuilder::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6723)
inline IDispatchPtr Excel::IFreeformBuilder::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6724)
inline HRESULT Excel::IFreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, const _variant_t & X2, const _variant_t & Y2, const _variant_t & X3, const _variant_t & Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6725)
inline Excel::ShapePtr Excel::IFreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface IControlFormat wrapper method implementations
//

#pragma implementation_key(6726)
inline Excel::_ApplicationPtr Excel::IControlFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6727)
inline enum XlCreator Excel::IControlFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6728)
inline IDispatchPtr Excel::IControlFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6729)
inline HRESULT Excel::IControlFormat::AddItem ( _bstr_t Text, const _variant_t & Index ) {
    HRESULT _hr = raw_AddItem(Text, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6730)
inline HRESULT Excel::IControlFormat::RemoveAllItems ( ) {
    HRESULT _hr = raw_RemoveAllItems();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6731)
inline HRESULT Excel::IControlFormat::RemoveItem ( long Index, const _variant_t & Count ) {
    HRESULT _hr = raw_RemoveItem(Index, Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6732)
inline long Excel::IControlFormat::GetDropDownLines ( ) {
    long _result;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6733)
inline void Excel::IControlFormat::PutDropDownLines ( long RHS ) {
    HRESULT _hr = put_DropDownLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6734)
inline VARIANT_BOOL Excel::IControlFormat::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6735)
inline void Excel::IControlFormat::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6736)
inline long Excel::IControlFormat::GetLargeChange ( ) {
    long _result;
    HRESULT _hr = get_LargeChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6737)
inline void Excel::IControlFormat::PutLargeChange ( long RHS ) {
    HRESULT _hr = put_LargeChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6738)
inline _bstr_t Excel::IControlFormat::GetLinkedCell ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6739)
inline void Excel::IControlFormat::PutLinkedCell ( _bstr_t RHS ) {
    HRESULT _hr = put_LinkedCell(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6740)
inline _variant_t Excel::IControlFormat::List ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6741)
inline long Excel::IControlFormat::GetListCount ( ) {
    long _result;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6742)
inline void Excel::IControlFormat::PutListCount ( long RHS ) {
    HRESULT _hr = put_ListCount(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6743)
inline _bstr_t Excel::IControlFormat::GetListFillRange ( ) {
    BSTR _result;
    HRESULT _hr = get_ListFillRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6744)
inline void Excel::IControlFormat::PutListFillRange ( _bstr_t RHS ) {
    HRESULT _hr = put_ListFillRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6745)
inline long Excel::IControlFormat::GetListIndex ( ) {
    long _result;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6746)
inline void Excel::IControlFormat::PutListIndex ( long RHS ) {
    HRESULT _hr = put_ListIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6747)
inline VARIANT_BOOL Excel::IControlFormat::GetLockedText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6748)
inline void Excel::IControlFormat::PutLockedText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LockedText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6749)
inline long Excel::IControlFormat::GetMax ( ) {
    long _result;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6750)
inline void Excel::IControlFormat::PutMax ( long RHS ) {
    HRESULT _hr = put_Max(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6751)
inline long Excel::IControlFormat::GetMin ( ) {
    long _result;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6752)
inline void Excel::IControlFormat::PutMin ( long RHS ) {
    HRESULT _hr = put_Min(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6753)
inline long Excel::IControlFormat::GetMultiSelect ( ) {
    long _result;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6754)
inline void Excel::IControlFormat::PutMultiSelect ( long RHS ) {
    HRESULT _hr = put_MultiSelect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6755)
inline VARIANT_BOOL Excel::IControlFormat::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6756)
inline void Excel::IControlFormat::PutPrintObject ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PrintObject(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6757)
inline long Excel::IControlFormat::GetSmallChange ( ) {
    long _result;
    HRESULT _hr = get_SmallChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6758)
inline void Excel::IControlFormat::PutSmallChange ( long RHS ) {
    HRESULT _hr = put_SmallChange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6759)
inline long Excel::IControlFormat::Get_Default ( ) {
    long _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6760)
inline void Excel::IControlFormat::Put_Default ( long RHS ) {
    HRESULT _hr = put__Default(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6761)
inline long Excel::IControlFormat::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6762)
inline void Excel::IControlFormat::PutValue ( long RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOLEFormat wrapper method implementations
//

#pragma implementation_key(6763)
inline Excel::_ApplicationPtr Excel::IOLEFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6764)
inline enum XlCreator Excel::IOLEFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6765)
inline IDispatchPtr Excel::IOLEFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6766)
inline HRESULT Excel::IOLEFormat::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6767)
inline IDispatchPtr Excel::IOLEFormat::GetObject ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6768)
inline _bstr_t Excel::IOLEFormat::GetprogID ( ) {
    BSTR _result;
    HRESULT _hr = get_progID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6769)
inline HRESULT Excel::IOLEFormat::Verb ( const _variant_t & Verb ) {
    HRESULT _hr = raw_Verb(Verb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ILinkFormat wrapper method implementations
//

#pragma implementation_key(6770)
inline Excel::_ApplicationPtr Excel::ILinkFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6771)
inline enum XlCreator Excel::ILinkFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6772)
inline IDispatchPtr Excel::ILinkFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6773)
inline VARIANT_BOOL Excel::ILinkFormat::GetAutoUpdate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6774)
inline void Excel::ILinkFormat::PutAutoUpdate ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoUpdate(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6775)
inline VARIANT_BOOL Excel::ILinkFormat::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6776)
inline void Excel::ILinkFormat::PutLocked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6777)
inline HRESULT Excel::ILinkFormat::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPublishObjects wrapper method implementations
//

#pragma implementation_key(6778)
inline Excel::_ApplicationPtr Excel::IPublishObjects::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6779)
inline enum XlCreator Excel::IPublishObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6780)
inline IDispatchPtr Excel::IPublishObjects::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6781)
inline Excel::PublishObjectPtr Excel::IPublishObjects::Add ( enum XlSourceType SourceType, _bstr_t Filename, const _variant_t & Sheet, const _variant_t & Source, const _variant_t & HtmlType, const _variant_t & DivID, const _variant_t & Title ) {
    struct PublishObject * _result;
    HRESULT _hr = raw_Add(SourceType, Filename, Sheet, Source, HtmlType, DivID, Title, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectPtr(_result, false);
}

#pragma implementation_key(6782)
inline long Excel::IPublishObjects::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6783)
inline Excel::PublishObjectPtr Excel::IPublishObjects::GetItem ( const _variant_t & Index ) {
    struct PublishObject * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectPtr(_result, false);
}

#pragma implementation_key(6784)
inline Excel::PublishObjectPtr Excel::IPublishObjects::Get_Default ( const _variant_t & Index ) {
    struct PublishObject * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectPtr(_result, false);
}

#pragma implementation_key(6785)
inline IUnknownPtr Excel::IPublishObjects::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6786)
inline HRESULT Excel::IPublishObjects::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6787)
inline HRESULT Excel::IPublishObjects::Publish ( ) {
    HRESULT _hr = raw_Publish();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PublishObject wrapper method implementations
//

#pragma implementation_key(6788)
inline Excel::_ApplicationPtr Excel::PublishObject::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6789)
inline enum XlCreator Excel::PublishObject::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6790)
inline IDispatchPtr Excel::PublishObject::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6791)
inline HRESULT Excel::PublishObject::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6792)
inline HRESULT Excel::PublishObject::Publish ( const _variant_t & Create ) {
    HRESULT _hr = raw_Publish(Create);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6793)
inline _bstr_t Excel::PublishObject::GetDivID ( ) {
    BSTR _result;
    HRESULT _hr = get_DivID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6794)
inline _bstr_t Excel::PublishObject::GetSheet ( ) {
    BSTR _result;
    HRESULT _hr = get_Sheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6795)
inline enum XlSourceType Excel::PublishObject::GetSourceType ( ) {
    enum XlSourceType _result;
    HRESULT _hr = get_SourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6796)
inline _bstr_t Excel::PublishObject::GetSource ( ) {
    BSTR _result;
    HRESULT _hr = get_Source(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6797)
inline enum XlHtmlType Excel::PublishObject::GetHtmlType ( ) {
    enum XlHtmlType _result;
    HRESULT _hr = get_HtmlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6798)
inline void Excel::PublishObject::PutHtmlType ( enum XlHtmlType RHS ) {
    HRESULT _hr = put_HtmlType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6799)
inline _bstr_t Excel::PublishObject::GetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6800)
inline void Excel::PublishObject::PutTitle ( _bstr_t RHS ) {
    HRESULT _hr = put_Title(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6801)
inline _bstr_t Excel::PublishObject::GetFilename ( ) {
    BSTR _result;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6802)
inline void Excel::PublishObject::PutFilename ( _bstr_t RHS ) {
    HRESULT _hr = put_Filename(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6803)
inline VARIANT_BOOL Excel::PublishObject::GetAutoRepublish ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoRepublish(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6804)
inline void Excel::PublishObject::PutAutoRepublish ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoRepublish(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOLEDBError wrapper method implementations
//

#pragma implementation_key(6805)
inline Excel::_ApplicationPtr Excel::IOLEDBError::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6806)
inline enum XlCreator Excel::IOLEDBError::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6807)
inline IDispatchPtr Excel::IOLEDBError::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6808)
inline _bstr_t Excel::IOLEDBError::GetSqlState ( ) {
    BSTR _result;
    HRESULT _hr = get_SqlState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6809)
inline _bstr_t Excel::IOLEDBError::GetErrorString ( ) {
    BSTR _result;
    HRESULT _hr = get_ErrorString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6810)
inline long Excel::IOLEDBError::GetNative ( ) {
    long _result;
    HRESULT _hr = get_Native(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6811)
inline long Excel::IOLEDBError::GetNumber ( ) {
    long _result;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6812)
inline long Excel::IOLEDBError::GetStage ( ) {
    long _result;
    HRESULT _hr = get_Stage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IOLEDBErrors wrapper method implementations
//

#pragma implementation_key(6813)
inline Excel::_ApplicationPtr Excel::IOLEDBErrors::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6814)
inline enum XlCreator Excel::IOLEDBErrors::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6815)
inline IDispatchPtr Excel::IOLEDBErrors::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6816)
inline long Excel::IOLEDBErrors::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6817)
inline Excel::OLEDBErrorPtr Excel::IOLEDBErrors::Item ( long Index ) {
    struct OLEDBError * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEDBErrorPtr(_result, false);
}

#pragma implementation_key(6818)
inline Excel::OLEDBErrorPtr Excel::IOLEDBErrors::Get_Default ( long Index ) {
    struct OLEDBError * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEDBErrorPtr(_result, false);
}

#pragma implementation_key(6819)
inline IUnknownPtr Excel::IOLEDBErrors::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IPhonetics wrapper method implementations
//

#pragma implementation_key(6820)
inline Excel::_ApplicationPtr Excel::IPhonetics::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6821)
inline enum XlCreator Excel::IPhonetics::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6822)
inline IDispatchPtr Excel::IPhonetics::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6823)
inline long Excel::IPhonetics::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6824)
inline long Excel::IPhonetics::GetStart ( ) {
    long _result;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6825)
inline long Excel::IPhonetics::GetLength ( ) {
    long _result;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6826)
inline VARIANT_BOOL Excel::IPhonetics::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6827)
inline void Excel::IPhonetics::PutVisible ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Visible(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6828)
inline long Excel::IPhonetics::GetCharacterType ( ) {
    long _result;
    HRESULT _hr = get_CharacterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6829)
inline void Excel::IPhonetics::PutCharacterType ( long RHS ) {
    HRESULT _hr = put_CharacterType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6830)
inline long Excel::IPhonetics::GetAlignment ( ) {
    long _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6831)
inline void Excel::IPhonetics::PutAlignment ( long RHS ) {
    HRESULT _hr = put_Alignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6832)
inline Excel::FontPtr Excel::IPhonetics::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(6833)
inline IDispatchPtr Excel::IPhonetics::GetItem ( long Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6834)
inline HRESULT Excel::IPhonetics::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6835)
inline HRESULT Excel::IPhonetics::Add ( long Start, long Length, _bstr_t Text ) {
    HRESULT _hr = raw_Add(Start, Length, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6836)
inline _bstr_t Excel::IPhonetics::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6837)
inline void Excel::IPhonetics::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6838)
inline IDispatchPtr Excel::IPhonetics::Get_Default ( long Index ) {
    IDispatch * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6839)
inline IUnknownPtr Excel::IPhonetics::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface DefaultWebOptions wrapper method implementations
//

#pragma implementation_key(6840)
inline Excel::_ApplicationPtr Excel::DefaultWebOptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6841)
inline enum XlCreator Excel::DefaultWebOptions::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6842)
inline IDispatchPtr Excel::DefaultWebOptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6843)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetRelyOnCSS ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RelyOnCSS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6844)
inline void Excel::DefaultWebOptions::PutRelyOnCSS ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RelyOnCSS(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6845)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetSaveHiddenData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SaveHiddenData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6846)
inline void Excel::DefaultWebOptions::PutSaveHiddenData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SaveHiddenData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6847)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetLoadPictures ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LoadPictures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6848)
inline void Excel::DefaultWebOptions::PutLoadPictures ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_LoadPictures(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6849)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetOrganizeInFolder ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6850)
inline void Excel::DefaultWebOptions::PutOrganizeInFolder ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_OrganizeInFolder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6851)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetUpdateLinksOnSave ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UpdateLinksOnSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6852)
inline void Excel::DefaultWebOptions::PutUpdateLinksOnSave ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UpdateLinksOnSave(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6853)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetUseLongFileNames ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6854)
inline void Excel::DefaultWebOptions::PutUseLongFileNames ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UseLongFileNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6855)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CheckIfOfficeIsHTMLEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6856)
inline void Excel::DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_CheckIfOfficeIsHTMLEditor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6857)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetDownloadComponents ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DownloadComponents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6858)
inline void Excel::DefaultWebOptions::PutDownloadComponents ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DownloadComponents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6859)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetRelyOnVML ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6860)
inline void Excel::DefaultWebOptions::PutRelyOnVML ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RelyOnVML(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6861)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetAllowPNG ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6862)
inline void Excel::DefaultWebOptions::PutAllowPNG ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AllowPNG(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6863)
inline enum Office::MsoScreenSize Excel::DefaultWebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6864)
inline void Excel::DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize RHS ) {
    HRESULT _hr = put_ScreenSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6865)
inline long Excel::DefaultWebOptions::GetPixelsPerInch ( ) {
    long _result;
    HRESULT _hr = get_PixelsPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6866)
inline void Excel::DefaultWebOptions::PutPixelsPerInch ( long RHS ) {
    HRESULT _hr = put_PixelsPerInch(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6867)
inline _bstr_t Excel::DefaultWebOptions::GetLocationOfComponents ( ) {
    BSTR _result;
    HRESULT _hr = get_LocationOfComponents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6868)
inline void Excel::DefaultWebOptions::PutLocationOfComponents ( _bstr_t RHS ) {
    HRESULT _hr = put_LocationOfComponents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6869)
inline enum Office::MsoEncoding Excel::DefaultWebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6870)
inline void Excel::DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding RHS ) {
    HRESULT _hr = put_Encoding(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6871)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AlwaysSaveInDefaultEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6872)
inline void Excel::DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AlwaysSaveInDefaultEncoding(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6873)
inline Office::WebPageFontsPtr Excel::DefaultWebOptions::GetFonts ( ) {
    struct Office::WebPageFonts * _result;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::WebPageFontsPtr(_result, false);
}

#pragma implementation_key(6874)
inline _bstr_t Excel::DefaultWebOptions::GetFolderSuffix ( ) {
    BSTR _result;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6875)
inline enum Office::MsoTargetBrowser Excel::DefaultWebOptions::GetTargetBrowser ( ) {
    enum Office::MsoTargetBrowser _result;
    HRESULT _hr = get_TargetBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6876)
inline void Excel::DefaultWebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser RHS ) {
    HRESULT _hr = put_TargetBrowser(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6877)
inline VARIANT_BOOL Excel::DefaultWebOptions::GetSaveNewWebPagesAsWebArchives ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SaveNewWebPagesAsWebArchives(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6878)
inline void Excel::DefaultWebOptions::PutSaveNewWebPagesAsWebArchives ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SaveNewWebPagesAsWebArchives(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface WebOptions wrapper method implementations
//

#pragma implementation_key(6879)
inline Excel::_ApplicationPtr Excel::WebOptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6880)
inline enum XlCreator Excel::WebOptions::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6881)
inline IDispatchPtr Excel::WebOptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6882)
inline VARIANT_BOOL Excel::WebOptions::GetRelyOnCSS ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RelyOnCSS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6883)
inline void Excel::WebOptions::PutRelyOnCSS ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RelyOnCSS(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6884)
inline VARIANT_BOOL Excel::WebOptions::GetOrganizeInFolder ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6885)
inline void Excel::WebOptions::PutOrganizeInFolder ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_OrganizeInFolder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6886)
inline VARIANT_BOOL Excel::WebOptions::GetUseLongFileNames ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6887)
inline void Excel::WebOptions::PutUseLongFileNames ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UseLongFileNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6888)
inline VARIANT_BOOL Excel::WebOptions::GetDownloadComponents ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DownloadComponents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6889)
inline void Excel::WebOptions::PutDownloadComponents ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DownloadComponents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6890)
inline VARIANT_BOOL Excel::WebOptions::GetRelyOnVML ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6891)
inline void Excel::WebOptions::PutRelyOnVML ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_RelyOnVML(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6892)
inline VARIANT_BOOL Excel::WebOptions::GetAllowPNG ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6893)
inline void Excel::WebOptions::PutAllowPNG ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AllowPNG(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6894)
inline enum Office::MsoScreenSize Excel::WebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6895)
inline void Excel::WebOptions::PutScreenSize ( enum Office::MsoScreenSize RHS ) {
    HRESULT _hr = put_ScreenSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6896)
inline long Excel::WebOptions::GetPixelsPerInch ( ) {
    long _result;
    HRESULT _hr = get_PixelsPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6897)
inline void Excel::WebOptions::PutPixelsPerInch ( long RHS ) {
    HRESULT _hr = put_PixelsPerInch(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6898)
inline _bstr_t Excel::WebOptions::GetLocationOfComponents ( ) {
    BSTR _result;
    HRESULT _hr = get_LocationOfComponents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6899)
inline void Excel::WebOptions::PutLocationOfComponents ( _bstr_t RHS ) {
    HRESULT _hr = put_LocationOfComponents(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6900)
inline enum Office::MsoEncoding Excel::WebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6901)
inline void Excel::WebOptions::PutEncoding ( enum Office::MsoEncoding RHS ) {
    HRESULT _hr = put_Encoding(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6902)
inline _bstr_t Excel::WebOptions::GetFolderSuffix ( ) {
    BSTR _result;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6903)
inline HRESULT Excel::WebOptions::UseDefaultFolderSuffix ( ) {
    HRESULT _hr = raw_UseDefaultFolderSuffix();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6904)
inline enum Office::MsoTargetBrowser Excel::WebOptions::GetTargetBrowser ( ) {
    enum Office::MsoTargetBrowser _result;
    HRESULT _hr = get_TargetBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6905)
inline void Excel::WebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser RHS ) {
    HRESULT _hr = put_TargetBrowser(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPivotLayout wrapper method implementations
//

#pragma implementation_key(6906)
inline Excel::_ApplicationPtr Excel::IPivotLayout::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6907)
inline enum XlCreator Excel::IPivotLayout::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6908)
inline IDispatchPtr Excel::IPivotLayout::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6909)
inline IDispatchPtr Excel::IPivotLayout::GetColumnFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_ColumnFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6910)
inline IDispatchPtr Excel::IPivotLayout::GetDataFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_DataFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6911)
inline IDispatchPtr Excel::IPivotLayout::GetPageFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_PageFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6912)
inline IDispatchPtr Excel::IPivotLayout::GetRowFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_RowFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6913)
inline IDispatchPtr Excel::IPivotLayout::GetHiddenFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_HiddenFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6914)
inline IDispatchPtr Excel::IPivotLayout::GetVisibleFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_VisibleFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6915)
inline IDispatchPtr Excel::IPivotLayout::GetPivotFields ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_PivotFields(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6916)
inline Excel::CubeFieldsPtr Excel::IPivotLayout::GetCubeFields ( ) {
    struct CubeFields * _result;
    HRESULT _hr = get_CubeFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldsPtr(_result, false);
}

#pragma implementation_key(6917)
inline Excel::PivotCachePtr Excel::IPivotLayout::GetPivotCache ( ) {
    struct PivotCache * _result;
    HRESULT _hr = get_PivotCache(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotCachePtr(_result, false);
}

#pragma implementation_key(6918)
inline Excel::PivotTablePtr Excel::IPivotLayout::GetPivotTable ( ) {
    struct PivotTable * _result;
    HRESULT _hr = get_PivotTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(6919)
inline _bstr_t Excel::IPivotLayout::GetInnerDetail ( ) {
    BSTR _result;
    HRESULT _hr = get_InnerDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6920)
inline void Excel::IPivotLayout::PutInnerDetail ( _bstr_t RHS ) {
    HRESULT _hr = put_InnerDetail(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6921)
inline HRESULT Excel::IPivotLayout::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AppendField ) {
    HRESULT _hr = raw_AddFields(RowFields, ColumnFields, PageFields, AppendField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TreeviewControl wrapper method implementations
//

#pragma implementation_key(6922)
inline Excel::_ApplicationPtr Excel::TreeviewControl::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6923)
inline enum XlCreator Excel::TreeviewControl::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6924)
inline IDispatchPtr Excel::TreeviewControl::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6925)
inline _variant_t Excel::TreeviewControl::GetHidden ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6926)
inline void Excel::TreeviewControl::PutHidden ( const _variant_t & RHS ) {
    HRESULT _hr = put_Hidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6927)
inline _variant_t Excel::TreeviewControl::GetDrilled ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Drilled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6928)
inline void Excel::TreeviewControl::PutDrilled ( const _variant_t & RHS ) {
    HRESULT _hr = put_Drilled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CubeField wrapper method implementations
//

#pragma implementation_key(6929)
inline Excel::_ApplicationPtr Excel::CubeField::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6930)
inline enum XlCreator Excel::CubeField::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6931)
inline IDispatchPtr Excel::CubeField::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6932)
inline enum XlCubeFieldType Excel::CubeField::GetCubeFieldType ( ) {
    enum XlCubeFieldType _result;
    HRESULT _hr = get_CubeFieldType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6933)
inline _bstr_t Excel::CubeField::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6934)
inline _bstr_t Excel::CubeField::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6935)
inline _bstr_t Excel::CubeField::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6936)
inline enum XlPivotFieldOrientation Excel::CubeField::GetOrientation ( ) {
    enum XlPivotFieldOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6937)
inline void Excel::CubeField::PutOrientation ( enum XlPivotFieldOrientation RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6938)
inline long Excel::CubeField::GetPosition ( ) {
    long _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6939)
inline void Excel::CubeField::PutPosition ( long RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6940)
inline Excel::TreeviewControlPtr Excel::CubeField::GetTreeviewControl ( ) {
    struct TreeviewControl * _result;
    HRESULT _hr = get_TreeviewControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TreeviewControlPtr(_result, false);
}

#pragma implementation_key(6941)
inline VARIANT_BOOL Excel::CubeField::GetDragToColumn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DragToColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6942)
inline void Excel::CubeField::PutDragToColumn ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToColumn(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6943)
inline VARIANT_BOOL Excel::CubeField::GetDragToHide ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DragToHide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6944)
inline void Excel::CubeField::PutDragToHide ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToHide(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6945)
inline VARIANT_BOOL Excel::CubeField::GetDragToPage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DragToPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6946)
inline void Excel::CubeField::PutDragToPage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToPage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6947)
inline VARIANT_BOOL Excel::CubeField::GetDragToRow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DragToRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6948)
inline void Excel::CubeField::PutDragToRow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToRow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6949)
inline VARIANT_BOOL Excel::CubeField::GetDragToData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DragToData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6950)
inline void Excel::CubeField::PutDragToData ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DragToData(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6951)
inline long Excel::CubeField::GetHiddenLevels ( ) {
    long _result;
    HRESULT _hr = get_HiddenLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6952)
inline void Excel::CubeField::PutHiddenLevels ( long RHS ) {
    HRESULT _hr = put_HiddenLevels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6953)
inline VARIANT_BOOL Excel::CubeField::GetHasMemberProperties ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasMemberProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6954)
inline enum XlLayoutFormType Excel::CubeField::GetLayoutForm ( ) {
    enum XlLayoutFormType _result;
    HRESULT _hr = get_LayoutForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6955)
inline void Excel::CubeField::PutLayoutForm ( enum XlLayoutFormType RHS ) {
    HRESULT _hr = put_LayoutForm(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6956)
inline Excel::PivotFieldsPtr Excel::CubeField::GetPivotFields ( ) {
    struct PivotFields * _result;
    HRESULT _hr = get_PivotFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldsPtr(_result, false);
}

#pragma implementation_key(6957)
inline HRESULT Excel::CubeField::AddMemberPropertyField ( _bstr_t Property, const _variant_t & PropertyOrder ) {
    HRESULT _hr = raw_AddMemberPropertyField(Property, PropertyOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(6958)
inline VARIANT_BOOL Excel::CubeField::GetEnableMultiplePageItems ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableMultiplePageItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6959)
inline void Excel::CubeField::PutEnableMultiplePageItems ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EnableMultiplePageItems(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6960)
inline enum XlSubtototalLocationType Excel::CubeField::GetLayoutSubtotalLocation ( ) {
    enum XlSubtototalLocationType _result;
    HRESULT _hr = get_LayoutSubtotalLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6961)
inline void Excel::CubeField::PutLayoutSubtotalLocation ( enum XlSubtototalLocationType RHS ) {
    HRESULT _hr = put_LayoutSubtotalLocation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6962)
inline VARIANT_BOOL Excel::CubeField::GetShowInFieldList ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowInFieldList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6963)
inline void Excel::CubeField::PutShowInFieldList ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowInFieldList(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6964)
inline HRESULT Excel::CubeField::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface CubeFields wrapper method implementations
//

#pragma implementation_key(6965)
inline Excel::_ApplicationPtr Excel::CubeFields::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6966)
inline enum XlCreator Excel::CubeFields::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6967)
inline IDispatchPtr Excel::CubeFields::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6968)
inline long Excel::CubeFields::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6969)
inline Excel::CubeFieldPtr Excel::CubeFields::GetItem ( const _variant_t & Index ) {
    struct CubeField * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldPtr(_result, false);
}

#pragma implementation_key(6970)
inline Excel::CubeFieldPtr Excel::CubeFields::Get_Default ( const _variant_t & Index ) {
    struct CubeField * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldPtr(_result, false);
}

#pragma implementation_key(6971)
inline IUnknownPtr Excel::CubeFields::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(6972)
inline Excel::CubeFieldPtr Excel::CubeFields::AddSet ( _bstr_t Name, _bstr_t Caption ) {
    struct CubeField * _result;
    HRESULT _hr = raw_AddSet(Name, Caption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CubeFieldPtr(_result, false);
}

//
// interface IDisplayUnitLabel wrapper method implementations
//

#pragma implementation_key(6973)
inline Excel::_ApplicationPtr Excel::IDisplayUnitLabel::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(6974)
inline enum XlCreator Excel::IDisplayUnitLabel::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6975)
inline IDispatchPtr Excel::IDisplayUnitLabel::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(6976)
inline _bstr_t Excel::IDisplayUnitLabel::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6977)
inline _variant_t Excel::IDisplayUnitLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6978)
inline Excel::BorderPtr Excel::IDisplayUnitLabel::GetBorder ( ) {
    struct Border * _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(6979)
inline _variant_t Excel::IDisplayUnitLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6980)
inline Excel::InteriorPtr Excel::IDisplayUnitLabel::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(6981)
inline Excel::ChartFillFormatPtr Excel::IDisplayUnitLabel::GetFill ( ) {
    struct ChartFillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(6982)
inline _bstr_t Excel::IDisplayUnitLabel::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6983)
inline void Excel::IDisplayUnitLabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6984)
inline Excel::CharactersPtr Excel::IDisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(6985)
inline Excel::FontPtr Excel::IDisplayUnitLabel::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(6986)
inline _variant_t Excel::IDisplayUnitLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6987)
inline void Excel::IDisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6988)
inline double Excel::IDisplayUnitLabel::GetLeft ( ) {
    double _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6989)
inline void Excel::IDisplayUnitLabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6990)
inline _variant_t Excel::IDisplayUnitLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6991)
inline void Excel::IDisplayUnitLabel::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6992)
inline VARIANT_BOOL Excel::IDisplayUnitLabel::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6993)
inline void Excel::IDisplayUnitLabel::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6994)
inline _bstr_t Excel::IDisplayUnitLabel::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6995)
inline void Excel::IDisplayUnitLabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6996)
inline double Excel::IDisplayUnitLabel::GetTop ( ) {
    double _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6997)
inline void Excel::IDisplayUnitLabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(6998)
inline _variant_t Excel::IDisplayUnitLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(6999)
inline void Excel::IDisplayUnitLabel::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7000)
inline long Excel::IDisplayUnitLabel::GetReadingOrder ( ) {
    long _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7001)
inline void Excel::IDisplayUnitLabel::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7002)
inline _variant_t Excel::IDisplayUnitLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7003)
inline void Excel::IDisplayUnitLabel::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICellFormat wrapper method implementations
//

#pragma implementation_key(7004)
inline Excel::_ApplicationPtr Excel::ICellFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7005)
inline enum XlCreator Excel::ICellFormat::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7006)
inline IDispatchPtr Excel::ICellFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7007)
inline Excel::BordersPtr Excel::ICellFormat::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(7008)
inline void Excel::ICellFormat::PutRefBorders ( struct Borders * RHS ) {
    HRESULT _hr = putref_Borders(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7009)
inline Excel::FontPtr Excel::ICellFormat::GetFont ( ) {
    struct Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(7010)
inline void Excel::ICellFormat::PutRefFont ( struct Font * RHS ) {
    HRESULT _hr = putref_Font(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7011)
inline Excel::InteriorPtr Excel::ICellFormat::GetInterior ( ) {
    struct Interior * _result;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InteriorPtr(_result, false);
}

#pragma implementation_key(7012)
inline void Excel::ICellFormat::PutRefInterior ( struct Interior * RHS ) {
    HRESULT _hr = putref_Interior(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7013)
inline _variant_t Excel::ICellFormat::GetNumberFormat ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormat(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7014)
inline void Excel::ICellFormat::PutNumberFormat ( long lcid, const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormat(lcid, RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7015)
inline _variant_t Excel::ICellFormat::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7016)
inline void Excel::ICellFormat::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7017)
inline _variant_t Excel::ICellFormat::GetAddIndent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AddIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7018)
inline void Excel::ICellFormat::PutAddIndent ( const _variant_t & RHS ) {
    HRESULT _hr = put_AddIndent(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7019)
inline _variant_t Excel::ICellFormat::GetIndentLevel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7020)
inline void Excel::ICellFormat::PutIndentLevel ( const _variant_t & RHS ) {
    HRESULT _hr = put_IndentLevel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7021)
inline _variant_t Excel::ICellFormat::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7022)
inline void Excel::ICellFormat::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7023)
inline _variant_t Excel::ICellFormat::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7024)
inline void Excel::ICellFormat::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7025)
inline _variant_t Excel::ICellFormat::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7026)
inline void Excel::ICellFormat::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7027)
inline _variant_t Excel::ICellFormat::GetShrinkToFit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ShrinkToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7028)
inline void Excel::ICellFormat::PutShrinkToFit ( const _variant_t & RHS ) {
    HRESULT _hr = put_ShrinkToFit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7029)
inline _variant_t Excel::ICellFormat::GetWrapText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_WrapText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7030)
inline void Excel::ICellFormat::PutWrapText ( const _variant_t & RHS ) {
    HRESULT _hr = put_WrapText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7031)
inline _variant_t Excel::ICellFormat::GetLocked ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7032)
inline void Excel::ICellFormat::PutLocked ( const _variant_t & RHS ) {
    HRESULT _hr = put_Locked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7033)
inline _variant_t Excel::ICellFormat::GetFormulaHidden ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormulaHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7034)
inline void Excel::ICellFormat::PutFormulaHidden ( const _variant_t & RHS ) {
    HRESULT _hr = put_FormulaHidden(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7035)
inline _variant_t Excel::ICellFormat::GetMergeCells ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MergeCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7036)
inline void Excel::ICellFormat::PutMergeCells ( const _variant_t & RHS ) {
    HRESULT _hr = put_MergeCells(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7037)
inline HRESULT Excel::ICellFormat::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IUsedObjects wrapper method implementations
//

#pragma implementation_key(7038)
inline Excel::_ApplicationPtr Excel::IUsedObjects::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7039)
inline enum XlCreator Excel::IUsedObjects::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7040)
inline IDispatchPtr Excel::IUsedObjects::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7041)
inline long Excel::IUsedObjects::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7042)
inline IUnknownPtr Excel::IUsedObjects::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7043)
inline IDispatchPtr Excel::IUsedObjects::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7044)
inline IDispatchPtr Excel::IUsedObjects::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ICustomProperties wrapper method implementations
//

#pragma implementation_key(7045)
inline Excel::_ApplicationPtr Excel::ICustomProperties::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7046)
inline enum XlCreator Excel::ICustomProperties::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7047)
inline IDispatchPtr Excel::ICustomProperties::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7048)
inline Excel::CustomPropertyPtr Excel::ICustomProperties::Add ( _bstr_t Name, const _variant_t & Value ) {
    struct CustomProperty * _result;
    HRESULT _hr = raw_Add(Name, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomPropertyPtr(_result, false);
}

#pragma implementation_key(7049)
inline long Excel::ICustomProperties::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7050)
inline Excel::CustomPropertyPtr Excel::ICustomProperties::Get_Default ( const _variant_t & Index ) {
    struct CustomProperty * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomPropertyPtr(_result, false);
}

#pragma implementation_key(7051)
inline Excel::CustomPropertyPtr Excel::ICustomProperties::GetItem ( const _variant_t & Index ) {
    struct CustomProperty * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomPropertyPtr(_result, false);
}

#pragma implementation_key(7052)
inline IUnknownPtr Excel::ICustomProperties::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICustomProperty wrapper method implementations
//

#pragma implementation_key(7053)
inline Excel::_ApplicationPtr Excel::ICustomProperty::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7054)
inline enum XlCreator Excel::ICustomProperty::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7055)
inline IDispatchPtr Excel::ICustomProperty::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7056)
inline _bstr_t Excel::ICustomProperty::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7057)
inline void Excel::ICustomProperty::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7058)
inline _variant_t Excel::ICustomProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7059)
inline void Excel::ICustomProperty::PutValue ( const _variant_t & RHS ) {
    HRESULT _hr = put_Value(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7060)
inline _variant_t Excel::ICustomProperty::Get_Default ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7061)
inline HRESULT Excel::ICustomProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICalculatedMembers wrapper method implementations
//

#pragma implementation_key(7062)
inline Excel::_ApplicationPtr Excel::ICalculatedMembers::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7063)
inline enum XlCreator Excel::ICalculatedMembers::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7064)
inline IDispatchPtr Excel::ICalculatedMembers::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7065)
inline long Excel::ICalculatedMembers::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7066)
inline Excel::CalculatedMemberPtr Excel::ICalculatedMembers::GetItem ( const _variant_t & Index ) {
    struct CalculatedMember * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalculatedMemberPtr(_result, false);
}

#pragma implementation_key(7067)
inline Excel::CalculatedMemberPtr Excel::ICalculatedMembers::Get_Default ( const _variant_t & Index ) {
    struct CalculatedMember * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalculatedMemberPtr(_result, false);
}

#pragma implementation_key(7068)
inline IUnknownPtr Excel::ICalculatedMembers::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7069)
inline Excel::CalculatedMemberPtr Excel::ICalculatedMembers::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & SolveOrder, const _variant_t & Type ) {
    struct CalculatedMember * _result;
    HRESULT _hr = raw_Add(Name, Formula, SolveOrder, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalculatedMemberPtr(_result, false);
}

//
// interface ICalculatedMember wrapper method implementations
//

#pragma implementation_key(7070)
inline Excel::_ApplicationPtr Excel::ICalculatedMember::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7071)
inline enum XlCreator Excel::ICalculatedMember::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7072)
inline IDispatchPtr Excel::ICalculatedMember::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7073)
inline _bstr_t Excel::ICalculatedMember::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7074)
inline _bstr_t Excel::ICalculatedMember::GetFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7075)
inline _bstr_t Excel::ICalculatedMember::GetSourceName ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7076)
inline long Excel::ICalculatedMember::GetSolveOrder ( ) {
    long _result;
    HRESULT _hr = get_SolveOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7077)
inline VARIANT_BOOL Excel::ICalculatedMember::GetIsValid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7078)
inline _bstr_t Excel::ICalculatedMember::Get_Default ( ) {
    BSTR _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7079)
inline HRESULT Excel::ICalculatedMember::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7080)
inline enum XlCalculatedMemberType Excel::ICalculatedMember::GetType ( ) {
    enum XlCalculatedMemberType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IWatches wrapper method implementations
//

#pragma implementation_key(7081)
inline Excel::_ApplicationPtr Excel::IWatches::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7082)
inline enum XlCreator Excel::IWatches::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7083)
inline IDispatchPtr Excel::IWatches::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7084)
inline Excel::WatchPtr Excel::IWatches::Add ( const _variant_t & Source ) {
    struct Watch * _result;
    HRESULT _hr = raw_Add(Source, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WatchPtr(_result, false);
}

#pragma implementation_key(7085)
inline long Excel::IWatches::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7086)
inline Excel::WatchPtr Excel::IWatches::Get_Default ( const _variant_t & Index ) {
    struct Watch * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WatchPtr(_result, false);
}

#pragma implementation_key(7087)
inline Excel::WatchPtr Excel::IWatches::GetItem ( const _variant_t & Index ) {
    struct Watch * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WatchPtr(_result, false);
}

#pragma implementation_key(7088)
inline IUnknownPtr Excel::IWatches::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7089)
inline HRESULT Excel::IWatches::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWatch wrapper method implementations
//

#pragma implementation_key(7090)
inline Excel::_ApplicationPtr Excel::IWatch::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7091)
inline enum XlCreator Excel::IWatch::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7092)
inline IDispatchPtr Excel::IWatch::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7093)
inline HRESULT Excel::IWatch::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7094)
inline _variant_t Excel::IWatch::GetSource ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Source(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IPivotCell wrapper method implementations
//

#pragma implementation_key(7095)
inline Excel::_ApplicationPtr Excel::IPivotCell::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7096)
inline enum XlCreator Excel::IPivotCell::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7097)
inline IDispatchPtr Excel::IPivotCell::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7098)
inline enum XlPivotCellType Excel::IPivotCell::GetPivotCellType ( ) {
    enum XlPivotCellType _result;
    HRESULT _hr = get_PivotCellType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7099)
inline Excel::PivotTablePtr Excel::IPivotCell::GetPivotTable ( ) {
    struct PivotTable * _result;
    HRESULT _hr = get_PivotTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(7100)
inline Excel::PivotFieldPtr Excel::IPivotCell::GetDataField ( ) {
    struct PivotField * _result;
    HRESULT _hr = get_DataField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(7101)
inline Excel::PivotFieldPtr Excel::IPivotCell::GetPivotField ( ) {
    struct PivotField * _result;
    HRESULT _hr = get_PivotField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(7102)
inline Excel::PivotItemPtr Excel::IPivotCell::GetPivotItem ( ) {
    struct PivotItem * _result;
    HRESULT _hr = get_PivotItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(7103)
inline Excel::PivotItemListPtr Excel::IPivotCell::GetRowItems ( ) {
    struct PivotItemList * _result;
    HRESULT _hr = get_RowItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemListPtr(_result, false);
}

#pragma implementation_key(7104)
inline Excel::PivotItemListPtr Excel::IPivotCell::GetColumnItems ( ) {
    struct PivotItemList * _result;
    HRESULT _hr = get_ColumnItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemListPtr(_result, false);
}

#pragma implementation_key(7105)
inline Excel::RangePtr Excel::IPivotCell::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(7106)
inline _bstr_t Excel::IPivotCell::GetDummy18 ( ) {
    BSTR _result;
    HRESULT _hr = get_Dummy18(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7107)
inline enum XlConsolidationFunction Excel::IPivotCell::GetCustomSubtotalFunction ( ) {
    enum XlConsolidationFunction _result;
    HRESULT _hr = get_CustomSubtotalFunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IGraphic wrapper method implementations
//

#pragma implementation_key(7108)
inline Excel::_ApplicationPtr Excel::IGraphic::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7109)
inline enum XlCreator Excel::IGraphic::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7110)
inline IDispatchPtr Excel::IGraphic::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7111)
inline float Excel::IGraphic::GetBrightness ( ) {
    float _result;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7112)
inline void Excel::IGraphic::PutBrightness ( float RHS ) {
    HRESULT _hr = put_Brightness(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7113)
inline enum Office::MsoPictureColorType Excel::IGraphic::GetColorType ( ) {
    enum Office::MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7114)
inline void Excel::IGraphic::PutColorType ( enum Office::MsoPictureColorType RHS ) {
    HRESULT _hr = put_ColorType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7115)
inline float Excel::IGraphic::GetContrast ( ) {
    float _result;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7116)
inline void Excel::IGraphic::PutContrast ( float RHS ) {
    HRESULT _hr = put_Contrast(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7117)
inline float Excel::IGraphic::GetCropBottom ( ) {
    float _result;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7118)
inline void Excel::IGraphic::PutCropBottom ( float RHS ) {
    HRESULT _hr = put_CropBottom(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7119)
inline float Excel::IGraphic::GetCropLeft ( ) {
    float _result;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7120)
inline void Excel::IGraphic::PutCropLeft ( float RHS ) {
    HRESULT _hr = put_CropLeft(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7121)
inline float Excel::IGraphic::GetCropRight ( ) {
    float _result;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7122)
inline void Excel::IGraphic::PutCropRight ( float RHS ) {
    HRESULT _hr = put_CropRight(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7123)
inline float Excel::IGraphic::GetCropTop ( ) {
    float _result;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7124)
inline void Excel::IGraphic::PutCropTop ( float RHS ) {
    HRESULT _hr = put_CropTop(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7125)
inline _bstr_t Excel::IGraphic::GetFilename ( ) {
    BSTR _result;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7126)
inline void Excel::IGraphic::PutFilename ( _bstr_t RHS ) {
    HRESULT _hr = put_Filename(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7127)
inline float Excel::IGraphic::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7128)
inline void Excel::IGraphic::PutHeight ( float RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7129)
inline enum Office::MsoTriState Excel::IGraphic::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7130)
inline void Excel::IGraphic::PutLockAspectRatio ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_LockAspectRatio(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7131)
inline float Excel::IGraphic::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7132)
inline void Excel::IGraphic::PutWidth ( float RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAutoRecover wrapper method implementations
//

#pragma implementation_key(7133)
inline Excel::_ApplicationPtr Excel::IAutoRecover::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7134)
inline enum XlCreator Excel::IAutoRecover::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7135)
inline IDispatchPtr Excel::IAutoRecover::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7136)
inline VARIANT_BOOL Excel::IAutoRecover::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7137)
inline void Excel::IAutoRecover::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7138)
inline long Excel::IAutoRecover::GetTime ( ) {
    long _result;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7139)
inline void Excel::IAutoRecover::PutTime ( long RHS ) {
    HRESULT _hr = put_Time(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7140)
inline _bstr_t Excel::IAutoRecover::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7141)
inline void Excel::IAutoRecover::PutPath ( _bstr_t RHS ) {
    HRESULT _hr = put_Path(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IErrorCheckingOptions wrapper method implementations
//

#pragma implementation_key(7142)
inline Excel::_ApplicationPtr Excel::IErrorCheckingOptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7143)
inline enum XlCreator Excel::IErrorCheckingOptions::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7144)
inline IDispatchPtr Excel::IErrorCheckingOptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7145)
inline VARIANT_BOOL Excel::IErrorCheckingOptions::GetBackgroundChecking ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BackgroundChecking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7146)
inline void Excel::IErrorCheckingOptions::PutBackgroundChecking ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_BackgroundChecking(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7147)
inline enum XlColorIndex Excel::IErrorCheckingOptions::GetIndicatorColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_IndicatorColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7148)
inline void Excel::IErrorCheckingOptions::PutIndicatorColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_IndicatorColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7149)
inline VARIANT_BOOL Excel::IErrorCheckingOptions::GetEvaluateToError ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EvaluateToError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7150)
inline void Excel::IErrorCheckingOptions::PutEvaluateToError ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EvaluateToError(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7151)
inline VARIANT_BOOL Excel::IErrorCheckingOptions::GetTextDate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TextDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7152)
inline void Excel::IErrorCheckingOptions::PutTextDate ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_TextDate(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7153)
inline VARIANT_BOOL Excel::IErrorCheckingOptions::GetNumberAsText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NumberAsText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7154)
inline void Excel::IErrorCheckingOptions::PutNumberAsText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberAsText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7155)
inline VARIANT_BOOL Excel::IErrorCheckingOptions::GetInconsistentFormula ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_InconsistentFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7156)
inline void Excel::IErrorCheckingOptions::PutInconsistentFormula ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InconsistentFormula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7157)
inline VARIANT_BOOL Excel::IErrorCheckingOptions::GetOmittedCells ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OmittedCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7158)
inline void Excel::IErrorCheckingOptions::PutOmittedCells ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_OmittedCells(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7159)
inline VARIANT_BOOL Excel::IErrorCheckingOptions::GetUnlockedFormulaCells ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UnlockedFormulaCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7160)
inline void Excel::IErrorCheckingOptions::PutUnlockedFormulaCells ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_UnlockedFormulaCells(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7161)
inline VARIANT_BOOL Excel::IErrorCheckingOptions::GetEmptyCellReferences ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EmptyCellReferences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7162)
inline void Excel::IErrorCheckingOptions::PutEmptyCellReferences ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EmptyCellReferences(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IErrors wrapper method implementations
//

#pragma implementation_key(7163)
inline Excel::_ApplicationPtr Excel::IErrors::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7164)
inline enum XlCreator Excel::IErrors::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7165)
inline IDispatchPtr Excel::IErrors::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7166)
inline Excel::ErrorPtr Excel::IErrors::GetItem ( const _variant_t & Index ) {
    struct Error * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ErrorPtr(_result, false);
}

#pragma implementation_key(7167)
inline Excel::ErrorPtr Excel::IErrors::Get_Default ( const _variant_t & Index ) {
    struct Error * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ErrorPtr(_result, false);
}

//
// interface IError wrapper method implementations
//

#pragma implementation_key(7168)
inline Excel::_ApplicationPtr Excel::IError::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7169)
inline enum XlCreator Excel::IError::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7170)
inline IDispatchPtr Excel::IError::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7171)
inline VARIANT_BOOL Excel::IError::GetValue ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7172)
inline VARIANT_BOOL Excel::IError::GetIgnore ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Ignore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7173)
inline void Excel::IError::PutIgnore ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Ignore(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISmartTagAction wrapper method implementations
//

#pragma implementation_key(7174)
inline Excel::_ApplicationPtr Excel::ISmartTagAction::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7175)
inline enum XlCreator Excel::ISmartTagAction::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7176)
inline IDispatchPtr Excel::ISmartTagAction::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7177)
inline _bstr_t Excel::ISmartTagAction::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7178)
inline HRESULT Excel::ISmartTagAction::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7179)
inline _bstr_t Excel::ISmartTagAction::Get_Default ( ) {
    BSTR _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISmartTagActions wrapper method implementations
//

#pragma implementation_key(7180)
inline Excel::_ApplicationPtr Excel::ISmartTagActions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7181)
inline enum XlCreator Excel::ISmartTagActions::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7182)
inline IDispatchPtr Excel::ISmartTagActions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7183)
inline long Excel::ISmartTagActions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7184)
inline Excel::SmartTagActionPtr Excel::ISmartTagActions::Get_Default ( const _variant_t & Index ) {
    struct SmartTagAction * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagActionPtr(_result, false);
}

#pragma implementation_key(7185)
inline Excel::SmartTagActionPtr Excel::ISmartTagActions::GetItem ( const _variant_t & Index ) {
    struct SmartTagAction * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagActionPtr(_result, false);
}

#pragma implementation_key(7186)
inline IUnknownPtr Excel::ISmartTagActions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISmartTag wrapper method implementations
//

#pragma implementation_key(7187)
inline Excel::_ApplicationPtr Excel::ISmartTag::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7188)
inline enum XlCreator Excel::ISmartTag::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7189)
inline IDispatchPtr Excel::ISmartTag::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7190)
inline _bstr_t Excel::ISmartTag::GetDownloadURL ( ) {
    BSTR _result;
    HRESULT _hr = get_DownloadURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7191)
inline _bstr_t Excel::ISmartTag::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7192)
inline _bstr_t Excel::ISmartTag::Get_Default ( ) {
    BSTR _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7193)
inline _bstr_t Excel::ISmartTag::GetXML ( ) {
    BSTR _result;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7194)
inline Excel::RangePtr Excel::ISmartTag::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(7195)
inline HRESULT Excel::ISmartTag::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7196)
inline Excel::SmartTagActionsPtr Excel::ISmartTag::GetSmartTagActions ( ) {
    struct SmartTagActions * _result;
    HRESULT _hr = get_SmartTagActions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagActionsPtr(_result, false);
}

#pragma implementation_key(7197)
inline Excel::CustomPropertiesPtr Excel::ISmartTag::GetProperties ( ) {
    struct CustomProperties * _result;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomPropertiesPtr(_result, false);
}

//
// interface ISmartTags wrapper method implementations
//

#pragma implementation_key(7198)
inline Excel::_ApplicationPtr Excel::ISmartTags::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7199)
inline enum XlCreator Excel::ISmartTags::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7200)
inline IDispatchPtr Excel::ISmartTags::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7201)
inline Excel::SmartTagPtr Excel::ISmartTags::Add ( _bstr_t SmartTagType ) {
    struct SmartTag * _result;
    HRESULT _hr = raw_Add(SmartTagType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagPtr(_result, false);
}

#pragma implementation_key(7202)
inline long Excel::ISmartTags::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7203)
inline Excel::SmartTagPtr Excel::ISmartTags::Get_Default ( const _variant_t & Index ) {
    struct SmartTag * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagPtr(_result, false);
}

#pragma implementation_key(7204)
inline IUnknownPtr Excel::ISmartTags::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISmartTagRecognizer wrapper method implementations
//

#pragma implementation_key(7205)
inline Excel::_ApplicationPtr Excel::ISmartTagRecognizer::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7206)
inline enum XlCreator Excel::ISmartTagRecognizer::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7207)
inline IDispatchPtr Excel::ISmartTagRecognizer::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7208)
inline VARIANT_BOOL Excel::ISmartTagRecognizer::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7209)
inline void Excel::ISmartTagRecognizer::PutEnabled ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Enabled(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7210)
inline _bstr_t Excel::ISmartTagRecognizer::GetprogID ( ) {
    BSTR _result;
    HRESULT _hr = get_progID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7211)
inline _bstr_t Excel::ISmartTagRecognizer::Get_Default ( ) {
    BSTR _result;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7212)
inline _bstr_t Excel::ISmartTagRecognizer::GetFullName ( ) {
    BSTR _result;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISmartTagRecognizers wrapper method implementations
//

#pragma implementation_key(7213)
inline Excel::_ApplicationPtr Excel::ISmartTagRecognizers::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7214)
inline enum XlCreator Excel::ISmartTagRecognizers::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7215)
inline IDispatchPtr Excel::ISmartTagRecognizers::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7216)
inline long Excel::ISmartTagRecognizers::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7217)
inline Excel::SmartTagRecognizerPtr Excel::ISmartTagRecognizers::GetItem ( const _variant_t & Index ) {
    struct SmartTagRecognizer * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagRecognizerPtr(_result, false);
}

#pragma implementation_key(7218)
inline Excel::SmartTagRecognizerPtr Excel::ISmartTagRecognizers::Get_Default ( const _variant_t & Index ) {
    struct SmartTagRecognizer * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagRecognizerPtr(_result, false);
}

#pragma implementation_key(7219)
inline IUnknownPtr Excel::ISmartTagRecognizers::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7220)
inline VARIANT_BOOL Excel::ISmartTagRecognizers::GetRecognize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Recognize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7221)
inline void Excel::ISmartTagRecognizers::PutRecognize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Recognize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISmartTagOptions wrapper method implementations
//

#pragma implementation_key(7222)
inline Excel::_ApplicationPtr Excel::ISmartTagOptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7223)
inline enum XlCreator Excel::ISmartTagOptions::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7224)
inline IDispatchPtr Excel::ISmartTagOptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7225)
inline enum XlSmartTagDisplayMode Excel::ISmartTagOptions::GetDisplaySmartTags ( ) {
    enum XlSmartTagDisplayMode _result;
    HRESULT _hr = get_DisplaySmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7226)
inline void Excel::ISmartTagOptions::PutDisplaySmartTags ( enum XlSmartTagDisplayMode RHS ) {
    HRESULT _hr = put_DisplaySmartTags(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7227)
inline VARIANT_BOOL Excel::ISmartTagOptions::GetEmbedSmartTags ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EmbedSmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7228)
inline void Excel::ISmartTagOptions::PutEmbedSmartTags ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_EmbedSmartTags(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpellingOptions wrapper method implementations
//

#pragma implementation_key(7229)
inline long Excel::ISpellingOptions::GetDictLang ( ) {
    long _result;
    HRESULT _hr = get_DictLang(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7230)
inline void Excel::ISpellingOptions::PutDictLang ( long RHS ) {
    HRESULT _hr = put_DictLang(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7231)
inline _bstr_t Excel::ISpellingOptions::GetUserDict ( ) {
    BSTR _result;
    HRESULT _hr = get_UserDict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7232)
inline void Excel::ISpellingOptions::PutUserDict ( _bstr_t RHS ) {
    HRESULT _hr = put_UserDict(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7233)
inline VARIANT_BOOL Excel::ISpellingOptions::GetIgnoreCaps ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IgnoreCaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7234)
inline void Excel::ISpellingOptions::PutIgnoreCaps ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IgnoreCaps(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7235)
inline VARIANT_BOOL Excel::ISpellingOptions::GetSuggestMainOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SuggestMainOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7236)
inline void Excel::ISpellingOptions::PutSuggestMainOnly ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SuggestMainOnly(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7237)
inline VARIANT_BOOL Excel::ISpellingOptions::GetIgnoreMixedDigits ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IgnoreMixedDigits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7238)
inline void Excel::ISpellingOptions::PutIgnoreMixedDigits ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IgnoreMixedDigits(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7239)
inline VARIANT_BOOL Excel::ISpellingOptions::GetIgnoreFileNames ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IgnoreFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7240)
inline void Excel::ISpellingOptions::PutIgnoreFileNames ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IgnoreFileNames(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7241)
inline VARIANT_BOOL Excel::ISpellingOptions::GetGermanPostReform ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_GermanPostReform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7242)
inline void Excel::ISpellingOptions::PutGermanPostReform ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_GermanPostReform(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7243)
inline VARIANT_BOOL Excel::ISpellingOptions::GetKoreanCombineAux ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KoreanCombineAux(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7244)
inline void Excel::ISpellingOptions::PutKoreanCombineAux ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_KoreanCombineAux(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7245)
inline VARIANT_BOOL Excel::ISpellingOptions::GetKoreanUseAutoChangeList ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KoreanUseAutoChangeList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7246)
inline void Excel::ISpellingOptions::PutKoreanUseAutoChangeList ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_KoreanUseAutoChangeList(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7247)
inline VARIANT_BOOL Excel::ISpellingOptions::GetKoreanProcessCompound ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KoreanProcessCompound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7248)
inline void Excel::ISpellingOptions::PutKoreanProcessCompound ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_KoreanProcessCompound(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7249)
inline enum XlHebrewModes Excel::ISpellingOptions::GetHebrewModes ( ) {
    enum XlHebrewModes _result;
    HRESULT _hr = get_HebrewModes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7250)
inline void Excel::ISpellingOptions::PutHebrewModes ( enum XlHebrewModes RHS ) {
    HRESULT _hr = put_HebrewModes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7251)
inline enum XlArabicModes Excel::ISpellingOptions::GetArabicModes ( ) {
    enum XlArabicModes _result;
    HRESULT _hr = get_ArabicModes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7252)
inline void Excel::ISpellingOptions::PutArabicModes ( enum XlArabicModes RHS ) {
    HRESULT _hr = put_ArabicModes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISpeech wrapper method implementations
//

#pragma implementation_key(7253)
inline HRESULT Excel::ISpeech::Speak ( _bstr_t Text, const _variant_t & SpeakAsync, const _variant_t & SpeakXML, const _variant_t & Purge ) {
    HRESULT _hr = raw_Speak(Text, SpeakAsync, SpeakXML, Purge);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7254)
inline enum XlSpeakDirection Excel::ISpeech::GetDirection ( ) {
    enum XlSpeakDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7255)
inline void Excel::ISpeech::PutDirection ( enum XlSpeakDirection RHS ) {
    HRESULT _hr = put_Direction(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7256)
inline VARIANT_BOOL Excel::ISpeech::GetSpeakCellOnEnter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SpeakCellOnEnter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7257)
inline void Excel::ISpeech::PutSpeakCellOnEnter ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SpeakCellOnEnter(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IProtection wrapper method implementations
//

#pragma implementation_key(7258)
inline VARIANT_BOOL Excel::IProtection::GetAllowFormattingCells ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowFormattingCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7259)
inline VARIANT_BOOL Excel::IProtection::GetAllowFormattingColumns ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowFormattingColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7260)
inline VARIANT_BOOL Excel::IProtection::GetAllowFormattingRows ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowFormattingRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7261)
inline VARIANT_BOOL Excel::IProtection::GetAllowInsertingColumns ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowInsertingColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7262)
inline VARIANT_BOOL Excel::IProtection::GetAllowInsertingRows ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowInsertingRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7263)
inline VARIANT_BOOL Excel::IProtection::GetAllowInsertingHyperlinks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowInsertingHyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7264)
inline VARIANT_BOOL Excel::IProtection::GetAllowDeletingColumns ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowDeletingColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7265)
inline VARIANT_BOOL Excel::IProtection::GetAllowDeletingRows ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowDeletingRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7266)
inline VARIANT_BOOL Excel::IProtection::GetAllowSorting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowSorting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7267)
inline VARIANT_BOOL Excel::IProtection::GetAllowFiltering ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowFiltering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7268)
inline VARIANT_BOOL Excel::IProtection::GetAllowUsingPivotTables ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowUsingPivotTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7269)
inline Excel::AllowEditRangesPtr Excel::IProtection::GetAllowEditRanges ( ) {
    struct AllowEditRanges * _result;
    HRESULT _hr = get_AllowEditRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AllowEditRangesPtr(_result, false);
}

//
// interface IPivotItemList wrapper method implementations
//

#pragma implementation_key(7270)
inline Excel::_ApplicationPtr Excel::IPivotItemList::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7271)
inline enum XlCreator Excel::IPivotItemList::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7272)
inline IDispatchPtr Excel::IPivotItemList::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7273)
inline long Excel::IPivotItemList::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7274)
inline Excel::PivotItemPtr Excel::IPivotItemList::Item ( const _variant_t & Index ) {
    struct PivotItem * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(7275)
inline Excel::PivotItemPtr Excel::IPivotItemList::Get_Default ( const _variant_t & Field ) {
    struct PivotItem * _result;
    HRESULT _hr = get__Default(Field, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(7276)
inline IUnknownPtr Excel::IPivotItemList::_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ITab wrapper method implementations
//

#pragma implementation_key(7277)
inline Excel::_ApplicationPtr Excel::ITab::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7278)
inline enum XlCreator Excel::ITab::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7279)
inline IDispatchPtr Excel::ITab::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7280)
inline _variant_t Excel::ITab::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(7281)
inline void Excel::ITab::PutColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_Color(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7282)
inline enum XlColorIndex Excel::ITab::GetColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7283)
inline void Excel::ITab::PutColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_ColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAllowEditRanges wrapper method implementations
//

#pragma implementation_key(7284)
inline long Excel::IAllowEditRanges::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7285)
inline Excel::AllowEditRangePtr Excel::IAllowEditRanges::GetItem ( const _variant_t & Index ) {
    struct AllowEditRange * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AllowEditRangePtr(_result, false);
}

#pragma implementation_key(7286)
inline Excel::AllowEditRangePtr Excel::IAllowEditRanges::Add ( _bstr_t Title, struct Range * Range, const _variant_t & Password ) {
    struct AllowEditRange * _result;
    HRESULT _hr = raw_Add(Title, Range, Password, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AllowEditRangePtr(_result, false);
}

#pragma implementation_key(7287)
inline Excel::AllowEditRangePtr Excel::IAllowEditRanges::Get_Default ( const _variant_t & Index ) {
    struct AllowEditRange * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AllowEditRangePtr(_result, false);
}

#pragma implementation_key(7288)
inline IUnknownPtr Excel::IAllowEditRanges::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IAllowEditRange wrapper method implementations
//

#pragma implementation_key(7289)
inline _bstr_t Excel::IAllowEditRange::GetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7290)
inline void Excel::IAllowEditRange::PutTitle ( _bstr_t RHS ) {
    HRESULT _hr = put_Title(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7291)
inline Excel::RangePtr Excel::IAllowEditRange::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(7292)
inline void Excel::IAllowEditRange::PutRefRange ( struct Range * RHS ) {
    HRESULT _hr = putref_Range(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7293)
inline HRESULT Excel::IAllowEditRange::ChangePassword ( _bstr_t Password ) {
    HRESULT _hr = raw_ChangePassword(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7294)
inline HRESULT Excel::IAllowEditRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7295)
inline HRESULT Excel::IAllowEditRange::Unprotect ( const _variant_t & Password ) {
    HRESULT _hr = raw_Unprotect(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7296)
inline Excel::UserAccessListPtr Excel::IAllowEditRange::GetUsers ( ) {
    struct UserAccessList * _result;
    HRESULT _hr = get_Users(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserAccessListPtr(_result, false);
}

//
// interface IUserAccessList wrapper method implementations
//

#pragma implementation_key(7297)
inline long Excel::IUserAccessList::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7298)
inline Excel::UserAccessPtr Excel::IUserAccessList::GetItem ( const _variant_t & Index ) {
    struct UserAccess * _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserAccessPtr(_result, false);
}

#pragma implementation_key(7299)
inline Excel::UserAccessPtr Excel::IUserAccessList::Add ( _bstr_t Name, VARIANT_BOOL AllowEdit ) {
    struct UserAccess * _result;
    HRESULT _hr = raw_Add(Name, AllowEdit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserAccessPtr(_result, false);
}

#pragma implementation_key(7300)
inline HRESULT Excel::IUserAccessList::DeleteAll ( ) {
    HRESULT _hr = raw_DeleteAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7301)
inline Excel::UserAccessPtr Excel::IUserAccessList::Get_Default ( const _variant_t & Index ) {
    struct UserAccess * _result;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserAccessPtr(_result, false);
}

#pragma implementation_key(7302)
inline IUnknownPtr Excel::IUserAccessList::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IUserAccess wrapper method implementations
//

#pragma implementation_key(7303)
inline _bstr_t Excel::IUserAccess::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7304)
inline VARIANT_BOOL Excel::IUserAccess::GetAllowEdit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7305)
inline void Excel::IUserAccess::PutAllowEdit ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AllowEdit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7306)
inline HRESULT Excel::IUserAccess::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRTD wrapper method implementations
//

#pragma implementation_key(7307)
inline long Excel::IRTD::GetThrottleInterval ( ) {
    long _result;
    HRESULT _hr = get_ThrottleInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7308)
inline void Excel::IRTD::PutThrottleInterval ( long RHS ) {
    HRESULT _hr = put_ThrottleInterval(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7309)
inline HRESULT Excel::IRTD::RefreshData ( ) {
    HRESULT _hr = raw_RefreshData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7310)
inline HRESULT Excel::IRTD::RestartServers ( ) {
    HRESULT _hr = raw_RestartServers();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDiagram wrapper method implementations
//

#pragma implementation_key(7311)
inline Excel::_ApplicationPtr Excel::IDiagram::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7312)
inline enum XlCreator Excel::IDiagram::GetCreator ( ) {
    enum XlCreator _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7313)
inline IDispatchPtr Excel::IDiagram::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7314)
inline Excel::DiagramNodesPtr Excel::IDiagram::GetNodes ( ) {
    struct DiagramNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodesPtr(_result, false);
}

#pragma implementation_key(7315)
inline enum Office::MsoDiagramType Excel::IDiagram::GetType ( ) {
    enum Office::MsoDiagramType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7316)
inline enum Office::MsoTriState Excel::IDiagram::GetAutoLayout ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7317)
inline void Excel::IDiagram::PutAutoLayout ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_AutoLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7318)
inline enum Office::MsoTriState Excel::IDiagram::GetReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Reverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7319)
inline void Excel::IDiagram::PutReverse ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_Reverse(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7320)
inline enum Office::MsoTriState Excel::IDiagram::GetAutoFormat ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7321)
inline void Excel::IDiagram::PutAutoFormat ( enum Office::MsoTriState RHS ) {
    HRESULT _hr = put_AutoFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7322)
inline HRESULT Excel::IDiagram::Convert ( enum Office::MsoDiagramType Type ) {
    HRESULT _hr = raw_Convert(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface Font wrapper method implementations
//

#pragma implementation_key(7323)
inline Excel::_ApplicationPtr Excel::Font::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7324)
inline enum XlCreator Excel::Font::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7325)
inline IDispatchPtr Excel::Font::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7326)
inline _variant_t Excel::Font::GetBackground ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xb4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7327)
inline void Excel::Font::PutBackground ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xb4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7328)
inline _variant_t Excel::Font::GetBold ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x60, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7329)
inline void Excel::Font::PutBold ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x60, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7330)
inline _variant_t Excel::Font::GetColor ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7331)
inline void Excel::Font::PutColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7332)
inline _variant_t Excel::Font::GetColorIndex ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7333)
inline void Excel::Font::PutColorIndex ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7334)
inline _variant_t Excel::Font::GetFontStyle ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xb1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7335)
inline void Excel::Font::PutFontStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xb1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7336)
inline _variant_t Excel::Font::GetItalic ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x65, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7337)
inline void Excel::Font::PutItalic ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7338)
inline _variant_t Excel::Font::GetName ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7339)
inline void Excel::Font::PutName ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7340)
inline _variant_t Excel::Font::GetOutlineFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xdd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7341)
inline void Excel::Font::PutOutlineFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xdd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7342)
inline _variant_t Excel::Font::GetShadow ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7343)
inline void Excel::Font::PutShadow ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7344)
inline _variant_t Excel::Font::GetSize ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x68, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7345)
inline void Excel::Font::PutSize ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7346)
inline _variant_t Excel::Font::GetStrikethrough ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x69, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7347)
inline void Excel::Font::PutStrikethrough ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7348)
inline _variant_t Excel::Font::GetSubscript ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xb3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7349)
inline void Excel::Font::PutSubscript ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xb3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7350)
inline _variant_t Excel::Font::GetSuperscript ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xb2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7351)
inline void Excel::Font::PutSuperscript ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xb2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7352)
inline _variant_t Excel::Font::GetUnderline ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7353)
inline void Excel::Font::PutUnderline ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Window wrapper method implementations
//

#pragma implementation_key(7354)
inline Excel::_ApplicationPtr Excel::Window::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7355)
inline enum XlCreator Excel::Window::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7356)
inline IDispatchPtr Excel::Window::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7357)
inline _variant_t Excel::Window::Activate ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7358)
inline _variant_t Excel::Window::ActivateNext ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x45b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7359)
inline _variant_t Excel::Window::ActivatePrevious ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x45c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7360)
inline Excel::RangePtr Excel::Window::GetActiveCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x131, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7361)
inline Excel::_ChartPtr Excel::Window::GetActiveChart ( ) {
    struct _Chart * _result;
    _com_dispatch_method(this, 0xb7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ChartPtr(_result, false);
}

#pragma implementation_key(7362)
inline Excel::PanePtr Excel::Window::GetActivePane ( ) {
    struct Pane * _result;
    _com_dispatch_method(this, 0x282, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PanePtr(_result, false);
}

#pragma implementation_key(7363)
inline IDispatchPtr Excel::Window::GetActiveSheet ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x133, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7364)
inline _variant_t Excel::Window::GetCaption ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7365)
inline void Excel::Window::PutCaption ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7366)
inline VARIANT_BOOL Excel::Window::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x115, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x080c\x080c\x080c", &SaveChanges, &Filename, &RouteWorkbook);
    return _result;
}

#pragma implementation_key(7367)
inline VARIANT_BOOL Excel::Window::GetDisplayFormulas ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x284, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7368)
inline void Excel::Window::PutDisplayFormulas ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x284, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7369)
inline VARIANT_BOOL Excel::Window::GetDisplayGridlines ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x285, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7370)
inline void Excel::Window::PutDisplayGridlines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x285, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7371)
inline VARIANT_BOOL Excel::Window::GetDisplayHeadings ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x286, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7372)
inline void Excel::Window::PutDisplayHeadings ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x286, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7373)
inline VARIANT_BOOL Excel::Window::GetDisplayHorizontalScrollBar ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x399, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7374)
inline void Excel::Window::PutDisplayHorizontalScrollBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x399, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7375)
inline VARIANT_BOOL Excel::Window::GetDisplayOutline ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x287, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7376)
inline void Excel::Window::PutDisplayOutline ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x287, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7377)
inline VARIANT_BOOL Excel::Window::Get_DisplayRightToLeft ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x288, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7378)
inline void Excel::Window::Put_DisplayRightToLeft ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x288, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7379)
inline VARIANT_BOOL Excel::Window::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7380)
inline void Excel::Window::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7381)
inline VARIANT_BOOL Excel::Window::GetDisplayWorkbookTabs ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x39b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7382)
inline void Excel::Window::PutDisplayWorkbookTabs ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x39b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7383)
inline VARIANT_BOOL Excel::Window::GetDisplayZeros ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x289, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7384)
inline void Excel::Window::PutDisplayZeros ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x289, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7385)
inline VARIANT_BOOL Excel::Window::GetEnableResize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4a8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7386)
inline void Excel::Window::PutEnableResize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x4a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7387)
inline VARIANT_BOOL Excel::Window::GetFreezePanes ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x28a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7388)
inline void Excel::Window::PutFreezePanes ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x28a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7389)
inline long Excel::Window::GetGridlineColor ( ) {
    long _result;
    _com_dispatch_method(this, 0x28b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7390)
inline void Excel::Window::PutGridlineColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x28b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7391)
inline enum XlColorIndex Excel::Window::GetGridlineColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x28c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7392)
inline void Excel::Window::PutGridlineColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x28c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7393)
inline double Excel::Window::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7394)
inline void Excel::Window::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(7395)
inline long Excel::Window::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7396)
inline _variant_t Excel::Window::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x223, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Down, &Up, &ToRight, &ToLeft);
    return _variant_t(_result, false);
}

#pragma implementation_key(7397)
inline double Excel::Window::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7398)
inline void Excel::Window::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(7399)
inline Excel::WindowPtr Excel::Window::NewWindow ( ) {
    struct Window * _result;
    _com_dispatch_method(this, 0x118, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return WindowPtr(_result, false);
}

#pragma implementation_key(7400)
inline _bstr_t Excel::Window::GetOnWindow ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x26f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7401)
inline void Excel::Window::PutOnWindow ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x26f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(7402)
inline Excel::PanesPtr Excel::Window::GetPanes ( ) {
    struct Panes * _result;
    _com_dispatch_method(this, 0x28d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PanesPtr(_result, false);
}

#pragma implementation_key(7403)
inline _variant_t Excel::Window::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
    return _variant_t(_result, false);
}

#pragma implementation_key(7404)
inline _variant_t Excel::Window::PrintPreview ( const _variant_t & EnableChanges ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &EnableChanges);
    return _variant_t(_result, false);
}

#pragma implementation_key(7405)
inline Excel::RangePtr Excel::Window::GetRangeSelection ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x4a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7406)
inline long Excel::Window::GetScrollColumn ( ) {
    long _result;
    _com_dispatch_method(this, 0x28e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7407)
inline void Excel::Window::PutScrollColumn ( long _arg1 ) {
    _com_dispatch_method(this, 0x28e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7408)
inline long Excel::Window::GetScrollRow ( ) {
    long _result;
    _com_dispatch_method(this, 0x28f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7409)
inline void Excel::Window::PutScrollRow ( long _arg1 ) {
    _com_dispatch_method(this, 0x28f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7410)
inline _variant_t Excel::Window::ScrollWorkbookTabs ( const _variant_t & Sheets, const _variant_t & Position ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x296, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &Sheets, &Position);
    return _variant_t(_result, false);
}

#pragma implementation_key(7411)
inline Excel::SheetsPtr Excel::Window::GetSelectedSheets ( ) {
    struct Sheets * _result;
    _com_dispatch_method(this, 0x290, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return SheetsPtr(_result, false);
}

#pragma implementation_key(7412)
inline IDispatchPtr Excel::Window::GetSelection ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x93, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7413)
inline _variant_t Excel::Window::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x224, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Down, &Up, &ToRight, &ToLeft);
    return _variant_t(_result, false);
}

#pragma implementation_key(7414)
inline VARIANT_BOOL Excel::Window::GetSplit ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x291, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7415)
inline void Excel::Window::PutSplit ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x291, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7416)
inline long Excel::Window::GetSplitColumn ( ) {
    long _result;
    _com_dispatch_method(this, 0x292, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7417)
inline void Excel::Window::PutSplitColumn ( long _arg1 ) {
    _com_dispatch_method(this, 0x292, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7418)
inline double Excel::Window::GetSplitHorizontal ( ) {
    double _result;
    _com_dispatch_method(this, 0x293, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7419)
inline void Excel::Window::PutSplitHorizontal ( double _arg1 ) {
    _com_dispatch_method(this, 0x293, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(7420)
inline long Excel::Window::GetSplitRow ( ) {
    long _result;
    _com_dispatch_method(this, 0x294, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7421)
inline void Excel::Window::PutSplitRow ( long _arg1 ) {
    _com_dispatch_method(this, 0x294, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7422)
inline double Excel::Window::GetSplitVertical ( ) {
    double _result;
    _com_dispatch_method(this, 0x295, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7423)
inline void Excel::Window::PutSplitVertical ( double _arg1 ) {
    _com_dispatch_method(this, 0x295, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(7424)
inline double Excel::Window::GetTabRatio ( ) {
    double _result;
    _com_dispatch_method(this, 0x2a1, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7425)
inline void Excel::Window::PutTabRatio ( double _arg1 ) {
    _com_dispatch_method(this, 0x2a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(7426)
inline double Excel::Window::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7427)
inline void Excel::Window::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(7428)
inline enum XlWindowType Excel::Window::GetType ( ) {
    enum XlWindowType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7429)
inline double Excel::Window::GetUsableHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x185, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7430)
inline double Excel::Window::GetUsableWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x186, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7431)
inline VARIANT_BOOL Excel::Window::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7432)
inline void Excel::Window::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7433)
inline Excel::RangePtr Excel::Window::GetVisibleRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x45e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7434)
inline double Excel::Window::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7435)
inline void Excel::Window::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(7436)
inline long Excel::Window::GetWindowNumber ( ) {
    long _result;
    _com_dispatch_method(this, 0x45f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7437)
inline enum XlWindowState Excel::Window::GetWindowState ( ) {
    enum XlWindowState _result;
    _com_dispatch_method(this, 0x18c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7438)
inline void Excel::Window::PutWindowState ( enum XlWindowState _arg1 ) {
    _com_dispatch_method(this, 0x18c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7439)
inline _variant_t Excel::Window::GetZoom ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x297, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7440)
inline void Excel::Window::PutZoom ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x297, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7441)
inline enum XlWindowView Excel::Window::GetView ( ) {
    enum XlWindowView _result;
    _com_dispatch_method(this, 0x4aa, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7442)
inline void Excel::Window::PutView ( enum XlWindowView _arg1 ) {
    _com_dispatch_method(this, 0x4aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7443)
inline VARIANT_BOOL Excel::Window::GetDisplayRightToLeft ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x6ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7444)
inline void Excel::Window::PutDisplayRightToLeft ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x6ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7445)
inline long Excel::Window::PointsToScreenPixelsX ( long Points ) {
    long _result;
    _com_dispatch_method(this, 0x6f0, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0003", Points);
    return _result;
}

#pragma implementation_key(7446)
inline long Excel::Window::PointsToScreenPixelsY ( long Points ) {
    long _result;
    _com_dispatch_method(this, 0x6f1, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0003", Points);
    return _result;
}

#pragma implementation_key(7447)
inline IDispatchPtr Excel::Window::RangeFromPoint ( long x, long y ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x6f2, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0003", x, y);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7448)
inline HRESULT Excel::Window::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start ) {
    return _com_dispatch_method(this, 0x6f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x080c", Left, Top, Width, Height, &Start);
}

//
// dispinterface Windows wrapper method implementations
//

#pragma implementation_key(7449)
inline Excel::_ApplicationPtr Excel::Windows::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7450)
inline enum XlCreator Excel::Windows::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7451)
inline IDispatchPtr Excel::Windows::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7452)
inline _variant_t Excel::Windows::Arrange ( enum XlArrangeStyle ArrangeStyle, const _variant_t & ActiveWorkbook, const _variant_t & SyncHorizontal, const _variant_t & SyncVertical ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x27e, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c", ArrangeStyle, &ActiveWorkbook, &SyncHorizontal, &SyncVertical);
    return _variant_t(_result, false);
}

#pragma implementation_key(7453)
inline long Excel::Windows::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7454)
inline Excel::WindowPtr Excel::Windows::GetItem ( const _variant_t & Index ) {
    struct Window * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return WindowPtr(_result, false);
}

#pragma implementation_key(7455)
inline IUnknownPtr Excel::Windows::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7456)
inline Excel::WindowPtr Excel::Windows::Get_Default ( const _variant_t & Index ) {
    struct Window * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return WindowPtr(_result, false);
}

//
// dispinterface AppEvents wrapper method implementations
//

#pragma implementation_key(7457)
inline HRESULT Excel::AppEvents::NewWorkbook ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x61d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

#pragma implementation_key(7458)
inline HRESULT Excel::AppEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target ) {
    return _com_dispatch_method(this, 0x616, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

#pragma implementation_key(7459)
inline HRESULT Excel::AppEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x617, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Sh, Target, Cancel);
}

#pragma implementation_key(7460)
inline HRESULT Excel::AppEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x618, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Sh, Target, Cancel);
}

#pragma implementation_key(7461)
inline HRESULT Excel::AppEvents::SheetActivate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x619, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

#pragma implementation_key(7462)
inline HRESULT Excel::AppEvents::SheetDeactivate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x61a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

#pragma implementation_key(7463)
inline HRESULT Excel::AppEvents::SheetCalculate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x61b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

#pragma implementation_key(7464)
inline HRESULT Excel::AppEvents::SheetChange ( IDispatch * Sh, struct Range * Target ) {
    return _com_dispatch_method(this, 0x61c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

#pragma implementation_key(7465)
inline HRESULT Excel::AppEvents::WorkbookOpen ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x61f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

#pragma implementation_key(7466)
inline HRESULT Excel::AppEvents::WorkbookActivate ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x620, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

#pragma implementation_key(7467)
inline HRESULT Excel::AppEvents::WorkbookDeactivate ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x621, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

#pragma implementation_key(7468)
inline HRESULT Excel::AppEvents::WorkbookBeforeClose ( struct _Workbook * Wb, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x622, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Wb, Cancel);
}

#pragma implementation_key(7469)
inline HRESULT Excel::AppEvents::WorkbookBeforeSave ( struct _Workbook * Wb, VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x623, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x000b\x400b", Wb, SaveAsUI, Cancel);
}

#pragma implementation_key(7470)
inline HRESULT Excel::AppEvents::WorkbookBeforePrint ( struct _Workbook * Wb, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x624, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Wb, Cancel);
}

#pragma implementation_key(7471)
inline HRESULT Excel::AppEvents::WorkbookNewSheet ( struct _Workbook * Wb, IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x625, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Wb, Sh);
}

#pragma implementation_key(7472)
inline HRESULT Excel::AppEvents::WorkbookAddinInstall ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x626, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

#pragma implementation_key(7473)
inline HRESULT Excel::AppEvents::WorkbookAddinUninstall ( struct _Workbook * Wb ) {
    return _com_dispatch_method(this, 0x627, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wb);
}

#pragma implementation_key(7474)
inline HRESULT Excel::AppEvents::WindowResize ( struct _Workbook * Wb, struct Window * Wn ) {
    return _com_dispatch_method(this, 0x612, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Wb, Wn);
}

#pragma implementation_key(7475)
inline HRESULT Excel::AppEvents::WindowActivate ( struct _Workbook * Wb, struct Window * Wn ) {
    return _com_dispatch_method(this, 0x614, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Wb, Wn);
}

#pragma implementation_key(7476)
inline HRESULT Excel::AppEvents::WindowDeactivate ( struct _Workbook * Wb, struct Window * Wn ) {
    return _com_dispatch_method(this, 0x615, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Wb, Wn);
}

#pragma implementation_key(7477)
inline HRESULT Excel::AppEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target ) {
    return _com_dispatch_method(this, 0x73e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

#pragma implementation_key(7478)
inline HRESULT Excel::AppEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target ) {
    return _com_dispatch_method(this, 0x86d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

#pragma implementation_key(7479)
inline HRESULT Excel::AppEvents::WorkbookPivotTableCloseConnection ( struct _Workbook * Wb, struct PivotTable * Target ) {
    return _com_dispatch_method(this, 0x870, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Wb, Target);
}

#pragma implementation_key(7480)
inline HRESULT Excel::AppEvents::WorkbookPivotTableOpenConnection ( struct _Workbook * Wb, struct PivotTable * Target ) {
    return _com_dispatch_method(this, 0x871, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Wb, Target);
}

//
// dispinterface WorksheetFunction wrapper method implementations
//

#pragma implementation_key(7481)
inline Excel::_ApplicationPtr Excel::WorksheetFunction::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7482)
inline enum XlCreator Excel::WorksheetFunction::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7483)
inline IDispatchPtr Excel::WorksheetFunction::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7484)
inline _variant_t Excel::WorksheetFunction::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xa9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _variant_t(_result, false);
}

#pragma implementation_key(7485)
inline double Excel::WorksheetFunction::Count ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x4000, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7486)
inline VARIANT_BOOL Excel::WorksheetFunction::IsNA ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4002, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

#pragma implementation_key(7487)
inline VARIANT_BOOL Excel::WorksheetFunction::IsError ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4003, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

#pragma implementation_key(7488)
inline double Excel::WorksheetFunction::Sum ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7489)
inline double Excel::WorksheetFunction::Average ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x4005, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7490)
inline double Excel::WorksheetFunction::Min ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x4006, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7491)
inline double Excel::WorksheetFunction::Max ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x4007, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7492)
inline double Excel::WorksheetFunction::Npv ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x400b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7493)
inline double Excel::WorksheetFunction::StDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x400c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7494)
inline _bstr_t Excel::WorksheetFunction::Dollar ( double Arg1, const _variant_t & Arg2 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x400d, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005\x080c", Arg1, &Arg2);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7495)
inline _bstr_t Excel::WorksheetFunction::Fixed ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x400e, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005\x080c\x080c", Arg1, &Arg2, &Arg3);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7496)
inline double Excel::WorksheetFunction::Pi ( ) {
    double _result;
    _com_dispatch_method(this, 0x4013, DISPATCH_METHOD, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7497)
inline double Excel::WorksheetFunction::Ln ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4016, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7498)
inline double Excel::WorksheetFunction::Log10 ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4017, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7499)
inline double Excel::WorksheetFunction::Round ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x401b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7500)
inline _variant_t Excel::WorksheetFunction::Lookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x401c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x080c", &Arg1, &Arg2, &Arg3);
    return _variant_t(_result, false);
}

#pragma implementation_key(7501)
inline _variant_t Excel::WorksheetFunction::Index ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x401d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0005\x080c\x080c", &Arg1, Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

#pragma implementation_key(7502)
inline _bstr_t Excel::WorksheetFunction::Rept ( _bstr_t Arg1, double Arg2 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x401e, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008\x0005", (BSTR)Arg1, Arg2);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7503)
inline VARIANT_BOOL Excel::WorksheetFunction::And ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4024, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7504)
inline VARIANT_BOOL Excel::WorksheetFunction::Or ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4025, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7505)
inline double Excel::WorksheetFunction::DCount ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4028, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7506)
inline double Excel::WorksheetFunction::DSum ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4029, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7507)
inline double Excel::WorksheetFunction::DAverage ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x402a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7508)
inline double Excel::WorksheetFunction::DMin ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x402b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7509)
inline double Excel::WorksheetFunction::DMax ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x402c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7510)
inline double Excel::WorksheetFunction::DStDev ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x402d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7511)
inline double Excel::WorksheetFunction::Var ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x402e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7512)
inline double Excel::WorksheetFunction::DVar ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x402f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7513)
inline _bstr_t Excel::WorksheetFunction::Text ( const _variant_t & Arg1, _bstr_t Arg2 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4030, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x000c\x0008", &Arg1, (BSTR)Arg2);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7514)
inline _variant_t Excel::WorksheetFunction::LinEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x4031, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

#pragma implementation_key(7515)
inline _variant_t Excel::WorksheetFunction::Trend ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x4032, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

#pragma implementation_key(7516)
inline _variant_t Excel::WorksheetFunction::LogEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x4033, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

#pragma implementation_key(7517)
inline _variant_t Excel::WorksheetFunction::Growth ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x4034, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

#pragma implementation_key(7518)
inline double Excel::WorksheetFunction::Pv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    _com_dispatch_method(this, 0x4038, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

#pragma implementation_key(7519)
inline double Excel::WorksheetFunction::Fv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    _com_dispatch_method(this, 0x4039, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

#pragma implementation_key(7520)
inline double Excel::WorksheetFunction::NPer ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    _com_dispatch_method(this, 0x403a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

#pragma implementation_key(7521)
inline double Excel::WorksheetFunction::Pmt ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    _com_dispatch_method(this, 0x403b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

#pragma implementation_key(7522)
inline double Excel::WorksheetFunction::Rate ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result;
    _com_dispatch_method(this, 0x403c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5, &Arg6);
    return _result;
}

#pragma implementation_key(7523)
inline double Excel::WorksheetFunction::MIrr ( const _variant_t & Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x403d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005\x0005", &Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7524)
inline double Excel::WorksheetFunction::Irr ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x403e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7525)
inline double Excel::WorksheetFunction::Match ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c\x080c", &Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7526)
inline double Excel::WorksheetFunction::Weekday ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4046, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7527)
inline double Excel::WorksheetFunction::Search ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4052, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008\x0008\x080c", (BSTR)Arg1, (BSTR)Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7528)
inline _variant_t Excel::WorksheetFunction::Transpose ( const _variant_t & Arg1 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x4053, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Arg1);
    return _variant_t(_result, false);
}

#pragma implementation_key(7529)
inline double Excel::WorksheetFunction::Atan2 ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4061, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7530)
inline double Excel::WorksheetFunction::Asin ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4062, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7531)
inline double Excel::WorksheetFunction::Acos ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4063, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7532)
inline _variant_t Excel::WorksheetFunction::Choose ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x4064, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _variant_t(_result, false);
}

#pragma implementation_key(7533)
inline _variant_t Excel::WorksheetFunction::HLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x4065, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x000c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

#pragma implementation_key(7534)
inline _variant_t Excel::WorksheetFunction::VLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x4066, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x000c\x080c", &Arg1, &Arg2, &Arg3, &Arg4);
    return _variant_t(_result, false);
}

#pragma implementation_key(7535)
inline double Excel::WorksheetFunction::Log ( double Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x406d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x080c", Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7536)
inline _bstr_t Excel::WorksheetFunction::Proper ( _bstr_t Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4072, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7537)
inline _bstr_t Excel::WorksheetFunction::Trim ( _bstr_t Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4076, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7538)
inline _bstr_t Excel::WorksheetFunction::Replace ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4077, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008\x0005\x0005\x0008", (BSTR)Arg1, Arg2, Arg3, (BSTR)Arg4);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7539)
inline _bstr_t Excel::WorksheetFunction::Substitute ( _bstr_t Arg1, _bstr_t Arg2, _bstr_t Arg3, const _variant_t & Arg4 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4078, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008\x0008\x0008\x080c", (BSTR)Arg1, (BSTR)Arg2, (BSTR)Arg3, &Arg4);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7540)
inline double Excel::WorksheetFunction::Find ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x407c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008\x0008\x080c", (BSTR)Arg1, (BSTR)Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7541)
inline VARIANT_BOOL Excel::WorksheetFunction::IsErr ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x407e, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

#pragma implementation_key(7542)
inline VARIANT_BOOL Excel::WorksheetFunction::IsText ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x407f, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

#pragma implementation_key(7543)
inline VARIANT_BOOL Excel::WorksheetFunction::IsNumber ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4080, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

#pragma implementation_key(7544)
inline double Excel::WorksheetFunction::Sln ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x408e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7545)
inline double Excel::WorksheetFunction::Syd ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result;
    _com_dispatch_method(this, 0x408f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

#pragma implementation_key(7546)
inline double Excel::WorksheetFunction::Ddb ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 ) {
    double _result;
    _com_dispatch_method(this, 0x4090, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x080c", Arg1, Arg2, Arg3, Arg4, &Arg5);
    return _result;
}

#pragma implementation_key(7547)
inline _bstr_t Excel::WorksheetFunction::Clean ( _bstr_t Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x40a2, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7548)
inline double Excel::WorksheetFunction::MDeterm ( const _variant_t & Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x40a3, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

#pragma implementation_key(7549)
inline _variant_t Excel::WorksheetFunction::MInverse ( const _variant_t & Arg1 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x40a4, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Arg1);
    return _variant_t(_result, false);
}

#pragma implementation_key(7550)
inline _variant_t Excel::WorksheetFunction::MMult ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x40a5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _variant_t(_result, false);
}

#pragma implementation_key(7551)
inline double Excel::WorksheetFunction::Ipmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result;
    _com_dispatch_method(this, 0x40a7, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, Arg4, &Arg5, &Arg6);
    return _result;
}

#pragma implementation_key(7552)
inline double Excel::WorksheetFunction::Ppmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 ) {
    double _result;
    _com_dispatch_method(this, 0x40a8, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, Arg4, &Arg5, &Arg6);
    return _result;
}

#pragma implementation_key(7553)
inline double Excel::WorksheetFunction::CountA ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x40a9, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7554)
inline double Excel::WorksheetFunction::Product ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x40b7, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7555)
inline double Excel::WorksheetFunction::Fact ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x40b8, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7556)
inline double Excel::WorksheetFunction::DProduct ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x40bd, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7557)
inline VARIANT_BOOL Excel::WorksheetFunction::IsNonText ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x40be, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

#pragma implementation_key(7558)
inline double Excel::WorksheetFunction::StDevP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x40c1, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7559)
inline double Excel::WorksheetFunction::VarP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x40c2, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7560)
inline double Excel::WorksheetFunction::DStDevP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x40c3, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7561)
inline double Excel::WorksheetFunction::DVarP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x40c4, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7562)
inline VARIANT_BOOL Excel::WorksheetFunction::IsLogical ( const _variant_t & Arg1 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x40c6, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c", &Arg1);
    return _result;
}

#pragma implementation_key(7563)
inline double Excel::WorksheetFunction::DCountA ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x40c7, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7564)
inline _bstr_t Excel::WorksheetFunction::USDollar ( double Arg1, double Arg2 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x40cc, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7565)
inline double Excel::WorksheetFunction::FindB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x40cd, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008\x0008\x080c", (BSTR)Arg1, (BSTR)Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7566)
inline double Excel::WorksheetFunction::SearchB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x40ce, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008\x0008\x080c", (BSTR)Arg1, (BSTR)Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7567)
inline _bstr_t Excel::WorksheetFunction::ReplaceB ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x40cf, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008\x0005\x0005\x0008", (BSTR)Arg1, Arg2, Arg3, (BSTR)Arg4);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7568)
inline double Excel::WorksheetFunction::RoundUp ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x40d4, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7569)
inline double Excel::WorksheetFunction::RoundDown ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x40d5, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7570)
inline double Excel::WorksheetFunction::Rank ( double Arg1, struct Range * Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x40d8, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0009\x080c", Arg1, Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7571)
inline double Excel::WorksheetFunction::Days360 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x40dc, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c\x080c", &Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7572)
inline double Excel::WorksheetFunction::Vdb ( double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, const _variant_t & Arg6, const _variant_t & Arg7 ) {
    double _result;
    _com_dispatch_method(this, 0x40de, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, Arg4, Arg5, &Arg6, &Arg7);
    return _result;
}

#pragma implementation_key(7573)
inline double Excel::WorksheetFunction::Median ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x40e3, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7574)
inline double Excel::WorksheetFunction::SumProduct ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x40e4, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7575)
inline double Excel::WorksheetFunction::Sinh ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x40e5, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7576)
inline double Excel::WorksheetFunction::Cosh ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x40e6, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7577)
inline double Excel::WorksheetFunction::Tanh ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x40e7, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7578)
inline double Excel::WorksheetFunction::Asinh ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x40e8, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7579)
inline double Excel::WorksheetFunction::Acosh ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x40e9, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7580)
inline double Excel::WorksheetFunction::Atanh ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x40ea, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7581)
inline _variant_t Excel::WorksheetFunction::DGet ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x40eb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0009\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _variant_t(_result, false);
}

#pragma implementation_key(7582)
inline double Excel::WorksheetFunction::Db ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 ) {
    double _result;
    _com_dispatch_method(this, 0x40f7, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x080c", Arg1, Arg2, Arg3, Arg4, &Arg5);
    return _result;
}

#pragma implementation_key(7583)
inline _variant_t Excel::WorksheetFunction::Frequency ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x40fc, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _variant_t(_result, false);
}

#pragma implementation_key(7584)
inline double Excel::WorksheetFunction::AveDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x410d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7585)
inline double Excel::WorksheetFunction::BetaDist ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    _com_dispatch_method(this, 0x410e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

#pragma implementation_key(7586)
inline double Excel::WorksheetFunction::GammaLn ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x410f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7587)
inline double Excel::WorksheetFunction::BetaInv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 ) {
    double _result;
    _com_dispatch_method(this, 0x4110, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x080c\x080c", Arg1, Arg2, Arg3, &Arg4, &Arg5);
    return _result;
}

#pragma implementation_key(7588)
inline double Excel::WorksheetFunction::BinomDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result;
    _com_dispatch_method(this, 0x4111, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x000b", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

#pragma implementation_key(7589)
inline double Excel::WorksheetFunction::ChiDist ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4112, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7590)
inline double Excel::WorksheetFunction::ChiInv ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4113, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7591)
inline double Excel::WorksheetFunction::Combin ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4114, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7592)
inline double Excel::WorksheetFunction::Confidence ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4115, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7593)
inline double Excel::WorksheetFunction::CritBinom ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4116, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7594)
inline double Excel::WorksheetFunction::Even ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4117, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7595)
inline double Excel::WorksheetFunction::ExponDist ( double Arg1, double Arg2, VARIANT_BOOL Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4118, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x000b", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7596)
inline double Excel::WorksheetFunction::FDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4119, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7597)
inline double Excel::WorksheetFunction::FInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x411a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7598)
inline double Excel::WorksheetFunction::Fisher ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x411b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7599)
inline double Excel::WorksheetFunction::FisherInv ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x411c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7600)
inline double Excel::WorksheetFunction::Floor ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x411d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7601)
inline double Excel::WorksheetFunction::GammaDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result;
    _com_dispatch_method(this, 0x411e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x000b", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

#pragma implementation_key(7602)
inline double Excel::WorksheetFunction::GammaInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x411f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7603)
inline double Excel::WorksheetFunction::Ceiling ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4120, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7604)
inline double Excel::WorksheetFunction::HypGeomDist ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result;
    _com_dispatch_method(this, 0x4121, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

#pragma implementation_key(7605)
inline double Excel::WorksheetFunction::LogNormDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4122, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7606)
inline double Excel::WorksheetFunction::LogInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4123, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7607)
inline double Excel::WorksheetFunction::NegBinomDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4124, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7608)
inline double Excel::WorksheetFunction::NormDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result;
    _com_dispatch_method(this, 0x4125, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x000b", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

#pragma implementation_key(7609)
inline double Excel::WorksheetFunction::NormSDist ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4126, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7610)
inline double Excel::WorksheetFunction::NormInv ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4127, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7611)
inline double Excel::WorksheetFunction::NormSInv ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4128, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7612)
inline double Excel::WorksheetFunction::Standardize ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4129, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7613)
inline double Excel::WorksheetFunction::Odd ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x412a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7614)
inline double Excel::WorksheetFunction::Permut ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x412b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7615)
inline double Excel::WorksheetFunction::Poisson ( double Arg1, double Arg2, VARIANT_BOOL Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x412c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x000b", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7616)
inline double Excel::WorksheetFunction::TDist ( double Arg1, double Arg2, double Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x412d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005", Arg1, Arg2, Arg3);
    return _result;
}

#pragma implementation_key(7617)
inline double Excel::WorksheetFunction::Weibull ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 ) {
    double _result;
    _com_dispatch_method(this, 0x412e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x000b", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

#pragma implementation_key(7618)
inline double Excel::WorksheetFunction::SumXMY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x412f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7619)
inline double Excel::WorksheetFunction::SumX2MY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4130, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7620)
inline double Excel::WorksheetFunction::SumX2PY2 ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4131, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7621)
inline double Excel::WorksheetFunction::ChiTest ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4132, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7622)
inline double Excel::WorksheetFunction::Correl ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4133, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7623)
inline double Excel::WorksheetFunction::Covar ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4134, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7624)
inline double Excel::WorksheetFunction::Forecast ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4135, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x000c\x000c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7625)
inline double Excel::WorksheetFunction::FTest ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4136, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7626)
inline double Excel::WorksheetFunction::Intercept ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4137, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7627)
inline double Excel::WorksheetFunction::Pearson ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4138, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7628)
inline double Excel::WorksheetFunction::RSq ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4139, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7629)
inline double Excel::WorksheetFunction::StEyx ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x413a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7630)
inline double Excel::WorksheetFunction::Slope ( const _variant_t & Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x413b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c", &Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7631)
inline double Excel::WorksheetFunction::TTest ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, double Arg4 ) {
    double _result;
    _com_dispatch_method(this, 0x413c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c\x0005\x0005", &Arg1, &Arg2, Arg3, Arg4);
    return _result;
}

#pragma implementation_key(7632)
inline double Excel::WorksheetFunction::Prob ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, const _variant_t & Arg4 ) {
    double _result;
    _com_dispatch_method(this, 0x413d, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x000c\x0005\x080c", &Arg1, &Arg2, Arg3, &Arg4);
    return _result;
}

#pragma implementation_key(7633)
inline double Excel::WorksheetFunction::DevSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x413e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7634)
inline double Excel::WorksheetFunction::GeoMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x413f, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7635)
inline double Excel::WorksheetFunction::HarMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x4140, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7636)
inline double Excel::WorksheetFunction::SumSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x4141, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7637)
inline double Excel::WorksheetFunction::Kurt ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x4142, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7638)
inline double Excel::WorksheetFunction::Skew ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x4143, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7639)
inline double Excel::WorksheetFunction::ZTest ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4144, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005\x080c", &Arg1, Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7640)
inline double Excel::WorksheetFunction::Large ( const _variant_t & Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4145, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005", &Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7641)
inline double Excel::WorksheetFunction::Small ( const _variant_t & Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4146, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005", &Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7642)
inline double Excel::WorksheetFunction::Quartile ( const _variant_t & Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4147, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005", &Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7643)
inline double Excel::WorksheetFunction::Percentile ( const _variant_t & Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4148, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005", &Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7644)
inline double Excel::WorksheetFunction::PercentRank ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4149, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005\x080c", &Arg1, Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7645)
inline double Excel::WorksheetFunction::Mode ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x414a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7646)
inline double Excel::WorksheetFunction::TrimMean ( const _variant_t & Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x414b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x000c\x0005", &Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7647)
inline double Excel::WorksheetFunction::TInv ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x414c, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7648)
inline double Excel::WorksheetFunction::Power ( double Arg1, double Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x4151, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005", Arg1, Arg2);
    return _result;
}

#pragma implementation_key(7649)
inline double Excel::WorksheetFunction::Radians ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4156, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7650)
inline double Excel::WorksheetFunction::Degrees ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4157, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7651)
inline double Excel::WorksheetFunction::Subtotal ( double Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    double _result;
    _com_dispatch_method(this, 0x4158, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0009\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", Arg1, Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

#pragma implementation_key(7652)
inline double Excel::WorksheetFunction::SumIf ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 ) {
    double _result;
    _com_dispatch_method(this, 0x4159, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c\x080c", Arg1, &Arg2, &Arg3);
    return _result;
}

#pragma implementation_key(7653)
inline double Excel::WorksheetFunction::CountIf ( struct Range * Arg1, const _variant_t & Arg2 ) {
    double _result;
    _com_dispatch_method(this, 0x415a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009\x000c", Arg1, &Arg2);
    return _result;
}

#pragma implementation_key(7654)
inline double Excel::WorksheetFunction::CountBlank ( struct Range * Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x415b, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0009", Arg1);
    return _result;
}

#pragma implementation_key(7655)
inline double Excel::WorksheetFunction::Ispmt ( double Arg1, double Arg2, double Arg3, double Arg4 ) {
    double _result;
    _com_dispatch_method(this, 0x415e, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Arg1, Arg2, Arg3, Arg4);
    return _result;
}

#pragma implementation_key(7656)
inline _bstr_t Excel::WorksheetFunction::Roman ( double Arg1, const _variant_t & Arg2 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4162, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005\x080c", Arg1, &Arg2);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7657)
inline _bstr_t Excel::WorksheetFunction::Asc ( _bstr_t Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x40d6, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7658)
inline _bstr_t Excel::WorksheetFunction::Dbcs ( _bstr_t Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x40d7, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7659)
inline _bstr_t Excel::WorksheetFunction::Phonetic ( struct Range * Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4168, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0009", Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7660)
inline _bstr_t Excel::WorksheetFunction::BahtText ( double Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4170, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005", Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7661)
inline _bstr_t Excel::WorksheetFunction::ThaiDayOfWeek ( double Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4171, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005", Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7662)
inline _bstr_t Excel::WorksheetFunction::ThaiDigit ( _bstr_t Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4172, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7663)
inline _bstr_t Excel::WorksheetFunction::ThaiMonthOfYear ( double Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4173, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005", Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7664)
inline _bstr_t Excel::WorksheetFunction::ThaiNumSound ( double Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4174, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005", Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7665)
inline _bstr_t Excel::WorksheetFunction::ThaiNumString ( double Arg1 ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4175, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0005", Arg1);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7666)
inline double Excel::WorksheetFunction::ThaiStringLength ( _bstr_t Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4176, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _result;
}

#pragma implementation_key(7667)
inline VARIANT_BOOL Excel::WorksheetFunction::IsThaiDigit ( _bstr_t Arg1 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4177, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x0008", (BSTR)Arg1);
    return _result;
}

#pragma implementation_key(7668)
inline double Excel::WorksheetFunction::RoundBahtDown ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4178, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7669)
inline double Excel::WorksheetFunction::RoundBahtUp ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x4179, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7670)
inline double Excel::WorksheetFunction::ThaiYear ( double Arg1 ) {
    double _result;
    _com_dispatch_method(this, 0x417a, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0005", Arg1);
    return _result;
}

#pragma implementation_key(7671)
inline _variant_t Excel::WorksheetFunction::RTD ( const _variant_t & progID, const _variant_t & server, const _variant_t & topic1, const _variant_t & topic2, const _variant_t & topic3, const _variant_t & topic4, const _variant_t & topic5, const _variant_t & topic6, const _variant_t & topic7, const _variant_t & topic8, const _variant_t & topic9, const _variant_t & topic10, const _variant_t & topic11, const _variant_t & topic12, const _variant_t & topic13, const _variant_t & topic14, const _variant_t & topic15, const _variant_t & topic16, const _variant_t & topic17, const _variant_t & topic18, const _variant_t & topic19, const _variant_t & topic20, const _variant_t & topic21, const _variant_t & topic22, const _variant_t & topic23, const _variant_t & topic24, const _variant_t & topic25, const _variant_t & topic26, const _variant_t & topic27, const _variant_t & topic28 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x417b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &progID, &server, &topic1, &topic2, &topic3, &topic4, &topic5, &topic6, &topic7, &topic8, &topic9, &topic10, &topic11, &topic12, &topic13, &topic14, &topic15, &topic16, &topic17, &topic18, &topic19, &topic20, &topic21, &topic22, &topic23, &topic24, &topic25, &topic26, &topic27, &topic28);
    return _variant_t(_result, false);
}

//
// dispinterface Range wrapper method implementations
//

#pragma implementation_key(7672)
inline Excel::_ApplicationPtr Excel::Range::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7673)
inline enum XlCreator Excel::Range::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7674)
inline IDispatchPtr Excel::Range::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7675)
inline _variant_t Excel::Range::Activate ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7676)
inline _variant_t Excel::Range::GetAddIndent ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7677)
inline void Excel::Range::PutAddIndent ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7678)
inline _bstr_t Excel::Range::GetAddress ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo ) {
    BSTR _result;
    _com_dispatch_method(this, 0xec, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, 
        L"\x000c\x000c\x0003\x080c\x080c", &RowAbsolute, &ColumnAbsolute, ReferenceStyle, &External, &RelativeTo);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7679)
inline _bstr_t Excel::Range::GetAddressLocal ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo ) {
    BSTR _result;
    _com_dispatch_method(this, 0x1b5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, 
        L"\x000c\x000c\x0003\x080c\x080c", &RowAbsolute, &ColumnAbsolute, ReferenceStyle, &External, &RelativeTo);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7680)
inline _variant_t Excel::Range::AdvancedFilter ( enum XlFilterAction Action, const _variant_t & CriteriaRange, const _variant_t & CopyToRange, const _variant_t & Unique ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x36c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c", Action, &CriteriaRange, &CopyToRange, &Unique);
    return _variant_t(_result, false);
}

#pragma implementation_key(7681)
inline _variant_t Excel::Range::ApplyNames ( const _variant_t & Names, const _variant_t & IgnoreRelativeAbsolute, const _variant_t & UseRowColumnNames, const _variant_t & OmitColumn, const _variant_t & OmitRow, enum XlApplyNamesOrder Order, const _variant_t & AppendLast ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1b9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x000c\x000c\x000c\x0003\x080c", &Names, &IgnoreRelativeAbsolute, &UseRowColumnNames, &OmitColumn, &OmitRow, Order, &AppendLast);
    return _variant_t(_result, false);
}

#pragma implementation_key(7682)
inline _variant_t Excel::Range::ApplyOutlineStyles ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1c0, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7683)
inline Excel::AreasPtr Excel::Range::GetAreas ( ) {
    struct Areas * _result;
    _com_dispatch_method(this, 0x238, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AreasPtr(_result, false);
}

#pragma implementation_key(7684)
inline _bstr_t Excel::Range::AutoComplete ( _bstr_t String ) {
    BSTR _result;
    _com_dispatch_method(this, 0x4a1, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008", (BSTR)String);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7685)
inline _variant_t Excel::Range::AutoFill ( struct Range * Destination, enum XlAutoFillType Type ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1c1, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0009\x0003", Destination, Type);
    return _variant_t(_result, false);
}

#pragma implementation_key(7686)
inline _variant_t Excel::Range::AutoFilter ( const _variant_t & Field, const _variant_t & Criteria1, enum XlAutoFilterOperator Operator, const _variant_t & Criteria2, const _variant_t & VisibleDropDown ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x319, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x000c\x0003\x080c\x080c", &Field, &Criteria1, Operator, &Criteria2, &VisibleDropDown);
    return _variant_t(_result, false);
}

#pragma implementation_key(7687)
inline _variant_t Excel::Range::AutoFit ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xed, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7688)
inline _variant_t Excel::Range::AutoFormat ( enum XlRangeAutoFormat Format, const _variant_t & Number, const _variant_t & Font, const _variant_t & Alignment, const _variant_t & Border, const _variant_t & Pattern, const _variant_t & Width ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x72, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c\x080c\x080c\x080c", Format, &Number, &Font, &Alignment, &Border, &Pattern, &Width);
    return _variant_t(_result, false);
}

#pragma implementation_key(7689)
inline _variant_t Excel::Range::AutoOutline ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x40c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7690)
inline _variant_t Excel::Range::BorderAround ( const _variant_t & LineStyle, enum XlBorderWeight Weight, enum XlColorIndex ColorIndex, const _variant_t & Color ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x42b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0003\x0003\x080c", &LineStyle, Weight, ColorIndex, &Color);
    return _variant_t(_result, false);
}

#pragma implementation_key(7691)
inline Excel::BordersPtr Excel::Range::GetBorders ( ) {
    struct Borders * _result;
    _com_dispatch_method(this, 0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BordersPtr(_result, false);
}

#pragma implementation_key(7692)
inline _variant_t Excel::Range::Calculate ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x117, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7693)
inline Excel::RangePtr Excel::Range::GetCells ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7694)
inline Excel::CharactersPtr Excel::Range::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(7695)
inline _variant_t Excel::Range::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(7696)
inline _variant_t Excel::Range::Clear ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6f, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7697)
inline _variant_t Excel::Range::ClearContents ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x71, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7698)
inline _variant_t Excel::Range::ClearFormats ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7699)
inline _variant_t Excel::Range::ClearNotes ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xef, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7700)
inline _variant_t Excel::Range::ClearOutline ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x40d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7701)
inline long Excel::Range::GetColumn ( ) {
    long _result;
    _com_dispatch_method(this, 0xf0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7702)
inline Excel::RangePtr Excel::Range::ColumnDifferences ( const _variant_t & Comparison ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x1fe, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Comparison);
    return RangePtr(_result, false);
}

#pragma implementation_key(7703)
inline Excel::RangePtr Excel::Range::GetColumns ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xf1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7704)
inline _variant_t Excel::Range::GetColumnWidth ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xf2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7705)
inline void Excel::Range::PutColumnWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xf2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7706)
inline _variant_t Excel::Range::Consolidate ( const _variant_t & Sources, const _variant_t & Function, const _variant_t & TopRow, const _variant_t & LeftColumn, const _variant_t & CreateLinks ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1e2, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c", &Sources, &Function, &TopRow, &LeftColumn, &CreateLinks);
    return _variant_t(_result, false);
}

#pragma implementation_key(7707)
inline _variant_t Excel::Range::Copy ( const _variant_t & Destination ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Destination);
    return _variant_t(_result, false);
}

#pragma implementation_key(7708)
inline long Excel::Range::CopyFromRecordset ( IUnknown * Data, const _variant_t & MaxRows, const _variant_t & MaxColumns ) {
    long _result;
    _com_dispatch_method(this, 0x480, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x000d\x080c\x080c", Data, &MaxRows, &MaxColumns);
    return _result;
}

#pragma implementation_key(7709)
inline _variant_t Excel::Range::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(7710)
inline long Excel::Range::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7711)
inline _variant_t Excel::Range::CreateNames ( const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1c9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Top, &Left, &Bottom, &Right);
    return _variant_t(_result, false);
}

#pragma implementation_key(7712)
inline _variant_t Excel::Range::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1ca, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0003\x080c\x080c\x080c\x080c", &Edition, Appearance, &ContainsPICT, &ContainsBIFF, &ContainsRTF, &ContainsVALU);
    return _variant_t(_result, false);
}

#pragma implementation_key(7713)
inline Excel::RangePtr Excel::Range::GetCurrentArray ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x1f5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7714)
inline Excel::RangePtr Excel::Range::GetCurrentRegion ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xf3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7715)
inline _variant_t Excel::Range::Cut ( const _variant_t & Destination ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Destination);
    return _variant_t(_result, false);
}

#pragma implementation_key(7716)
inline _variant_t Excel::Range::DataSeries ( const _variant_t & Rowcol, enum XlDataSeriesType Type, enum XlDataSeriesDate Date, const _variant_t & Step, const _variant_t & Stop, const _variant_t & Trend ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1d0, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0003\x0003\x080c\x080c\x080c", &Rowcol, Type, Date, &Step, &Stop, &Trend);
    return _variant_t(_result, false);
}

#pragma implementation_key(7717)
inline _variant_t Excel::Range::Get_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &RowIndex, &ColumnIndex);
    return _variant_t(_result, false);
}

#pragma implementation_key(7718)
inline void Excel::Range::Put_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, const _variant_t & _arg3 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c\x080c", &RowIndex, &ColumnIndex, &_arg3);
}

#pragma implementation_key(7719)
inline _variant_t Excel::Range::Delete ( const _variant_t & Shift ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Shift);
    return _variant_t(_result, false);
}

#pragma implementation_key(7720)
inline Excel::RangePtr Excel::Range::GetDependents ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x21f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7721)
inline _variant_t Excel::Range::ignorethis ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xf5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7722)
inline Excel::RangePtr Excel::Range::GetDirectDependents ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x221, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7723)
inline Excel::RangePtr Excel::Range::GetDirectPrecedents ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x222, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7724)
inline _variant_t Excel::Range::EditionOptions ( enum XlEditionType Type, enum XlEditionOptionsOption Option, const _variant_t & Name, const _variant_t & Reference, enum XlPictureAppearance Appearance, enum XlPictureAppearance ChartSize, const _variant_t & Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x46b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003\x000c\x000c\x0003\x0003\x080c", Type, Option, &Name, &Reference, Appearance, ChartSize, &Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(7725)
inline Excel::RangePtr Excel::Range::GetEnd ( enum XlDirection Direction ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x1f4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Direction);
    return RangePtr(_result, false);
}

#pragma implementation_key(7726)
inline Excel::RangePtr Excel::Range::GetEntireColumn ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xf6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7727)
inline Excel::RangePtr Excel::Range::GetEntireRow ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xf7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7728)
inline _variant_t Excel::Range::FillDown ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xf8, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7729)
inline _variant_t Excel::Range::FillLeft ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xf9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7730)
inline _variant_t Excel::Range::FillRight ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xfa, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7731)
inline _variant_t Excel::Range::FillUp ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xfb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7732)
inline Excel::RangePtr Excel::Range::Find ( const _variant_t & What, const _variant_t & After, const _variant_t & LookIn, const _variant_t & LookAt, const _variant_t & SearchOrder, enum XlSearchDirection SearchDirection, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x18e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c\x000c\x000c\x000c\x000c\x0003\x080c\x080c\x080c", &What, &After, &LookIn, &LookAt, &SearchOrder, SearchDirection, &MatchCase, &MatchByte, &SearchFormat);
    return RangePtr(_result, false);
}

#pragma implementation_key(7733)
inline Excel::RangePtr Excel::Range::FindNext ( const _variant_t & After ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x18f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &After);
    return RangePtr(_result, false);
}

#pragma implementation_key(7734)
inline Excel::RangePtr Excel::Range::FindPrevious ( const _variant_t & After ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &After);
    return RangePtr(_result, false);
}

#pragma implementation_key(7735)
inline Excel::FontPtr Excel::Range::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(7736)
inline _variant_t Excel::Range::GetFormula ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7737)
inline void Excel::Range::PutFormula ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7738)
inline _variant_t Excel::Range::GetFormulaArray ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x24a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7739)
inline void Excel::Range::PutFormulaArray ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x24a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7740)
inline enum XlFormulaLabel Excel::Range::GetFormulaLabel ( ) {
    enum XlFormulaLabel _result;
    _com_dispatch_method(this, 0x564, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7741)
inline void Excel::Range::PutFormulaLabel ( enum XlFormulaLabel _arg1 ) {
    _com_dispatch_method(this, 0x564, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7742)
inline _variant_t Excel::Range::GetFormulaHidden ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x106, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7743)
inline void Excel::Range::PutFormulaHidden ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x106, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7744)
inline _variant_t Excel::Range::GetFormulaLocal ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x107, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7745)
inline void Excel::Range::PutFormulaLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x107, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7746)
inline _variant_t Excel::Range::GetFormulaR1C1 ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x108, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7747)
inline void Excel::Range::PutFormulaR1C1 ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x108, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7748)
inline _variant_t Excel::Range::GetFormulaR1C1Local ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x109, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7749)
inline void Excel::Range::PutFormulaR1C1Local ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x109, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7750)
inline _variant_t Excel::Range::FunctionWizard ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x23b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7751)
inline VARIANT_BOOL Excel::Range::GoalSeek ( const _variant_t & Goal, struct Range * ChangingCell ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x1d8, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x0009", &Goal, ChangingCell);
    return _result;
}

#pragma implementation_key(7752)
inline _variant_t Excel::Range::Group ( const _variant_t & Start, const _variant_t & End, const _variant_t & By, const _variant_t & Periods ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Start, &End, &By, &Periods);
    return _variant_t(_result, false);
}

#pragma implementation_key(7753)
inline _variant_t Excel::Range::GetHasArray ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x10a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7754)
inline _variant_t Excel::Range::GetHasFormula ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x10b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7755)
inline _variant_t Excel::Range::GetHeight ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7756)
inline _variant_t Excel::Range::GetHidden ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x10c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7757)
inline void Excel::Range::PutHidden ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x10c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7758)
inline _variant_t Excel::Range::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7759)
inline void Excel::Range::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7760)
inline _variant_t Excel::Range::GetIndentLevel ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7761)
inline void Excel::Range::PutIndentLevel ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7762)
inline HRESULT Excel::Range::InsertIndent ( long InsertAmount ) {
    return _com_dispatch_method(this, 0x565, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", InsertAmount);
}

#pragma implementation_key(7763)
inline _variant_t Excel::Range::Insert ( const _variant_t & Shift, const _variant_t & CopyOrigin ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xfc, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &Shift, &CopyOrigin);
    return _variant_t(_result, false);
}

#pragma implementation_key(7764)
inline Excel::InteriorPtr Excel::Range::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(7765)
inline _variant_t Excel::Range::GetItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &RowIndex, &ColumnIndex);
    return _variant_t(_result, false);
}

#pragma implementation_key(7766)
inline void Excel::Range::PutItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, const _variant_t & _arg3 ) {
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x000c\x080c", &RowIndex, &ColumnIndex, &_arg3);
}

#pragma implementation_key(7767)
inline _variant_t Excel::Range::Justify ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1ef, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7768)
inline _variant_t Excel::Range::GetLeft ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7769)
inline long Excel::Range::GetListHeaderRows ( ) {
    long _result;
    _com_dispatch_method(this, 0x4a3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7770)
inline _variant_t Excel::Range::ListNames ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xfd, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7771)
inline enum XlLocationInTable Excel::Range::GetLocationInTable ( ) {
    enum XlLocationInTable _result;
    _com_dispatch_method(this, 0x2b3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7772)
inline _variant_t Excel::Range::GetLocked ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7773)
inline void Excel::Range::PutLocked ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7774)
inline HRESULT Excel::Range::Merge ( const _variant_t & Across ) {
    return _com_dispatch_method(this, 0x234, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Across);
}

#pragma implementation_key(7775)
inline HRESULT Excel::Range::UnMerge ( ) {
    return _com_dispatch_method(this, 0x568, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7776)
inline Excel::RangePtr Excel::Range::GetMergeArea ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x569, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7777)
inline _variant_t Excel::Range::GetMergeCells ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7778)
inline void Excel::Range::PutMergeCells ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7779)
inline _variant_t Excel::Range::GetName ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7780)
inline void Excel::Range::PutName ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7781)
inline _variant_t Excel::Range::NavigateArrow ( const _variant_t & TowardPrecedent, const _variant_t & ArrowNumber, const _variant_t & LinkNumber ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x408, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c", &TowardPrecedent, &ArrowNumber, &LinkNumber);
    return _variant_t(_result, false);
}

#pragma implementation_key(7782)
inline IUnknownPtr Excel::Range::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7783)
inline Excel::RangePtr Excel::Range::GetNext ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7784)
inline _bstr_t Excel::Range::NoteText ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Length ) {
    BSTR _result;
    _com_dispatch_method(this, 0x467, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x080c\x080c\x080c", &Text, &Start, &Length);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7785)
inline _variant_t Excel::Range::GetNumberFormat ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7786)
inline void Excel::Range::PutNumberFormat ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7787)
inline _variant_t Excel::Range::GetNumberFormatLocal ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7788)
inline void Excel::Range::PutNumberFormatLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7789)
inline Excel::RangePtr Excel::Range::GetOffset ( const _variant_t & RowOffset, const _variant_t & ColumnOffset ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xfe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &RowOffset, &ColumnOffset);
    return RangePtr(_result, false);
}

#pragma implementation_key(7790)
inline _variant_t Excel::Range::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7791)
inline void Excel::Range::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7792)
inline _variant_t Excel::Range::GetOutlineLevel ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x10f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7793)
inline void Excel::Range::PutOutlineLevel ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x10f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7794)
inline long Excel::Range::GetPageBreak ( ) {
    long _result;
    _com_dispatch_method(this, 0xff, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7795)
inline void Excel::Range::PutPageBreak ( long _arg1 ) {
    _com_dispatch_method(this, 0xff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7796)
inline _variant_t Excel::Range::Parse ( const _variant_t & ParseLine, const _variant_t & Destination ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1dd, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &ParseLine, &Destination);
    return _variant_t(_result, false);
}

#pragma implementation_key(7797)
inline _variant_t Excel::Range::_PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x403, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003\x080c\x080c", Paste, Operation, &SkipBlanks, &Transpose);
    return _variant_t(_result, false);
}

#pragma implementation_key(7798)
inline Excel::PivotFieldPtr Excel::Range::GetPivotField ( ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x2db, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(7799)
inline Excel::PivotItemPtr Excel::Range::GetPivotItem ( ) {
    struct PivotItem * _result;
    _com_dispatch_method(this, 0x2e4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(7800)
inline Excel::PivotTablePtr Excel::Range::GetPivotTable ( ) {
    struct PivotTable * _result;
    _com_dispatch_method(this, 0x2cc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(7801)
inline Excel::RangePtr Excel::Range::GetPrecedents ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x220, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7802)
inline _variant_t Excel::Range::GetPrefixCharacter ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7803)
inline Excel::RangePtr Excel::Range::GetPrevious ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7804)
inline _variant_t Excel::Range::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
    return _variant_t(_result, false);
}

#pragma implementation_key(7805)
inline _variant_t Excel::Range::PrintPreview ( const _variant_t & EnableChanges ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &EnableChanges);
    return _variant_t(_result, false);
}

#pragma implementation_key(7806)
inline Excel::_QueryTablePtr Excel::Range::GetQueryTable ( ) {
    struct _QueryTable * _result;
    _com_dispatch_method(this, 0x56a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _QueryTablePtr(_result, false);
}

#pragma implementation_key(7807)
inline Excel::RangePtr Excel::Range::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c\x080c", &Cell1, &Cell2);
    return RangePtr(_result, false);
}

#pragma implementation_key(7808)
inline _variant_t Excel::Range::RemoveSubtotal ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x373, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7809)
inline VARIANT_BOOL Excel::Range::Replace ( const _variant_t & What, const _variant_t & Replacement, const _variant_t & LookAt, const _variant_t & SearchOrder, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat, const _variant_t & ReplaceFormat ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xe2, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x000c\x000c\x080c\x080c\x080c\x080c\x080c\x080c", &What, &Replacement, &LookAt, &SearchOrder, &MatchCase, &MatchByte, &SearchFormat, &ReplaceFormat);
    return _result;
}

#pragma implementation_key(7810)
inline Excel::RangePtr Excel::Range::GetResize ( const _variant_t & RowSize, const _variant_t & ColumnSize ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x100, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &RowSize, &ColumnSize);
    return RangePtr(_result, false);
}

#pragma implementation_key(7811)
inline long Excel::Range::GetRow ( ) {
    long _result;
    _com_dispatch_method(this, 0x101, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7812)
inline Excel::RangePtr Excel::Range::RowDifferences ( const _variant_t & Comparison ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x1ff, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Comparison);
    return RangePtr(_result, false);
}

#pragma implementation_key(7813)
inline _variant_t Excel::Range::GetRowHeight ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x110, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7814)
inline void Excel::Range::PutRowHeight ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x110, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7815)
inline Excel::RangePtr Excel::Range::GetRows ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x102, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7816)
inline _variant_t Excel::Range::Run ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x103, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _variant_t(_result, false);
}

#pragma implementation_key(7817)
inline _variant_t Excel::Range::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7818)
inline _variant_t Excel::Range::Show ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f0, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7819)
inline _variant_t Excel::Range::ShowDependents ( const _variant_t & Remove ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x36d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Remove);
    return _variant_t(_result, false);
}

#pragma implementation_key(7820)
inline _variant_t Excel::Range::GetShowDetail ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x249, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7821)
inline void Excel::Range::PutShowDetail ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x249, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7822)
inline _variant_t Excel::Range::ShowErrors ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x36e, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7823)
inline _variant_t Excel::Range::ShowPrecedents ( const _variant_t & Remove ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x36f, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Remove);
    return _variant_t(_result, false);
}

#pragma implementation_key(7824)
inline _variant_t Excel::Range::GetShrinkToFit ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7825)
inline void Excel::Range::PutShrinkToFit ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xd1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7826)
inline _variant_t Excel::Range::Sort ( const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Key2, const _variant_t & Type, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortMethod SortMethod, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x370, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0003\x000c\x000c\x0003\x000c\x0003\x0003\x000c\x000c\x0003\x0003\x0003\x0003\x0003", &Key1, Order1, &Key2, &Type, Order2, &Key3, Order3, Header, &OrderCustom, &MatchCase, Orientation, SortMethod, DataOption1, DataOption2, DataOption3);
    return _variant_t(_result, false);
}

#pragma implementation_key(7827)
inline _variant_t Excel::Range::SortSpecial ( enum XlSortMethod SortMethod, const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Type, const _variant_t & Key2, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x371, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x000c\x0003\x000c\x000c\x0003\x000c\x0003\x0003\x000c\x000c\x0003\x0003\x0003\x0003", SortMethod, &Key1, Order1, &Type, &Key2, Order2, &Key3, Order3, Header, &OrderCustom, &MatchCase, Orientation, DataOption1, DataOption2, DataOption3);
    return _variant_t(_result, false);
}

#pragma implementation_key(7828)
inline Excel::SoundNotePtr Excel::Range::GetSoundNote ( ) {
    struct SoundNote * _result;
    _com_dispatch_method(this, 0x394, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return SoundNotePtr(_result, false);
}

#pragma implementation_key(7829)
inline Excel::RangePtr Excel::Range::SpecialCells ( enum XlCellType Type, const _variant_t & Value ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x19a, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x080c", Type, &Value);
    return RangePtr(_result, false);
}

#pragma implementation_key(7830)
inline _variant_t Excel::Range::GetStyle ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x104, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7831)
inline void Excel::Range::PutStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x104, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7832)
inline _variant_t Excel::Range::SubscribeTo ( _bstr_t Edition, enum XlSubscribeToFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1e1, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008\x0003", (BSTR)Edition, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(7833)
inline _variant_t Excel::Range::Subtotal ( long GroupBy, enum XlConsolidationFunction Function, const _variant_t & TotalList, const _variant_t & Replace, const _variant_t & PageBreaks, enum XlSummaryRow SummaryBelowData ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x372, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003\x000c\x000c\x000c\x0003", GroupBy, Function, &TotalList, &Replace, &PageBreaks, SummaryBelowData);
    return _variant_t(_result, false);
}

#pragma implementation_key(7834)
inline _variant_t Excel::Range::GetSummary ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x111, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7835)
inline _variant_t Excel::Range::Table ( const _variant_t & RowInput, const _variant_t & ColumnInput ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f1, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &RowInput, &ColumnInput);
    return _variant_t(_result, false);
}

#pragma implementation_key(7836)
inline _variant_t Excel::Range::GetText ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7837)
inline _variant_t Excel::Range::TextToColumns ( const _variant_t & Destination, enum XlTextParsingType DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, const _variant_t & TrailingMinusNumbers ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x410, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x0003\x0003\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Destination, DataType, TextQualifier, &ConsecutiveDelimiter, &Tab, &Semicolon, &Comma, &Space, &Other, &OtherChar, &FieldInfo, &DecimalSeparator, &ThousandsSeparator, &TrailingMinusNumbers);
    return _variant_t(_result, false);
}

#pragma implementation_key(7838)
inline _variant_t Excel::Range::GetTop ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7839)
inline _variant_t Excel::Range::Ungroup ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7840)
inline _variant_t Excel::Range::GetUseStandardHeight ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x112, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7841)
inline void Excel::Range::PutUseStandardHeight ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x112, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7842)
inline _variant_t Excel::Range::GetUseStandardWidth ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x113, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7843)
inline void Excel::Range::PutUseStandardWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x113, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7844)
inline Excel::ValidationPtr Excel::Range::GetValidation ( ) {
    struct Validation * _result;
    _com_dispatch_method(this, 0x56b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ValidationPtr(_result, false);
}

#pragma implementation_key(7845)
inline _variant_t Excel::Range::GetValue ( const _variant_t & RangeValueDataType ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &RangeValueDataType);
    return _variant_t(_result, false);
}

#pragma implementation_key(7846)
inline void Excel::Range::PutValue ( const _variant_t & RangeValueDataType, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &RangeValueDataType, &_arg2);
}

#pragma implementation_key(7847)
inline _variant_t Excel::Range::GetValue2 ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x56c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7848)
inline void Excel::Range::PutValue2 ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x56c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7849)
inline _variant_t Excel::Range::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7850)
inline void Excel::Range::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7851)
inline _variant_t Excel::Range::GetWidth ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7852)
inline Excel::_WorksheetPtr Excel::Range::GetWorksheet ( ) {
    struct _Worksheet * _result;
    _com_dispatch_method(this, 0x15c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _WorksheetPtr(_result, false);
}

#pragma implementation_key(7853)
inline _variant_t Excel::Range::GetWrapText ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x114, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7854)
inline void Excel::Range::PutWrapText ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x114, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7855)
inline Excel::CommentPtr Excel::Range::AddComment ( const _variant_t & Text ) {
    struct Comment * _result;
    _com_dispatch_method(this, 0x56d, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Text);
    return CommentPtr(_result, false);
}

#pragma implementation_key(7856)
inline Excel::CommentPtr Excel::Range::GetComment ( ) {
    struct Comment * _result;
    _com_dispatch_method(this, 0x38e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CommentPtr(_result, false);
}

#pragma implementation_key(7857)
inline HRESULT Excel::Range::ClearComments ( ) {
    return _com_dispatch_method(this, 0x56e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7858)
inline Excel::PhoneticPtr Excel::Range::GetPhonetic ( ) {
    struct Phonetic * _result;
    _com_dispatch_method(this, 0x56f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PhoneticPtr(_result, false);
}

#pragma implementation_key(7859)
inline Excel::FormatConditionsPtr Excel::Range::GetFormatConditions ( ) {
    struct FormatConditions * _result;
    _com_dispatch_method(this, 0x570, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FormatConditionsPtr(_result, false);
}

#pragma implementation_key(7860)
inline long Excel::Range::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7861)
inline void Excel::Range::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7862)
inline Excel::HyperlinksPtr Excel::Range::GetHyperlinks ( ) {
    struct Hyperlinks * _result;
    _com_dispatch_method(this, 0x571, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(7863)
inline Excel::PhoneticsPtr Excel::Range::GetPhonetics ( ) {
    struct Phonetics * _result;
    _com_dispatch_method(this, 0x713, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PhoneticsPtr(_result, false);
}

#pragma implementation_key(7864)
inline HRESULT Excel::Range::SetPhonetic ( ) {
    return _com_dispatch_method(this, 0x714, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7865)
inline _bstr_t Excel::Range::GetID ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x715, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7866)
inline void Excel::Range::PutID ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x715, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(7867)
inline _variant_t Excel::Range::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
    return _variant_t(_result, false);
}

#pragma implementation_key(7868)
inline Excel::PivotCellPtr Excel::Range::GetPivotCell ( ) {
    struct PivotCell * _result;
    _com_dispatch_method(this, 0x7dd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotCellPtr(_result, false);
}

#pragma implementation_key(7869)
inline HRESULT Excel::Range::Dirty ( ) {
    return _com_dispatch_method(this, 0x7de, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7870)
inline Excel::ErrorsPtr Excel::Range::GetErrors ( ) {
    struct Errors * _result;
    _com_dispatch_method(this, 0x7df, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ErrorsPtr(_result, false);
}

#pragma implementation_key(7871)
inline Excel::SmartTagsPtr Excel::Range::GetSmartTags ( ) {
    struct SmartTags * _result;
    _com_dispatch_method(this, 0x7e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return SmartTagsPtr(_result, false);
}

#pragma implementation_key(7872)
inline HRESULT Excel::Range::Speak ( const _variant_t & SpeakDirection, const _variant_t & SpeakFormulas ) {
    return _com_dispatch_method(this, 0x7e1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &SpeakDirection, &SpeakFormulas);
}

#pragma implementation_key(7873)
inline _variant_t Excel::Range::PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x788, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003\x080c\x080c", Paste, Operation, &SkipBlanks, &Transpose);
    return _variant_t(_result, false);
}

#pragma implementation_key(7874)
inline VARIANT_BOOL Excel::Range::GetAllowEdit ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7e4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface ChartEvents wrapper method implementations
//

#pragma implementation_key(7875)
inline HRESULT Excel::ChartEvents::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7876)
inline HRESULT Excel::ChartEvents::Deactivate ( ) {
    return _com_dispatch_method(this, 0x5fa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7877)
inline HRESULT Excel::ChartEvents::Resize ( ) {
    return _com_dispatch_method(this, 0x100, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7878)
inline HRESULT Excel::ChartEvents::MouseDown ( long Button, long Shift, long x, long y ) {
    return _com_dispatch_method(this, 0x5fb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, x, y);
}

#pragma implementation_key(7879)
inline HRESULT Excel::ChartEvents::MouseUp ( long Button, long Shift, long x, long y ) {
    return _com_dispatch_method(this, 0x5fc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, x, y);
}

#pragma implementation_key(7880)
inline HRESULT Excel::ChartEvents::MouseMove ( long Button, long Shift, long x, long y ) {
    return _com_dispatch_method(this, 0x5fd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", Button, Shift, x, y);
}

#pragma implementation_key(7881)
inline HRESULT Excel::ChartEvents::BeforeRightClick ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x5fe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(7882)
inline HRESULT Excel::ChartEvents::DragPlot ( ) {
    return _com_dispatch_method(this, 0x5ff, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7883)
inline HRESULT Excel::ChartEvents::DragOver ( ) {
    return _com_dispatch_method(this, 0x600, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7884)
inline HRESULT Excel::ChartEvents::BeforeDoubleClick ( long ElementID, long Arg1, long Arg2, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x601, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x400b", ElementID, Arg1, Arg2, Cancel);
}

#pragma implementation_key(7885)
inline HRESULT Excel::ChartEvents::Select ( long ElementID, long Arg1, long Arg2 ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003", ElementID, Arg1, Arg2);
}

#pragma implementation_key(7886)
inline HRESULT Excel::ChartEvents::SeriesChange ( long SeriesIndex, long PointIndex ) {
    return _com_dispatch_method(this, 0x602, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", SeriesIndex, PointIndex);
}

#pragma implementation_key(7887)
inline HRESULT Excel::ChartEvents::Calculate ( ) {
    return _com_dispatch_method(this, 0x117, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface VPageBreak wrapper method implementations
//

#pragma implementation_key(7888)
inline Excel::_ApplicationPtr Excel::VPageBreak::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7889)
inline enum XlCreator Excel::VPageBreak::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7890)
inline Excel::_WorksheetPtr Excel::VPageBreak::GetParent ( ) {
    struct _Worksheet * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _WorksheetPtr(_result, false);
}

#pragma implementation_key(7891)
inline HRESULT Excel::VPageBreak::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7892)
inline HRESULT Excel::VPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex ) {
    return _com_dispatch_method(this, 0x58c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", Direction, RegionIndex);
}

#pragma implementation_key(7893)
inline enum XlPageBreak Excel::VPageBreak::GetType ( ) {
    enum XlPageBreak _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7894)
inline void Excel::VPageBreak::PutType ( enum XlPageBreak _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7895)
inline enum XlPageBreakExtent Excel::VPageBreak::GetExtent ( ) {
    enum XlPageBreakExtent _result;
    _com_dispatch_method(this, 0x58e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7896)
inline Excel::RangePtr Excel::VPageBreak::GetLocation ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x575, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7897)
inline void Excel::VPageBreak::PutRefLocation ( struct Range * _arg1 ) {
    _com_dispatch_method(this, 0x575, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

//
// dispinterface HPageBreak wrapper method implementations
//

#pragma implementation_key(7898)
inline Excel::_ApplicationPtr Excel::HPageBreak::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7899)
inline enum XlCreator Excel::HPageBreak::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7900)
inline Excel::_WorksheetPtr Excel::HPageBreak::GetParent ( ) {
    struct _Worksheet * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _WorksheetPtr(_result, false);
}

#pragma implementation_key(7901)
inline HRESULT Excel::HPageBreak::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7902)
inline HRESULT Excel::HPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex ) {
    return _com_dispatch_method(this, 0x58c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", Direction, RegionIndex);
}

#pragma implementation_key(7903)
inline enum XlPageBreak Excel::HPageBreak::GetType ( ) {
    enum XlPageBreak _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7904)
inline void Excel::HPageBreak::PutType ( enum XlPageBreak _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7905)
inline enum XlPageBreakExtent Excel::HPageBreak::GetExtent ( ) {
    enum XlPageBreakExtent _result;
    _com_dispatch_method(this, 0x58e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7906)
inline Excel::RangePtr Excel::HPageBreak::GetLocation ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x575, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(7907)
inline void Excel::HPageBreak::PutRefLocation ( struct Range * _arg1 ) {
    _com_dispatch_method(this, 0x575, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

//
// dispinterface HPageBreaks wrapper method implementations
//

#pragma implementation_key(7908)
inline Excel::_ApplicationPtr Excel::HPageBreaks::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7909)
inline enum XlCreator Excel::HPageBreaks::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7910)
inline IDispatchPtr Excel::HPageBreaks::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7911)
inline long Excel::HPageBreaks::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7912)
inline Excel::HPageBreakPtr Excel::HPageBreaks::GetItem ( long Index ) {
    struct HPageBreak * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return HPageBreakPtr(_result, false);
}

#pragma implementation_key(7913)
inline Excel::HPageBreakPtr Excel::HPageBreaks::Get_Default ( long Index ) {
    struct HPageBreak * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return HPageBreakPtr(_result, false);
}

#pragma implementation_key(7914)
inline IUnknownPtr Excel::HPageBreaks::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7915)
inline Excel::HPageBreakPtr Excel::HPageBreaks::Add ( IDispatch * Before ) {
    struct HPageBreak * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0009", Before);
    return HPageBreakPtr(_result, false);
}

//
// dispinterface VPageBreaks wrapper method implementations
//

#pragma implementation_key(7916)
inline Excel::_ApplicationPtr Excel::VPageBreaks::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7917)
inline enum XlCreator Excel::VPageBreaks::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7918)
inline IDispatchPtr Excel::VPageBreaks::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7919)
inline long Excel::VPageBreaks::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7920)
inline Excel::VPageBreakPtr Excel::VPageBreaks::GetItem ( long Index ) {
    struct VPageBreak * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return VPageBreakPtr(_result, false);
}

#pragma implementation_key(7921)
inline Excel::VPageBreakPtr Excel::VPageBreaks::Get_Default ( long Index ) {
    struct VPageBreak * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return VPageBreakPtr(_result, false);
}

#pragma implementation_key(7922)
inline IUnknownPtr Excel::VPageBreaks::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(7923)
inline Excel::VPageBreakPtr Excel::VPageBreaks::Add ( IDispatch * Before ) {
    struct VPageBreak * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0009", Before);
    return VPageBreakPtr(_result, false);
}

//
// dispinterface RecentFile wrapper method implementations
//

#pragma implementation_key(7924)
inline Excel::_ApplicationPtr Excel::RecentFile::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7925)
inline enum XlCreator Excel::RecentFile::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7926)
inline IDispatchPtr Excel::RecentFile::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7927)
inline _bstr_t Excel::RecentFile::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7928)
inline _bstr_t Excel::RecentFile::GetPath ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7929)
inline long Excel::RecentFile::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7930)
inline Excel::_WorkbookPtr Excel::RecentFile::Open ( ) {
    struct _Workbook * _result;
    _com_dispatch_method(this, 0x783, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return _WorkbookPtr(_result, false);
}

#pragma implementation_key(7931)
inline HRESULT Excel::RecentFile::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface RecentFiles wrapper method implementations
//

#pragma implementation_key(7932)
inline Excel::_ApplicationPtr Excel::RecentFiles::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7933)
inline enum XlCreator Excel::RecentFiles::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7934)
inline IDispatchPtr Excel::RecentFiles::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7935)
inline long Excel::RecentFiles::GetMaximum ( ) {
    long _result;
    _com_dispatch_method(this, 0x58f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7936)
inline void Excel::RecentFiles::PutMaximum ( long _arg1 ) {
    _com_dispatch_method(this, 0x58f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7937)
inline long Excel::RecentFiles::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7938)
inline Excel::RecentFilePtr Excel::RecentFiles::GetItem ( long Index ) {
    struct RecentFile * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return RecentFilePtr(_result, false);
}

#pragma implementation_key(7939)
inline Excel::RecentFilePtr Excel::RecentFiles::Get_Default ( long Index ) {
    struct RecentFile * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return RecentFilePtr(_result, false);
}

#pragma implementation_key(7940)
inline Excel::RecentFilePtr Excel::RecentFiles::Add ( _bstr_t Name ) {
    struct RecentFile * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008", (BSTR)Name);
    return RecentFilePtr(_result, false);
}

#pragma implementation_key(7941)
inline IUnknownPtr Excel::RecentFiles::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface DocEvents wrapper method implementations
//

#pragma implementation_key(7942)
inline HRESULT Excel::DocEvents::SelectionChange ( struct Range * Target ) {
    return _com_dispatch_method(this, 0x607, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Target);
}

#pragma implementation_key(7943)
inline HRESULT Excel::DocEvents::BeforeDoubleClick ( struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x601, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Target, Cancel);
}

#pragma implementation_key(7944)
inline HRESULT Excel::DocEvents::BeforeRightClick ( struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x5fe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Target, Cancel);
}

#pragma implementation_key(7945)
inline HRESULT Excel::DocEvents::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7946)
inline HRESULT Excel::DocEvents::Deactivate ( ) {
    return _com_dispatch_method(this, 0x5fa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7947)
inline HRESULT Excel::DocEvents::Calculate ( ) {
    return _com_dispatch_method(this, 0x117, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7948)
inline HRESULT Excel::DocEvents::Change ( struct Range * Target ) {
    return _com_dispatch_method(this, 0x609, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Target);
}

#pragma implementation_key(7949)
inline HRESULT Excel::DocEvents::FollowHyperlink ( struct Hyperlink * Target ) {
    return _com_dispatch_method(this, 0x5be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Target);
}

#pragma implementation_key(7950)
inline HRESULT Excel::DocEvents::PivotTableUpdate ( struct PivotTable * Target ) {
    return _com_dispatch_method(this, 0x86c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Target);
}

//
// dispinterface Style wrapper method implementations
//

#pragma implementation_key(7951)
inline Excel::_ApplicationPtr Excel::Style::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(7952)
inline enum XlCreator Excel::Style::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7953)
inline IDispatchPtr Excel::Style::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7954)
inline VARIANT_BOOL Excel::Style::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7955)
inline void Excel::Style::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7956)
inline VARIANT_BOOL Excel::Style::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7957)
inline Excel::BordersPtr Excel::Style::GetBorders ( ) {
    struct Borders * _result;
    _com_dispatch_method(this, 0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BordersPtr(_result, false);
}

#pragma implementation_key(7958)
inline _variant_t Excel::Style::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7959)
inline Excel::FontPtr Excel::Style::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(7960)
inline VARIANT_BOOL Excel::Style::GetFormulaHidden ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x106, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7961)
inline void Excel::Style::PutFormulaHidden ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x106, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7962)
inline enum XlHAlign Excel::Style::GetHorizontalAlignment ( ) {
    enum XlHAlign _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7963)
inline void Excel::Style::PutHorizontalAlignment ( enum XlHAlign _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7964)
inline VARIANT_BOOL Excel::Style::GetIncludeAlignment ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x19d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7965)
inline void Excel::Style::PutIncludeAlignment ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x19d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7966)
inline VARIANT_BOOL Excel::Style::GetIncludeBorder ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x19e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7967)
inline void Excel::Style::PutIncludeBorder ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x19e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7968)
inline VARIANT_BOOL Excel::Style::GetIncludeFont ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x19f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7969)
inline void Excel::Style::PutIncludeFont ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x19f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7970)
inline VARIANT_BOOL Excel::Style::GetIncludeNumber ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x1a0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7971)
inline void Excel::Style::PutIncludeNumber ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7972)
inline VARIANT_BOOL Excel::Style::GetIncludePatterns ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x1a1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7973)
inline void Excel::Style::PutIncludePatterns ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7974)
inline VARIANT_BOOL Excel::Style::GetIncludeProtection ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x1a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7975)
inline void Excel::Style::PutIncludeProtection ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7976)
inline long Excel::Style::GetIndentLevel ( ) {
    long _result;
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7977)
inline void Excel::Style::PutIndentLevel ( long _arg1 ) {
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7978)
inline Excel::InteriorPtr Excel::Style::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(7979)
inline VARIANT_BOOL Excel::Style::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7980)
inline void Excel::Style::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7981)
inline _variant_t Excel::Style::GetMergeCells ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(7982)
inline void Excel::Style::PutMergeCells ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(7983)
inline _bstr_t Excel::Style::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7984)
inline _bstr_t Excel::Style::GetNameLocal ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3a9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7985)
inline _bstr_t Excel::Style::GetNumberFormat ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7986)
inline void Excel::Style::PutNumberFormat ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(7987)
inline _bstr_t Excel::Style::GetNumberFormatLocal ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7988)
inline void Excel::Style::PutNumberFormatLocal ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(7989)
inline enum XlOrientation Excel::Style::GetOrientation ( ) {
    enum XlOrientation _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7990)
inline void Excel::Style::PutOrientation ( enum XlOrientation _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7991)
inline VARIANT_BOOL Excel::Style::GetShrinkToFit ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xd1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7992)
inline void Excel::Style::PutShrinkToFit ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xd1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7993)
inline _bstr_t Excel::Style::GetValue ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7994)
inline enum XlVAlign Excel::Style::GetVerticalAlignment ( ) {
    enum XlVAlign _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7995)
inline void Excel::Style::PutVerticalAlignment ( enum XlVAlign _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(7996)
inline VARIANT_BOOL Excel::Style::GetWrapText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x114, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(7997)
inline void Excel::Style::PutWrapText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x114, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(7998)
inline _bstr_t Excel::Style::Get_Default ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(7999)
inline long Excel::Style::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8000)
inline void Excel::Style::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Styles wrapper method implementations
//

#pragma implementation_key(8001)
inline Excel::_ApplicationPtr Excel::Styles::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8002)
inline enum XlCreator Excel::Styles::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8003)
inline IDispatchPtr Excel::Styles::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8004)
inline Excel::StylePtr Excel::Styles::Add ( _bstr_t Name, const _variant_t & BasedOn ) {
    struct Style * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c", (BSTR)Name, &BasedOn);
    return StylePtr(_result, false);
}

#pragma implementation_key(8005)
inline long Excel::Styles::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8006)
inline Excel::StylePtr Excel::Styles::GetItem ( const _variant_t & Index ) {
    struct Style * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return StylePtr(_result, false);
}

#pragma implementation_key(8007)
inline _variant_t Excel::Styles::Merge ( const _variant_t & Workbook ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x234, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Workbook);
    return _variant_t(_result, false);
}

#pragma implementation_key(8008)
inline IUnknownPtr Excel::Styles::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8009)
inline Excel::StylePtr Excel::Styles::Get_Default ( const _variant_t & Index ) {
    struct Style * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return StylePtr(_result, false);
}

//
// dispinterface Borders wrapper method implementations
//

#pragma implementation_key(8010)
inline Excel::_ApplicationPtr Excel::Borders::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8011)
inline enum XlCreator Excel::Borders::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8012)
inline IDispatchPtr Excel::Borders::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8013)
inline _variant_t Excel::Borders::GetColor ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8014)
inline void Excel::Borders::PutColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8015)
inline _variant_t Excel::Borders::GetColorIndex ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8016)
inline void Excel::Borders::PutColorIndex ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8017)
inline long Excel::Borders::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8018)
inline Excel::BorderPtr Excel::Borders::GetItem ( enum XlBordersIndex Index ) {
    struct Border * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return BorderPtr(_result, false);
}

#pragma implementation_key(8019)
inline _variant_t Excel::Borders::GetLineStyle ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x77, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8020)
inline void Excel::Borders::PutLineStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x77, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8021)
inline IUnknownPtr Excel::Borders::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8022)
inline _variant_t Excel::Borders::GetValue ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8023)
inline void Excel::Borders::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8024)
inline _variant_t Excel::Borders::GetWeight ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x78, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8025)
inline void Excel::Borders::PutWeight ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x78, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8026)
inline Excel::BorderPtr Excel::Borders::Get_Default ( enum XlBordersIndex Index ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return BorderPtr(_result, false);
}

//
// dispinterface AddIn wrapper method implementations
//

#pragma implementation_key(8027)
inline Excel::_ApplicationPtr Excel::AddIn::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8028)
inline enum XlCreator Excel::AddIn::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8029)
inline IDispatchPtr Excel::AddIn::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8030)
inline _bstr_t Excel::AddIn::GetAuthor ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x23e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8031)
inline _bstr_t Excel::AddIn::GetComments ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x23f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8032)
inline _bstr_t Excel::AddIn::GetFullName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x121, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8033)
inline VARIANT_BOOL Excel::AddIn::GetInstalled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x226, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8034)
inline void Excel::AddIn::PutInstalled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x226, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8035)
inline _bstr_t Excel::AddIn::GetKeywords ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x241, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8036)
inline _bstr_t Excel::AddIn::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8037)
inline _bstr_t Excel::AddIn::GetPath ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8038)
inline _bstr_t Excel::AddIn::GetSubject ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8039)
inline _bstr_t Excel::AddIn::GetTitle ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0xc7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8040)
inline _bstr_t Excel::AddIn::GetprogID ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8041)
inline _bstr_t Excel::AddIn::GetCLSID ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x7fb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

//
// dispinterface AddIns wrapper method implementations
//

#pragma implementation_key(8042)
inline Excel::_ApplicationPtr Excel::AddIns::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8043)
inline enum XlCreator Excel::AddIns::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8044)
inline IDispatchPtr Excel::AddIns::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8045)
inline Excel::AddInPtr Excel::AddIns::Add ( _bstr_t Filename, const _variant_t & JOECopyFile ) {
    struct AddIn * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c", (BSTR)Filename, &JOECopyFile);
    return AddInPtr(_result, false);
}

#pragma implementation_key(8046)
inline long Excel::AddIns::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8047)
inline Excel::AddInPtr Excel::AddIns::GetItem ( const _variant_t & Index ) {
    struct AddIn * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return AddInPtr(_result, false);
}

#pragma implementation_key(8048)
inline IUnknownPtr Excel::AddIns::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8049)
inline Excel::AddInPtr Excel::AddIns::Get_Default ( const _variant_t & Index ) {
    struct AddIn * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return AddInPtr(_result, false);
}

//
// dispinterface Toolbar wrapper method implementations
//

#pragma implementation_key(8050)
inline Excel::_ApplicationPtr Excel::Toolbar::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8051)
inline enum XlCreator Excel::Toolbar::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8052)
inline IDispatchPtr Excel::Toolbar::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8053)
inline VARIANT_BOOL Excel::Toolbar::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8054)
inline HRESULT Excel::Toolbar::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8055)
inline long Excel::Toolbar::GetHeight ( ) {
    long _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8056)
inline void Excel::Toolbar::PutHeight ( long _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8057)
inline long Excel::Toolbar::GetLeft ( ) {
    long _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8058)
inline void Excel::Toolbar::PutLeft ( long _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8059)
inline _bstr_t Excel::Toolbar::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8060)
inline long Excel::Toolbar::GetPosition ( ) {
    long _result;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8061)
inline void Excel::Toolbar::PutPosition ( long _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8062)
inline enum XlToolbarProtection Excel::Toolbar::GetProtection ( ) {
    enum XlToolbarProtection _result;
    _com_dispatch_method(this, 0xb0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8063)
inline void Excel::Toolbar::PutProtection ( enum XlToolbarProtection _arg1 ) {
    _com_dispatch_method(this, 0xb0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8064)
inline HRESULT Excel::Toolbar::Reset ( ) {
    return _com_dispatch_method(this, 0x22b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8065)
inline Excel::ToolbarButtonsPtr Excel::Toolbar::GetToolbarButtons ( ) {
    struct ToolbarButtons * _result;
    _com_dispatch_method(this, 0x3c4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ToolbarButtonsPtr(_result, false);
}

#pragma implementation_key(8066)
inline long Excel::Toolbar::GetTop ( ) {
    long _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8067)
inline void Excel::Toolbar::PutTop ( long _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8068)
inline VARIANT_BOOL Excel::Toolbar::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8069)
inline void Excel::Toolbar::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8070)
inline long Excel::Toolbar::GetWidth ( ) {
    long _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8071)
inline void Excel::Toolbar::PutWidth ( long _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Toolbars wrapper method implementations
//

#pragma implementation_key(8072)
inline Excel::_ApplicationPtr Excel::Toolbars::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8073)
inline enum XlCreator Excel::Toolbars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8074)
inline IDispatchPtr Excel::Toolbars::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8075)
inline Excel::ToolbarPtr Excel::Toolbars::Add ( const _variant_t & Name ) {
    struct Toolbar * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Name);
    return ToolbarPtr(_result, false);
}

#pragma implementation_key(8076)
inline long Excel::Toolbars::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8077)
inline Excel::ToolbarPtr Excel::Toolbars::Get_Default ( const _variant_t & Index ) {
    struct Toolbar * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ToolbarPtr(_result, false);
}

#pragma implementation_key(8078)
inline Excel::ToolbarPtr Excel::Toolbars::GetItem ( const _variant_t & Index ) {
    struct Toolbar * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ToolbarPtr(_result, false);
}

#pragma implementation_key(8079)
inline IUnknownPtr Excel::Toolbars::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface ToolbarButton wrapper method implementations
//

#pragma implementation_key(8080)
inline Excel::_ApplicationPtr Excel::ToolbarButton::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8081)
inline enum XlCreator Excel::ToolbarButton::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8082)
inline IDispatchPtr Excel::ToolbarButton::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8083)
inline VARIANT_BOOL Excel::ToolbarButton::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8084)
inline VARIANT_BOOL Excel::ToolbarButton::GetBuiltInFace ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8085)
inline void Excel::ToolbarButton::PutBuiltInFace ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8086)
inline HRESULT Excel::ToolbarButton::Copy ( struct Toolbar * Toolbar, long Before ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", Toolbar, Before);
}

#pragma implementation_key(8087)
inline HRESULT Excel::ToolbarButton::CopyFace ( ) {
    return _com_dispatch_method(this, 0x3c6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8088)
inline HRESULT Excel::ToolbarButton::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8089)
inline HRESULT Excel::ToolbarButton::Edit ( ) {
    return _com_dispatch_method(this, 0x232, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8090)
inline VARIANT_BOOL Excel::ToolbarButton::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8091)
inline void Excel::ToolbarButton::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8092)
inline long Excel::ToolbarButton::GetHelpContextID ( ) {
    long _result;
    _com_dispatch_method(this, 0x163, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8093)
inline void Excel::ToolbarButton::PutHelpContextID ( long _arg1 ) {
    _com_dispatch_method(this, 0x163, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8094)
inline _bstr_t Excel::ToolbarButton::GetHelpFile ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x168, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8095)
inline void Excel::ToolbarButton::PutHelpFile ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x168, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8096)
inline long Excel::ToolbarButton::GetID ( ) {
    long _result;
    _com_dispatch_method(this, 0x23a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8097)
inline VARIANT_BOOL Excel::ToolbarButton::GetIsGap ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x231, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8098)
inline HRESULT Excel::ToolbarButton::Move ( struct Toolbar * Toolbar, long Before ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", Toolbar, Before);
}

#pragma implementation_key(8099)
inline _bstr_t Excel::ToolbarButton::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8100)
inline void Excel::ToolbarButton::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8101)
inline _bstr_t Excel::ToolbarButton::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8102)
inline void Excel::ToolbarButton::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8103)
inline HRESULT Excel::ToolbarButton::PasteFace ( ) {
    return _com_dispatch_method(this, 0x3c7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8104)
inline VARIANT_BOOL Excel::ToolbarButton::GetPushed ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x230, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8105)
inline void Excel::ToolbarButton::PutPushed ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x230, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8106)
inline HRESULT Excel::ToolbarButton::Reset ( ) {
    return _com_dispatch_method(this, 0x22b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8107)
inline _bstr_t Excel::ToolbarButton::GetStatusBar ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x182, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8108)
inline void Excel::ToolbarButton::PutStatusBar ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x182, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8109)
inline long Excel::ToolbarButton::GetWidth ( ) {
    long _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8110)
inline void Excel::ToolbarButton::PutWidth ( long _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface ToolbarButtons wrapper method implementations
//

#pragma implementation_key(8111)
inline Excel::_ApplicationPtr Excel::ToolbarButtons::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8112)
inline enum XlCreator Excel::ToolbarButtons::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8113)
inline IDispatchPtr Excel::ToolbarButtons::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8114)
inline Excel::ToolbarButtonPtr Excel::ToolbarButtons::Add ( const _variant_t & Button, const _variant_t & Before, const _variant_t & OnAction, const _variant_t & Pushed, const _variant_t & Enabled, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID ) {
    struct ToolbarButton * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Button, &Before, &OnAction, &Pushed, &Enabled, &StatusBar, &HelpFile, &HelpContextID);
    return ToolbarButtonPtr(_result, false);
}

#pragma implementation_key(8115)
inline long Excel::ToolbarButtons::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8116)
inline Excel::ToolbarButtonPtr Excel::ToolbarButtons::GetItem ( long Index ) {
    struct ToolbarButton * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return ToolbarButtonPtr(_result, false);
}

#pragma implementation_key(8117)
inline IUnknownPtr Excel::ToolbarButtons::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8118)
inline Excel::ToolbarButtonPtr Excel::ToolbarButtons::Get_Default ( long Index ) {
    struct ToolbarButton * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return ToolbarButtonPtr(_result, false);
}

//
// dispinterface Areas wrapper method implementations
//

#pragma implementation_key(8119)
inline Excel::_ApplicationPtr Excel::Areas::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8120)
inline enum XlCreator Excel::Areas::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8121)
inline IDispatchPtr Excel::Areas::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8122)
inline long Excel::Areas::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8123)
inline Excel::RangePtr Excel::Areas::GetItem ( long Index ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return RangePtr(_result, false);
}

#pragma implementation_key(8124)
inline IUnknownPtr Excel::Areas::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8125)
inline Excel::RangePtr Excel::Areas::Get_Default ( long Index ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return RangePtr(_result, false);
}

//
// dispinterface WorkbookEvents wrapper method implementations
//

#pragma implementation_key(8126)
inline HRESULT Excel::WorkbookEvents::Open ( ) {
    return _com_dispatch_method(this, 0x783, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8127)
inline HRESULT Excel::WorkbookEvents::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8128)
inline HRESULT Excel::WorkbookEvents::Deactivate ( ) {
    return _com_dispatch_method(this, 0x5fa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8129)
inline HRESULT Excel::WorkbookEvents::BeforeClose ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x60a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(8130)
inline HRESULT Excel::WorkbookEvents::BeforeSave ( VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x60b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b\x400b", SaveAsUI, Cancel);
}

#pragma implementation_key(8131)
inline HRESULT Excel::WorkbookEvents::BeforePrint ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x60d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(8132)
inline HRESULT Excel::WorkbookEvents::NewSheet ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x60e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

#pragma implementation_key(8133)
inline HRESULT Excel::WorkbookEvents::AddinInstall ( ) {
    return _com_dispatch_method(this, 0x610, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8134)
inline HRESULT Excel::WorkbookEvents::AddinUninstall ( ) {
    return _com_dispatch_method(this, 0x611, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8135)
inline HRESULT Excel::WorkbookEvents::WindowResize ( struct Window * Wn ) {
    return _com_dispatch_method(this, 0x612, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wn);
}

#pragma implementation_key(8136)
inline HRESULT Excel::WorkbookEvents::WindowActivate ( struct Window * Wn ) {
    return _com_dispatch_method(this, 0x614, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wn);
}

#pragma implementation_key(8137)
inline HRESULT Excel::WorkbookEvents::WindowDeactivate ( struct Window * Wn ) {
    return _com_dispatch_method(this, 0x615, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Wn);
}

#pragma implementation_key(8138)
inline HRESULT Excel::WorkbookEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target ) {
    return _com_dispatch_method(this, 0x616, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

#pragma implementation_key(8139)
inline HRESULT Excel::WorkbookEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x617, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Sh, Target, Cancel);
}

#pragma implementation_key(8140)
inline HRESULT Excel::WorkbookEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x618, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Sh, Target, Cancel);
}

#pragma implementation_key(8141)
inline HRESULT Excel::WorkbookEvents::SheetActivate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x619, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

#pragma implementation_key(8142)
inline HRESULT Excel::WorkbookEvents::SheetDeactivate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x61a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

#pragma implementation_key(8143)
inline HRESULT Excel::WorkbookEvents::SheetCalculate ( IDispatch * Sh ) {
    return _com_dispatch_method(this, 0x61b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sh);
}

#pragma implementation_key(8144)
inline HRESULT Excel::WorkbookEvents::SheetChange ( IDispatch * Sh, struct Range * Target ) {
    return _com_dispatch_method(this, 0x61c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

#pragma implementation_key(8145)
inline HRESULT Excel::WorkbookEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target ) {
    return _com_dispatch_method(this, 0x73e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

#pragma implementation_key(8146)
inline HRESULT Excel::WorkbookEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target ) {
    return _com_dispatch_method(this, 0x86d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Sh, Target);
}

#pragma implementation_key(8147)
inline HRESULT Excel::WorkbookEvents::PivotTableCloseConnection ( struct PivotTable * Target ) {
    return _com_dispatch_method(this, 0x86e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Target);
}

#pragma implementation_key(8148)
inline HRESULT Excel::WorkbookEvents::PivotTableOpenConnection ( struct PivotTable * Target ) {
    return _com_dispatch_method(this, 0x86f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Target);
}

//
// dispinterface MenuBars wrapper method implementations
//

#pragma implementation_key(8149)
inline Excel::_ApplicationPtr Excel::MenuBars::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8150)
inline enum XlCreator Excel::MenuBars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8151)
inline IDispatchPtr Excel::MenuBars::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8152)
inline Excel::MenuBarPtr Excel::MenuBars::Add ( const _variant_t & Name ) {
    struct MenuBar * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Name);
    return MenuBarPtr(_result, false);
}

#pragma implementation_key(8153)
inline long Excel::MenuBars::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8154)
inline Excel::MenuBarPtr Excel::MenuBars::Get_Default ( const _variant_t & Index ) {
    struct MenuBar * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return MenuBarPtr(_result, false);
}

#pragma implementation_key(8155)
inline Excel::MenuBarPtr Excel::MenuBars::GetItem ( const _variant_t & Index ) {
    struct MenuBar * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return MenuBarPtr(_result, false);
}

#pragma implementation_key(8156)
inline IUnknownPtr Excel::MenuBars::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface MenuBar wrapper method implementations
//

#pragma implementation_key(8157)
inline Excel::_ApplicationPtr Excel::MenuBar::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8158)
inline enum XlCreator Excel::MenuBar::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8159)
inline IDispatchPtr Excel::MenuBar::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8160)
inline HRESULT Excel::MenuBar::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8161)
inline VARIANT_BOOL Excel::MenuBar::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x229, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8162)
inline _bstr_t Excel::MenuBar::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8163)
inline void Excel::MenuBar::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8164)
inline HRESULT Excel::MenuBar::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8165)
inline long Excel::MenuBar::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8166)
inline Excel::MenusPtr Excel::MenuBar::GetMenus ( ) {
    struct Menus * _result;
    _com_dispatch_method(this, 0x24f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return MenusPtr(_result, false);
}

#pragma implementation_key(8167)
inline HRESULT Excel::MenuBar::Reset ( ) {
    return _com_dispatch_method(this, 0x22b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface Menus wrapper method implementations
//

#pragma implementation_key(8168)
inline Excel::_ApplicationPtr Excel::Menus::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8169)
inline enum XlCreator Excel::Menus::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8170)
inline IDispatchPtr Excel::Menus::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8171)
inline Excel::MenuPtr Excel::Menus::Add ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore ) {
    struct Menu * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c\x080c", (BSTR)Caption, &Before, &Restore);
    return MenuPtr(_result, false);
}

#pragma implementation_key(8172)
inline long Excel::Menus::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8173)
inline Excel::MenuPtr Excel::Menus::Get_Default ( const _variant_t & Index ) {
    struct Menu * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return MenuPtr(_result, false);
}

#pragma implementation_key(8174)
inline Excel::MenuPtr Excel::Menus::GetItem ( const _variant_t & Index ) {
    struct Menu * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return MenuPtr(_result, false);
}

#pragma implementation_key(8175)
inline IUnknownPtr Excel::Menus::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Menu wrapper method implementations
//

#pragma implementation_key(8176)
inline Excel::_ApplicationPtr Excel::Menu::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8177)
inline enum XlCreator Excel::Menu::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8178)
inline IDispatchPtr Excel::Menu::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8179)
inline _bstr_t Excel::Menu::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8180)
inline void Excel::Menu::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8181)
inline HRESULT Excel::Menu::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8182)
inline VARIANT_BOOL Excel::Menu::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8183)
inline void Excel::Menu::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8184)
inline long Excel::Menu::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8185)
inline Excel::MenuItemsPtr Excel::Menu::GetMenuItems ( ) {
    struct MenuItems * _result;
    _com_dispatch_method(this, 0x251, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return MenuItemsPtr(_result, false);
}

//
// dispinterface MenuItems wrapper method implementations
//

#pragma implementation_key(8186)
inline Excel::_ApplicationPtr Excel::MenuItems::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8187)
inline enum XlCreator Excel::MenuItems::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8188)
inline IDispatchPtr Excel::MenuItems::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8189)
inline Excel::MenuItemPtr Excel::MenuItems::Add ( _bstr_t Caption, const _variant_t & OnAction, const _variant_t & ShortcutKey, const _variant_t & Before, const _variant_t & Restore, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID ) {
    struct MenuItem * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c\x080c\x080c\x080c\x080c\x080c\x080c", (BSTR)Caption, &OnAction, &ShortcutKey, &Before, &Restore, &StatusBar, &HelpFile, &HelpContextID);
    return MenuItemPtr(_result, false);
}

#pragma implementation_key(8190)
inline Excel::MenuPtr Excel::MenuItems::AddMenu ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore ) {
    struct Menu * _result;
    _com_dispatch_method(this, 0x256, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c\x080c", (BSTR)Caption, &Before, &Restore);
    return MenuPtr(_result, false);
}

#pragma implementation_key(8191)
inline long Excel::MenuItems::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8192)
inline IDispatchPtr Excel::MenuItems::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8193)
inline IDispatchPtr Excel::MenuItems::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8194)
inline IUnknownPtr Excel::MenuItems::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface MenuItem wrapper method implementations
//

#pragma implementation_key(8195)
inline Excel::_ApplicationPtr Excel::MenuItem::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8196)
inline enum XlCreator Excel::MenuItem::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8197)
inline IDispatchPtr Excel::MenuItem::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8198)
inline _bstr_t Excel::MenuItem::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8199)
inline void Excel::MenuItem::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8200)
inline VARIANT_BOOL Excel::MenuItem::GetChecked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x257, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8201)
inline void Excel::MenuItem::PutChecked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x257, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8202)
inline HRESULT Excel::MenuItem::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8203)
inline VARIANT_BOOL Excel::MenuItem::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8204)
inline void Excel::MenuItem::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8205)
inline long Excel::MenuItem::GetHelpContextID ( ) {
    long _result;
    _com_dispatch_method(this, 0x163, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8206)
inline void Excel::MenuItem::PutHelpContextID ( long _arg1 ) {
    _com_dispatch_method(this, 0x163, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8207)
inline _bstr_t Excel::MenuItem::GetHelpFile ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x168, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8208)
inline void Excel::MenuItem::PutHelpFile ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x168, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8209)
inline long Excel::MenuItem::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8210)
inline _bstr_t Excel::MenuItem::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8211)
inline void Excel::MenuItem::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8212)
inline _bstr_t Excel::MenuItem::GetStatusBar ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x182, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8213)
inline void Excel::MenuItem::PutStatusBar ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x182, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface Charts wrapper method implementations
//

#pragma implementation_key(8214)
inline Excel::_ApplicationPtr Excel::Charts::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8215)
inline enum XlCreator Excel::Charts::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8216)
inline IDispatchPtr Excel::Charts::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8217)
inline Excel::_ChartPtr Excel::Charts::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct _Chart * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c", &Before, &After, &Count);
    return _ChartPtr(_result, false);
}

#pragma implementation_key(8218)
inline HRESULT Excel::Charts::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(8219)
inline long Excel::Charts::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8220)
inline HRESULT Excel::Charts::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8221)
inline IDispatchPtr Excel::Charts::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8222)
inline HRESULT Excel::Charts::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(8223)
inline IUnknownPtr Excel::Charts::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8224)
inline HRESULT Excel::Charts::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

#pragma implementation_key(8225)
inline HRESULT Excel::Charts::PrintPreview ( const _variant_t & EnableChanges ) {
    return _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &EnableChanges);
}

#pragma implementation_key(8226)
inline HRESULT Excel::Charts::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

#pragma implementation_key(8227)
inline Excel::HPageBreaksPtr Excel::Charts::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    _com_dispatch_method(this, 0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(8228)
inline Excel::VPageBreaksPtr Excel::Charts::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    _com_dispatch_method(this, 0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(8229)
inline _variant_t Excel::Charts::GetVisible ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8230)
inline void Excel::Charts::PutVisible ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8231)
inline IDispatchPtr Excel::Charts::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8232)
inline HRESULT Excel::Charts::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    return _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
}

//
// dispinterface DrawingObjects wrapper method implementations
//

#pragma implementation_key(8233)
inline Excel::_ApplicationPtr Excel::DrawingObjects::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8234)
inline enum XlCreator Excel::DrawingObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8235)
inline IDispatchPtr Excel::DrawingObjects::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8236)
inline _variant_t Excel::DrawingObjects::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8237)
inline _variant_t Excel::DrawingObjects::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8238)
inline _variant_t Excel::DrawingObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(8239)
inline _variant_t Excel::DrawingObjects::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8240)
inline _variant_t Excel::DrawingObjects::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8241)
inline IDispatchPtr Excel::DrawingObjects::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8242)
inline VARIANT_BOOL Excel::DrawingObjects::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8243)
inline void Excel::DrawingObjects::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8244)
inline double Excel::DrawingObjects::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8245)
inline void Excel::DrawingObjects::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8246)
inline double Excel::DrawingObjects::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8247)
inline void Excel::DrawingObjects::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8248)
inline VARIANT_BOOL Excel::DrawingObjects::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8249)
inline void Excel::DrawingObjects::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8250)
inline _bstr_t Excel::DrawingObjects::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8251)
inline void Excel::DrawingObjects::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8252)
inline _variant_t Excel::DrawingObjects::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8253)
inline void Excel::DrawingObjects::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8254)
inline VARIANT_BOOL Excel::DrawingObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8255)
inline void Excel::DrawingObjects::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8256)
inline _variant_t Excel::DrawingObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(8257)
inline _variant_t Excel::DrawingObjects::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8258)
inline double Excel::DrawingObjects::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8259)
inline void Excel::DrawingObjects::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8260)
inline VARIANT_BOOL Excel::DrawingObjects::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8261)
inline void Excel::DrawingObjects::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8262)
inline double Excel::DrawingObjects::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8263)
inline void Excel::DrawingObjects::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8264)
inline long Excel::DrawingObjects::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8265)
inline Excel::ShapeRangePtr Excel::DrawingObjects::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(8266)
inline _variant_t Excel::DrawingObjects::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8267)
inline void Excel::DrawingObjects::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8268)
inline VARIANT_BOOL Excel::DrawingObjects::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8269)
inline void Excel::DrawingObjects::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8270)
inline _variant_t Excel::DrawingObjects::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Text, &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(8271)
inline _variant_t Excel::DrawingObjects::GetArrowHeadLength ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8272)
inline void Excel::DrawingObjects::PutArrowHeadLength ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8273)
inline _variant_t Excel::DrawingObjects::GetArrowHeadStyle ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8274)
inline void Excel::DrawingObjects::PutArrowHeadStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8275)
inline _variant_t Excel::DrawingObjects::GetArrowHeadWidth ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8276)
inline void Excel::DrawingObjects::PutArrowHeadWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8277)
inline VARIANT_BOOL Excel::DrawingObjects::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8278)
inline void Excel::DrawingObjects::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8279)
inline Excel::BorderPtr Excel::DrawingObjects::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(8280)
inline VARIANT_BOOL Excel::DrawingObjects::GetCancelButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8281)
inline void Excel::DrawingObjects::PutCancelButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8282)
inline _bstr_t Excel::DrawingObjects::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8283)
inline void Excel::DrawingObjects::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8284)
inline Excel::CharactersPtr Excel::DrawingObjects::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(8285)
inline _variant_t Excel::DrawingObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(8286)
inline long Excel::DrawingObjects::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8287)
inline void Excel::DrawingObjects::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8288)
inline VARIANT_BOOL Excel::DrawingObjects::GetDefaultButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8289)
inline void Excel::DrawingObjects::PutDefaultButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8290)
inline VARIANT_BOOL Excel::DrawingObjects::GetDismissButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8291)
inline void Excel::DrawingObjects::PutDismissButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8292)
inline VARIANT_BOOL Excel::DrawingObjects::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8293)
inline void Excel::DrawingObjects::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8294)
inline VARIANT_BOOL Excel::DrawingObjects::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8295)
inline void Excel::DrawingObjects::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8296)
inline long Excel::DrawingObjects::GetDropDownLines ( ) {
    long _result;
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8297)
inline void Excel::DrawingObjects::PutDropDownLines ( long _arg1 ) {
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8298)
inline Excel::FontPtr Excel::DrawingObjects::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(8299)
inline VARIANT_BOOL Excel::DrawingObjects::GetHelpButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8300)
inline void Excel::DrawingObjects::PutHelpButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8301)
inline _variant_t Excel::DrawingObjects::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8302)
inline void Excel::DrawingObjects::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8303)
inline long Excel::DrawingObjects::GetInputType ( ) {
    long _result;
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8304)
inline void Excel::DrawingObjects::PutInputType ( long _arg1 ) {
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8305)
inline Excel::InteriorPtr Excel::DrawingObjects::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(8306)
inline long Excel::DrawingObjects::GetLargeChange ( ) {
    long _result;
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8307)
inline void Excel::DrawingObjects::PutLargeChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8308)
inline _bstr_t Excel::DrawingObjects::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8309)
inline void Excel::DrawingObjects::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8310)
inline _variant_t Excel::DrawingObjects::List ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x35d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(8311)
inline _bstr_t Excel::DrawingObjects::GetListFillRange ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8312)
inline void Excel::DrawingObjects::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8313)
inline long Excel::DrawingObjects::GetListIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8314)
inline void Excel::DrawingObjects::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8315)
inline VARIANT_BOOL Excel::DrawingObjects::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8316)
inline void Excel::DrawingObjects::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8317)
inline long Excel::DrawingObjects::GetMax ( ) {
    long _result;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8318)
inline void Excel::DrawingObjects::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8319)
inline long Excel::DrawingObjects::GetMin ( ) {
    long _result;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8320)
inline void Excel::DrawingObjects::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8321)
inline VARIANT_BOOL Excel::DrawingObjects::GetMultiLine ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8322)
inline void Excel::DrawingObjects::PutMultiLine ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8323)
inline VARIANT_BOOL Excel::DrawingObjects::GetMultiSelect ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8324)
inline void Excel::DrawingObjects::PutMultiSelect ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8325)
inline _variant_t Excel::DrawingObjects::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8326)
inline void Excel::DrawingObjects::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8327)
inline _variant_t Excel::DrawingObjects::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8328)
inline void Excel::DrawingObjects::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8329)
inline _variant_t Excel::DrawingObjects::RemoveAllItems ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8330)
inline _variant_t Excel::DrawingObjects::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", Index, &Count);
    return _variant_t(_result, false);
}

#pragma implementation_key(8331)
inline _variant_t Excel::DrawingObjects::Reshape ( long Vertex, const _variant_t & Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x000c\x080c\x080c", Vertex, &Insert, &Left, &Top);
    return _variant_t(_result, false);
}

#pragma implementation_key(8332)
inline VARIANT_BOOL Excel::DrawingObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8333)
inline void Excel::DrawingObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8334)
inline _variant_t Excel::DrawingObjects::Selected ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x463, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(8335)
inline VARIANT_BOOL Excel::DrawingObjects::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8336)
inline void Excel::DrawingObjects::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8337)
inline long Excel::DrawingObjects::GetSmallChange ( ) {
    long _result;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8338)
inline void Excel::DrawingObjects::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8339)
inline _bstr_t Excel::DrawingObjects::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8340)
inline void Excel::DrawingObjects::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8341)
inline IDispatchPtr Excel::DrawingObjects::Ungroup ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8342)
inline long Excel::DrawingObjects::GetValue ( ) {
    long _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8343)
inline void Excel::DrawingObjects::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8344)
inline _variant_t Excel::DrawingObjects::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8345)
inline void Excel::DrawingObjects::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8346)
inline _variant_t Excel::DrawingObjects::Vertices ( const _variant_t & Index1, const _variant_t & Index2 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x26d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &Index1, &Index2);
    return _variant_t(_result, false);
}

#pragma implementation_key(8347)
inline long Excel::DrawingObjects::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8348)
inline void Excel::DrawingObjects::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8349)
inline long Excel::DrawingObjects::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8350)
inline IDispatchPtr Excel::DrawingObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8351)
inline Excel::GroupObjectPtr Excel::DrawingObjects::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(8352)
inline _variant_t Excel::DrawingObjects::LinkCombo ( const _variant_t & Link ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x358, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Link);
    return _variant_t(_result, false);
}

#pragma implementation_key(8353)
inline IUnknownPtr Excel::DrawingObjects::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface PivotCache wrapper method implementations
//

#pragma implementation_key(8354)
inline Excel::_ApplicationPtr Excel::PivotCache::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8355)
inline enum XlCreator Excel::PivotCache::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8356)
inline IDispatchPtr Excel::PivotCache::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8357)
inline VARIANT_BOOL Excel::PivotCache::GetBackgroundQuery ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x593, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8358)
inline void Excel::PivotCache::PutBackgroundQuery ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x593, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8359)
inline _variant_t Excel::PivotCache::GetConnection ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x598, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8360)
inline void Excel::PivotCache::PutConnection ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x598, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8361)
inline VARIANT_BOOL Excel::PivotCache::GetEnableRefresh ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5c5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8362)
inline void Excel::PivotCache::PutEnableRefresh ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8363)
inline long Excel::PivotCache::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8364)
inline long Excel::PivotCache::GetMemoryUsed ( ) {
    long _result;
    _com_dispatch_method(this, 0x174, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8365)
inline VARIANT_BOOL Excel::PivotCache::GetOptimizeCache ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x594, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8366)
inline void Excel::PivotCache::PutOptimizeCache ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x594, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8367)
inline long Excel::PivotCache::GetRecordCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x5c6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8368)
inline HRESULT Excel::PivotCache::Refresh ( ) {
    return _com_dispatch_method(this, 0x589, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8369)
inline DATE Excel::PivotCache::GetRefreshDate ( ) {
    DATE _result;
    _com_dispatch_method(this, 0x2b8, DISPATCH_PROPERTYGET, VT_DATE, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8370)
inline _bstr_t Excel::PivotCache::GetRefreshName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x2b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8371)
inline VARIANT_BOOL Excel::PivotCache::GetRefreshOnFileOpen ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5c7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8372)
inline void Excel::PivotCache::PutRefreshOnFileOpen ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8373)
inline _variant_t Excel::PivotCache::GetSql ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5c8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8374)
inline void Excel::PivotCache::PutSql ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8375)
inline VARIANT_BOOL Excel::PivotCache::GetSavePassword ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5c9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8376)
inline void Excel::PivotCache::PutSavePassword ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8377)
inline _variant_t Excel::PivotCache::GetSourceData ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8378)
inline void Excel::PivotCache::PutSourceData ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x2ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8379)
inline _variant_t Excel::PivotCache::GetCommandText ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x725, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8380)
inline void Excel::PivotCache::PutCommandText ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x725, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8381)
inline enum XlCmdType Excel::PivotCache::GetCommandType ( ) {
    enum XlCmdType _result;
    _com_dispatch_method(this, 0x726, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8382)
inline void Excel::PivotCache::PutCommandType ( enum XlCmdType _arg1 ) {
    _com_dispatch_method(this, 0x726, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8383)
inline enum XlQueryType Excel::PivotCache::GetQueryType ( ) {
    enum XlQueryType _result;
    _com_dispatch_method(this, 0x727, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8384)
inline VARIANT_BOOL Excel::PivotCache::GetMaintainConnection ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x728, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8385)
inline void Excel::PivotCache::PutMaintainConnection ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x728, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8386)
inline long Excel::PivotCache::GetRefreshPeriod ( ) {
    long _result;
    _com_dispatch_method(this, 0x729, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8387)
inline void Excel::PivotCache::PutRefreshPeriod ( long _arg1 ) {
    _com_dispatch_method(this, 0x729, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8388)
inline IDispatchPtr Excel::PivotCache::GetRecordset ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x48d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8389)
inline void Excel::PivotCache::PutRefRecordset ( IDispatch * _arg1 ) {
    _com_dispatch_method(this, 0x48d, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

#pragma implementation_key(8390)
inline HRESULT Excel::PivotCache::ResetTimer ( ) {
    return _com_dispatch_method(this, 0x72a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8391)
inline _variant_t Excel::PivotCache::GetLocalConnection ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x72b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8392)
inline void Excel::PivotCache::PutLocalConnection ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x72b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8393)
inline Excel::PivotTablePtr Excel::PivotCache::CreatePivotTable ( const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion ) {
    struct PivotTable * _result;
    _com_dispatch_method(this, 0x72c, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c", &TableDestination, &TableName, &ReadData, &DefaultVersion);
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(8394)
inline VARIANT_BOOL Excel::PivotCache::GetUseLocalConnection ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x72d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8395)
inline void Excel::PivotCache::PutUseLocalConnection ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x72d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8396)
inline IDispatchPtr Excel::PivotCache::GetADOConnection ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x81a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8397)
inline VARIANT_BOOL Excel::PivotCache::GetIsConnected ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x81b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8398)
inline HRESULT Excel::PivotCache::MakeConnection ( ) {
    return _com_dispatch_method(this, 0x81c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8399)
inline VARIANT_BOOL Excel::PivotCache::GetOLAP ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x81d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8400)
inline enum XlPivotTableSourceType Excel::PivotCache::GetSourceType ( ) {
    enum XlPivotTableSourceType _result;
    _com_dispatch_method(this, 0x2ad, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8401)
inline enum XlPivotTableMissingItems Excel::PivotCache::GetMissingItemsLimit ( ) {
    enum XlPivotTableMissingItems _result;
    _com_dispatch_method(this, 0x81e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8402)
inline void Excel::PivotCache::PutMissingItemsLimit ( enum XlPivotTableMissingItems _arg1 ) {
    _com_dispatch_method(this, 0x81e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8403)
inline _bstr_t Excel::PivotCache::GetSourceConnectionFile ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x81f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8404)
inline void Excel::PivotCache::PutSourceConnectionFile ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x81f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8405)
inline _bstr_t Excel::PivotCache::GetSourceDataFile ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x820, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8406)
inline enum XlRobustConnect Excel::PivotCache::GetRobustConnect ( ) {
    enum XlRobustConnect _result;
    _com_dispatch_method(this, 0x821, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8407)
inline void Excel::PivotCache::PutRobustConnect ( enum XlRobustConnect _arg1 ) {
    _com_dispatch_method(this, 0x821, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8408)
inline HRESULT Excel::PivotCache::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords ) {
    return _com_dispatch_method(this, 0x822, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c\x080c", (BSTR)ODCFileName, &Description, &Keywords);
}

//
// dispinterface PivotCaches wrapper method implementations
//

#pragma implementation_key(8409)
inline Excel::_ApplicationPtr Excel::PivotCaches::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8410)
inline enum XlCreator Excel::PivotCaches::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8411)
inline IDispatchPtr Excel::PivotCaches::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8412)
inline long Excel::PivotCaches::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8413)
inline Excel::PivotCachePtr Excel::PivotCaches::Item ( const _variant_t & Index ) {
    struct PivotCache * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotCachePtr(_result, false);
}

#pragma implementation_key(8414)
inline Excel::PivotCachePtr Excel::PivotCaches::Get_Default ( const _variant_t & Index ) {
    struct PivotCache * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotCachePtr(_result, false);
}

#pragma implementation_key(8415)
inline IUnknownPtr Excel::PivotCaches::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8416)
inline Excel::PivotCachePtr Excel::PivotCaches::Add ( enum XlPivotTableSourceType SourceType, const _variant_t & SourceData ) {
    struct PivotCache * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x080c", SourceType, &SourceData);
    return PivotCachePtr(_result, false);
}

//
// dispinterface PivotFormula wrapper method implementations
//

#pragma implementation_key(8417)
inline Excel::_ApplicationPtr Excel::PivotFormula::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8418)
inline enum XlCreator Excel::PivotFormula::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8419)
inline IDispatchPtr Excel::PivotFormula::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8420)
inline HRESULT Excel::PivotFormula::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8421)
inline _bstr_t Excel::PivotFormula::Get_Default ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8422)
inline void Excel::PivotFormula::Put_Default ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8423)
inline _bstr_t Excel::PivotFormula::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8424)
inline void Excel::PivotFormula::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8425)
inline _bstr_t Excel::PivotFormula::GetValue ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8426)
inline void Excel::PivotFormula::PutValue ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8427)
inline long Excel::PivotFormula::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8428)
inline void Excel::PivotFormula::PutIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8429)
inline _bstr_t Excel::PivotFormula::GetStandardFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x824, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8430)
inline void Excel::PivotFormula::PutStandardFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x824, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface PivotFormulas wrapper method implementations
//

#pragma implementation_key(8431)
inline Excel::_ApplicationPtr Excel::PivotFormulas::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8432)
inline enum XlCreator Excel::PivotFormulas::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8433)
inline IDispatchPtr Excel::PivotFormulas::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8434)
inline long Excel::PivotFormulas::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8435)
inline Excel::PivotFormulaPtr Excel::PivotFormulas::_Add ( _bstr_t Formula ) {
    struct PivotFormula * _result;
    _com_dispatch_method(this, 0x825, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008", (BSTR)Formula);
    return PivotFormulaPtr(_result, false);
}

#pragma implementation_key(8436)
inline Excel::PivotFormulaPtr Excel::PivotFormulas::Item ( const _variant_t & Index ) {
    struct PivotFormula * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotFormulaPtr(_result, false);
}

#pragma implementation_key(8437)
inline Excel::PivotFormulaPtr Excel::PivotFormulas::Get_Default ( const _variant_t & Index ) {
    struct PivotFormula * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotFormulaPtr(_result, false);
}

#pragma implementation_key(8438)
inline IUnknownPtr Excel::PivotFormulas::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8439)
inline Excel::PivotFormulaPtr Excel::PivotFormulas::Add ( _bstr_t Formula, const _variant_t & UseStandardFormula ) {
    struct PivotFormula * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c", (BSTR)Formula, &UseStandardFormula);
    return PivotFormulaPtr(_result, false);
}

//
// dispinterface PivotTable wrapper method implementations
//

#pragma implementation_key(8440)
inline Excel::_ApplicationPtr Excel::PivotTable::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8441)
inline enum XlCreator Excel::PivotTable::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8442)
inline IDispatchPtr Excel::PivotTable::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8443)
inline _variant_t Excel::PivotTable::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AddToTable ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2c4, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &RowFields, &ColumnFields, &PageFields, &AddToTable);
    return _variant_t(_result, false);
}

#pragma implementation_key(8444)
inline IDispatchPtr Excel::PivotTable::GetColumnFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2c9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8445)
inline VARIANT_BOOL Excel::PivotTable::GetColumnGrand ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2b6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8446)
inline void Excel::PivotTable::PutColumnGrand ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8447)
inline Excel::RangePtr Excel::PivotTable::GetColumnRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2be, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8448)
inline _variant_t Excel::PivotTable::ShowPages ( const _variant_t & PageField ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2c2, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &PageField);
    return _variant_t(_result, false);
}

#pragma implementation_key(8449)
inline Excel::RangePtr Excel::PivotTable::GetDataBodyRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2c1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8450)
inline IDispatchPtr Excel::PivotTable::GetDataFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2cb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8451)
inline Excel::RangePtr Excel::PivotTable::GetDataLabelRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2c0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8452)
inline _bstr_t Excel::PivotTable::Get_Default ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8453)
inline void Excel::PivotTable::Put_Default ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8454)
inline VARIANT_BOOL Excel::PivotTable::GetHasAutoFormat ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2b7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8455)
inline void Excel::PivotTable::PutHasAutoFormat ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8456)
inline IDispatchPtr Excel::PivotTable::GetHiddenFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2c7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8457)
inline _bstr_t Excel::PivotTable::GetInnerDetail ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x2ba, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8458)
inline void Excel::PivotTable::PutInnerDetail ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x2ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8459)
inline _bstr_t Excel::PivotTable::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8460)
inline void Excel::PivotTable::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8461)
inline IDispatchPtr Excel::PivotTable::GetPageFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8462)
inline Excel::RangePtr Excel::PivotTable::GetPageRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2bf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8463)
inline Excel::RangePtr Excel::PivotTable::GetPageRangeCells ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x5ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8464)
inline IDispatchPtr Excel::PivotTable::PivotFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2ce, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8465)
inline DATE Excel::PivotTable::GetRefreshDate ( ) {
    DATE _result;
    _com_dispatch_method(this, 0x2b8, DISPATCH_PROPERTYGET, VT_DATE, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8466)
inline _bstr_t Excel::PivotTable::GetRefreshName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x2b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8467)
inline VARIANT_BOOL Excel::PivotTable::RefreshTable ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2cd, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8468)
inline IDispatchPtr Excel::PivotTable::GetRowFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2c8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8469)
inline VARIANT_BOOL Excel::PivotTable::GetRowGrand ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2b5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8470)
inline void Excel::PivotTable::PutRowGrand ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8471)
inline Excel::RangePtr Excel::PivotTable::GetRowRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2bd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8472)
inline VARIANT_BOOL Excel::PivotTable::GetSaveData ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2b4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8473)
inline void Excel::PivotTable::PutSaveData ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8474)
inline _variant_t Excel::PivotTable::GetSourceData ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2ae, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8475)
inline void Excel::PivotTable::PutSourceData ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x2ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8476)
inline Excel::RangePtr Excel::PivotTable::GetTableRange1 ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2bb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8477)
inline Excel::RangePtr Excel::PivotTable::GetTableRange2 ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2bc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8478)
inline _bstr_t Excel::PivotTable::GetValue ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8479)
inline void Excel::PivotTable::PutValue ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8480)
inline IDispatchPtr Excel::PivotTable::GetVisibleFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2c6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8481)
inline long Excel::PivotTable::GetCacheIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x5cb, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8482)
inline void Excel::PivotTable::PutCacheIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x5cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8483)
inline Excel::CalculatedFieldsPtr Excel::PivotTable::CalculatedFields ( ) {
    struct CalculatedFields * _result;
    _com_dispatch_method(this, 0x5cc, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return CalculatedFieldsPtr(_result, false);
}

#pragma implementation_key(8484)
inline VARIANT_BOOL Excel::PivotTable::GetDisplayErrorString ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5cd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8485)
inline void Excel::PivotTable::PutDisplayErrorString ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8486)
inline VARIANT_BOOL Excel::PivotTable::GetDisplayNullString ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5ce, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8487)
inline void Excel::PivotTable::PutDisplayNullString ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8488)
inline VARIANT_BOOL Excel::PivotTable::GetEnableDrilldown ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5cf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8489)
inline void Excel::PivotTable::PutEnableDrilldown ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8490)
inline VARIANT_BOOL Excel::PivotTable::GetEnableFieldDialog ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5d0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8491)
inline void Excel::PivotTable::PutEnableFieldDialog ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8492)
inline VARIANT_BOOL Excel::PivotTable::GetEnableWizard ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5d1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8493)
inline void Excel::PivotTable::PutEnableWizard ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8494)
inline _bstr_t Excel::PivotTable::GetErrorString ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8495)
inline void Excel::PivotTable::PutErrorString ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8496)
inline double Excel::PivotTable::GetData ( _bstr_t Name ) {
    double _result;
    _com_dispatch_method(this, 0x5d3, DISPATCH_METHOD, VT_R8, (void*)&_result, 
        L"\x0008", (BSTR)Name);
    return _result;
}

#pragma implementation_key(8497)
inline HRESULT Excel::PivotTable::ListFormulas ( ) {
    return _com_dispatch_method(this, 0x5d4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8498)
inline VARIANT_BOOL Excel::PivotTable::GetManualUpdate ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8499)
inline void Excel::PivotTable::PutManualUpdate ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8500)
inline VARIANT_BOOL Excel::PivotTable::GetMergeLabels ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8501)
inline void Excel::PivotTable::PutMergeLabels ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8502)
inline _bstr_t Excel::PivotTable::GetNullString ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5d7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8503)
inline void Excel::PivotTable::PutNullString ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8504)
inline Excel::PivotCachePtr Excel::PivotTable::PivotCache ( ) {
    struct PivotCache * _result;
    _com_dispatch_method(this, 0x5d8, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return PivotCachePtr(_result, false);
}

#pragma implementation_key(8505)
inline Excel::PivotFormulasPtr Excel::PivotTable::GetPivotFormulas ( ) {
    struct PivotFormulas * _result;
    _com_dispatch_method(this, 0x5d9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFormulasPtr(_result, false);
}

#pragma implementation_key(8506)
inline HRESULT Excel::PivotTable::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection ) {
    return _com_dispatch_method(this, 0x2ac, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &SourceType, &SourceData, &TableDestination, &TableName, &RowGrand, &ColumnGrand, &SaveData, &HasAutoFormat, &AutoPage, &Reserved, &BackgroundQuery, &OptimizeCache, &PageFieldOrder, &PageFieldWrapCount, &ReadData, &Connection);
}

#pragma implementation_key(8507)
inline VARIANT_BOOL Excel::PivotTable::GetSubtotalHiddenPageItems ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5da, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8508)
inline void Excel::PivotTable::PutSubtotalHiddenPageItems ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8509)
inline long Excel::PivotTable::GetPageFieldOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x595, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8510)
inline void Excel::PivotTable::PutPageFieldOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x595, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8511)
inline _bstr_t Excel::PivotTable::GetPageFieldStyle ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5db, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8512)
inline void Excel::PivotTable::PutPageFieldStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8513)
inline long Excel::PivotTable::GetPageFieldWrapCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x596, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8514)
inline void Excel::PivotTable::PutPageFieldWrapCount ( long _arg1 ) {
    _com_dispatch_method(this, 0x596, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8515)
inline VARIANT_BOOL Excel::PivotTable::GetPreserveFormatting ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5dc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8516)
inline void Excel::PivotTable::PutPreserveFormatting ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8517)
inline HRESULT Excel::PivotTable::_PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode ) {
    return _com_dispatch_method(this, 0x827, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0003", (BSTR)Name, Mode);
}

#pragma implementation_key(8518)
inline _bstr_t Excel::PivotTable::GetPivotSelection ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5de, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8519)
inline void Excel::PivotTable::PutPivotSelection ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8520)
inline enum XlPTSelectionMode Excel::PivotTable::GetSelectionMode ( ) {
    enum XlPTSelectionMode _result;
    _com_dispatch_method(this, 0x5df, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8521)
inline void Excel::PivotTable::PutSelectionMode ( enum XlPTSelectionMode _arg1 ) {
    _com_dispatch_method(this, 0x5df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8522)
inline _bstr_t Excel::PivotTable::GetTableStyle ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5e0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8523)
inline void Excel::PivotTable::PutTableStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8524)
inline _bstr_t Excel::PivotTable::GetTag ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5e1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8525)
inline void Excel::PivotTable::PutTag ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8526)
inline HRESULT Excel::PivotTable::Update ( ) {
    return _com_dispatch_method(this, 0x2a8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8527)
inline _bstr_t Excel::PivotTable::GetVacatedStyle ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5e2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8528)
inline void Excel::PivotTable::PutVacatedStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8529)
inline HRESULT Excel::PivotTable::Format ( enum XlPivotFormatType Format ) {
    return _com_dispatch_method(this, 0x74, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Format);
}

#pragma implementation_key(8530)
inline VARIANT_BOOL Excel::PivotTable::GetPrintTitles ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x72e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8531)
inline void Excel::PivotTable::PutPrintTitles ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x72e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8532)
inline Excel::CubeFieldsPtr Excel::PivotTable::GetCubeFields ( ) {
    struct CubeFields * _result;
    _com_dispatch_method(this, 0x72f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CubeFieldsPtr(_result, false);
}

#pragma implementation_key(8533)
inline _bstr_t Excel::PivotTable::GetGrandTotalName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x730, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8534)
inline void Excel::PivotTable::PutGrandTotalName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x730, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8535)
inline VARIANT_BOOL Excel::PivotTable::GetSmallGrid ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x731, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8536)
inline void Excel::PivotTable::PutSmallGrid ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x731, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8537)
inline VARIANT_BOOL Excel::PivotTable::GetRepeatItemsOnEachPrintedPage ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x732, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8538)
inline void Excel::PivotTable::PutRepeatItemsOnEachPrintedPage ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x732, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8539)
inline VARIANT_BOOL Excel::PivotTable::GetTotalsAnnotation ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x733, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8540)
inline void Excel::PivotTable::PutTotalsAnnotation ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x733, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8541)
inline HRESULT Excel::PivotTable::PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode, const _variant_t & UseStandardName ) {
    return _com_dispatch_method(this, 0x5dd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x0003\x080c", (BSTR)Name, Mode, &UseStandardName);
}

#pragma implementation_key(8542)
inline _bstr_t Excel::PivotTable::GetPivotSelectionStandard ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x829, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8543)
inline void Excel::PivotTable::PutPivotSelectionStandard ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x829, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8544)
inline Excel::RangePtr Excel::PivotTable::GetPivotData ( const _variant_t & DataField, const _variant_t & Field1, const _variant_t & Item1, const _variant_t & Field2, const _variant_t & Item2, const _variant_t & Field3, const _variant_t & Item3, const _variant_t & Field4, const _variant_t & Item4, const _variant_t & Field5, const _variant_t & Item5, const _variant_t & Field6, const _variant_t & Item6, const _variant_t & Field7, const _variant_t & Item7, const _variant_t & Field8, const _variant_t & Item8, const _variant_t & Field9, const _variant_t & Item9, const _variant_t & Field10, const _variant_t & Item10, const _variant_t & Field11, const _variant_t & Item11, const _variant_t & Field12, const _variant_t & Item12, const _variant_t & Field13, const _variant_t & Item13, const _variant_t & Field14, const _variant_t & Item14 ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x82a, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &DataField, &Field1, &Item1, &Field2, &Item2, &Field3, &Item3, &Field4, &Item4, &Field5, &Item5, &Field6, &Item6, &Field7, &Item7, &Field8, &Item8, &Field9, &Item9, &Field10, &Item10, &Field11, &Item11, &Field12, &Item12, &Field13, &Item13, &Field14, &Item14);
    return RangePtr(_result, false);
}

#pragma implementation_key(8545)
inline Excel::PivotFieldPtr Excel::PivotTable::GetDataPivotField ( ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x848, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(8546)
inline VARIANT_BOOL Excel::PivotTable::GetEnableDataValueEditing ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x849, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8547)
inline void Excel::PivotTable::PutEnableDataValueEditing ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x849, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8548)
inline Excel::PivotFieldPtr Excel::PivotTable::AddDataField ( IDispatch * Field, const _variant_t & Caption, const _variant_t & Function ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x84a, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0009\x080c\x080c", Field, &Caption, &Function);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(8549)
inline _bstr_t Excel::PivotTable::GetMDX ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x84b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8550)
inline VARIANT_BOOL Excel::PivotTable::GetViewCalculatedMembers ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x84c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8551)
inline void Excel::PivotTable::PutViewCalculatedMembers ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x84c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8552)
inline Excel::CalculatedMembersPtr Excel::PivotTable::GetCalculatedMembers ( ) {
    struct CalculatedMembers * _result;
    _com_dispatch_method(this, 0x84d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CalculatedMembersPtr(_result, false);
}

#pragma implementation_key(8553)
inline VARIANT_BOOL Excel::PivotTable::GetDisplayImmediateItems ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x84e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8554)
inline void Excel::PivotTable::PutDisplayImmediateItems ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x84e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8555)
inline _variant_t Excel::PivotTable::Dummy15 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x84f, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _variant_t(_result, false);
}

#pragma implementation_key(8556)
inline VARIANT_BOOL Excel::PivotTable::GetEnableFieldList ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x850, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8557)
inline void Excel::PivotTable::PutEnableFieldList ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x850, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8558)
inline VARIANT_BOOL Excel::PivotTable::GetVisualTotals ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x851, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8559)
inline void Excel::PivotTable::PutVisualTotals ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x851, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8560)
inline VARIANT_BOOL Excel::PivotTable::GetShowPageMultipleItemLabel ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x852, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8561)
inline void Excel::PivotTable::PutShowPageMultipleItemLabel ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x852, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8562)
inline enum XlPivotTableVersionList Excel::PivotTable::GetVersion ( ) {
    enum XlPivotTableVersionList _result;
    _com_dispatch_method(this, 0x188, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8563)
inline _bstr_t Excel::PivotTable::CreateCubeFile ( _bstr_t File, const _variant_t & Measures, const _variant_t & Levels, const _variant_t & Members, const _variant_t & Properties ) {
    BSTR _result;
    _com_dispatch_method(this, 0x853, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x0008\x080c\x080c\x080c\x080c", (BSTR)File, &Measures, &Levels, &Members, &Properties);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8564)
inline VARIANT_BOOL Excel::PivotTable::GetDisplayEmptyRow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x858, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8565)
inline void Excel::PivotTable::PutDisplayEmptyRow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x858, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8566)
inline VARIANT_BOOL Excel::PivotTable::GetDisplayEmptyColumn ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x859, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8567)
inline void Excel::PivotTable::PutDisplayEmptyColumn ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x859, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8568)
inline VARIANT_BOOL Excel::PivotTable::GetShowCellBackgroundFromOLAP ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x85a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8569)
inline void Excel::PivotTable::PutShowCellBackgroundFromOLAP ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x85a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface PivotTables wrapper method implementations
//

#pragma implementation_key(8570)
inline Excel::_ApplicationPtr Excel::PivotTables::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8571)
inline enum XlCreator Excel::PivotTables::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8572)
inline IDispatchPtr Excel::PivotTables::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8573)
inline long Excel::PivotTables::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8574)
inline Excel::PivotTablePtr Excel::PivotTables::Item ( const _variant_t & Index ) {
    struct PivotTable * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(8575)
inline IUnknownPtr Excel::PivotTables::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8576)
inline Excel::PivotTablePtr Excel::PivotTables::Add ( struct PivotCache * PivotCache, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion ) {
    struct PivotTable * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0009\x000c\x080c\x080c\x080c", PivotCache, &TableDestination, &TableName, &ReadData, &DefaultVersion);
    return PivotTablePtr(_result, false);
}

//
// dispinterface PivotField wrapper method implementations
//

#pragma implementation_key(8577)
inline Excel::_ApplicationPtr Excel::PivotField::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8578)
inline enum XlCreator Excel::PivotField::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8579)
inline IDispatchPtr Excel::PivotField::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8580)
inline enum XlPivotFieldCalculation Excel::PivotField::GetCalculation ( ) {
    enum XlPivotFieldCalculation _result;
    _com_dispatch_method(this, 0x13c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8581)
inline void Excel::PivotField::PutCalculation ( enum XlPivotFieldCalculation _arg1 ) {
    _com_dispatch_method(this, 0x13c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8582)
inline Excel::PivotFieldPtr Excel::PivotField::GetChildField ( ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x2e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(8583)
inline _variant_t Excel::PivotField::GetChildItems ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2da, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(8584)
inline _variant_t Excel::PivotField::GetCurrentPage ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2e2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8585)
inline void Excel::PivotField::PutCurrentPage ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x2e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8586)
inline Excel::RangePtr Excel::PivotField::GetDataRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2d0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8587)
inline enum XlPivotFieldDataType Excel::PivotField::GetDataType ( ) {
    enum XlPivotFieldDataType _result;
    _com_dispatch_method(this, 0x2d2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8588)
inline _bstr_t Excel::PivotField::Get_Default ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8589)
inline void Excel::PivotField::Put_Default ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8590)
inline enum XlConsolidationFunction Excel::PivotField::GetFunction ( ) {
    enum XlConsolidationFunction _result;
    _com_dispatch_method(this, 0x383, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8591)
inline void Excel::PivotField::PutFunction ( enum XlConsolidationFunction _arg1 ) {
    _com_dispatch_method(this, 0x383, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8592)
inline _variant_t Excel::PivotField::GetGroupLevel ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2d3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8593)
inline _variant_t Excel::PivotField::GetHiddenItems ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2d8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(8594)
inline Excel::RangePtr Excel::PivotField::GetLabelRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2cf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8595)
inline _bstr_t Excel::PivotField::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8596)
inline void Excel::PivotField::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8597)
inline _bstr_t Excel::PivotField::GetNumberFormat ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8598)
inline void Excel::PivotField::PutNumberFormat ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8599)
inline enum XlPivotFieldOrientation Excel::PivotField::GetOrientation ( ) {
    enum XlPivotFieldOrientation _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8600)
inline void Excel::PivotField::PutOrientation ( enum XlPivotFieldOrientation _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8601)
inline VARIANT_BOOL Excel::PivotField::GetShowAllItems ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x1c4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8602)
inline void Excel::PivotField::PutShowAllItems ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8603)
inline Excel::PivotFieldPtr Excel::PivotField::GetParentField ( ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x2dc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(8604)
inline _variant_t Excel::PivotField::GetParentItems ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2d9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(8605)
inline _variant_t Excel::PivotField::PivotItems ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2e1, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(8606)
inline _variant_t Excel::PivotField::GetPosition ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8607)
inline void Excel::PivotField::PutPosition ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8608)
inline _bstr_t Excel::PivotField::GetSourceName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x2d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8609)
inline _variant_t Excel::PivotField::GetSubtotals ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2dd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(8610)
inline void Excel::PivotField::PutSubtotals ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x2dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(8611)
inline _variant_t Excel::PivotField::GetBaseField ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2de, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8612)
inline void Excel::PivotField::PutBaseField ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x2de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8613)
inline _variant_t Excel::PivotField::GetBaseItem ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2df, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8614)
inline void Excel::PivotField::PutBaseItem ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x2df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8615)
inline _variant_t Excel::PivotField::GetTotalLevels ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2d4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8616)
inline _bstr_t Excel::PivotField::GetValue ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8617)
inline void Excel::PivotField::PutValue ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8618)
inline _variant_t Excel::PivotField::GetVisibleItems ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2d7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(8619)
inline Excel::CalculatedItemsPtr Excel::PivotField::CalculatedItems ( ) {
    struct CalculatedItems * _result;
    _com_dispatch_method(this, 0x5e3, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return CalculatedItemsPtr(_result, false);
}

#pragma implementation_key(8620)
inline HRESULT Excel::PivotField::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8621)
inline VARIANT_BOOL Excel::PivotField::GetDragToColumn ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5e4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8622)
inline void Excel::PivotField::PutDragToColumn ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8623)
inline VARIANT_BOOL Excel::PivotField::GetDragToHide ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5e5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8624)
inline void Excel::PivotField::PutDragToHide ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8625)
inline VARIANT_BOOL Excel::PivotField::GetDragToPage ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5e6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8626)
inline void Excel::PivotField::PutDragToPage ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8627)
inline VARIANT_BOOL Excel::PivotField::GetDragToRow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5e7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8628)
inline void Excel::PivotField::PutDragToRow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8629)
inline VARIANT_BOOL Excel::PivotField::GetDragToData ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x734, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8630)
inline void Excel::PivotField::PutDragToData ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x734, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8631)
inline _bstr_t Excel::PivotField::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8632)
inline void Excel::PivotField::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8633)
inline VARIANT_BOOL Excel::PivotField::GetIsCalculated ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8634)
inline long Excel::PivotField::GetMemoryUsed ( ) {
    long _result;
    _com_dispatch_method(this, 0x174, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8635)
inline VARIANT_BOOL Excel::PivotField::GetServerBased ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5e9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8636)
inline void Excel::PivotField::PutServerBased ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8637)
inline HRESULT Excel::PivotField::AutoSort ( long Order, _bstr_t Field ) {
    return _com_dispatch_method(this, 0x5ea, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", Order, (BSTR)Field);
}

#pragma implementation_key(8638)
inline HRESULT Excel::PivotField::AutoShow ( long Type, long Range, long Count, _bstr_t Field ) {
    return _com_dispatch_method(this, 0x5eb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0008", Type, Range, Count, (BSTR)Field);
}

#pragma implementation_key(8639)
inline long Excel::PivotField::GetAutoSortOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x5ec, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8640)
inline _bstr_t Excel::PivotField::GetAutoSortField ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5ed, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8641)
inline long Excel::PivotField::GetAutoShowType ( ) {
    long _result;
    _com_dispatch_method(this, 0x5ee, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8642)
inline long Excel::PivotField::GetAutoShowRange ( ) {
    long _result;
    _com_dispatch_method(this, 0x5ef, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8643)
inline long Excel::PivotField::GetAutoShowCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x5f0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8644)
inline _bstr_t Excel::PivotField::GetAutoShowField ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5f1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8645)
inline VARIANT_BOOL Excel::PivotField::GetLayoutBlankLine ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x735, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8646)
inline void Excel::PivotField::PutLayoutBlankLine ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x735, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8647)
inline enum XlSubtototalLocationType Excel::PivotField::GetLayoutSubtotalLocation ( ) {
    enum XlSubtototalLocationType _result;
    _com_dispatch_method(this, 0x736, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8648)
inline void Excel::PivotField::PutLayoutSubtotalLocation ( enum XlSubtototalLocationType _arg1 ) {
    _com_dispatch_method(this, 0x736, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8649)
inline VARIANT_BOOL Excel::PivotField::GetLayoutPageBreak ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x737, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8650)
inline void Excel::PivotField::PutLayoutPageBreak ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x737, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8651)
inline enum XlLayoutFormType Excel::PivotField::GetLayoutForm ( ) {
    enum XlLayoutFormType _result;
    _com_dispatch_method(this, 0x738, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8652)
inline void Excel::PivotField::PutLayoutForm ( enum XlLayoutFormType _arg1 ) {
    _com_dispatch_method(this, 0x738, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8653)
inline _bstr_t Excel::PivotField::GetSubtotalName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x739, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8654)
inline void Excel::PivotField::PutSubtotalName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x739, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8655)
inline _bstr_t Excel::PivotField::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8656)
inline void Excel::PivotField::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8657)
inline VARIANT_BOOL Excel::PivotField::GetDrilledDown ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x73a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8658)
inline void Excel::PivotField::PutDrilledDown ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x73a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8659)
inline Excel::CubeFieldPtr Excel::PivotField::GetCubeField ( ) {
    struct CubeField * _result;
    _com_dispatch_method(this, 0x73b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CubeFieldPtr(_result, false);
}

#pragma implementation_key(8660)
inline _bstr_t Excel::PivotField::GetCurrentPageName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x73c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8661)
inline void Excel::PivotField::PutCurrentPageName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x73c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8662)
inline _bstr_t Excel::PivotField::GetStandardFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x824, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8663)
inline void Excel::PivotField::PutStandardFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x824, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8664)
inline _variant_t Excel::PivotField::GetHiddenItemsList ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x85b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8665)
inline void Excel::PivotField::PutHiddenItemsList ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x85b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8666)
inline VARIANT_BOOL Excel::PivotField::GetDatabaseSort ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x85c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8667)
inline void Excel::PivotField::PutDatabaseSort ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x85c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8668)
inline VARIANT_BOOL Excel::PivotField::GetIsMemberProperty ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x85d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8669)
inline Excel::PivotFieldPtr Excel::PivotField::GetPropertyParentField ( ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x85e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(8670)
inline long Excel::PivotField::GetPropertyOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x85f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8671)
inline void Excel::PivotField::PutPropertyOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x85f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8672)
inline VARIANT_BOOL Excel::PivotField::GetEnableItemSelection ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x860, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8673)
inline void Excel::PivotField::PutEnableItemSelection ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x860, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8674)
inline _variant_t Excel::PivotField::GetCurrentPageList ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x861, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8675)
inline void Excel::PivotField::PutCurrentPageList ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x861, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8676)
inline HRESULT Excel::PivotField::AddPageItem ( _bstr_t Item, const _variant_t & ClearList ) {
    return _com_dispatch_method(this, 0x862, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c", (BSTR)Item, &ClearList);
}

//
// dispinterface PivotFields wrapper method implementations
//

#pragma implementation_key(8677)
inline Excel::_ApplicationPtr Excel::PivotFields::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8678)
inline enum XlCreator Excel::PivotFields::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8679)
inline Excel::PivotTablePtr Excel::PivotFields::GetParent ( ) {
    struct PivotTable * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(8680)
inline long Excel::PivotFields::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8681)
inline IDispatchPtr Excel::PivotFields::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8682)
inline IUnknownPtr Excel::PivotFields::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface CalculatedFields wrapper method implementations
//

#pragma implementation_key(8683)
inline Excel::_ApplicationPtr Excel::CalculatedFields::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8684)
inline enum XlCreator Excel::CalculatedFields::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8685)
inline IDispatchPtr Excel::CalculatedFields::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8686)
inline long Excel::CalculatedFields::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8687)
inline Excel::PivotFieldPtr Excel::CalculatedFields::_Add ( _bstr_t Name, _bstr_t Formula ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x825, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x0008", (BSTR)Name, (BSTR)Formula);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(8688)
inline Excel::PivotFieldPtr Excel::CalculatedFields::Item ( const _variant_t & Index ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(8689)
inline Excel::PivotFieldPtr Excel::CalculatedFields::Get_Default ( const _variant_t & Field ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Field);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(8690)
inline IUnknownPtr Excel::CalculatedFields::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8691)
inline Excel::PivotFieldPtr Excel::CalculatedFields::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x0008\x080c", (BSTR)Name, (BSTR)Formula, &UseStandardFormula);
    return PivotFieldPtr(_result, false);
}

//
// dispinterface PivotItem wrapper method implementations
//

#pragma implementation_key(8692)
inline Excel::_ApplicationPtr Excel::PivotItem::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8693)
inline enum XlCreator Excel::PivotItem::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8694)
inline Excel::PivotFieldPtr Excel::PivotItem::GetParent ( ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(8695)
inline _variant_t Excel::PivotItem::GetChildItems ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2da, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(8696)
inline Excel::RangePtr Excel::PivotItem::GetDataRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2d0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8697)
inline _bstr_t Excel::PivotItem::Get_Default ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8698)
inline void Excel::PivotItem::Put_Default ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8699)
inline Excel::RangePtr Excel::PivotItem::GetLabelRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2cf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8700)
inline _bstr_t Excel::PivotItem::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8701)
inline void Excel::PivotItem::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8702)
inline Excel::PivotItemPtr Excel::PivotItem::GetParentItem ( ) {
    struct PivotItem * _result;
    _com_dispatch_method(this, 0x2e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(8703)
inline VARIANT_BOOL Excel::PivotItem::GetParentShowDetail ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2e3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8704)
inline long Excel::PivotItem::GetPosition ( ) {
    long _result;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8705)
inline void Excel::PivotItem::PutPosition ( long _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8706)
inline VARIANT_BOOL Excel::PivotItem::GetShowDetail ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x249, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8707)
inline void Excel::PivotItem::PutShowDetail ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x249, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8708)
inline _variant_t Excel::PivotItem::GetSourceName ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x2d1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8709)
inline _bstr_t Excel::PivotItem::GetValue ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8710)
inline void Excel::PivotItem::PutValue ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8711)
inline VARIANT_BOOL Excel::PivotItem::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8712)
inline void Excel::PivotItem::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8713)
inline HRESULT Excel::PivotItem::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(8714)
inline VARIANT_BOOL Excel::PivotItem::GetIsCalculated ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8715)
inline long Excel::PivotItem::GetRecordCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x5c6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8716)
inline _bstr_t Excel::PivotItem::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8717)
inline void Excel::PivotItem::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8718)
inline _bstr_t Excel::PivotItem::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8719)
inline void Excel::PivotItem::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8720)
inline VARIANT_BOOL Excel::PivotItem::GetDrilledDown ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x73a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8721)
inline void Excel::PivotItem::PutDrilledDown ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x73a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8722)
inline _bstr_t Excel::PivotItem::GetStandardFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x824, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8723)
inline void Excel::PivotItem::PutStandardFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x824, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8724)
inline _bstr_t Excel::PivotItem::GetSourceNameStandard ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x864, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

//
// dispinterface PivotItems wrapper method implementations
//

#pragma implementation_key(8725)
inline Excel::_ApplicationPtr Excel::PivotItems::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8726)
inline enum XlCreator Excel::PivotItems::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8727)
inline Excel::PivotFieldPtr Excel::PivotItems::GetParent ( ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(8728)
inline HRESULT Excel::PivotItems::Add ( _bstr_t Name ) {
    return _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Name);
}

#pragma implementation_key(8729)
inline long Excel::PivotItems::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8730)
inline IDispatchPtr Excel::PivotItems::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8731)
inline IUnknownPtr Excel::PivotItems::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface CalculatedItems wrapper method implementations
//

#pragma implementation_key(8732)
inline Excel::_ApplicationPtr Excel::CalculatedItems::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8733)
inline enum XlCreator Excel::CalculatedItems::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8734)
inline IDispatchPtr Excel::CalculatedItems::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8735)
inline long Excel::CalculatedItems::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8736)
inline Excel::PivotItemPtr Excel::CalculatedItems::_Add ( _bstr_t Name, _bstr_t Formula ) {
    struct PivotItem * _result;
    _com_dispatch_method(this, 0x825, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x0008", (BSTR)Name, (BSTR)Formula);
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(8737)
inline Excel::PivotItemPtr Excel::CalculatedItems::Item ( const _variant_t & Index ) {
    struct PivotItem * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(8738)
inline Excel::PivotItemPtr Excel::CalculatedItems::Get_Default ( const _variant_t & Field ) {
    struct PivotItem * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Field);
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(8739)
inline IUnknownPtr Excel::CalculatedItems::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(8740)
inline Excel::PivotItemPtr Excel::CalculatedItems::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula ) {
    struct PivotItem * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x0008\x080c", (BSTR)Name, (BSTR)Formula, &UseStandardFormula);
    return PivotItemPtr(_result, false);
}

//
// dispinterface Characters wrapper method implementations
//

#pragma implementation_key(8741)
inline Excel::_ApplicationPtr Excel::Characters::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8742)
inline enum XlCreator Excel::Characters::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8743)
inline IDispatchPtr Excel::Characters::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8744)
inline _bstr_t Excel::Characters::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8745)
inline void Excel::Characters::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8746)
inline long Excel::Characters::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8747)
inline _variant_t Excel::Characters::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8748)
inline Excel::FontPtr Excel::Characters::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(8749)
inline _variant_t Excel::Characters::Insert ( _bstr_t String ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xfc, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008", (BSTR)String);
    return _variant_t(_result, false);
}

#pragma implementation_key(8750)
inline _bstr_t Excel::Characters::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8751)
inline void Excel::Characters::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8752)
inline _bstr_t Excel::Characters::GetPhoneticCharacters ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5f2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8753)
inline void Excel::Characters::PutPhoneticCharacters ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface Dialogs wrapper method implementations
//

#pragma implementation_key(8754)
inline Excel::_ApplicationPtr Excel::Dialogs::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8755)
inline enum XlCreator Excel::Dialogs::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8756)
inline IDispatchPtr Excel::Dialogs::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8757)
inline long Excel::Dialogs::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8758)
inline Excel::DialogPtr Excel::Dialogs::GetItem ( enum XlBuiltInDialog Index ) {
    struct Dialog * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return DialogPtr(_result, false);
}

#pragma implementation_key(8759)
inline Excel::DialogPtr Excel::Dialogs::Get_Default ( enum XlBuiltInDialog Index ) {
    struct Dialog * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return DialogPtr(_result, false);
}

#pragma implementation_key(8760)
inline IUnknownPtr Excel::Dialogs::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Dialog wrapper method implementations
//

#pragma implementation_key(8761)
inline Excel::_ApplicationPtr Excel::Dialog::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8762)
inline enum XlCreator Excel::Dialog::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8763)
inline IDispatchPtr Excel::Dialog::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8764)
inline VARIANT_BOOL Excel::Dialog::Show ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x1f0, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Arg1, &Arg2, &Arg3, &Arg4, &Arg5, &Arg6, &Arg7, &Arg8, &Arg9, &Arg10, &Arg11, &Arg12, &Arg13, &Arg14, &Arg15, &Arg16, &Arg17, &Arg18, &Arg19, &Arg20, &Arg21, &Arg22, &Arg23, &Arg24, &Arg25, &Arg26, &Arg27, &Arg28, &Arg29, &Arg30);
    return _result;
}

//
// dispinterface SoundNote wrapper method implementations
//

#pragma implementation_key(8765)
inline Excel::_ApplicationPtr Excel::SoundNote::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8766)
inline enum XlCreator Excel::SoundNote::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8767)
inline IDispatchPtr Excel::SoundNote::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8768)
inline _variant_t Excel::SoundNote::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8769)
inline _variant_t Excel::SoundNote::Import ( _bstr_t Filename ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x395, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008", (BSTR)Filename);
    return _variant_t(_result, false);
}

#pragma implementation_key(8770)
inline _variant_t Excel::SoundNote::Play ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x396, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8771)
inline _variant_t Excel::SoundNote::Record ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x397, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface Button wrapper method implementations
//

#pragma implementation_key(8772)
inline Excel::_ApplicationPtr Excel::Button::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8773)
inline enum XlCreator Excel::Button::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8774)
inline IDispatchPtr Excel::Button::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8775)
inline Excel::RangePtr Excel::Button::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8776)
inline _variant_t Excel::Button::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8777)
inline _variant_t Excel::Button::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8778)
inline _variant_t Excel::Button::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(8779)
inline _variant_t Excel::Button::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8780)
inline _variant_t Excel::Button::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8781)
inline IDispatchPtr Excel::Button::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8782)
inline VARIANT_BOOL Excel::Button::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8783)
inline void Excel::Button::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8784)
inline double Excel::Button::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8785)
inline void Excel::Button::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8786)
inline long Excel::Button::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8787)
inline double Excel::Button::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8788)
inline void Excel::Button::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8789)
inline VARIANT_BOOL Excel::Button::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8790)
inline void Excel::Button::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8791)
inline _bstr_t Excel::Button::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8792)
inline void Excel::Button::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8793)
inline _bstr_t Excel::Button::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8794)
inline void Excel::Button::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8795)
inline _variant_t Excel::Button::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8796)
inline void Excel::Button::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8797)
inline VARIANT_BOOL Excel::Button::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8798)
inline void Excel::Button::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8799)
inline _variant_t Excel::Button::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(8800)
inline _variant_t Excel::Button::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8801)
inline double Excel::Button::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8802)
inline void Excel::Button::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8803)
inline Excel::RangePtr Excel::Button::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8804)
inline VARIANT_BOOL Excel::Button::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8805)
inline void Excel::Button::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8806)
inline double Excel::Button::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8807)
inline void Excel::Button::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8808)
inline long Excel::Button::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8809)
inline Excel::ShapeRangePtr Excel::Button::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(8810)
inline VARIANT_BOOL Excel::Button::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8811)
inline void Excel::Button::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8812)
inline _variant_t Excel::Button::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8813)
inline void Excel::Button::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8814)
inline VARIANT_BOOL Excel::Button::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8815)
inline void Excel::Button::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8816)
inline _bstr_t Excel::Button::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8817)
inline void Excel::Button::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8818)
inline Excel::CharactersPtr Excel::Button::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(8819)
inline _variant_t Excel::Button::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(8820)
inline Excel::FontPtr Excel::Button::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(8821)
inline _bstr_t Excel::Button::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8822)
inline void Excel::Button::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8823)
inline _variant_t Excel::Button::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8824)
inline void Excel::Button::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8825)
inline VARIANT_BOOL Excel::Button::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8826)
inline void Excel::Button::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8827)
inline _variant_t Excel::Button::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8828)
inline void Excel::Button::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8829)
inline _bstr_t Excel::Button::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8830)
inline void Excel::Button::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8831)
inline _variant_t Excel::Button::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8832)
inline void Excel::Button::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8833)
inline long Excel::Button::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8834)
inline void Excel::Button::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8835)
inline _variant_t Excel::Button::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8836)
inline void Excel::Button::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8837)
inline VARIANT_BOOL Excel::Button::GetCancelButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8838)
inline void Excel::Button::PutCancelButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8839)
inline VARIANT_BOOL Excel::Button::GetDefaultButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8840)
inline void Excel::Button::PutDefaultButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8841)
inline VARIANT_BOOL Excel::Button::GetDismissButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8842)
inline void Excel::Button::PutDismissButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8843)
inline VARIANT_BOOL Excel::Button::GetHelpButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8844)
inline void Excel::Button::PutHelpButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8845)
inline _variant_t Excel::Button::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8846)
inline void Excel::Button::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Buttons wrapper method implementations
//

#pragma implementation_key(8847)
inline Excel::_ApplicationPtr Excel::Buttons::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8848)
inline enum XlCreator Excel::Buttons::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8849)
inline IDispatchPtr Excel::Buttons::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8850)
inline _variant_t Excel::Buttons::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8851)
inline _variant_t Excel::Buttons::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8852)
inline _variant_t Excel::Buttons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(8853)
inline _variant_t Excel::Buttons::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8854)
inline _variant_t Excel::Buttons::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8855)
inline IDispatchPtr Excel::Buttons::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8856)
inline VARIANT_BOOL Excel::Buttons::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8857)
inline void Excel::Buttons::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8858)
inline double Excel::Buttons::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8859)
inline void Excel::Buttons::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8860)
inline double Excel::Buttons::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8861)
inline void Excel::Buttons::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8862)
inline VARIANT_BOOL Excel::Buttons::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8863)
inline void Excel::Buttons::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8864)
inline _bstr_t Excel::Buttons::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8865)
inline void Excel::Buttons::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8866)
inline _variant_t Excel::Buttons::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8867)
inline void Excel::Buttons::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8868)
inline VARIANT_BOOL Excel::Buttons::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8869)
inline void Excel::Buttons::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8870)
inline _variant_t Excel::Buttons::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(8871)
inline _variant_t Excel::Buttons::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8872)
inline double Excel::Buttons::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8873)
inline void Excel::Buttons::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8874)
inline VARIANT_BOOL Excel::Buttons::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8875)
inline void Excel::Buttons::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8876)
inline double Excel::Buttons::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8877)
inline void Excel::Buttons::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8878)
inline long Excel::Buttons::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8879)
inline Excel::ShapeRangePtr Excel::Buttons::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(8880)
inline VARIANT_BOOL Excel::Buttons::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8881)
inline void Excel::Buttons::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8882)
inline _variant_t Excel::Buttons::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8883)
inline void Excel::Buttons::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8884)
inline VARIANT_BOOL Excel::Buttons::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8885)
inline void Excel::Buttons::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8886)
inline _bstr_t Excel::Buttons::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8887)
inline void Excel::Buttons::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8888)
inline Excel::CharactersPtr Excel::Buttons::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(8889)
inline _variant_t Excel::Buttons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(8890)
inline Excel::FontPtr Excel::Buttons::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(8891)
inline _bstr_t Excel::Buttons::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8892)
inline void Excel::Buttons::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8893)
inline _variant_t Excel::Buttons::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8894)
inline void Excel::Buttons::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8895)
inline VARIANT_BOOL Excel::Buttons::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8896)
inline void Excel::Buttons::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8897)
inline _variant_t Excel::Buttons::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8898)
inline void Excel::Buttons::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8899)
inline _bstr_t Excel::Buttons::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8900)
inline void Excel::Buttons::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8901)
inline _variant_t Excel::Buttons::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8902)
inline void Excel::Buttons::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8903)
inline long Excel::Buttons::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8904)
inline void Excel::Buttons::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8905)
inline _variant_t Excel::Buttons::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8906)
inline void Excel::Buttons::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8907)
inline VARIANT_BOOL Excel::Buttons::GetCancelButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8908)
inline void Excel::Buttons::PutCancelButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8909)
inline VARIANT_BOOL Excel::Buttons::GetDefaultButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8910)
inline void Excel::Buttons::PutDefaultButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8911)
inline VARIANT_BOOL Excel::Buttons::GetDismissButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8912)
inline void Excel::Buttons::PutDismissButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8913)
inline VARIANT_BOOL Excel::Buttons::GetHelpButton ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8914)
inline void Excel::Buttons::PutHelpButton ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x35c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8915)
inline _variant_t Excel::Buttons::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8916)
inline void Excel::Buttons::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8917)
inline Excel::ButtonPtr Excel::Buttons::Add ( double Left, double Top, double Width, double Height ) {
    struct Button * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return ButtonPtr(_result, false);
}

#pragma implementation_key(8918)
inline long Excel::Buttons::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8919)
inline Excel::GroupObjectPtr Excel::Buttons::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(8920)
inline IDispatchPtr Excel::Buttons::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8921)
inline IUnknownPtr Excel::Buttons::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface CheckBox wrapper method implementations
//

#pragma implementation_key(8922)
inline Excel::_ApplicationPtr Excel::CheckBox::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8923)
inline enum XlCreator Excel::CheckBox::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8924)
inline IDispatchPtr Excel::CheckBox::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8925)
inline Excel::RangePtr Excel::CheckBox::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8926)
inline _variant_t Excel::CheckBox::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8927)
inline _variant_t Excel::CheckBox::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8928)
inline _variant_t Excel::CheckBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(8929)
inline _variant_t Excel::CheckBox::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8930)
inline _variant_t Excel::CheckBox::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8931)
inline IDispatchPtr Excel::CheckBox::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8932)
inline VARIANT_BOOL Excel::CheckBox::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8933)
inline void Excel::CheckBox::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8934)
inline double Excel::CheckBox::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8935)
inline void Excel::CheckBox::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8936)
inline long Excel::CheckBox::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8937)
inline double Excel::CheckBox::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8938)
inline void Excel::CheckBox::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8939)
inline VARIANT_BOOL Excel::CheckBox::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8940)
inline void Excel::CheckBox::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8941)
inline _bstr_t Excel::CheckBox::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8942)
inline void Excel::CheckBox::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8943)
inline _bstr_t Excel::CheckBox::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8944)
inline void Excel::CheckBox::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8945)
inline _variant_t Excel::CheckBox::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8946)
inline void Excel::CheckBox::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8947)
inline VARIANT_BOOL Excel::CheckBox::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8948)
inline void Excel::CheckBox::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8949)
inline _variant_t Excel::CheckBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(8950)
inline _variant_t Excel::CheckBox::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8951)
inline double Excel::CheckBox::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8952)
inline void Excel::CheckBox::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8953)
inline Excel::RangePtr Excel::CheckBox::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(8954)
inline VARIANT_BOOL Excel::CheckBox::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8955)
inline void Excel::CheckBox::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8956)
inline double Excel::CheckBox::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8957)
inline void Excel::CheckBox::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8958)
inline long Excel::CheckBox::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8959)
inline Excel::ShapeRangePtr Excel::CheckBox::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(8960)
inline _bstr_t Excel::CheckBox::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8961)
inline void Excel::CheckBox::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8962)
inline Excel::CharactersPtr Excel::CheckBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(8963)
inline _variant_t Excel::CheckBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(8964)
inline VARIANT_BOOL Excel::CheckBox::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8965)
inline void Excel::CheckBox::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8966)
inline _bstr_t Excel::CheckBox::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8967)
inline void Excel::CheckBox::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8968)
inline _variant_t Excel::CheckBox::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8969)
inline void Excel::CheckBox::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8970)
inline Excel::BorderPtr Excel::CheckBox::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(8971)
inline long Excel::CheckBox::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8972)
inline void Excel::CheckBox::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(8973)
inline VARIANT_BOOL Excel::CheckBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8974)
inline void Excel::CheckBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8975)
inline Excel::InteriorPtr Excel::CheckBox::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(8976)
inline _bstr_t Excel::CheckBox::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(8977)
inline void Excel::CheckBox::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(8978)
inline _variant_t Excel::CheckBox::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8979)
inline void Excel::CheckBox::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(8980)
inline _variant_t Excel::CheckBox::GetValue ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8981)
inline void Excel::CheckBox::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface CheckBoxes wrapper method implementations
//

#pragma implementation_key(8982)
inline Excel::_ApplicationPtr Excel::CheckBoxes::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(8983)
inline enum XlCreator Excel::CheckBoxes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8984)
inline IDispatchPtr Excel::CheckBoxes::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8985)
inline _variant_t Excel::CheckBoxes::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8986)
inline _variant_t Excel::CheckBoxes::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8987)
inline _variant_t Excel::CheckBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(8988)
inline _variant_t Excel::CheckBoxes::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8989)
inline _variant_t Excel::CheckBoxes::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(8990)
inline IDispatchPtr Excel::CheckBoxes::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(8991)
inline VARIANT_BOOL Excel::CheckBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8992)
inline void Excel::CheckBoxes::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8993)
inline double Excel::CheckBoxes::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8994)
inline void Excel::CheckBoxes::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8995)
inline double Excel::CheckBoxes::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8996)
inline void Excel::CheckBoxes::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(8997)
inline VARIANT_BOOL Excel::CheckBoxes::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(8998)
inline void Excel::CheckBoxes::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(8999)
inline _bstr_t Excel::CheckBoxes::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9000)
inline void Excel::CheckBoxes::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9001)
inline _variant_t Excel::CheckBoxes::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9002)
inline void Excel::CheckBoxes::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9003)
inline VARIANT_BOOL Excel::CheckBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9004)
inline void Excel::CheckBoxes::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9005)
inline _variant_t Excel::CheckBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9006)
inline _variant_t Excel::CheckBoxes::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9007)
inline double Excel::CheckBoxes::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9008)
inline void Excel::CheckBoxes::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9009)
inline VARIANT_BOOL Excel::CheckBoxes::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9010)
inline void Excel::CheckBoxes::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9011)
inline double Excel::CheckBoxes::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9012)
inline void Excel::CheckBoxes::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9013)
inline long Excel::CheckBoxes::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9014)
inline Excel::ShapeRangePtr Excel::CheckBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9015)
inline _bstr_t Excel::CheckBoxes::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9016)
inline void Excel::CheckBoxes::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9017)
inline Excel::CharactersPtr Excel::CheckBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9018)
inline _variant_t Excel::CheckBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(9019)
inline VARIANT_BOOL Excel::CheckBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9020)
inline void Excel::CheckBoxes::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9021)
inline _bstr_t Excel::CheckBoxes::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9022)
inline void Excel::CheckBoxes::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9023)
inline _variant_t Excel::CheckBoxes::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9024)
inline void Excel::CheckBoxes::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9025)
inline Excel::BorderPtr Excel::CheckBoxes::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(9026)
inline long Excel::CheckBoxes::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9027)
inline void Excel::CheckBoxes::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9028)
inline VARIANT_BOOL Excel::CheckBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9029)
inline void Excel::CheckBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9030)
inline Excel::InteriorPtr Excel::CheckBoxes::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(9031)
inline _bstr_t Excel::CheckBoxes::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9032)
inline void Excel::CheckBoxes::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9033)
inline _variant_t Excel::CheckBoxes::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9034)
inline void Excel::CheckBoxes::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9035)
inline _variant_t Excel::CheckBoxes::GetValue ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9036)
inline void Excel::CheckBoxes::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9037)
inline Excel::CheckBoxPtr Excel::CheckBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct CheckBox * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return CheckBoxPtr(_result, false);
}

#pragma implementation_key(9038)
inline long Excel::CheckBoxes::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9039)
inline Excel::GroupObjectPtr Excel::CheckBoxes::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(9040)
inline IDispatchPtr Excel::CheckBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9041)
inline IUnknownPtr Excel::CheckBoxes::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface OptionButton wrapper method implementations
//

#pragma implementation_key(9042)
inline Excel::_ApplicationPtr Excel::OptionButton::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9043)
inline enum XlCreator Excel::OptionButton::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9044)
inline IDispatchPtr Excel::OptionButton::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9045)
inline Excel::RangePtr Excel::OptionButton::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9046)
inline _variant_t Excel::OptionButton::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9047)
inline _variant_t Excel::OptionButton::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9048)
inline _variant_t Excel::OptionButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9049)
inline _variant_t Excel::OptionButton::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9050)
inline _variant_t Excel::OptionButton::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9051)
inline IDispatchPtr Excel::OptionButton::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9052)
inline VARIANT_BOOL Excel::OptionButton::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9053)
inline void Excel::OptionButton::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9054)
inline double Excel::OptionButton::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9055)
inline void Excel::OptionButton::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9056)
inline long Excel::OptionButton::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9057)
inline double Excel::OptionButton::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9058)
inline void Excel::OptionButton::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9059)
inline VARIANT_BOOL Excel::OptionButton::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9060)
inline void Excel::OptionButton::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9061)
inline _bstr_t Excel::OptionButton::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9062)
inline void Excel::OptionButton::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9063)
inline _bstr_t Excel::OptionButton::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9064)
inline void Excel::OptionButton::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9065)
inline _variant_t Excel::OptionButton::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9066)
inline void Excel::OptionButton::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9067)
inline VARIANT_BOOL Excel::OptionButton::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9068)
inline void Excel::OptionButton::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9069)
inline _variant_t Excel::OptionButton::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9070)
inline _variant_t Excel::OptionButton::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9071)
inline double Excel::OptionButton::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9072)
inline void Excel::OptionButton::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9073)
inline Excel::RangePtr Excel::OptionButton::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9074)
inline VARIANT_BOOL Excel::OptionButton::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9075)
inline void Excel::OptionButton::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9076)
inline double Excel::OptionButton::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9077)
inline void Excel::OptionButton::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9078)
inline long Excel::OptionButton::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9079)
inline Excel::ShapeRangePtr Excel::OptionButton::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9080)
inline _bstr_t Excel::OptionButton::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9081)
inline void Excel::OptionButton::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9082)
inline Excel::CharactersPtr Excel::OptionButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9083)
inline _variant_t Excel::OptionButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(9084)
inline VARIANT_BOOL Excel::OptionButton::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9085)
inline void Excel::OptionButton::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9086)
inline _bstr_t Excel::OptionButton::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9087)
inline void Excel::OptionButton::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9088)
inline _variant_t Excel::OptionButton::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9089)
inline void Excel::OptionButton::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9090)
inline Excel::BorderPtr Excel::OptionButton::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(9091)
inline long Excel::OptionButton::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9092)
inline void Excel::OptionButton::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9093)
inline VARIANT_BOOL Excel::OptionButton::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9094)
inline void Excel::OptionButton::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9095)
inline Excel::InteriorPtr Excel::OptionButton::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(9096)
inline _bstr_t Excel::OptionButton::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9097)
inline void Excel::OptionButton::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9098)
inline _variant_t Excel::OptionButton::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9099)
inline void Excel::OptionButton::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9100)
inline _variant_t Excel::OptionButton::GetValue ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9101)
inline void Excel::OptionButton::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9102)
inline Excel::GroupBoxPtr Excel::OptionButton::GetGroupBox ( ) {
    struct GroupBox * _result;
    _com_dispatch_method(this, 0x341, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GroupBoxPtr(_result, false);
}

//
// dispinterface OptionButtons wrapper method implementations
//

#pragma implementation_key(9103)
inline Excel::_ApplicationPtr Excel::OptionButtons::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9104)
inline enum XlCreator Excel::OptionButtons::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9105)
inline IDispatchPtr Excel::OptionButtons::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9106)
inline _variant_t Excel::OptionButtons::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9107)
inline _variant_t Excel::OptionButtons::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9108)
inline _variant_t Excel::OptionButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9109)
inline _variant_t Excel::OptionButtons::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9110)
inline _variant_t Excel::OptionButtons::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9111)
inline IDispatchPtr Excel::OptionButtons::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9112)
inline VARIANT_BOOL Excel::OptionButtons::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9113)
inline void Excel::OptionButtons::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9114)
inline double Excel::OptionButtons::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9115)
inline void Excel::OptionButtons::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9116)
inline double Excel::OptionButtons::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9117)
inline void Excel::OptionButtons::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9118)
inline VARIANT_BOOL Excel::OptionButtons::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9119)
inline void Excel::OptionButtons::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9120)
inline _bstr_t Excel::OptionButtons::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9121)
inline void Excel::OptionButtons::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9122)
inline _variant_t Excel::OptionButtons::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9123)
inline void Excel::OptionButtons::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9124)
inline VARIANT_BOOL Excel::OptionButtons::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9125)
inline void Excel::OptionButtons::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9126)
inline _variant_t Excel::OptionButtons::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9127)
inline _variant_t Excel::OptionButtons::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9128)
inline double Excel::OptionButtons::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9129)
inline void Excel::OptionButtons::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9130)
inline VARIANT_BOOL Excel::OptionButtons::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9131)
inline void Excel::OptionButtons::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9132)
inline double Excel::OptionButtons::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9133)
inline void Excel::OptionButtons::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9134)
inline long Excel::OptionButtons::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9135)
inline Excel::ShapeRangePtr Excel::OptionButtons::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9136)
inline _bstr_t Excel::OptionButtons::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9137)
inline void Excel::OptionButtons::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9138)
inline Excel::CharactersPtr Excel::OptionButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9139)
inline _variant_t Excel::OptionButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(9140)
inline VARIANT_BOOL Excel::OptionButtons::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9141)
inline void Excel::OptionButtons::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9142)
inline _bstr_t Excel::OptionButtons::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9143)
inline void Excel::OptionButtons::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9144)
inline _variant_t Excel::OptionButtons::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9145)
inline void Excel::OptionButtons::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9146)
inline Excel::BorderPtr Excel::OptionButtons::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(9147)
inline long Excel::OptionButtons::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9148)
inline void Excel::OptionButtons::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9149)
inline VARIANT_BOOL Excel::OptionButtons::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9150)
inline void Excel::OptionButtons::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9151)
inline Excel::InteriorPtr Excel::OptionButtons::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(9152)
inline _bstr_t Excel::OptionButtons::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9153)
inline void Excel::OptionButtons::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9154)
inline _variant_t Excel::OptionButtons::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9155)
inline void Excel::OptionButtons::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9156)
inline _variant_t Excel::OptionButtons::GetValue ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9157)
inline void Excel::OptionButtons::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9158)
inline Excel::GroupBoxPtr Excel::OptionButtons::GetGroupBox ( ) {
    struct GroupBox * _result;
    _com_dispatch_method(this, 0x341, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GroupBoxPtr(_result, false);
}

#pragma implementation_key(9159)
inline Excel::OptionButtonPtr Excel::OptionButtons::Add ( double Left, double Top, double Width, double Height ) {
    struct OptionButton * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return OptionButtonPtr(_result, false);
}

#pragma implementation_key(9160)
inline long Excel::OptionButtons::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9161)
inline Excel::GroupObjectPtr Excel::OptionButtons::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(9162)
inline IDispatchPtr Excel::OptionButtons::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9163)
inline IUnknownPtr Excel::OptionButtons::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface EditBox wrapper method implementations
//

#pragma implementation_key(9164)
inline Excel::_ApplicationPtr Excel::EditBox::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9165)
inline enum XlCreator Excel::EditBox::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9166)
inline IDispatchPtr Excel::EditBox::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9167)
inline Excel::RangePtr Excel::EditBox::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9168)
inline _variant_t Excel::EditBox::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9169)
inline _variant_t Excel::EditBox::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9170)
inline _variant_t Excel::EditBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9171)
inline _variant_t Excel::EditBox::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9172)
inline _variant_t Excel::EditBox::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9173)
inline IDispatchPtr Excel::EditBox::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9174)
inline VARIANT_BOOL Excel::EditBox::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9175)
inline void Excel::EditBox::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9176)
inline double Excel::EditBox::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9177)
inline void Excel::EditBox::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9178)
inline long Excel::EditBox::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9179)
inline double Excel::EditBox::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9180)
inline void Excel::EditBox::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9181)
inline VARIANT_BOOL Excel::EditBox::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9182)
inline void Excel::EditBox::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9183)
inline _bstr_t Excel::EditBox::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9184)
inline void Excel::EditBox::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9185)
inline _bstr_t Excel::EditBox::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9186)
inline void Excel::EditBox::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9187)
inline _variant_t Excel::EditBox::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9188)
inline void Excel::EditBox::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9189)
inline VARIANT_BOOL Excel::EditBox::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9190)
inline void Excel::EditBox::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9191)
inline _variant_t Excel::EditBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9192)
inline _variant_t Excel::EditBox::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9193)
inline double Excel::EditBox::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9194)
inline void Excel::EditBox::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9195)
inline Excel::RangePtr Excel::EditBox::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9196)
inline VARIANT_BOOL Excel::EditBox::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9197)
inline void Excel::EditBox::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9198)
inline double Excel::EditBox::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9199)
inline void Excel::EditBox::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9200)
inline long Excel::EditBox::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9201)
inline Excel::ShapeRangePtr Excel::EditBox::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9202)
inline _bstr_t Excel::EditBox::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9203)
inline void Excel::EditBox::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9204)
inline Excel::CharactersPtr Excel::EditBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9205)
inline _variant_t Excel::EditBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(9206)
inline VARIANT_BOOL Excel::EditBox::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9207)
inline void Excel::EditBox::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9208)
inline _bstr_t Excel::EditBox::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9209)
inline void Excel::EditBox::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9210)
inline VARIANT_BOOL Excel::EditBox::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9211)
inline void Excel::EditBox::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9212)
inline long Excel::EditBox::GetInputType ( ) {
    long _result;
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9213)
inline void Excel::EditBox::PutInputType ( long _arg1 ) {
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9214)
inline _bstr_t Excel::EditBox::GetLinkedObject ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x35e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9215)
inline VARIANT_BOOL Excel::EditBox::GetMultiLine ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9216)
inline void Excel::EditBox::PutMultiLine ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9217)
inline VARIANT_BOOL Excel::EditBox::GetPasswordEdit ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x48a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9218)
inline void Excel::EditBox::PutPasswordEdit ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x48a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface EditBoxes wrapper method implementations
//

#pragma implementation_key(9219)
inline Excel::_ApplicationPtr Excel::EditBoxes::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9220)
inline enum XlCreator Excel::EditBoxes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9221)
inline IDispatchPtr Excel::EditBoxes::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9222)
inline _variant_t Excel::EditBoxes::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9223)
inline _variant_t Excel::EditBoxes::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9224)
inline _variant_t Excel::EditBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9225)
inline _variant_t Excel::EditBoxes::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9226)
inline _variant_t Excel::EditBoxes::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9227)
inline IDispatchPtr Excel::EditBoxes::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9228)
inline VARIANT_BOOL Excel::EditBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9229)
inline void Excel::EditBoxes::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9230)
inline double Excel::EditBoxes::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9231)
inline void Excel::EditBoxes::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9232)
inline double Excel::EditBoxes::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9233)
inline void Excel::EditBoxes::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9234)
inline VARIANT_BOOL Excel::EditBoxes::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9235)
inline void Excel::EditBoxes::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9236)
inline _bstr_t Excel::EditBoxes::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9237)
inline void Excel::EditBoxes::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9238)
inline _variant_t Excel::EditBoxes::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9239)
inline void Excel::EditBoxes::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9240)
inline VARIANT_BOOL Excel::EditBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9241)
inline void Excel::EditBoxes::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9242)
inline _variant_t Excel::EditBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9243)
inline _variant_t Excel::EditBoxes::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9244)
inline double Excel::EditBoxes::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9245)
inline void Excel::EditBoxes::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9246)
inline VARIANT_BOOL Excel::EditBoxes::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9247)
inline void Excel::EditBoxes::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9248)
inline double Excel::EditBoxes::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9249)
inline void Excel::EditBoxes::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9250)
inline long Excel::EditBoxes::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9251)
inline Excel::ShapeRangePtr Excel::EditBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9252)
inline _bstr_t Excel::EditBoxes::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9253)
inline void Excel::EditBoxes::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9254)
inline Excel::CharactersPtr Excel::EditBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9255)
inline _variant_t Excel::EditBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(9256)
inline VARIANT_BOOL Excel::EditBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9257)
inline void Excel::EditBoxes::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9258)
inline _bstr_t Excel::EditBoxes::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9259)
inline void Excel::EditBoxes::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9260)
inline VARIANT_BOOL Excel::EditBoxes::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9261)
inline void Excel::EditBoxes::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x39a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9262)
inline long Excel::EditBoxes::GetInputType ( ) {
    long _result;
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9263)
inline void Excel::EditBoxes::PutInputType ( long _arg1 ) {
    _com_dispatch_method(this, 0x356, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9264)
inline VARIANT_BOOL Excel::EditBoxes::GetMultiLine ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9265)
inline void Excel::EditBoxes::PutMultiLine ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x357, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9266)
inline VARIANT_BOOL Excel::EditBoxes::GetPasswordEdit ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x48a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9267)
inline void Excel::EditBoxes::PutPasswordEdit ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x48a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9268)
inline Excel::EditBoxPtr Excel::EditBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct EditBox * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return EditBoxPtr(_result, false);
}

#pragma implementation_key(9269)
inline long Excel::EditBoxes::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9270)
inline Excel::GroupObjectPtr Excel::EditBoxes::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(9271)
inline _variant_t Excel::EditBoxes::Item ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9272)
inline IUnknownPtr Excel::EditBoxes::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface ScrollBar wrapper method implementations
//

#pragma implementation_key(9273)
inline Excel::_ApplicationPtr Excel::ScrollBar::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9274)
inline enum XlCreator Excel::ScrollBar::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9275)
inline IDispatchPtr Excel::ScrollBar::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9276)
inline Excel::RangePtr Excel::ScrollBar::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9277)
inline _variant_t Excel::ScrollBar::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9278)
inline _variant_t Excel::ScrollBar::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9279)
inline _variant_t Excel::ScrollBar::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9280)
inline _variant_t Excel::ScrollBar::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9281)
inline _variant_t Excel::ScrollBar::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9282)
inline IDispatchPtr Excel::ScrollBar::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9283)
inline VARIANT_BOOL Excel::ScrollBar::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9284)
inline void Excel::ScrollBar::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9285)
inline double Excel::ScrollBar::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9286)
inline void Excel::ScrollBar::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9287)
inline long Excel::ScrollBar::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9288)
inline double Excel::ScrollBar::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9289)
inline void Excel::ScrollBar::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9290)
inline VARIANT_BOOL Excel::ScrollBar::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9291)
inline void Excel::ScrollBar::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9292)
inline _bstr_t Excel::ScrollBar::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9293)
inline void Excel::ScrollBar::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9294)
inline _bstr_t Excel::ScrollBar::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9295)
inline void Excel::ScrollBar::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9296)
inline _variant_t Excel::ScrollBar::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9297)
inline void Excel::ScrollBar::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9298)
inline VARIANT_BOOL Excel::ScrollBar::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9299)
inline void Excel::ScrollBar::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9300)
inline _variant_t Excel::ScrollBar::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9301)
inline _variant_t Excel::ScrollBar::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9302)
inline double Excel::ScrollBar::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9303)
inline void Excel::ScrollBar::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9304)
inline Excel::RangePtr Excel::ScrollBar::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9305)
inline VARIANT_BOOL Excel::ScrollBar::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9306)
inline void Excel::ScrollBar::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9307)
inline double Excel::ScrollBar::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9308)
inline void Excel::ScrollBar::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9309)
inline long Excel::ScrollBar::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9310)
inline Excel::ShapeRangePtr Excel::ScrollBar::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9311)
inline long Excel::ScrollBar::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9312)
inline void Excel::ScrollBar::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9313)
inline VARIANT_BOOL Excel::ScrollBar::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9314)
inline void Excel::ScrollBar::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9315)
inline _bstr_t Excel::ScrollBar::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9316)
inline void Excel::ScrollBar::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9317)
inline long Excel::ScrollBar::GetMax ( ) {
    long _result;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9318)
inline void Excel::ScrollBar::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9319)
inline long Excel::ScrollBar::GetMin ( ) {
    long _result;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9320)
inline void Excel::ScrollBar::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9321)
inline long Excel::ScrollBar::GetSmallChange ( ) {
    long _result;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9322)
inline void Excel::ScrollBar::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9323)
inline long Excel::ScrollBar::GetValue ( ) {
    long _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9324)
inline void Excel::ScrollBar::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9325)
inline long Excel::ScrollBar::GetLargeChange ( ) {
    long _result;
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9326)
inline void Excel::ScrollBar::PutLargeChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface ScrollBars wrapper method implementations
//

#pragma implementation_key(9327)
inline Excel::_ApplicationPtr Excel::ScrollBars::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9328)
inline enum XlCreator Excel::ScrollBars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9329)
inline IDispatchPtr Excel::ScrollBars::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9330)
inline _variant_t Excel::ScrollBars::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9331)
inline _variant_t Excel::ScrollBars::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9332)
inline _variant_t Excel::ScrollBars::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9333)
inline _variant_t Excel::ScrollBars::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9334)
inline _variant_t Excel::ScrollBars::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9335)
inline IDispatchPtr Excel::ScrollBars::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9336)
inline VARIANT_BOOL Excel::ScrollBars::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9337)
inline void Excel::ScrollBars::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9338)
inline double Excel::ScrollBars::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9339)
inline void Excel::ScrollBars::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9340)
inline double Excel::ScrollBars::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9341)
inline void Excel::ScrollBars::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9342)
inline VARIANT_BOOL Excel::ScrollBars::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9343)
inline void Excel::ScrollBars::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9344)
inline _bstr_t Excel::ScrollBars::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9345)
inline void Excel::ScrollBars::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9346)
inline _variant_t Excel::ScrollBars::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9347)
inline void Excel::ScrollBars::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9348)
inline VARIANT_BOOL Excel::ScrollBars::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9349)
inline void Excel::ScrollBars::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9350)
inline _variant_t Excel::ScrollBars::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9351)
inline _variant_t Excel::ScrollBars::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9352)
inline double Excel::ScrollBars::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9353)
inline void Excel::ScrollBars::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9354)
inline VARIANT_BOOL Excel::ScrollBars::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9355)
inline void Excel::ScrollBars::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9356)
inline double Excel::ScrollBars::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9357)
inline void Excel::ScrollBars::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9358)
inline long Excel::ScrollBars::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9359)
inline Excel::ShapeRangePtr Excel::ScrollBars::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9360)
inline long Excel::ScrollBars::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9361)
inline void Excel::ScrollBars::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9362)
inline VARIANT_BOOL Excel::ScrollBars::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9363)
inline void Excel::ScrollBars::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9364)
inline _bstr_t Excel::ScrollBars::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9365)
inline void Excel::ScrollBars::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9366)
inline long Excel::ScrollBars::GetMax ( ) {
    long _result;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9367)
inline void Excel::ScrollBars::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9368)
inline long Excel::ScrollBars::GetMin ( ) {
    long _result;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9369)
inline void Excel::ScrollBars::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9370)
inline long Excel::ScrollBars::GetSmallChange ( ) {
    long _result;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9371)
inline void Excel::ScrollBars::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9372)
inline long Excel::ScrollBars::GetValue ( ) {
    long _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9373)
inline void Excel::ScrollBars::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9374)
inline long Excel::ScrollBars::GetLargeChange ( ) {
    long _result;
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9375)
inline void Excel::ScrollBars::PutLargeChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9376)
inline Excel::ScrollBarPtr Excel::ScrollBars::Add ( double Left, double Top, double Width, double Height ) {
    struct ScrollBar * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return ScrollBarPtr(_result, false);
}

#pragma implementation_key(9377)
inline long Excel::ScrollBars::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9378)
inline Excel::GroupObjectPtr Excel::ScrollBars::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(9379)
inline IDispatchPtr Excel::ScrollBars::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9380)
inline IUnknownPtr Excel::ScrollBars::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface ListBox wrapper method implementations
//

#pragma implementation_key(9381)
inline Excel::_ApplicationPtr Excel::ListBox::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9382)
inline enum XlCreator Excel::ListBox::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9383)
inline IDispatchPtr Excel::ListBox::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9384)
inline Excel::RangePtr Excel::ListBox::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9385)
inline _variant_t Excel::ListBox::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9386)
inline _variant_t Excel::ListBox::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9387)
inline _variant_t Excel::ListBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9388)
inline _variant_t Excel::ListBox::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9389)
inline _variant_t Excel::ListBox::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9390)
inline IDispatchPtr Excel::ListBox::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9391)
inline VARIANT_BOOL Excel::ListBox::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9392)
inline void Excel::ListBox::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9393)
inline double Excel::ListBox::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9394)
inline void Excel::ListBox::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9395)
inline long Excel::ListBox::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9396)
inline double Excel::ListBox::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9397)
inline void Excel::ListBox::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9398)
inline VARIANT_BOOL Excel::ListBox::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9399)
inline void Excel::ListBox::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9400)
inline _bstr_t Excel::ListBox::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9401)
inline void Excel::ListBox::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9402)
inline _bstr_t Excel::ListBox::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9403)
inline void Excel::ListBox::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9404)
inline _variant_t Excel::ListBox::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9405)
inline void Excel::ListBox::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9406)
inline VARIANT_BOOL Excel::ListBox::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9407)
inline void Excel::ListBox::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9408)
inline _variant_t Excel::ListBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9409)
inline _variant_t Excel::ListBox::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9410)
inline double Excel::ListBox::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9411)
inline void Excel::ListBox::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9412)
inline Excel::RangePtr Excel::ListBox::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9413)
inline VARIANT_BOOL Excel::ListBox::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9414)
inline void Excel::ListBox::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9415)
inline double Excel::ListBox::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9416)
inline void Excel::ListBox::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9417)
inline long Excel::ListBox::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9418)
inline Excel::ShapeRangePtr Excel::ListBox::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9419)
inline _variant_t Excel::ListBox::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Text, &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9420)
inline VARIANT_BOOL Excel::ListBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9421)
inline void Excel::ListBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9422)
inline long Excel::ListBox::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9423)
inline void Excel::ListBox::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9424)
inline _bstr_t Excel::ListBox::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9425)
inline void Excel::ListBox::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9426)
inline _variant_t Excel::ListBox::GetLinkedObject ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x35e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9427)
inline _variant_t Excel::ListBox::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9428)
inline void Excel::ListBox::PutList ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(9429)
inline long Excel::ListBox::GetListCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x351, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9430)
inline _bstr_t Excel::ListBox::GetListFillRange ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9431)
inline void Excel::ListBox::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9432)
inline long Excel::ListBox::GetListIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9433)
inline void Excel::ListBox::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9434)
inline long Excel::ListBox::GetMultiSelect ( ) {
    long _result;
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9435)
inline void Excel::ListBox::PutMultiSelect ( long _arg1 ) {
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9436)
inline _variant_t Excel::ListBox::RemoveAllItems ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9437)
inline _variant_t Excel::ListBox::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", Index, &Count);
    return _variant_t(_result, false);
}

#pragma implementation_key(9438)
inline _variant_t Excel::ListBox::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9439)
inline void Excel::ListBox::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(9440)
inline long Excel::ListBox::GetValue ( ) {
    long _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9441)
inline void Excel::ListBox::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface ListBoxes wrapper method implementations
//

#pragma implementation_key(9442)
inline Excel::_ApplicationPtr Excel::ListBoxes::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9443)
inline enum XlCreator Excel::ListBoxes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9444)
inline IDispatchPtr Excel::ListBoxes::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9445)
inline _variant_t Excel::ListBoxes::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9446)
inline _variant_t Excel::ListBoxes::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9447)
inline _variant_t Excel::ListBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9448)
inline _variant_t Excel::ListBoxes::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9449)
inline _variant_t Excel::ListBoxes::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9450)
inline IDispatchPtr Excel::ListBoxes::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9451)
inline VARIANT_BOOL Excel::ListBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9452)
inline void Excel::ListBoxes::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9453)
inline double Excel::ListBoxes::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9454)
inline void Excel::ListBoxes::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9455)
inline double Excel::ListBoxes::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9456)
inline void Excel::ListBoxes::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9457)
inline VARIANT_BOOL Excel::ListBoxes::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9458)
inline void Excel::ListBoxes::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9459)
inline _bstr_t Excel::ListBoxes::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9460)
inline void Excel::ListBoxes::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9461)
inline _variant_t Excel::ListBoxes::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9462)
inline void Excel::ListBoxes::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9463)
inline VARIANT_BOOL Excel::ListBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9464)
inline void Excel::ListBoxes::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9465)
inline _variant_t Excel::ListBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9466)
inline _variant_t Excel::ListBoxes::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9467)
inline double Excel::ListBoxes::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9468)
inline void Excel::ListBoxes::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9469)
inline VARIANT_BOOL Excel::ListBoxes::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9470)
inline void Excel::ListBoxes::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9471)
inline double Excel::ListBoxes::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9472)
inline void Excel::ListBoxes::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9473)
inline long Excel::ListBoxes::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9474)
inline Excel::ShapeRangePtr Excel::ListBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9475)
inline _variant_t Excel::ListBoxes::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Text, &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9476)
inline VARIANT_BOOL Excel::ListBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9477)
inline void Excel::ListBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9478)
inline long Excel::ListBoxes::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9479)
inline void Excel::ListBoxes::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9480)
inline _bstr_t Excel::ListBoxes::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9481)
inline void Excel::ListBoxes::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9482)
inline _variant_t Excel::ListBoxes::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9483)
inline void Excel::ListBoxes::PutList ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(9484)
inline _bstr_t Excel::ListBoxes::GetListFillRange ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9485)
inline void Excel::ListBoxes::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9486)
inline long Excel::ListBoxes::GetListIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9487)
inline void Excel::ListBoxes::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9488)
inline long Excel::ListBoxes::GetMultiSelect ( ) {
    long _result;
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9489)
inline void Excel::ListBoxes::PutMultiSelect ( long _arg1 ) {
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9490)
inline _variant_t Excel::ListBoxes::RemoveAllItems ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9491)
inline _variant_t Excel::ListBoxes::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", Index, &Count);
    return _variant_t(_result, false);
}

#pragma implementation_key(9492)
inline _variant_t Excel::ListBoxes::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9493)
inline void Excel::ListBoxes::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(9494)
inline long Excel::ListBoxes::GetValue ( ) {
    long _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9495)
inline void Excel::ListBoxes::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9496)
inline Excel::ListBoxPtr Excel::ListBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct ListBox * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return ListBoxPtr(_result, false);
}

#pragma implementation_key(9497)
inline long Excel::ListBoxes::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9498)
inline Excel::GroupObjectPtr Excel::ListBoxes::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(9499)
inline IDispatchPtr Excel::ListBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9500)
inline IUnknownPtr Excel::ListBoxes::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface GroupBox wrapper method implementations
//

#pragma implementation_key(9501)
inline Excel::_ApplicationPtr Excel::GroupBox::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9502)
inline enum XlCreator Excel::GroupBox::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9503)
inline IDispatchPtr Excel::GroupBox::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9504)
inline Excel::RangePtr Excel::GroupBox::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9505)
inline _variant_t Excel::GroupBox::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9506)
inline _variant_t Excel::GroupBox::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9507)
inline _variant_t Excel::GroupBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9508)
inline _variant_t Excel::GroupBox::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9509)
inline _variant_t Excel::GroupBox::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9510)
inline IDispatchPtr Excel::GroupBox::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9511)
inline VARIANT_BOOL Excel::GroupBox::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9512)
inline void Excel::GroupBox::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9513)
inline double Excel::GroupBox::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9514)
inline void Excel::GroupBox::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9515)
inline long Excel::GroupBox::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9516)
inline double Excel::GroupBox::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9517)
inline void Excel::GroupBox::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9518)
inline VARIANT_BOOL Excel::GroupBox::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9519)
inline void Excel::GroupBox::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9520)
inline _bstr_t Excel::GroupBox::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9521)
inline void Excel::GroupBox::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9522)
inline _bstr_t Excel::GroupBox::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9523)
inline void Excel::GroupBox::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9524)
inline _variant_t Excel::GroupBox::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9525)
inline void Excel::GroupBox::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9526)
inline VARIANT_BOOL Excel::GroupBox::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9527)
inline void Excel::GroupBox::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9528)
inline _variant_t Excel::GroupBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9529)
inline _variant_t Excel::GroupBox::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9530)
inline double Excel::GroupBox::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9531)
inline void Excel::GroupBox::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9532)
inline Excel::RangePtr Excel::GroupBox::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9533)
inline VARIANT_BOOL Excel::GroupBox::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9534)
inline void Excel::GroupBox::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9535)
inline double Excel::GroupBox::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9536)
inline void Excel::GroupBox::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9537)
inline long Excel::GroupBox::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9538)
inline Excel::ShapeRangePtr Excel::GroupBox::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9539)
inline _bstr_t Excel::GroupBox::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9540)
inline void Excel::GroupBox::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9541)
inline Excel::CharactersPtr Excel::GroupBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9542)
inline _variant_t Excel::GroupBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(9543)
inline VARIANT_BOOL Excel::GroupBox::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9544)
inline void Excel::GroupBox::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9545)
inline _bstr_t Excel::GroupBox::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9546)
inline void Excel::GroupBox::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9547)
inline _variant_t Excel::GroupBox::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9548)
inline void Excel::GroupBox::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9549)
inline VARIANT_BOOL Excel::GroupBox::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9550)
inline void Excel::GroupBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9551)
inline _variant_t Excel::GroupBox::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9552)
inline void Excel::GroupBox::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface GroupBoxes wrapper method implementations
//

#pragma implementation_key(9553)
inline Excel::_ApplicationPtr Excel::GroupBoxes::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9554)
inline enum XlCreator Excel::GroupBoxes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9555)
inline IDispatchPtr Excel::GroupBoxes::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9556)
inline _variant_t Excel::GroupBoxes::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9557)
inline _variant_t Excel::GroupBoxes::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9558)
inline _variant_t Excel::GroupBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9559)
inline _variant_t Excel::GroupBoxes::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9560)
inline _variant_t Excel::GroupBoxes::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9561)
inline IDispatchPtr Excel::GroupBoxes::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9562)
inline VARIANT_BOOL Excel::GroupBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9563)
inline void Excel::GroupBoxes::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9564)
inline double Excel::GroupBoxes::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9565)
inline void Excel::GroupBoxes::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9566)
inline double Excel::GroupBoxes::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9567)
inline void Excel::GroupBoxes::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9568)
inline VARIANT_BOOL Excel::GroupBoxes::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9569)
inline void Excel::GroupBoxes::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9570)
inline _bstr_t Excel::GroupBoxes::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9571)
inline void Excel::GroupBoxes::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9572)
inline _variant_t Excel::GroupBoxes::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9573)
inline void Excel::GroupBoxes::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9574)
inline VARIANT_BOOL Excel::GroupBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9575)
inline void Excel::GroupBoxes::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9576)
inline _variant_t Excel::GroupBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9577)
inline _variant_t Excel::GroupBoxes::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9578)
inline double Excel::GroupBoxes::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9579)
inline void Excel::GroupBoxes::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9580)
inline VARIANT_BOOL Excel::GroupBoxes::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9581)
inline void Excel::GroupBoxes::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9582)
inline double Excel::GroupBoxes::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9583)
inline void Excel::GroupBoxes::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9584)
inline long Excel::GroupBoxes::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9585)
inline Excel::ShapeRangePtr Excel::GroupBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9586)
inline _bstr_t Excel::GroupBoxes::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9587)
inline void Excel::GroupBoxes::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9588)
inline Excel::CharactersPtr Excel::GroupBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9589)
inline _variant_t Excel::GroupBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(9590)
inline VARIANT_BOOL Excel::GroupBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9591)
inline void Excel::GroupBoxes::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9592)
inline _bstr_t Excel::GroupBoxes::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9593)
inline void Excel::GroupBoxes::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9594)
inline _variant_t Excel::GroupBoxes::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9595)
inline void Excel::GroupBoxes::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9596)
inline VARIANT_BOOL Excel::GroupBoxes::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9597)
inline void Excel::GroupBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9598)
inline _variant_t Excel::GroupBoxes::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9599)
inline void Excel::GroupBoxes::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9600)
inline Excel::GroupBoxPtr Excel::GroupBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct GroupBox * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return GroupBoxPtr(_result, false);
}

#pragma implementation_key(9601)
inline long Excel::GroupBoxes::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9602)
inline Excel::GroupObjectPtr Excel::GroupBoxes::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(9603)
inline IDispatchPtr Excel::GroupBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9604)
inline IUnknownPtr Excel::GroupBoxes::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface DropDown wrapper method implementations
//

#pragma implementation_key(9605)
inline Excel::_ApplicationPtr Excel::DropDown::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9606)
inline enum XlCreator Excel::DropDown::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9607)
inline IDispatchPtr Excel::DropDown::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9608)
inline Excel::RangePtr Excel::DropDown::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9609)
inline _variant_t Excel::DropDown::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9610)
inline _variant_t Excel::DropDown::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9611)
inline _variant_t Excel::DropDown::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9612)
inline _variant_t Excel::DropDown::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9613)
inline _variant_t Excel::DropDown::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9614)
inline IDispatchPtr Excel::DropDown::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9615)
inline VARIANT_BOOL Excel::DropDown::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9616)
inline void Excel::DropDown::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9617)
inline double Excel::DropDown::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9618)
inline void Excel::DropDown::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9619)
inline long Excel::DropDown::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9620)
inline double Excel::DropDown::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9621)
inline void Excel::DropDown::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9622)
inline VARIANT_BOOL Excel::DropDown::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9623)
inline void Excel::DropDown::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9624)
inline _bstr_t Excel::DropDown::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9625)
inline void Excel::DropDown::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9626)
inline _bstr_t Excel::DropDown::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9627)
inline void Excel::DropDown::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9628)
inline _variant_t Excel::DropDown::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9629)
inline void Excel::DropDown::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9630)
inline VARIANT_BOOL Excel::DropDown::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9631)
inline void Excel::DropDown::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9632)
inline _variant_t Excel::DropDown::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9633)
inline _variant_t Excel::DropDown::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9634)
inline double Excel::DropDown::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9635)
inline void Excel::DropDown::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9636)
inline Excel::RangePtr Excel::DropDown::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9637)
inline VARIANT_BOOL Excel::DropDown::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9638)
inline void Excel::DropDown::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9639)
inline double Excel::DropDown::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9640)
inline void Excel::DropDown::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9641)
inline long Excel::DropDown::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9642)
inline Excel::ShapeRangePtr Excel::DropDown::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9643)
inline _variant_t Excel::DropDown::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Text, &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9644)
inline VARIANT_BOOL Excel::DropDown::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9645)
inline void Excel::DropDown::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9646)
inline long Excel::DropDown::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9647)
inline void Excel::DropDown::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9648)
inline _bstr_t Excel::DropDown::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9649)
inline void Excel::DropDown::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9650)
inline _variant_t Excel::DropDown::GetLinkedObject ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x35e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9651)
inline _variant_t Excel::DropDown::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9652)
inline void Excel::DropDown::PutList ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(9653)
inline long Excel::DropDown::GetListCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x351, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9654)
inline _bstr_t Excel::DropDown::GetListFillRange ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9655)
inline void Excel::DropDown::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9656)
inline long Excel::DropDown::GetListIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9657)
inline void Excel::DropDown::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9658)
inline _variant_t Excel::DropDown::RemoveAllItems ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9659)
inline _variant_t Excel::DropDown::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", Index, &Count);
    return _variant_t(_result, false);
}

#pragma implementation_key(9660)
inline _variant_t Excel::DropDown::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9661)
inline void Excel::DropDown::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(9662)
inline long Excel::DropDown::GetValue ( ) {
    long _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9663)
inline void Excel::DropDown::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9664)
inline _bstr_t Excel::DropDown::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9665)
inline void Excel::DropDown::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9666)
inline Excel::CharactersPtr Excel::DropDown::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9667)
inline long Excel::DropDown::GetDropDownLines ( ) {
    long _result;
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9668)
inline void Excel::DropDown::PutDropDownLines ( long _arg1 ) {
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9669)
inline _bstr_t Excel::DropDown::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9670)
inline void Excel::DropDown::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface DropDowns wrapper method implementations
//

#pragma implementation_key(9671)
inline Excel::_ApplicationPtr Excel::DropDowns::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9672)
inline enum XlCreator Excel::DropDowns::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9673)
inline IDispatchPtr Excel::DropDowns::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9674)
inline _variant_t Excel::DropDowns::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9675)
inline _variant_t Excel::DropDowns::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9676)
inline _variant_t Excel::DropDowns::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9677)
inline _variant_t Excel::DropDowns::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9678)
inline _variant_t Excel::DropDowns::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9679)
inline IDispatchPtr Excel::DropDowns::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9680)
inline VARIANT_BOOL Excel::DropDowns::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9681)
inline void Excel::DropDowns::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9682)
inline double Excel::DropDowns::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9683)
inline void Excel::DropDowns::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9684)
inline double Excel::DropDowns::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9685)
inline void Excel::DropDowns::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9686)
inline VARIANT_BOOL Excel::DropDowns::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9687)
inline void Excel::DropDowns::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9688)
inline _bstr_t Excel::DropDowns::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9689)
inline void Excel::DropDowns::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9690)
inline _variant_t Excel::DropDowns::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9691)
inline void Excel::DropDowns::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9692)
inline VARIANT_BOOL Excel::DropDowns::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9693)
inline void Excel::DropDowns::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9694)
inline _variant_t Excel::DropDowns::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9695)
inline _variant_t Excel::DropDowns::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9696)
inline double Excel::DropDowns::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9697)
inline void Excel::DropDowns::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9698)
inline VARIANT_BOOL Excel::DropDowns::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9699)
inline void Excel::DropDowns::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9700)
inline double Excel::DropDowns::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9701)
inline void Excel::DropDowns::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9702)
inline long Excel::DropDowns::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9703)
inline Excel::ShapeRangePtr Excel::DropDowns::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9704)
inline _variant_t Excel::DropDowns::AddItem ( const _variant_t & Text, const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Text, &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9705)
inline VARIANT_BOOL Excel::DropDowns::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9706)
inline void Excel::DropDowns::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9707)
inline long Excel::DropDowns::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9708)
inline void Excel::DropDowns::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9709)
inline _bstr_t Excel::DropDowns::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9710)
inline void Excel::DropDowns::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9711)
inline _variant_t Excel::DropDowns::GetList ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9712)
inline void Excel::DropDowns::PutList ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x35d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(9713)
inline _bstr_t Excel::DropDowns::GetListFillRange ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9714)
inline void Excel::DropDowns::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9715)
inline long Excel::DropDowns::GetListIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9716)
inline void Excel::DropDowns::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9717)
inline _variant_t Excel::DropDowns::RemoveAllItems ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9718)
inline _variant_t Excel::DropDowns::RemoveItem ( long Index, const _variant_t & Count ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", Index, &Count);
    return _variant_t(_result, false);
}

#pragma implementation_key(9719)
inline _variant_t Excel::DropDowns::GetSelected ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(9720)
inline void Excel::DropDowns::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x463, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(9721)
inline long Excel::DropDowns::GetValue ( ) {
    long _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9722)
inline void Excel::DropDowns::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9723)
inline _bstr_t Excel::DropDowns::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9724)
inline void Excel::DropDowns::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9725)
inline Excel::CharactersPtr Excel::DropDowns::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9726)
inline long Excel::DropDowns::GetDropDownLines ( ) {
    long _result;
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9727)
inline void Excel::DropDowns::PutDropDownLines ( long _arg1 ) {
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9728)
inline _bstr_t Excel::DropDowns::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9729)
inline void Excel::DropDowns::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9730)
inline Excel::DropDownPtr Excel::DropDowns::Add ( double Left, double Top, double Width, double Height, const _variant_t & Editable ) {
    struct DropDown * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x080c", Left, Top, Width, Height, &Editable);
    return DropDownPtr(_result, false);
}

#pragma implementation_key(9731)
inline long Excel::DropDowns::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9732)
inline Excel::GroupObjectPtr Excel::DropDowns::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(9733)
inline IDispatchPtr Excel::DropDowns::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9734)
inline IUnknownPtr Excel::DropDowns::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Spinner wrapper method implementations
//

#pragma implementation_key(9735)
inline Excel::_ApplicationPtr Excel::Spinner::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9736)
inline enum XlCreator Excel::Spinner::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9737)
inline IDispatchPtr Excel::Spinner::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9738)
inline Excel::RangePtr Excel::Spinner::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9739)
inline _variant_t Excel::Spinner::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9740)
inline _variant_t Excel::Spinner::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9741)
inline _variant_t Excel::Spinner::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9742)
inline _variant_t Excel::Spinner::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9743)
inline _variant_t Excel::Spinner::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9744)
inline IDispatchPtr Excel::Spinner::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9745)
inline VARIANT_BOOL Excel::Spinner::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9746)
inline void Excel::Spinner::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9747)
inline double Excel::Spinner::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9748)
inline void Excel::Spinner::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9749)
inline long Excel::Spinner::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9750)
inline double Excel::Spinner::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9751)
inline void Excel::Spinner::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9752)
inline VARIANT_BOOL Excel::Spinner::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9753)
inline void Excel::Spinner::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9754)
inline _bstr_t Excel::Spinner::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9755)
inline void Excel::Spinner::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9756)
inline _bstr_t Excel::Spinner::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9757)
inline void Excel::Spinner::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9758)
inline _variant_t Excel::Spinner::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9759)
inline void Excel::Spinner::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9760)
inline VARIANT_BOOL Excel::Spinner::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9761)
inline void Excel::Spinner::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9762)
inline _variant_t Excel::Spinner::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9763)
inline _variant_t Excel::Spinner::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9764)
inline double Excel::Spinner::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9765)
inline void Excel::Spinner::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9766)
inline Excel::RangePtr Excel::Spinner::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9767)
inline VARIANT_BOOL Excel::Spinner::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9768)
inline void Excel::Spinner::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9769)
inline double Excel::Spinner::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9770)
inline void Excel::Spinner::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9771)
inline long Excel::Spinner::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9772)
inline Excel::ShapeRangePtr Excel::Spinner::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9773)
inline long Excel::Spinner::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9774)
inline void Excel::Spinner::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9775)
inline VARIANT_BOOL Excel::Spinner::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9776)
inline void Excel::Spinner::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9777)
inline _bstr_t Excel::Spinner::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9778)
inline void Excel::Spinner::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9779)
inline long Excel::Spinner::GetMax ( ) {
    long _result;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9780)
inline void Excel::Spinner::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9781)
inline long Excel::Spinner::GetMin ( ) {
    long _result;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9782)
inline void Excel::Spinner::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9783)
inline long Excel::Spinner::GetSmallChange ( ) {
    long _result;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9784)
inline void Excel::Spinner::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9785)
inline long Excel::Spinner::GetValue ( ) {
    long _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9786)
inline void Excel::Spinner::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Spinners wrapper method implementations
//

#pragma implementation_key(9787)
inline Excel::_ApplicationPtr Excel::Spinners::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9788)
inline enum XlCreator Excel::Spinners::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9789)
inline IDispatchPtr Excel::Spinners::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9790)
inline _variant_t Excel::Spinners::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9791)
inline _variant_t Excel::Spinners::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9792)
inline _variant_t Excel::Spinners::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9793)
inline _variant_t Excel::Spinners::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9794)
inline _variant_t Excel::Spinners::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9795)
inline IDispatchPtr Excel::Spinners::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9796)
inline VARIANT_BOOL Excel::Spinners::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9797)
inline void Excel::Spinners::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9798)
inline double Excel::Spinners::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9799)
inline void Excel::Spinners::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9800)
inline double Excel::Spinners::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9801)
inline void Excel::Spinners::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9802)
inline VARIANT_BOOL Excel::Spinners::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9803)
inline void Excel::Spinners::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9804)
inline _bstr_t Excel::Spinners::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9805)
inline void Excel::Spinners::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9806)
inline _variant_t Excel::Spinners::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9807)
inline void Excel::Spinners::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9808)
inline VARIANT_BOOL Excel::Spinners::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9809)
inline void Excel::Spinners::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9810)
inline _variant_t Excel::Spinners::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9811)
inline _variant_t Excel::Spinners::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9812)
inline double Excel::Spinners::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9813)
inline void Excel::Spinners::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9814)
inline VARIANT_BOOL Excel::Spinners::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9815)
inline void Excel::Spinners::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9816)
inline double Excel::Spinners::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9817)
inline void Excel::Spinners::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9818)
inline long Excel::Spinners::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9819)
inline Excel::ShapeRangePtr Excel::Spinners::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9820)
inline long Excel::Spinners::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9821)
inline void Excel::Spinners::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9822)
inline VARIANT_BOOL Excel::Spinners::GetDisplay3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9823)
inline void Excel::Spinners::PutDisplay3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x462, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9824)
inline _bstr_t Excel::Spinners::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9825)
inline void Excel::Spinners::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9826)
inline long Excel::Spinners::GetMax ( ) {
    long _result;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9827)
inline void Excel::Spinners::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9828)
inline long Excel::Spinners::GetMin ( ) {
    long _result;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9829)
inline void Excel::Spinners::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9830)
inline long Excel::Spinners::GetSmallChange ( ) {
    long _result;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9831)
inline void Excel::Spinners::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9832)
inline long Excel::Spinners::GetValue ( ) {
    long _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9833)
inline void Excel::Spinners::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9834)
inline Excel::SpinnerPtr Excel::Spinners::Add ( double Left, double Top, double Width, double Height ) {
    struct Spinner * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return SpinnerPtr(_result, false);
}

#pragma implementation_key(9835)
inline long Excel::Spinners::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9836)
inline Excel::GroupObjectPtr Excel::Spinners::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(9837)
inline IDispatchPtr Excel::Spinners::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9838)
inline IUnknownPtr Excel::Spinners::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface DialogFrame wrapper method implementations
//

#pragma implementation_key(9839)
inline Excel::_ApplicationPtr Excel::DialogFrame::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9840)
inline enum XlCreator Excel::DialogFrame::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9841)
inline IDispatchPtr Excel::DialogFrame::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9842)
inline _variant_t Excel::DialogFrame::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9843)
inline double Excel::DialogFrame::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9844)
inline void Excel::DialogFrame::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9845)
inline double Excel::DialogFrame::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9846)
inline void Excel::DialogFrame::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9847)
inline VARIANT_BOOL Excel::DialogFrame::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9848)
inline void Excel::DialogFrame::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9849)
inline _bstr_t Excel::DialogFrame::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9850)
inline void Excel::DialogFrame::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9851)
inline _bstr_t Excel::DialogFrame::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9852)
inline void Excel::DialogFrame::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9853)
inline _variant_t Excel::DialogFrame::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9854)
inline double Excel::DialogFrame::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9855)
inline void Excel::DialogFrame::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9856)
inline double Excel::DialogFrame::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9857)
inline void Excel::DialogFrame::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9858)
inline Excel::ShapeRangePtr Excel::DialogFrame::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9859)
inline _bstr_t Excel::DialogFrame::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9860)
inline void Excel::DialogFrame::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9861)
inline Excel::CharactersPtr Excel::DialogFrame::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9862)
inline _variant_t Excel::DialogFrame::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(9863)
inline VARIANT_BOOL Excel::DialogFrame::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9864)
inline void Excel::DialogFrame::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9865)
inline _bstr_t Excel::DialogFrame::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9866)
inline void Excel::DialogFrame::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface Label wrapper method implementations
//

#pragma implementation_key(9867)
inline Excel::_ApplicationPtr Excel::Label::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9868)
inline enum XlCreator Excel::Label::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9869)
inline IDispatchPtr Excel::Label::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9870)
inline Excel::RangePtr Excel::Label::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9871)
inline _variant_t Excel::Label::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9872)
inline _variant_t Excel::Label::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9873)
inline _variant_t Excel::Label::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9874)
inline _variant_t Excel::Label::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9875)
inline _variant_t Excel::Label::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9876)
inline IDispatchPtr Excel::Label::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9877)
inline VARIANT_BOOL Excel::Label::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9878)
inline void Excel::Label::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9879)
inline double Excel::Label::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9880)
inline void Excel::Label::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9881)
inline long Excel::Label::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9882)
inline double Excel::Label::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9883)
inline void Excel::Label::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9884)
inline VARIANT_BOOL Excel::Label::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9885)
inline void Excel::Label::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9886)
inline _bstr_t Excel::Label::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9887)
inline void Excel::Label::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9888)
inline _bstr_t Excel::Label::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9889)
inline void Excel::Label::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9890)
inline _variant_t Excel::Label::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9891)
inline void Excel::Label::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9892)
inline VARIANT_BOOL Excel::Label::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9893)
inline void Excel::Label::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9894)
inline _variant_t Excel::Label::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9895)
inline _variant_t Excel::Label::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9896)
inline double Excel::Label::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9897)
inline void Excel::Label::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9898)
inline Excel::RangePtr Excel::Label::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9899)
inline VARIANT_BOOL Excel::Label::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9900)
inline void Excel::Label::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9901)
inline double Excel::Label::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9902)
inline void Excel::Label::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9903)
inline long Excel::Label::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9904)
inline Excel::ShapeRangePtr Excel::Label::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9905)
inline _bstr_t Excel::Label::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9906)
inline void Excel::Label::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9907)
inline Excel::CharactersPtr Excel::Label::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9908)
inline _variant_t Excel::Label::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(9909)
inline VARIANT_BOOL Excel::Label::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9910)
inline void Excel::Label::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9911)
inline _bstr_t Excel::Label::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9912)
inline void Excel::Label::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9913)
inline _variant_t Excel::Label::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9914)
inline void Excel::Label::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9915)
inline _variant_t Excel::Label::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9916)
inline void Excel::Label::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Labels wrapper method implementations
//

#pragma implementation_key(9917)
inline Excel::_ApplicationPtr Excel::Labels::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9918)
inline enum XlCreator Excel::Labels::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9919)
inline IDispatchPtr Excel::Labels::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9920)
inline _variant_t Excel::Labels::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9921)
inline _variant_t Excel::Labels::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9922)
inline _variant_t Excel::Labels::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(9923)
inline _variant_t Excel::Labels::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9924)
inline _variant_t Excel::Labels::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9925)
inline IDispatchPtr Excel::Labels::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9926)
inline VARIANT_BOOL Excel::Labels::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9927)
inline void Excel::Labels::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9928)
inline double Excel::Labels::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9929)
inline void Excel::Labels::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9930)
inline double Excel::Labels::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9931)
inline void Excel::Labels::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9932)
inline VARIANT_BOOL Excel::Labels::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9933)
inline void Excel::Labels::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9934)
inline _bstr_t Excel::Labels::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9935)
inline void Excel::Labels::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9936)
inline _variant_t Excel::Labels::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9937)
inline void Excel::Labels::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9938)
inline VARIANT_BOOL Excel::Labels::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9939)
inline void Excel::Labels::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9940)
inline _variant_t Excel::Labels::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(9941)
inline _variant_t Excel::Labels::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9942)
inline double Excel::Labels::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9943)
inline void Excel::Labels::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9944)
inline VARIANT_BOOL Excel::Labels::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9945)
inline void Excel::Labels::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9946)
inline double Excel::Labels::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9947)
inline void Excel::Labels::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(9948)
inline long Excel::Labels::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9949)
inline Excel::ShapeRangePtr Excel::Labels::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(9950)
inline _bstr_t Excel::Labels::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9951)
inline void Excel::Labels::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9952)
inline Excel::CharactersPtr Excel::Labels::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(9953)
inline _variant_t Excel::Labels::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(9954)
inline VARIANT_BOOL Excel::Labels::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9955)
inline void Excel::Labels::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(9956)
inline _bstr_t Excel::Labels::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(9957)
inline void Excel::Labels::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(9958)
inline _variant_t Excel::Labels::GetAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9959)
inline void Excel::Labels::PutAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9960)
inline _variant_t Excel::Labels::GetPhoneticAccelerator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(9961)
inline void Excel::Labels::PutPhoneticAccelerator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x461, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(9962)
inline Excel::LabelPtr Excel::Labels::Add ( double Left, double Top, double Width, double Height ) {
    struct Label * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return LabelPtr(_result, false);
}

#pragma implementation_key(9963)
inline long Excel::Labels::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9964)
inline Excel::GroupObjectPtr Excel::Labels::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(9965)
inline IDispatchPtr Excel::Labels::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9966)
inline IUnknownPtr Excel::Labels::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Panes wrapper method implementations
//

#pragma implementation_key(9967)
inline Excel::_ApplicationPtr Excel::Panes::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9968)
inline enum XlCreator Excel::Panes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9969)
inline IDispatchPtr Excel::Panes::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9970)
inline long Excel::Panes::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9971)
inline Excel::PanePtr Excel::Panes::GetItem ( long Index ) {
    struct Pane * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return PanePtr(_result, false);
}

#pragma implementation_key(9972)
inline Excel::PanePtr Excel::Panes::Get_Default ( long Index ) {
    struct Pane * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return PanePtr(_result, false);
}

//
// dispinterface Pane wrapper method implementations
//

#pragma implementation_key(9973)
inline Excel::_ApplicationPtr Excel::Pane::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9974)
inline enum XlCreator Excel::Pane::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9975)
inline IDispatchPtr Excel::Pane::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9976)
inline VARIANT_BOOL Excel::Pane::Activate ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9977)
inline long Excel::Pane::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9978)
inline _variant_t Excel::Pane::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x223, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Down, &Up, &ToRight, &ToLeft);
    return _variant_t(_result, false);
}

#pragma implementation_key(9979)
inline long Excel::Pane::GetScrollColumn ( ) {
    long _result;
    _com_dispatch_method(this, 0x28e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9980)
inline void Excel::Pane::PutScrollColumn ( long _arg1 ) {
    _com_dispatch_method(this, 0x28e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9981)
inline long Excel::Pane::GetScrollRow ( ) {
    long _result;
    _com_dispatch_method(this, 0x28f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9982)
inline void Excel::Pane::PutScrollRow ( long _arg1 ) {
    _com_dispatch_method(this, 0x28f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(9983)
inline _variant_t Excel::Pane::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x224, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Down, &Up, &ToRight, &ToLeft);
    return _variant_t(_result, false);
}

#pragma implementation_key(9984)
inline Excel::RangePtr Excel::Pane::GetVisibleRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x45e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(9985)
inline HRESULT Excel::Pane::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start ) {
    return _com_dispatch_method(this, 0x6f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x080c", Left, Top, Width, Height, &Start);
}

//
// dispinterface Scenarios wrapper method implementations
//

#pragma implementation_key(9986)
inline Excel::_ApplicationPtr Excel::Scenarios::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9987)
inline enum XlCreator Excel::Scenarios::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9988)
inline IDispatchPtr Excel::Scenarios::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9989)
inline Excel::ScenarioPtr Excel::Scenarios::Add ( _bstr_t Name, const _variant_t & ChangingCells, const _variant_t & Values, const _variant_t & Comment, const _variant_t & Locked, const _variant_t & Hidden ) {
    struct Scenario * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x000c\x080c\x080c\x080c\x080c", (BSTR)Name, &ChangingCells, &Values, &Comment, &Locked, &Hidden);
    return ScenarioPtr(_result, false);
}

#pragma implementation_key(9990)
inline long Excel::Scenarios::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9991)
inline _variant_t Excel::Scenarios::CreateSummary ( enum XlSummaryReportType ReportType, const _variant_t & ResultCells ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x391, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c", ReportType, &ResultCells);
    return _variant_t(_result, false);
}

#pragma implementation_key(9992)
inline Excel::ScenarioPtr Excel::Scenarios::Item ( const _variant_t & Index ) {
    struct Scenario * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ScenarioPtr(_result, false);
}

#pragma implementation_key(9993)
inline _variant_t Excel::Scenarios::Merge ( const _variant_t & Source ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x234, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Source);
    return _variant_t(_result, false);
}

#pragma implementation_key(9994)
inline IUnknownPtr Excel::Scenarios::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Scenario wrapper method implementations
//

#pragma implementation_key(9995)
inline Excel::_ApplicationPtr Excel::Scenario::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(9996)
inline enum XlCreator Excel::Scenario::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(9997)
inline IDispatchPtr Excel::Scenario::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(9998)
inline _variant_t Excel::Scenario::ChangeScenario ( const _variant_t & ChangingCells, const _variant_t & Values ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x390, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &ChangingCells, &Values);
    return _variant_t(_result, false);
}

#pragma implementation_key(9999)
inline Excel::RangePtr Excel::Scenario::GetChangingCells ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x38f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10000)
inline _bstr_t Excel::Scenario::GetComment ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x38e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10001)
inline void Excel::Scenario::PutComment ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x38e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10002)
inline _variant_t Excel::Scenario::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10003)
inline VARIANT_BOOL Excel::Scenario::GetHidden ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10004)
inline void Excel::Scenario::PutHidden ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10005)
inline long Excel::Scenario::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10006)
inline VARIANT_BOOL Excel::Scenario::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10007)
inline void Excel::Scenario::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10008)
inline _bstr_t Excel::Scenario::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10009)
inline void Excel::Scenario::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10010)
inline _variant_t Excel::Scenario::Show ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f0, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10011)
inline _variant_t Excel::Scenario::GetValues ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xa4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

//
// dispinterface GroupObject wrapper method implementations
//

#pragma implementation_key(10012)
inline Excel::_ApplicationPtr Excel::GroupObject::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10013)
inline enum XlCreator Excel::GroupObject::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10014)
inline IDispatchPtr Excel::GroupObject::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10015)
inline Excel::RangePtr Excel::GroupObject::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10016)
inline _variant_t Excel::GroupObject::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10017)
inline _variant_t Excel::GroupObject::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10018)
inline _variant_t Excel::GroupObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10019)
inline _variant_t Excel::GroupObject::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10020)
inline _variant_t Excel::GroupObject::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10021)
inline IDispatchPtr Excel::GroupObject::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10022)
inline VARIANT_BOOL Excel::GroupObject::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10023)
inline void Excel::GroupObject::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10024)
inline double Excel::GroupObject::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10025)
inline void Excel::GroupObject::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10026)
inline long Excel::GroupObject::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10027)
inline double Excel::GroupObject::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10028)
inline void Excel::GroupObject::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10029)
inline VARIANT_BOOL Excel::GroupObject::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10030)
inline void Excel::GroupObject::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10031)
inline _bstr_t Excel::GroupObject::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10032)
inline void Excel::GroupObject::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10033)
inline _bstr_t Excel::GroupObject::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10034)
inline void Excel::GroupObject::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10035)
inline _variant_t Excel::GroupObject::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10036)
inline void Excel::GroupObject::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10037)
inline VARIANT_BOOL Excel::GroupObject::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10038)
inline void Excel::GroupObject::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10039)
inline _variant_t Excel::GroupObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10040)
inline _variant_t Excel::GroupObject::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10041)
inline double Excel::GroupObject::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10042)
inline void Excel::GroupObject::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10043)
inline Excel::RangePtr Excel::GroupObject::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10044)
inline VARIANT_BOOL Excel::GroupObject::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10045)
inline void Excel::GroupObject::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10046)
inline double Excel::GroupObject::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10047)
inline void Excel::GroupObject::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10048)
inline long Excel::GroupObject::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10049)
inline Excel::ShapeRangePtr Excel::GroupObject::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10050)
inline VARIANT_BOOL Excel::GroupObject::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10051)
inline void Excel::GroupObject::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10052)
inline _variant_t Excel::GroupObject::GetArrowHeadLength ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10053)
inline void Excel::GroupObject::PutArrowHeadLength ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10054)
inline _variant_t Excel::GroupObject::GetArrowHeadStyle ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10055)
inline void Excel::GroupObject::PutArrowHeadStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10056)
inline _variant_t Excel::GroupObject::GetArrowHeadWidth ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10057)
inline void Excel::GroupObject::PutArrowHeadWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10058)
inline VARIANT_BOOL Excel::GroupObject::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10059)
inline void Excel::GroupObject::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10060)
inline Excel::BorderPtr Excel::GroupObject::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10061)
inline _variant_t Excel::GroupObject::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(10062)
inline long Excel::GroupObject::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10063)
inline void Excel::GroupObject::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10064)
inline Excel::FontPtr Excel::GroupObject::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(10065)
inline _variant_t Excel::GroupObject::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10066)
inline void Excel::GroupObject::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10067)
inline Excel::InteriorPtr Excel::GroupObject::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10068)
inline _variant_t Excel::GroupObject::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10069)
inline void Excel::GroupObject::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10070)
inline VARIANT_BOOL Excel::GroupObject::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10071)
inline void Excel::GroupObject::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10072)
inline VARIANT_BOOL Excel::GroupObject::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10073)
inline void Excel::GroupObject::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10074)
inline IDispatchPtr Excel::GroupObject::Ungroup ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10075)
inline _variant_t Excel::GroupObject::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10076)
inline void Excel::GroupObject::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10077)
inline long Excel::GroupObject::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10078)
inline void Excel::GroupObject::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface GroupObjects wrapper method implementations
//

#pragma implementation_key(10079)
inline Excel::_ApplicationPtr Excel::GroupObjects::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10080)
inline enum XlCreator Excel::GroupObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10081)
inline IDispatchPtr Excel::GroupObjects::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10082)
inline _variant_t Excel::GroupObjects::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10083)
inline _variant_t Excel::GroupObjects::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10084)
inline _variant_t Excel::GroupObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10085)
inline _variant_t Excel::GroupObjects::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10086)
inline _variant_t Excel::GroupObjects::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10087)
inline IDispatchPtr Excel::GroupObjects::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10088)
inline VARIANT_BOOL Excel::GroupObjects::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10089)
inline void Excel::GroupObjects::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10090)
inline double Excel::GroupObjects::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10091)
inline void Excel::GroupObjects::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10092)
inline double Excel::GroupObjects::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10093)
inline void Excel::GroupObjects::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10094)
inline VARIANT_BOOL Excel::GroupObjects::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10095)
inline void Excel::GroupObjects::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10096)
inline _bstr_t Excel::GroupObjects::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10097)
inline void Excel::GroupObjects::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10098)
inline _variant_t Excel::GroupObjects::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10099)
inline void Excel::GroupObjects::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10100)
inline VARIANT_BOOL Excel::GroupObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10101)
inline void Excel::GroupObjects::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10102)
inline _variant_t Excel::GroupObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10103)
inline _variant_t Excel::GroupObjects::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10104)
inline double Excel::GroupObjects::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10105)
inline void Excel::GroupObjects::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10106)
inline VARIANT_BOOL Excel::GroupObjects::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10107)
inline void Excel::GroupObjects::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10108)
inline double Excel::GroupObjects::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10109)
inline void Excel::GroupObjects::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10110)
inline long Excel::GroupObjects::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10111)
inline Excel::ShapeRangePtr Excel::GroupObjects::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10112)
inline VARIANT_BOOL Excel::GroupObjects::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10113)
inline void Excel::GroupObjects::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10114)
inline _variant_t Excel::GroupObjects::GetArrowHeadLength ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10115)
inline void Excel::GroupObjects::PutArrowHeadLength ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10116)
inline _variant_t Excel::GroupObjects::GetArrowHeadStyle ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10117)
inline void Excel::GroupObjects::PutArrowHeadStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10118)
inline _variant_t Excel::GroupObjects::GetArrowHeadWidth ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10119)
inline void Excel::GroupObjects::PutArrowHeadWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10120)
inline VARIANT_BOOL Excel::GroupObjects::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10121)
inline void Excel::GroupObjects::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10122)
inline Excel::BorderPtr Excel::GroupObjects::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10123)
inline _variant_t Excel::GroupObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(10124)
inline long Excel::GroupObjects::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10125)
inline void Excel::GroupObjects::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10126)
inline Excel::FontPtr Excel::GroupObjects::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(10127)
inline _variant_t Excel::GroupObjects::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10128)
inline void Excel::GroupObjects::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10129)
inline Excel::InteriorPtr Excel::GroupObjects::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10130)
inline _variant_t Excel::GroupObjects::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10131)
inline void Excel::GroupObjects::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10132)
inline VARIANT_BOOL Excel::GroupObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10133)
inline void Excel::GroupObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10134)
inline VARIANT_BOOL Excel::GroupObjects::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10135)
inline void Excel::GroupObjects::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10136)
inline IDispatchPtr Excel::GroupObjects::Ungroup ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10137)
inline _variant_t Excel::GroupObjects::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10138)
inline void Excel::GroupObjects::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10139)
inline long Excel::GroupObjects::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10140)
inline void Excel::GroupObjects::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10141)
inline long Excel::GroupObjects::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10142)
inline Excel::GroupObjectPtr Excel::GroupObjects::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(10143)
inline IDispatchPtr Excel::GroupObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10144)
inline IUnknownPtr Excel::GroupObjects::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Line wrapper method implementations
//

#pragma implementation_key(10145)
inline Excel::_ApplicationPtr Excel::Line::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10146)
inline enum XlCreator Excel::Line::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10147)
inline IDispatchPtr Excel::Line::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10148)
inline Excel::RangePtr Excel::Line::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10149)
inline _variant_t Excel::Line::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10150)
inline _variant_t Excel::Line::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10151)
inline _variant_t Excel::Line::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10152)
inline _variant_t Excel::Line::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10153)
inline _variant_t Excel::Line::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10154)
inline IDispatchPtr Excel::Line::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10155)
inline VARIANT_BOOL Excel::Line::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10156)
inline void Excel::Line::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10157)
inline double Excel::Line::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10158)
inline void Excel::Line::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10159)
inline long Excel::Line::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10160)
inline double Excel::Line::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10161)
inline void Excel::Line::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10162)
inline VARIANT_BOOL Excel::Line::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10163)
inline void Excel::Line::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10164)
inline _bstr_t Excel::Line::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10165)
inline void Excel::Line::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10166)
inline _bstr_t Excel::Line::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10167)
inline void Excel::Line::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10168)
inline _variant_t Excel::Line::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10169)
inline void Excel::Line::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10170)
inline VARIANT_BOOL Excel::Line::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10171)
inline void Excel::Line::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10172)
inline _variant_t Excel::Line::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10173)
inline _variant_t Excel::Line::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10174)
inline double Excel::Line::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10175)
inline void Excel::Line::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10176)
inline Excel::RangePtr Excel::Line::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10177)
inline VARIANT_BOOL Excel::Line::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10178)
inline void Excel::Line::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10179)
inline double Excel::Line::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10180)
inline void Excel::Line::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10181)
inline long Excel::Line::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10182)
inline Excel::ShapeRangePtr Excel::Line::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10183)
inline _variant_t Excel::Line::GetArrowHeadLength ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10184)
inline void Excel::Line::PutArrowHeadLength ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10185)
inline _variant_t Excel::Line::GetArrowHeadStyle ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10186)
inline void Excel::Line::PutArrowHeadStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10187)
inline _variant_t Excel::Line::GetArrowHeadWidth ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10188)
inline void Excel::Line::PutArrowHeadWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10189)
inline Excel::BorderPtr Excel::Line::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

//
// dispinterface Lines wrapper method implementations
//

#pragma implementation_key(10190)
inline Excel::_ApplicationPtr Excel::Lines::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10191)
inline enum XlCreator Excel::Lines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10192)
inline IDispatchPtr Excel::Lines::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10193)
inline _variant_t Excel::Lines::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10194)
inline _variant_t Excel::Lines::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10195)
inline _variant_t Excel::Lines::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10196)
inline _variant_t Excel::Lines::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10197)
inline _variant_t Excel::Lines::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10198)
inline IDispatchPtr Excel::Lines::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10199)
inline VARIANT_BOOL Excel::Lines::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10200)
inline void Excel::Lines::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10201)
inline double Excel::Lines::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10202)
inline void Excel::Lines::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10203)
inline double Excel::Lines::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10204)
inline void Excel::Lines::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10205)
inline VARIANT_BOOL Excel::Lines::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10206)
inline void Excel::Lines::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10207)
inline _bstr_t Excel::Lines::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10208)
inline void Excel::Lines::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10209)
inline _variant_t Excel::Lines::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10210)
inline void Excel::Lines::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10211)
inline VARIANT_BOOL Excel::Lines::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10212)
inline void Excel::Lines::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10213)
inline _variant_t Excel::Lines::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10214)
inline _variant_t Excel::Lines::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10215)
inline double Excel::Lines::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10216)
inline void Excel::Lines::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10217)
inline VARIANT_BOOL Excel::Lines::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10218)
inline void Excel::Lines::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10219)
inline double Excel::Lines::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10220)
inline void Excel::Lines::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10221)
inline long Excel::Lines::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10222)
inline Excel::ShapeRangePtr Excel::Lines::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10223)
inline _variant_t Excel::Lines::GetArrowHeadLength ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10224)
inline void Excel::Lines::PutArrowHeadLength ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10225)
inline _variant_t Excel::Lines::GetArrowHeadStyle ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10226)
inline void Excel::Lines::PutArrowHeadStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10227)
inline _variant_t Excel::Lines::GetArrowHeadWidth ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10228)
inline void Excel::Lines::PutArrowHeadWidth ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10229)
inline Excel::BorderPtr Excel::Lines::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10230)
inline Excel::LinePtr Excel::Lines::Add ( double X1, double Y1, double X2, double Y2 ) {
    struct Line * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", X1, Y1, X2, Y2);
    return LinePtr(_result, false);
}

#pragma implementation_key(10231)
inline long Excel::Lines::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10232)
inline Excel::GroupObjectPtr Excel::Lines::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(10233)
inline IDispatchPtr Excel::Lines::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10234)
inline IUnknownPtr Excel::Lines::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Rectangle wrapper method implementations
//

#pragma implementation_key(10235)
inline Excel::_ApplicationPtr Excel::Rectangle::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10236)
inline enum XlCreator Excel::Rectangle::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10237)
inline IDispatchPtr Excel::Rectangle::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10238)
inline Excel::RangePtr Excel::Rectangle::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10239)
inline _variant_t Excel::Rectangle::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10240)
inline _variant_t Excel::Rectangle::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10241)
inline _variant_t Excel::Rectangle::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10242)
inline _variant_t Excel::Rectangle::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10243)
inline _variant_t Excel::Rectangle::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10244)
inline IDispatchPtr Excel::Rectangle::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10245)
inline VARIANT_BOOL Excel::Rectangle::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10246)
inline void Excel::Rectangle::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10247)
inline double Excel::Rectangle::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10248)
inline void Excel::Rectangle::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10249)
inline long Excel::Rectangle::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10250)
inline double Excel::Rectangle::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10251)
inline void Excel::Rectangle::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10252)
inline VARIANT_BOOL Excel::Rectangle::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10253)
inline void Excel::Rectangle::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10254)
inline _bstr_t Excel::Rectangle::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10255)
inline void Excel::Rectangle::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10256)
inline _bstr_t Excel::Rectangle::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10257)
inline void Excel::Rectangle::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10258)
inline _variant_t Excel::Rectangle::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10259)
inline void Excel::Rectangle::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10260)
inline VARIANT_BOOL Excel::Rectangle::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10261)
inline void Excel::Rectangle::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10262)
inline _variant_t Excel::Rectangle::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10263)
inline _variant_t Excel::Rectangle::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10264)
inline double Excel::Rectangle::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10265)
inline void Excel::Rectangle::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10266)
inline Excel::RangePtr Excel::Rectangle::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10267)
inline VARIANT_BOOL Excel::Rectangle::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10268)
inline void Excel::Rectangle::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10269)
inline double Excel::Rectangle::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10270)
inline void Excel::Rectangle::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10271)
inline long Excel::Rectangle::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10272)
inline Excel::ShapeRangePtr Excel::Rectangle::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10273)
inline VARIANT_BOOL Excel::Rectangle::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10274)
inline void Excel::Rectangle::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10275)
inline _variant_t Excel::Rectangle::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10276)
inline void Excel::Rectangle::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10277)
inline VARIANT_BOOL Excel::Rectangle::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10278)
inline void Excel::Rectangle::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10279)
inline _bstr_t Excel::Rectangle::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10280)
inline void Excel::Rectangle::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10281)
inline Excel::CharactersPtr Excel::Rectangle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(10282)
inline _variant_t Excel::Rectangle::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(10283)
inline Excel::FontPtr Excel::Rectangle::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(10284)
inline _bstr_t Excel::Rectangle::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10285)
inline void Excel::Rectangle::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10286)
inline _variant_t Excel::Rectangle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10287)
inline void Excel::Rectangle::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10288)
inline VARIANT_BOOL Excel::Rectangle::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10289)
inline void Excel::Rectangle::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10290)
inline _variant_t Excel::Rectangle::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10291)
inline void Excel::Rectangle::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10292)
inline _bstr_t Excel::Rectangle::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10293)
inline void Excel::Rectangle::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10294)
inline _variant_t Excel::Rectangle::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10295)
inline void Excel::Rectangle::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10296)
inline long Excel::Rectangle::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10297)
inline void Excel::Rectangle::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10298)
inline Excel::BorderPtr Excel::Rectangle::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10299)
inline Excel::InteriorPtr Excel::Rectangle::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10300)
inline VARIANT_BOOL Excel::Rectangle::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10301)
inline void Excel::Rectangle::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10302)
inline VARIANT_BOOL Excel::Rectangle::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10303)
inline void Excel::Rectangle::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Rectangles wrapper method implementations
//

#pragma implementation_key(10304)
inline Excel::_ApplicationPtr Excel::Rectangles::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10305)
inline enum XlCreator Excel::Rectangles::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10306)
inline IDispatchPtr Excel::Rectangles::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10307)
inline _variant_t Excel::Rectangles::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10308)
inline _variant_t Excel::Rectangles::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10309)
inline _variant_t Excel::Rectangles::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10310)
inline _variant_t Excel::Rectangles::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10311)
inline _variant_t Excel::Rectangles::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10312)
inline IDispatchPtr Excel::Rectangles::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10313)
inline VARIANT_BOOL Excel::Rectangles::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10314)
inline void Excel::Rectangles::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10315)
inline double Excel::Rectangles::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10316)
inline void Excel::Rectangles::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10317)
inline double Excel::Rectangles::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10318)
inline void Excel::Rectangles::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10319)
inline VARIANT_BOOL Excel::Rectangles::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10320)
inline void Excel::Rectangles::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10321)
inline _bstr_t Excel::Rectangles::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10322)
inline void Excel::Rectangles::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10323)
inline _variant_t Excel::Rectangles::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10324)
inline void Excel::Rectangles::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10325)
inline VARIANT_BOOL Excel::Rectangles::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10326)
inline void Excel::Rectangles::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10327)
inline _variant_t Excel::Rectangles::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10328)
inline _variant_t Excel::Rectangles::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10329)
inline double Excel::Rectangles::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10330)
inline void Excel::Rectangles::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10331)
inline VARIANT_BOOL Excel::Rectangles::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10332)
inline void Excel::Rectangles::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10333)
inline double Excel::Rectangles::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10334)
inline void Excel::Rectangles::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10335)
inline long Excel::Rectangles::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10336)
inline Excel::ShapeRangePtr Excel::Rectangles::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10337)
inline VARIANT_BOOL Excel::Rectangles::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10338)
inline void Excel::Rectangles::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10339)
inline _variant_t Excel::Rectangles::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10340)
inline void Excel::Rectangles::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10341)
inline VARIANT_BOOL Excel::Rectangles::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10342)
inline void Excel::Rectangles::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10343)
inline _bstr_t Excel::Rectangles::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10344)
inline void Excel::Rectangles::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10345)
inline Excel::CharactersPtr Excel::Rectangles::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(10346)
inline _variant_t Excel::Rectangles::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(10347)
inline Excel::FontPtr Excel::Rectangles::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(10348)
inline _bstr_t Excel::Rectangles::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10349)
inline void Excel::Rectangles::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10350)
inline _variant_t Excel::Rectangles::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10351)
inline void Excel::Rectangles::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10352)
inline VARIANT_BOOL Excel::Rectangles::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10353)
inline void Excel::Rectangles::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10354)
inline _variant_t Excel::Rectangles::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10355)
inline void Excel::Rectangles::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10356)
inline _bstr_t Excel::Rectangles::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10357)
inline void Excel::Rectangles::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10358)
inline _variant_t Excel::Rectangles::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10359)
inline void Excel::Rectangles::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10360)
inline long Excel::Rectangles::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10361)
inline void Excel::Rectangles::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10362)
inline Excel::BorderPtr Excel::Rectangles::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10363)
inline Excel::InteriorPtr Excel::Rectangles::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10364)
inline VARIANT_BOOL Excel::Rectangles::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10365)
inline void Excel::Rectangles::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10366)
inline VARIANT_BOOL Excel::Rectangles::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10367)
inline void Excel::Rectangles::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10368)
inline Excel::RectanglePtr Excel::Rectangles::Add ( double Left, double Top, double Width, double Height ) {
    struct Rectangle * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return RectanglePtr(_result, false);
}

#pragma implementation_key(10369)
inline long Excel::Rectangles::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10370)
inline Excel::GroupObjectPtr Excel::Rectangles::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(10371)
inline IDispatchPtr Excel::Rectangles::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10372)
inline IUnknownPtr Excel::Rectangles::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Oval wrapper method implementations
//

#pragma implementation_key(10373)
inline Excel::_ApplicationPtr Excel::Oval::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10374)
inline enum XlCreator Excel::Oval::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10375)
inline IDispatchPtr Excel::Oval::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10376)
inline Excel::RangePtr Excel::Oval::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10377)
inline _variant_t Excel::Oval::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10378)
inline _variant_t Excel::Oval::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10379)
inline _variant_t Excel::Oval::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10380)
inline _variant_t Excel::Oval::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10381)
inline _variant_t Excel::Oval::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10382)
inline IDispatchPtr Excel::Oval::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10383)
inline VARIANT_BOOL Excel::Oval::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10384)
inline void Excel::Oval::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10385)
inline double Excel::Oval::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10386)
inline void Excel::Oval::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10387)
inline long Excel::Oval::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10388)
inline double Excel::Oval::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10389)
inline void Excel::Oval::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10390)
inline VARIANT_BOOL Excel::Oval::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10391)
inline void Excel::Oval::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10392)
inline _bstr_t Excel::Oval::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10393)
inline void Excel::Oval::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10394)
inline _bstr_t Excel::Oval::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10395)
inline void Excel::Oval::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10396)
inline _variant_t Excel::Oval::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10397)
inline void Excel::Oval::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10398)
inline VARIANT_BOOL Excel::Oval::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10399)
inline void Excel::Oval::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10400)
inline _variant_t Excel::Oval::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10401)
inline _variant_t Excel::Oval::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10402)
inline double Excel::Oval::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10403)
inline void Excel::Oval::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10404)
inline Excel::RangePtr Excel::Oval::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10405)
inline VARIANT_BOOL Excel::Oval::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10406)
inline void Excel::Oval::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10407)
inline double Excel::Oval::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10408)
inline void Excel::Oval::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10409)
inline long Excel::Oval::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10410)
inline Excel::ShapeRangePtr Excel::Oval::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10411)
inline VARIANT_BOOL Excel::Oval::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10412)
inline void Excel::Oval::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10413)
inline _variant_t Excel::Oval::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10414)
inline void Excel::Oval::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10415)
inline VARIANT_BOOL Excel::Oval::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10416)
inline void Excel::Oval::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10417)
inline _bstr_t Excel::Oval::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10418)
inline void Excel::Oval::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10419)
inline Excel::CharactersPtr Excel::Oval::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(10420)
inline _variant_t Excel::Oval::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(10421)
inline Excel::FontPtr Excel::Oval::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(10422)
inline _bstr_t Excel::Oval::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10423)
inline void Excel::Oval::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10424)
inline _variant_t Excel::Oval::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10425)
inline void Excel::Oval::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10426)
inline VARIANT_BOOL Excel::Oval::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10427)
inline void Excel::Oval::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10428)
inline _variant_t Excel::Oval::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10429)
inline void Excel::Oval::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10430)
inline _bstr_t Excel::Oval::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10431)
inline void Excel::Oval::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10432)
inline _variant_t Excel::Oval::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10433)
inline void Excel::Oval::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10434)
inline long Excel::Oval::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10435)
inline void Excel::Oval::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10436)
inline Excel::BorderPtr Excel::Oval::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10437)
inline Excel::InteriorPtr Excel::Oval::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10438)
inline VARIANT_BOOL Excel::Oval::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10439)
inline void Excel::Oval::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Ovals wrapper method implementations
//

#pragma implementation_key(10440)
inline Excel::_ApplicationPtr Excel::Ovals::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10441)
inline enum XlCreator Excel::Ovals::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10442)
inline IDispatchPtr Excel::Ovals::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10443)
inline _variant_t Excel::Ovals::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10444)
inline _variant_t Excel::Ovals::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10445)
inline _variant_t Excel::Ovals::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10446)
inline _variant_t Excel::Ovals::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10447)
inline _variant_t Excel::Ovals::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10448)
inline IDispatchPtr Excel::Ovals::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10449)
inline VARIANT_BOOL Excel::Ovals::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10450)
inline void Excel::Ovals::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10451)
inline double Excel::Ovals::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10452)
inline void Excel::Ovals::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10453)
inline double Excel::Ovals::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10454)
inline void Excel::Ovals::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10455)
inline VARIANT_BOOL Excel::Ovals::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10456)
inline void Excel::Ovals::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10457)
inline _bstr_t Excel::Ovals::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10458)
inline void Excel::Ovals::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10459)
inline _variant_t Excel::Ovals::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10460)
inline void Excel::Ovals::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10461)
inline VARIANT_BOOL Excel::Ovals::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10462)
inline void Excel::Ovals::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10463)
inline _variant_t Excel::Ovals::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10464)
inline _variant_t Excel::Ovals::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10465)
inline double Excel::Ovals::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10466)
inline void Excel::Ovals::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10467)
inline VARIANT_BOOL Excel::Ovals::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10468)
inline void Excel::Ovals::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10469)
inline double Excel::Ovals::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10470)
inline void Excel::Ovals::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10471)
inline long Excel::Ovals::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10472)
inline Excel::ShapeRangePtr Excel::Ovals::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10473)
inline VARIANT_BOOL Excel::Ovals::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10474)
inline void Excel::Ovals::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10475)
inline _variant_t Excel::Ovals::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10476)
inline void Excel::Ovals::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10477)
inline VARIANT_BOOL Excel::Ovals::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10478)
inline void Excel::Ovals::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10479)
inline _bstr_t Excel::Ovals::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10480)
inline void Excel::Ovals::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10481)
inline Excel::CharactersPtr Excel::Ovals::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(10482)
inline _variant_t Excel::Ovals::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(10483)
inline Excel::FontPtr Excel::Ovals::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(10484)
inline _bstr_t Excel::Ovals::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10485)
inline void Excel::Ovals::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10486)
inline _variant_t Excel::Ovals::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10487)
inline void Excel::Ovals::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10488)
inline VARIANT_BOOL Excel::Ovals::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10489)
inline void Excel::Ovals::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10490)
inline _variant_t Excel::Ovals::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10491)
inline void Excel::Ovals::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10492)
inline _bstr_t Excel::Ovals::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10493)
inline void Excel::Ovals::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10494)
inline _variant_t Excel::Ovals::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10495)
inline void Excel::Ovals::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10496)
inline long Excel::Ovals::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10497)
inline void Excel::Ovals::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10498)
inline Excel::BorderPtr Excel::Ovals::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10499)
inline Excel::InteriorPtr Excel::Ovals::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10500)
inline VARIANT_BOOL Excel::Ovals::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10501)
inline void Excel::Ovals::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10502)
inline Excel::OvalPtr Excel::Ovals::Add ( double Left, double Top, double Width, double Height ) {
    struct Oval * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return OvalPtr(_result, false);
}

#pragma implementation_key(10503)
inline long Excel::Ovals::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10504)
inline Excel::GroupObjectPtr Excel::Ovals::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(10505)
inline IDispatchPtr Excel::Ovals::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10506)
inline IUnknownPtr Excel::Ovals::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Arc wrapper method implementations
//

#pragma implementation_key(10507)
inline Excel::_ApplicationPtr Excel::Arc::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10508)
inline enum XlCreator Excel::Arc::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10509)
inline IDispatchPtr Excel::Arc::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10510)
inline Excel::RangePtr Excel::Arc::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10511)
inline _variant_t Excel::Arc::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10512)
inline _variant_t Excel::Arc::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10513)
inline _variant_t Excel::Arc::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10514)
inline _variant_t Excel::Arc::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10515)
inline _variant_t Excel::Arc::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10516)
inline IDispatchPtr Excel::Arc::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10517)
inline VARIANT_BOOL Excel::Arc::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10518)
inline void Excel::Arc::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10519)
inline double Excel::Arc::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10520)
inline void Excel::Arc::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10521)
inline long Excel::Arc::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10522)
inline double Excel::Arc::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10523)
inline void Excel::Arc::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10524)
inline VARIANT_BOOL Excel::Arc::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10525)
inline void Excel::Arc::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10526)
inline _bstr_t Excel::Arc::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10527)
inline void Excel::Arc::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10528)
inline _bstr_t Excel::Arc::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10529)
inline void Excel::Arc::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10530)
inline _variant_t Excel::Arc::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10531)
inline void Excel::Arc::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10532)
inline VARIANT_BOOL Excel::Arc::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10533)
inline void Excel::Arc::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10534)
inline _variant_t Excel::Arc::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10535)
inline _variant_t Excel::Arc::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10536)
inline double Excel::Arc::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10537)
inline void Excel::Arc::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10538)
inline Excel::RangePtr Excel::Arc::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10539)
inline VARIANT_BOOL Excel::Arc::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10540)
inline void Excel::Arc::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10541)
inline double Excel::Arc::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10542)
inline void Excel::Arc::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10543)
inline long Excel::Arc::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10544)
inline Excel::ShapeRangePtr Excel::Arc::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10545)
inline VARIANT_BOOL Excel::Arc::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10546)
inline void Excel::Arc::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10547)
inline _variant_t Excel::Arc::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10548)
inline void Excel::Arc::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10549)
inline VARIANT_BOOL Excel::Arc::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10550)
inline void Excel::Arc::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10551)
inline _bstr_t Excel::Arc::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10552)
inline void Excel::Arc::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10553)
inline Excel::CharactersPtr Excel::Arc::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(10554)
inline _variant_t Excel::Arc::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(10555)
inline Excel::FontPtr Excel::Arc::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(10556)
inline _bstr_t Excel::Arc::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10557)
inline void Excel::Arc::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10558)
inline _variant_t Excel::Arc::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10559)
inline void Excel::Arc::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10560)
inline VARIANT_BOOL Excel::Arc::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10561)
inline void Excel::Arc::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10562)
inline _variant_t Excel::Arc::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10563)
inline void Excel::Arc::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10564)
inline _bstr_t Excel::Arc::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10565)
inline void Excel::Arc::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10566)
inline _variant_t Excel::Arc::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10567)
inline void Excel::Arc::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10568)
inline long Excel::Arc::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10569)
inline void Excel::Arc::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10570)
inline Excel::BorderPtr Excel::Arc::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10571)
inline Excel::InteriorPtr Excel::Arc::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

//
// dispinterface Arcs wrapper method implementations
//

#pragma implementation_key(10572)
inline Excel::_ApplicationPtr Excel::Arcs::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10573)
inline enum XlCreator Excel::Arcs::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10574)
inline IDispatchPtr Excel::Arcs::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10575)
inline _variant_t Excel::Arcs::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10576)
inline _variant_t Excel::Arcs::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10577)
inline _variant_t Excel::Arcs::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10578)
inline _variant_t Excel::Arcs::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10579)
inline _variant_t Excel::Arcs::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10580)
inline IDispatchPtr Excel::Arcs::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10581)
inline VARIANT_BOOL Excel::Arcs::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10582)
inline void Excel::Arcs::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10583)
inline double Excel::Arcs::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10584)
inline void Excel::Arcs::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10585)
inline double Excel::Arcs::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10586)
inline void Excel::Arcs::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10587)
inline VARIANT_BOOL Excel::Arcs::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10588)
inline void Excel::Arcs::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10589)
inline _bstr_t Excel::Arcs::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10590)
inline void Excel::Arcs::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10591)
inline _variant_t Excel::Arcs::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10592)
inline void Excel::Arcs::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10593)
inline VARIANT_BOOL Excel::Arcs::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10594)
inline void Excel::Arcs::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10595)
inline _variant_t Excel::Arcs::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10596)
inline _variant_t Excel::Arcs::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10597)
inline double Excel::Arcs::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10598)
inline void Excel::Arcs::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10599)
inline VARIANT_BOOL Excel::Arcs::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10600)
inline void Excel::Arcs::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10601)
inline double Excel::Arcs::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10602)
inline void Excel::Arcs::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10603)
inline long Excel::Arcs::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10604)
inline Excel::ShapeRangePtr Excel::Arcs::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10605)
inline VARIANT_BOOL Excel::Arcs::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10606)
inline void Excel::Arcs::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10607)
inline _variant_t Excel::Arcs::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10608)
inline void Excel::Arcs::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10609)
inline VARIANT_BOOL Excel::Arcs::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10610)
inline void Excel::Arcs::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10611)
inline _bstr_t Excel::Arcs::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10612)
inline void Excel::Arcs::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10613)
inline Excel::CharactersPtr Excel::Arcs::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(10614)
inline _variant_t Excel::Arcs::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(10615)
inline Excel::FontPtr Excel::Arcs::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(10616)
inline _bstr_t Excel::Arcs::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10617)
inline void Excel::Arcs::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10618)
inline _variant_t Excel::Arcs::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10619)
inline void Excel::Arcs::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10620)
inline VARIANT_BOOL Excel::Arcs::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10621)
inline void Excel::Arcs::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10622)
inline _variant_t Excel::Arcs::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10623)
inline void Excel::Arcs::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10624)
inline _bstr_t Excel::Arcs::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10625)
inline void Excel::Arcs::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10626)
inline _variant_t Excel::Arcs::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10627)
inline void Excel::Arcs::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10628)
inline long Excel::Arcs::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10629)
inline void Excel::Arcs::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10630)
inline Excel::BorderPtr Excel::Arcs::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10631)
inline Excel::InteriorPtr Excel::Arcs::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10632)
inline Excel::ArcPtr Excel::Arcs::Add ( double X1, double Y1, double X2, double Y2 ) {
    struct Arc * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", X1, Y1, X2, Y2);
    return ArcPtr(_result, false);
}

#pragma implementation_key(10633)
inline long Excel::Arcs::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10634)
inline Excel::GroupObjectPtr Excel::Arcs::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(10635)
inline IDispatchPtr Excel::Arcs::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10636)
inline IUnknownPtr Excel::Arcs::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface OLEObjectEvents wrapper method implementations
//

#pragma implementation_key(10637)
inline HRESULT Excel::OLEObjectEvents::GotFocus ( ) {
    return _com_dispatch_method(this, 0x605, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(10638)
inline HRESULT Excel::OLEObjectEvents::LostFocus ( ) {
    return _com_dispatch_method(this, 0x606, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _OLEObject wrapper method implementations
//

#pragma implementation_key(10639)
inline Excel::_ApplicationPtr Excel::_OLEObject::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x80010094, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10640)
inline enum XlCreator Excel::_OLEObject::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x80010095, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10641)
inline IDispatchPtr Excel::_OLEObject::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x80010096, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10642)
inline Excel::RangePtr Excel::_OLEObject::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x80010267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10643)
inline _variant_t Excel::_OLEObject::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x8001025a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10644)
inline _variant_t Excel::_OLEObject::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x80010227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10645)
inline _variant_t Excel::_OLEObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x800100d5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10646)
inline _variant_t Excel::_OLEObject::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x80010235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10647)
inline _variant_t Excel::_OLEObject::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x80010075, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10648)
inline IDispatchPtr Excel::_OLEObject::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x8001040f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10649)
inline VARIANT_BOOL Excel::_OLEObject::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x80010258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10650)
inline void Excel::_OLEObject::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x80010258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10651)
inline double Excel::_OLEObject::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x8001007b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10652)
inline void Excel::_OLEObject::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x8001007b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10653)
inline long Excel::_OLEObject::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x800101e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10654)
inline double Excel::_OLEObject::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x8001007f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10655)
inline void Excel::_OLEObject::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x8001007f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10656)
inline VARIANT_BOOL Excel::_OLEObject::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8001010d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10657)
inline void Excel::_OLEObject::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8001010d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10658)
inline _bstr_t Excel::_OLEObject::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8001006e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10659)
inline void Excel::_OLEObject::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8001006e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10660)
inline _bstr_t Excel::_OLEObject::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x80010254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10661)
inline void Excel::_OLEObject::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10662)
inline _variant_t Excel::_OLEObject::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x80010269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10663)
inline void Excel::_OLEObject::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x80010269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10664)
inline VARIANT_BOOL Excel::_OLEObject::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8001026a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10665)
inline void Excel::_OLEObject::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8001026a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10666)
inline _variant_t Excel::_OLEObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x800100eb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10667)
inline _variant_t Excel::_OLEObject::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x8001025d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10668)
inline double Excel::_OLEObject::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x8001007e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10669)
inline void Excel::_OLEObject::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x8001007e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10670)
inline Excel::RangePtr Excel::_OLEObject::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x8001026c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10671)
inline VARIANT_BOOL Excel::_OLEObject::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8001022e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10672)
inline void Excel::_OLEObject::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8001022e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10673)
inline double Excel::_OLEObject::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x8001007a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10674)
inline void Excel::_OLEObject::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x8001007a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10675)
inline long Excel::_OLEObject::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x8001026e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10676)
inline Excel::ShapeRangePtr Excel::_OLEObject::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x800105f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10677)
inline Excel::BorderPtr Excel::_OLEObject::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80010080, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10678)
inline Excel::InteriorPtr Excel::_OLEObject::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x80010081, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10679)
inline VARIANT_BOOL Excel::_OLEObject::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x80010067, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10680)
inline void Excel::_OLEObject::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x80010067, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10681)
inline _variant_t Excel::_OLEObject::Activate ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x80010130, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10682)
inline VARIANT_BOOL Excel::_OLEObject::GetAutoLoad ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x800104a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10683)
inline void Excel::_OLEObject::PutAutoLoad ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x800104a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10684)
inline VARIANT_BOOL Excel::_OLEObject::GetAutoUpdate ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x80010418, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10685)
inline void Excel::_OLEObject::PutAutoUpdate ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x80010418, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10686)
inline IDispatchPtr Excel::_OLEObject::GetObject ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x80010419, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10687)
inline _variant_t Excel::_OLEObject::GetOLEType ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x8001041e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10688)
inline _bstr_t Excel::_OLEObject::GetSourceName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x800102d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10689)
inline void Excel::_OLEObject::PutSourceName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x800102d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10690)
inline _variant_t Excel::_OLEObject::Update ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x800102a8, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10691)
inline _variant_t Excel::_OLEObject::Verb ( enum XlOLEVerb Verb ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x8001025e, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003", Verb);
    return _variant_t(_result, false);
}

#pragma implementation_key(10692)
inline _bstr_t Excel::_OLEObject::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x80010422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10693)
inline void Excel::_OLEObject::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10694)
inline _bstr_t Excel::_OLEObject::GetListFillRange ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8001034f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10695)
inline void Excel::_OLEObject::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8001034f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10696)
inline _bstr_t Excel::_OLEObject::GetprogID ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x800105f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10697)
inline _bstr_t Excel::_OLEObject::GetAltHTML ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8001073d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10698)
inline void Excel::_OLEObject::PutAltHTML ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8001073d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface OLEObjects wrapper method implementations
//

#pragma implementation_key(10699)
inline Excel::_ApplicationPtr Excel::OLEObjects::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10700)
inline enum XlCreator Excel::OLEObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10701)
inline IDispatchPtr Excel::OLEObjects::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10702)
inline _variant_t Excel::OLEObjects::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10703)
inline _variant_t Excel::OLEObjects::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10704)
inline _variant_t Excel::OLEObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10705)
inline _variant_t Excel::OLEObjects::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10706)
inline _variant_t Excel::OLEObjects::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10707)
inline IDispatchPtr Excel::OLEObjects::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10708)
inline VARIANT_BOOL Excel::OLEObjects::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10709)
inline void Excel::OLEObjects::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10710)
inline double Excel::OLEObjects::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10711)
inline void Excel::OLEObjects::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10712)
inline double Excel::OLEObjects::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10713)
inline void Excel::OLEObjects::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10714)
inline VARIANT_BOOL Excel::OLEObjects::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10715)
inline void Excel::OLEObjects::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10716)
inline _bstr_t Excel::OLEObjects::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10717)
inline void Excel::OLEObjects::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10718)
inline _variant_t Excel::OLEObjects::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10719)
inline void Excel::OLEObjects::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10720)
inline VARIANT_BOOL Excel::OLEObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10721)
inline void Excel::OLEObjects::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10722)
inline _variant_t Excel::OLEObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10723)
inline _variant_t Excel::OLEObjects::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10724)
inline double Excel::OLEObjects::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10725)
inline void Excel::OLEObjects::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10726)
inline VARIANT_BOOL Excel::OLEObjects::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10727)
inline void Excel::OLEObjects::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10728)
inline double Excel::OLEObjects::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10729)
inline void Excel::OLEObjects::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10730)
inline long Excel::OLEObjects::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10731)
inline Excel::ShapeRangePtr Excel::OLEObjects::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10732)
inline Excel::BorderPtr Excel::OLEObjects::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10733)
inline Excel::InteriorPtr Excel::OLEObjects::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10734)
inline VARIANT_BOOL Excel::OLEObjects::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10735)
inline void Excel::OLEObjects::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10736)
inline VARIANT_BOOL Excel::OLEObjects::GetAutoLoad ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10737)
inline void Excel::OLEObjects::PutAutoLoad ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x4a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10738)
inline _bstr_t Excel::OLEObjects::GetSourceName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x2d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10739)
inline void Excel::OLEObjects::PutSourceName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x2d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10740)
inline Excel::_OLEObjectPtr Excel::OLEObjects::Add ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height ) {
    struct _OLEObject * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &ClassType, &Filename, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel, &Left, &Top, &Width, &Height);
    return _OLEObjectPtr(_result, false);
}

#pragma implementation_key(10741)
inline long Excel::OLEObjects::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10742)
inline Excel::GroupObjectPtr Excel::OLEObjects::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(10743)
inline IDispatchPtr Excel::OLEObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10744)
inline IUnknownPtr Excel::OLEObjects::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface TextBox wrapper method implementations
//

#pragma implementation_key(10745)
inline Excel::_ApplicationPtr Excel::TextBox::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10746)
inline enum XlCreator Excel::TextBox::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10747)
inline IDispatchPtr Excel::TextBox::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10748)
inline Excel::RangePtr Excel::TextBox::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10749)
inline _variant_t Excel::TextBox::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10750)
inline _variant_t Excel::TextBox::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10751)
inline _variant_t Excel::TextBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10752)
inline _variant_t Excel::TextBox::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10753)
inline _variant_t Excel::TextBox::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10754)
inline IDispatchPtr Excel::TextBox::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10755)
inline VARIANT_BOOL Excel::TextBox::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10756)
inline void Excel::TextBox::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10757)
inline double Excel::TextBox::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10758)
inline void Excel::TextBox::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10759)
inline long Excel::TextBox::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10760)
inline double Excel::TextBox::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10761)
inline void Excel::TextBox::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10762)
inline VARIANT_BOOL Excel::TextBox::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10763)
inline void Excel::TextBox::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10764)
inline _bstr_t Excel::TextBox::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10765)
inline void Excel::TextBox::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10766)
inline _bstr_t Excel::TextBox::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10767)
inline void Excel::TextBox::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10768)
inline _variant_t Excel::TextBox::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10769)
inline void Excel::TextBox::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10770)
inline VARIANT_BOOL Excel::TextBox::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10771)
inline void Excel::TextBox::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10772)
inline _variant_t Excel::TextBox::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10773)
inline _variant_t Excel::TextBox::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10774)
inline double Excel::TextBox::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10775)
inline void Excel::TextBox::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10776)
inline Excel::RangePtr Excel::TextBox::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10777)
inline VARIANT_BOOL Excel::TextBox::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10778)
inline void Excel::TextBox::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10779)
inline double Excel::TextBox::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10780)
inline void Excel::TextBox::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10781)
inline long Excel::TextBox::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10782)
inline Excel::ShapeRangePtr Excel::TextBox::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10783)
inline VARIANT_BOOL Excel::TextBox::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10784)
inline void Excel::TextBox::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10785)
inline _variant_t Excel::TextBox::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10786)
inline void Excel::TextBox::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10787)
inline VARIANT_BOOL Excel::TextBox::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10788)
inline void Excel::TextBox::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10789)
inline _bstr_t Excel::TextBox::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10790)
inline void Excel::TextBox::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10791)
inline Excel::CharactersPtr Excel::TextBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(10792)
inline _variant_t Excel::TextBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(10793)
inline Excel::FontPtr Excel::TextBox::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(10794)
inline _bstr_t Excel::TextBox::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10795)
inline void Excel::TextBox::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10796)
inline _variant_t Excel::TextBox::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10797)
inline void Excel::TextBox::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10798)
inline VARIANT_BOOL Excel::TextBox::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10799)
inline void Excel::TextBox::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10800)
inline _variant_t Excel::TextBox::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10801)
inline void Excel::TextBox::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10802)
inline _bstr_t Excel::TextBox::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10803)
inline void Excel::TextBox::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10804)
inline _variant_t Excel::TextBox::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10805)
inline void Excel::TextBox::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10806)
inline long Excel::TextBox::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10807)
inline void Excel::TextBox::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10808)
inline Excel::BorderPtr Excel::TextBox::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10809)
inline Excel::InteriorPtr Excel::TextBox::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10810)
inline VARIANT_BOOL Excel::TextBox::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10811)
inline void Excel::TextBox::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10812)
inline VARIANT_BOOL Excel::TextBox::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10813)
inline void Excel::TextBox::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface TextBoxes wrapper method implementations
//

#pragma implementation_key(10814)
inline Excel::_ApplicationPtr Excel::TextBoxes::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10815)
inline enum XlCreator Excel::TextBoxes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10816)
inline IDispatchPtr Excel::TextBoxes::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10817)
inline _variant_t Excel::TextBoxes::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10818)
inline _variant_t Excel::TextBoxes::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10819)
inline _variant_t Excel::TextBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10820)
inline _variant_t Excel::TextBoxes::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10821)
inline _variant_t Excel::TextBoxes::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10822)
inline IDispatchPtr Excel::TextBoxes::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10823)
inline VARIANT_BOOL Excel::TextBoxes::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10824)
inline void Excel::TextBoxes::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10825)
inline double Excel::TextBoxes::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10826)
inline void Excel::TextBoxes::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10827)
inline double Excel::TextBoxes::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10828)
inline void Excel::TextBoxes::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10829)
inline VARIANT_BOOL Excel::TextBoxes::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10830)
inline void Excel::TextBoxes::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10831)
inline _bstr_t Excel::TextBoxes::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10832)
inline void Excel::TextBoxes::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10833)
inline _variant_t Excel::TextBoxes::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10834)
inline void Excel::TextBoxes::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10835)
inline VARIANT_BOOL Excel::TextBoxes::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10836)
inline void Excel::TextBoxes::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10837)
inline _variant_t Excel::TextBoxes::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10838)
inline _variant_t Excel::TextBoxes::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10839)
inline double Excel::TextBoxes::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10840)
inline void Excel::TextBoxes::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10841)
inline VARIANT_BOOL Excel::TextBoxes::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10842)
inline void Excel::TextBoxes::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10843)
inline double Excel::TextBoxes::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10844)
inline void Excel::TextBoxes::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10845)
inline long Excel::TextBoxes::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10846)
inline Excel::ShapeRangePtr Excel::TextBoxes::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10847)
inline VARIANT_BOOL Excel::TextBoxes::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10848)
inline void Excel::TextBoxes::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10849)
inline _variant_t Excel::TextBoxes::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10850)
inline void Excel::TextBoxes::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10851)
inline VARIANT_BOOL Excel::TextBoxes::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10852)
inline void Excel::TextBoxes::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10853)
inline _bstr_t Excel::TextBoxes::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10854)
inline void Excel::TextBoxes::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10855)
inline Excel::CharactersPtr Excel::TextBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(10856)
inline _variant_t Excel::TextBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(10857)
inline Excel::FontPtr Excel::TextBoxes::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(10858)
inline _bstr_t Excel::TextBoxes::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10859)
inline void Excel::TextBoxes::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10860)
inline _variant_t Excel::TextBoxes::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10861)
inline void Excel::TextBoxes::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10862)
inline VARIANT_BOOL Excel::TextBoxes::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10863)
inline void Excel::TextBoxes::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10864)
inline _variant_t Excel::TextBoxes::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10865)
inline void Excel::TextBoxes::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10866)
inline _bstr_t Excel::TextBoxes::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10867)
inline void Excel::TextBoxes::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10868)
inline _variant_t Excel::TextBoxes::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10869)
inline void Excel::TextBoxes::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10870)
inline long Excel::TextBoxes::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10871)
inline void Excel::TextBoxes::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(10872)
inline Excel::BorderPtr Excel::TextBoxes::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10873)
inline Excel::InteriorPtr Excel::TextBoxes::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10874)
inline VARIANT_BOOL Excel::TextBoxes::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10875)
inline void Excel::TextBoxes::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10876)
inline VARIANT_BOOL Excel::TextBoxes::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10877)
inline void Excel::TextBoxes::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10878)
inline Excel::TextBoxPtr Excel::TextBoxes::Add ( double Left, double Top, double Width, double Height ) {
    struct TextBox * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return TextBoxPtr(_result, false);
}

#pragma implementation_key(10879)
inline long Excel::TextBoxes::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10880)
inline Excel::GroupObjectPtr Excel::TextBoxes::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(10881)
inline IDispatchPtr Excel::TextBoxes::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10882)
inline IUnknownPtr Excel::TextBoxes::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Picture wrapper method implementations
//

#pragma implementation_key(10883)
inline Excel::_ApplicationPtr Excel::Picture::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10884)
inline enum XlCreator Excel::Picture::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10885)
inline IDispatchPtr Excel::Picture::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10886)
inline Excel::RangePtr Excel::Picture::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10887)
inline _variant_t Excel::Picture::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10888)
inline _variant_t Excel::Picture::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10889)
inline _variant_t Excel::Picture::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10890)
inline _variant_t Excel::Picture::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10891)
inline _variant_t Excel::Picture::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10892)
inline IDispatchPtr Excel::Picture::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10893)
inline VARIANT_BOOL Excel::Picture::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10894)
inline void Excel::Picture::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10895)
inline double Excel::Picture::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10896)
inline void Excel::Picture::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10897)
inline long Excel::Picture::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10898)
inline double Excel::Picture::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10899)
inline void Excel::Picture::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10900)
inline VARIANT_BOOL Excel::Picture::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10901)
inline void Excel::Picture::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10902)
inline _bstr_t Excel::Picture::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10903)
inline void Excel::Picture::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10904)
inline _bstr_t Excel::Picture::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10905)
inline void Excel::Picture::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10906)
inline _variant_t Excel::Picture::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10907)
inline void Excel::Picture::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10908)
inline VARIANT_BOOL Excel::Picture::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10909)
inline void Excel::Picture::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10910)
inline _variant_t Excel::Picture::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10911)
inline _variant_t Excel::Picture::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10912)
inline double Excel::Picture::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10913)
inline void Excel::Picture::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10914)
inline Excel::RangePtr Excel::Picture::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10915)
inline VARIANT_BOOL Excel::Picture::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10916)
inline void Excel::Picture::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10917)
inline double Excel::Picture::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10918)
inline void Excel::Picture::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10919)
inline long Excel::Picture::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10920)
inline Excel::ShapeRangePtr Excel::Picture::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10921)
inline Excel::BorderPtr Excel::Picture::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10922)
inline Excel::InteriorPtr Excel::Picture::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10923)
inline VARIANT_BOOL Excel::Picture::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10924)
inline void Excel::Picture::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10925)
inline _bstr_t Excel::Picture::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10926)
inline void Excel::Picture::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface Pictures wrapper method implementations
//

#pragma implementation_key(10927)
inline Excel::_ApplicationPtr Excel::Pictures::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10928)
inline enum XlCreator Excel::Pictures::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10929)
inline IDispatchPtr Excel::Pictures::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10930)
inline _variant_t Excel::Pictures::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10931)
inline _variant_t Excel::Pictures::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10932)
inline _variant_t Excel::Pictures::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10933)
inline _variant_t Excel::Pictures::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10934)
inline _variant_t Excel::Pictures::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10935)
inline IDispatchPtr Excel::Pictures::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10936)
inline VARIANT_BOOL Excel::Pictures::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10937)
inline void Excel::Pictures::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10938)
inline double Excel::Pictures::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10939)
inline void Excel::Pictures::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10940)
inline double Excel::Pictures::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10941)
inline void Excel::Pictures::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10942)
inline VARIANT_BOOL Excel::Pictures::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10943)
inline void Excel::Pictures::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10944)
inline _bstr_t Excel::Pictures::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10945)
inline void Excel::Pictures::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10946)
inline _variant_t Excel::Pictures::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10947)
inline void Excel::Pictures::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10948)
inline VARIANT_BOOL Excel::Pictures::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10949)
inline void Excel::Pictures::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10950)
inline _variant_t Excel::Pictures::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(10951)
inline _variant_t Excel::Pictures::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10952)
inline double Excel::Pictures::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10953)
inline void Excel::Pictures::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10954)
inline VARIANT_BOOL Excel::Pictures::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10955)
inline void Excel::Pictures::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10956)
inline double Excel::Pictures::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10957)
inline void Excel::Pictures::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10958)
inline long Excel::Pictures::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10959)
inline Excel::ShapeRangePtr Excel::Pictures::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(10960)
inline Excel::BorderPtr Excel::Pictures::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(10961)
inline Excel::InteriorPtr Excel::Pictures::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(10962)
inline VARIANT_BOOL Excel::Pictures::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10963)
inline void Excel::Pictures::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10964)
inline _bstr_t Excel::Pictures::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10965)
inline void Excel::Pictures::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10966)
inline Excel::PicturePtr Excel::Pictures::Add ( double Left, double Top, double Width, double Height ) {
    struct Picture * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return PicturePtr(_result, false);
}

#pragma implementation_key(10967)
inline long Excel::Pictures::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10968)
inline Excel::GroupObjectPtr Excel::Pictures::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(10969)
inline Excel::PicturePtr Excel::Pictures::Insert ( _bstr_t Filename, const _variant_t & Converter ) {
    struct Picture * _result;
    _com_dispatch_method(this, 0xfc, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c", (BSTR)Filename, &Converter);
    return PicturePtr(_result, false);
}

#pragma implementation_key(10970)
inline IDispatchPtr Excel::Pictures::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10971)
inline IUnknownPtr Excel::Pictures::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(10972)
inline Excel::PicturePtr Excel::Pictures::Paste ( const _variant_t & Link ) {
    struct Picture * _result;
    _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Link);
    return PicturePtr(_result, false);
}

//
// dispinterface Drawing wrapper method implementations
//

#pragma implementation_key(10973)
inline Excel::_ApplicationPtr Excel::Drawing::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(10974)
inline enum XlCreator Excel::Drawing::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10975)
inline IDispatchPtr Excel::Drawing::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10976)
inline Excel::RangePtr Excel::Drawing::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(10977)
inline _variant_t Excel::Drawing::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10978)
inline _variant_t Excel::Drawing::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10979)
inline _variant_t Excel::Drawing::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(10980)
inline _variant_t Excel::Drawing::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10981)
inline _variant_t Excel::Drawing::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10982)
inline IDispatchPtr Excel::Drawing::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10983)
inline VARIANT_BOOL Excel::Drawing::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10984)
inline void Excel::Drawing::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10985)
inline double Excel::Drawing::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10986)
inline void Excel::Drawing::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10987)
inline long Excel::Drawing::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10988)
inline double Excel::Drawing::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10989)
inline void Excel::Drawing::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(10990)
inline VARIANT_BOOL Excel::Drawing::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10991)
inline void Excel::Drawing::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(10992)
inline _bstr_t Excel::Drawing::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10993)
inline void Excel::Drawing::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10994)
inline _bstr_t Excel::Drawing::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(10995)
inline void Excel::Drawing::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(10996)
inline _variant_t Excel::Drawing::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(10997)
inline void Excel::Drawing::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(10998)
inline VARIANT_BOOL Excel::Drawing::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(10999)
inline void Excel::Drawing::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11000)
inline _variant_t Excel::Drawing::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(11001)
inline _variant_t Excel::Drawing::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11002)
inline double Excel::Drawing::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11003)
inline void Excel::Drawing::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11004)
inline Excel::RangePtr Excel::Drawing::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(11005)
inline VARIANT_BOOL Excel::Drawing::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11006)
inline void Excel::Drawing::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11007)
inline double Excel::Drawing::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11008)
inline void Excel::Drawing::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11009)
inline long Excel::Drawing::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11010)
inline Excel::ShapeRangePtr Excel::Drawing::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(11011)
inline VARIANT_BOOL Excel::Drawing::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11012)
inline void Excel::Drawing::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11013)
inline _variant_t Excel::Drawing::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11014)
inline void Excel::Drawing::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11015)
inline VARIANT_BOOL Excel::Drawing::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11016)
inline void Excel::Drawing::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11017)
inline _bstr_t Excel::Drawing::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11018)
inline void Excel::Drawing::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11019)
inline Excel::CharactersPtr Excel::Drawing::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(11020)
inline _variant_t Excel::Drawing::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(11021)
inline Excel::FontPtr Excel::Drawing::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(11022)
inline _bstr_t Excel::Drawing::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11023)
inline void Excel::Drawing::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11024)
inline _variant_t Excel::Drawing::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11025)
inline void Excel::Drawing::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11026)
inline VARIANT_BOOL Excel::Drawing::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11027)
inline void Excel::Drawing::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11028)
inline _variant_t Excel::Drawing::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11029)
inline void Excel::Drawing::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11030)
inline _bstr_t Excel::Drawing::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11031)
inline void Excel::Drawing::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11032)
inline _variant_t Excel::Drawing::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11033)
inline void Excel::Drawing::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11034)
inline long Excel::Drawing::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11035)
inline void Excel::Drawing::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11036)
inline Excel::BorderPtr Excel::Drawing::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(11037)
inline Excel::InteriorPtr Excel::Drawing::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(11038)
inline VARIANT_BOOL Excel::Drawing::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11039)
inline void Excel::Drawing::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11040)
inline _variant_t Excel::Drawing::AddVertex ( double Left, double Top ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x259, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0005\x0005", Left, Top);
    return _variant_t(_result, false);
}

#pragma implementation_key(11041)
inline _variant_t Excel::Drawing::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x000b\x080c\x080c", Vertex, Insert, &Left, &Top);
    return _variant_t(_result, false);
}

#pragma implementation_key(11042)
inline _variant_t Excel::Drawing::GetVertices ( const _variant_t & Index1, const _variant_t & Index2 ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x26d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &Index1, &Index2);
    return _variant_t(_result, false);
}

//
// dispinterface Drawings wrapper method implementations
//

#pragma implementation_key(11043)
inline Excel::_ApplicationPtr Excel::Drawings::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11044)
inline enum XlCreator Excel::Drawings::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11045)
inline IDispatchPtr Excel::Drawings::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11046)
inline _variant_t Excel::Drawings::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11047)
inline _variant_t Excel::Drawings::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11048)
inline _variant_t Excel::Drawings::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(11049)
inline _variant_t Excel::Drawings::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11050)
inline _variant_t Excel::Drawings::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11051)
inline IDispatchPtr Excel::Drawings::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11052)
inline VARIANT_BOOL Excel::Drawings::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11053)
inline void Excel::Drawings::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11054)
inline double Excel::Drawings::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11055)
inline void Excel::Drawings::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11056)
inline double Excel::Drawings::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11057)
inline void Excel::Drawings::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11058)
inline VARIANT_BOOL Excel::Drawings::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11059)
inline void Excel::Drawings::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11060)
inline _bstr_t Excel::Drawings::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11061)
inline void Excel::Drawings::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11062)
inline _variant_t Excel::Drawings::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11063)
inline void Excel::Drawings::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11064)
inline VARIANT_BOOL Excel::Drawings::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11065)
inline void Excel::Drawings::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11066)
inline _variant_t Excel::Drawings::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(11067)
inline _variant_t Excel::Drawings::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11068)
inline double Excel::Drawings::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11069)
inline void Excel::Drawings::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11070)
inline VARIANT_BOOL Excel::Drawings::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11071)
inline void Excel::Drawings::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11072)
inline double Excel::Drawings::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11073)
inline void Excel::Drawings::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11074)
inline long Excel::Drawings::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11075)
inline Excel::ShapeRangePtr Excel::Drawings::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(11076)
inline VARIANT_BOOL Excel::Drawings::GetAddIndent ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11077)
inline void Excel::Drawings::PutAddIndent ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11078)
inline _variant_t Excel::Drawings::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11079)
inline void Excel::Drawings::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11080)
inline VARIANT_BOOL Excel::Drawings::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11081)
inline void Excel::Drawings::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11082)
inline _bstr_t Excel::Drawings::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11083)
inline void Excel::Drawings::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11084)
inline Excel::CharactersPtr Excel::Drawings::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(11085)
inline _variant_t Excel::Drawings::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
    return _variant_t(_result, false);
}

#pragma implementation_key(11086)
inline Excel::FontPtr Excel::Drawings::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(11087)
inline _bstr_t Excel::Drawings::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11088)
inline void Excel::Drawings::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11089)
inline _variant_t Excel::Drawings::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11090)
inline void Excel::Drawings::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11091)
inline VARIANT_BOOL Excel::Drawings::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11092)
inline void Excel::Drawings::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11093)
inline _variant_t Excel::Drawings::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11094)
inline void Excel::Drawings::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11095)
inline _bstr_t Excel::Drawings::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11096)
inline void Excel::Drawings::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11097)
inline _variant_t Excel::Drawings::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11098)
inline void Excel::Drawings::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11099)
inline long Excel::Drawings::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11100)
inline void Excel::Drawings::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11101)
inline Excel::BorderPtr Excel::Drawings::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(11102)
inline Excel::InteriorPtr Excel::Drawings::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(11103)
inline VARIANT_BOOL Excel::Drawings::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11104)
inline void Excel::Drawings::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11105)
inline _variant_t Excel::Drawings::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25c, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x000b\x080c\x080c", Vertex, Insert, &Left, &Top);
    return _variant_t(_result, false);
}

#pragma implementation_key(11106)
inline Excel::DrawingPtr Excel::Drawings::Add ( double X1, double Y1, double X2, double Y2, VARIANT_BOOL Closed ) {
    struct Drawing * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x000b", X1, Y1, X2, Y2, Closed);
    return DrawingPtr(_result, false);
}

#pragma implementation_key(11107)
inline long Excel::Drawings::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11108)
inline Excel::GroupObjectPtr Excel::Drawings::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(11109)
inline IDispatchPtr Excel::Drawings::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11110)
inline IUnknownPtr Excel::Drawings::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface RoutingSlip wrapper method implementations
//

#pragma implementation_key(11111)
inline Excel::_ApplicationPtr Excel::RoutingSlip::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11112)
inline enum XlCreator Excel::RoutingSlip::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11113)
inline IDispatchPtr Excel::RoutingSlip::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11114)
inline enum XlRoutingSlipDelivery Excel::RoutingSlip::GetDelivery ( ) {
    enum XlRoutingSlipDelivery _result;
    _com_dispatch_method(this, 0x3bb, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11115)
inline void Excel::RoutingSlip::PutDelivery ( enum XlRoutingSlipDelivery _arg1 ) {
    _com_dispatch_method(this, 0x3bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11116)
inline _variant_t Excel::RoutingSlip::GetMessage ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3ba, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11117)
inline void Excel::RoutingSlip::PutMessage ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11118)
inline _variant_t Excel::RoutingSlip::GetRecipients ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3b8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(11119)
inline void Excel::RoutingSlip::PutRecipients ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x3b8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(11120)
inline _variant_t Excel::RoutingSlip::Reset ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x22b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11121)
inline VARIANT_BOOL Excel::RoutingSlip::GetReturnWhenDone ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3bc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11122)
inline void Excel::RoutingSlip::PutReturnWhenDone ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11123)
inline enum XlRoutingSlipStatus Excel::RoutingSlip::GetStatus ( ) {
    enum XlRoutingSlipStatus _result;
    _com_dispatch_method(this, 0x3be, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11124)
inline _variant_t Excel::RoutingSlip::GetSubject ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3b9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11125)
inline void Excel::RoutingSlip::PutSubject ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11126)
inline VARIANT_BOOL Excel::RoutingSlip::GetTrackStatus ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3bd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11127)
inline void Excel::RoutingSlip::PutTrackStatus ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3bd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Outline wrapper method implementations
//

#pragma implementation_key(11128)
inline Excel::_ApplicationPtr Excel::Outline::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11129)
inline enum XlCreator Excel::Outline::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11130)
inline IDispatchPtr Excel::Outline::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11131)
inline VARIANT_BOOL Excel::Outline::GetAutomaticStyles ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3bf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11132)
inline void Excel::Outline::PutAutomaticStyles ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11133)
inline _variant_t Excel::Outline::ShowLevels ( const _variant_t & RowLevels, const _variant_t & ColumnLevels ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3c0, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c\x080c", &RowLevels, &ColumnLevels);
    return _variant_t(_result, false);
}

#pragma implementation_key(11134)
inline enum XlSummaryColumn Excel::Outline::GetSummaryColumn ( ) {
    enum XlSummaryColumn _result;
    _com_dispatch_method(this, 0x3c1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11135)
inline void Excel::Outline::PutSummaryColumn ( enum XlSummaryColumn _arg1 ) {
    _com_dispatch_method(this, 0x3c1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11136)
inline enum XlSummaryRow Excel::Outline::GetSummaryRow ( ) {
    enum XlSummaryRow _result;
    _com_dispatch_method(this, 0x386, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11137)
inline void Excel::Outline::PutSummaryRow ( enum XlSummaryRow _arg1 ) {
    _com_dispatch_method(this, 0x386, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Module wrapper method implementations
//

#pragma implementation_key(11138)
inline Excel::_ApplicationPtr Excel::Module::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11139)
inline enum XlCreator Excel::Module::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11140)
inline IDispatchPtr Excel::Module::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11141)
inline HRESULT Excel::Module::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11142)
inline HRESULT Excel::Module::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(11143)
inline HRESULT Excel::Module::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11144)
inline _bstr_t Excel::Module::GetCodeName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x55d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11145)
inline _bstr_t Excel::Module::Get_CodeName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11146)
inline void Excel::Module::Put_CodeName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11147)
inline long Excel::Module::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11148)
inline HRESULT Excel::Module::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(11149)
inline _bstr_t Excel::Module::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11150)
inline void Excel::Module::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11151)
inline IDispatchPtr Excel::Module::GetNext ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11152)
inline _bstr_t Excel::Module::GetOnDoubleClick ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11153)
inline void Excel::Module::PutOnDoubleClick ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11154)
inline _bstr_t Excel::Module::GetOnSheetActivate ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x407, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11155)
inline void Excel::Module::PutOnSheetActivate ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11156)
inline _bstr_t Excel::Module::GetOnSheetDeactivate ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11157)
inline void Excel::Module::PutOnSheetDeactivate ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11158)
inline Excel::PageSetupPtr Excel::Module::GetPageSetup ( ) {
    struct PageSetup * _result;
    _com_dispatch_method(this, 0x3e6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(11159)
inline IDispatchPtr Excel::Module::GetPrevious ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11160)
inline HRESULT Excel::Module::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

#pragma implementation_key(11161)
inline HRESULT Excel::Module::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly ) {
    return _com_dispatch_method(this, 0x11a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c", &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
}

#pragma implementation_key(11162)
inline VARIANT_BOOL Excel::Module::GetProtectContents ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x124, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11163)
inline VARIANT_BOOL Excel::Module::GetProtectionMode ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x487, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11164)
inline HRESULT Excel::Module::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout ) {
    return _com_dispatch_method(this, 0x11c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", (BSTR)Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout);
}

#pragma implementation_key(11165)
inline HRESULT Excel::Module::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

#pragma implementation_key(11166)
inline HRESULT Excel::Module::Unprotect ( const _variant_t & Password ) {
    return _com_dispatch_method(this, 0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Password);
}

#pragma implementation_key(11167)
inline enum XlSheetVisibility Excel::Module::GetVisible ( ) {
    enum XlSheetVisibility _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11168)
inline void Excel::Module::PutVisible ( enum XlSheetVisibility _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11169)
inline Excel::ShapesPtr Excel::Module::GetShapes ( ) {
    struct Shapes * _result;
    _com_dispatch_method(this, 0x561, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapesPtr(_result, false);
}

#pragma implementation_key(11170)
inline _variant_t Excel::Module::InsertFile ( const _variant_t & Filename, const _variant_t & Merge ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x248, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c", &Filename, &Merge);
    return _variant_t(_result, false);
}

#pragma implementation_key(11171)
inline HRESULT Excel::Module::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout ) {
    return _com_dispatch_method(this, 0x785, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", (BSTR)Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout);
}

#pragma implementation_key(11172)
inline HRESULT Excel::Module::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly ) {
    return _com_dispatch_method(this, 0x7ed, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c", &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
}

//
// dispinterface Modules wrapper method implementations
//

#pragma implementation_key(11173)
inline Excel::_ApplicationPtr Excel::Modules::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11174)
inline enum XlCreator Excel::Modules::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11175)
inline IDispatchPtr Excel::Modules::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11176)
inline Excel::ModulePtr Excel::Modules::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct Module * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c", &Before, &After, &Count);
    return ModulePtr(_result, false);
}

#pragma implementation_key(11177)
inline HRESULT Excel::Modules::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(11178)
inline long Excel::Modules::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11179)
inline HRESULT Excel::Modules::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11180)
inline IDispatchPtr Excel::Modules::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11181)
inline HRESULT Excel::Modules::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(11182)
inline IUnknownPtr Excel::Modules::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(11183)
inline HRESULT Excel::Modules::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

#pragma implementation_key(11184)
inline HRESULT Excel::Modules::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

#pragma implementation_key(11185)
inline Excel::HPageBreaksPtr Excel::Modules::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    _com_dispatch_method(this, 0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(11186)
inline Excel::VPageBreaksPtr Excel::Modules::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    _com_dispatch_method(this, 0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(11187)
inline _variant_t Excel::Modules::GetVisible ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11188)
inline void Excel::Modules::PutVisible ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11189)
inline IDispatchPtr Excel::Modules::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11190)
inline HRESULT Excel::Modules::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    return _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
}

//
// dispinterface DialogSheet wrapper method implementations
//

#pragma implementation_key(11191)
inline Excel::_ApplicationPtr Excel::DialogSheet::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11192)
inline enum XlCreator Excel::DialogSheet::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11193)
inline IDispatchPtr Excel::DialogSheet::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11194)
inline HRESULT Excel::DialogSheet::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11195)
inline HRESULT Excel::DialogSheet::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(11196)
inline HRESULT Excel::DialogSheet::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11197)
inline _bstr_t Excel::DialogSheet::GetCodeName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x55d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11198)
inline _bstr_t Excel::DialogSheet::Get_CodeName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11199)
inline void Excel::DialogSheet::Put_CodeName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11200)
inline long Excel::DialogSheet::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11201)
inline HRESULT Excel::DialogSheet::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(11202)
inline _bstr_t Excel::DialogSheet::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11203)
inline void Excel::DialogSheet::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11204)
inline IDispatchPtr Excel::DialogSheet::GetNext ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11205)
inline _bstr_t Excel::DialogSheet::GetOnDoubleClick ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x274, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11206)
inline void Excel::DialogSheet::PutOnDoubleClick ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x274, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11207)
inline _bstr_t Excel::DialogSheet::GetOnSheetActivate ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x407, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11208)
inline void Excel::DialogSheet::PutOnSheetActivate ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11209)
inline _bstr_t Excel::DialogSheet::GetOnSheetDeactivate ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x439, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11210)
inline void Excel::DialogSheet::PutOnSheetDeactivate ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x439, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11211)
inline Excel::PageSetupPtr Excel::DialogSheet::GetPageSetup ( ) {
    struct PageSetup * _result;
    _com_dispatch_method(this, 0x3e6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(11212)
inline IDispatchPtr Excel::DialogSheet::GetPrevious ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11213)
inline HRESULT Excel::DialogSheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

#pragma implementation_key(11214)
inline HRESULT Excel::DialogSheet::PrintPreview ( const _variant_t & EnableChanges ) {
    return _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &EnableChanges);
}

#pragma implementation_key(11215)
inline HRESULT Excel::DialogSheet::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly ) {
    return _com_dispatch_method(this, 0x11a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c", &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly);
}

#pragma implementation_key(11216)
inline VARIANT_BOOL Excel::DialogSheet::GetProtectContents ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x124, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11217)
inline VARIANT_BOOL Excel::DialogSheet::GetProtectDrawingObjects ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x125, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11218)
inline VARIANT_BOOL Excel::DialogSheet::GetProtectionMode ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x487, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11219)
inline VARIANT_BOOL Excel::DialogSheet::GetProtectScenarios ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x126, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11220)
inline HRESULT Excel::DialogSheet::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout ) {
    return _com_dispatch_method(this, 0x11c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", (BSTR)Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout);
}

#pragma implementation_key(11221)
inline HRESULT Excel::DialogSheet::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

#pragma implementation_key(11222)
inline HRESULT Excel::DialogSheet::Unprotect ( const _variant_t & Password ) {
    return _com_dispatch_method(this, 0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Password);
}

#pragma implementation_key(11223)
inline enum XlSheetVisibility Excel::DialogSheet::GetVisible ( ) {
    enum XlSheetVisibility _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11224)
inline void Excel::DialogSheet::PutVisible ( enum XlSheetVisibility _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11225)
inline Excel::ShapesPtr Excel::DialogSheet::GetShapes ( ) {
    struct Shapes * _result;
    _com_dispatch_method(this, 0x561, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapesPtr(_result, false);
}

#pragma implementation_key(11226)
inline IDispatchPtr Excel::DialogSheet::Arcs ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2f8, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11227)
inline IDispatchPtr Excel::DialogSheet::Buttons ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x22d, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11228)
inline VARIANT_BOOL Excel::DialogSheet::GetEnableCalculation ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x590, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11229)
inline void Excel::DialogSheet::PutEnableCalculation ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x590, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11230)
inline IDispatchPtr Excel::DialogSheet::ChartObjects ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x424, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11231)
inline IDispatchPtr Excel::DialogSheet::CheckBoxes ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x338, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11232)
inline HRESULT Excel::DialogSheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang ) {
    return _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang);
}

#pragma implementation_key(11233)
inline VARIANT_BOOL Excel::DialogSheet::GetDisplayAutomaticPageBreaks ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x283, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11234)
inline void Excel::DialogSheet::PutDisplayAutomaticPageBreaks ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x283, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11235)
inline IDispatchPtr Excel::DialogSheet::Drawings ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x304, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11236)
inline IDispatchPtr Excel::DialogSheet::DrawingObjects ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x58, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11237)
inline IDispatchPtr Excel::DialogSheet::DropDowns ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x344, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11238)
inline VARIANT_BOOL Excel::DialogSheet::GetEnableAutoFilter ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x484, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11239)
inline void Excel::DialogSheet::PutEnableAutoFilter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x484, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11240)
inline enum XlEnableSelection Excel::DialogSheet::GetEnableSelection ( ) {
    enum XlEnableSelection _result;
    _com_dispatch_method(this, 0x591, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11241)
inline void Excel::DialogSheet::PutEnableSelection ( enum XlEnableSelection _arg1 ) {
    _com_dispatch_method(this, 0x591, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11242)
inline VARIANT_BOOL Excel::DialogSheet::GetEnableOutlining ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x485, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11243)
inline void Excel::DialogSheet::PutEnableOutlining ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x485, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11244)
inline VARIANT_BOOL Excel::DialogSheet::GetEnablePivotTable ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x486, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11245)
inline void Excel::DialogSheet::PutEnablePivotTable ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x486, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11246)
inline _variant_t Excel::DialogSheet::Evaluate ( const _variant_t & Name ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Name);
    return _variant_t(_result, false);
}

#pragma implementation_key(11247)
inline _variant_t Excel::DialogSheet::_Evaluate ( const _variant_t & Name ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xfffffffb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c", &Name);
    return _variant_t(_result, false);
}

#pragma implementation_key(11248)
inline HRESULT Excel::DialogSheet::ResetAllPageBreaks ( ) {
    return _com_dispatch_method(this, 0x592, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11249)
inline IDispatchPtr Excel::DialogSheet::GroupBoxes ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x342, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11250)
inline IDispatchPtr Excel::DialogSheet::GroupObjects ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x459, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11251)
inline IDispatchPtr Excel::DialogSheet::Labels ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x349, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11252)
inline IDispatchPtr Excel::DialogSheet::Lines ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2ff, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11253)
inline IDispatchPtr Excel::DialogSheet::ListBoxes ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x340, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11254)
inline Excel::NamesPtr Excel::DialogSheet::GetNames ( ) {
    struct Names * _result;
    _com_dispatch_method(this, 0x1ba, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return NamesPtr(_result, false);
}

#pragma implementation_key(11255)
inline IDispatchPtr Excel::DialogSheet::OLEObjects ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x31f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11256)
inline IDispatchPtr Excel::DialogSheet::OptionButtons ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x33a, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11257)
inline IDispatchPtr Excel::DialogSheet::Ovals ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x321, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11258)
inline HRESULT Excel::DialogSheet::Paste ( const _variant_t & Destination, const _variant_t & Link ) {
    return _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Destination, &Link);
}

#pragma implementation_key(11259)
inline HRESULT Excel::DialogSheet::_PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel ) {
    return _com_dispatch_method(this, 0x403, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c", &Format, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel);
}

#pragma implementation_key(11260)
inline IDispatchPtr Excel::DialogSheet::Pictures ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x303, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11261)
inline IDispatchPtr Excel::DialogSheet::Rectangles ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x306, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11262)
inline _bstr_t Excel::DialogSheet::GetScrollArea ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x599, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11263)
inline void Excel::DialogSheet::PutScrollArea ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x599, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11264)
inline IDispatchPtr Excel::DialogSheet::ScrollBars ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x33e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11265)
inline IDispatchPtr Excel::DialogSheet::Spinners ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x346, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11266)
inline IDispatchPtr Excel::DialogSheet::TextBoxes ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x309, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11267)
inline Excel::HPageBreaksPtr Excel::DialogSheet::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    _com_dispatch_method(this, 0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(11268)
inline Excel::VPageBreaksPtr Excel::DialogSheet::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    _com_dispatch_method(this, 0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(11269)
inline Excel::QueryTablesPtr Excel::DialogSheet::GetQueryTables ( ) {
    struct QueryTables * _result;
    _com_dispatch_method(this, 0x59a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return QueryTablesPtr(_result, false);
}

#pragma implementation_key(11270)
inline VARIANT_BOOL Excel::DialogSheet::GetDisplayPageBreaks ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x59b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11271)
inline void Excel::DialogSheet::PutDisplayPageBreaks ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x59b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11272)
inline Excel::CommentsPtr Excel::DialogSheet::GetComments ( ) {
    struct Comments * _result;
    _com_dispatch_method(this, 0x23f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CommentsPtr(_result, false);
}

#pragma implementation_key(11273)
inline Excel::HyperlinksPtr Excel::DialogSheet::GetHyperlinks ( ) {
    struct Hyperlinks * _result;
    _com_dispatch_method(this, 0x571, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(11274)
inline HRESULT Excel::DialogSheet::ClearCircles ( ) {
    return _com_dispatch_method(this, 0x59c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11275)
inline HRESULT Excel::DialogSheet::CircleInvalid ( ) {
    return _com_dispatch_method(this, 0x59d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11276)
inline long Excel::DialogSheet::Get_DisplayRightToLeft ( ) {
    long _result;
    _com_dispatch_method(this, 0x288, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11277)
inline void Excel::DialogSheet::Put_DisplayRightToLeft ( long _arg1 ) {
    _com_dispatch_method(this, 0x288, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11278)
inline Excel::AutoFilterPtr Excel::DialogSheet::GetAutoFilter ( ) {
    struct AutoFilter * _result;
    _com_dispatch_method(this, 0x319, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AutoFilterPtr(_result, false);
}

#pragma implementation_key(11279)
inline VARIANT_BOOL Excel::DialogSheet::GetDisplayRightToLeft ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x6ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11280)
inline void Excel::DialogSheet::PutDisplayRightToLeft ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x6ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11281)
inline Office::ScriptsPtr Excel::DialogSheet::GetScripts ( ) {
    struct Office::Scripts * _result;
    _com_dispatch_method(this, 0x718, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return Office::ScriptsPtr(_result, false);
}

#pragma implementation_key(11282)
inline HRESULT Excel::DialogSheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    return _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
}

#pragma implementation_key(11283)
inline HRESULT Excel::DialogSheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript ) {
    return _com_dispatch_method(this, 0x719, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c", &CustomDictionary, &IgnoreUppercase, &AlwaysSuggest, &SpellLang, &IgnoreFinalYaa, &SpellScript);
}

#pragma implementation_key(11284)
inline Excel::TabPtr Excel::DialogSheet::GetTab ( ) {
    struct Tab * _result;
    _com_dispatch_method(this, 0x411, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TabPtr(_result, false);
}

#pragma implementation_key(11285)
inline Office::IMsoEnvelopeVBPtr Excel::DialogSheet::GetMailEnvelope ( ) {
    struct Office::IMsoEnvelopeVB * _result;
    _com_dispatch_method(this, 0x7e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return Office::IMsoEnvelopeVBPtr(_result, false);
}

#pragma implementation_key(11286)
inline HRESULT Excel::DialogSheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local ) {
    return _com_dispatch_method(this, 0x785, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", (BSTR)Filename, &FileFormat, &Password, &WriteResPassword, &ReadOnlyRecommended, &CreateBackup, &AddToMru, &TextCodepage, &TextVisualLayout, &Local);
}

#pragma implementation_key(11287)
inline Excel::CustomPropertiesPtr Excel::DialogSheet::GetCustomProperties ( ) {
    struct CustomProperties * _result;
    _com_dispatch_method(this, 0x7ee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CustomPropertiesPtr(_result, false);
}

#pragma implementation_key(11288)
inline Excel::SmartTagsPtr Excel::DialogSheet::GetSmartTags ( ) {
    struct SmartTags * _result;
    _com_dispatch_method(this, 0x7e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return SmartTagsPtr(_result, false);
}

#pragma implementation_key(11289)
inline Excel::ProtectionPtr Excel::DialogSheet::GetProtection ( ) {
    struct Protection * _result;
    _com_dispatch_method(this, 0xb0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ProtectionPtr(_result, false);
}

#pragma implementation_key(11290)
inline HRESULT Excel::DialogSheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & NoHTMLFormatting ) {
    return _com_dispatch_method(this, 0x788, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Format, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel, &NoHTMLFormatting);
}

#pragma implementation_key(11291)
inline HRESULT Excel::DialogSheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, const _variant_t & AllowFormattingCells, const _variant_t & AllowFormattingColumns, const _variant_t & AllowFormattingRows, const _variant_t & AllowInsertingColumns, const _variant_t & AllowInsertingRows, const _variant_t & AllowInsertingHyperlinks, const _variant_t & AllowDeletingColumns, const _variant_t & AllowDeletingRows, const _variant_t & AllowSorting, const _variant_t & AllowFiltering, const _variant_t & AllowUsingPivotTables ) {
    return _com_dispatch_method(this, 0x7ed, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Password, &DrawingObjects, &Contents, &Scenarios, &UserInterfaceOnly, &AllowFormattingCells, &AllowFormattingColumns, &AllowFormattingRows, &AllowInsertingColumns, &AllowInsertingRows, &AllowInsertingHyperlinks, &AllowDeletingColumns, &AllowDeletingRows, &AllowSorting, &AllowFiltering, &AllowUsingPivotTables);
}

#pragma implementation_key(11292)
inline _variant_t Excel::DialogSheet::GetDefaultButton ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11293)
inline void Excel::DialogSheet::PutDefaultButton ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x359, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11294)
inline Excel::DialogFramePtr Excel::DialogSheet::GetDialogFrame ( ) {
    struct DialogFrame * _result;
    _com_dispatch_method(this, 0x347, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DialogFramePtr(_result, false);
}

#pragma implementation_key(11295)
inline IDispatchPtr Excel::DialogSheet::EditBoxes ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x33c, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11296)
inline _variant_t Excel::DialogSheet::GetFocus ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x32e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11297)
inline void Excel::DialogSheet::PutFocus ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x32e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11298)
inline VARIANT_BOOL Excel::DialogSheet::Hide ( const _variant_t & Cancel ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x32d, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x080c", &Cancel);
    return _result;
}

#pragma implementation_key(11299)
inline VARIANT_BOOL Excel::DialogSheet::Show ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x1f0, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface DialogSheets wrapper method implementations
//

#pragma implementation_key(11300)
inline Excel::_ApplicationPtr Excel::DialogSheets::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11301)
inline enum XlCreator Excel::DialogSheets::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11302)
inline IDispatchPtr Excel::DialogSheets::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11303)
inline Excel::DialogSheetPtr Excel::DialogSheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count ) {
    struct DialogSheet * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c", &Before, &After, &Count);
    return DialogSheetPtr(_result, false);
}

#pragma implementation_key(11304)
inline HRESULT Excel::DialogSheets::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(11305)
inline long Excel::DialogSheets::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11306)
inline HRESULT Excel::DialogSheets::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11307)
inline IDispatchPtr Excel::DialogSheets::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11308)
inline HRESULT Excel::DialogSheets::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(11309)
inline IUnknownPtr Excel::DialogSheets::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(11310)
inline HRESULT Excel::DialogSheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

#pragma implementation_key(11311)
inline HRESULT Excel::DialogSheets::PrintPreview ( const _variant_t & EnableChanges ) {
    return _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &EnableChanges);
}

#pragma implementation_key(11312)
inline HRESULT Excel::DialogSheets::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

#pragma implementation_key(11313)
inline Excel::HPageBreaksPtr Excel::DialogSheets::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    _com_dispatch_method(this, 0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(11314)
inline Excel::VPageBreaksPtr Excel::DialogSheets::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    _com_dispatch_method(this, 0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(11315)
inline _variant_t Excel::DialogSheets::GetVisible ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11316)
inline void Excel::DialogSheets::PutVisible ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11317)
inline IDispatchPtr Excel::DialogSheets::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11318)
inline HRESULT Excel::DialogSheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    return _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
}

//
// dispinterface Worksheets wrapper method implementations
//

#pragma implementation_key(11319)
inline Excel::_ApplicationPtr Excel::Worksheets::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11320)
inline enum XlCreator Excel::Worksheets::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11321)
inline IDispatchPtr Excel::Worksheets::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11322)
inline IDispatchPtr Excel::Worksheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c", &Before, &After, &Count, &Type);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11323)
inline HRESULT Excel::Worksheets::Copy ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(11324)
inline long Excel::Worksheets::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11325)
inline HRESULT Excel::Worksheets::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11326)
inline HRESULT Excel::Worksheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type ) {
    return _com_dispatch_method(this, 0x1d5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", Range, Type);
}

#pragma implementation_key(11327)
inline IDispatchPtr Excel::Worksheets::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11328)
inline HRESULT Excel::Worksheets::Move ( const _variant_t & Before, const _variant_t & After ) {
    return _com_dispatch_method(this, 0x27d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Before, &After);
}

#pragma implementation_key(11329)
inline IUnknownPtr Excel::Worksheets::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(11330)
inline HRESULT Excel::Worksheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate);
}

#pragma implementation_key(11331)
inline HRESULT Excel::Worksheets::PrintPreview ( const _variant_t & EnableChanges ) {
    return _com_dispatch_method(this, 0x119, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &EnableChanges);
}

#pragma implementation_key(11332)
inline HRESULT Excel::Worksheets::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

#pragma implementation_key(11333)
inline Excel::HPageBreaksPtr Excel::Worksheets::GetHPageBreaks ( ) {
    struct HPageBreaks * _result;
    _com_dispatch_method(this, 0x58a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HPageBreaksPtr(_result, false);
}

#pragma implementation_key(11334)
inline Excel::VPageBreaksPtr Excel::Worksheets::GetVPageBreaks ( ) {
    struct VPageBreaks * _result;
    _com_dispatch_method(this, 0x58b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return VPageBreaksPtr(_result, false);
}

#pragma implementation_key(11335)
inline _variant_t Excel::Worksheets::GetVisible ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11336)
inline void Excel::Worksheets::PutVisible ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11337)
inline IDispatchPtr Excel::Worksheets::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11338)
inline HRESULT Excel::Worksheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName ) {
    return _com_dispatch_method(this, 0x6ec, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &From, &To, &Copies, &Preview, &ActivePrinter, &PrintToFile, &Collate, &PrToFileName);
}

//
// dispinterface PageSetup wrapper method implementations
//

#pragma implementation_key(11339)
inline Excel::_ApplicationPtr Excel::PageSetup::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11340)
inline enum XlCreator Excel::PageSetup::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11341)
inline IDispatchPtr Excel::PageSetup::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11342)
inline VARIANT_BOOL Excel::PageSetup::GetBlackAndWhite ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3f1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11343)
inline void Excel::PageSetup::PutBlackAndWhite ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11344)
inline double Excel::PageSetup::GetBottomMargin ( ) {
    double _result;
    _com_dispatch_method(this, 0x3ea, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11345)
inline void Excel::PageSetup::PutBottomMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11346)
inline _bstr_t Excel::PageSetup::GetCenterFooter ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3f2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11347)
inline void Excel::PageSetup::PutCenterFooter ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11348)
inline _bstr_t Excel::PageSetup::GetCenterHeader ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11349)
inline void Excel::PageSetup::PutCenterHeader ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3f3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11350)
inline VARIANT_BOOL Excel::PageSetup::GetCenterHorizontally ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3ed, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11351)
inline void Excel::PageSetup::PutCenterHorizontally ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11352)
inline VARIANT_BOOL Excel::PageSetup::GetCenterVertically ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11353)
inline void Excel::PageSetup::PutCenterVertically ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11354)
inline enum XlObjectSize Excel::PageSetup::GetChartSize ( ) {
    enum XlObjectSize _result;
    _com_dispatch_method(this, 0x3f4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11355)
inline void Excel::PageSetup::PutChartSize ( enum XlObjectSize _arg1 ) {
    _com_dispatch_method(this, 0x3f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11356)
inline VARIANT_BOOL Excel::PageSetup::GetDraft ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3fc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11357)
inline void Excel::PageSetup::PutDraft ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11358)
inline long Excel::PageSetup::GetFirstPageNumber ( ) {
    long _result;
    _com_dispatch_method(this, 0x3f0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11359)
inline void Excel::PageSetup::PutFirstPageNumber ( long _arg1 ) {
    _com_dispatch_method(this, 0x3f0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11360)
inline _variant_t Excel::PageSetup::GetFitToPagesTall ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11361)
inline void Excel::PageSetup::PutFitToPagesTall ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11362)
inline _variant_t Excel::PageSetup::GetFitToPagesWide ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3f6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11363)
inline void Excel::PageSetup::PutFitToPagesWide ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11364)
inline double Excel::PageSetup::GetFooterMargin ( ) {
    double _result;
    _com_dispatch_method(this, 0x3f7, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11365)
inline void Excel::PageSetup::PutFooterMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3f7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11366)
inline double Excel::PageSetup::GetHeaderMargin ( ) {
    double _result;
    _com_dispatch_method(this, 0x3f8, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11367)
inline void Excel::PageSetup::PutHeaderMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11368)
inline _bstr_t Excel::PageSetup::GetLeftFooter ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3f9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11369)
inline void Excel::PageSetup::PutLeftFooter ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11370)
inline _bstr_t Excel::PageSetup::GetLeftHeader ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3fa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11371)
inline void Excel::PageSetup::PutLeftHeader ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11372)
inline double Excel::PageSetup::GetLeftMargin ( ) {
    double _result;
    _com_dispatch_method(this, 0x3e7, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11373)
inline void Excel::PageSetup::PutLeftMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11374)
inline enum XlOrder Excel::PageSetup::GetOrder ( ) {
    enum XlOrder _result;
    _com_dispatch_method(this, 0xc0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11375)
inline void Excel::PageSetup::PutOrder ( enum XlOrder _arg1 ) {
    _com_dispatch_method(this, 0xc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11376)
inline enum XlPageOrientation Excel::PageSetup::GetOrientation ( ) {
    enum XlPageOrientation _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11377)
inline void Excel::PageSetup::PutOrientation ( enum XlPageOrientation _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11378)
inline enum XlPaperSize Excel::PageSetup::GetPaperSize ( ) {
    enum XlPaperSize _result;
    _com_dispatch_method(this, 0x3ef, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11379)
inline void Excel::PageSetup::PutPaperSize ( enum XlPaperSize _arg1 ) {
    _com_dispatch_method(this, 0x3ef, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11380)
inline _bstr_t Excel::PageSetup::GetPrintArea ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3fb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11381)
inline void Excel::PageSetup::PutPrintArea ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11382)
inline VARIANT_BOOL Excel::PageSetup::GetPrintGridlines ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3ec, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11383)
inline void Excel::PageSetup::PutPrintGridlines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11384)
inline VARIANT_BOOL Excel::PageSetup::GetPrintHeadings ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3eb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11385)
inline void Excel::PageSetup::PutPrintHeadings ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11386)
inline VARIANT_BOOL Excel::PageSetup::GetPrintNotes ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3fd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11387)
inline void Excel::PageSetup::PutPrintNotes ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11388)
inline _variant_t Excel::PageSetup::GetPrintQuality ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3fe, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(11389)
inline void Excel::PageSetup::PutPrintQuality ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x3fe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(11390)
inline _bstr_t Excel::PageSetup::GetPrintTitleColumns ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3ff, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11391)
inline void Excel::PageSetup::PutPrintTitleColumns ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3ff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11392)
inline _bstr_t Excel::PageSetup::GetPrintTitleRows ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x400, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11393)
inline void Excel::PageSetup::PutPrintTitleRows ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x400, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11394)
inline _bstr_t Excel::PageSetup::GetRightFooter ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x401, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11395)
inline void Excel::PageSetup::PutRightFooter ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x401, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11396)
inline _bstr_t Excel::PageSetup::GetRightHeader ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x402, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11397)
inline void Excel::PageSetup::PutRightHeader ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x402, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11398)
inline double Excel::PageSetup::GetRightMargin ( ) {
    double _result;
    _com_dispatch_method(this, 0x3e8, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11399)
inline void Excel::PageSetup::PutRightMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11400)
inline double Excel::PageSetup::GetTopMargin ( ) {
    double _result;
    _com_dispatch_method(this, 0x3e9, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11401)
inline void Excel::PageSetup::PutTopMargin ( double _arg1 ) {
    _com_dispatch_method(this, 0x3e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11402)
inline _variant_t Excel::PageSetup::GetZoom ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x297, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11403)
inline void Excel::PageSetup::PutZoom ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x297, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11404)
inline enum XlPrintLocation Excel::PageSetup::GetPrintComments ( ) {
    enum XlPrintLocation _result;
    _com_dispatch_method(this, 0x5f4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11405)
inline void Excel::PageSetup::PutPrintComments ( enum XlPrintLocation _arg1 ) {
    _com_dispatch_method(this, 0x5f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11406)
inline enum XlPrintErrors Excel::PageSetup::GetPrintErrors ( ) {
    enum XlPrintErrors _result;
    _com_dispatch_method(this, 0x865, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11407)
inline void Excel::PageSetup::PutPrintErrors ( enum XlPrintErrors _arg1 ) {
    _com_dispatch_method(this, 0x865, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11408)
inline Excel::GraphicPtr Excel::PageSetup::GetCenterHeaderPicture ( ) {
    struct Graphic * _result;
    _com_dispatch_method(this, 0x866, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GraphicPtr(_result, false);
}

#pragma implementation_key(11409)
inline Excel::GraphicPtr Excel::PageSetup::GetCenterFooterPicture ( ) {
    struct Graphic * _result;
    _com_dispatch_method(this, 0x867, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GraphicPtr(_result, false);
}

#pragma implementation_key(11410)
inline Excel::GraphicPtr Excel::PageSetup::GetLeftHeaderPicture ( ) {
    struct Graphic * _result;
    _com_dispatch_method(this, 0x868, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GraphicPtr(_result, false);
}

#pragma implementation_key(11411)
inline Excel::GraphicPtr Excel::PageSetup::GetLeftFooterPicture ( ) {
    struct Graphic * _result;
    _com_dispatch_method(this, 0x869, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GraphicPtr(_result, false);
}

#pragma implementation_key(11412)
inline Excel::GraphicPtr Excel::PageSetup::GetRightHeaderPicture ( ) {
    struct Graphic * _result;
    _com_dispatch_method(this, 0x86a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GraphicPtr(_result, false);
}

#pragma implementation_key(11413)
inline Excel::GraphicPtr Excel::PageSetup::GetRightFooterPicture ( ) {
    struct Graphic * _result;
    _com_dispatch_method(this, 0x86b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GraphicPtr(_result, false);
}

//
// dispinterface Names wrapper method implementations
//

#pragma implementation_key(11414)
inline Excel::_ApplicationPtr Excel::Names::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11415)
inline enum XlCreator Excel::Names::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11416)
inline IDispatchPtr Excel::Names::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11417)
inline Excel::NamePtr Excel::Names::Add ( const _variant_t & Name, const _variant_t & RefersTo, const _variant_t & Visible, const _variant_t & MacroType, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & NameLocal, const _variant_t & RefersToLocal, const _variant_t & CategoryLocal, const _variant_t & RefersToR1C1, const _variant_t & RefersToR1C1Local ) {
    struct Name * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &Name, &RefersTo, &Visible, &MacroType, &ShortcutKey, &Category, &NameLocal, &RefersToLocal, &CategoryLocal, &RefersToR1C1, &RefersToR1C1Local);
    return NamePtr(_result, false);
}

#pragma implementation_key(11418)
inline Excel::NamePtr Excel::Names::Item ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo ) {
    struct Name * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c", &Index, &IndexLocal, &RefersTo);
    return NamePtr(_result, false);
}

#pragma implementation_key(11419)
inline Excel::NamePtr Excel::Names::_Default ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo ) {
    struct Name * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c", &Index, &IndexLocal, &RefersTo);
    return NamePtr(_result, false);
}

#pragma implementation_key(11420)
inline long Excel::Names::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11421)
inline IUnknownPtr Excel::Names::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Name wrapper method implementations
//

#pragma implementation_key(11422)
inline Excel::_ApplicationPtr Excel::Name::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11423)
inline enum XlCreator Excel::Name::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11424)
inline IDispatchPtr Excel::Name::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11425)
inline _bstr_t Excel::Name::Get_Default ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11426)
inline long Excel::Name::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11427)
inline _bstr_t Excel::Name::GetCategory ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3a6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11428)
inline void Excel::Name::PutCategory ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3a6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11429)
inline _bstr_t Excel::Name::GetCategoryLocal ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3a7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11430)
inline void Excel::Name::PutCategoryLocal ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3a7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11431)
inline HRESULT Excel::Name::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11432)
inline enum XlXLMMacroType Excel::Name::GetMacroType ( ) {
    enum XlXLMMacroType _result;
    _com_dispatch_method(this, 0x3a8, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11433)
inline void Excel::Name::PutMacroType ( enum XlXLMMacroType _arg1 ) {
    _com_dispatch_method(this, 0x3a8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11434)
inline _bstr_t Excel::Name::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11435)
inline void Excel::Name::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11436)
inline _variant_t Excel::Name::GetRefersTo ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3aa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11437)
inline void Excel::Name::PutRefersTo ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11438)
inline _bstr_t Excel::Name::GetShortcutKey ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x255, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11439)
inline void Excel::Name::PutShortcutKey ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x255, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11440)
inline _bstr_t Excel::Name::GetValue ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11441)
inline void Excel::Name::PutValue ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11442)
inline VARIANT_BOOL Excel::Name::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11443)
inline void Excel::Name::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11444)
inline _bstr_t Excel::Name::GetNameLocal ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3a9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11445)
inline void Excel::Name::PutNameLocal ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11446)
inline _variant_t Excel::Name::GetRefersToLocal ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3ab, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11447)
inline void Excel::Name::PutRefersToLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11448)
inline _variant_t Excel::Name::GetRefersToR1C1 ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3ac, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11449)
inline void Excel::Name::PutRefersToR1C1 ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11450)
inline _variant_t Excel::Name::GetRefersToR1C1Local ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3ad, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11451)
inline void Excel::Name::PutRefersToR1C1Local ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11452)
inline Excel::RangePtr Excel::Name::GetRefersToRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x488, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

//
// dispinterface ChartObject wrapper method implementations
//

#pragma implementation_key(11453)
inline Excel::_ApplicationPtr Excel::ChartObject::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11454)
inline enum XlCreator Excel::ChartObject::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11455)
inline IDispatchPtr Excel::ChartObject::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11456)
inline Excel::RangePtr Excel::ChartObject::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(11457)
inline _variant_t Excel::ChartObject::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11458)
inline _variant_t Excel::ChartObject::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11459)
inline _variant_t Excel::ChartObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(11460)
inline _variant_t Excel::ChartObject::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11461)
inline _variant_t Excel::ChartObject::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11462)
inline IDispatchPtr Excel::ChartObject::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11463)
inline VARIANT_BOOL Excel::ChartObject::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11464)
inline void Excel::ChartObject::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11465)
inline double Excel::ChartObject::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11466)
inline void Excel::ChartObject::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11467)
inline long Excel::ChartObject::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11468)
inline double Excel::ChartObject::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11469)
inline void Excel::ChartObject::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11470)
inline VARIANT_BOOL Excel::ChartObject::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11471)
inline void Excel::ChartObject::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11472)
inline _bstr_t Excel::ChartObject::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11473)
inline void Excel::ChartObject::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11474)
inline _bstr_t Excel::ChartObject::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11475)
inline void Excel::ChartObject::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11476)
inline _variant_t Excel::ChartObject::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11477)
inline void Excel::ChartObject::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11478)
inline VARIANT_BOOL Excel::ChartObject::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11479)
inline void Excel::ChartObject::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11480)
inline _variant_t Excel::ChartObject::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(11481)
inline _variant_t Excel::ChartObject::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11482)
inline double Excel::ChartObject::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11483)
inline void Excel::ChartObject::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11484)
inline Excel::RangePtr Excel::ChartObject::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(11485)
inline VARIANT_BOOL Excel::ChartObject::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11486)
inline void Excel::ChartObject::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11487)
inline double Excel::ChartObject::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11488)
inline void Excel::ChartObject::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11489)
inline long Excel::ChartObject::GetZOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11490)
inline Excel::ShapeRangePtr Excel::ChartObject::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(11491)
inline _variant_t Excel::ChartObject::Activate ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11492)
inline Excel::_ChartPtr Excel::ChartObject::GetChart ( ) {
    struct _Chart * _result;
    _com_dispatch_method(this, 0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ChartPtr(_result, false);
}

#pragma implementation_key(11493)
inline VARIANT_BOOL Excel::ChartObject::GetProtectChartObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5f9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11494)
inline void Excel::ChartObject::PutProtectChartObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11495)
inline VARIANT_BOOL Excel::ChartObject::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11496)
inline void Excel::ChartObject::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11497)
inline Excel::BorderPtr Excel::ChartObject::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(11498)
inline Excel::InteriorPtr Excel::ChartObject::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(11499)
inline VARIANT_BOOL Excel::ChartObject::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11500)
inline void Excel::ChartObject::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface ChartObjects wrapper method implementations
//

#pragma implementation_key(11501)
inline Excel::_ApplicationPtr Excel::ChartObjects::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11502)
inline enum XlCreator Excel::ChartObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11503)
inline IDispatchPtr Excel::ChartObjects::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11504)
inline _variant_t Excel::ChartObjects::BringToFront ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11505)
inline _variant_t Excel::ChartObjects::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11506)
inline _variant_t Excel::ChartObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003", Appearance, Format);
    return _variant_t(_result, false);
}

#pragma implementation_key(11507)
inline _variant_t Excel::ChartObjects::Cut ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11508)
inline _variant_t Excel::ChartObjects::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11509)
inline IDispatchPtr Excel::ChartObjects::Duplicate ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11510)
inline VARIANT_BOOL Excel::ChartObjects::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11511)
inline void Excel::ChartObjects::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11512)
inline double Excel::ChartObjects::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11513)
inline void Excel::ChartObjects::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11514)
inline double Excel::ChartObjects::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11515)
inline void Excel::ChartObjects::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11516)
inline VARIANT_BOOL Excel::ChartObjects::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11517)
inline void Excel::ChartObjects::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11518)
inline _bstr_t Excel::ChartObjects::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11519)
inline void Excel::ChartObjects::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11520)
inline _variant_t Excel::ChartObjects::GetPlacement ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11521)
inline void Excel::ChartObjects::PutPlacement ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11522)
inline VARIANT_BOOL Excel::ChartObjects::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11523)
inline void Excel::ChartObjects::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11524)
inline _variant_t Excel::ChartObjects::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Replace);
    return _variant_t(_result, false);
}

#pragma implementation_key(11525)
inline _variant_t Excel::ChartObjects::SendToBack ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11526)
inline double Excel::ChartObjects::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11527)
inline void Excel::ChartObjects::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11528)
inline VARIANT_BOOL Excel::ChartObjects::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11529)
inline void Excel::ChartObjects::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11530)
inline double Excel::ChartObjects::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11531)
inline void Excel::ChartObjects::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11532)
inline Excel::ShapeRangePtr Excel::ChartObjects::GetShapeRange ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x5f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(11533)
inline VARIANT_BOOL Excel::ChartObjects::GetRoundedCorners ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11534)
inline void Excel::ChartObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11535)
inline Excel::BorderPtr Excel::ChartObjects::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(11536)
inline Excel::InteriorPtr Excel::ChartObjects::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(11537)
inline VARIANT_BOOL Excel::ChartObjects::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11538)
inline void Excel::ChartObjects::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11539)
inline Excel::ChartObjectPtr Excel::ChartObjects::Add ( double Left, double Top, double Width, double Height ) {
    struct ChartObject * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005", Left, Top, Width, Height);
    return ChartObjectPtr(_result, false);
}

#pragma implementation_key(11540)
inline long Excel::ChartObjects::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11541)
inline Excel::GroupObjectPtr Excel::ChartObjects::Group ( ) {
    struct GroupObject * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return GroupObjectPtr(_result, false);
}

#pragma implementation_key(11542)
inline IDispatchPtr Excel::ChartObjects::Item ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11543)
inline IUnknownPtr Excel::ChartObjects::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Mailer wrapper method implementations
//

#pragma implementation_key(11544)
inline Excel::_ApplicationPtr Excel::Mailer::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11545)
inline enum XlCreator Excel::Mailer::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11546)
inline IDispatchPtr Excel::Mailer::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11547)
inline _variant_t Excel::Mailer::GetBCCRecipients ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3d7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11548)
inline void Excel::Mailer::PutBCCRecipients ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11549)
inline _variant_t Excel::Mailer::GetCCRecipients ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3d6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11550)
inline void Excel::Mailer::PutCCRecipients ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11551)
inline _variant_t Excel::Mailer::GetEnclosures ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3d8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11552)
inline void Excel::Mailer::PutEnclosures ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11553)
inline VARIANT_BOOL Excel::Mailer::GetReceived ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3da, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11554)
inline DATE Excel::Mailer::GetSendDateTime ( ) {
    DATE _result;
    _com_dispatch_method(this, 0x3db, DISPATCH_PROPERTYGET, VT_DATE, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11555)
inline _bstr_t Excel::Mailer::GetSender ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3dc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11556)
inline _bstr_t Excel::Mailer::GetSubject ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x3b9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11557)
inline void Excel::Mailer::PutSubject ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x3b9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11558)
inline _variant_t Excel::Mailer::GetToRecipients ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3d5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11559)
inline void Excel::Mailer::PutToRecipients ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11560)
inline _variant_t Excel::Mailer::GetWhichAddress ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x3ce, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11561)
inline void Excel::Mailer::PutWhichAddress ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x3ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface CustomViews wrapper method implementations
//

#pragma implementation_key(11562)
inline Excel::_ApplicationPtr Excel::CustomViews::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11563)
inline enum XlCreator Excel::CustomViews::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11564)
inline IDispatchPtr Excel::CustomViews::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11565)
inline long Excel::CustomViews::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11566)
inline Excel::CustomViewPtr Excel::CustomViews::Item ( const _variant_t & ViewName ) {
    struct CustomView * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &ViewName);
    return CustomViewPtr(_result, false);
}

#pragma implementation_key(11567)
inline Excel::CustomViewPtr Excel::CustomViews::Add ( _bstr_t ViewName, const _variant_t & PrintSettings, const _variant_t & RowColSettings ) {
    struct CustomView * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c\x080c", (BSTR)ViewName, &PrintSettings, &RowColSettings);
    return CustomViewPtr(_result, false);
}

#pragma implementation_key(11568)
inline Excel::CustomViewPtr Excel::CustomViews::Get_Default ( const _variant_t & ViewName ) {
    struct CustomView * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &ViewName);
    return CustomViewPtr(_result, false);
}

#pragma implementation_key(11569)
inline IUnknownPtr Excel::CustomViews::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface CustomView wrapper method implementations
//

#pragma implementation_key(11570)
inline Excel::_ApplicationPtr Excel::CustomView::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11571)
inline enum XlCreator Excel::CustomView::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11572)
inline IDispatchPtr Excel::CustomView::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11573)
inline _bstr_t Excel::CustomView::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11574)
inline VARIANT_BOOL Excel::CustomView::GetPrintSettings ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x629, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11575)
inline VARIANT_BOOL Excel::CustomView::GetRowColSettings ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x62a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11576)
inline HRESULT Excel::CustomView::Show ( ) {
    return _com_dispatch_method(this, 0x1f0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11577)
inline HRESULT Excel::CustomView::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface FormatConditions wrapper method implementations
//

#pragma implementation_key(11578)
inline Excel::_ApplicationPtr Excel::FormatConditions::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11579)
inline enum XlCreator Excel::FormatConditions::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11580)
inline IDispatchPtr Excel::FormatConditions::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11581)
inline long Excel::FormatConditions::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11582)
inline Excel::FormatConditionPtr Excel::FormatConditions::Item ( const _variant_t & Index ) {
    struct FormatCondition * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return FormatConditionPtr(_result, false);
}

#pragma implementation_key(11583)
inline Excel::FormatConditionPtr Excel::FormatConditions::Add ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    struct FormatCondition * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c", Type, &Operator, &Formula1, &Formula2);
    return FormatConditionPtr(_result, false);
}

#pragma implementation_key(11584)
inline Excel::FormatConditionPtr Excel::FormatConditions::Get_Default ( const _variant_t & Index ) {
    struct FormatCondition * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return FormatConditionPtr(_result, false);
}

#pragma implementation_key(11585)
inline IUnknownPtr Excel::FormatConditions::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(11586)
inline HRESULT Excel::FormatConditions::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface FormatCondition wrapper method implementations
//

#pragma implementation_key(11587)
inline Excel::_ApplicationPtr Excel::FormatCondition::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11588)
inline enum XlCreator Excel::FormatCondition::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11589)
inline IDispatchPtr Excel::FormatCondition::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11590)
inline HRESULT Excel::FormatCondition::Modify ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    return _com_dispatch_method(this, 0x62d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x080c\x080c\x080c", Type, &Operator, &Formula1, &Formula2);
}

#pragma implementation_key(11591)
inline long Excel::FormatCondition::GetType ( ) {
    long _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11592)
inline long Excel::FormatCondition::GetOperator ( ) {
    long _result;
    _com_dispatch_method(this, 0x31d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11593)
inline _bstr_t Excel::FormatCondition::GetFormula1 ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x62b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11594)
inline _bstr_t Excel::FormatCondition::GetFormula2 ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x62c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11595)
inline Excel::InteriorPtr Excel::FormatCondition::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(11596)
inline Excel::BordersPtr Excel::FormatCondition::GetBorders ( ) {
    struct Borders * _result;
    _com_dispatch_method(this, 0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BordersPtr(_result, false);
}

#pragma implementation_key(11597)
inline Excel::FontPtr Excel::FormatCondition::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(11598)
inline HRESULT Excel::FormatCondition::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface Comments wrapper method implementations
//

#pragma implementation_key(11599)
inline Excel::_ApplicationPtr Excel::Comments::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11600)
inline enum XlCreator Excel::Comments::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11601)
inline IDispatchPtr Excel::Comments::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11602)
inline long Excel::Comments::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11603)
inline Excel::CommentPtr Excel::Comments::Item ( long Index ) {
    struct Comment * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return CommentPtr(_result, false);
}

#pragma implementation_key(11604)
inline Excel::CommentPtr Excel::Comments::Get_Default ( long Index ) {
    struct Comment * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return CommentPtr(_result, false);
}

#pragma implementation_key(11605)
inline IUnknownPtr Excel::Comments::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Comment wrapper method implementations
//

#pragma implementation_key(11606)
inline Excel::_ApplicationPtr Excel::Comment::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11607)
inline enum XlCreator Excel::Comment::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11608)
inline IDispatchPtr Excel::Comment::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11609)
inline _bstr_t Excel::Comment::GetAuthor ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x23e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11610)
inline Excel::ShapePtr Excel::Comment::GetShape ( ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x62e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

#pragma implementation_key(11611)
inline VARIANT_BOOL Excel::Comment::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11612)
inline void Excel::Comment::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11613)
inline _bstr_t Excel::Comment::Text ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Overwrite ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_METHOD, VT_BSTR, (void*)&_result, 
        L"\x080c\x080c\x080c", &Text, &Start, &Overwrite);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11614)
inline HRESULT Excel::Comment::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11615)
inline Excel::CommentPtr Excel::Comment::Next ( ) {
    struct Comment * _result;
    _com_dispatch_method(this, 0x1f6, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return CommentPtr(_result, false);
}

#pragma implementation_key(11616)
inline Excel::CommentPtr Excel::Comment::Previous ( ) {
    struct Comment * _result;
    _com_dispatch_method(this, 0x1f7, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return CommentPtr(_result, false);
}

//
// dispinterface RefreshEvents wrapper method implementations
//

#pragma implementation_key(11617)
inline HRESULT Excel::RefreshEvents::BeforeRefresh ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x63c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(11618)
inline HRESULT Excel::RefreshEvents::AfterRefresh ( VARIANT_BOOL Success ) {
    return _com_dispatch_method(this, 0x63d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b", Success);
}

//
// dispinterface _QueryTable wrapper method implementations
//

#pragma implementation_key(11619)
inline Excel::_ApplicationPtr Excel::_QueryTable::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11620)
inline enum XlCreator Excel::_QueryTable::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11621)
inline IDispatchPtr Excel::_QueryTable::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11622)
inline _bstr_t Excel::_QueryTable::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11623)
inline void Excel::_QueryTable::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11624)
inline VARIANT_BOOL Excel::_QueryTable::GetFieldNames ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x630, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11625)
inline void Excel::_QueryTable::PutFieldNames ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x630, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11626)
inline VARIANT_BOOL Excel::_QueryTable::GetRowNumbers ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x631, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11627)
inline void Excel::_QueryTable::PutRowNumbers ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x631, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11628)
inline VARIANT_BOOL Excel::_QueryTable::GetFillAdjacentFormulas ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x632, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11629)
inline void Excel::_QueryTable::PutFillAdjacentFormulas ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x632, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11630)
inline VARIANT_BOOL Excel::_QueryTable::GetHasAutoFormat ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2b7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11631)
inline void Excel::_QueryTable::PutHasAutoFormat ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11632)
inline VARIANT_BOOL Excel::_QueryTable::GetRefreshOnFileOpen ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5c7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11633)
inline void Excel::_QueryTable::PutRefreshOnFileOpen ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11634)
inline VARIANT_BOOL Excel::_QueryTable::GetRefreshing ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x633, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11635)
inline VARIANT_BOOL Excel::_QueryTable::GetFetchedRowOverflow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x634, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11636)
inline VARIANT_BOOL Excel::_QueryTable::GetBackgroundQuery ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x593, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11637)
inline void Excel::_QueryTable::PutBackgroundQuery ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x593, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11638)
inline HRESULT Excel::_QueryTable::CancelRefresh ( ) {
    return _com_dispatch_method(this, 0x635, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11639)
inline enum XlCellInsertionMode Excel::_QueryTable::GetRefreshStyle ( ) {
    enum XlCellInsertionMode _result;
    _com_dispatch_method(this, 0x636, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11640)
inline void Excel::_QueryTable::PutRefreshStyle ( enum XlCellInsertionMode _arg1 ) {
    _com_dispatch_method(this, 0x636, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11641)
inline VARIANT_BOOL Excel::_QueryTable::GetEnableRefresh ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5c5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11642)
inline void Excel::_QueryTable::PutEnableRefresh ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11643)
inline VARIANT_BOOL Excel::_QueryTable::GetSavePassword ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5c9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11644)
inline void Excel::_QueryTable::PutSavePassword ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11645)
inline Excel::RangePtr Excel::_QueryTable::GetDestination ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x2a9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(11646)
inline _variant_t Excel::_QueryTable::GetConnection ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x598, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11647)
inline void Excel::_QueryTable::PutConnection ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x598, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11648)
inline _variant_t Excel::_QueryTable::GetSql ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5c8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11649)
inline void Excel::_QueryTable::PutSql ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11650)
inline _bstr_t Excel::_QueryTable::GetPostText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x637, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11651)
inline void Excel::_QueryTable::PutPostText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x637, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11652)
inline Excel::RangePtr Excel::_QueryTable::GetResultRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x638, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(11653)
inline HRESULT Excel::_QueryTable::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11654)
inline VARIANT_BOOL Excel::_QueryTable::Refresh ( const _variant_t & BackgroundQuery ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x589, DISPATCH_METHOD, VT_BOOL, (void*)&_result, 
        L"\x080c", &BackgroundQuery);
    return _result;
}

#pragma implementation_key(11655)
inline Excel::ParametersPtr Excel::_QueryTable::GetParameters ( ) {
    struct Parameters * _result;
    _com_dispatch_method(this, 0x639, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ParametersPtr(_result, false);
}

#pragma implementation_key(11656)
inline IDispatchPtr Excel::_QueryTable::GetRecordset ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x48d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11657)
inline void Excel::_QueryTable::PutRefRecordset ( IDispatch * _arg1 ) {
    _com_dispatch_method(this, 0x48d, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

#pragma implementation_key(11658)
inline VARIANT_BOOL Excel::_QueryTable::GetSaveData ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2b4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11659)
inline void Excel::_QueryTable::PutSaveData ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11660)
inline VARIANT_BOOL Excel::_QueryTable::GetTablesOnlyFromHTML ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x63a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11661)
inline void Excel::_QueryTable::PutTablesOnlyFromHTML ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x63a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11662)
inline VARIANT_BOOL Excel::_QueryTable::GetEnableEditing ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x63b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11663)
inline void Excel::_QueryTable::PutEnableEditing ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x63b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11664)
inline long Excel::_QueryTable::GetTextFilePlatform ( ) {
    long _result;
    _com_dispatch_method(this, 0x73f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11665)
inline void Excel::_QueryTable::PutTextFilePlatform ( long _arg1 ) {
    _com_dispatch_method(this, 0x73f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11666)
inline long Excel::_QueryTable::GetTextFileStartRow ( ) {
    long _result;
    _com_dispatch_method(this, 0x740, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11667)
inline void Excel::_QueryTable::PutTextFileStartRow ( long _arg1 ) {
    _com_dispatch_method(this, 0x740, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11668)
inline enum XlTextParsingType Excel::_QueryTable::GetTextFileParseType ( ) {
    enum XlTextParsingType _result;
    _com_dispatch_method(this, 0x741, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11669)
inline void Excel::_QueryTable::PutTextFileParseType ( enum XlTextParsingType _arg1 ) {
    _com_dispatch_method(this, 0x741, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11670)
inline enum XlTextQualifier Excel::_QueryTable::GetTextFileTextQualifier ( ) {
    enum XlTextQualifier _result;
    _com_dispatch_method(this, 0x742, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11671)
inline void Excel::_QueryTable::PutTextFileTextQualifier ( enum XlTextQualifier _arg1 ) {
    _com_dispatch_method(this, 0x742, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11672)
inline VARIANT_BOOL Excel::_QueryTable::GetTextFileConsecutiveDelimiter ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x743, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11673)
inline void Excel::_QueryTable::PutTextFileConsecutiveDelimiter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x743, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11674)
inline VARIANT_BOOL Excel::_QueryTable::GetTextFileTabDelimiter ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x744, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11675)
inline void Excel::_QueryTable::PutTextFileTabDelimiter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x744, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11676)
inline VARIANT_BOOL Excel::_QueryTable::GetTextFileSemicolonDelimiter ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x745, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11677)
inline void Excel::_QueryTable::PutTextFileSemicolonDelimiter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x745, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11678)
inline VARIANT_BOOL Excel::_QueryTable::GetTextFileCommaDelimiter ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x746, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11679)
inline void Excel::_QueryTable::PutTextFileCommaDelimiter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x746, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11680)
inline VARIANT_BOOL Excel::_QueryTable::GetTextFileSpaceDelimiter ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x747, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11681)
inline void Excel::_QueryTable::PutTextFileSpaceDelimiter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x747, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11682)
inline _bstr_t Excel::_QueryTable::GetTextFileOtherDelimiter ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x748, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11683)
inline void Excel::_QueryTable::PutTextFileOtherDelimiter ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x748, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11684)
inline _variant_t Excel::_QueryTable::GetTextFileColumnDataTypes ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x749, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11685)
inline void Excel::_QueryTable::PutTextFileColumnDataTypes ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x749, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11686)
inline _variant_t Excel::_QueryTable::GetTextFileFixedColumnWidths ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x74a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11687)
inline void Excel::_QueryTable::PutTextFileFixedColumnWidths ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x74a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11688)
inline VARIANT_BOOL Excel::_QueryTable::GetPreserveColumnInfo ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x74b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11689)
inline void Excel::_QueryTable::PutPreserveColumnInfo ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x74b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11690)
inline VARIANT_BOOL Excel::_QueryTable::GetPreserveFormatting ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5dc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11691)
inline void Excel::_QueryTable::PutPreserveFormatting ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11692)
inline VARIANT_BOOL Excel::_QueryTable::GetAdjustColumnWidth ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x74c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11693)
inline void Excel::_QueryTable::PutAdjustColumnWidth ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x74c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11694)
inline _variant_t Excel::_QueryTable::GetCommandText ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x725, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11695)
inline void Excel::_QueryTable::PutCommandText ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x725, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11696)
inline enum XlCmdType Excel::_QueryTable::GetCommandType ( ) {
    enum XlCmdType _result;
    _com_dispatch_method(this, 0x726, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11697)
inline void Excel::_QueryTable::PutCommandType ( enum XlCmdType _arg1 ) {
    _com_dispatch_method(this, 0x726, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11698)
inline VARIANT_BOOL Excel::_QueryTable::GetTextFilePromptOnRefresh ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x74d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11699)
inline void Excel::_QueryTable::PutTextFilePromptOnRefresh ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x74d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11700)
inline enum XlQueryType Excel::_QueryTable::GetQueryType ( ) {
    enum XlQueryType _result;
    _com_dispatch_method(this, 0x727, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11701)
inline VARIANT_BOOL Excel::_QueryTable::GetMaintainConnection ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x728, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11702)
inline void Excel::_QueryTable::PutMaintainConnection ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x728, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11703)
inline _bstr_t Excel::_QueryTable::GetTextFileDecimalSeparator ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x74e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11704)
inline void Excel::_QueryTable::PutTextFileDecimalSeparator ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x74e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11705)
inline _bstr_t Excel::_QueryTable::GetTextFileThousandsSeparator ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x74f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11706)
inline void Excel::_QueryTable::PutTextFileThousandsSeparator ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x74f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11707)
inline long Excel::_QueryTable::GetRefreshPeriod ( ) {
    long _result;
    _com_dispatch_method(this, 0x729, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11708)
inline void Excel::_QueryTable::PutRefreshPeriod ( long _arg1 ) {
    _com_dispatch_method(this, 0x729, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11709)
inline HRESULT Excel::_QueryTable::ResetTimer ( ) {
    return _com_dispatch_method(this, 0x72a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11710)
inline enum XlWebSelectionType Excel::_QueryTable::GetWebSelectionType ( ) {
    enum XlWebSelectionType _result;
    _com_dispatch_method(this, 0x750, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11711)
inline void Excel::_QueryTable::PutWebSelectionType ( enum XlWebSelectionType _arg1 ) {
    _com_dispatch_method(this, 0x750, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11712)
inline enum XlWebFormatting Excel::_QueryTable::GetWebFormatting ( ) {
    enum XlWebFormatting _result;
    _com_dispatch_method(this, 0x751, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11713)
inline void Excel::_QueryTable::PutWebFormatting ( enum XlWebFormatting _arg1 ) {
    _com_dispatch_method(this, 0x751, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11714)
inline _bstr_t Excel::_QueryTable::GetWebTables ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x752, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11715)
inline void Excel::_QueryTable::PutWebTables ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x752, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11716)
inline VARIANT_BOOL Excel::_QueryTable::GetWebPreFormattedTextToColumns ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x753, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11717)
inline void Excel::_QueryTable::PutWebPreFormattedTextToColumns ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x753, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11718)
inline VARIANT_BOOL Excel::_QueryTable::GetWebSingleBlockTextImport ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x754, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11719)
inline void Excel::_QueryTable::PutWebSingleBlockTextImport ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x754, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11720)
inline VARIANT_BOOL Excel::_QueryTable::GetWebDisableDateRecognition ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x755, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11721)
inline void Excel::_QueryTable::PutWebDisableDateRecognition ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x755, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11722)
inline VARIANT_BOOL Excel::_QueryTable::GetWebConsecutiveDelimitersAsOne ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x756, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11723)
inline void Excel::_QueryTable::PutWebConsecutiveDelimitersAsOne ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x756, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11724)
inline VARIANT_BOOL Excel::_QueryTable::GetWebDisableRedirections ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x872, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11725)
inline void Excel::_QueryTable::PutWebDisableRedirections ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x872, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11726)
inline _variant_t Excel::_QueryTable::GetEditWebPage ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x873, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11727)
inline void Excel::_QueryTable::PutEditWebPage ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x873, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11728)
inline _bstr_t Excel::_QueryTable::GetSourceConnectionFile ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x81f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11729)
inline void Excel::_QueryTable::PutSourceConnectionFile ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x81f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11730)
inline _bstr_t Excel::_QueryTable::GetSourceDataFile ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x820, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11731)
inline void Excel::_QueryTable::PutSourceDataFile ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x820, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11732)
inline enum XlRobustConnect Excel::_QueryTable::GetRobustConnect ( ) {
    enum XlRobustConnect _result;
    _com_dispatch_method(this, 0x821, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11733)
inline void Excel::_QueryTable::PutRobustConnect ( enum XlRobustConnect _arg1 ) {
    _com_dispatch_method(this, 0x821, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11734)
inline VARIANT_BOOL Excel::_QueryTable::GetTextFileTrailingMinusNumbers ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x874, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11735)
inline void Excel::_QueryTable::PutTextFileTrailingMinusNumbers ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x874, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11736)
inline HRESULT Excel::_QueryTable::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords ) {
    return _com_dispatch_method(this, 0x822, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c\x080c", (BSTR)ODCFileName, &Description, &Keywords);
}

//
// dispinterface QueryTables wrapper method implementations
//

#pragma implementation_key(11737)
inline Excel::_ApplicationPtr Excel::QueryTables::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11738)
inline enum XlCreator Excel::QueryTables::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11739)
inline IDispatchPtr Excel::QueryTables::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11740)
inline long Excel::QueryTables::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11741)
inline Excel::_QueryTablePtr Excel::QueryTables::Add ( const _variant_t & Connection, struct Range * Destination, const _variant_t & Sql ) {
    struct _QueryTable * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c\x0009\x080c", &Connection, Destination, &Sql);
    return _QueryTablePtr(_result, false);
}

#pragma implementation_key(11742)
inline Excel::_QueryTablePtr Excel::QueryTables::Item ( const _variant_t & Index ) {
    struct _QueryTable * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return _QueryTablePtr(_result, false);
}

#pragma implementation_key(11743)
inline Excel::_QueryTablePtr Excel::QueryTables::Get_Default ( const _variant_t & Index ) {
    struct _QueryTable * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return _QueryTablePtr(_result, false);
}

#pragma implementation_key(11744)
inline IUnknownPtr Excel::QueryTables::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Parameter wrapper method implementations
//

#pragma implementation_key(11745)
inline Excel::_ApplicationPtr Excel::Parameter::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11746)
inline enum XlCreator Excel::Parameter::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11747)
inline IDispatchPtr Excel::Parameter::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11748)
inline enum XlParameterDataType Excel::Parameter::GetDataType ( ) {
    enum XlParameterDataType _result;
    _com_dispatch_method(this, 0x2d2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11749)
inline void Excel::Parameter::PutDataType ( enum XlParameterDataType _arg1 ) {
    _com_dispatch_method(this, 0x2d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11750)
inline enum XlParameterType Excel::Parameter::GetType ( ) {
    enum XlParameterType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11751)
inline _bstr_t Excel::Parameter::GetPromptString ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x63f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11752)
inline _variant_t Excel::Parameter::GetValue ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11753)
inline Excel::RangePtr Excel::Parameter::GetSourceRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x640, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(11754)
inline _bstr_t Excel::Parameter::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11755)
inline void Excel::Parameter::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11756)
inline HRESULT Excel::Parameter::SetParam ( enum XlParameterType Type, const _variant_t & Value ) {
    return _com_dispatch_method(this, 0x641, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x000c", Type, &Value);
}

#pragma implementation_key(11757)
inline VARIANT_BOOL Excel::Parameter::GetRefreshOnChange ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x757, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11758)
inline void Excel::Parameter::PutRefreshOnChange ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x757, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Parameters wrapper method implementations
//

#pragma implementation_key(11759)
inline Excel::_ApplicationPtr Excel::Parameters::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11760)
inline enum XlCreator Excel::Parameters::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11761)
inline IDispatchPtr Excel::Parameters::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11762)
inline Excel::ParameterPtr Excel::Parameters::Add ( _bstr_t Name, const _variant_t & iDataType ) {
    struct Parameter * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x080c", (BSTR)Name, &iDataType);
    return ParameterPtr(_result, false);
}

#pragma implementation_key(11763)
inline long Excel::Parameters::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11764)
inline Excel::ParameterPtr Excel::Parameters::Item ( const _variant_t & Index ) {
    struct Parameter * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ParameterPtr(_result, false);
}

#pragma implementation_key(11765)
inline Excel::ParameterPtr Excel::Parameters::Get_Default ( const _variant_t & Index ) {
    struct Parameter * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ParameterPtr(_result, false);
}

#pragma implementation_key(11766)
inline HRESULT Excel::Parameters::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11767)
inline IUnknownPtr Excel::Parameters::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface ODBCError wrapper method implementations
//

#pragma implementation_key(11768)
inline Excel::_ApplicationPtr Excel::ODBCError::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11769)
inline enum XlCreator Excel::ODBCError::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11770)
inline IDispatchPtr Excel::ODBCError::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11771)
inline _bstr_t Excel::ODBCError::GetSqlState ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x643, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11772)
inline _bstr_t Excel::ODBCError::GetErrorString ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

//
// dispinterface ODBCErrors wrapper method implementations
//

#pragma implementation_key(11773)
inline Excel::_ApplicationPtr Excel::ODBCErrors::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11774)
inline enum XlCreator Excel::ODBCErrors::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11775)
inline IDispatchPtr Excel::ODBCErrors::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11776)
inline long Excel::ODBCErrors::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11777)
inline Excel::ODBCErrorPtr Excel::ODBCErrors::Item ( long Index ) {
    struct ODBCError * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return ODBCErrorPtr(_result, false);
}

#pragma implementation_key(11778)
inline Excel::ODBCErrorPtr Excel::ODBCErrors::Get_Default ( long Index ) {
    struct ODBCError * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return ODBCErrorPtr(_result, false);
}

#pragma implementation_key(11779)
inline IUnknownPtr Excel::ODBCErrors::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Validation wrapper method implementations
//

#pragma implementation_key(11780)
inline Excel::_ApplicationPtr Excel::Validation::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11781)
inline enum XlCreator Excel::Validation::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11782)
inline IDispatchPtr Excel::Validation::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11783)
inline HRESULT Excel::Validation::Add ( enum XlDVType Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    return _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x080c\x080c\x080c\x080c", Type, &AlertStyle, &Operator, &Formula1, &Formula2);
}

#pragma implementation_key(11784)
inline long Excel::Validation::GetAlertStyle ( ) {
    long _result;
    _com_dispatch_method(this, 0x645, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11785)
inline VARIANT_BOOL Excel::Validation::GetIgnoreBlank ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x646, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11786)
inline void Excel::Validation::PutIgnoreBlank ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x646, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11787)
inline long Excel::Validation::GetIMEMode ( ) {
    long _result;
    _com_dispatch_method(this, 0x647, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11788)
inline void Excel::Validation::PutIMEMode ( long _arg1 ) {
    _com_dispatch_method(this, 0x647, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11789)
inline VARIANT_BOOL Excel::Validation::GetInCellDropdown ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x648, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11790)
inline void Excel::Validation::PutInCellDropdown ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x648, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11791)
inline HRESULT Excel::Validation::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11792)
inline _bstr_t Excel::Validation::GetErrorMessage ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x649, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11793)
inline void Excel::Validation::PutErrorMessage ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x649, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11794)
inline _bstr_t Excel::Validation::GetErrorTitle ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x64a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11795)
inline void Excel::Validation::PutErrorTitle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x64a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11796)
inline _bstr_t Excel::Validation::GetInputMessage ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x64b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11797)
inline void Excel::Validation::PutInputMessage ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x64b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11798)
inline _bstr_t Excel::Validation::GetInputTitle ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x64c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11799)
inline void Excel::Validation::PutInputTitle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x64c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11800)
inline _bstr_t Excel::Validation::GetFormula1 ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x62b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11801)
inline _bstr_t Excel::Validation::GetFormula2 ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x62c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11802)
inline HRESULT Excel::Validation::Modify ( const _variant_t & Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 ) {
    return _com_dispatch_method(this, 0x62d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c", &Type, &AlertStyle, &Operator, &Formula1, &Formula2);
}

#pragma implementation_key(11803)
inline long Excel::Validation::GetOperator ( ) {
    long _result;
    _com_dispatch_method(this, 0x31d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11804)
inline VARIANT_BOOL Excel::Validation::GetShowError ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x64d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11805)
inline void Excel::Validation::PutShowError ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x64d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11806)
inline VARIANT_BOOL Excel::Validation::GetShowInput ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x64e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11807)
inline void Excel::Validation::PutShowInput ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x64e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11808)
inline long Excel::Validation::GetType ( ) {
    long _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11809)
inline VARIANT_BOOL Excel::Validation::GetValue ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Hyperlinks wrapper method implementations
//

#pragma implementation_key(11810)
inline Excel::_ApplicationPtr Excel::Hyperlinks::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11811)
inline enum XlCreator Excel::Hyperlinks::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11812)
inline IDispatchPtr Excel::Hyperlinks::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11813)
inline IDispatchPtr Excel::Hyperlinks::Add ( IDispatch * Anchor, _bstr_t Address, const _variant_t & SubAddress, const _variant_t & ScreenTip, const _variant_t & TextToDisplay ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0009\x0008\x080c\x080c\x080c", Anchor, (BSTR)Address, &SubAddress, &ScreenTip, &TextToDisplay);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11814)
inline long Excel::Hyperlinks::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11815)
inline Excel::HyperlinkPtr Excel::Hyperlinks::GetItem ( const _variant_t & Index ) {
    struct Hyperlink * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(11816)
inline Excel::HyperlinkPtr Excel::Hyperlinks::Get_Default ( const _variant_t & Index ) {
    struct Hyperlink * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(11817)
inline IUnknownPtr Excel::Hyperlinks::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(11818)
inline HRESULT Excel::Hyperlinks::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface Hyperlink wrapper method implementations
//

#pragma implementation_key(11819)
inline Excel::_ApplicationPtr Excel::Hyperlink::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11820)
inline enum XlCreator Excel::Hyperlink::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11821)
inline IDispatchPtr Excel::Hyperlink::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11822)
inline _bstr_t Excel::Hyperlink::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11823)
inline Excel::RangePtr Excel::Hyperlink::GetRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(11824)
inline Excel::ShapePtr Excel::Hyperlink::GetShape ( ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x62e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

#pragma implementation_key(11825)
inline _bstr_t Excel::Hyperlink::GetSubAddress ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5bf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11826)
inline void Excel::Hyperlink::PutSubAddress ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x5bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11827)
inline _bstr_t Excel::Hyperlink::GetAddress ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0xec, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11828)
inline void Excel::Hyperlink::PutAddress ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11829)
inline long Excel::Hyperlink::GetType ( ) {
    long _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11830)
inline HRESULT Excel::Hyperlink::AddToFavorites ( ) {
    return _com_dispatch_method(this, 0x5c4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11831)
inline HRESULT Excel::Hyperlink::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11832)
inline HRESULT Excel::Hyperlink::Follow ( const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo ) {
    return _com_dispatch_method(this, 0x650, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c\x080c", &NewWindow, &AddHistory, &ExtraInfo, &Method, &HeaderInfo);
}

#pragma implementation_key(11833)
inline _bstr_t Excel::Hyperlink::GetEmailSubject ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x75b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11834)
inline void Excel::Hyperlink::PutEmailSubject ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x75b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11835)
inline _bstr_t Excel::Hyperlink::GetScreenTip ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x759, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11836)
inline void Excel::Hyperlink::PutScreenTip ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x759, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11837)
inline _bstr_t Excel::Hyperlink::GetTextToDisplay ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x75a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11838)
inline void Excel::Hyperlink::PutTextToDisplay ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x75a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(11839)
inline HRESULT Excel::Hyperlink::CreateNewDocument ( _bstr_t Filename, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite ) {
    return _com_dispatch_method(this, 0x75c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x000b\x000b", (BSTR)Filename, EditNow, Overwrite);
}

//
// dispinterface AutoFilter wrapper method implementations
//

#pragma implementation_key(11840)
inline Excel::_ApplicationPtr Excel::AutoFilter::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11841)
inline enum XlCreator Excel::AutoFilter::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11842)
inline IDispatchPtr Excel::AutoFilter::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11843)
inline Excel::RangePtr Excel::AutoFilter::GetRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(11844)
inline Excel::FiltersPtr Excel::AutoFilter::GetFilters ( ) {
    struct Filters * _result;
    _com_dispatch_method(this, 0x651, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FiltersPtr(_result, false);
}

//
// dispinterface Filters wrapper method implementations
//

#pragma implementation_key(11845)
inline Excel::_ApplicationPtr Excel::Filters::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11846)
inline enum XlCreator Excel::Filters::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11847)
inline IDispatchPtr Excel::Filters::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11848)
inline long Excel::Filters::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11849)
inline Excel::FilterPtr Excel::Filters::Get_Default ( long Index ) {
    struct Filter * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return FilterPtr(_result, false);
}

#pragma implementation_key(11850)
inline Excel::FilterPtr Excel::Filters::GetItem ( long Index ) {
    struct Filter * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return FilterPtr(_result, false);
}

#pragma implementation_key(11851)
inline IUnknownPtr Excel::Filters::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Filter wrapper method implementations
//

#pragma implementation_key(11852)
inline Excel::_ApplicationPtr Excel::Filter::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11853)
inline enum XlCreator Excel::Filter::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11854)
inline IDispatchPtr Excel::Filter::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11855)
inline VARIANT_BOOL Excel::Filter::GetOn ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x652, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11856)
inline _variant_t Excel::Filter::GetCriteria1 ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x31c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11857)
inline enum XlAutoFilterOperator Excel::Filter::GetOperator ( ) {
    enum XlAutoFilterOperator _result;
    _com_dispatch_method(this, 0x31d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11858)
inline _variant_t Excel::Filter::GetCriteria2 ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x31e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface AutoCorrect wrapper method implementations
//

#pragma implementation_key(11859)
inline Excel::_ApplicationPtr Excel::AutoCorrect::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11860)
inline enum XlCreator Excel::AutoCorrect::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11861)
inline IDispatchPtr Excel::AutoCorrect::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11862)
inline _variant_t Excel::AutoCorrect::AddReplacement ( _bstr_t What, _bstr_t Replacement ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x47a, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008\x0008", (BSTR)What, (BSTR)Replacement);
    return _variant_t(_result, false);
}

#pragma implementation_key(11863)
inline VARIANT_BOOL Excel::AutoCorrect::GetCapitalizeNamesOfDays ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x47e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11864)
inline void Excel::AutoCorrect::PutCapitalizeNamesOfDays ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x47e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11865)
inline _variant_t Excel::AutoCorrect::DeleteReplacement ( _bstr_t What ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x47b, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0008", (BSTR)What);
    return _variant_t(_result, false);
}

#pragma implementation_key(11866)
inline _variant_t Excel::AutoCorrect::GetReplacementList ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x47f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(11867)
inline void Excel::AutoCorrect::PutReplacementList ( const _variant_t & Index, const _variant_t & _arg2 ) {
    _com_dispatch_method(this, 0x47f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c\x080c", &Index, &_arg2);
}

#pragma implementation_key(11868)
inline VARIANT_BOOL Excel::AutoCorrect::GetJOEReplaceText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x47c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11869)
inline void Excel::AutoCorrect::PutJOEReplaceText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x47c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11870)
inline VARIANT_BOOL Excel::AutoCorrect::GetTwoInitialCapitals ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x47d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11871)
inline void Excel::AutoCorrect::PutTwoInitialCapitals ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x47d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11872)
inline VARIANT_BOOL Excel::AutoCorrect::GetCorrectSentenceCap ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x653, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11873)
inline void Excel::AutoCorrect::PutCorrectSentenceCap ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x653, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11874)
inline VARIANT_BOOL Excel::AutoCorrect::GetCorrectCapsLock ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x654, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11875)
inline void Excel::AutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x654, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11876)
inline VARIANT_BOOL Excel::AutoCorrect::GetDisplayAutoCorrectOptions ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x786, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11877)
inline void Excel::AutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x786, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Border wrapper method implementations
//

#pragma implementation_key(11878)
inline Excel::_ApplicationPtr Excel::Border::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11879)
inline enum XlCreator Excel::Border::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11880)
inline IDispatchPtr Excel::Border::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11881)
inline _variant_t Excel::Border::GetColor ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11882)
inline void Excel::Border::PutColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11883)
inline _variant_t Excel::Border::GetColorIndex ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11884)
inline void Excel::Border::PutColorIndex ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11885)
inline _variant_t Excel::Border::GetLineStyle ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x77, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11886)
inline void Excel::Border::PutLineStyle ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x77, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11887)
inline _variant_t Excel::Border::GetWeight ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x78, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11888)
inline void Excel::Border::PutWeight ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x78, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Interior wrapper method implementations
//

#pragma implementation_key(11889)
inline Excel::_ApplicationPtr Excel::Interior::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11890)
inline enum XlCreator Excel::Interior::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11891)
inline IDispatchPtr Excel::Interior::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11892)
inline _variant_t Excel::Interior::GetColor ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11893)
inline void Excel::Interior::PutColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11894)
inline _variant_t Excel::Interior::GetColorIndex ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11895)
inline void Excel::Interior::PutColorIndex ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11896)
inline _variant_t Excel::Interior::GetInvertIfNegative ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11897)
inline void Excel::Interior::PutInvertIfNegative ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11898)
inline _variant_t Excel::Interior::GetPattern ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11899)
inline void Excel::Interior::PutPattern ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11900)
inline _variant_t Excel::Interior::GetPatternColor ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x64, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11901)
inline void Excel::Interior::PutPatternColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11902)
inline _variant_t Excel::Interior::GetPatternColorIndex ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x62, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11903)
inline void Excel::Interior::PutPatternColorIndex ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x62, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface ChartFillFormat wrapper method implementations
//

#pragma implementation_key(11904)
inline Excel::_ApplicationPtr Excel::ChartFillFormat::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11905)
inline enum XlCreator Excel::ChartFillFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11906)
inline IDispatchPtr Excel::ChartFillFormat::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11907)
inline HRESULT Excel::ChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree ) {
    return _com_dispatch_method(this, 0x655, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004", Style, Variant, Degree);
}

#pragma implementation_key(11908)
inline HRESULT Excel::ChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant ) {
    return _com_dispatch_method(this, 0x658, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", Style, Variant);
}

#pragma implementation_key(11909)
inline HRESULT Excel::ChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    return _com_dispatch_method(this, 0x659, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", PresetTexture);
}

#pragma implementation_key(11910)
inline HRESULT Excel::ChartFillFormat::Solid ( ) {
    return _com_dispatch_method(this, 0x65b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11911)
inline HRESULT Excel::ChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    return _com_dispatch_method(this, 0x65c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Pattern);
}

#pragma implementation_key(11912)
inline HRESULT Excel::ChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement ) {
    return _com_dispatch_method(this, 0x65d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c", &PictureFile, &PictureFormat, &PictureStackUnit, &PicturePlacement);
}

#pragma implementation_key(11913)
inline HRESULT Excel::ChartFillFormat::UserTextured ( _bstr_t TextureFile ) {
    return _com_dispatch_method(this, 0x662, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)TextureFile);
}

#pragma implementation_key(11914)
inline HRESULT Excel::ChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    return _com_dispatch_method(this, 0x664, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003", Style, Variant, PresetGradientType);
}

#pragma implementation_key(11915)
inline Excel::ChartColorFormatPtr Excel::ChartFillFormat::GetBackColor ( ) {
    struct ChartColorFormat * _result;
    _com_dispatch_method(this, 0x666, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartColorFormatPtr(_result, false);
}

#pragma implementation_key(11916)
inline Excel::ChartColorFormatPtr Excel::ChartFillFormat::GetForeColor ( ) {
    struct ChartColorFormat * _result;
    _com_dispatch_method(this, 0x667, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartColorFormatPtr(_result, false);
}

#pragma implementation_key(11917)
inline enum Office::MsoGradientColorType Excel::ChartFillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    _com_dispatch_method(this, 0x668, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11918)
inline float Excel::ChartFillFormat::GetGradientDegree ( ) {
    float _result;
    _com_dispatch_method(this, 0x669, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11919)
inline enum Office::MsoGradientStyle Excel::ChartFillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    _com_dispatch_method(this, 0x66a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11920)
inline long Excel::ChartFillFormat::GetGradientVariant ( ) {
    long _result;
    _com_dispatch_method(this, 0x66b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11921)
inline enum Office::MsoPatternType Excel::ChartFillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    _com_dispatch_method(this, 0x5f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11922)
inline enum Office::MsoPresetGradientType Excel::ChartFillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    _com_dispatch_method(this, 0x665, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11923)
inline enum Office::MsoPresetTexture Excel::ChartFillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    _com_dispatch_method(this, 0x65a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11924)
inline _bstr_t Excel::ChartFillFormat::GetTextureName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x66c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(11925)
inline enum Office::MsoTextureType Excel::ChartFillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    _com_dispatch_method(this, 0x66d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11926)
inline enum Office::MsoFillType Excel::ChartFillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11927)
inline enum Office::MsoTriState Excel::ChartFillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11928)
inline void Excel::ChartFillFormat::PutVisible ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface ChartColorFormat wrapper method implementations
//

#pragma implementation_key(11929)
inline Excel::_ApplicationPtr Excel::ChartColorFormat::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11930)
inline enum XlCreator Excel::ChartColorFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11931)
inline IDispatchPtr Excel::ChartColorFormat::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11932)
inline long Excel::ChartColorFormat::GetSchemeColor ( ) {
    long _result;
    _com_dispatch_method(this, 0x66e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11933)
inline void Excel::ChartColorFormat::PutSchemeColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x66e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11934)
inline long Excel::ChartColorFormat::Getignorethis ( ) {
    long _result;
    _com_dispatch_method(this, 0x41f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11935)
inline long Excel::ChartColorFormat::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11936)
inline long Excel::ChartColorFormat::GetType ( ) {
    long _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Axis wrapper method implementations
//

#pragma implementation_key(11937)
inline Excel::_ApplicationPtr Excel::Axis::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(11938)
inline enum XlCreator Excel::Axis::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11939)
inline IDispatchPtr Excel::Axis::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11940)
inline VARIANT_BOOL Excel::Axis::GetAxisBetweenCategories ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11941)
inline void Excel::Axis::PutAxisBetweenCategories ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11942)
inline enum XlAxisGroup Excel::Axis::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    _com_dispatch_method(this, 0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11943)
inline Excel::AxisTitlePtr Excel::Axis::GetAxisTitle ( ) {
    struct AxisTitle * _result;
    _com_dispatch_method(this, 0x52, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AxisTitlePtr(_result, false);
}

#pragma implementation_key(11944)
inline Excel::BorderPtr Excel::Axis::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(11945)
inline _variant_t Excel::Axis::GetCategoryNames ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x9c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11946)
inline void Excel::Axis::PutCategoryNames ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x9c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(11947)
inline enum XlAxisCrosses Excel::Axis::GetCrosses ( ) {
    enum XlAxisCrosses _result;
    _com_dispatch_method(this, 0x2a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11948)
inline void Excel::Axis::PutCrosses ( enum XlAxisCrosses _arg1 ) {
    _com_dispatch_method(this, 0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11949)
inline double Excel::Axis::GetCrossesAt ( ) {
    double _result;
    _com_dispatch_method(this, 0x2b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11950)
inline void Excel::Axis::PutCrossesAt ( double _arg1 ) {
    _com_dispatch_method(this, 0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11951)
inline _variant_t Excel::Axis::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11952)
inline VARIANT_BOOL Excel::Axis::GetHasMajorGridlines ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11953)
inline void Excel::Axis::PutHasMajorGridlines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11954)
inline VARIANT_BOOL Excel::Axis::GetHasMinorGridlines ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x19, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11955)
inline void Excel::Axis::PutHasMinorGridlines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11956)
inline VARIANT_BOOL Excel::Axis::GetHasTitle ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x36, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11957)
inline void Excel::Axis::PutHasTitle ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x36, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11958)
inline Excel::GridlinesPtr Excel::Axis::GetMajorGridlines ( ) {
    struct Gridlines * _result;
    _com_dispatch_method(this, 0x59, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GridlinesPtr(_result, false);
}

#pragma implementation_key(11959)
inline enum XlTickMark Excel::Axis::GetMajorTickMark ( ) {
    enum XlTickMark _result;
    _com_dispatch_method(this, 0x1a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11960)
inline void Excel::Axis::PutMajorTickMark ( enum XlTickMark _arg1 ) {
    _com_dispatch_method(this, 0x1a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11961)
inline double Excel::Axis::GetMajorUnit ( ) {
    double _result;
    _com_dispatch_method(this, 0x25, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11962)
inline void Excel::Axis::PutMajorUnit ( double _arg1 ) {
    _com_dispatch_method(this, 0x25, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11963)
inline VARIANT_BOOL Excel::Axis::GetMajorUnitIsAuto ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11964)
inline void Excel::Axis::PutMajorUnitIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11965)
inline double Excel::Axis::GetMaximumScale ( ) {
    double _result;
    _com_dispatch_method(this, 0x23, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11966)
inline void Excel::Axis::PutMaximumScale ( double _arg1 ) {
    _com_dispatch_method(this, 0x23, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11967)
inline VARIANT_BOOL Excel::Axis::GetMaximumScaleIsAuto ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x24, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11968)
inline void Excel::Axis::PutMaximumScaleIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11969)
inline double Excel::Axis::GetMinimumScale ( ) {
    double _result;
    _com_dispatch_method(this, 0x21, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11970)
inline void Excel::Axis::PutMinimumScale ( double _arg1 ) {
    _com_dispatch_method(this, 0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11971)
inline VARIANT_BOOL Excel::Axis::GetMinimumScaleIsAuto ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11972)
inline void Excel::Axis::PutMinimumScaleIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11973)
inline Excel::GridlinesPtr Excel::Axis::GetMinorGridlines ( ) {
    struct Gridlines * _result;
    _com_dispatch_method(this, 0x5a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GridlinesPtr(_result, false);
}

#pragma implementation_key(11974)
inline enum XlTickMark Excel::Axis::GetMinorTickMark ( ) {
    enum XlTickMark _result;
    _com_dispatch_method(this, 0x1b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11975)
inline void Excel::Axis::PutMinorTickMark ( enum XlTickMark _arg1 ) {
    _com_dispatch_method(this, 0x1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11976)
inline double Excel::Axis::GetMinorUnit ( ) {
    double _result;
    _com_dispatch_method(this, 0x27, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11977)
inline void Excel::Axis::PutMinorUnit ( double _arg1 ) {
    _com_dispatch_method(this, 0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(11978)
inline VARIANT_BOOL Excel::Axis::GetMinorUnitIsAuto ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x28, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11979)
inline void Excel::Axis::PutMinorUnitIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11980)
inline VARIANT_BOOL Excel::Axis::GetReversePlotOrder ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11981)
inline void Excel::Axis::PutReversePlotOrder ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11982)
inline enum XlScaleType Excel::Axis::GetScaleType ( ) {
    enum XlScaleType _result;
    _com_dispatch_method(this, 0x29, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11983)
inline void Excel::Axis::PutScaleType ( enum XlScaleType _arg1 ) {
    _com_dispatch_method(this, 0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11984)
inline _variant_t Excel::Axis::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(11985)
inline enum XlTickLabelPosition Excel::Axis::GetTickLabelPosition ( ) {
    enum XlTickLabelPosition _result;
    _com_dispatch_method(this, 0x1c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11986)
inline void Excel::Axis::PutTickLabelPosition ( enum XlTickLabelPosition _arg1 ) {
    _com_dispatch_method(this, 0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11987)
inline Excel::TickLabelsPtr Excel::Axis::GetTickLabels ( ) {
    struct TickLabels * _result;
    _com_dispatch_method(this, 0x5b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TickLabelsPtr(_result, false);
}

#pragma implementation_key(11988)
inline long Excel::Axis::GetTickLabelSpacing ( ) {
    long _result;
    _com_dispatch_method(this, 0x1d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11989)
inline void Excel::Axis::PutTickLabelSpacing ( long _arg1 ) {
    _com_dispatch_method(this, 0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11990)
inline long Excel::Axis::GetTickMarkSpacing ( ) {
    long _result;
    _com_dispatch_method(this, 0x1f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11991)
inline void Excel::Axis::PutTickMarkSpacing ( long _arg1 ) {
    _com_dispatch_method(this, 0x1f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11992)
inline enum XlAxisType Excel::Axis::GetType ( ) {
    enum XlAxisType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11993)
inline void Excel::Axis::PutType ( enum XlAxisType _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11994)
inline enum XlTimeUnit Excel::Axis::GetBaseUnit ( ) {
    enum XlTimeUnit _result;
    _com_dispatch_method(this, 0x66f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11995)
inline void Excel::Axis::PutBaseUnit ( enum XlTimeUnit _arg1 ) {
    _com_dispatch_method(this, 0x66f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(11996)
inline VARIANT_BOOL Excel::Axis::GetBaseUnitIsAuto ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x670, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11997)
inline void Excel::Axis::PutBaseUnitIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x670, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(11998)
inline enum XlTimeUnit Excel::Axis::GetMajorUnitScale ( ) {
    enum XlTimeUnit _result;
    _com_dispatch_method(this, 0x671, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(11999)
inline void Excel::Axis::PutMajorUnitScale ( enum XlTimeUnit _arg1 ) {
    _com_dispatch_method(this, 0x671, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12000)
inline enum XlTimeUnit Excel::Axis::GetMinorUnitScale ( ) {
    enum XlTimeUnit _result;
    _com_dispatch_method(this, 0x672, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12001)
inline void Excel::Axis::PutMinorUnitScale ( enum XlTimeUnit _arg1 ) {
    _com_dispatch_method(this, 0x672, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12002)
inline enum XlCategoryType Excel::Axis::GetCategoryType ( ) {
    enum XlCategoryType _result;
    _com_dispatch_method(this, 0x673, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12003)
inline void Excel::Axis::PutCategoryType ( enum XlCategoryType _arg1 ) {
    _com_dispatch_method(this, 0x673, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12004)
inline double Excel::Axis::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12005)
inline double Excel::Axis::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12006)
inline double Excel::Axis::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12007)
inline double Excel::Axis::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12008)
inline enum XlDisplayUnit Excel::Axis::GetDisplayUnit ( ) {
    enum XlDisplayUnit _result;
    _com_dispatch_method(this, 0x75e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12009)
inline void Excel::Axis::PutDisplayUnit ( enum XlDisplayUnit _arg1 ) {
    _com_dispatch_method(this, 0x75e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12010)
inline double Excel::Axis::GetDisplayUnitCustom ( ) {
    double _result;
    _com_dispatch_method(this, 0x75f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12011)
inline void Excel::Axis::PutDisplayUnitCustom ( double _arg1 ) {
    _com_dispatch_method(this, 0x75f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12012)
inline VARIANT_BOOL Excel::Axis::GetHasDisplayUnitLabel ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x760, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12013)
inline void Excel::Axis::PutHasDisplayUnitLabel ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x760, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12014)
inline Excel::DisplayUnitLabelPtr Excel::Axis::GetDisplayUnitLabel ( ) {
    struct DisplayUnitLabel * _result;
    _com_dispatch_method(this, 0x761, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DisplayUnitLabelPtr(_result, false);
}

//
// dispinterface ChartTitle wrapper method implementations
//

#pragma implementation_key(12015)
inline Excel::_ApplicationPtr Excel::ChartTitle::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12016)
inline enum XlCreator Excel::ChartTitle::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12017)
inline IDispatchPtr Excel::ChartTitle::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12018)
inline _bstr_t Excel::ChartTitle::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12019)
inline _variant_t Excel::ChartTitle::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12020)
inline Excel::BorderPtr Excel::ChartTitle::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12021)
inline _variant_t Excel::ChartTitle::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12022)
inline Excel::InteriorPtr Excel::ChartTitle::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12023)
inline Excel::ChartFillFormatPtr Excel::ChartTitle::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12024)
inline _bstr_t Excel::ChartTitle::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12025)
inline void Excel::ChartTitle::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12026)
inline Excel::CharactersPtr Excel::ChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(12027)
inline Excel::FontPtr Excel::ChartTitle::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(12028)
inline _variant_t Excel::ChartTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12029)
inline void Excel::ChartTitle::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12030)
inline double Excel::ChartTitle::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12031)
inline void Excel::ChartTitle::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12032)
inline _variant_t Excel::ChartTitle::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12033)
inline void Excel::ChartTitle::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12034)
inline VARIANT_BOOL Excel::ChartTitle::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12035)
inline void Excel::ChartTitle::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12036)
inline _bstr_t Excel::ChartTitle::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12037)
inline void Excel::ChartTitle::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12038)
inline double Excel::ChartTitle::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12039)
inline void Excel::ChartTitle::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12040)
inline _variant_t Excel::ChartTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12041)
inline void Excel::ChartTitle::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12042)
inline long Excel::ChartTitle::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12043)
inline void Excel::ChartTitle::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12044)
inline _variant_t Excel::ChartTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12045)
inline void Excel::ChartTitle::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface AxisTitle wrapper method implementations
//

#pragma implementation_key(12046)
inline Excel::_ApplicationPtr Excel::AxisTitle::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12047)
inline enum XlCreator Excel::AxisTitle::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12048)
inline IDispatchPtr Excel::AxisTitle::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12049)
inline _bstr_t Excel::AxisTitle::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12050)
inline _variant_t Excel::AxisTitle::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12051)
inline Excel::BorderPtr Excel::AxisTitle::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12052)
inline _variant_t Excel::AxisTitle::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12053)
inline Excel::InteriorPtr Excel::AxisTitle::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12054)
inline Excel::ChartFillFormatPtr Excel::AxisTitle::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12055)
inline _bstr_t Excel::AxisTitle::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12056)
inline void Excel::AxisTitle::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12057)
inline Excel::CharactersPtr Excel::AxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(12058)
inline Excel::FontPtr Excel::AxisTitle::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(12059)
inline _variant_t Excel::AxisTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12060)
inline void Excel::AxisTitle::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12061)
inline double Excel::AxisTitle::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12062)
inline void Excel::AxisTitle::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12063)
inline _variant_t Excel::AxisTitle::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12064)
inline void Excel::AxisTitle::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12065)
inline VARIANT_BOOL Excel::AxisTitle::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12066)
inline void Excel::AxisTitle::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12067)
inline _bstr_t Excel::AxisTitle::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12068)
inline void Excel::AxisTitle::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12069)
inline double Excel::AxisTitle::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12070)
inline void Excel::AxisTitle::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12071)
inline _variant_t Excel::AxisTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12072)
inline void Excel::AxisTitle::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12073)
inline long Excel::AxisTitle::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12074)
inline void Excel::AxisTitle::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12075)
inline _variant_t Excel::AxisTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12076)
inline void Excel::AxisTitle::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface ChartGroup wrapper method implementations
//

#pragma implementation_key(12077)
inline Excel::_ApplicationPtr Excel::ChartGroup::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12078)
inline enum XlCreator Excel::ChartGroup::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12079)
inline IDispatchPtr Excel::ChartGroup::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12080)
inline enum XlAxisGroup Excel::ChartGroup::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    _com_dispatch_method(this, 0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12081)
inline void Excel::ChartGroup::PutAxisGroup ( enum XlAxisGroup _arg1 ) {
    _com_dispatch_method(this, 0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12082)
inline long Excel::ChartGroup::GetDoughnutHoleSize ( ) {
    long _result;
    _com_dispatch_method(this, 0x466, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12083)
inline void Excel::ChartGroup::PutDoughnutHoleSize ( long _arg1 ) {
    _com_dispatch_method(this, 0x466, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12084)
inline Excel::DownBarsPtr Excel::ChartGroup::GetDownBars ( ) {
    struct DownBars * _result;
    _com_dispatch_method(this, 0x8d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DownBarsPtr(_result, false);
}

#pragma implementation_key(12085)
inline Excel::DropLinesPtr Excel::ChartGroup::GetDropLines ( ) {
    struct DropLines * _result;
    _com_dispatch_method(this, 0x8e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DropLinesPtr(_result, false);
}

#pragma implementation_key(12086)
inline long Excel::ChartGroup::GetFirstSliceAngle ( ) {
    long _result;
    _com_dispatch_method(this, 0x3f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12087)
inline void Excel::ChartGroup::PutFirstSliceAngle ( long _arg1 ) {
    _com_dispatch_method(this, 0x3f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12088)
inline long Excel::ChartGroup::GetGapWidth ( ) {
    long _result;
    _com_dispatch_method(this, 0x33, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12089)
inline void Excel::ChartGroup::PutGapWidth ( long _arg1 ) {
    _com_dispatch_method(this, 0x33, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12090)
inline VARIANT_BOOL Excel::ChartGroup::GetHasDropLines ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12091)
inline void Excel::ChartGroup::PutHasDropLines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12092)
inline VARIANT_BOOL Excel::ChartGroup::GetHasHiLoLines ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12093)
inline void Excel::ChartGroup::PutHasHiLoLines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12094)
inline VARIANT_BOOL Excel::ChartGroup::GetHasRadarAxisLabels ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x40, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12095)
inline void Excel::ChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x40, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12096)
inline VARIANT_BOOL Excel::ChartGroup::GetHasSeriesLines ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12097)
inline void Excel::ChartGroup::PutHasSeriesLines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12098)
inline VARIANT_BOOL Excel::ChartGroup::GetHasUpDownBars ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x42, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12099)
inline void Excel::ChartGroup::PutHasUpDownBars ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x42, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12100)
inline Excel::HiLoLinesPtr Excel::ChartGroup::GetHiLoLines ( ) {
    struct HiLoLines * _result;
    _com_dispatch_method(this, 0x8f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HiLoLinesPtr(_result, false);
}

#pragma implementation_key(12101)
inline long Excel::ChartGroup::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12102)
inline long Excel::ChartGroup::GetOverlap ( ) {
    long _result;
    _com_dispatch_method(this, 0x38, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12103)
inline void Excel::ChartGroup::PutOverlap ( long _arg1 ) {
    _com_dispatch_method(this, 0x38, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12104)
inline Excel::TickLabelsPtr Excel::ChartGroup::GetRadarAxisLabels ( ) {
    struct TickLabels * _result;
    _com_dispatch_method(this, 0x90, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TickLabelsPtr(_result, false);
}

#pragma implementation_key(12105)
inline IDispatchPtr Excel::ChartGroup::SeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x44, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12106)
inline Excel::SeriesLinesPtr Excel::ChartGroup::GetSeriesLines ( ) {
    struct SeriesLines * _result;
    _com_dispatch_method(this, 0x91, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return SeriesLinesPtr(_result, false);
}

#pragma implementation_key(12107)
inline long Excel::ChartGroup::GetSubType ( ) {
    long _result;
    _com_dispatch_method(this, 0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12108)
inline void Excel::ChartGroup::PutSubType ( long _arg1 ) {
    _com_dispatch_method(this, 0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12109)
inline long Excel::ChartGroup::GetType ( ) {
    long _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12110)
inline void Excel::ChartGroup::PutType ( long _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12111)
inline Excel::UpBarsPtr Excel::ChartGroup::GetUpBars ( ) {
    struct UpBars * _result;
    _com_dispatch_method(this, 0x8c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return UpBarsPtr(_result, false);
}

#pragma implementation_key(12112)
inline VARIANT_BOOL Excel::ChartGroup::GetVaryByCategories ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12113)
inline void Excel::ChartGroup::PutVaryByCategories ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12114)
inline enum XlSizeRepresents Excel::ChartGroup::GetSizeRepresents ( ) {
    enum XlSizeRepresents _result;
    _com_dispatch_method(this, 0x674, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12115)
inline void Excel::ChartGroup::PutSizeRepresents ( enum XlSizeRepresents _arg1 ) {
    _com_dispatch_method(this, 0x674, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12116)
inline long Excel::ChartGroup::GetBubbleScale ( ) {
    long _result;
    _com_dispatch_method(this, 0x675, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12117)
inline void Excel::ChartGroup::PutBubbleScale ( long _arg1 ) {
    _com_dispatch_method(this, 0x675, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12118)
inline VARIANT_BOOL Excel::ChartGroup::GetShowNegativeBubbles ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x676, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12119)
inline void Excel::ChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x676, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12120)
inline enum XlChartSplitType Excel::ChartGroup::GetSplitType ( ) {
    enum XlChartSplitType _result;
    _com_dispatch_method(this, 0x677, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12121)
inline void Excel::ChartGroup::PutSplitType ( enum XlChartSplitType _arg1 ) {
    _com_dispatch_method(this, 0x677, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12122)
inline _variant_t Excel::ChartGroup::GetSplitValue ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x678, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12123)
inline void Excel::ChartGroup::PutSplitValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x678, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12124)
inline long Excel::ChartGroup::GetSecondPlotSize ( ) {
    long _result;
    _com_dispatch_method(this, 0x679, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12125)
inline void Excel::ChartGroup::PutSecondPlotSize ( long _arg1 ) {
    _com_dispatch_method(this, 0x679, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12126)
inline VARIANT_BOOL Excel::ChartGroup::GetHas3DShading ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12127)
inline void Excel::ChartGroup::PutHas3DShading ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface ChartGroups wrapper method implementations
//

#pragma implementation_key(12128)
inline Excel::_ApplicationPtr Excel::ChartGroups::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12129)
inline enum XlCreator Excel::ChartGroups::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12130)
inline IDispatchPtr Excel::ChartGroups::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12131)
inline long Excel::ChartGroups::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12132)
inline Excel::ChartGroupPtr Excel::ChartGroups::Item ( const _variant_t & Index ) {
    struct ChartGroup * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ChartGroupPtr(_result, false);
}

#pragma implementation_key(12133)
inline IUnknownPtr Excel::ChartGroups::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Axes wrapper method implementations
//

#pragma implementation_key(12134)
inline Excel::_ApplicationPtr Excel::Axes::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12135)
inline enum XlCreator Excel::Axes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12136)
inline IDispatchPtr Excel::Axes::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12137)
inline long Excel::Axes::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12138)
inline Excel::AxisPtr Excel::Axes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct Axis * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0003", Type, AxisGroup);
    return AxisPtr(_result, false);
}

#pragma implementation_key(12139)
inline IUnknownPtr Excel::Axes::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Points wrapper method implementations
//

#pragma implementation_key(12140)
inline Excel::_ApplicationPtr Excel::Points::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12141)
inline enum XlCreator Excel::Points::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12142)
inline IDispatchPtr Excel::Points::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12143)
inline long Excel::Points::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12144)
inline Excel::PointPtr Excel::Points::Item ( long Index ) {
    struct Point * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return PointPtr(_result, false);
}

#pragma implementation_key(12145)
inline IUnknownPtr Excel::Points::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Point wrapper method implementations
//

#pragma implementation_key(12146)
inline Excel::_ApplicationPtr Excel::Point::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12147)
inline enum XlCreator Excel::Point::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12148)
inline IDispatchPtr Excel::Point::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12149)
inline _variant_t Excel::Point::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x97, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c", Type, &LegendKey, &AutoText, &HasLeaderLines);
    return _variant_t(_result, false);
}

#pragma implementation_key(12150)
inline Excel::BorderPtr Excel::Point::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12151)
inline _variant_t Excel::Point::ClearFormats ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12152)
inline _variant_t Excel::Point::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12153)
inline Excel::DataLabelPtr Excel::Point::GetDataLabel ( ) {
    struct DataLabel * _result;
    _com_dispatch_method(this, 0x9e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(12154)
inline _variant_t Excel::Point::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12155)
inline long Excel::Point::GetExplosion ( ) {
    long _result;
    _com_dispatch_method(this, 0xb6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12156)
inline void Excel::Point::PutExplosion ( long _arg1 ) {
    _com_dispatch_method(this, 0xb6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12157)
inline VARIANT_BOOL Excel::Point::GetHasDataLabel ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12158)
inline void Excel::Point::PutHasDataLabel ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x4d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12159)
inline Excel::InteriorPtr Excel::Point::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12160)
inline VARIANT_BOOL Excel::Point::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12161)
inline void Excel::Point::PutInvertIfNegative ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12162)
inline long Excel::Point::GetMarkerBackgroundColor ( ) {
    long _result;
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12163)
inline void Excel::Point::PutMarkerBackgroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12164)
inline enum XlColorIndex Excel::Point::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12165)
inline void Excel::Point::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12166)
inline long Excel::Point::GetMarkerForegroundColor ( ) {
    long _result;
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12167)
inline void Excel::Point::PutMarkerForegroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12168)
inline enum XlColorIndex Excel::Point::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12169)
inline void Excel::Point::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12170)
inline long Excel::Point::GetMarkerSize ( ) {
    long _result;
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12171)
inline void Excel::Point::PutMarkerSize ( long _arg1 ) {
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12172)
inline enum XlMarkerStyle Excel::Point::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12173)
inline void Excel::Point::PutMarkerStyle ( enum XlMarkerStyle _arg1 ) {
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12174)
inline _variant_t Excel::Point::Paste ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12175)
inline enum XlChartPictureType Excel::Point::GetPictureType ( ) {
    enum XlChartPictureType _result;
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12176)
inline void Excel::Point::PutPictureType ( enum XlChartPictureType _arg1 ) {
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12177)
inline long Excel::Point::GetPictureUnit ( ) {
    long _result;
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12178)
inline void Excel::Point::PutPictureUnit ( long _arg1 ) {
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12179)
inline _variant_t Excel::Point::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12180)
inline VARIANT_BOOL Excel::Point::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12181)
inline void Excel::Point::PutApplyPictToSides ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12182)
inline VARIANT_BOOL Excel::Point::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12183)
inline void Excel::Point::PutApplyPictToFront ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12184)
inline VARIANT_BOOL Excel::Point::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12185)
inline void Excel::Point::PutApplyPictToEnd ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12186)
inline VARIANT_BOOL Excel::Point::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12187)
inline void Excel::Point::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12188)
inline VARIANT_BOOL Excel::Point::GetSecondaryPlot ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12189)
inline void Excel::Point::PutSecondaryPlot ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12190)
inline Excel::ChartFillFormatPtr Excel::Point::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12191)
inline _variant_t Excel::Point::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x782, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", Type, &LegendKey, &AutoText, &HasLeaderLines, &ShowSeriesName, &ShowCategoryName, &ShowValue, &ShowPercentage, &ShowBubbleSize, &Separator);
    return _variant_t(_result, false);
}

//
// dispinterface Series wrapper method implementations
//

#pragma implementation_key(12192)
inline Excel::_ApplicationPtr Excel::Series::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12193)
inline enum XlCreator Excel::Series::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12194)
inline IDispatchPtr Excel::Series::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12195)
inline _variant_t Excel::Series::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x97, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c", Type, &LegendKey, &AutoText, &HasLeaderLines);
    return _variant_t(_result, false);
}

#pragma implementation_key(12196)
inline enum XlAxisGroup Excel::Series::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    _com_dispatch_method(this, 0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12197)
inline void Excel::Series::PutAxisGroup ( enum XlAxisGroup _arg1 ) {
    _com_dispatch_method(this, 0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12198)
inline Excel::BorderPtr Excel::Series::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12199)
inline _variant_t Excel::Series::ClearFormats ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12200)
inline _variant_t Excel::Series::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12201)
inline IDispatchPtr Excel::Series::DataLabels ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x9d, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12202)
inline _variant_t Excel::Series::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12203)
inline _variant_t Excel::Series::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x98, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x0003\x0003\x080c\x080c", Direction, Include, Type, &Amount, &MinusValues);
    return _variant_t(_result, false);
}

#pragma implementation_key(12204)
inline Excel::ErrorBarsPtr Excel::Series::GetErrorBars ( ) {
    struct ErrorBars * _result;
    _com_dispatch_method(this, 0x9f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ErrorBarsPtr(_result, false);
}

#pragma implementation_key(12205)
inline long Excel::Series::GetExplosion ( ) {
    long _result;
    _com_dispatch_method(this, 0xb6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12206)
inline void Excel::Series::PutExplosion ( long _arg1 ) {
    _com_dispatch_method(this, 0xb6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12207)
inline _bstr_t Excel::Series::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12208)
inline void Excel::Series::PutFormula ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12209)
inline _bstr_t Excel::Series::GetFormulaLocal ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x107, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12210)
inline void Excel::Series::PutFormulaLocal ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x107, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12211)
inline _bstr_t Excel::Series::GetFormulaR1C1 ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x108, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12212)
inline void Excel::Series::PutFormulaR1C1 ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x108, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12213)
inline _bstr_t Excel::Series::GetFormulaR1C1Local ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x109, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12214)
inline void Excel::Series::PutFormulaR1C1Local ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x109, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12215)
inline VARIANT_BOOL Excel::Series::GetHasDataLabels ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12216)
inline void Excel::Series::PutHasDataLabels ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x4e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12217)
inline VARIANT_BOOL Excel::Series::GetHasErrorBars ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xa0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12218)
inline void Excel::Series::PutHasErrorBars ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xa0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12219)
inline Excel::InteriorPtr Excel::Series::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12220)
inline Excel::ChartFillFormatPtr Excel::Series::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12221)
inline VARIANT_BOOL Excel::Series::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12222)
inline void Excel::Series::PutInvertIfNegative ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12223)
inline long Excel::Series::GetMarkerBackgroundColor ( ) {
    long _result;
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12224)
inline void Excel::Series::PutMarkerBackgroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12225)
inline enum XlColorIndex Excel::Series::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12226)
inline void Excel::Series::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12227)
inline long Excel::Series::GetMarkerForegroundColor ( ) {
    long _result;
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12228)
inline void Excel::Series::PutMarkerForegroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12229)
inline enum XlColorIndex Excel::Series::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12230)
inline void Excel::Series::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12231)
inline long Excel::Series::GetMarkerSize ( ) {
    long _result;
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12232)
inline void Excel::Series::PutMarkerSize ( long _arg1 ) {
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12233)
inline enum XlMarkerStyle Excel::Series::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12234)
inline void Excel::Series::PutMarkerStyle ( enum XlMarkerStyle _arg1 ) {
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12235)
inline _bstr_t Excel::Series::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12236)
inline void Excel::Series::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12237)
inline _variant_t Excel::Series::Paste ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12238)
inline enum XlChartPictureType Excel::Series::GetPictureType ( ) {
    enum XlChartPictureType _result;
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12239)
inline void Excel::Series::PutPictureType ( enum XlChartPictureType _arg1 ) {
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12240)
inline long Excel::Series::GetPictureUnit ( ) {
    long _result;
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12241)
inline void Excel::Series::PutPictureUnit ( long _arg1 ) {
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12242)
inline long Excel::Series::GetPlotOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0xe4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12243)
inline void Excel::Series::PutPlotOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0xe4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12244)
inline IDispatchPtr Excel::Series::Points ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x46, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12245)
inline _variant_t Excel::Series::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12246)
inline VARIANT_BOOL Excel::Series::GetSmooth ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xa3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12247)
inline void Excel::Series::PutSmooth ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xa3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12248)
inline IDispatchPtr Excel::Series::Trendlines ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x9a, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12249)
inline long Excel::Series::GetType ( ) {
    long _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12250)
inline void Excel::Series::PutType ( long _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12251)
inline enum XlChartType Excel::Series::GetChartType ( ) {
    enum XlChartType _result;
    _com_dispatch_method(this, 0x578, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12252)
inline void Excel::Series::PutChartType ( enum XlChartType _arg1 ) {
    _com_dispatch_method(this, 0x578, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12253)
inline HRESULT Excel::Series::ApplyCustomType ( enum XlChartType ChartType ) {
    return _com_dispatch_method(this, 0x579, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", ChartType);
}

#pragma implementation_key(12254)
inline _variant_t Excel::Series::GetValues ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xa4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12255)
inline void Excel::Series::PutValues ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xa4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12256)
inline _variant_t Excel::Series::GetXValues ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x457, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12257)
inline void Excel::Series::PutXValues ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x457, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12258)
inline _variant_t Excel::Series::GetBubbleSizes ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x680, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12259)
inline void Excel::Series::PutBubbleSizes ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x680, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12260)
inline enum XlBarShape Excel::Series::GetBarShape ( ) {
    enum XlBarShape _result;
    _com_dispatch_method(this, 0x57b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12261)
inline void Excel::Series::PutBarShape ( enum XlBarShape _arg1 ) {
    _com_dispatch_method(this, 0x57b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12262)
inline VARIANT_BOOL Excel::Series::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12263)
inline void Excel::Series::PutApplyPictToSides ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12264)
inline VARIANT_BOOL Excel::Series::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12265)
inline void Excel::Series::PutApplyPictToFront ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12266)
inline VARIANT_BOOL Excel::Series::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12267)
inline void Excel::Series::PutApplyPictToEnd ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12268)
inline VARIANT_BOOL Excel::Series::GetHas3DEffect ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x681, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12269)
inline void Excel::Series::PutHas3DEffect ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x681, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12270)
inline VARIANT_BOOL Excel::Series::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12271)
inline void Excel::Series::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12272)
inline VARIANT_BOOL Excel::Series::GetHasLeaderLines ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x572, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12273)
inline void Excel::Series::PutHasLeaderLines ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x572, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12274)
inline Excel::LeaderLinesPtr Excel::Series::GetLeaderLines ( ) {
    struct LeaderLines * _result;
    _com_dispatch_method(this, 0x682, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return LeaderLinesPtr(_result, false);
}

#pragma implementation_key(12275)
inline _variant_t Excel::Series::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x782, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", Type, &LegendKey, &AutoText, &HasLeaderLines, &ShowSeriesName, &ShowCategoryName, &ShowValue, &ShowPercentage, &ShowBubbleSize, &Separator);
    return _variant_t(_result, false);
}

//
// dispinterface SeriesCollection wrapper method implementations
//

#pragma implementation_key(12276)
inline Excel::_ApplicationPtr Excel::SeriesCollection::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12277)
inline enum XlCreator Excel::SeriesCollection::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12278)
inline IDispatchPtr Excel::SeriesCollection::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12279)
inline Excel::SeriesPtr Excel::SeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace ) {
    struct Series * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c\x0003\x080c\x080c\x080c", &Source, Rowcol, &SeriesLabels, &CategoryLabels, &Replace);
    return SeriesPtr(_result, false);
}

#pragma implementation_key(12280)
inline long Excel::SeriesCollection::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12281)
inline _variant_t Excel::SeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xe3, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x000c\x080c\x080c", &Source, &Rowcol, &CategoryLabels);
    return _variant_t(_result, false);
}

#pragma implementation_key(12282)
inline Excel::SeriesPtr Excel::SeriesCollection::Item ( const _variant_t & Index ) {
    struct Series * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return SeriesPtr(_result, false);
}

#pragma implementation_key(12283)
inline IUnknownPtr Excel::SeriesCollection::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(12284)
inline _variant_t Excel::SeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c\x080c", Rowcol, &SeriesLabels, &CategoryLabels, &Replace, &NewSeries);
    return _variant_t(_result, false);
}

#pragma implementation_key(12285)
inline Excel::SeriesPtr Excel::SeriesCollection::NewSeries ( ) {
    struct Series * _result;
    _com_dispatch_method(this, 0x45d, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return SeriesPtr(_result, false);
}

//
// dispinterface DataLabel wrapper method implementations
//

#pragma implementation_key(12286)
inline Excel::_ApplicationPtr Excel::DataLabel::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12287)
inline enum XlCreator Excel::DataLabel::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12288)
inline IDispatchPtr Excel::DataLabel::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12289)
inline _bstr_t Excel::DataLabel::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12290)
inline _variant_t Excel::DataLabel::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12291)
inline Excel::BorderPtr Excel::DataLabel::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12292)
inline _variant_t Excel::DataLabel::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12293)
inline Excel::InteriorPtr Excel::DataLabel::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12294)
inline Excel::ChartFillFormatPtr Excel::DataLabel::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12295)
inline _bstr_t Excel::DataLabel::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12296)
inline void Excel::DataLabel::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12297)
inline Excel::CharactersPtr Excel::DataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(12298)
inline Excel::FontPtr Excel::DataLabel::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(12299)
inline _variant_t Excel::DataLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12300)
inline void Excel::DataLabel::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12301)
inline double Excel::DataLabel::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12302)
inline void Excel::DataLabel::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12303)
inline _variant_t Excel::DataLabel::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12304)
inline void Excel::DataLabel::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12305)
inline VARIANT_BOOL Excel::DataLabel::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12306)
inline void Excel::DataLabel::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12307)
inline _bstr_t Excel::DataLabel::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12308)
inline void Excel::DataLabel::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12309)
inline double Excel::DataLabel::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12310)
inline void Excel::DataLabel::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12311)
inline _variant_t Excel::DataLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12312)
inline void Excel::DataLabel::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12313)
inline long Excel::DataLabel::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12314)
inline void Excel::DataLabel::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12315)
inline _variant_t Excel::DataLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12316)
inline void Excel::DataLabel::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12317)
inline VARIANT_BOOL Excel::DataLabel::GetAutoText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x87, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12318)
inline void Excel::DataLabel::PutAutoText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x87, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12319)
inline _bstr_t Excel::DataLabel::GetNumberFormat ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12320)
inline void Excel::DataLabel::PutNumberFormat ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12321)
inline VARIANT_BOOL Excel::DataLabel::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12322)
inline void Excel::DataLabel::PutNumberFormatLinked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12323)
inline _variant_t Excel::DataLabel::GetNumberFormatLocal ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12324)
inline void Excel::DataLabel::PutNumberFormatLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12325)
inline VARIANT_BOOL Excel::DataLabel::GetShowLegendKey ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12326)
inline void Excel::DataLabel::PutShowLegendKey ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12327)
inline _variant_t Excel::DataLabel::GetType ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12328)
inline void Excel::DataLabel::PutType ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12329)
inline enum XlDataLabelPosition Excel::DataLabel::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12330)
inline void Excel::DataLabel::PutPosition ( enum XlDataLabelPosition _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12331)
inline VARIANT_BOOL Excel::DataLabel::GetShowSeriesName ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7e6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12332)
inline void Excel::DataLabel::PutShowSeriesName ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12333)
inline VARIANT_BOOL Excel::DataLabel::GetShowCategoryName ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7e7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12334)
inline void Excel::DataLabel::PutShowCategoryName ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12335)
inline VARIANT_BOOL Excel::DataLabel::GetShowValue ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12336)
inline void Excel::DataLabel::PutShowValue ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12337)
inline VARIANT_BOOL Excel::DataLabel::GetShowPercentage ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7e9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12338)
inline void Excel::DataLabel::PutShowPercentage ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12339)
inline VARIANT_BOOL Excel::DataLabel::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7ea, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12340)
inline void Excel::DataLabel::PutShowBubbleSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12341)
inline _variant_t Excel::DataLabel::GetSeparator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x7eb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12342)
inline void Excel::DataLabel::PutSeparator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x7eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface DataLabels wrapper method implementations
//

#pragma implementation_key(12343)
inline Excel::_ApplicationPtr Excel::DataLabels::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12344)
inline enum XlCreator Excel::DataLabels::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12345)
inline IDispatchPtr Excel::DataLabels::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12346)
inline _bstr_t Excel::DataLabels::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12347)
inline _variant_t Excel::DataLabels::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12348)
inline Excel::BorderPtr Excel::DataLabels::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12349)
inline _variant_t Excel::DataLabels::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12350)
inline Excel::InteriorPtr Excel::DataLabels::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12351)
inline Excel::ChartFillFormatPtr Excel::DataLabels::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12352)
inline Excel::FontPtr Excel::DataLabels::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(12353)
inline _variant_t Excel::DataLabels::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12354)
inline void Excel::DataLabels::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12355)
inline _variant_t Excel::DataLabels::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12356)
inline void Excel::DataLabels::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12357)
inline VARIANT_BOOL Excel::DataLabels::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12358)
inline void Excel::DataLabels::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12359)
inline _variant_t Excel::DataLabels::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12360)
inline void Excel::DataLabels::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12361)
inline long Excel::DataLabels::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12362)
inline void Excel::DataLabels::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12363)
inline _variant_t Excel::DataLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12364)
inline void Excel::DataLabels::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12365)
inline VARIANT_BOOL Excel::DataLabels::GetAutoText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x87, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12366)
inline void Excel::DataLabels::PutAutoText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x87, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12367)
inline _bstr_t Excel::DataLabels::GetNumberFormat ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12368)
inline void Excel::DataLabels::PutNumberFormat ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12369)
inline VARIANT_BOOL Excel::DataLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12370)
inline void Excel::DataLabels::PutNumberFormatLinked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12371)
inline _variant_t Excel::DataLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12372)
inline void Excel::DataLabels::PutNumberFormatLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12373)
inline VARIANT_BOOL Excel::DataLabels::GetShowLegendKey ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12374)
inline void Excel::DataLabels::PutShowLegendKey ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12375)
inline _variant_t Excel::DataLabels::GetType ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12376)
inline void Excel::DataLabels::PutType ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12377)
inline enum XlDataLabelPosition Excel::DataLabels::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12378)
inline void Excel::DataLabels::PutPosition ( enum XlDataLabelPosition _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12379)
inline VARIANT_BOOL Excel::DataLabels::GetShowSeriesName ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7e6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12380)
inline void Excel::DataLabels::PutShowSeriesName ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12381)
inline VARIANT_BOOL Excel::DataLabels::GetShowCategoryName ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7e7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12382)
inline void Excel::DataLabels::PutShowCategoryName ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12383)
inline VARIANT_BOOL Excel::DataLabels::GetShowValue ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7e8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12384)
inline void Excel::DataLabels::PutShowValue ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7e8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12385)
inline VARIANT_BOOL Excel::DataLabels::GetShowPercentage ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7e9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12386)
inline void Excel::DataLabels::PutShowPercentage ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7e9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12387)
inline VARIANT_BOOL Excel::DataLabels::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7ea, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12388)
inline void Excel::DataLabels::PutShowBubbleSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12389)
inline _variant_t Excel::DataLabels::GetSeparator ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x7eb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12390)
inline void Excel::DataLabels::PutSeparator ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x7eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12391)
inline long Excel::DataLabels::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12392)
inline Excel::DataLabelPtr Excel::DataLabels::Item ( const _variant_t & Index ) {
    struct DataLabel * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(12393)
inline IUnknownPtr Excel::DataLabels::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface LegendEntry wrapper method implementations
//

#pragma implementation_key(12394)
inline Excel::_ApplicationPtr Excel::LegendEntry::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12395)
inline enum XlCreator Excel::LegendEntry::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12396)
inline IDispatchPtr Excel::LegendEntry::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12397)
inline _variant_t Excel::LegendEntry::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12398)
inline Excel::FontPtr Excel::LegendEntry::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(12399)
inline long Excel::LegendEntry::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12400)
inline Excel::LegendKeyPtr Excel::LegendEntry::GetLegendKey ( ) {
    struct LegendKey * _result;
    _com_dispatch_method(this, 0xae, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return LegendKeyPtr(_result, false);
}

#pragma implementation_key(12401)
inline _variant_t Excel::LegendEntry::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12402)
inline _variant_t Excel::LegendEntry::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12403)
inline void Excel::LegendEntry::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12404)
inline double Excel::LegendEntry::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12405)
inline double Excel::LegendEntry::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12406)
inline double Excel::LegendEntry::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12407)
inline double Excel::LegendEntry::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface LegendEntries wrapper method implementations
//

#pragma implementation_key(12408)
inline Excel::_ApplicationPtr Excel::LegendEntries::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12409)
inline enum XlCreator Excel::LegendEntries::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12410)
inline IDispatchPtr Excel::LegendEntries::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12411)
inline long Excel::LegendEntries::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12412)
inline Excel::LegendEntryPtr Excel::LegendEntries::Item ( const _variant_t & Index ) {
    struct LegendEntry * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return LegendEntryPtr(_result, false);
}

#pragma implementation_key(12413)
inline IUnknownPtr Excel::LegendEntries::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface LegendKey wrapper method implementations
//

#pragma implementation_key(12414)
inline Excel::_ApplicationPtr Excel::LegendKey::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12415)
inline enum XlCreator Excel::LegendKey::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12416)
inline IDispatchPtr Excel::LegendKey::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12417)
inline Excel::BorderPtr Excel::LegendKey::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12418)
inline _variant_t Excel::LegendKey::ClearFormats ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12419)
inline _variant_t Excel::LegendKey::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12420)
inline Excel::InteriorPtr Excel::LegendKey::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12421)
inline Excel::ChartFillFormatPtr Excel::LegendKey::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12422)
inline VARIANT_BOOL Excel::LegendKey::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12423)
inline void Excel::LegendKey::PutInvertIfNegative ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x84, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12424)
inline long Excel::LegendKey::GetMarkerBackgroundColor ( ) {
    long _result;
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12425)
inline void Excel::LegendKey::PutMarkerBackgroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12426)
inline enum XlColorIndex Excel::LegendKey::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12427)
inline void Excel::LegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12428)
inline long Excel::LegendKey::GetMarkerForegroundColor ( ) {
    long _result;
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12429)
inline void Excel::LegendKey::PutMarkerForegroundColor ( long _arg1 ) {
    _com_dispatch_method(this, 0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12430)
inline enum XlColorIndex Excel::LegendKey::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12431)
inline void Excel::LegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12432)
inline long Excel::LegendKey::GetMarkerSize ( ) {
    long _result;
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12433)
inline void Excel::LegendKey::PutMarkerSize ( long _arg1 ) {
    _com_dispatch_method(this, 0xe7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12434)
inline enum XlMarkerStyle Excel::LegendKey::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12435)
inline void Excel::LegendKey::PutMarkerStyle ( enum XlMarkerStyle _arg1 ) {
    _com_dispatch_method(this, 0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12436)
inline long Excel::LegendKey::GetPictureType ( ) {
    long _result;
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12437)
inline void Excel::LegendKey::PutPictureType ( long _arg1 ) {
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12438)
inline long Excel::LegendKey::GetPictureUnit ( ) {
    long _result;
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12439)
inline void Excel::LegendKey::PutPictureUnit ( long _arg1 ) {
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12440)
inline _variant_t Excel::LegendKey::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12441)
inline VARIANT_BOOL Excel::LegendKey::GetSmooth ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xa3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12442)
inline void Excel::LegendKey::PutSmooth ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xa3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12443)
inline double Excel::LegendKey::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12444)
inline double Excel::LegendKey::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12445)
inline double Excel::LegendKey::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12446)
inline double Excel::LegendKey::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12447)
inline VARIANT_BOOL Excel::LegendKey::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12448)
inline void Excel::LegendKey::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Trendlines wrapper method implementations
//

#pragma implementation_key(12449)
inline Excel::_ApplicationPtr Excel::Trendlines::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12450)
inline enum XlCreator Excel::Trendlines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12451)
inline IDispatchPtr Excel::Trendlines::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12452)
inline Excel::TrendlinePtr Excel::Trendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name ) {
    struct Trendline * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", Type, &Order, &Period, &Forward, &Backward, &Intercept, &DisplayEquation, &DisplayRSquared, &Name);
    return TrendlinePtr(_result, false);
}

#pragma implementation_key(12453)
inline long Excel::Trendlines::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12454)
inline Excel::TrendlinePtr Excel::Trendlines::Item ( const _variant_t & Index ) {
    struct Trendline * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return TrendlinePtr(_result, false);
}

#pragma implementation_key(12455)
inline IUnknownPtr Excel::Trendlines::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Trendline wrapper method implementations
//

#pragma implementation_key(12456)
inline Excel::_ApplicationPtr Excel::Trendline::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12457)
inline enum XlCreator Excel::Trendline::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12458)
inline IDispatchPtr Excel::Trendline::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12459)
inline long Excel::Trendline::GetBackward ( ) {
    long _result;
    _com_dispatch_method(this, 0xb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12460)
inline void Excel::Trendline::PutBackward ( long _arg1 ) {
    _com_dispatch_method(this, 0xb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12461)
inline Excel::BorderPtr Excel::Trendline::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12462)
inline _variant_t Excel::Trendline::ClearFormats ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12463)
inline Excel::DataLabelPtr Excel::Trendline::GetDataLabel ( ) {
    struct DataLabel * _result;
    _com_dispatch_method(this, 0x9e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DataLabelPtr(_result, false);
}

#pragma implementation_key(12464)
inline _variant_t Excel::Trendline::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12465)
inline VARIANT_BOOL Excel::Trendline::GetDisplayEquation ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xbe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12466)
inline void Excel::Trendline::PutDisplayEquation ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12467)
inline VARIANT_BOOL Excel::Trendline::GetDisplayRSquared ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xbd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12468)
inline void Excel::Trendline::PutDisplayRSquared ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xbd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12469)
inline long Excel::Trendline::GetForward ( ) {
    long _result;
    _com_dispatch_method(this, 0xbf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12470)
inline void Excel::Trendline::PutForward ( long _arg1 ) {
    _com_dispatch_method(this, 0xbf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12471)
inline long Excel::Trendline::GetIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x1e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12472)
inline double Excel::Trendline::GetIntercept ( ) {
    double _result;
    _com_dispatch_method(this, 0xba, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12473)
inline void Excel::Trendline::PutIntercept ( double _arg1 ) {
    _com_dispatch_method(this, 0xba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12474)
inline VARIANT_BOOL Excel::Trendline::GetInterceptIsAuto ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12475)
inline void Excel::Trendline::PutInterceptIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xbb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12476)
inline _bstr_t Excel::Trendline::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12477)
inline void Excel::Trendline::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12478)
inline VARIANT_BOOL Excel::Trendline::GetNameIsAuto ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xbc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12479)
inline void Excel::Trendline::PutNameIsAuto ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xbc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12480)
inline long Excel::Trendline::GetOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0xc0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12481)
inline void Excel::Trendline::PutOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0xc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12482)
inline long Excel::Trendline::GetPeriod ( ) {
    long _result;
    _com_dispatch_method(this, 0xb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12483)
inline void Excel::Trendline::PutPeriod ( long _arg1 ) {
    _com_dispatch_method(this, 0xb8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12484)
inline _variant_t Excel::Trendline::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12485)
inline enum XlTrendlineType Excel::Trendline::GetType ( ) {
    enum XlTrendlineType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12486)
inline void Excel::Trendline::PutType ( enum XlTrendlineType _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Corners wrapper method implementations
//

#pragma implementation_key(12487)
inline Excel::_ApplicationPtr Excel::Corners::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12488)
inline enum XlCreator Excel::Corners::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12489)
inline IDispatchPtr Excel::Corners::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12490)
inline _bstr_t Excel::Corners::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12491)
inline _variant_t Excel::Corners::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface SeriesLines wrapper method implementations
//

#pragma implementation_key(12492)
inline Excel::_ApplicationPtr Excel::SeriesLines::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12493)
inline enum XlCreator Excel::SeriesLines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12494)
inline IDispatchPtr Excel::SeriesLines::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12495)
inline _bstr_t Excel::SeriesLines::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12496)
inline _variant_t Excel::SeriesLines::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12497)
inline Excel::BorderPtr Excel::SeriesLines::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12498)
inline _variant_t Excel::SeriesLines::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface HiLoLines wrapper method implementations
//

#pragma implementation_key(12499)
inline Excel::_ApplicationPtr Excel::HiLoLines::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12500)
inline enum XlCreator Excel::HiLoLines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12501)
inline IDispatchPtr Excel::HiLoLines::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12502)
inline _bstr_t Excel::HiLoLines::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12503)
inline _variant_t Excel::HiLoLines::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12504)
inline Excel::BorderPtr Excel::HiLoLines::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12505)
inline _variant_t Excel::HiLoLines::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface Gridlines wrapper method implementations
//

#pragma implementation_key(12506)
inline Excel::_ApplicationPtr Excel::Gridlines::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12507)
inline enum XlCreator Excel::Gridlines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12508)
inline IDispatchPtr Excel::Gridlines::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12509)
inline _bstr_t Excel::Gridlines::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12510)
inline _variant_t Excel::Gridlines::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12511)
inline Excel::BorderPtr Excel::Gridlines::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12512)
inline _variant_t Excel::Gridlines::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface DropLines wrapper method implementations
//

#pragma implementation_key(12513)
inline Excel::_ApplicationPtr Excel::DropLines::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12514)
inline enum XlCreator Excel::DropLines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12515)
inline IDispatchPtr Excel::DropLines::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12516)
inline _bstr_t Excel::DropLines::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12517)
inline _variant_t Excel::DropLines::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12518)
inline Excel::BorderPtr Excel::DropLines::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12519)
inline _variant_t Excel::DropLines::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface LeaderLines wrapper method implementations
//

#pragma implementation_key(12520)
inline Excel::_ApplicationPtr Excel::LeaderLines::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12521)
inline enum XlCreator Excel::LeaderLines::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12522)
inline IDispatchPtr Excel::LeaderLines::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12523)
inline Excel::BorderPtr Excel::LeaderLines::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12524)
inline HRESULT Excel::LeaderLines::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12525)
inline HRESULT Excel::LeaderLines::Select ( ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface UpBars wrapper method implementations
//

#pragma implementation_key(12526)
inline Excel::_ApplicationPtr Excel::UpBars::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12527)
inline enum XlCreator Excel::UpBars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12528)
inline IDispatchPtr Excel::UpBars::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12529)
inline _bstr_t Excel::UpBars::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12530)
inline _variant_t Excel::UpBars::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12531)
inline Excel::BorderPtr Excel::UpBars::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12532)
inline _variant_t Excel::UpBars::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12533)
inline Excel::InteriorPtr Excel::UpBars::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12534)
inline Excel::ChartFillFormatPtr Excel::UpBars::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

//
// dispinterface DownBars wrapper method implementations
//

#pragma implementation_key(12535)
inline Excel::_ApplicationPtr Excel::DownBars::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12536)
inline enum XlCreator Excel::DownBars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12537)
inline IDispatchPtr Excel::DownBars::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12538)
inline _bstr_t Excel::DownBars::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12539)
inline _variant_t Excel::DownBars::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12540)
inline Excel::BorderPtr Excel::DownBars::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12541)
inline _variant_t Excel::DownBars::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12542)
inline Excel::InteriorPtr Excel::DownBars::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12543)
inline Excel::ChartFillFormatPtr Excel::DownBars::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

//
// dispinterface Floor wrapper method implementations
//

#pragma implementation_key(12544)
inline Excel::_ApplicationPtr Excel::Floor::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12545)
inline enum XlCreator Excel::Floor::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12546)
inline IDispatchPtr Excel::Floor::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12547)
inline _bstr_t Excel::Floor::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12548)
inline _variant_t Excel::Floor::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12549)
inline Excel::BorderPtr Excel::Floor::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12550)
inline _variant_t Excel::Floor::ClearFormats ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12551)
inline Excel::InteriorPtr Excel::Floor::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12552)
inline Excel::ChartFillFormatPtr Excel::Floor::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12553)
inline _variant_t Excel::Floor::GetPictureType ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12554)
inline void Excel::Floor::PutPictureType ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12555)
inline HRESULT Excel::Floor::Paste ( ) {
    return _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface Walls wrapper method implementations
//

#pragma implementation_key(12556)
inline Excel::_ApplicationPtr Excel::Walls::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12557)
inline enum XlCreator Excel::Walls::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12558)
inline IDispatchPtr Excel::Walls::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12559)
inline _bstr_t Excel::Walls::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12560)
inline _variant_t Excel::Walls::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12561)
inline Excel::BorderPtr Excel::Walls::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12562)
inline _variant_t Excel::Walls::ClearFormats ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12563)
inline Excel::InteriorPtr Excel::Walls::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12564)
inline Excel::ChartFillFormatPtr Excel::Walls::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12565)
inline _variant_t Excel::Walls::GetPictureType ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12566)
inline void Excel::Walls::PutPictureType ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12567)
inline HRESULT Excel::Walls::Paste ( ) {
    return _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12568)
inline _variant_t Excel::Walls::GetPictureUnit ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12569)
inline void Excel::Walls::PutPictureUnit ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface TickLabels wrapper method implementations
//

#pragma implementation_key(12570)
inline Excel::_ApplicationPtr Excel::TickLabels::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12571)
inline enum XlCreator Excel::TickLabels::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12572)
inline IDispatchPtr Excel::TickLabels::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12573)
inline _variant_t Excel::TickLabels::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12574)
inline Excel::FontPtr Excel::TickLabels::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(12575)
inline _bstr_t Excel::TickLabels::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12576)
inline _bstr_t Excel::TickLabels::GetNumberFormat ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12577)
inline void Excel::TickLabels::PutNumberFormat ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12578)
inline VARIANT_BOOL Excel::TickLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12579)
inline void Excel::TickLabels::PutNumberFormatLinked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12580)
inline _variant_t Excel::TickLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12581)
inline void Excel::TickLabels::PutNumberFormatLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12582)
inline enum XlTickLabelOrientation Excel::TickLabels::GetOrientation ( ) {
    enum XlTickLabelOrientation _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12583)
inline void Excel::TickLabels::PutOrientation ( enum XlTickLabelOrientation _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12584)
inline _variant_t Excel::TickLabels::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12585)
inline long Excel::TickLabels::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12586)
inline void Excel::TickLabels::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12587)
inline _variant_t Excel::TickLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12588)
inline void Excel::TickLabels::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(12589)
inline long Excel::TickLabels::GetDepth ( ) {
    long _result;
    _com_dispatch_method(this, 0x762, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12590)
inline long Excel::TickLabels::GetOffset ( ) {
    long _result;
    _com_dispatch_method(this, 0xfe, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12591)
inline void Excel::TickLabels::PutOffset ( long _arg1 ) {
    _com_dispatch_method(this, 0xfe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12592)
inline long Excel::TickLabels::GetAlignment ( ) {
    long _result;
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12593)
inline void Excel::TickLabels::PutAlignment ( long _arg1 ) {
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface PlotArea wrapper method implementations
//

#pragma implementation_key(12594)
inline Excel::_ApplicationPtr Excel::PlotArea::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12595)
inline enum XlCreator Excel::PlotArea::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12596)
inline IDispatchPtr Excel::PlotArea::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12597)
inline _bstr_t Excel::PlotArea::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12598)
inline _variant_t Excel::PlotArea::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12599)
inline Excel::BorderPtr Excel::PlotArea::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12600)
inline _variant_t Excel::PlotArea::ClearFormats ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12601)
inline double Excel::PlotArea::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12602)
inline void Excel::PlotArea::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12603)
inline Excel::InteriorPtr Excel::PlotArea::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12604)
inline Excel::ChartFillFormatPtr Excel::PlotArea::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12605)
inline double Excel::PlotArea::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12606)
inline void Excel::PlotArea::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12607)
inline double Excel::PlotArea::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12608)
inline void Excel::PlotArea::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12609)
inline double Excel::PlotArea::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12610)
inline void Excel::PlotArea::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12611)
inline double Excel::PlotArea::GetInsideLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x683, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12612)
inline double Excel::PlotArea::GetInsideTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x684, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12613)
inline double Excel::PlotArea::GetInsideWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x685, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12614)
inline double Excel::PlotArea::GetInsideHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x686, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface ChartArea wrapper method implementations
//

#pragma implementation_key(12615)
inline Excel::_ApplicationPtr Excel::ChartArea::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12616)
inline enum XlCreator Excel::ChartArea::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12617)
inline IDispatchPtr Excel::ChartArea::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12618)
inline _bstr_t Excel::ChartArea::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12619)
inline _variant_t Excel::ChartArea::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12620)
inline Excel::BorderPtr Excel::ChartArea::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12621)
inline _variant_t Excel::ChartArea::Clear ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6f, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12622)
inline _variant_t Excel::ChartArea::ClearContents ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x71, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12623)
inline _variant_t Excel::ChartArea::Copy ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12624)
inline Excel::FontPtr Excel::ChartArea::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(12625)
inline VARIANT_BOOL Excel::ChartArea::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12626)
inline void Excel::ChartArea::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12627)
inline _variant_t Excel::ChartArea::ClearFormats ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12628)
inline double Excel::ChartArea::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12629)
inline void Excel::ChartArea::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12630)
inline Excel::InteriorPtr Excel::ChartArea::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12631)
inline Excel::ChartFillFormatPtr Excel::ChartArea::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12632)
inline double Excel::ChartArea::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12633)
inline void Excel::ChartArea::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12634)
inline double Excel::ChartArea::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12635)
inline void Excel::ChartArea::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12636)
inline double Excel::ChartArea::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12637)
inline void Excel::ChartArea::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12638)
inline _variant_t Excel::ChartArea::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12639)
inline void Excel::ChartArea::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Legend wrapper method implementations
//

#pragma implementation_key(12640)
inline Excel::_ApplicationPtr Excel::Legend::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12641)
inline enum XlCreator Excel::Legend::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12642)
inline IDispatchPtr Excel::Legend::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12643)
inline _bstr_t Excel::Legend::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12644)
inline _variant_t Excel::Legend::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12645)
inline Excel::BorderPtr Excel::Legend::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12646)
inline _variant_t Excel::Legend::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12647)
inline Excel::FontPtr Excel::Legend::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(12648)
inline IDispatchPtr Excel::Legend::LegendEntries ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xad, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12649)
inline enum XlLegendPosition Excel::Legend::GetPosition ( ) {
    enum XlLegendPosition _result;
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12650)
inline void Excel::Legend::PutPosition ( enum XlLegendPosition _arg1 ) {
    _com_dispatch_method(this, 0x85, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12651)
inline VARIANT_BOOL Excel::Legend::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12652)
inline void Excel::Legend::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12653)
inline _variant_t Excel::Legend::Clear ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6f, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12654)
inline double Excel::Legend::GetHeight ( ) {
    double _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12655)
inline void Excel::Legend::PutHeight ( double _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12656)
inline Excel::InteriorPtr Excel::Legend::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(12657)
inline Excel::ChartFillFormatPtr Excel::Legend::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(12658)
inline double Excel::Legend::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12659)
inline void Excel::Legend::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12660)
inline double Excel::Legend::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12661)
inline void Excel::Legend::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12662)
inline double Excel::Legend::GetWidth ( ) {
    double _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12663)
inline void Excel::Legend::PutWidth ( double _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(12664)
inline _variant_t Excel::Legend::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12665)
inline void Excel::Legend::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface ErrorBars wrapper method implementations
//

#pragma implementation_key(12666)
inline Excel::_ApplicationPtr Excel::ErrorBars::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12667)
inline enum XlCreator Excel::ErrorBars::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12668)
inline IDispatchPtr Excel::ErrorBars::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12669)
inline _bstr_t Excel::ErrorBars::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12670)
inline _variant_t Excel::ErrorBars::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12671)
inline Excel::BorderPtr Excel::ErrorBars::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12672)
inline _variant_t Excel::ErrorBars::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12673)
inline _variant_t Excel::ErrorBars::ClearFormats ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12674)
inline enum XlEndStyleCap Excel::ErrorBars::GetEndStyle ( ) {
    enum XlEndStyleCap _result;
    _com_dispatch_method(this, 0x464, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12675)
inline void Excel::ErrorBars::PutEndStyle ( enum XlEndStyleCap _arg1 ) {
    _com_dispatch_method(this, 0x464, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface DataTable wrapper method implementations
//

#pragma implementation_key(12676)
inline Excel::_ApplicationPtr Excel::DataTable::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12677)
inline enum XlCreator Excel::DataTable::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12678)
inline IDispatchPtr Excel::DataTable::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12679)
inline VARIANT_BOOL Excel::DataTable::GetShowLegendKey ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12680)
inline void Excel::DataTable::PutShowLegendKey ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12681)
inline VARIANT_BOOL Excel::DataTable::GetHasBorderHorizontal ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x687, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12682)
inline void Excel::DataTable::PutHasBorderHorizontal ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x687, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12683)
inline VARIANT_BOOL Excel::DataTable::GetHasBorderVertical ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x688, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12684)
inline void Excel::DataTable::PutHasBorderVertical ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x688, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12685)
inline VARIANT_BOOL Excel::DataTable::GetHasBorderOutline ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x689, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12686)
inline void Excel::DataTable::PutHasBorderOutline ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x689, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12687)
inline Excel::BorderPtr Excel::DataTable::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(12688)
inline Excel::FontPtr Excel::DataTable::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(12689)
inline HRESULT Excel::DataTable::Select ( ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12690)
inline HRESULT Excel::DataTable::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12691)
inline _variant_t Excel::DataTable::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12692)
inline void Excel::DataTable::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface Phonetic wrapper method implementations
//

#pragma implementation_key(12693)
inline Excel::_ApplicationPtr Excel::Phonetic::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12694)
inline enum XlCreator Excel::Phonetic::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12695)
inline IDispatchPtr Excel::Phonetic::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12696)
inline VARIANT_BOOL Excel::Phonetic::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12697)
inline void Excel::Phonetic::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12698)
inline long Excel::Phonetic::GetCharacterType ( ) {
    long _result;
    _com_dispatch_method(this, 0x68a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12699)
inline void Excel::Phonetic::PutCharacterType ( long _arg1 ) {
    _com_dispatch_method(this, 0x68a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12700)
inline long Excel::Phonetic::GetAlignment ( ) {
    long _result;
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12701)
inline void Excel::Phonetic::PutAlignment ( long _arg1 ) {
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12702)
inline Excel::FontPtr Excel::Phonetic::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(12703)
inline _bstr_t Excel::Phonetic::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12704)
inline void Excel::Phonetic::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface Shape wrapper method implementations
//

#pragma implementation_key(12705)
inline Excel::_ApplicationPtr Excel::Shape::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12706)
inline enum XlCreator Excel::Shape::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12707)
inline IDispatchPtr Excel::Shape::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12708)
inline HRESULT Excel::Shape::Apply ( ) {
    return _com_dispatch_method(this, 0x68b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12709)
inline HRESULT Excel::Shape::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12710)
inline Excel::ShapePtr Excel::Shape::Duplicate ( ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12711)
inline HRESULT Excel::Shape::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    return _com_dispatch_method(this, 0x68c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", FlipCmd);
}

#pragma implementation_key(12712)
inline HRESULT Excel::Shape::IncrementLeft ( float Increment ) {
    return _com_dispatch_method(this, 0x68e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12713)
inline HRESULT Excel::Shape::IncrementRotation ( float Increment ) {
    return _com_dispatch_method(this, 0x690, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12714)
inline HRESULT Excel::Shape::IncrementTop ( float Increment ) {
    return _com_dispatch_method(this, 0x691, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12715)
inline HRESULT Excel::Shape::PickUp ( ) {
    return _com_dispatch_method(this, 0x692, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12716)
inline HRESULT Excel::Shape::RerouteConnections ( ) {
    return _com_dispatch_method(this, 0x693, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12717)
inline HRESULT Excel::Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    return _com_dispatch_method(this, 0x694, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004\x0003\x080c", Factor, RelativeToOriginalSize, &Scale);
}

#pragma implementation_key(12718)
inline HRESULT Excel::Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    return _com_dispatch_method(this, 0x698, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004\x0003\x080c", Factor, RelativeToOriginalSize, &Scale);
}

#pragma implementation_key(12719)
inline HRESULT Excel::Shape::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

#pragma implementation_key(12720)
inline HRESULT Excel::Shape::SetShapesDefaultProperties ( ) {
    return _com_dispatch_method(this, 0x699, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12721)
inline Excel::ShapeRangePtr Excel::Shape::Ungroup ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(12722)
inline HRESULT Excel::Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    return _com_dispatch_method(this, 0x26e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", ZOrderCmd);
}

#pragma implementation_key(12723)
inline Excel::AdjustmentsPtr Excel::Shape::GetAdjustments ( ) {
    struct Adjustments * _result;
    _com_dispatch_method(this, 0x69b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(12724)
inline Excel::TextFramePtr Excel::Shape::GetTextFrame ( ) {
    struct TextFrame * _result;
    _com_dispatch_method(this, 0x69c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TextFramePtr(_result, false);
}

#pragma implementation_key(12725)
inline enum Office::MsoAutoShapeType Excel::Shape::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    _com_dispatch_method(this, 0x69d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12726)
inline void Excel::Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType _arg1 ) {
    _com_dispatch_method(this, 0x69d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12727)
inline Excel::CalloutFormatPtr Excel::Shape::GetCallout ( ) {
    struct CalloutFormat * _result;
    _com_dispatch_method(this, 0x69e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(12728)
inline long Excel::Shape::GetConnectionSiteCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x69f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12729)
inline enum Office::MsoTriState Excel::Shape::GetConnector ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12730)
inline Excel::ConnectorFormatPtr Excel::Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result;
    _com_dispatch_method(this, 0x6a1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(12731)
inline Excel::FillFormatPtr Excel::Shape::GetFill ( ) {
    struct FillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(12732)
inline Excel::GroupShapesPtr Excel::Shape::GetGroupItems ( ) {
    struct GroupShapes * _result;
    _com_dispatch_method(this, 0x6a2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(12733)
inline float Excel::Shape::GetHeight ( ) {
    float _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12734)
inline void Excel::Shape::PutHeight ( float _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12735)
inline enum Office::MsoTriState Excel::Shape::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12736)
inline float Excel::Shape::GetLeft ( ) {
    float _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12737)
inline void Excel::Shape::PutLeft ( float _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12738)
inline Excel::LineFormatPtr Excel::Shape::GetLine ( ) {
    struct LineFormat * _result;
    _com_dispatch_method(this, 0x331, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(12739)
inline enum Office::MsoTriState Excel::Shape::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12740)
inline void Excel::Shape::PutLockAspectRatio ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x6a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12741)
inline _bstr_t Excel::Shape::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12742)
inline void Excel::Shape::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12743)
inline Excel::ShapeNodesPtr Excel::Shape::GetNodes ( ) {
    struct ShapeNodes * _result;
    _com_dispatch_method(this, 0x6a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(12744)
inline float Excel::Shape::GetRotation ( ) {
    float _result;
    _com_dispatch_method(this, 0x3b, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12745)
inline void Excel::Shape::PutRotation ( float _arg1 ) {
    _com_dispatch_method(this, 0x3b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12746)
inline Excel::PictureFormatPtr Excel::Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    _com_dispatch_method(this, 0x65f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(12747)
inline Excel::ShadowFormatPtr Excel::Shape::GetShadow ( ) {
    struct ShadowFormat * _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(12748)
inline Excel::TextEffectFormatPtr Excel::Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    _com_dispatch_method(this, 0x6a6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(12749)
inline Excel::ThreeDFormatPtr Excel::Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result;
    _com_dispatch_method(this, 0x6a7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(12750)
inline float Excel::Shape::GetTop ( ) {
    float _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12751)
inline void Excel::Shape::PutTop ( float _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12752)
inline enum Office::MsoShapeType Excel::Shape::GetType ( ) {
    enum Office::MsoShapeType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12753)
inline enum Office::MsoTriState Excel::Shape::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a8, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12754)
inline _variant_t Excel::Shape::GetVertices ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x26d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12755)
inline enum Office::MsoTriState Excel::Shape::GetVisible ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12756)
inline void Excel::Shape::PutVisible ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12757)
inline float Excel::Shape::GetWidth ( ) {
    float _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12758)
inline void Excel::Shape::PutWidth ( float _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12759)
inline long Excel::Shape::GetZOrderPosition ( ) {
    long _result;
    _com_dispatch_method(this, 0x6a9, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12760)
inline Excel::HyperlinkPtr Excel::Shape::GetHyperlink ( ) {
    struct Hyperlink * _result;
    _com_dispatch_method(this, 0x6aa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(12761)
inline enum Office::MsoBlackWhiteMode Excel::Shape::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    _com_dispatch_method(this, 0x6ab, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12762)
inline void Excel::Shape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode _arg1 ) {
    _com_dispatch_method(this, 0x6ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12763)
inline IDispatchPtr Excel::Shape::GetDrawingObject ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x6ac, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12764)
inline _bstr_t Excel::Shape::GetOnAction ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12765)
inline void Excel::Shape::PutOnAction ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12766)
inline VARIANT_BOOL Excel::Shape::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12767)
inline void Excel::Shape::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12768)
inline Excel::RangePtr Excel::Shape::GetTopLeftCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(12769)
inline Excel::RangePtr Excel::Shape::GetBottomRightCell ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0x267, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(12770)
inline enum XlPlacement Excel::Shape::GetPlacement ( ) {
    enum XlPlacement _result;
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12771)
inline void Excel::Shape::PutPlacement ( enum XlPlacement _arg1 ) {
    _com_dispatch_method(this, 0x269, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12772)
inline HRESULT Excel::Shape::Copy ( ) {
    return _com_dispatch_method(this, 0x227, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12773)
inline HRESULT Excel::Shape::Cut ( ) {
    return _com_dispatch_method(this, 0x235, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12774)
inline HRESULT Excel::Shape::CopyPicture ( const _variant_t & Appearance, const _variant_t & Format ) {
    return _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c", &Appearance, &Format);
}

#pragma implementation_key(12775)
inline Excel::ControlFormatPtr Excel::Shape::GetControlFormat ( ) {
    struct ControlFormat * _result;
    _com_dispatch_method(this, 0x6ad, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ControlFormatPtr(_result, false);
}

#pragma implementation_key(12776)
inline Excel::LinkFormatPtr Excel::Shape::GetLinkFormat ( ) {
    struct LinkFormat * _result;
    _com_dispatch_method(this, 0x6ae, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(12777)
inline Excel::OLEFormatPtr Excel::Shape::GetOLEFormat ( ) {
    struct OLEFormat * _result;
    _com_dispatch_method(this, 0x6af, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(12778)
inline enum XlFormControl Excel::Shape::GetFormControlType ( ) {
    enum XlFormControl _result;
    _com_dispatch_method(this, 0x6b0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12779)
inline _bstr_t Excel::Shape::GetAlternativeText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x763, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12780)
inline void Excel::Shape::PutAlternativeText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x763, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12781)
inline Office::ScriptPtr Excel::Shape::GetScript ( ) {
    struct Office::Script * _result;
    _com_dispatch_method(this, 0x764, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return Office::ScriptPtr(_result, false);
}

#pragma implementation_key(12782)
inline Excel::DiagramNodePtr Excel::Shape::GetDiagramNode ( ) {
    struct DiagramNode * _result;
    _com_dispatch_method(this, 0x875, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(12783)
inline enum Office::MsoTriState Excel::Shape::GetHasDiagramNode ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x876, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12784)
inline Excel::DiagramPtr Excel::Shape::GetDiagram ( ) {
    struct Diagram * _result;
    _com_dispatch_method(this, 0x877, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DiagramPtr(_result, false);
}

#pragma implementation_key(12785)
inline enum Office::MsoTriState Excel::Shape::GetHasDiagram ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x878, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12786)
inline enum Office::MsoTriState Excel::Shape::GetChild ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x879, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12787)
inline Excel::ShapePtr Excel::Shape::GetParentGroup ( ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x87a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12788)
inline Office::CanvasShapesPtr Excel::Shape::GetCanvasItems ( ) {
    struct Office::CanvasShapes * _result;
    _com_dispatch_method(this, 0x87b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return Office::CanvasShapesPtr(_result, false);
}

#pragma implementation_key(12789)
inline long Excel::Shape::GetID ( ) {
    long _result;
    _com_dispatch_method(this, 0x23a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12790)
inline HRESULT Excel::Shape::CanvasCropLeft ( float Increment ) {
    return _com_dispatch_method(this, 0x87c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12791)
inline HRESULT Excel::Shape::CanvasCropTop ( float Increment ) {
    return _com_dispatch_method(this, 0x87d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12792)
inline HRESULT Excel::Shape::CanvasCropRight ( float Increment ) {
    return _com_dispatch_method(this, 0x87e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12793)
inline HRESULT Excel::Shape::CanvasCropBottom ( float Increment ) {
    return _com_dispatch_method(this, 0x87f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

//
// dispinterface Shapes wrapper method implementations
//

#pragma implementation_key(12794)
inline Excel::_ApplicationPtr Excel::Shapes::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12795)
inline enum XlCreator Excel::Shapes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12796)
inline IDispatchPtr Excel::Shapes::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12797)
inline long Excel::Shapes::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12798)
inline Excel::ShapePtr Excel::Shapes::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12799)
inline Excel::ShapePtr Excel::Shapes::_Default ( const _variant_t & Index ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12800)
inline IUnknownPtr Excel::Shapes::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(12801)
inline Excel::ShapePtr Excel::Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6b1, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Type, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12802)
inline Excel::ShapePtr Excel::Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6b2, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Type, BeginX, BeginY, EndX, EndY);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12803)
inline Excel::ShapePtr Excel::Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6b7, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &SafeArrayOfPoints);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12804)
inline Excel::ShapePtr Excel::Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6b9, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Orientation, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12805)
inline Excel::ShapePtr Excel::Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6ba, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0004\x0004\x0004\x0004", BeginX, BeginY, EndX, EndY);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12806)
inline Excel::ShapePtr Excel::Shapes::AddPicture ( _bstr_t Filename, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6bb, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x0003\x0003\x0004\x0004\x0004\x0004", (BSTR)Filename, LinkToFile, SaveWithDocument, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12807)
inline Excel::ShapePtr Excel::Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6be, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &SafeArrayOfPoints);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12808)
inline Excel::ShapePtr Excel::Shapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6bf, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Type, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12809)
inline Excel::ShapePtr Excel::Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6c0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0008\x0008\x0004\x0003\x0003\x0004\x0004", PresetTextEffect, (BSTR)Text, (BSTR)FontName, FontSize, FontBold, FontItalic, Left, Top);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12810)
inline Excel::ShapePtr Excel::Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6c6, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Orientation, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12811)
inline Excel::FreeformBuilderPtr Excel::Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result;
    _com_dispatch_method(this, 0x6c7, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004", EditingType, X1, Y1);
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(12812)
inline Excel::ShapeRangePtr Excel::Shapes::GetRange ( const _variant_t & Index ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(12813)
inline HRESULT Excel::Shapes::SelectAll ( ) {
    return _com_dispatch_method(this, 0x6c9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12814)
inline Excel::ShapePtr Excel::Shapes::AddFormControl ( enum XlFormControl Type, long Left, long Top, long Width, long Height ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6ca, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0003\x0003\x0003\x0003", Type, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12815)
inline Excel::ShapePtr Excel::Shapes::AddOLEObject ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6cb, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c\x080c", &ClassType, &Filename, &Link, &DisplayAsIcon, &IconFileName, &IconIndex, &IconLabel, &Left, &Top, &Width, &Height);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12816)
inline Excel::ShapePtr Excel::Shapes::AddDiagram ( enum Office::MsoDiagramType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x880, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0004\x0004\x0004\x0004", Type, Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12817)
inline Excel::ShapePtr Excel::Shapes::AddCanvas ( float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x881, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0004\x0004\x0004\x0004", Left, Top, Width, Height);
    return ShapePtr(_result, false);
}

//
// dispinterface ShapeRange wrapper method implementations
//

#pragma implementation_key(12818)
inline Excel::_ApplicationPtr Excel::ShapeRange::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12819)
inline enum XlCreator Excel::ShapeRange::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12820)
inline IDispatchPtr Excel::ShapeRange::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12821)
inline long Excel::ShapeRange::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12822)
inline Excel::ShapePtr Excel::ShapeRange::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12823)
inline Excel::ShapePtr Excel::ShapeRange::_Default ( const _variant_t & Index ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12824)
inline IUnknownPtr Excel::ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(12825)
inline HRESULT Excel::ShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo ) {
    return _com_dispatch_method(this, 0x6cc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", AlignCmd, RelativeTo);
}

#pragma implementation_key(12826)
inline HRESULT Excel::ShapeRange::Apply ( ) {
    return _com_dispatch_method(this, 0x68b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12827)
inline HRESULT Excel::ShapeRange::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12828)
inline HRESULT Excel::ShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo ) {
    return _com_dispatch_method(this, 0x6ce, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", DistributeCmd, RelativeTo);
}

#pragma implementation_key(12829)
inline Excel::ShapeRangePtr Excel::ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(12830)
inline HRESULT Excel::ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    return _com_dispatch_method(this, 0x68c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", FlipCmd);
}

#pragma implementation_key(12831)
inline HRESULT Excel::ShapeRange::IncrementLeft ( float Increment ) {
    return _com_dispatch_method(this, 0x68e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12832)
inline HRESULT Excel::ShapeRange::IncrementRotation ( float Increment ) {
    return _com_dispatch_method(this, 0x690, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12833)
inline HRESULT Excel::ShapeRange::IncrementTop ( float Increment ) {
    return _com_dispatch_method(this, 0x691, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12834)
inline Excel::ShapePtr Excel::ShapeRange::Group ( ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x2e, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12835)
inline HRESULT Excel::ShapeRange::PickUp ( ) {
    return _com_dispatch_method(this, 0x692, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12836)
inline HRESULT Excel::ShapeRange::RerouteConnections ( ) {
    return _com_dispatch_method(this, 0x693, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12837)
inline Excel::ShapePtr Excel::ShapeRange::Regroup ( ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6d0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12838)
inline HRESULT Excel::ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    return _com_dispatch_method(this, 0x694, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004\x0003\x080c", Factor, RelativeToOriginalSize, &Scale);
}

#pragma implementation_key(12839)
inline HRESULT Excel::ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale ) {
    return _com_dispatch_method(this, 0x698, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004\x0003\x080c", Factor, RelativeToOriginalSize, &Scale);
}

#pragma implementation_key(12840)
inline HRESULT Excel::ShapeRange::Select ( const _variant_t & Replace ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Replace);
}

#pragma implementation_key(12841)
inline HRESULT Excel::ShapeRange::SetShapesDefaultProperties ( ) {
    return _com_dispatch_method(this, 0x699, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12842)
inline Excel::ShapeRangePtr Excel::ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(12843)
inline HRESULT Excel::ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    return _com_dispatch_method(this, 0x26e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", ZOrderCmd);
}

#pragma implementation_key(12844)
inline Excel::AdjustmentsPtr Excel::ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result;
    _com_dispatch_method(this, 0x69b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(12845)
inline Excel::TextFramePtr Excel::ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result;
    _com_dispatch_method(this, 0x69c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TextFramePtr(_result, false);
}

#pragma implementation_key(12846)
inline enum Office::MsoAutoShapeType Excel::ShapeRange::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    _com_dispatch_method(this, 0x69d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12847)
inline void Excel::ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType _arg1 ) {
    _com_dispatch_method(this, 0x69d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12848)
inline Excel::CalloutFormatPtr Excel::ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result;
    _com_dispatch_method(this, 0x69e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(12849)
inline long Excel::ShapeRange::GetConnectionSiteCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x69f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12850)
inline enum Office::MsoTriState Excel::ShapeRange::GetConnector ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12851)
inline Excel::ConnectorFormatPtr Excel::ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result;
    _com_dispatch_method(this, 0x6a1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(12852)
inline Excel::FillFormatPtr Excel::ShapeRange::GetFill ( ) {
    struct FillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(12853)
inline Excel::GroupShapesPtr Excel::ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result;
    _com_dispatch_method(this, 0x6a2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(12854)
inline float Excel::ShapeRange::GetHeight ( ) {
    float _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12855)
inline void Excel::ShapeRange::PutHeight ( float _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12856)
inline enum Office::MsoTriState Excel::ShapeRange::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12857)
inline float Excel::ShapeRange::GetLeft ( ) {
    float _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12858)
inline void Excel::ShapeRange::PutLeft ( float _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12859)
inline Excel::LineFormatPtr Excel::ShapeRange::GetLine ( ) {
    struct LineFormat * _result;
    _com_dispatch_method(this, 0x331, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(12860)
inline enum Office::MsoTriState Excel::ShapeRange::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12861)
inline void Excel::ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x6a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12862)
inline _bstr_t Excel::ShapeRange::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12863)
inline void Excel::ShapeRange::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12864)
inline Excel::ShapeNodesPtr Excel::ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result;
    _com_dispatch_method(this, 0x6a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(12865)
inline float Excel::ShapeRange::GetRotation ( ) {
    float _result;
    _com_dispatch_method(this, 0x3b, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12866)
inline void Excel::ShapeRange::PutRotation ( float _arg1 ) {
    _com_dispatch_method(this, 0x3b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12867)
inline Excel::PictureFormatPtr Excel::ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    _com_dispatch_method(this, 0x65f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(12868)
inline Excel::ShadowFormatPtr Excel::ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(12869)
inline Excel::TextEffectFormatPtr Excel::ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    _com_dispatch_method(this, 0x6a6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(12870)
inline Excel::ThreeDFormatPtr Excel::ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result;
    _com_dispatch_method(this, 0x6a7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(12871)
inline float Excel::ShapeRange::GetTop ( ) {
    float _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12872)
inline void Excel::ShapeRange::PutTop ( float _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12873)
inline enum Office::MsoShapeType Excel::ShapeRange::GetType ( ) {
    enum Office::MsoShapeType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12874)
inline enum Office::MsoTriState Excel::ShapeRange::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a8, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12875)
inline _variant_t Excel::ShapeRange::GetVertices ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x26d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(12876)
inline enum Office::MsoTriState Excel::ShapeRange::GetVisible ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12877)
inline void Excel::ShapeRange::PutVisible ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12878)
inline float Excel::ShapeRange::GetWidth ( ) {
    float _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12879)
inline void Excel::ShapeRange::PutWidth ( float _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12880)
inline long Excel::ShapeRange::GetZOrderPosition ( ) {
    long _result;
    _com_dispatch_method(this, 0x6a9, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12881)
inline enum Office::MsoBlackWhiteMode Excel::ShapeRange::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    _com_dispatch_method(this, 0x6ab, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12882)
inline void Excel::ShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode _arg1 ) {
    _com_dispatch_method(this, 0x6ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12883)
inline _bstr_t Excel::ShapeRange::GetAlternativeText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x763, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12884)
inline void Excel::ShapeRange::PutAlternativeText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x763, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12885)
inline Excel::DiagramNodePtr Excel::ShapeRange::GetDiagramNode ( ) {
    struct DiagramNode * _result;
    _com_dispatch_method(this, 0x875, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(12886)
inline enum Office::MsoTriState Excel::ShapeRange::GetHasDiagramNode ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x876, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12887)
inline Excel::DiagramPtr Excel::ShapeRange::GetDiagram ( ) {
    struct Diagram * _result;
    _com_dispatch_method(this, 0x877, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DiagramPtr(_result, false);
}

#pragma implementation_key(12888)
inline enum Office::MsoTriState Excel::ShapeRange::GetHasDiagram ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x878, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12889)
inline enum Office::MsoTriState Excel::ShapeRange::GetChild ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x879, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12890)
inline Excel::ShapePtr Excel::ShapeRange::GetParentGroup ( ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x87a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12891)
inline Office::CanvasShapesPtr Excel::ShapeRange::GetCanvasItems ( ) {
    struct Office::CanvasShapes * _result;
    _com_dispatch_method(this, 0x87b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return Office::CanvasShapesPtr(_result, false);
}

#pragma implementation_key(12892)
inline long Excel::ShapeRange::GetID ( ) {
    long _result;
    _com_dispatch_method(this, 0x23a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12893)
inline HRESULT Excel::ShapeRange::CanvasCropLeft ( float Increment ) {
    return _com_dispatch_method(this, 0x87c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12894)
inline HRESULT Excel::ShapeRange::CanvasCropTop ( float Increment ) {
    return _com_dispatch_method(this, 0x87d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12895)
inline HRESULT Excel::ShapeRange::CanvasCropRight ( float Increment ) {
    return _com_dispatch_method(this, 0x87e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

#pragma implementation_key(12896)
inline HRESULT Excel::ShapeRange::CanvasCropBottom ( float Increment ) {
    return _com_dispatch_method(this, 0x87f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0004", Increment);
}

//
// dispinterface GroupShapes wrapper method implementations
//

#pragma implementation_key(12897)
inline Excel::_ApplicationPtr Excel::GroupShapes::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12898)
inline enum XlCreator Excel::GroupShapes::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12899)
inline IDispatchPtr Excel::GroupShapes::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12900)
inline long Excel::GroupShapes::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12901)
inline Excel::ShapePtr Excel::GroupShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12902)
inline Excel::ShapePtr Excel::GroupShapes::_Default ( const _variant_t & Index ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12903)
inline IUnknownPtr Excel::GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(12904)
inline Excel::ShapeRangePtr Excel::GroupShapes::GetRange ( const _variant_t & Index ) {
    struct ShapeRange * _result;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ShapeRangePtr(_result, false);
}

//
// dispinterface TextFrame wrapper method implementations
//

#pragma implementation_key(12905)
inline Excel::_ApplicationPtr Excel::TextFrame::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12906)
inline enum XlCreator Excel::TextFrame::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12907)
inline IDispatchPtr Excel::TextFrame::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12908)
inline float Excel::TextFrame::GetMarginBottom ( ) {
    float _result;
    _com_dispatch_method(this, 0x6d1, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12909)
inline void Excel::TextFrame::PutMarginBottom ( float _arg1 ) {
    _com_dispatch_method(this, 0x6d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12910)
inline float Excel::TextFrame::GetMarginLeft ( ) {
    float _result;
    _com_dispatch_method(this, 0x6d2, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12911)
inline void Excel::TextFrame::PutMarginLeft ( float _arg1 ) {
    _com_dispatch_method(this, 0x6d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12912)
inline float Excel::TextFrame::GetMarginRight ( ) {
    float _result;
    _com_dispatch_method(this, 0x6d3, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12913)
inline void Excel::TextFrame::PutMarginRight ( float _arg1 ) {
    _com_dispatch_method(this, 0x6d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12914)
inline float Excel::TextFrame::GetMarginTop ( ) {
    float _result;
    _com_dispatch_method(this, 0x6d4, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12915)
inline void Excel::TextFrame::PutMarginTop ( float _arg1 ) {
    _com_dispatch_method(this, 0x6d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(12916)
inline enum Office::MsoTextOrientation Excel::TextFrame::GetOrientation ( ) {
    enum Office::MsoTextOrientation _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12917)
inline void Excel::TextFrame::PutOrientation ( enum Office::MsoTextOrientation _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12918)
inline Excel::CharactersPtr Excel::TextFrame::Characters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(12919)
inline enum XlHAlign Excel::TextFrame::GetHorizontalAlignment ( ) {
    enum XlHAlign _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12920)
inline void Excel::TextFrame::PutHorizontalAlignment ( enum XlHAlign _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12921)
inline enum XlVAlign Excel::TextFrame::GetVerticalAlignment ( ) {
    enum XlVAlign _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12922)
inline void Excel::TextFrame::PutVerticalAlignment ( enum XlVAlign _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12923)
inline VARIANT_BOOL Excel::TextFrame::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12924)
inline void Excel::TextFrame::PutAutoSize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x266, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12925)
inline long Excel::TextFrame::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12926)
inline void Excel::TextFrame::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12927)
inline VARIANT_BOOL Excel::TextFrame::GetAutoMargins ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x6d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12928)
inline void Excel::TextFrame::PutAutoMargins ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x6d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface ConnectorFormat wrapper method implementations
//

#pragma implementation_key(12929)
inline Excel::_ApplicationPtr Excel::ConnectorFormat::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12930)
inline enum XlCreator Excel::ConnectorFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12931)
inline IDispatchPtr Excel::ConnectorFormat::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12932)
inline HRESULT Excel::ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, long ConnectionSite ) {
    return _com_dispatch_method(this, 0x6d6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", ConnectedShape, ConnectionSite);
}

#pragma implementation_key(12933)
inline HRESULT Excel::ConnectorFormat::BeginDisconnect ( ) {
    return _com_dispatch_method(this, 0x6d9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12934)
inline HRESULT Excel::ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, long ConnectionSite ) {
    return _com_dispatch_method(this, 0x6da, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", ConnectedShape, ConnectionSite);
}

#pragma implementation_key(12935)
inline HRESULT Excel::ConnectorFormat::EndDisconnect ( ) {
    return _com_dispatch_method(this, 0x6db, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12936)
inline enum Office::MsoTriState Excel::ConnectorFormat::GetBeginConnected ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6dc, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12937)
inline Excel::ShapePtr Excel::ConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6dd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12938)
inline long Excel::ConnectorFormat::GetBeginConnectionSite ( ) {
    long _result;
    _com_dispatch_method(this, 0x6de, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12939)
inline enum Office::MsoTriState Excel::ConnectorFormat::GetEndConnected ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6df, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12940)
inline Excel::ShapePtr Excel::ConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

#pragma implementation_key(12941)
inline long Excel::ConnectorFormat::GetEndConnectionSite ( ) {
    long _result;
    _com_dispatch_method(this, 0x6e1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12942)
inline enum Office::MsoConnectorType Excel::ConnectorFormat::GetType ( ) {
    enum Office::MsoConnectorType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12943)
inline void Excel::ConnectorFormat::PutType ( enum Office::MsoConnectorType _arg1 ) {
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface FreeformBuilder wrapper method implementations
//

#pragma implementation_key(12944)
inline Excel::_ApplicationPtr Excel::FreeformBuilder::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12945)
inline enum XlCreator Excel::FreeformBuilder::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12946)
inline IDispatchPtr Excel::FreeformBuilder::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12947)
inline HRESULT Excel::FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, const _variant_t & X2, const _variant_t & Y2, const _variant_t & X3, const _variant_t & Y3 ) {
    return _com_dispatch_method(this, 0x6e2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004\x080c\x080c\x080c\x080c", SegmentType, EditingType, X1, Y1, &X2, &Y2, &X3, &Y3);
}

#pragma implementation_key(12948)
inline Excel::ShapePtr Excel::FreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result;
    _com_dispatch_method(this, 0x6e6, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return ShapePtr(_result, false);
}

//
// dispinterface ControlFormat wrapper method implementations
//

#pragma implementation_key(12949)
inline Excel::_ApplicationPtr Excel::ControlFormat::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12950)
inline enum XlCreator Excel::ControlFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12951)
inline IDispatchPtr Excel::ControlFormat::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12952)
inline HRESULT Excel::ControlFormat::AddItem ( _bstr_t Text, const _variant_t & Index ) {
    return _com_dispatch_method(this, 0x353, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c", (BSTR)Text, &Index);
}

#pragma implementation_key(12953)
inline HRESULT Excel::ControlFormat::RemoveAllItems ( ) {
    return _com_dispatch_method(this, 0x355, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12954)
inline HRESULT Excel::ControlFormat::RemoveItem ( long Index, const _variant_t & Count ) {
    return _com_dispatch_method(this, 0x354, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x080c", Index, &Count);
}

#pragma implementation_key(12955)
inline long Excel::ControlFormat::GetDropDownLines ( ) {
    long _result;
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12956)
inline void Excel::ControlFormat::PutDropDownLines ( long _arg1 ) {
    _com_dispatch_method(this, 0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12957)
inline VARIANT_BOOL Excel::ControlFormat::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12958)
inline void Excel::ControlFormat::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12959)
inline long Excel::ControlFormat::GetLargeChange ( ) {
    long _result;
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12960)
inline void Excel::ControlFormat::PutLargeChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12961)
inline _bstr_t Excel::ControlFormat::GetLinkedCell ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12962)
inline void Excel::ControlFormat::PutLinkedCell ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x422, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12963)
inline _variant_t Excel::ControlFormat::List ( const _variant_t & Index ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x35d, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, 
        L"\x080c", &Index);
    return _variant_t(_result, false);
}

#pragma implementation_key(12964)
inline long Excel::ControlFormat::GetListCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x351, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12965)
inline void Excel::ControlFormat::PutListCount ( long _arg1 ) {
    _com_dispatch_method(this, 0x351, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12966)
inline _bstr_t Excel::ControlFormat::GetListFillRange ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12967)
inline void Excel::ControlFormat::PutListFillRange ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(12968)
inline long Excel::ControlFormat::GetListIndex ( ) {
    long _result;
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12969)
inline void Excel::ControlFormat::PutListIndex ( long _arg1 ) {
    _com_dispatch_method(this, 0x352, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12970)
inline VARIANT_BOOL Excel::ControlFormat::GetLockedText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12971)
inline void Excel::ControlFormat::PutLockedText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x268, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12972)
inline long Excel::ControlFormat::GetMax ( ) {
    long _result;
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12973)
inline void Excel::ControlFormat::PutMax ( long _arg1 ) {
    _com_dispatch_method(this, 0x34a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12974)
inline long Excel::ControlFormat::GetMin ( ) {
    long _result;
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12975)
inline void Excel::ControlFormat::PutMin ( long _arg1 ) {
    _com_dispatch_method(this, 0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12976)
inline long Excel::ControlFormat::GetMultiSelect ( ) {
    long _result;
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12977)
inline void Excel::ControlFormat::PutMultiSelect ( long _arg1 ) {
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12978)
inline VARIANT_BOOL Excel::ControlFormat::GetPrintObject ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12979)
inline void Excel::ControlFormat::PutPrintObject ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x26a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12980)
inline long Excel::ControlFormat::GetSmallChange ( ) {
    long _result;
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12981)
inline void Excel::ControlFormat::PutSmallChange ( long _arg1 ) {
    _com_dispatch_method(this, 0x34c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12982)
inline long Excel::ControlFormat::Get_Default ( ) {
    long _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12983)
inline void Excel::ControlFormat::Put_Default ( long _arg1 ) {
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(12984)
inline long Excel::ControlFormat::GetValue ( ) {
    long _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12985)
inline void Excel::ControlFormat::PutValue ( long _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface OLEFormat wrapper method implementations
//

#pragma implementation_key(12986)
inline Excel::_ApplicationPtr Excel::OLEFormat::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12987)
inline enum XlCreator Excel::OLEFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12988)
inline IDispatchPtr Excel::OLEFormat::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12989)
inline HRESULT Excel::OLEFormat::Activate ( ) {
    return _com_dispatch_method(this, 0x130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12990)
inline IDispatchPtr Excel::OLEFormat::GetObject ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x419, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12991)
inline _bstr_t Excel::OLEFormat::GetprogID ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5f3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(12992)
inline HRESULT Excel::OLEFormat::Verb ( const _variant_t & Verb ) {
    return _com_dispatch_method(this, 0x25e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Verb);
}

//
// dispinterface LinkFormat wrapper method implementations
//

#pragma implementation_key(12993)
inline Excel::_ApplicationPtr Excel::LinkFormat::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(12994)
inline enum XlCreator Excel::LinkFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12995)
inline IDispatchPtr Excel::LinkFormat::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(12996)
inline VARIANT_BOOL Excel::LinkFormat::GetAutoUpdate ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x418, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12997)
inline void Excel::LinkFormat::PutAutoUpdate ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x418, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(12998)
inline VARIANT_BOOL Excel::LinkFormat::GetLocked ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(12999)
inline void Excel::LinkFormat::PutLocked ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13000)
inline HRESULT Excel::LinkFormat::Update ( ) {
    return _com_dispatch_method(this, 0x2a8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface PublishObjects wrapper method implementations
//

#pragma implementation_key(13001)
inline Excel::_ApplicationPtr Excel::PublishObjects::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13002)
inline enum XlCreator Excel::PublishObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13003)
inline IDispatchPtr Excel::PublishObjects::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13004)
inline Excel::PublishObjectPtr Excel::PublishObjects::Add ( enum XlSourceType SourceType, _bstr_t Filename, const _variant_t & Sheet, const _variant_t & Source, const _variant_t & HtmlType, const _variant_t & DivID, const _variant_t & Title ) {
    struct PublishObject * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x0008\x080c\x080c\x080c\x080c\x080c", SourceType, (BSTR)Filename, &Sheet, &Source, &HtmlType, &DivID, &Title);
    return PublishObjectPtr(_result, false);
}

#pragma implementation_key(13005)
inline long Excel::PublishObjects::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13006)
inline Excel::PublishObjectPtr Excel::PublishObjects::GetItem ( const _variant_t & Index ) {
    struct PublishObject * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PublishObjectPtr(_result, false);
}

#pragma implementation_key(13007)
inline Excel::PublishObjectPtr Excel::PublishObjects::Get_Default ( const _variant_t & Index ) {
    struct PublishObject * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PublishObjectPtr(_result, false);
}

#pragma implementation_key(13008)
inline IUnknownPtr Excel::PublishObjects::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(13009)
inline HRESULT Excel::PublishObjects::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(13010)
inline HRESULT Excel::PublishObjects::Publish ( ) {
    return _com_dispatch_method(this, 0x767, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface OLEDBError wrapper method implementations
//

#pragma implementation_key(13011)
inline Excel::_ApplicationPtr Excel::OLEDBError::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13012)
inline enum XlCreator Excel::OLEDBError::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13013)
inline IDispatchPtr Excel::OLEDBError::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13014)
inline _bstr_t Excel::OLEDBError::GetSqlState ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x643, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13015)
inline _bstr_t Excel::OLEDBError::GetErrorString ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13016)
inline long Excel::OLEDBError::GetNative ( ) {
    long _result;
    _com_dispatch_method(this, 0x769, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13017)
inline long Excel::OLEDBError::GetNumber ( ) {
    long _result;
    _com_dispatch_method(this, 0x1c3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13018)
inline long Excel::OLEDBError::GetStage ( ) {
    long _result;
    _com_dispatch_method(this, 0x76a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface OLEDBErrors wrapper method implementations
//

#pragma implementation_key(13019)
inline Excel::_ApplicationPtr Excel::OLEDBErrors::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13020)
inline enum XlCreator Excel::OLEDBErrors::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13021)
inline IDispatchPtr Excel::OLEDBErrors::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13022)
inline long Excel::OLEDBErrors::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13023)
inline Excel::OLEDBErrorPtr Excel::OLEDBErrors::Item ( long Index ) {
    struct OLEDBError * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return OLEDBErrorPtr(_result, false);
}

#pragma implementation_key(13024)
inline Excel::OLEDBErrorPtr Excel::OLEDBErrors::Get_Default ( long Index ) {
    struct OLEDBError * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return OLEDBErrorPtr(_result, false);
}

#pragma implementation_key(13025)
inline IUnknownPtr Excel::OLEDBErrors::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Phonetics wrapper method implementations
//

#pragma implementation_key(13026)
inline Excel::_ApplicationPtr Excel::Phonetics::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13027)
inline enum XlCreator Excel::Phonetics::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13028)
inline IDispatchPtr Excel::Phonetics::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13029)
inline long Excel::Phonetics::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13030)
inline long Excel::Phonetics::GetStart ( ) {
    long _result;
    _com_dispatch_method(this, 0x260, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13031)
inline long Excel::Phonetics::GetLength ( ) {
    long _result;
    _com_dispatch_method(this, 0x261, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13032)
inline VARIANT_BOOL Excel::Phonetics::GetVisible ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13033)
inline void Excel::Phonetics::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13034)
inline long Excel::Phonetics::GetCharacterType ( ) {
    long _result;
    _com_dispatch_method(this, 0x68a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13035)
inline void Excel::Phonetics::PutCharacterType ( long _arg1 ) {
    _com_dispatch_method(this, 0x68a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13036)
inline long Excel::Phonetics::GetAlignment ( ) {
    long _result;
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13037)
inline void Excel::Phonetics::PutAlignment ( long _arg1 ) {
    _com_dispatch_method(this, 0x1c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13038)
inline Excel::FontPtr Excel::Phonetics::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(13039)
inline IDispatchPtr Excel::Phonetics::GetItem ( long Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13040)
inline HRESULT Excel::Phonetics::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(13041)
inline HRESULT Excel::Phonetics::Add ( long Start, long Length, _bstr_t Text ) {
    return _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0008", Start, Length, (BSTR)Text);
}

#pragma implementation_key(13042)
inline _bstr_t Excel::Phonetics::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13043)
inline void Excel::Phonetics::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(13044)
inline IDispatchPtr Excel::Phonetics::Get_Default ( long Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13045)
inline IUnknownPtr Excel::Phonetics::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface PivotLayout wrapper method implementations
//

#pragma implementation_key(13046)
inline Excel::_ApplicationPtr Excel::PivotLayout::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13047)
inline enum XlCreator Excel::PivotLayout::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13048)
inline IDispatchPtr Excel::PivotLayout::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13049)
inline IDispatchPtr Excel::PivotLayout::GetColumnFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2c9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13050)
inline IDispatchPtr Excel::PivotLayout::GetDataFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2cb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13051)
inline IDispatchPtr Excel::PivotLayout::GetPageFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13052)
inline IDispatchPtr Excel::PivotLayout::GetRowFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2c8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13053)
inline IDispatchPtr Excel::PivotLayout::GetHiddenFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2c7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13054)
inline IDispatchPtr Excel::PivotLayout::GetVisibleFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2c6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13055)
inline IDispatchPtr Excel::PivotLayout::GetPivotFields ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x2ce, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13056)
inline Excel::CubeFieldsPtr Excel::PivotLayout::GetCubeFields ( ) {
    struct CubeFields * _result;
    _com_dispatch_method(this, 0x72f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CubeFieldsPtr(_result, false);
}

#pragma implementation_key(13057)
inline Excel::PivotCachePtr Excel::PivotLayout::GetPivotCache ( ) {
    struct PivotCache * _result;
    _com_dispatch_method(this, 0x5d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotCachePtr(_result, false);
}

#pragma implementation_key(13058)
inline Excel::PivotTablePtr Excel::PivotLayout::GetPivotTable ( ) {
    struct PivotTable * _result;
    _com_dispatch_method(this, 0x2cc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(13059)
inline _bstr_t Excel::PivotLayout::GetInnerDetail ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x2ba, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13060)
inline void Excel::PivotLayout::PutInnerDetail ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x2ba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(13061)
inline HRESULT Excel::PivotLayout::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AppendField ) {
    return _com_dispatch_method(this, 0x2c4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c\x080c\x080c\x080c", &RowFields, &ColumnFields, &PageFields, &AppendField);
}

//
// dispinterface DisplayUnitLabel wrapper method implementations
//

#pragma implementation_key(13062)
inline Excel::_ApplicationPtr Excel::DisplayUnitLabel::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13063)
inline enum XlCreator Excel::DisplayUnitLabel::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13064)
inline IDispatchPtr Excel::DisplayUnitLabel::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13065)
inline _bstr_t Excel::DisplayUnitLabel::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13066)
inline _variant_t Excel::DisplayUnitLabel::Select ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13067)
inline Excel::BorderPtr Excel::DisplayUnitLabel::GetBorder ( ) {
    struct Border * _result;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BorderPtr(_result, false);
}

#pragma implementation_key(13068)
inline _variant_t Excel::DisplayUnitLabel::Delete ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13069)
inline Excel::InteriorPtr Excel::DisplayUnitLabel::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(13070)
inline Excel::ChartFillFormatPtr Excel::DisplayUnitLabel::GetFill ( ) {
    struct ChartFillFormat * _result;
    _com_dispatch_method(this, 0x67f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(13071)
inline _bstr_t Excel::DisplayUnitLabel::GetCaption ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13072)
inline void Excel::DisplayUnitLabel::PutCaption ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(13073)
inline Excel::CharactersPtr Excel::DisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct Characters * _result;
    _com_dispatch_method(this, 0x25b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x080c\x080c", &Start, &Length);
    return CharactersPtr(_result, false);
}

#pragma implementation_key(13074)
inline Excel::FontPtr Excel::DisplayUnitLabel::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(13075)
inline _variant_t Excel::DisplayUnitLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13076)
inline void Excel::DisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13077)
inline double Excel::DisplayUnitLabel::GetLeft ( ) {
    double _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13078)
inline void Excel::DisplayUnitLabel::PutLeft ( double _arg1 ) {
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(13079)
inline _variant_t Excel::DisplayUnitLabel::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13080)
inline void Excel::DisplayUnitLabel::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13081)
inline VARIANT_BOOL Excel::DisplayUnitLabel::GetShadow ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13082)
inline void Excel::DisplayUnitLabel::PutShadow ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13083)
inline _bstr_t Excel::DisplayUnitLabel::GetText ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13084)
inline void Excel::DisplayUnitLabel::PutText ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(13085)
inline double Excel::DisplayUnitLabel::GetTop ( ) {
    double _result;
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13086)
inline void Excel::DisplayUnitLabel::PutTop ( double _arg1 ) {
    _com_dispatch_method(this, 0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0005", _arg1);
}

#pragma implementation_key(13087)
inline _variant_t Excel::DisplayUnitLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13088)
inline void Excel::DisplayUnitLabel::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13089)
inline long Excel::DisplayUnitLabel::GetReadingOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13090)
inline void Excel::DisplayUnitLabel::PutReadingOrder ( long _arg1 ) {
    _com_dispatch_method(this, 0x3cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13091)
inline _variant_t Excel::DisplayUnitLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13092)
inline void Excel::DisplayUnitLabel::PutAutoScaleFont ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x5f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

//
// dispinterface CellFormat wrapper method implementations
//

#pragma implementation_key(13093)
inline Excel::_ApplicationPtr Excel::CellFormat::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13094)
inline enum XlCreator Excel::CellFormat::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13095)
inline IDispatchPtr Excel::CellFormat::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13096)
inline Excel::BordersPtr Excel::CellFormat::GetBorders ( ) {
    struct Borders * _result;
    _com_dispatch_method(this, 0x1b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return BordersPtr(_result, false);
}

#pragma implementation_key(13097)
inline void Excel::CellFormat::PutRefBorders ( struct Borders * _arg1 ) {
    _com_dispatch_method(this, 0x1b3, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

#pragma implementation_key(13098)
inline Excel::FontPtr Excel::CellFormat::GetFont ( ) {
    struct Font * _result;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return FontPtr(_result, false);
}

#pragma implementation_key(13099)
inline void Excel::CellFormat::PutRefFont ( struct Font * _arg1 ) {
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

#pragma implementation_key(13100)
inline Excel::InteriorPtr Excel::CellFormat::GetInterior ( ) {
    struct Interior * _result;
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return InteriorPtr(_result, false);
}

#pragma implementation_key(13101)
inline void Excel::CellFormat::PutRefInterior ( struct Interior * _arg1 ) {
    _com_dispatch_method(this, 0x81, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

#pragma implementation_key(13102)
inline _variant_t Excel::CellFormat::GetNumberFormat ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13103)
inline void Excel::CellFormat::PutNumberFormat ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13104)
inline _variant_t Excel::CellFormat::GetNumberFormatLocal ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13105)
inline void Excel::CellFormat::PutNumberFormatLocal ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x449, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13106)
inline _variant_t Excel::CellFormat::GetAddIndent ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13107)
inline void Excel::CellFormat::PutAddIndent ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x427, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13108)
inline _variant_t Excel::CellFormat::GetIndentLevel ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13109)
inline void Excel::CellFormat::PutIndentLevel ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13110)
inline _variant_t Excel::CellFormat::GetHorizontalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13111)
inline void Excel::CellFormat::PutHorizontalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13112)
inline _variant_t Excel::CellFormat::GetVerticalAlignment ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13113)
inline void Excel::CellFormat::PutVerticalAlignment ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13114)
inline _variant_t Excel::CellFormat::GetOrientation ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13115)
inline void Excel::CellFormat::PutOrientation ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x86, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13116)
inline _variant_t Excel::CellFormat::GetShrinkToFit ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13117)
inline void Excel::CellFormat::PutShrinkToFit ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xd1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13118)
inline _variant_t Excel::CellFormat::GetWrapText ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x114, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13119)
inline void Excel::CellFormat::PutWrapText ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x114, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13120)
inline _variant_t Excel::CellFormat::GetLocked ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13121)
inline void Excel::CellFormat::PutLocked ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13122)
inline _variant_t Excel::CellFormat::GetFormulaHidden ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x106, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13123)
inline void Excel::CellFormat::PutFormulaHidden ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x106, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13124)
inline _variant_t Excel::CellFormat::GetMergeCells ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13125)
inline void Excel::CellFormat::PutMergeCells ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13126)
inline HRESULT Excel::CellFormat::Clear ( ) {
    return _com_dispatch_method(this, 0x6f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface UsedObjects wrapper method implementations
//

#pragma implementation_key(13127)
inline Excel::_ApplicationPtr Excel::UsedObjects::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13128)
inline enum XlCreator Excel::UsedObjects::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13129)
inline IDispatchPtr Excel::UsedObjects::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13130)
inline long Excel::UsedObjects::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13131)
inline IUnknownPtr Excel::UsedObjects::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(13132)
inline IDispatchPtr Excel::UsedObjects::Get_Default ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13133)
inline IDispatchPtr Excel::UsedObjects::GetItem ( const _variant_t & Index ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return IDispatchPtr(_result, false);
}

//
// dispinterface CustomProperties wrapper method implementations
//

#pragma implementation_key(13134)
inline Excel::_ApplicationPtr Excel::CustomProperties::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13135)
inline enum XlCreator Excel::CustomProperties::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13136)
inline IDispatchPtr Excel::CustomProperties::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13137)
inline Excel::CustomPropertyPtr Excel::CustomProperties::Add ( _bstr_t Name, const _variant_t & Value ) {
    struct CustomProperty * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x000c", (BSTR)Name, &Value);
    return CustomPropertyPtr(_result, false);
}

#pragma implementation_key(13138)
inline long Excel::CustomProperties::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13139)
inline Excel::CustomPropertyPtr Excel::CustomProperties::Get_Default ( const _variant_t & Index ) {
    struct CustomProperty * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return CustomPropertyPtr(_result, false);
}

#pragma implementation_key(13140)
inline Excel::CustomPropertyPtr Excel::CustomProperties::GetItem ( const _variant_t & Index ) {
    struct CustomProperty * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return CustomPropertyPtr(_result, false);
}

#pragma implementation_key(13141)
inline IUnknownPtr Excel::CustomProperties::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface CustomProperty wrapper method implementations
//

#pragma implementation_key(13142)
inline Excel::_ApplicationPtr Excel::CustomProperty::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13143)
inline enum XlCreator Excel::CustomProperty::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13144)
inline IDispatchPtr Excel::CustomProperty::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13145)
inline _bstr_t Excel::CustomProperty::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13146)
inline void Excel::CustomProperty::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(13147)
inline _variant_t Excel::CustomProperty::GetValue ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13148)
inline void Excel::CustomProperty::PutValue ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13149)
inline _variant_t Excel::CustomProperty::Get_Default ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13150)
inline HRESULT Excel::CustomProperty::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface CalculatedMembers wrapper method implementations
//

#pragma implementation_key(13151)
inline Excel::_ApplicationPtr Excel::CalculatedMembers::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13152)
inline enum XlCreator Excel::CalculatedMembers::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13153)
inline IDispatchPtr Excel::CalculatedMembers::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13154)
inline long Excel::CalculatedMembers::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13155)
inline Excel::CalculatedMemberPtr Excel::CalculatedMembers::GetItem ( const _variant_t & Index ) {
    struct CalculatedMember * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return CalculatedMemberPtr(_result, false);
}

#pragma implementation_key(13156)
inline Excel::CalculatedMemberPtr Excel::CalculatedMembers::Get_Default ( const _variant_t & Index ) {
    struct CalculatedMember * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return CalculatedMemberPtr(_result, false);
}

#pragma implementation_key(13157)
inline IUnknownPtr Excel::CalculatedMembers::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(13158)
inline Excel::CalculatedMemberPtr Excel::CalculatedMembers::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & SolveOrder, const _variant_t & Type ) {
    struct CalculatedMember * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x0008\x080c\x080c", (BSTR)Name, (BSTR)Formula, &SolveOrder, &Type);
    return CalculatedMemberPtr(_result, false);
}

//
// dispinterface CalculatedMember wrapper method implementations
//

#pragma implementation_key(13159)
inline Excel::_ApplicationPtr Excel::CalculatedMember::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13160)
inline enum XlCreator Excel::CalculatedMember::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13161)
inline IDispatchPtr Excel::CalculatedMember::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13162)
inline _bstr_t Excel::CalculatedMember::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13163)
inline _bstr_t Excel::CalculatedMember::GetFormula ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13164)
inline _bstr_t Excel::CalculatedMember::GetSourceName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x2d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13165)
inline long Excel::CalculatedMember::GetSolveOrder ( ) {
    long _result;
    _com_dispatch_method(this, 0x88b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13166)
inline VARIANT_BOOL Excel::CalculatedMember::GetIsValid ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x88c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13167)
inline _bstr_t Excel::CalculatedMember::Get_Default ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13168)
inline HRESULT Excel::CalculatedMember::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(13169)
inline enum XlCalculatedMemberType Excel::CalculatedMember::GetType ( ) {
    enum XlCalculatedMemberType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Watches wrapper method implementations
//

#pragma implementation_key(13170)
inline Excel::_ApplicationPtr Excel::Watches::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13171)
inline enum XlCreator Excel::Watches::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13172)
inline IDispatchPtr Excel::Watches::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13173)
inline Excel::WatchPtr Excel::Watches::Add ( const _variant_t & Source ) {
    struct Watch * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Source);
    return WatchPtr(_result, false);
}

#pragma implementation_key(13174)
inline long Excel::Watches::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13175)
inline Excel::WatchPtr Excel::Watches::Get_Default ( const _variant_t & Index ) {
    struct Watch * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return WatchPtr(_result, false);
}

#pragma implementation_key(13176)
inline Excel::WatchPtr Excel::Watches::GetItem ( const _variant_t & Index ) {
    struct Watch * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return WatchPtr(_result, false);
}

#pragma implementation_key(13177)
inline IUnknownPtr Excel::Watches::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(13178)
inline HRESULT Excel::Watches::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface Watch wrapper method implementations
//

#pragma implementation_key(13179)
inline Excel::_ApplicationPtr Excel::Watch::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13180)
inline enum XlCreator Excel::Watch::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13181)
inline IDispatchPtr Excel::Watch::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13182)
inline HRESULT Excel::Watch::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(13183)
inline _variant_t Excel::Watch::GetSource ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0xde, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

//
// dispinterface PivotCell wrapper method implementations
//

#pragma implementation_key(13184)
inline Excel::_ApplicationPtr Excel::PivotCell::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13185)
inline enum XlCreator Excel::PivotCell::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13186)
inline IDispatchPtr Excel::PivotCell::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13187)
inline enum XlPivotCellType Excel::PivotCell::GetPivotCellType ( ) {
    enum XlPivotCellType _result;
    _com_dispatch_method(this, 0x88d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13188)
inline Excel::PivotTablePtr Excel::PivotCell::GetPivotTable ( ) {
    struct PivotTable * _result;
    _com_dispatch_method(this, 0x2cc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotTablePtr(_result, false);
}

#pragma implementation_key(13189)
inline Excel::PivotFieldPtr Excel::PivotCell::GetDataField ( ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x82b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(13190)
inline Excel::PivotFieldPtr Excel::PivotCell::GetPivotField ( ) {
    struct PivotField * _result;
    _com_dispatch_method(this, 0x2db, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotFieldPtr(_result, false);
}

#pragma implementation_key(13191)
inline Excel::PivotItemPtr Excel::PivotCell::GetPivotItem ( ) {
    struct PivotItem * _result;
    _com_dispatch_method(this, 0x2e4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(13192)
inline Excel::PivotItemListPtr Excel::PivotCell::GetRowItems ( ) {
    struct PivotItemList * _result;
    _com_dispatch_method(this, 0x88e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotItemListPtr(_result, false);
}

#pragma implementation_key(13193)
inline Excel::PivotItemListPtr Excel::PivotCell::GetColumnItems ( ) {
    struct PivotItemList * _result;
    _com_dispatch_method(this, 0x88f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return PivotItemListPtr(_result, false);
}

#pragma implementation_key(13194)
inline Excel::RangePtr Excel::PivotCell::GetRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(13195)
inline _bstr_t Excel::PivotCell::GetDummy18 ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x890, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13196)
inline enum XlConsolidationFunction Excel::PivotCell::GetCustomSubtotalFunction ( ) {
    enum XlConsolidationFunction _result;
    _com_dispatch_method(this, 0x891, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Graphic wrapper method implementations
//

#pragma implementation_key(13197)
inline Excel::_ApplicationPtr Excel::Graphic::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13198)
inline enum XlCreator Excel::Graphic::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13199)
inline IDispatchPtr Excel::Graphic::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13200)
inline float Excel::Graphic::GetBrightness ( ) {
    float _result;
    _com_dispatch_method(this, 0x892, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13201)
inline void Excel::Graphic::PutBrightness ( float _arg1 ) {
    _com_dispatch_method(this, 0x892, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(13202)
inline enum Office::MsoPictureColorType Excel::Graphic::GetColorType ( ) {
    enum Office::MsoPictureColorType _result;
    _com_dispatch_method(this, 0x893, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13203)
inline void Excel::Graphic::PutColorType ( enum Office::MsoPictureColorType _arg1 ) {
    _com_dispatch_method(this, 0x893, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13204)
inline float Excel::Graphic::GetContrast ( ) {
    float _result;
    _com_dispatch_method(this, 0x894, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13205)
inline void Excel::Graphic::PutContrast ( float _arg1 ) {
    _com_dispatch_method(this, 0x894, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(13206)
inline float Excel::Graphic::GetCropBottom ( ) {
    float _result;
    _com_dispatch_method(this, 0x895, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13207)
inline void Excel::Graphic::PutCropBottom ( float _arg1 ) {
    _com_dispatch_method(this, 0x895, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(13208)
inline float Excel::Graphic::GetCropLeft ( ) {
    float _result;
    _com_dispatch_method(this, 0x896, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13209)
inline void Excel::Graphic::PutCropLeft ( float _arg1 ) {
    _com_dispatch_method(this, 0x896, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(13210)
inline float Excel::Graphic::GetCropRight ( ) {
    float _result;
    _com_dispatch_method(this, 0x897, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13211)
inline void Excel::Graphic::PutCropRight ( float _arg1 ) {
    _com_dispatch_method(this, 0x897, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(13212)
inline float Excel::Graphic::GetCropTop ( ) {
    float _result;
    _com_dispatch_method(this, 0x898, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13213)
inline void Excel::Graphic::PutCropTop ( float _arg1 ) {
    _com_dispatch_method(this, 0x898, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(13214)
inline _bstr_t Excel::Graphic::GetFilename ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x587, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13215)
inline void Excel::Graphic::PutFilename ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x587, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(13216)
inline float Excel::Graphic::GetHeight ( ) {
    float _result;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13217)
inline void Excel::Graphic::PutHeight ( float _arg1 ) {
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

#pragma implementation_key(13218)
inline enum Office::MsoTriState Excel::Graphic::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x6a4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13219)
inline void Excel::Graphic::PutLockAspectRatio ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x6a4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13220)
inline float Excel::Graphic::GetWidth ( ) {
    float _result;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13221)
inline void Excel::Graphic::PutWidth ( float _arg1 ) {
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

//
// dispinterface AutoRecover wrapper method implementations
//

#pragma implementation_key(13222)
inline Excel::_ApplicationPtr Excel::AutoRecover::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13223)
inline enum XlCreator Excel::AutoRecover::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13224)
inline IDispatchPtr Excel::AutoRecover::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13225)
inline VARIANT_BOOL Excel::AutoRecover::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13226)
inline void Excel::AutoRecover::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13227)
inline long Excel::AutoRecover::GetTime ( ) {
    long _result;
    _com_dispatch_method(this, 0x18a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13228)
inline void Excel::AutoRecover::PutTime ( long _arg1 ) {
    _com_dispatch_method(this, 0x18a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13229)
inline _bstr_t Excel::AutoRecover::GetPath ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x123, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13230)
inline void Excel::AutoRecover::PutPath ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x123, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

//
// dispinterface ErrorCheckingOptions wrapper method implementations
//

#pragma implementation_key(13231)
inline Excel::_ApplicationPtr Excel::ErrorCheckingOptions::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13232)
inline enum XlCreator Excel::ErrorCheckingOptions::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13233)
inline IDispatchPtr Excel::ErrorCheckingOptions::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13234)
inline VARIANT_BOOL Excel::ErrorCheckingOptions::GetBackgroundChecking ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x899, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13235)
inline void Excel::ErrorCheckingOptions::PutBackgroundChecking ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x899, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13236)
inline enum XlColorIndex Excel::ErrorCheckingOptions::GetIndicatorColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x89a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13237)
inline void Excel::ErrorCheckingOptions::PutIndicatorColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x89a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13238)
inline VARIANT_BOOL Excel::ErrorCheckingOptions::GetEvaluateToError ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x89b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13239)
inline void Excel::ErrorCheckingOptions::PutEvaluateToError ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x89b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13240)
inline VARIANT_BOOL Excel::ErrorCheckingOptions::GetTextDate ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x89c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13241)
inline void Excel::ErrorCheckingOptions::PutTextDate ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x89c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13242)
inline VARIANT_BOOL Excel::ErrorCheckingOptions::GetNumberAsText ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x89d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13243)
inline void Excel::ErrorCheckingOptions::PutNumberAsText ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x89d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13244)
inline VARIANT_BOOL Excel::ErrorCheckingOptions::GetInconsistentFormula ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x89e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13245)
inline void Excel::ErrorCheckingOptions::PutInconsistentFormula ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x89e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13246)
inline VARIANT_BOOL Excel::ErrorCheckingOptions::GetOmittedCells ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x89f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13247)
inline void Excel::ErrorCheckingOptions::PutOmittedCells ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x89f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13248)
inline VARIANT_BOOL Excel::ErrorCheckingOptions::GetUnlockedFormulaCells ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8a0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13249)
inline void Excel::ErrorCheckingOptions::PutUnlockedFormulaCells ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13250)
inline VARIANT_BOOL Excel::ErrorCheckingOptions::GetEmptyCellReferences ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8a1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13251)
inline void Excel::ErrorCheckingOptions::PutEmptyCellReferences ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Errors wrapper method implementations
//

#pragma implementation_key(13252)
inline Excel::_ApplicationPtr Excel::Errors::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13253)
inline enum XlCreator Excel::Errors::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13254)
inline IDispatchPtr Excel::Errors::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13255)
inline Excel::ErrorPtr Excel::Errors::GetItem ( const _variant_t & Index ) {
    struct Error * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ErrorPtr(_result, false);
}

#pragma implementation_key(13256)
inline Excel::ErrorPtr Excel::Errors::Get_Default ( const _variant_t & Index ) {
    struct Error * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return ErrorPtr(_result, false);
}

//
// dispinterface Error wrapper method implementations
//

#pragma implementation_key(13257)
inline Excel::_ApplicationPtr Excel::Error::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13258)
inline enum XlCreator Excel::Error::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13259)
inline IDispatchPtr Excel::Error::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13260)
inline VARIANT_BOOL Excel::Error::GetValue ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13261)
inline VARIANT_BOOL Excel::Error::GetIgnore ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8a2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13262)
inline void Excel::Error::PutIgnore ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8a2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface SmartTagAction wrapper method implementations
//

#pragma implementation_key(13263)
inline Excel::_ApplicationPtr Excel::SmartTagAction::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13264)
inline enum XlCreator Excel::SmartTagAction::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13265)
inline IDispatchPtr Excel::SmartTagAction::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13266)
inline _bstr_t Excel::SmartTagAction::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13267)
inline HRESULT Excel::SmartTagAction::Execute ( ) {
    return _com_dispatch_method(this, 0x8a3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(13268)
inline _bstr_t Excel::SmartTagAction::Get_Default ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

//
// dispinterface SmartTagActions wrapper method implementations
//

#pragma implementation_key(13269)
inline Excel::_ApplicationPtr Excel::SmartTagActions::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13270)
inline enum XlCreator Excel::SmartTagActions::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13271)
inline IDispatchPtr Excel::SmartTagActions::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13272)
inline long Excel::SmartTagActions::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13273)
inline Excel::SmartTagActionPtr Excel::SmartTagActions::Get_Default ( const _variant_t & Index ) {
    struct SmartTagAction * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return SmartTagActionPtr(_result, false);
}

#pragma implementation_key(13274)
inline Excel::SmartTagActionPtr Excel::SmartTagActions::GetItem ( const _variant_t & Index ) {
    struct SmartTagAction * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return SmartTagActionPtr(_result, false);
}

#pragma implementation_key(13275)
inline IUnknownPtr Excel::SmartTagActions::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface SmartTag wrapper method implementations
//

#pragma implementation_key(13276)
inline Excel::_ApplicationPtr Excel::SmartTag::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13277)
inline enum XlCreator Excel::SmartTag::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13278)
inline IDispatchPtr Excel::SmartTag::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13279)
inline _bstr_t Excel::SmartTag::GetDownloadURL ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13280)
inline _bstr_t Excel::SmartTag::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13281)
inline _bstr_t Excel::SmartTag::Get_Default ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13282)
inline _bstr_t Excel::SmartTag::GetXML ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13283)
inline Excel::RangePtr Excel::SmartTag::GetRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(13284)
inline HRESULT Excel::SmartTag::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(13285)
inline Excel::SmartTagActionsPtr Excel::SmartTag::GetSmartTagActions ( ) {
    struct SmartTagActions * _result;
    _com_dispatch_method(this, 0x8a6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return SmartTagActionsPtr(_result, false);
}

#pragma implementation_key(13286)
inline Excel::CustomPropertiesPtr Excel::SmartTag::GetProperties ( ) {
    struct CustomProperties * _result;
    _com_dispatch_method(this, 0x857, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CustomPropertiesPtr(_result, false);
}

//
// dispinterface SmartTags wrapper method implementations
//

#pragma implementation_key(13287)
inline Excel::_ApplicationPtr Excel::SmartTags::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13288)
inline enum XlCreator Excel::SmartTags::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13289)
inline IDispatchPtr Excel::SmartTags::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13290)
inline Excel::SmartTagPtr Excel::SmartTags::Add ( _bstr_t SmartTagType ) {
    struct SmartTag * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008", (BSTR)SmartTagType);
    return SmartTagPtr(_result, false);
}

#pragma implementation_key(13291)
inline long Excel::SmartTags::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13292)
inline Excel::SmartTagPtr Excel::SmartTags::Get_Default ( const _variant_t & Index ) {
    struct SmartTag * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return SmartTagPtr(_result, false);
}

#pragma implementation_key(13293)
inline IUnknownPtr Excel::SmartTags::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface SmartTagRecognizer wrapper method implementations
//

#pragma implementation_key(13294)
inline Excel::_ApplicationPtr Excel::SmartTagRecognizer::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13295)
inline enum XlCreator Excel::SmartTagRecognizer::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13296)
inline IDispatchPtr Excel::SmartTagRecognizer::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13297)
inline VARIANT_BOOL Excel::SmartTagRecognizer::GetEnabled ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13298)
inline void Excel::SmartTagRecognizer::PutEnabled ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13299)
inline _bstr_t Excel::SmartTagRecognizer::GetprogID ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8a8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13300)
inline _bstr_t Excel::SmartTagRecognizer::Get_Default ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13301)
inline _bstr_t Excel::SmartTagRecognizer::GetFullName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x121, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

//
// dispinterface SmartTagRecognizers wrapper method implementations
//

#pragma implementation_key(13302)
inline Excel::_ApplicationPtr Excel::SmartTagRecognizers::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13303)
inline enum XlCreator Excel::SmartTagRecognizers::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13304)
inline IDispatchPtr Excel::SmartTagRecognizers::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13305)
inline long Excel::SmartTagRecognizers::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13306)
inline Excel::SmartTagRecognizerPtr Excel::SmartTagRecognizers::GetItem ( const _variant_t & Index ) {
    struct SmartTagRecognizer * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return SmartTagRecognizerPtr(_result, false);
}

#pragma implementation_key(13307)
inline Excel::SmartTagRecognizerPtr Excel::SmartTagRecognizers::Get_Default ( const _variant_t & Index ) {
    struct SmartTagRecognizer * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return SmartTagRecognizerPtr(_result, false);
}

#pragma implementation_key(13308)
inline IUnknownPtr Excel::SmartTagRecognizers::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(13309)
inline VARIANT_BOOL Excel::SmartTagRecognizers::GetRecognize ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8a9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13310)
inline void Excel::SmartTagRecognizers::PutRecognize ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8a9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface SmartTagOptions wrapper method implementations
//

#pragma implementation_key(13311)
inline Excel::_ApplicationPtr Excel::SmartTagOptions::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13312)
inline enum XlCreator Excel::SmartTagOptions::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13313)
inline IDispatchPtr Excel::SmartTagOptions::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13314)
inline enum XlSmartTagDisplayMode Excel::SmartTagOptions::GetDisplaySmartTags ( ) {
    enum XlSmartTagDisplayMode _result;
    _com_dispatch_method(this, 0x8aa, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13315)
inline void Excel::SmartTagOptions::PutDisplaySmartTags ( enum XlSmartTagDisplayMode _arg1 ) {
    _com_dispatch_method(this, 0x8aa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13316)
inline VARIANT_BOOL Excel::SmartTagOptions::GetEmbedSmartTags ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8ab, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13317)
inline void Excel::SmartTagOptions::PutEmbedSmartTags ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8ab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface SpellingOptions wrapper method implementations
//

#pragma implementation_key(13318)
inline long Excel::SpellingOptions::GetDictLang ( ) {
    long _result;
    _com_dispatch_method(this, 0x8ac, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13319)
inline void Excel::SpellingOptions::PutDictLang ( long _arg1 ) {
    _com_dispatch_method(this, 0x8ac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13320)
inline _bstr_t Excel::SpellingOptions::GetUserDict ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x8ad, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13321)
inline void Excel::SpellingOptions::PutUserDict ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8ad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(13322)
inline VARIANT_BOOL Excel::SpellingOptions::GetIgnoreCaps ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8ae, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13323)
inline void Excel::SpellingOptions::PutIgnoreCaps ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8ae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13324)
inline VARIANT_BOOL Excel::SpellingOptions::GetSuggestMainOnly ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8af, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13325)
inline void Excel::SpellingOptions::PutSuggestMainOnly ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8af, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13326)
inline VARIANT_BOOL Excel::SpellingOptions::GetIgnoreMixedDigits ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8b0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13327)
inline void Excel::SpellingOptions::PutIgnoreMixedDigits ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8b0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13328)
inline VARIANT_BOOL Excel::SpellingOptions::GetIgnoreFileNames ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8b1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13329)
inline void Excel::SpellingOptions::PutIgnoreFileNames ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8b1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13330)
inline VARIANT_BOOL Excel::SpellingOptions::GetGermanPostReform ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8b2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13331)
inline void Excel::SpellingOptions::PutGermanPostReform ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8b2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13332)
inline VARIANT_BOOL Excel::SpellingOptions::GetKoreanCombineAux ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8b3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13333)
inline void Excel::SpellingOptions::PutKoreanCombineAux ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8b3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13334)
inline VARIANT_BOOL Excel::SpellingOptions::GetKoreanUseAutoChangeList ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8b4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13335)
inline void Excel::SpellingOptions::PutKoreanUseAutoChangeList ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8b4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13336)
inline VARIANT_BOOL Excel::SpellingOptions::GetKoreanProcessCompound ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8b5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13337)
inline void Excel::SpellingOptions::PutKoreanProcessCompound ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8b5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13338)
inline enum XlHebrewModes Excel::SpellingOptions::GetHebrewModes ( ) {
    enum XlHebrewModes _result;
    _com_dispatch_method(this, 0x8b6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13339)
inline void Excel::SpellingOptions::PutHebrewModes ( enum XlHebrewModes _arg1 ) {
    _com_dispatch_method(this, 0x8b6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13340)
inline enum XlArabicModes Excel::SpellingOptions::GetArabicModes ( ) {
    enum XlArabicModes _result;
    _com_dispatch_method(this, 0x8b7, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13341)
inline void Excel::SpellingOptions::PutArabicModes ( enum XlArabicModes _arg1 ) {
    _com_dispatch_method(this, 0x8b7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface Speech wrapper method implementations
//

#pragma implementation_key(13342)
inline HRESULT Excel::Speech::Speak ( _bstr_t Text, const _variant_t & SpeakAsync, const _variant_t & SpeakXML, const _variant_t & Purge ) {
    return _com_dispatch_method(this, 0x7e1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x080c\x080c\x080c", (BSTR)Text, &SpeakAsync, &SpeakXML, &Purge);
}

#pragma implementation_key(13343)
inline enum XlSpeakDirection Excel::Speech::GetDirection ( ) {
    enum XlSpeakDirection _result;
    _com_dispatch_method(this, 0xa8, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13344)
inline void Excel::Speech::PutDirection ( enum XlSpeakDirection _arg1 ) {
    _com_dispatch_method(this, 0xa8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13345)
inline VARIANT_BOOL Excel::Speech::GetSpeakCellOnEnter ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x8bb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13346)
inline void Excel::Speech::PutSpeakCellOnEnter ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x8bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

//
// dispinterface Protection wrapper method implementations
//

#pragma implementation_key(13347)
inline VARIANT_BOOL Excel::Protection::GetAllowFormattingCells ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7f0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13348)
inline VARIANT_BOOL Excel::Protection::GetAllowFormattingColumns ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7f1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13349)
inline VARIANT_BOOL Excel::Protection::GetAllowFormattingRows ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7f2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13350)
inline VARIANT_BOOL Excel::Protection::GetAllowInsertingColumns ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7f3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13351)
inline VARIANT_BOOL Excel::Protection::GetAllowInsertingRows ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7f4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13352)
inline VARIANT_BOOL Excel::Protection::GetAllowInsertingHyperlinks ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7f5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13353)
inline VARIANT_BOOL Excel::Protection::GetAllowDeletingColumns ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13354)
inline VARIANT_BOOL Excel::Protection::GetAllowDeletingRows ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7f7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13355)
inline VARIANT_BOOL Excel::Protection::GetAllowSorting ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13356)
inline VARIANT_BOOL Excel::Protection::GetAllowFiltering ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7f9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13357)
inline VARIANT_BOOL Excel::Protection::GetAllowUsingPivotTables ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7fa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13358)
inline Excel::AllowEditRangesPtr Excel::Protection::GetAllowEditRanges ( ) {
    struct AllowEditRanges * _result;
    _com_dispatch_method(this, 0x8bc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return AllowEditRangesPtr(_result, false);
}

//
// dispinterface PivotItemList wrapper method implementations
//

#pragma implementation_key(13359)
inline Excel::_ApplicationPtr Excel::PivotItemList::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13360)
inline enum XlCreator Excel::PivotItemList::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13361)
inline IDispatchPtr Excel::PivotItemList::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13362)
inline long Excel::PivotItemList::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13363)
inline Excel::PivotItemPtr Excel::PivotItemList::Item ( const _variant_t & Index ) {
    struct PivotItem * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(13364)
inline Excel::PivotItemPtr Excel::PivotItemList::Get_Default ( const _variant_t & Field ) {
    struct PivotItem * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Field);
    return PivotItemPtr(_result, false);
}

#pragma implementation_key(13365)
inline IUnknownPtr Excel::PivotItemList::_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_METHOD, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface Tab wrapper method implementations
//

#pragma implementation_key(13366)
inline Excel::_ApplicationPtr Excel::Tab::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13367)
inline enum XlCreator Excel::Tab::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13368)
inline IDispatchPtr Excel::Tab::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13369)
inline _variant_t Excel::Tab::GetColor ( ) {
    VARIANT _result;
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

#pragma implementation_key(13370)
inline void Excel::Tab::PutColor ( const _variant_t & _arg1 ) {
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000c", &_arg1);
}

#pragma implementation_key(13371)
inline enum XlColorIndex Excel::Tab::GetColorIndex ( ) {
    enum XlColorIndex _result;
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13372)
inline void Excel::Tab::PutColorIndex ( enum XlColorIndex _arg1 ) {
    _com_dispatch_method(this, 0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// dispinterface AllowEditRanges wrapper method implementations
//

#pragma implementation_key(13373)
inline long Excel::AllowEditRanges::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13374)
inline Excel::AllowEditRangePtr Excel::AllowEditRanges::GetItem ( const _variant_t & Index ) {
    struct AllowEditRange * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return AllowEditRangePtr(_result, false);
}

#pragma implementation_key(13375)
inline Excel::AllowEditRangePtr Excel::AllowEditRanges::Add ( _bstr_t Title, struct Range * Range, const _variant_t & Password ) {
    struct AllowEditRange * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x0009\x080c", (BSTR)Title, Range, &Password);
    return AllowEditRangePtr(_result, false);
}

#pragma implementation_key(13376)
inline Excel::AllowEditRangePtr Excel::AllowEditRanges::Get_Default ( const _variant_t & Index ) {
    struct AllowEditRange * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return AllowEditRangePtr(_result, false);
}

#pragma implementation_key(13377)
inline IUnknownPtr Excel::AllowEditRanges::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface AllowEditRange wrapper method implementations
//

#pragma implementation_key(13378)
inline _bstr_t Excel::AllowEditRange::GetTitle ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0xc7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13379)
inline void Excel::AllowEditRange::PutTitle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(13380)
inline Excel::RangePtr Excel::AllowEditRange::GetRange ( ) {
    struct Range * _result;
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return RangePtr(_result, false);
}

#pragma implementation_key(13381)
inline void Excel::AllowEditRange::PutRefRange ( struct Range * _arg1 ) {
    _com_dispatch_method(this, 0xc5, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

#pragma implementation_key(13382)
inline HRESULT Excel::AllowEditRange::ChangePassword ( _bstr_t Password ) {
    return _com_dispatch_method(this, 0x8bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Password);
}

#pragma implementation_key(13383)
inline HRESULT Excel::AllowEditRange::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(13384)
inline HRESULT Excel::AllowEditRange::Unprotect ( const _variant_t & Password ) {
    return _com_dispatch_method(this, 0x11d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x080c", &Password);
}

#pragma implementation_key(13385)
inline Excel::UserAccessListPtr Excel::AllowEditRange::GetUsers ( ) {
    struct UserAccessList * _result;
    _com_dispatch_method(this, 0x8be, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return UserAccessListPtr(_result, false);
}

//
// dispinterface UserAccessList wrapper method implementations
//

#pragma implementation_key(13386)
inline long Excel::UserAccessList::GetCount ( ) {
    long _result;
    _com_dispatch_method(this, 0x76, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13387)
inline Excel::UserAccessPtr Excel::UserAccessList::GetItem ( const _variant_t & Index ) {
    struct UserAccess * _result;
    _com_dispatch_method(this, 0xaa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return UserAccessPtr(_result, false);
}

#pragma implementation_key(13388)
inline Excel::UserAccessPtr Excel::UserAccessList::Add ( _bstr_t Name, VARIANT_BOOL AllowEdit ) {
    struct UserAccess * _result;
    _com_dispatch_method(this, 0xb5, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0008\x000b", (BSTR)Name, AllowEdit);
    return UserAccessPtr(_result, false);
}

#pragma implementation_key(13389)
inline HRESULT Excel::UserAccessList::DeleteAll ( ) {
    return _com_dispatch_method(this, 0x8bf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(13390)
inline Excel::UserAccessPtr Excel::UserAccessList::Get_Default ( const _variant_t & Index ) {
    struct UserAccess * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &Index);
    return UserAccessPtr(_result, false);
}

#pragma implementation_key(13391)
inline IUnknownPtr Excel::UserAccessList::Get_NewEnum ( ) {
    IUnknown * _result;
    _com_dispatch_method(this, 0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

//
// dispinterface UserAccess wrapper method implementations
//

#pragma implementation_key(13392)
inline _bstr_t Excel::UserAccess::GetName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(13393)
inline VARIANT_BOOL Excel::UserAccess::GetAllowEdit ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x7e4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13394)
inline void Excel::UserAccess::PutAllowEdit ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x7e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

#pragma implementation_key(13395)
inline HRESULT Excel::UserAccess::Delete ( ) {
    return _com_dispatch_method(this, 0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface RTD wrapper method implementations
//

#pragma implementation_key(13396)
inline long Excel::RTD::GetThrottleInterval ( ) {
    long _result;
    _com_dispatch_method(this, 0x8c0, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13397)
inline void Excel::RTD::PutThrottleInterval ( long _arg1 ) {
    _com_dispatch_method(this, 0x8c0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13398)
inline HRESULT Excel::RTD::RefreshData ( ) {
    return _com_dispatch_method(this, 0x8c1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(13399)
inline HRESULT Excel::RTD::RestartServers ( ) {
    return _com_dispatch_method(this, 0x8c2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface Diagram wrapper method implementations
//

#pragma implementation_key(13400)
inline Excel::_ApplicationPtr Excel::Diagram::GetApplication ( ) {
    struct _Application * _result;
    _com_dispatch_method(this, 0x94, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13401)
inline enum XlCreator Excel::Diagram::GetCreator ( ) {
    enum XlCreator _result;
    _com_dispatch_method(this, 0x95, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13402)
inline IDispatchPtr Excel::Diagram::GetParent ( ) {
    IDispatch * _result;
    _com_dispatch_method(this, 0x96, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(13403)
inline Excel::DiagramNodesPtr Excel::Diagram::GetNodes ( ) {
    struct DiagramNodes * _result;
    _com_dispatch_method(this, 0x6a5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return DiagramNodesPtr(_result, false);
}

#pragma implementation_key(13404)
inline enum Office::MsoDiagramType Excel::Diagram::GetType ( ) {
    enum Office::MsoDiagramType _result;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13405)
inline enum Office::MsoTriState Excel::Diagram::GetAutoLayout ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x8c3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13406)
inline void Excel::Diagram::PutAutoLayout ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x8c3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13407)
inline enum Office::MsoTriState Excel::Diagram::GetReverse ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x8c4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13408)
inline void Excel::Diagram::PutReverse ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x8c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13409)
inline enum Office::MsoTriState Excel::Diagram::GetAutoFormat ( ) {
    enum Office::MsoTriState _result;
    _com_dispatch_method(this, 0x72, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(13410)
inline void Excel::Diagram::PutAutoFormat ( enum Office::MsoTriState _arg1 ) {
    _com_dispatch_method(this, 0x72, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(13411)
inline HRESULT Excel::Diagram::Convert ( enum Office::MsoDiagramType Type ) {
    return _com_dispatch_method(this, 0x416, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", Type);
}

//
// interface IDummy wrapper method implementations
//

#pragma implementation_key(13412)
inline HRESULT Excel::IDummy::_ActiveSheetOrChart ( ) {
    HRESULT _hr = raw__ActiveSheetOrChart();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(13413)
inline HRESULT Excel::IDummy::ignorethis ( ) {
    HRESULT _hr = raw_ignorethis();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(13414)
inline HRESULT Excel::IDummy::ChDir ( ) {
    HRESULT _hr = raw_ChDir();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(13415)
inline HRESULT Excel::IDummy::DoScript ( ) {
    HRESULT _hr = raw_DoScript();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(13416)
inline HRESULT Excel::IDummy::DirectObject ( ) {
    HRESULT _hr = raw_DirectObject();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(13417)
inline HRESULT Excel::IDummy::RefreshDocument ( ) {
    HRESULT _hr = raw_RefreshDocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
